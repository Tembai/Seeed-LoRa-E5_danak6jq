
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ad58  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e7c  0801ae90  0801ae90  0002ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd0c  0801bd0c  00030134  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd0c  0801bd0c  0002bd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd14  0801bd14  00030134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd14  0801bd14  0002bd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd18  0801bd18  0002bd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0801bd1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001808  20000134  0801be50  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000193c  0801be50  0003193c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006131a  00000000  00000000  0003015e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b6c4  00000000  00000000  00091478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003448  00000000  00000000  0009cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003030  00000000  00000000  0009ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000285f6  00000000  00000000  000a2fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003eb2c  00000000  00000000  000cb5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc676  00000000  00000000  0010a0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d724  00000000  00000000  001d67a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000134 	.word	0x20000134
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ae78 	.word	0x0801ae78

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000138 	.word	0x20000138
 8000174:	0801ae78 	.word	0x0801ae78

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


		APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <Sensor_Init+0x18>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fce6 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
		I2C_id();
 8000e60:	f000 f804 	bl	8000e6c <I2C_id>

	return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801ae90 	.word	0x0801ae90

08000e6c <I2C_id>:

    return;
}


void I2C_id(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000e72:	2308      	movs	r3, #8
 8000e74:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <I2C_id+0x38>)
 8000e7c:	7819      	ldrb	r1, [r3, #0]
 8000e7e:	1d3a      	adds	r2, r7, #4
 8000e80:	2301      	movs	r3, #1
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <I2C_id+0x3c>)
 8000e84:	f000 f814 	bl	8000eb0 <platform_read>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <I2C_id+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2002      	movs	r0, #2
 8000e98:	f019 fcc8 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0801b72b 	.word	0x0801b72b
 8000ea8:	20001704 	.word	0x20001704
 8000eac:	0801af28 	.word	0x0801af28

08000eb0 <platform_read>:
	return ret;
}



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	72fb      	strb	r3, [r7, #11]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 8000ec8:	23ba      	movs	r3, #186	; 0xba
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	f107 0214 	add.w	r2, r7, #20
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <platform_read+0x74>)
 8000eda:	f003 fed5 	bl	8004c88 <HAL_I2C_Master_Transmit>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00f      	beq.n	8000f08 <platform_read+0x58>
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 8000eee:	23bb      	movs	r3, #187	; 0xbb
 8000ef0:	b299      	uxth	r1, r3
 8000ef2:	893b      	ldrh	r3, [r7, #8]
 8000ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef8:	9200      	str	r2, [sp, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <platform_read+0x74>)
 8000efe:	f003 ffb7 	bl	8004e70 <HAL_I2C_Master_Receive>
 8000f02:	4603      	mov	r3, r0
 8000f04:	75fb      	strb	r3, [r7, #23]
 8000f06:	e008      	b.n	8000f1a <platform_read+0x6a>
	}
	else if(ret){
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <platform_read+0x78>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2002      	movs	r0, #2
 8000f16:	f019 fc89 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20001704 	.word	0x20001704
 8000f28:	0801af58 	.word	0x0801af58

08000f2c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f72:	4013      	ands	r3, r2
 8000f74:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_ADC_Init+0x94>)
 8000f86:	4a24      	ldr	r2, [pc, #144]	; (8001018 <MX_ADC_Init+0x98>)
 8000f88:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <MX_ADC_Init+0x94>)
 8000f8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f90:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_ADC_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_ADC_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC_Init+0x94>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_ADC_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_ADC_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_ADC_Init+0x94>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_ADC_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_ADC_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_ADC_Init+0x94>)
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_ADC_Init+0x94>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_ADC_Init+0x94>)
 8000fee:	2207      	movs	r2, #7
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_ADC_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_ADC_Init+0x94>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_ADC_Init+0x94>)
 8001002:	f001 ffb5 	bl	8002f70 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 800100c:	f000 faa2 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200016a0 	.word	0x200016a0
 8001018:	40012400 	.word	0x40012400

0800101c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_ADC_MspInit+0x24>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d103      	bne.n	8001036 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800102e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001032:	f7ff ff7b 	bl	8000f2c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012400 	.word	0x40012400

08001044 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_ADC_MspDeInit+0x24>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d103      	bne.n	800105e <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001056:	f44f 7000 	mov.w	r0, #512	; 0x200
 800105a:	f7ff ff7f 	bl	8000f5c <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012400 	.word	0x40012400

0800106c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <SYS_InitMeasurement+0x14>)
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <SYS_InitMeasurement+0x18>)
 8001074:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200016a0 	.word	0x200016a0
 8001084:	40012400 	.word	0x40012400

08001088 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001096:	f000 f871 	bl	800117c <SYS_GetBatteryLevel>
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800109e:	4830      	ldr	r0, [pc, #192]	; (8001160 <SYS_GetTemperatureLevel+0xd8>)
 80010a0:	f000 f8a0 	bl	80011e4 <ADC_ReadChannels>
 80010a4:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <SYS_GetTemperatureLevel+0xdc>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <SYS_GetTemperatureLevel+0xe0>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d026      	beq.n	8001100 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <SYS_GetTemperatureLevel+0xdc>)
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <SYS_GetTemperatureLevel+0xe0>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d01c      	beq.n	80010f8 <SYS_GetTemperatureLevel+0x70>
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <SYS_GetTemperatureLevel+0xe4>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <SYS_GetTemperatureLevel+0xe0>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2264      	movs	r2, #100	; 0x64
 80010da:	fb02 f203 	mul.w	r2, r2, r3
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <SYS_GetTemperatureLevel+0xdc>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <SYS_GetTemperatureLevel+0xe0>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	331e      	adds	r3, #30
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	e001      	b.n	80010fc <SYS_GetTemperatureLevel+0x74>
 80010f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80010fc:	81fb      	strh	r3, [r7, #14]
 80010fe:	e01c      	b.n	800113a <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	fb02 f203 	mul.w	r2, r2, r3
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <SYS_GetTemperatureLevel+0xe8>)
 800110a:	fba3 1302 	umull	r1, r3, r3, r2
 800110e:	1ad2      	subs	r2, r2, r3
 8001110:	0852      	lsrs	r2, r2, #1
 8001112:	4413      	add	r3, r2
 8001114:	0adb      	lsrs	r3, r3, #11
 8001116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001122:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001126:	4a13      	ldr	r2, [pc, #76]	; (8001174 <SYS_GetTemperatureLevel+0xec>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1292      	asrs	r2, r2, #10
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	331e      	adds	r3, #30
 8001136:	b29b      	uxth	r3, r3
 8001138:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800113a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <SYS_GetTemperatureLevel+0xf0>)
 8001142:	2201      	movs	r2, #1
 8001144:	2100      	movs	r1, #0
 8001146:	2001      	movs	r0, #1
 8001148:	f019 fb70 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 800114c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8001154:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	b0001000 	.word	0xb0001000
 8001164:	1fff75c8 	.word	0x1fff75c8
 8001168:	1fff75a8 	.word	0x1fff75a8
 800116c:	09ee009f 	.word	0x09ee009f
 8001170:	00100101 	.word	0x00100101
 8001174:	68db8bad 	.word	0x68db8bad
 8001178:	0801af8c 	.word	0x0801af8c

0800117c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <SYS_GetBatteryLevel+0x5c>)
 800118c:	f000 f82a 	bl	80011e4 <ADC_ReadChannels>
 8001190:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	80fb      	strh	r3, [r7, #6]
 800119c:	e016      	b.n	80011cc <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <SYS_GetBatteryLevel+0x60>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00b      	beq.n	80011c2 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SYS_GetBatteryLevel+0x60>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80011b4:	fb03 f202 	mul.w	r2, r3, r2
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	80fb      	strh	r3, [r7, #6]
 80011c0:	e004      	b.n	80011cc <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SYS_GetBatteryLevel+0x64>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80011cc:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	b4002000 	.word	0xb4002000
 80011dc:	1fff75aa 	.word	0x1fff75aa
 80011e0:	004c08d8 	.word	0x004c08d8

080011e4 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80011fc:	f7ff fec0 	bl	8000f80 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001200:	481a      	ldr	r0, [pc, #104]	; (800126c <ADC_ReadChannels+0x88>)
 8001202:	f002 fc9b 	bl	8003b3c <HAL_ADCEx_Calibration_Start>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800120c:	f000 f9a2 	bl	8001554 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4619      	mov	r1, r3
 8001222:	4812      	ldr	r0, [pc, #72]	; (800126c <ADC_ReadChannels+0x88>)
 8001224:	f002 fa02 	bl	800362c <HAL_ADC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800122e:	f000 f991 	bl	8001554 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <ADC_ReadChannels+0x88>)
 8001234:	f002 f8de 	bl	80033f4 <HAL_ADC_Start>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800123e:	f000 f989 	bl	8001554 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <ADC_ReadChannels+0x88>)
 8001248:	f002 f94c 	bl	80034e4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <ADC_ReadChannels+0x88>)
 800124e:	f002 f917 	bl	8003480 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ADC_ReadChannels+0x88>)
 8001254:	f002 f9dd 	bl	8003612 <HAL_ADC_GetValue>
 8001258:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800125a:	4804      	ldr	r0, [pc, #16]	; (800126c <ADC_ReadChannels+0x88>)
 800125c:	f002 f84e 	bl	80032fc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001260:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200016a0 	.word	0x200016a0

08001270 <LL_AHB1_GRP1_EnableClock>:
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800127e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4313      	orrs	r3, r2
 8001286:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012a4:	2004      	movs	r0, #4
 80012a6:	f7ff ffe3 	bl	8001270 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff ffe0 	bl	8001270 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	200b      	movs	r0, #11
 80012b6:	f002 fd94 	bl	8003de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012ba:	200b      	movs	r0, #11
 80012bc:	f002 fdab 	bl	8003e16 <HAL_NVIC_EnableIRQ>

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <LL_AHB2_GRP1_EnableClock>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <LL_APB1_GRP1_EnableClock>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001318:	68fb      	ldr	r3, [r7, #12]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_I2C2_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_I2C2_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_I2C2_Init+0x74>)
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_I2C2_Init+0x7c>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_I2C2_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_I2C2_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_I2C2_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_I2C2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_I2C2_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_I2C2_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_I2C2_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_I2C2_Init+0x74>)
 8001360:	f003 fc02 	bl	8004b68 <HAL_I2C_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800136a:	f000 f8f3 	bl	8001554 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <MX_I2C2_Init+0x74>)
 8001372:	f004 f861 	bl	8005438 <HAL_I2CEx_ConfigAnalogFilter>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800137c:	f000 f8ea 	bl	8001554 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_I2C2_Init+0x74>)
 8001384:	f004 f8a2 	bl	80054cc <HAL_I2CEx_ConfigDigitalFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 f8e1 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20001704 	.word	0x20001704
 800139c:	40005800 	.word	0x40005800
 80013a0:	20303e5d 	.word	0x20303e5d

080013a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b096      	sub	sp, #88	; 0x58
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2238      	movs	r2, #56	; 0x38
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f019 fccf 	bl	801ad68 <memset>
  if(i2cHandle->Instance==I2C2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a21      	ldr	r2, [pc, #132]	; (8001454 <HAL_I2C_MspInit+0xb0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d13b      	bne.n	800144c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013d8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 fb4a 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013ee:	f000 f8b1 	bl	8001554 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff ff66 	bl	80012c4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	2002      	movs	r0, #2
 80013fa:	f7ff ff63 	bl	80012c4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001404:	2312      	movs	r3, #18
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001410:	2304      	movs	r3, #4
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141e:	f003 f92d 	bl	800467c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001426:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001434:	2304      	movs	r3, #4
 8001436:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800143c:	4619      	mov	r1, r3
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_I2C_MspInit+0xb4>)
 8001440:	f003 f91c 	bl	800467c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001444:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001448:	f7ff ff54 	bl	80012f4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800144c:	bf00      	nop
 800144e:	3758      	adds	r7, #88	; 0x58
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40005800 	.word	0x40005800
 8001458:	48000400 	.word	0x48000400

0800145c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146c:	f023 0218 	bic.w	r2, r3, #24
 8001470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4313      	orrs	r3, r2
 8001478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f001 fb89 	bl	8002ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f807 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001492:	f008 fef7 	bl	800a284 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001496:	f7ff ff45 	bl	8001324 <MX_I2C2_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 800149a:	f008 fefb 	bl	800a294 <MX_LoRaWAN_Process>
 800149e:	e7fc      	b.n	800149a <main+0x14>

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2248      	movs	r2, #72	; 0x48
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f019 fc5a 	bl	801ad68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014c6:	f004 f84d 	bl	8005564 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ffc6 	bl	800145c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <SystemClock_Config+0xb0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <SystemClock_Config+0xb0>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <SystemClock_Config+0xb0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014ec:	2324      	movs	r3, #36	; 0x24
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014f0:	2381      	movs	r3, #129	; 0x81
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014fc:	23b0      	movs	r3, #176	; 0xb0
 80014fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fb77 	bl	8005bfc <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001514:	f000 f81e 	bl	8001554 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001518:	234f      	movs	r3, #79	; 0x4f
 800151a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fefa 	bl	8006330 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001542:	f000 f807 	bl	8001554 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3768      	adds	r7, #104	; 0x68
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	58000400 	.word	0x58000400

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>

0800155e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <LL_APB1_GRP1_EnableClock>:
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800158c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4013      	ands	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	222c      	movs	r2, #44	; 0x2c
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f019 fbd3 	bl	801ad68 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <MX_RTC_Init+0x9c>)
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <MX_RTC_Init+0xa0>)
 80015c6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_RTC_Init+0x9c>)
 80015ca:	221f      	movs	r2, #31
 80015cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_RTC_Init+0x9c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_RTC_Init+0x9c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_RTC_Init+0x9c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_RTC_Init+0x9c>)
 80015e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_RTC_Init+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_RTC_Init+0x9c>)
 80015f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <MX_RTC_Init+0x9c>)
 80015f8:	f005 fb5a 	bl	8006cb0 <HAL_RTC_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001602:	f7ff ffa7 	bl	8001554 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <MX_RTC_Init+0x9c>)
 8001608:	f005 fe48 	bl	800729c <HAL_RTCEx_SetSSRU_IT>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001612:	f7ff ff9f 	bl	8001554 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001622:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001626:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_RTC_Init+0x9c>)
 8001636:	f005 fbb5 	bl	8006da4 <HAL_RTC_SetAlarm_IT>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001640:	f7ff ff88 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20001750 	.word	0x20001750
 8001650:	40002800 	.word	0x40002800

08001654 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b090      	sub	sp, #64	; 0x40
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2238      	movs	r2, #56	; 0x38
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f019 fb7f 	bl	801ad68 <memset>
  if(rtcHandle->Instance==RTC)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <HAL_RTC_MspInit+0x74>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d125      	bne.n	80016c0 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4618      	mov	r0, r3
 8001686:	f005 f9f9 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001690:	f7ff ff60 	bl	8001554 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001694:	f7ff ff63 	bl	800155e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001698:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800169c:	f7ff ff6f 	bl	800157e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2002      	movs	r0, #2
 80016a6:	f002 fb9c 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80016aa:	2002      	movs	r0, #2
 80016ac:	f002 fbb3 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	202a      	movs	r0, #42	; 0x2a
 80016b6:	f002 fb94 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016ba:	202a      	movs	r0, #42	; 0x2a
 80016bc:	f002 fbab 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016c0:	bf00      	nop
 80016c2:	3740      	adds	r7, #64	; 0x40
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40002800 	.word	0x40002800

080016cc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	58000400 	.word	0x58000400

080016e4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001700:	f001 fa6e 	bl	8002be0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001704:	f7ff ffe2 	bl	80016cc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001708:	2001      	movs	r0, #1
 800170a:	f003 ffbd 	bl	8005688 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}

08001712 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001716:	f001 fa71 	bl	8002bfc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800171a:	f000 ff8f 	bl	800263c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001726:	f001 fa5b 	bl	8002be0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800172a:	2101      	movs	r1, #1
 800172c:	2000      	movs	r0, #0
 800172e:	f003 ff27 	bl	8005580 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}

08001736 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800173a:	f001 fa5f 	bl	8002bfc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <HardFault_Handler+0x4>

0800175a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <MemManage_Handler+0x4>

08001760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <BusFault_Handler+0x4>

08001766 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017a2:	f005 fdb7 	bl	8007314 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001750 	.word	0x20001750

080017b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA1_Channel1_IRQHandler+0x10>)
 80017b6:	f002 fdc5 	bl	8004344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20001794 	.word	0x20001794

080017c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <USART1_IRQHandler+0x10>)
 80017ca:	f006 fc03 	bl	8007fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200017f4 	.word	0x200017f4

080017d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80017dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e0:	f003 f9aa 	bl	8004b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <RTC_Alarm_IRQHandler+0x10>)
 80017ee:	f005 fc41 	bl	8007074 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20001750 	.word	0x20001750

080017fc <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001802:	f006 f8ef 	bl	80079e4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001788 	.word	0x20001788

08001810 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800181e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SUBGHZ_Init+0x20>)
 8001846:	2208      	movs	r2, #8
 8001848:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_SUBGHZ_Init+0x20>)
 800184c:	f005 fe4e 	bl	80074ec <HAL_SUBGHZ_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001856:	f7ff fe7d 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001788 	.word	0x20001788

08001864 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff ffcf 	bl	8001810 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2032      	movs	r0, #50	; 0x32
 8001878:	f002 fab3 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f002 faca 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800189c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <LL_FLASH_GetUDN+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	1fff7580 	.word	0x1fff7580

080018c4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <LL_FLASH_GetDeviceID+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	1fff7584 	.word	0x1fff7584

080018dc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0a1b      	lsrs	r3, r3, #8
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	1fff7584 	.word	0x1fff7584

080018f4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff ffc6 	bl	800188a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80018fe:	f018 fcd7 	bl	801a2b0 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001902:	f000 f997 	bl	8001c34 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001906:	f000 f9b7 	bl	8001c78 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800190a:	f018 ff61 	bl	801a7d0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <SystemApp_Init+0x48>)
 8001910:	f019 f80e 	bl	801a930 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001914:	2002      	movs	r0, #2
 8001916:	f019 f819 	bl	801a94c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800191a:	f7ff fba7 	bl	800106c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800191e:	f000 fa75 	bl	8001e0c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001922:	f017 fea5 	bl	8019670 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001926:	2101      	movs	r1, #1
 8001928:	2001      	movs	r0, #1
 800192a:	f017 fee1 	bl	80196f0 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800192e:	2101      	movs	r1, #1
 8001930:	2001      	movs	r0, #1
 8001932:	f017 fead 	bl	8019690 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08001b15 	.word	0x08001b15

08001940 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001944:	f017 ff04 	bl	8019750 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}

0800194c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001956:	f7ff fc11 	bl	800117c <SYS_GetBatteryLevel>
 800195a:	4603      	mov	r3, r0
 800195c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001964:	4293      	cmp	r3, r2
 8001966:	d902      	bls.n	800196e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001968:	23fe      	movs	r3, #254	; 0xfe
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	e014      	b.n	8001998 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001974:	d202      	bcs.n	800197c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e00d      	b.n	8001998 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001982:	461a      	mov	r2, r3
 8001984:	4613      	mov	r3, r2
 8001986:	01db      	lsls	r3, r3, #7
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	461a      	mov	r2, r3
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <GetBatteryLevel+0x68>)
 8001990:	fba3 2302 	umull	r2, r3, r3, r2
 8001994:	09db      	lsrs	r3, r3, #7
 8001996:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <GetBatteryLevel+0x6c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	2100      	movs	r1, #0
 80019a2:	2002      	movs	r0, #2
 80019a4:	f018 ff42 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	1b4e81b5 	.word	0x1b4e81b5
 80019b8:	0801af98 	.word	0x0801af98

080019bc <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80019c6:	f7ff fb5f 	bl	8001088 <SYS_GetTemperatureLevel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da00      	bge.n	80019d2 <GetTemperatureLevel+0x16>
 80019d0:	33ff      	adds	r3, #255	; 0xff
 80019d2:	121b      	asrs	r3, r3, #8
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80019d8:	88fb      	ldrh	r3, [r7, #6]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80019e2:	b590      	push	{r4, r7, lr}
 80019e4:	b087      	sub	sp, #28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80019ee:	f7ff ff5f 	bl	80018b0 <LL_FLASH_GetUDN>
 80019f2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fa:	d138      	bne.n	8001a6e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80019fc:	f001 f90c 	bl	8002c18 <HAL_GetUIDw0>
 8001a00:	4604      	mov	r4, r0
 8001a02:	f001 f91d 	bl	8002c40 <HAL_GetUIDw2>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4423      	add	r3, r4
 8001a0a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a0c:	f001 f90e 	bl	8002c2c <HAL_GetUIDw1>
 8001a10:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	0e1a      	lsrs	r2, r3, #24
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3307      	adds	r3, #7
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	0c1a      	lsrs	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3306      	adds	r3, #6
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	0a1a      	lsrs	r2, r3, #8
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3305      	adds	r3, #5
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	0e1a      	lsrs	r2, r3, #24
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3303      	adds	r3, #3
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	0c1a      	lsrs	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3302      	adds	r3, #2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0a1a      	lsrs	r2, r3, #8
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001a6c:	e031      	b.n	8001ad2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3307      	adds	r3, #7
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	0a1a      	lsrs	r2, r3, #8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3306      	adds	r3, #6
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	0c1a      	lsrs	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3305      	adds	r3, #5
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	0e1a      	lsrs	r2, r3, #24
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001a9c:	f7ff ff12 	bl	80018c4 <LL_FLASH_GetDeviceID>
 8001aa0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001aac:	f7ff ff16 	bl	80018dc <LL_FLASH_GetSTCompanyID>
 8001ab0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	0a1a      	lsrs	r2, r3, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	701a      	strb	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd90      	pop	{r4, r7, pc}

08001ada <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001ada:	b590      	push	{r4, r7, lr}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001ae4:	f7ff fee4 	bl	80018b0 <LL_FLASH_GetUDN>
 8001ae8:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d10b      	bne.n	8001b0a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001af2:	f001 f891 	bl	8002c18 <HAL_GetUIDw0>
 8001af6:	4604      	mov	r4, r0
 8001af8:	f001 f898 	bl	8002c2c <HAL_GetUIDw1>
 8001afc:	4603      	mov	r3, r0
 8001afe:	405c      	eors	r4, r3
 8001b00:	f001 f89e 	bl	8002c40 <HAL_GetUIDw2>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4063      	eors	r3, r4
 8001b08:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001b0a:	687b      	ldr	r3, [r7, #4]

}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd90      	pop	{r4, r7, pc}

08001b14 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4618      	mov	r0, r3
 8001b24:	f017 ff24 	bl	8019970 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b2e:	9200      	str	r2, [sp, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <TimestampNow+0x3c>)
 8001b32:	2110      	movs	r1, #16
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f81d 	bl	8001b74 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fb1c 	bl	8000178 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	0801afa4 	.word	0x0801afa4

08001b54 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f017 fd98 	bl	8019690 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f017 fd90 	bl	8019690 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001b74:	b40c      	push	{r2, r3}
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f018 f8c3 	bl	8019d18 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b9c:	b002      	add	sp, #8
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001bb8:	f000 f9f0 	bl	8001f9c <TIMER_IF_GetTimerValue>
 8001bbc:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fa65 	bl	800209c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <LL_AHB2_GRP1_EnableClock>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
	...

08001c0c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c1a:	4905      	ldr	r1, [pc, #20]	; (8001c30 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	58000800 	.word	0x58000800

08001c34 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f000 f802 	bl	8001c42 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8001c56:	f000 fffd 	bl	8002c54 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8001c5a:	f001 f807 	bl	8002c6c <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8001c5e:	f001 f811 	bl	8002c84 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8001c62:	e005      	b.n	8001c70 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8001c64:	f000 fffc 	bl	8002c60 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8001c68:	f001 f806 	bl	8002c78 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8001c6c:	f001 f810 	bl	8002c90 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7ff ff9e 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f7ff ff9b 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7ff ff98 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001caa:	2002      	movs	r0, #2
 8001cac:	f7ff ff95 	bl	8001bda <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f002 fcde 	bl	800467c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483a      	ldr	r0, [pc, #232]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001ccc:	f002 fcd6 	bl	800467c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4836      	ldr	r0, [pc, #216]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001cda:	f002 fccf 	bl	800467c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4833      	ldr	r0, [pc, #204]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001ce8:	f002 fcc8 	bl	800467c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2101      	movs	r1, #1
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf4:	f002 fef0 	bl	8004ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfe:	482d      	ldr	r0, [pc, #180]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001d00:	f002 feea 	bl	8004ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2108      	movs	r1, #8
 8001d08:	482a      	ldr	r0, [pc, #168]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001d0a:	f002 fee5 	bl	8004ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2110      	movs	r1, #16
 8001d12:	4828      	ldr	r0, [pc, #160]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001d14:	f002 fee0 	bl	8004ad8 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8001d24:	23f0      	movs	r3, #240	; 0xf0
 8001d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8001d28:	230d      	movs	r3, #13
 8001d2a:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff ff54 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3a:	f002 fc9f 	bl	800467c <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001d50:	2001      	movs	r0, #1
 8001d52:	f7ff ff42 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f002 fc8d 	bl	800467c <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001d6e:	230d      	movs	r3, #13
 8001d70:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2002      	movs	r0, #2
 8001d74:	f7ff ff31 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001d7e:	f002 fc7d 	bl	800467c <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8001d8e:	230d      	movs	r3, #13
 8001d90:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2002      	movs	r0, #2
 8001d94:	f7ff ff21 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <DBG_ProbesInit+0x13c>)
 8001d9e:	f002 fc6d 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001da2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001da6:	f7ff ff31 	bl	8001c0c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	48000400 	.word	0x48000400

08001db8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <EnvSensors_Read+0x40>)
 8001dc2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <EnvSensors_Read+0x44>)
 8001dc6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <EnvSensors_Read+0x48>)
 8001dca:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <EnvSensors_Read+0x4c>)
 8001de2:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <EnvSensors_Read+0x50>)
 8001de8:	611a      	str	r2, [r3, #16]

  return 0;
 8001dea:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	42480000 	.word	0x42480000
 8001dfc:	41900000 	.word	0x41900000
 8001e00:	447a0000 	.word	0x447a0000
 8001e04:	003e090d 	.word	0x003e090d
 8001e08:	000503ab 	.word	0x000503ab

08001e0c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e10:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <TIMER_IF_Init+0x5c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01b      	beq.n	8001e8c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <TIMER_IF_Init+0x60>)
 8001e56:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001e5c:	f7ff fba8 	bl	80015b0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001e60:	f000 f856 	bl	8001f10 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <TIMER_IF_Init+0x60>)
 8001e6a:	f005 f8a7 	bl	8006fbc <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <TIMER_IF_Init+0x60>)
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <TIMER_IF_Init+0x60>)
 8001e78:	f005 f9de 	bl	8007238 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f9cf 	bl	8002220 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001e82:	f000 f85f 	bl	8001f44 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <TIMER_IF_Init+0x5c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000150 	.word	0x20000150
 8001e9c:	20001750 	.word	0x20001750

08001ea0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	; 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	222c      	movs	r2, #44	; 0x2c
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f018 ff56 	bl	801ad68 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001ebc:	f000 f828 	bl	8001f10 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <TIMER_IF_StartTimer+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ed8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001edc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <TIMER_IF_StartTimer+0x6c>)
 8001eee:	f004 ff59 	bl	8006da4 <HAL_RTC_SetAlarm_IT>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001ef8:	f7ff fb2c 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3738      	adds	r7, #56	; 0x38
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000154 	.word	0x20000154
 8001f0c:	20001750 	.word	0x20001750

08001f10 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <TIMER_IF_StopTimer+0x2c>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f24:	4806      	ldr	r0, [pc, #24]	; (8001f40 <TIMER_IF_StopTimer+0x30>)
 8001f26:	f005 f849 	bl	8006fbc <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <TIMER_IF_StopTimer+0x30>)
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f32:	79fb      	ldrb	r3, [r7, #7]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40002800 	.word	0x40002800
 8001f40:	20001750 	.word	0x20001750

08001f44 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001f48:	f000 f98a 	bl	8002260 <GetTimerTicks>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <TIMER_IF_SetTimerContext+0x18>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f52:	4b02      	ldr	r3, [pc, #8]	; (8001f5c <TIMER_IF_SetTimerContext+0x18>)
 8001f54:	681b      	ldr	r3, [r3, #0]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000154 	.word	0x20000154

08001f60 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <TIMER_IF_GetTimerContext+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000154 	.word	0x20000154

08001f74 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001f7e:	f000 f96f 	bl	8002260 <GetTimerTicks>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000154 	.word	0x20000154

08001f9c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <TIMER_IF_GetTimerValue+0x24>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001fae:	f000 f957 	bl	8002260 <GetTimerTicks>
 8001fb2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000150 	.word	0x20000150

08001fc4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001fce:	2303      	movs	r3, #3
 8001fd0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001fde:	b5b0      	push	{r4, r5, r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	461a      	mov	r2, r3
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	0d95      	lsrs	r5, r2, #22
 8001ff4:	0294      	lsls	r4, r2, #10
 8001ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f7fe fdab 	bl	8000b5c <__aeabi_uldivmod>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4613      	mov	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}

08002018 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002018:	b4b0      	push	{r4, r5, r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	f04f 0400 	mov.w	r4, #0
 8002034:	f04f 0500 	mov.w	r5, #0
 8002038:	015d      	lsls	r5, r3, #5
 800203a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800203e:	0154      	lsls	r4, r2, #5
 8002040:	4622      	mov	r2, r4
 8002042:	462b      	mov	r3, r5
 8002044:	1a12      	subs	r2, r2, r0
 8002046:	eb63 0301 	sbc.w	r3, r3, r1
 800204a:	f04f 0400 	mov.w	r4, #0
 800204e:	f04f 0500 	mov.w	r5, #0
 8002052:	009d      	lsls	r5, r3, #2
 8002054:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002058:	0094      	lsls	r4, r2, #2
 800205a:	4622      	mov	r2, r4
 800205c:	462b      	mov	r3, r5
 800205e:	1812      	adds	r2, r2, r0
 8002060:	eb41 0303 	adc.w	r3, r1, r3
 8002064:	f04f 0000 	mov.w	r0, #0
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	00d9      	lsls	r1, r3, #3
 800206e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002072:	00d0      	lsls	r0, r2, #3
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	0a82      	lsrs	r2, r0, #10
 8002086:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800208a:	0a8b      	lsrs	r3, r1, #10
 800208c:	4613      	mov	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bcb0      	pop	{r4, r5, r7}
 800209a:	4770      	bx	lr

0800209c <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff9a 	bl	8001fde <TIMER_IF_Convert_ms2Tick>
 80020aa:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80020ac:	f000 f8d8 	bl	8002260 <GetTimerTicks>
 80020b0:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020b2:	e000      	b.n	80020b6 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80020b4:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020b6:	f000 f8d3 	bl	8002260 <GetTimerTicks>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d8f6      	bhi.n	80020b4 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80020c6:	bf00      	nop
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80020d8:	f018 fa38 	bl	801a54c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80020ec:	f000 f8a8 	bl	8002240 <TIMER_IF_BkUp_Read_MSBticks>
 80020f0:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f892 	bl	8002220 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80020fc:	bf00      	nop
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002108:	b088      	sub	sp, #32
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002112:	f000 f8a5 	bl	8002260 <GetTimerTicks>
 8002116:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002118:	f000 f892 	bl	8002240 <TIMER_IF_BkUp_Read_MSBticks>
 800211c:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4618      	mov	r0, r3
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	0003      	movs	r3, r0
 8002130:	2200      	movs	r2, #0
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	4608      	mov	r0, r1
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	eb12 0800 	adds.w	r8, r2, r0
 800213e:	eb43 0901 	adc.w	r9, r3, r1
 8002142:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	0a82      	lsrs	r2, r0, #10
 8002154:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002158:	0a8b      	lsrs	r3, r1, #10
 800215a:	4613      	mov	r3, r2
 800215c:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	461a      	mov	r2, r3
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	ea02 0400 	and.w	r4, r2, r0
 8002172:	ea03 0501 	and.w	r5, r3, r1
 8002176:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff4b 	bl	8002018 <TIMER_IF_Convert_Tick2ms>
 8002182:	4603      	mov	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800218a:	69fb      	ldr	r3, [r7, #28]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002198 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80021a6:	f005 f8d9 	bl	800735c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20001750 	.word	0x20001750

080021b8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	2101      	movs	r1, #1
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80021c6:	f005 f8c9 	bl	800735c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20001750 	.word	0x20001750

080021d8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80021e2:	2100      	movs	r1, #0
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80021e6:	f005 f8d1 	bl	800738c <HAL_RTCEx_BKUPRead>
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80021ec:	687b      	ldr	r3, [r7, #4]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20001750 	.word	0x20001750

080021fc <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002206:	2101      	movs	r1, #1
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800220a:	f005 f8bf 	bl	800738c <HAL_RTCEx_BKUPRead>
 800220e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20001750 	.word	0x20001750

08002220 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	2102      	movs	r1, #2
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800222e:	f005 f895 	bl	800735c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20001750 	.word	0x20001750

08002240 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002246:	2102      	movs	r1, #2
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800224a:	f005 f89f 	bl	800738c <HAL_RTCEx_BKUPRead>
 800224e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002250:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20001750 	.word	0x20001750

08002260 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <GetTimerTicks+0x14>)
 8002266:	f7ff fdde 	bl	8001e26 <LL_RTC_TIME_GetSubSecond>
 800226a:	4603      	mov	r3, r0
 800226c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40002800 	.word	0x40002800

08002278 <LL_AHB2_GRP1_EnableClock>:
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4313      	orrs	r3, r2
 800228e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4013      	ands	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <LL_APB2_GRP1_EnableClock>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4313      	orrs	r3, r2
 80022be:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <LL_APB2_GRP1_DisableClock>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ee:	4013      	ands	r3, r2
 80022f0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <MX_USART1_UART_Init+0x94>)
 8002304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_USART1_UART_Init+0x90>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_USART1_UART_Init+0x90>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002334:	2200      	movs	r2, #0
 8002336:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_USART1_UART_Init+0x90>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002340:	2200      	movs	r2, #0
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002344:	4811      	ldr	r0, [pc, #68]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002346:	f005 fd0c 	bl	8007d62 <HAL_UART_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002350:	f7ff f900 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002354:	2100      	movs	r1, #0
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_USART1_UART_Init+0x90>)
 8002358:	f007 fd39 	bl	8009dce <HAL_UARTEx_SetTxFifoThreshold>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002362:	f7ff f8f7 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002366:	2100      	movs	r1, #0
 8002368:	4808      	ldr	r0, [pc, #32]	; (800238c <MX_USART1_UART_Init+0x90>)
 800236a:	f007 fd6e 	bl	8009e4a <HAL_UARTEx_SetRxFifoThreshold>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002374:	f7ff f8ee 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_USART1_UART_Init+0x90>)
 800237a:	f007 fced 	bl	8009d58 <HAL_UARTEx_EnableFifoMode>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002384:	f7ff f8e6 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200017f4 	.word	0x200017f4
 8002390:	40013800 	.word	0x40013800

08002394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b096      	sub	sp, #88	; 0x58
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	2238      	movs	r2, #56	; 0x38
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f018 fcd7 	bl	801ad68 <memset>
  if(uartHandle->Instance==USART1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2f      	ldr	r2, [pc, #188]	; (800247c <HAL_UART_MspInit+0xe8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d156      	bne.n	8002472 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023c8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80023cc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 fb52 	bl	8006a7c <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023de:	f7ff f8b9 	bl	8001554 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023e6:	f7ff ff5f 	bl	80022a8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7ff ff44 	bl	8002278 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80023f0:	23c0      	movs	r3, #192	; 0xc0
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002400:	2307      	movs	r3, #7
 8002402:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002408:	4619      	mov	r1, r3
 800240a:	481d      	ldr	r0, [pc, #116]	; (8002480 <HAL_UART_MspInit+0xec>)
 800240c:	f002 f936 	bl	800467c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_UART_MspInit+0xf4>)
 8002414:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002418:	2212      	movs	r2, #18
 800241a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_UART_MspInit+0xf0>)
 800241e:	2210      	movs	r2, #16
 8002420:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_UART_MspInit+0xf0>)
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_UART_MspInit+0xf0>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002446:	480f      	ldr	r0, [pc, #60]	; (8002484 <HAL_UART_MspInit+0xf0>)
 8002448:	f001 fd02 	bl	8003e50 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002452:	f7ff f87f 	bl	8001554 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_UART_MspInit+0xf0>)
 800245a:	679a      	str	r2, [r3, #120]	; 0x78
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_UART_MspInit+0xf0>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2102      	movs	r1, #2
 8002466:	2024      	movs	r0, #36	; 0x24
 8002468:	f001 fcbb 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800246c:	2024      	movs	r0, #36	; 0x24
 800246e:	f001 fcd2 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3758      	adds	r7, #88	; 0x58
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40013800 	.word	0x40013800
 8002480:	48000400 	.word	0x48000400
 8002484:	20001794 	.word	0x20001794
 8002488:	40020008 	.word	0x40020008

0800248c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_UART_MspDeInit+0x3c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10f      	bne.n	80024be <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800249e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024a2:	f7ff ff19 	bl	80022d8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80024a6:	21c0      	movs	r1, #192	; 0xc0
 80024a8:	4808      	ldr	r0, [pc, #32]	; (80024cc <HAL_UART_MspDeInit+0x40>)
 80024aa:	f002 fa47 	bl	800493c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 fd74 	bl	8003fa0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80024b8:	2024      	movs	r0, #36	; 0x24
 80024ba:	f001 fcba 	bl	8003e32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40013800 	.word	0x40013800
 80024cc:	48000400 	.word	0x48000400

080024d0 <LL_APB2_GRP1_ForceReset>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <LL_APB2_GRP1_ReleaseReset>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	43db      	mvns	r3, r3
 8002504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002508:	4013      	ands	r3, r2
 800250a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <LL_EXTI_EnableIT_0_31>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <LL_EXTI_EnableIT_0_31+0x24>)
 8002522:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002526:	4905      	ldr	r1, [pc, #20]	; (800253c <LL_EXTI_EnableIT_0_31+0x24>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	58000800 	.word	0x58000800

08002540 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <vcom_Init+0x28>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800254e:	f7fe fea7 	bl	80012a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002552:	f7ff fed3 	bl	80022fc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002556:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800255a:	f7ff ffdd 	bl	8002518 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800255e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000158 	.word	0x20000158

0800256c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002574:	f7ff ffac 	bl	80024d0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002578:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800257c:	f7ff ffb9 	bl	80024f2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <vcom_DeInit+0x28>)
 8002582:	f7ff ff83 	bl	800248c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002586:	200f      	movs	r0, #15
 8002588:	f001 fc53 	bl	8003e32 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800258c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200017f4 	.word	0x200017f4

08002598 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4804      	ldr	r0, [pc, #16]	; (80025bc <vcom_Trace_DMA+0x24>)
 80025ac:	f005 fc80 	bl	8007eb0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80025b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200017f4 	.word	0x200017f4

080025c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80025c8:	4a19      	ldr	r2, [pc, #100]	; (8002630 <vcom_ReceiveInit+0x70>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80025ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025dc:	4815      	ldr	r0, [pc, #84]	; (8002634 <vcom_ReceiveInit+0x74>)
 80025de:	f007 fb2e 	bl	8009c3e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80025e2:	bf00      	nop
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <vcom_ReceiveInit+0x74>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f2:	d0f7      	beq.n	80025e4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80025f4:	bf00      	nop
 80025f6:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <vcom_ReceiveInit+0x74>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002604:	d1f7      	bne.n	80025f6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <vcom_ReceiveInit+0x74>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <vcom_ReceiveInit+0x74>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002614:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002616:	4807      	ldr	r0, [pc, #28]	; (8002634 <vcom_ReceiveInit+0x74>)
 8002618:	f007 fb6c 	bl	8009cf4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800261c:	2201      	movs	r2, #1
 800261e:	4906      	ldr	r1, [pc, #24]	; (8002638 <vcom_ReceiveInit+0x78>)
 8002620:	4804      	ldr	r0, [pc, #16]	; (8002634 <vcom_ReceiveInit+0x74>)
 8002622:	f005 fbef 	bl	8007e04 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002626:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000015c 	.word	0x2000015c
 8002634:	200017f4 	.word	0x200017f4
 8002638:	20001884 	.word	0x20001884

0800263c <vcom_Resume>:

void vcom_Resume(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002640:	4808      	ldr	r0, [pc, #32]	; (8002664 <vcom_Resume+0x28>)
 8002642:	f005 fb8e 	bl	8007d62 <HAL_UART_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <vcom_Resume+0x14>
  {
    Error_Handler();
 800264c:	f7fe ff82 	bl	8001554 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <vcom_Resume+0x2c>)
 8002652:	f001 fbfd 	bl	8003e50 <HAL_DMA_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <vcom_Resume+0x24>
  {
    Error_Handler();
 800265c:	f7fe ff7a 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200017f4 	.word	0x200017f4
 8002668:	20001794 	.word	0x20001794

0800266c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_UART_TxCpltCallback+0x18>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2000      	movs	r0, #0
 800267a:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000158 	.word	0x20000158

08002688 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_UART_RxCpltCallback+0x38>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_UART_RxCpltCallback+0x26>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_UART_RxCpltCallback+0x38>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2101      	movs	r1, #1
 80026aa:	4806      	ldr	r0, [pc, #24]	; (80026c4 <HAL_UART_RxCpltCallback+0x3c>)
 80026ac:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 80026ae:	2201      	movs	r2, #1
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_UART_RxCpltCallback+0x3c>)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f005 fba6 	bl	8007e04 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2000015c 	.word	0x2000015c
 80026c4:	20001884 	.word	0x20001884

080026c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026cc:	f7ff fba5 	bl	8001e1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <LoopForever+0x6>)
  ldr r1, =_edata
 80026d2:	490d      	ldr	r1, [pc, #52]	; (8002708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <LoopForever+0xe>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <LoopForever+0x16>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026f6:	f018 fb13 	bl	801ad20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026fa:	f7fe fec4 	bl	8001486 <main>

080026fe <LoopForever>:

LoopForever:
    b LoopForever
 80026fe:	e7fe      	b.n	80026fe <LoopForever>
  ldr   r0, =_estack
 8002700:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002708:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800270c:	0801bd1c 	.word	0x0801bd1c
  ldr r2, =_sbss
 8002710:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002714:	2000193c 	.word	0x2000193c

08002718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC_IRQHandler>

0800271a <LL_AHB2_GRP1_EnableClock>:
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002728:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4313      	orrs	r3, r2
 8002730:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
	...

0800274c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	4a18      	ldr	r2, [pc, #96]	; (80027cc <BSP_LED_Init+0x80>)
 800276a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800276e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	e024      	b.n	80027c4 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800277a:	2002      	movs	r0, #2
 800277c:	f7ff ffcd 	bl	800271a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <BSP_LED_Init+0x80>)
 8002784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002788:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002792:	2302      	movs	r3, #2
 8002794:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <BSP_LED_Init+0x84>)
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 ff69 	bl	800467c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <BSP_LED_Init+0x84>)
 80027ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <BSP_LED_Init+0x80>)
 80027b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027ba:	2200      	movs	r2, #0
 80027bc:	4619      	mov	r1, r3
 80027be:	f002 f98b 	bl	8004ad8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	0801b834 	.word	0x0801b834
 80027d0:	20000004 	.word	0x20000004

080027d4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <BSP_LED_On+0x40>)
 80027e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e00c      	b.n	800280c <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4a08      	ldr	r2, [pc, #32]	; (8002818 <BSP_LED_On+0x44>)
 80027f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	4a05      	ldr	r2, [pc, #20]	; (8002814 <BSP_LED_On+0x40>)
 80027fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	f002 f967 	bl	8004ad8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	0801b834 	.word	0x0801b834
 8002818:	20000004 	.word	0x20000004

0800281c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4a0c      	ldr	r2, [pc, #48]	; (800285c <BSP_LED_Off+0x40>)
 800282a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800282e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	e00c      	b.n	8002854 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <BSP_LED_Off+0x44>)
 800283e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <BSP_LED_Off+0x40>)
 8002846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800284a:	2201      	movs	r2, #1
 800284c:	4619      	mov	r1, r3
 800284e:	f002 f943 	bl	8004ad8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0801b834 	.word	0x0801b834
 8002860:	20000004 	.word	0x20000004

08002864 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <BSP_LED_Toggle+0x40>)
 8002872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 800287e:	2300      	movs	r3, #0
 8002880:	e00c      	b.n	800289c <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <BSP_LED_Toggle+0x44>)
 8002886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4905      	ldr	r1, [pc, #20]	; (80028a4 <BSP_LED_Toggle+0x40>)
 800288e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f002 f936 	bl	8004b06 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	0801b834 	.word	0x0801b834
 80028a8:	20000004 	.word	0x20000004

080028ac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	460a      	mov	r2, r1
 80028b6:	71fb      	strb	r3, [r7, #7]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4a30      	ldr	r2, [pc, #192]	; (8002990 <BSP_PB_Init+0xe4>)
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 80028d8:	2300      	movs	r3, #0
 80028da:	e055      	b.n	8002988 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <BSP_PB_Init+0x3c>
 80028e2:	2002      	movs	r0, #2
 80028e4:	f7ff ff19 	bl	800271a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <BSP_PB_Init+0xe8>)
 80028ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028f0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <BSP_PB_Init+0xec>)
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f001 feb2 	bl	800467c <HAL_GPIO_Init>
 8002918:	e035      	b.n	8002986 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800291a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800291e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <BSP_PB_Init+0xec>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f001 fea4 	bl	800467c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <BSP_PB_Init+0xf0>)
 800293a:	441a      	add	r2, r3
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4918      	ldr	r1, [pc, #96]	; (80029a0 <BSP_PB_Init+0xf4>)
 8002940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f001 fe85 	bl	8004656 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <BSP_PB_Init+0xf0>)
 8002952:	1898      	adds	r0, r3, r2
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <BSP_PB_Init+0xe4>)
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	461a      	mov	r2, r3
 800295e:	2100      	movs	r1, #0
 8002960:	f001 fe60 	bl	8004624 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <BSP_PB_Init+0xf8>)
 8002968:	56d0      	ldrsb	r0, [r2, r3]
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <BSP_PB_Init+0xfc>)
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	f001 fa34 	bl	8003de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <BSP_PB_Init+0xf8>)
 800297e:	56d3      	ldrsb	r3, [r2, r3]
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fa48 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	2000001c 	.word	0x2000001c
 8002994:	0801b83c 	.word	0x0801b83c
 8002998:	20000010 	.word	0x20000010
 800299c:	20001888 	.word	0x20001888
 80029a0:	0801b848 	.word	0x0801b848
 80029a4:	0801b844 	.word	0x0801b844
 80029a8:	20000028 	.word	0x20000028

080029ac <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff fff1 	bl	80029ac <BSP_PB_Callback>
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}

080029ce <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80029e2:	2310      	movs	r3, #16
 80029e4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80029e6:	2301      	movs	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fa:	f001 fe3f 	bl	800467c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80029fe:	2320      	movs	r3, #32
 8002a00:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0a:	f001 fe37 	bl	800467c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2120      	movs	r1, #32
 8002a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a16:	f002 f85f 	bl	8004ad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a22:	f002 f859 	bl	8004ad8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d83f      	bhi.n	8002ac0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002a40:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a73 	.word	0x08002a73
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002aa7 	.word	0x08002aa7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a60:	f002 f83a 	bl	8004ad8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2120      	movs	r1, #32
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6c:	f002 f834 	bl	8004ad8 <HAL_GPIO_WritePin>
      break;      
 8002a70:	e027      	b.n	8002ac2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a72:	2201      	movs	r2, #1
 8002a74:	2110      	movs	r1, #16
 8002a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7a:	f002 f82d 	bl	8004ad8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2120      	movs	r1, #32
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a86:	f002 f827 	bl	8004ad8 <HAL_GPIO_WritePin>
      break;
 8002a8a:	e01a      	b.n	8002ac2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2110      	movs	r1, #16
 8002a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a94:	f002 f820 	bl	8004ad8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a98:	2201      	movs	r2, #1
 8002a9a:	2120      	movs	r1, #32
 8002a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa0:	f002 f81a 	bl	8004ad8 <HAL_GPIO_WritePin>
      break;
 8002aa4:	e00d      	b.n	8002ac2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2110      	movs	r1, #16
 8002aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aae:	f002 f813 	bl	8004ad8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aba:	f002 f80d 	bl	8004ad8 <HAL_GPIO_WritePin>
      break;
 8002abe:	e000      	b.n	8002ac2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ac0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002ad0:	2302      	movs	r3, #2
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002aec:	2301      	movs	r3, #1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6053      	str	r3, [r2, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	e0042000 	.word	0xe0042000

08002b14 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6053      	str	r3, [r2, #4]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	e0042000 	.word	0xe0042000

08002b30 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a03      	ldr	r2, [pc, #12]	; (8002b48 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	6053      	str	r3, [r2, #4]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	e0042000 	.word	0xe0042000

08002b4c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002b56:	f023 0302 	bic.w	r3, r3, #2
 8002b5a:	6053      	str	r3, [r2, #4]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	e0042000 	.word	0xe0042000

08002b68 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a03      	ldr	r2, [pc, #12]	; (8002b80 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6053      	str	r3, [r2, #4]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	e0042000 	.word	0xe0042000

08002b84 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a03      	ldr	r2, [pc, #12]	; (8002b9c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002b8e:	f023 0304 	bic.w	r3, r3, #4
 8002b92:	6053      	str	r3, [r2, #4]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	e0042000 	.word	0xe0042000

08002ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002baa:	2003      	movs	r0, #3
 8002bac:	f001 f90e 	bl	8003dcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bb0:	f003 fd82 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_Init+0x3c>)
 8002bb8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bba:	200f      	movs	r0, #15
 8002bbc:	f7fe fff0 	bl	8001ba0 <HAL_InitTick>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	e001      	b.n	8002bd0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bcc:	f7fe fdb9 	bl	8001742 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <HAL_SuspendTick+0x18>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_SuspendTick+0x18>)
 8002bea:	f023 0302 	bic.w	r3, r3, #2
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e010 	.word	0xe000e010

08002bfc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_ResumeTick+0x18>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_ResumeTick+0x18>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_GetUIDw0+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	1fff7590 	.word	0x1fff7590

08002c2c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_GetUIDw1+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	1fff7594 	.word	0x1fff7594

08002c40 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_GetUIDw2+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	1fff7598 	.word	0x1fff7598

08002c54 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002c58:	f7ff ff4e 	bl	8002af8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002c64:	f7ff ff56 	bl	8002b14 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002c70:	f7ff ff5e 	bl	8002b30 <LL_DBGMCU_EnableDBGStopMode>
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002c7c:	f7ff ff66 	bl	8002b4c <LL_DBGMCU_DisableDBGStopMode>
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002c88:	f7ff ff6e 	bl	8002b68 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002c94:	f7ff ff76 	bl	8002b84 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	210f      	movs	r1, #15
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	f003 010f 	and.w	r1, r3, #15
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0219      	lsls	r1, r3, #8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	400b      	ands	r3, r1
 8002de6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e0e:	f023 0317 	bic.w	r3, r3, #23
 8002e12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e34:	f023 0317 	bic.w	r3, r3, #23
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6093      	str	r3, [r2, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5a:	d101      	bne.n	8002e60 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e7c:	f023 0317 	bic.w	r3, r3, #23
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ea2:	f023 0317 	bic.w	r3, r3, #23
 8002ea6:	f043 0202 	orr.w	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <LL_ADC_IsEnabled+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_ADC_IsEnabled+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d101      	bne.n	8002ef4 <LL_ADC_IsDisableOngoing+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_ADC_IsDisableOngoing+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f10:	f023 0317 	bic.w	r3, r3, #23
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f36:	f023 0317 	bic.w	r3, r3, #23
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d101      	bne.n	8002f64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1ae      	b.n	80032f0 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe f83b 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff44 	bl	8002e46 <LL_ADC_IsInternalRegulatorEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d115      	bne.n	8002ff0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff18 	bl	8002dfe <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fce:	4b9b      	ldr	r3, [pc, #620]	; (800323c <HAL_ADC_Init+0x2cc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	4a9a      	ldr	r2, [pc, #616]	; (8003240 <HAL_ADC_Init+0x2d0>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	3301      	adds	r3, #1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff26 	bl	8002e46 <LL_ADC_IsInternalRegulatorEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f043 0210 	orr.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff93 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 8003026:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	f040 8154 	bne.w	80032de <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 8150 	bne.w	80032de <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003046:	f043 0202 	orr.w	r2, r3, #2
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff30 	bl	8002eb8 <LL_ADC_IsEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d14f      	bne.n	80030fe <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f023 0118 	bic.w	r1, r3, #24
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d111      	bne.n	80030b6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800309e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80030a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80030aa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_ADC_Init+0x2d4>)
 80030be:	4013      	ands	r3, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	430b      	orrs	r3, r1
 80030c8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80030d2:	d014      	beq.n	80030fe <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d00f      	beq.n	80030fe <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80030e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e6:	d00a      	beq.n	80030fe <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80030e8:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_ADC_Init+0x2d8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030f8:	4953      	ldr	r1, [pc, #332]	; (8003248 <HAL_ADC_Init+0x2d8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7e1b      	ldrb	r3, [r3, #24]
 8003102:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7e5b      	ldrb	r3, [r3, #25]
 8003108:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800310a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7e9b      	ldrb	r3, [r3, #26]
 8003110:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003112:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003118:	2a00      	cmp	r2, #0
 800311a:	d002      	beq.n	8003122 <HAL_ADC_Init+0x1b2>
 800311c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003120:	e000      	b.n	8003124 <HAL_ADC_Init+0x1b4>
 8003122:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003124:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800312a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	da04      	bge.n	800313e <HAL_ADC_Init+0x1ce>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800313c:	e001      	b.n	8003142 <HAL_ADC_Init+0x1d2>
 800313e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8003142:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800314a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800314c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d114      	bne.n	8003188 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7e9b      	ldrb	r3, [r3, #26]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e00b      	b.n	8003188 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800319c:	4313      	orrs	r3, r2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80031ae:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	4b22      	ldr	r3, [pc, #136]	; (800324c <HAL_ADC_Init+0x2dc>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	461a      	mov	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f7ff fd7d 	bl	8002cda <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	461a      	mov	r2, r3
 80031ea:	4919      	ldr	r1, [pc, #100]	; (8003250 <HAL_ADC_Init+0x2e0>)
 80031ec:	f7ff fd75 	bl	8002cda <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d108      	bne.n	800320a <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f062 020f 	orn	r2, r2, #15
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
 8003208:	e044      	b.n	8003294 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003212:	d13f      	bne.n	8003294 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	e00c      	b.n	8003234 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d012      	beq.n	8003254 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3301      	adds	r3, #1
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b07      	cmp	r3, #7
 8003238:	d9ef      	bls.n	800321a <HAL_ADC_Init+0x2aa>
 800323a:	e00c      	b.n	8003256 <HAL_ADC_Init+0x2e6>
 800323c:	20000000 	.word	0x20000000
 8003240:	053e2d63 	.word	0x053e2d63
 8003244:	1ffffc02 	.word	0x1ffffc02
 8003248:	40012708 	.word	0x40012708
 800324c:	dffffc02 	.word	0xdffffc02
 8003250:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8003254:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d108      	bne.n	800326e <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f062 020f 	orn	r2, r2, #15
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
 800326c:	e012      	b.n	8003294 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	3b01      	subs	r3, #1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	f003 031c 	and.w	r3, r3, #28
 8003280:	f06f 020f 	mvn.w	r2, #15
 8003284:	fa02 f103 	lsl.w	r1, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_ADC_Init+0x388>)
 800329c:	4013      	ands	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d10b      	bne.n	80032bc <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032ba:	e018      	b.n	80032ee <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f023 0312 	bic.w	r3, r3, #18
 80032c4:	f043 0210 	orr.w	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80032dc:	e007      	b.n	80032ee <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	f043 0210 	orr.w	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	833fffe7 	.word	0x833fffe7

080032fc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06a      	b.n	80033e4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	f043 0202 	orr.w	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fabe 	bl	800389c <ADC_ConversionStop>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fb82 	bl	8003a34 <ADC_Disable>
 8003330:	4603      	mov	r3, r0
 8003332:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fd6d 	bl	8002e24 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f240 329f 	movw	r2, #927	; 0x39f
 8003366:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_ADC_DeInit+0xf0>)
 8003374:	400b      	ands	r3, r1
 8003376:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003386:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0207 	bic.w	r2, r2, #7
 8003396:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80033a6:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_ADC_DeInit+0xf4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_ADC_DeInit+0xf4>)
 80033bc:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80033c0:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fe3e 	bl	8001044 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	833e0200 	.word	0x833e0200
 80033f0:	40012708 	.word	0x40012708

080033f4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fda3 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d132      	bne.n	8003472 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_ADC_Start+0x26>
 8003416:	2302      	movs	r3, #2
 8003418:	e02e      	b.n	8003478 <HAL_ADC_Start+0x84>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa80 	bl	8003928 <ADC_Enable>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11a      	bne.n	8003468 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	221c      	movs	r2, #28
 8003452:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fd4d 	bl	8002f00 <LL_ADC_REG_StartConversion>
 8003466:	e006      	b.n	8003476 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003470:	e001      	b.n	8003476 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003472:	2302      	movs	r3, #2
 8003474:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Stop+0x16>
 8003492:	2302      	movs	r3, #2
 8003494:	e022      	b.n	80034dc <HAL_ADC_Stop+0x5c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9fc 	bl	800389c <ADC_ConversionStop>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d111      	bne.n	80034d2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fac0 	bl	8003a34 <ADC_Disable>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d102      	bne.n	80034fc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80034f6:	2308      	movs	r3, #8
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e010      	b.n	800351e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e077      	b.n	800360a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800351a:	2304      	movs	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800351e:	f7fe fb49 	bl	8001bb4 <HAL_GetTick>
 8003522:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003524:	e021      	b.n	800356a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d01d      	beq.n	800356a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800352e:	f7fe fb41 	bl	8001bb4 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <HAL_ADC_PollForConversion+0x60>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d112      	bne.n	800356a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f043 0204 	orr.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0d6      	beq.n	8003526 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fbc4 	bl	8002d16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7e9b      	ldrb	r3, [r3, #26]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d12d      	bne.n	80035f8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d126      	bne.n	80035f8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fccc 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d112      	bne.n	80035e0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 020c 	bic.w	r2, r2, #12
 80035c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	659a      	str	r2, [r3, #88]	; 0x58
 80035de:	e00b      	b.n	80035f8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d103      	bne.n	8003608 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	220c      	movs	r2, #12
 8003606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x28>
 8003650:	2302      	movs	r3, #2
 8003652:	e110      	b.n	8003876 <HAL_ADC_ConfigChannel+0x24a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fc73 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	f040 80f7 	bne.w	800385c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	f000 80b1 	beq.w	80037da <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003680:	d004      	beq.n	800368c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003686:	4a7e      	ldr	r2, [pc, #504]	; (8003880 <HAL_ADC_ConfigChannel+0x254>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f7ff fb70 	bl	8002d7c <LL_ADC_REG_SetSequencerChAdd>
 800369c:	e041      	b.n	8003722 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	210f      	movs	r1, #15
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	401a      	ands	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0xa0>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	e011      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xc4>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	e003      	b.n	80036f0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	6849      	ldr	r1, [r1, #4]
 80036f4:	f001 011f 	and.w	r1, r1, #31
 80036f8:	408b      	lsls	r3, r1
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	429a      	cmp	r2, r3
 800370e:	d808      	bhi.n	8003722 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	f7ff fb0c 	bl	8002d3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	461a      	mov	r2, r3
 8003730:	f7ff fb49 	bl	8002dc6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	f280 8097 	bge.w	800386c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800373e:	4851      	ldr	r0, [pc, #324]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 8003740:	f7ff fabe 	bl	8002cc0 <LL_ADC_GetCommonPathInternalCh>
 8003744:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a4f      	ldr	r2, [pc, #316]	; (8003888 <HAL_ADC_ConfigChannel+0x25c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d120      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11b      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003760:	4619      	mov	r1, r3
 8003762:	4848      	ldr	r0, [pc, #288]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 8003764:	f7ff fa9a 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003768:	4b48      	ldr	r3, [pc, #288]	; (800388c <HAL_ADC_ConfigChannel+0x260>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	4a48      	ldr	r2, [pc, #288]	; (8003890 <HAL_ADC_ConfigChannel+0x264>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003782:	e002      	b.n	800378a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3b01      	subs	r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f9      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003790:	e06c      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3f      	ldr	r2, [pc, #252]	; (8003894 <HAL_ADC_ConfigChannel+0x268>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d10c      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x18a>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ac:	4619      	mov	r1, r3
 80037ae:	4835      	ldr	r0, [pc, #212]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 80037b0:	f7ff fa74 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
 80037b4:	e05a      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a37      	ldr	r2, [pc, #220]	; (8003898 <HAL_ADC_ConfigChannel+0x26c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d155      	bne.n	800386c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d150      	bne.n	800386c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d0:	4619      	mov	r1, r3
 80037d2:	482c      	ldr	r0, [pc, #176]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 80037d4:	f7ff fa62 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
 80037d8:	e048      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e2:	d004      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <HAL_ADC_ConfigChannel+0x254>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d107      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7ff fad1 	bl	8002da0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	da32      	bge.n	800386c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003806:	481f      	ldr	r0, [pc, #124]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 8003808:	f7ff fa5a 	bl	8002cc0 <LL_ADC_GetCommonPathInternalCh>
 800380c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_ADC_ConfigChannel+0x25c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d107      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800381e:	4619      	mov	r1, r3
 8003820:	4818      	ldr	r0, [pc, #96]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 8003822:	f7ff fa3b 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
 8003826:	e021      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_ADC_ConfigChannel+0x268>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d107      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003838:	4619      	mov	r1, r3
 800383a:	4812      	ldr	r0, [pc, #72]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 800383c:	f7ff fa2e 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
 8003840:	e014      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <HAL_ADC_ConfigChannel+0x26c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10f      	bne.n	800386c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003852:	4619      	mov	r1, r3
 8003854:	480b      	ldr	r0, [pc, #44]	; (8003884 <HAL_ADC_ConfigChannel+0x258>)
 8003856:	f7ff fa21 	bl	8002c9c <LL_ADC_SetCommonPathInternalCh>
 800385a:	e007      	b.n	800386c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003874:	7ffb      	ldrb	r3, [r7, #31]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	80000004 	.word	0x80000004
 8003884:	40012708 	.word	0x40012708
 8003888:	b0001000 	.word	0xb0001000
 800388c:	20000000 	.word	0x20000000
 8003890:	053e2d63 	.word	0x053e2d63
 8003894:	b8004000 	.word	0xb8004000
 8003898:	b4002000 	.word	0xb4002000

0800389c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fb4f 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d033      	beq.n	800391c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fb0f 	bl	8002edc <LL_ADC_IsDisableOngoing>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fb2c 	bl	8002f26 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038ce:	f7fe f971 	bl	8001bb4 <HAL_GetTick>
 80038d2:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80038d4:	e01b      	b.n	800390e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80038d6:	f7fe f96d 	bl	8001bb4 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d914      	bls.n	800390e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f043 0210 	orr.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1dc      	bne.n	80038d6 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fabd 	bl	8002eb8 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d169      	bne.n	8003a18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <ADC_Enable+0xfc>)
 800394c:	4013      	ands	r3, r2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e055      	b.n	8003a1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff fa7a 	bl	8002e6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003978:	482b      	ldr	r0, [pc, #172]	; (8003a28 <ADC_Enable+0x100>)
 800397a:	f7ff f9a1 	bl	8002cc0 <LL_ADC_GetCommonPathInternalCh>
 800397e:	4603      	mov	r3, r0
 8003980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00f      	beq.n	80039a8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003988:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <ADC_Enable+0x104>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	4a28      	ldr	r2, [pc, #160]	; (8003a30 <ADC_Enable+0x108>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	3301      	adds	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800399a:	e002      	b.n	80039a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	7e5b      	ldrb	r3, [r3, #25]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d033      	beq.n	8003a18 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80039b0:	f7fe f900 	bl	8001bb4 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039b6:	e028      	b.n	8003a0a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fa7b 	bl	8002eb8 <LL_ADC_IsEnabled>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d104      	bne.n	80039d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fa4d 	bl	8002e6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039d2:	f7fe f8ef 	bl	8001bb4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d914      	bls.n	8003a0a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d00d      	beq.n	8003a0a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	f043 0210 	orr.w	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e007      	b.n	8003a1a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d1cf      	bne.n	80039b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	80000017 	.word	0x80000017
 8003a28:	40012708 	.word	0x40012708
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	053e2d63 	.word	0x053e2d63

08003a34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fa4b 	bl	8002edc <LL_ADC_IsDisableOngoing>
 8003a46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fa33 	bl	8002eb8 <LL_ADC_IsEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d047      	beq.n	8003ae8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d144      	bne.n	8003ae8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0305 	and.w	r3, r3, #5
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10c      	bne.n	8003a86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fa0e 	bl	8002e92 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a7e:	f7fe f899 	bl	8001bb4 <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a84:	e029      	b.n	8003ada <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f043 0210 	orr.w	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e023      	b.n	8003aea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aa2:	f7fe f887 	bl	8001bb4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d914      	bls.n	8003ada <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1dc      	bne.n	8003aa2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <LL_ADC_IsEnabled>:
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <LL_ADC_IsEnabled+0x18>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <LL_ADC_IsEnabled+0x1a>
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2a:	d101      	bne.n	8003b30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <HAL_ADCEx_Calibration_Start+0x1a>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e068      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xec>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff68 	bl	8003a34 <ADC_Disable>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ffc0 	bl	8003af2 <LL_ADC_IsEnabled>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d14c      	bne.n	8003c12 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0203 	bic.w	r2, r2, #3
 8003ba2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003bb4:	e014      	b.n	8003be0 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003bc2:	d30d      	bcc.n	8003be0 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f023 0312 	bic.w	r3, r3, #18
 8003bcc:	f043 0210 	orr.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e023      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff96 	bl	8003b16 <LL_ADC_IsCalibrationOnGoing>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e2      	bne.n	8003bb6 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68d9      	ldr	r1, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c10:	e005      	b.n	8003c1e <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	f043 0210 	orr.w	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <__NVIC_GetPriorityGrouping+0x18>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0307 	and.w	r3, r3, #7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db0b      	blt.n	8003cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <__NVIC_EnableIRQ+0x34>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db12      	blt.n	8003d04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	490a      	ldr	r1, [pc, #40]	; (8003d10 <__NVIC_DisableIRQ+0x44>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	3320      	adds	r3, #32
 8003cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cf8:	f3bf 8f4f 	dsb	sy
}
 8003cfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cfe:	f3bf 8f6f 	isb	sy
}
 8003d02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000e100 	.word	0xe000e100

08003d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db0a      	blt.n	8003d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	490c      	ldr	r1, [pc, #48]	; (8003d60 <__NVIC_SetPriority+0x4c>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	440b      	add	r3, r1
 8003d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d3c:	e00a      	b.n	8003d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4908      	ldr	r1, [pc, #32]	; (8003d64 <__NVIC_SetPriority+0x50>)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	440b      	add	r3, r1
 8003d52:	761a      	strb	r2, [r3, #24]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000e100 	.word	0xe000e100
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f1c3 0307 	rsb	r3, r3, #7
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	bf28      	it	cs
 8003d86:	2304      	movcs	r3, #4
 8003d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d902      	bls.n	8003d98 <NVIC_EncodePriority+0x30>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3b03      	subs	r3, #3
 8003d96:	e000      	b.n	8003d9a <NVIC_EncodePriority+0x32>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	401a      	ands	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db0:	f04f 31ff 	mov.w	r1, #4294967295
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	4313      	orrs	r3, r2
         );
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff2b 	bl	8003c30 <__NVIC_SetPriorityGrouping>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff42 	bl	8003c78 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ffb4 	bl	8003d68 <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff83 	bl	8003d14 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff35 	bl	8003c94 <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff43 	bl	8003ccc <__NVIC_DisableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e08e      	b.n	8003f80 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_DMA_Init+0x138>)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d80f      	bhi.n	8003e8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b45      	ldr	r3, [pc, #276]	; (8003f8c <HAL_DMA_Init+0x13c>)
 8003e76:	4413      	add	r3, r2
 8003e78:	4a45      	ldr	r2, [pc, #276]	; (8003f90 <HAL_DMA_Init+0x140>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	009a      	lsls	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a42      	ldr	r2, [pc, #264]	; (8003f94 <HAL_DMA_Init+0x144>)
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e8c:	e00e      	b.n	8003eac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <HAL_DMA_Init+0x148>)
 8003e96:	4413      	add	r3, r2
 8003e98:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <HAL_DMA_Init+0x140>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <HAL_DMA_Init+0x14c>)
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6819      	ldr	r1, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb24 	bl	800454c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0c:	d102      	bne.n	8003f14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_DMA_Init+0x106>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d80c      	bhi.n	8003f56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fb4d 	bl	80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	e008      	b.n	8003f68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40020407 	.word	0x40020407
 8003f8c:	bffdfff8 	.word	0xbffdfff8
 8003f90:	cccccccd 	.word	0xcccccccd
 8003f94:	40020000 	.word	0x40020000
 8003f98:	bffdfbf8 	.word	0xbffdfbf8
 8003f9c:	40020400 	.word	0x40020400

08003fa0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07b      	b.n	80040aa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <HAL_DMA_DeInit+0x114>)
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d80f      	bhi.n	8003fee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b38      	ldr	r3, [pc, #224]	; (80040b8 <HAL_DMA_DeInit+0x118>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4a38      	ldr	r2, [pc, #224]	; (80040bc <HAL_DMA_DeInit+0x11c>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	009a      	lsls	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <HAL_DMA_DeInit+0x120>)
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
 8003fec:	e00e      	b.n	800400c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_DMA_DeInit+0x124>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a30      	ldr	r2, [pc, #192]	; (80040bc <HAL_DMA_DeInit+0x11c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	009a      	lsls	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <HAL_DMA_DeInit+0x128>)
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f003 021c 	and.w	r2, r3, #28
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fa8f 	bl	800454c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800403e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <HAL_DMA_DeInit+0xc8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d80b      	bhi.n	8004068 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fac3 	bl	80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004066:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020407 	.word	0x40020407
 80040b8:	bffdfff8 	.word	0xbffdfff8
 80040bc:	cccccccd 	.word	0xcccccccd
 80040c0:	40020000 	.word	0x40020000
 80040c4:	bffdfbf8 	.word	0xbffdfbf8
 80040c8:	40020400 	.word	0x40020400

080040cc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Start_IT+0x20>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e069      	b.n	80041c0 <HAL_DMA_Start_IT+0xf4>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d155      	bne.n	80041ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f9d3 	bl	80044d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 020e 	orr.w	r2, r2, #14
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00f      	b.n	8004164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e008      	b.n	80041be <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e04f      	b.n	800427a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d008      	beq.n	80041f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e040      	b.n	800427a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 020e 	bic.w	r2, r2, #14
 8004206:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f003 021c 	and.w	r2, r3, #28
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004244:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00c      	beq.n	8004268 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004266:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d005      	beq.n	80042a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e047      	b.n	8004338 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 020e 	bic.w	r2, r2, #14
 80042b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 021c 	and.w	r2, r3, #28
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00c      	beq.n	8004318 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800430c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004316:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
    }
  }
  return status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 031c 	and.w	r3, r3, #28
 8004364:	2204      	movs	r2, #4
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d027      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7c>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 021c 	and.w	r2, r3, #28
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	2104      	movs	r1, #4
 80043a6:	fa01 f202 	lsl.w	r2, r1, r2
 80043aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8081 	beq.w	80044b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80043be:	e07b      	b.n	80044b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 031c 	and.w	r3, r3, #28
 80043c8:	2202      	movs	r2, #2
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d03d      	beq.n	8004450 <HAL_DMA_IRQHandler+0x10c>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d038      	beq.n	8004450 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020a 	bic.w	r2, r2, #10
 80043fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <HAL_DMA_IRQHandler+0x180>)
 800440c:	429a      	cmp	r2, r3
 800440e:	d909      	bls.n	8004424 <HAL_DMA_IRQHandler+0xe0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f003 031c 	and.w	r3, r3, #28
 8004418:	4a2b      	ldr	r2, [pc, #172]	; (80044c8 <HAL_DMA_IRQHandler+0x184>)
 800441a:	2102      	movs	r1, #2
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	6053      	str	r3, [r2, #4]
 8004422:	e008      	b.n	8004436 <HAL_DMA_IRQHandler+0xf2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 031c 	and.w	r3, r3, #28
 800442c:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_DMA_IRQHandler+0x188>)
 800442e:	2102      	movs	r1, #2
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d038      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800444e:	e033      	b.n	80044b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	f003 031c 	and.w	r3, r3, #28
 8004458:	2208      	movs	r2, #8
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02a      	beq.n	80044ba <HAL_DMA_IRQHandler+0x176>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d025      	beq.n	80044ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 020e 	bic.w	r2, r2, #14
 800447c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f003 021c 	and.w	r2, r3, #28
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	2101      	movs	r1, #1
 800448c:	fa01 f202 	lsl.w	r2, r1, r2
 8004490:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
}
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40020080 	.word	0x40020080
 80044c8:	40020400 	.word	0x40020400
 80044cc:	40020000 	.word	0x40020000

080044d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f003 021c 	and.w	r2, r3, #28
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f202 	lsl.w	r2, r1, r2
 800450c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b10      	cmp	r3, #16
 800451c:	d108      	bne.n	8004530 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800452e:	e007      	b.n	8004540 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr
	...

0800454c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800455c:	429a      	cmp	r2, r3
 800455e:	d813      	bhi.n	8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800456c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	3b08      	subs	r3, #8
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e011      	b.n	80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004592:	4413      	add	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3b08      	subs	r3, #8
 80045a0:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	3307      	adds	r3, #7
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80045b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40020407 	.word	0x40020407
 80045d0:	cccccccd 	.word	0xcccccccd
 80045d4:	4002081c 	.word	0x4002081c
 80045d8:	40020880 	.word	0x40020880

080045dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	461a      	mov	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a08      	ldr	r2, [pc, #32]	; (8004620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004600:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b01      	subs	r3, #1
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2201      	movs	r2, #1
 800460c:	409a      	lsls	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	1000823f 	.word	0x1000823f
 8004620:	40020940 	.word	0x40020940

08004624 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	460b      	mov	r3, r1
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	605a      	str	r2, [r3, #4]
      break;
 8004642:	e002      	b.n	800464a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
      break;
 8004648:	bf00      	nop
  }

  return status;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e003      	b.n	8004672 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800468a:	e140      	b.n	800490e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8132 	beq.w	8004908 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d005      	beq.n	80046bc <HAL_GPIO_Init+0x40>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d130      	bne.n	800471e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f2:	2201      	movs	r2, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0201 	and.w	r2, r3, #1
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d017      	beq.n	800475a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d123      	bne.n	80047ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 808c 	beq.w	8004908 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80047f0:	4a4e      	ldr	r2, [pc, #312]	; (800492c <HAL_GPIO_Init+0x2b0>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	2207      	movs	r2, #7
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800481a:	d00d      	beq.n	8004838 <HAL_GPIO_Init+0x1bc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a44      	ldr	r2, [pc, #272]	; (8004930 <HAL_GPIO_Init+0x2b4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <HAL_GPIO_Init+0x1b8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a43      	ldr	r2, [pc, #268]	; (8004934 <HAL_GPIO_Init+0x2b8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_GPIO_Init+0x1b4>
 800482c:	2302      	movs	r3, #2
 800482e:	e004      	b.n	800483a <HAL_GPIO_Init+0x1be>
 8004830:	2307      	movs	r3, #7
 8004832:	e002      	b.n	800483a <HAL_GPIO_Init+0x1be>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_GPIO_Init+0x1be>
 8004838:	2300      	movs	r3, #0
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	f002 0203 	and.w	r2, r2, #3
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	4093      	lsls	r3, r2
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800484a:	4938      	ldr	r1, [pc, #224]	; (800492c <HAL_GPIO_Init+0x2b0>)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004858:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800487e:	4a2e      	ldr	r2, [pc, #184]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004886:	4b2c      	ldr	r3, [pc, #176]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80048ac:	4a22      	ldr	r2, [pc, #136]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048b4:	4b20      	ldr	r3, [pc, #128]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048d8:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004902:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <HAL_GPIO_Init+0x2bc>)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3301      	adds	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	f47f aeb7 	bne.w	800468c <HAL_GPIO_Init+0x10>
  }
}
 800491e:	bf00      	nop
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	48000400 	.word	0x48000400
 8004934:	48000800 	.word	0x48000800
 8004938:	58000800 	.word	0x58000800

0800493c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800494a:	e0af      	b.n	8004aac <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800494c:	2201      	movs	r2, #1
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a2 	beq.w	8004aa6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004962:	4a59      	ldr	r2, [pc, #356]	; (8004ac8 <HAL_GPIO_DeInit+0x18c>)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	2207      	movs	r2, #7
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800498a:	d00d      	beq.n	80049a8 <HAL_GPIO_DeInit+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a4f      	ldr	r2, [pc, #316]	; (8004acc <HAL_GPIO_DeInit+0x190>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <HAL_GPIO_DeInit+0x68>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a4e      	ldr	r2, [pc, #312]	; (8004ad0 <HAL_GPIO_DeInit+0x194>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_GPIO_DeInit+0x64>
 800499c:	2302      	movs	r3, #2
 800499e:	e004      	b.n	80049aa <HAL_GPIO_DeInit+0x6e>
 80049a0:	2307      	movs	r3, #7
 80049a2:	e002      	b.n	80049aa <HAL_GPIO_DeInit+0x6e>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_GPIO_DeInit+0x6e>
 80049a8:	2300      	movs	r3, #0
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	f002 0203 	and.w	r2, r2, #3
 80049b0:	0092      	lsls	r2, r2, #2
 80049b2:	4093      	lsls	r3, r2
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d136      	bne.n	8004a28 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80049ba:	4b46      	ldr	r3, [pc, #280]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049bc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	43db      	mvns	r3, r3
 80049c4:	4943      	ldr	r1, [pc, #268]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80049cc:	4b41      	ldr	r3, [pc, #260]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	493f      	ldr	r1, [pc, #252]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049d8:	4013      	ands	r3, r2
 80049da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	493b      	ldr	r1, [pc, #236]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80049ec:	4b39      	ldr	r3, [pc, #228]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	4937      	ldr	r1, [pc, #220]	; (8004ad4 <HAL_GPIO_DeInit+0x198>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	2207      	movs	r2, #7
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ac8 <HAL_GPIO_DeInit+0x18c>)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	3302      	adds	r3, #2
 8004a12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	482b      	ldr	r0, [pc, #172]	; (8004ac8 <HAL_GPIO_DeInit+0x18c>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	400a      	ands	r2, r1
 8004a22:	3302      	adds	r3, #2
 8004a24:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	2103      	movs	r1, #3
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	08da      	lsrs	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3208      	adds	r2, #8
 8004a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	220f      	movs	r2, #15
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	08d2      	lsrs	r2, r2, #3
 8004a5c:	4019      	ands	r1, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3208      	adds	r2, #8
 8004a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2103      	movs	r1, #3
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	2101      	movs	r1, #1
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	2103      	movs	r1, #3
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f47f af49 	bne.w	800494c <HAL_GPIO_DeInit+0x10>
  }
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	48000400 	.word	0x48000400
 8004ad0:	48000800 	.word	0x48000800
 8004ad4:	58000800 	.word	0x58000800

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004af4:	e002      	b.n	8004afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bc80      	pop	{r7}
 8004b04:	4770      	bx	lr

08004b06 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b18:	887a      	ldrh	r2, [r7, #2]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	43d9      	mvns	r1, r3
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	400b      	ands	r3, r1
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b50:	88fb      	ldrh	r3, [r7, #6]
 8004b52:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f005 fc68 	bl	800a42c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	58000800 	.word	0x58000800

08004b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e081      	b.n	8004c7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fc08 	bl	80013a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2224      	movs	r2, #36	; 0x24
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	e006      	b.n	8004bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d104      	bne.n	8004c02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69d9      	ldr	r1, [r3, #28]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	461a      	mov	r2, r3
 8004c94:	460b      	mov	r3, r1
 8004c96:	817b      	strh	r3, [r7, #10]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 80da 	bne.w	8004e5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Master_Transmit+0x30>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0d3      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fc ff78 	bl	8001bb4 <HAL_GetTick>
 8004cc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f9e5 	bl	80050a2 <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0be      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2221      	movs	r2, #33	; 0x21
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2210      	movs	r2, #16
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	893a      	ldrh	r2, [r7, #8]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2bff      	cmp	r3, #255	; 0xff
 8004d12:	d90e      	bls.n	8004d32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	22ff      	movs	r2, #255	; 0xff
 8004d18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	8979      	ldrh	r1, [r7, #10]
 8004d22:	4b51      	ldr	r3, [pc, #324]	; (8004e68 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fb58 	bl	80053e0 <I2C_TransferConfig>
 8004d30:	e06c      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	4b48      	ldr	r3, [pc, #288]	; (8004e68 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fb47 	bl	80053e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d52:	e05b      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6a39      	ldr	r1, [r7, #32]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f9e2 	bl	8005122 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e07b      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d034      	beq.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d130      	bne.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f974 	bl	80050a2 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e04d      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2bff      	cmp	r3, #255	; 0xff
 8004dcc:	d90e      	bls.n	8004dec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	; 0xff
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fafb 	bl	80053e0 <I2C_TransferConfig>
 8004dea:	e00f      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	8979      	ldrh	r1, [r7, #10]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 faea 	bl	80053e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d19e      	bne.n	8004d54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f9c1 	bl	80051a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e01a      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_I2C_Master_Transmit+0x1e4>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	80002000 	.word	0x80002000
 8004e6c:	fe00e800 	.word	0xfe00e800

08004e70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
 8004e80:	4613      	mov	r3, r2
 8004e82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	f040 80db 	bne.w	8005048 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_Master_Receive+0x30>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0d4      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fc fe84 	bl	8001bb4 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2319      	movs	r3, #25
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8f1 	bl	80050a2 <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0bf      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2222      	movs	r2, #34	; 0x22
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	893a      	ldrh	r2, [r7, #8]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2bff      	cmp	r3, #255	; 0xff
 8004efa:	d90e      	bls.n	8004f1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	4b52      	ldr	r3, [pc, #328]	; (8005054 <HAL_I2C_Master_Receive+0x1e4>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa64 	bl	80053e0 <I2C_TransferConfig>
 8004f18:	e06d      	b.n	8004ff6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	8979      	ldrh	r1, [r7, #10]
 8004f2c:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_I2C_Master_Receive+0x1e4>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fa53 	bl	80053e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004f3a:	e05c      	b.n	8004ff6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	6a39      	ldr	r1, [r7, #32]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f96b 	bl	800521c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e07c      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d034      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0x186>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d130      	bne.n	8004ff6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f87f 	bl	80050a2 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e04d      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2bff      	cmp	r3, #255	; 0xff
 8004fb6:	d90e      	bls.n	8004fd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	8979      	ldrh	r1, [r7, #10]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fa06 	bl	80053e0 <I2C_TransferConfig>
 8004fd4:	e00f      	b.n	8004ff6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f9f5 	bl	80053e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d19d      	bne.n	8004f3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6a39      	ldr	r1, [r7, #32]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f8cc 	bl	80051a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e01a      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2220      	movs	r2, #32
 800501a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_I2C_Master_Receive+0x1e8>)
 8005028:	400b      	ands	r3, r1
 800502a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	80002400 	.word	0x80002400
 8005058:	fe00e800 	.word	0xfe00e800

0800505c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d103      	bne.n	800507a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d007      	beq.n	8005098 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	619a      	str	r2, [r3, #24]
  }
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	60b9      	str	r1, [r7, #8]
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b2:	e022      	b.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d01e      	beq.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050bc:	f7fc fd7a 	bl	8001bb4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d302      	bcc.n	80050d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d113      	bne.n	80050fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e00f      	b.n	800511a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4013      	ands	r3, r2
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	bf0c      	ite	eq
 800510a:	2301      	moveq	r3, #1
 800510c:	2300      	movne	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	429a      	cmp	r2, r3
 8005116:	d0cd      	beq.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800512e:	e02c      	b.n	800518a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f8dd 	bl	80052f4 <I2C_IsAcknowledgeFailed>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e02a      	b.n	800519a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d01e      	beq.n	800518a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fc fd32 	bl	8001bb4 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d1cb      	bne.n	8005130 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ae:	e028      	b.n	8005202 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f89d 	bl	80052f4 <I2C_IsAcknowledgeFailed>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e026      	b.n	8005212 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c4:	f7fc fcf6 	bl	8001bb4 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d113      	bne.n	8005202 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e007      	b.n	8005212 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d1cf      	bne.n	80051b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005228:	e055      	b.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f860 	bl	80052f4 <I2C_IsAcknowledgeFailed>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e053      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d129      	bne.n	80052a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d105      	bne.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e03f      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800527a:	400b      	ands	r3, r1
 800527c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e022      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a0:	f7fc fc88 	bl	8001bb4 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d302      	bcc.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e007      	b.n	80052e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d1a2      	bne.n	800522a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	fe00e800 	.word	0xfe00e800

080052f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b10      	cmp	r3, #16
 800530c:	d161      	bne.n	80053d2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800531c:	d02b      	beq.n	8005376 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800532c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532e:	e022      	b.n	8005376 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d01e      	beq.n	8005376 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005338:	f7fc fc3c 	bl	8001bb4 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d302      	bcc.n	800534e <I2C_IsAcknowledgeFailed+0x5a>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e02e      	b.n	80053d4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b20      	cmp	r3, #32
 8005382:	d1d5      	bne.n	8005330 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2210      	movs	r2, #16
 800538a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2220      	movs	r2, #32
 8005392:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff fe61 	bl	800505c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b0d      	ldr	r3, [pc, #52]	; (80053dc <I2C_IsAcknowledgeFailed+0xe8>)
 80053a6:	400b      	ands	r3, r1
 80053a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f043 0204 	orr.w	r2, r3, #4
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	fe00e800 	.word	0xfe00e800

080053e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	4613      	mov	r3, r2
 80053f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	0d5b      	lsrs	r3, r3, #21
 80053fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <I2C_TransferConfig+0x54>)
 8005402:	430b      	orrs	r3, r1
 8005404:	43db      	mvns	r3, r3
 8005406:	ea02 0103 	and.w	r1, r2, r3
 800540a:	897b      	ldrh	r3, [r7, #10]
 800540c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005410:	7a7b      	ldrb	r3, [r7, #9]
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	03ff63ff 	.word	0x03ff63ff

08005438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b20      	cmp	r3, #32
 800544c:	d138      	bne.n	80054c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005458:	2302      	movs	r3, #2
 800545a:	e032      	b.n	80054c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	; 0x24
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800548a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d139      	bne.n	8005556 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e033      	b.n	8005558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2224      	movs	r2, #36	; 0x24
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800551e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e000      	b.n	8005558 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr
	...

08005564 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <HAL_PWR_EnableBkUpAccess+0x18>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a03      	ldr	r2, [pc, #12]	; (800557c <HAL_PWR_EnableBkUpAccess+0x18>)
 800556e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	58000400 	.word	0x58000400

08005580 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10c      	bne.n	80055ac <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559e:	d10d      	bne.n	80055bc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80055a0:	f000 f83c 	bl	800561c <HAL_PWREx_DisableLowPowerRunMode>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80055aa:	e015      	b.n	80055d8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <HAL_PWR_EnterSLEEPMode+0x60>)
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80055b8:	f000 f822 	bl	8005600 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80055c2:	f023 0304 	bic.w	r3, r3, #4
 80055c6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80055ce:	bf30      	wfi
 80055d0:	e002      	b.n	80055d8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80055d2:	bf40      	sev
    __WFE();
 80055d4:	bf20      	wfe
    __WFE();
 80055d6:	bf20      	wfe
  }
}
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	58000400 	.word	0x58000400
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <HAL_PWREx_GetVoltageRange+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	58000400 	.word	0x58000400

08005600 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005604:	4b04      	ldr	r3, [pc, #16]	; (8005618 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a03      	ldr	r2, [pc, #12]	; (8005618 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800560a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	58000400 	.word	0x58000400

0800561c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2232      	movs	r2, #50	; 0x32
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	4a12      	ldr	r2, [pc, #72]	; (8005684 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0c9b      	lsrs	r3, r3, #18
 8005640:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005642:	e002      	b.n	800564a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3b01      	subs	r3, #1
 8005648:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005656:	d102      	bne.n	800565e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f2      	bne.n	8005644 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800565e:	4b07      	ldr	r3, [pc, #28]	; (800567c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566a:	d101      	bne.n	8005670 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e000      	b.n	8005672 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	58000400 	.word	0x58000400
 8005680:	20000000 	.word	0x20000000
 8005684:	431bde83 	.word	0x431bde83

08005688 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056a8:	f043 0304 	orr.w	r3, r3, #4
 80056ac:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80056b4:	bf30      	wfi
 80056b6:	e002      	b.n	80056be <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80056b8:	bf40      	sev
    __WFE();
 80056ba:	bf20      	wfe
    __WFE();
 80056bc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6113      	str	r3, [r2, #16]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	58000400 	.word	0x58000400
 80056d8:	e000ed00 	.word	0xe000ed00

080056dc <LL_PWR_IsEnabledBkUpAccess>:
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d101      	bne.n	80056f2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	58000400 	.word	0x58000400

08005700 <LL_RCC_HSE_EnableTcxo>:
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800570e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005712:	6013      	str	r3, [r2, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <LL_RCC_HSE_DisableTcxo>:
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800572a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800574a:	d101      	bne.n	8005750 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr

0800575a <LL_RCC_HSE_Enable>:
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800575e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
}
 800576e:	bf00      	nop
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <LL_RCC_HSE_Disable>:
{
 8005776:	b480      	push	{r7}
 8005778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800577a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	6013      	str	r3, [r2, #0]
}
 800578a:	bf00      	nop
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <LL_RCC_HSE_IsReady>:
{
 8005792:	b480      	push	{r7}
 8005794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057a4:	d101      	bne.n	80057aa <LL_RCC_HSE_IsReady+0x18>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <LL_RCC_HSE_IsReady+0x1a>
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <LL_RCC_HSI_Enable>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <LL_RCC_HSI_Disable>:
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_HSI_IsReady>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d101      	bne.n	8005804 <LL_RCC_HSI_IsReady+0x18>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <LL_RCC_HSI_IsReady+0x1a>
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <LL_RCC_HSI_SetCalibTrimming>:
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <LL_RCC_LSE_IsReady>:
{
 8005836:	b480      	push	{r7}
 8005838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d101      	bne.n	800584e <LL_RCC_LSE_IsReady+0x18>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_RCC_LSE_IsReady+0x1a>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <LL_RCC_LSI_Enable>:
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <LL_RCC_LSI_Disable>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005888:	f023 0301 	bic.w	r3, r3, #1
 800588c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005890:	bf00      	nop
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <LL_RCC_LSI_IsReady>:
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d101      	bne.n	80058b0 <LL_RCC_LSI_IsReady+0x18>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <LL_RCC_LSI_IsReady+0x1a>
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <LL_RCC_MSI_Enable>:
{
 80058ba:	b480      	push	{r7}
 80058bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80058be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6013      	str	r3, [r2, #0]
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bc80      	pop	{r7}
 80058d4:	4770      	bx	lr

080058d6 <LL_RCC_MSI_Disable>:
{
 80058d6:	b480      	push	{r7}
 80058d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	6013      	str	r3, [r2, #0]
}
 80058ea:	bf00      	nop
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_MSI_IsReady>:
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b02      	cmp	r3, #2
 8005902:	d101      	bne.n	8005908 <LL_RCC_MSI_IsReady+0x16>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <LL_RCC_MSI_IsReady+0x18>
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr

08005912 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005912:	b480      	push	{r7}
 8005914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b08      	cmp	r3, #8
 8005922:	d101      	bne.n	8005928 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <LL_RCC_MSI_GetRange>:
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005954:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597a:	4313      	orrs	r3, r2
 800597c:	604b      	str	r3, [r1, #4]
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <LL_RCC_SetSysClkSource>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 0203 	bic.w	r2, r3, #3
 800599a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_GetSysClkSource>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 030c 	and.w	r3, r3, #12
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_SetAHBPrescaler>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <LL_RCC_SetAHB3Prescaler>:
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059fa:	f023 020f 	bic.w	r2, r3, #15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_SetAPB1Prescaler>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <LL_RCC_SetAPB2Prescaler>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	608b      	str	r3, [r1, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr

08005a62 <LL_RCC_GetAHBPrescaler>:
{
 8005a62:	b480      	push	{r7}
 8005a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_GetAHB3Prescaler>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_GetAPB1Prescaler>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <LL_RCC_GetAPB2Prescaler>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad0:	6013      	str	r3, [r2, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aec:	6013      	str	r3, [r2, #0]
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b08:	d101      	bne.n	8005b0e <LL_RCC_PLL_IsReady+0x18>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <LL_RCC_PLL_IsReady+0x1a>
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr

08005b5c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0303 	and.w	r3, r3, #3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d101      	bne.n	8005b8a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d101      	bne.n	8005bae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bca:	d101      	bne.n	8005bd0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bec:	d101      	bne.n	8005bf2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e38a      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c0e:	f7ff fece 	bl	80059ae <LL_RCC_GetSysClkSource>
 8005c12:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c14:	f7ff ffa2 	bl	8005b5c <LL_RCC_PLL_GetMainSource>
 8005c18:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80c9 	beq.w	8005dba <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_RCC_OscConfig+0x3e>
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d17b      	bne.n	8005d2c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d178      	bne.n	8005d2c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c3a:	f7ff fe5a 	bl	80058f2 <LL_RCC_MSI_IsReady>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_OscConfig+0x54>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e369      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_RCC_OscConfig+0x72>
 8005c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6c:	e006      	b.n	8005c7c <HAL_RCC_OscConfig+0x80>
 8005c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d222      	bcs.n	8005cc6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fd4f 	bl	8006728 <RCC_SetFlashLatencyFromMSIRange>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e347      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9e:	f043 0308 	orr.w	r3, r3, #8
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fe4e 	bl	8005960 <LL_RCC_MSI_SetCalibTrimming>
 8005cc4:	e021      	b.n	8005d0a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd0:	f043 0308 	orr.w	r3, r3, #8
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fe35 	bl	8005960 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fd14 	bl	8006728 <RCC_SetFlashLatencyFromMSIRange>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e30c      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d0a:	f000 fcd5 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4ab4      	ldr	r2, [pc, #720]	; (8005fe4 <HAL_RCC_OscConfig+0x3e8>)
 8005d12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d14:	4bb4      	ldr	r3, [pc, #720]	; (8005fe8 <HAL_RCC_OscConfig+0x3ec>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb ff41 	bl	8001ba0 <HAL_InitTick>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005d22:	7cfb      	ldrb	r3, [r7, #19]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d047      	beq.n	8005db8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	e2fb      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02c      	beq.n	8005d8e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d34:	f7ff fdc1 	bl	80058ba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d38:	f7fb ff3c 	bl	8001bb4 <HAL_GetTick>
 8005d3c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d40:	f7fb ff38 	bl	8001bb4 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e2e8      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d52:	f7ff fdce 	bl	80058f2 <LL_RCC_MSI_IsReady>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f1      	beq.n	8005d40 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d66:	f043 0308 	orr.w	r3, r3, #8
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fdea 	bl	8005960 <LL_RCC_MSI_SetCalibTrimming>
 8005d8c:	e015      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d8e:	f7ff fda2 	bl	80058d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d92:	f7fb ff0f 	bl	8001bb4 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d9a:	f7fb ff0b 	bl	8001bb4 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e2bb      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005dac:	f7ff fda1 	bl	80058f2 <LL_RCC_MSI_IsReady>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f1      	bne.n	8005d9a <HAL_RCC_OscConfig+0x19e>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005db8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d05f      	beq.n	8005e86 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d005      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x1dc>
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d10d      	bne.n	8005dee <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d10a      	bne.n	8005dee <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	f7ff fcdb 	bl	8005792 <LL_RCC_HSE_IsReady>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d050      	beq.n	8005e84 <HAL_RCC_OscConfig+0x288>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d14c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e29a      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e00:	4313      	orrs	r3, r2
 8005e02:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0c:	d102      	bne.n	8005e14 <HAL_RCC_OscConfig+0x218>
 8005e0e:	f7ff fca4 	bl	800575a <LL_RCC_HSE_Enable>
 8005e12:	e00d      	b.n	8005e30 <HAL_RCC_OscConfig+0x234>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005e1c:	d104      	bne.n	8005e28 <HAL_RCC_OscConfig+0x22c>
 8005e1e:	f7ff fc6f 	bl	8005700 <LL_RCC_HSE_EnableTcxo>
 8005e22:	f7ff fc9a 	bl	800575a <LL_RCC_HSE_Enable>
 8005e26:	e003      	b.n	8005e30 <HAL_RCC_OscConfig+0x234>
 8005e28:	f7ff fca5 	bl	8005776 <LL_RCC_HSE_Disable>
 8005e2c:	f7ff fc76 	bl	800571c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d012      	beq.n	8005e5e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fb febc 	bl	8001bb4 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e40:	f7fb feb8 	bl	8001bb4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e268      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e52:	f7ff fc9e 	bl	8005792 <LL_RCC_HSE_IsReady>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f1      	beq.n	8005e40 <HAL_RCC_OscConfig+0x244>
 8005e5c:	e013      	b.n	8005e86 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5e:	f7fb fea9 	bl	8001bb4 <HAL_GetTick>
 8005e62:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e66:	f7fb fea5 	bl	8001bb4 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b64      	cmp	r3, #100	; 0x64
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e255      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e78:	f7ff fc8b 	bl	8005792 <LL_RCC_HSE_IsReady>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f1      	bne.n	8005e66 <HAL_RCC_OscConfig+0x26a>
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04b      	beq.n	8005f2a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x2a8>
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d113      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d110      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea4:	f7ff fca2 	bl	80057ec <LL_RCC_HSI_IsReady>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x2be>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e234      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fca5 	bl	800580e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec4:	e031      	b.n	8005f2a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d019      	beq.n	8005f02 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ece:	f7ff fc71 	bl	80057b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fb fe6f 	bl	8001bb4 <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ed8:	e008      	b.n	8005eec <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eda:	f7fb fe6b 	bl	8001bb4 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e21b      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005eec:	f7ff fc7e 	bl	80057ec <LL_RCC_HSI_IsReady>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f1      	beq.n	8005eda <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fc87 	bl	800580e <LL_RCC_HSI_SetCalibTrimming>
 8005f00:	e013      	b.n	8005f2a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f02:	f7ff fc65 	bl	80057d0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fb fe55 	bl	8001bb4 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fb fe51 	bl	8001bb4 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e201      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005f20:	f7ff fc64 	bl	80057ec <LL_RCC_HSI_IsReady>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f1      	bne.n	8005f0e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d06e      	beq.n	8006014 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d056      	beq.n	8005fec <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f46:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d031      	beq.n	8005fba <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e1da      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f78:	f7ff fc7e 	bl	8005878 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f7c:	f7fb fe1a 	bl	8001bb4 <HAL_GetTick>
 8005f80:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f84:	f7fb fe16 	bl	8001bb4 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b11      	cmp	r3, #17
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e1c6      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f96:	f7ff fc7f 	bl	8005898 <LL_RCC_LSI_IsReady>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f1      	bne.n	8005f84 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa8:	f023 0210 	bic.w	r2, r3, #16
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fba:	f7ff fc4d 	bl	8005858 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fb fdf9 	bl	8001bb4 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fb fdf5 	bl	8001bb4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b11      	cmp	r3, #17
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e1a5      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005fd8:	f7ff fc5e 	bl	8005898 <LL_RCC_LSI_IsReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f1      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x3ca>
 8005fe2:	e017      	b.n	8006014 <HAL_RCC_OscConfig+0x418>
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fec:	f7ff fc44 	bl	8005878 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff0:	f7fb fde0 	bl	8001bb4 <HAL_GetTick>
 8005ff4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fb fddc 	bl	8001bb4 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b11      	cmp	r3, #17
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e18c      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800600a:	f7ff fc45 	bl	8005898 <LL_RCC_LSI_IsReady>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f1      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80d8 	beq.w	80061d2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006022:	f7ff fb5b 	bl	80056dc <LL_PWR_IsEnabledBkUpAccess>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d113      	bne.n	8006054 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800602c:	f7ff fa9a 	bl	8005564 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006030:	f7fb fdc0 	bl	8001bb4 <HAL_GetTick>
 8006034:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006038:	f7fb fdbc 	bl	8001bb4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e16c      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800604a:	f7ff fb47 	bl	80056dc <LL_PWR_IsEnabledBkUpAccess>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f1      	beq.n	8006038 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d07b      	beq.n	8006154 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b85      	cmp	r3, #133	; 0x85
 8006062:	d003      	beq.n	800606c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	2b05      	cmp	r3, #5
 800606a:	d109      	bne.n	8006080 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006080:	f7fb fd98 	bl	8001bb4 <HAL_GetTick>
 8006084:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fb fd8a 	bl	8001bb4 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e138      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060b2:	f7ff fbc0 	bl	8005836 <LL_RCC_LSE_IsReady>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0ef      	beq.n	800609c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b81      	cmp	r3, #129	; 0x81
 80060c2:	d003      	beq.n	80060cc <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b85      	cmp	r3, #133	; 0x85
 80060ca:	d121      	bne.n	8006110 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060cc:	f7fb fd72 	bl	8001bb4 <HAL_GetTick>
 80060d0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060e6:	e00a      	b.n	80060fe <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e8:	f7fb fd64 	bl	8001bb4 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e112      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ec      	beq.n	80060e8 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800610e:	e060      	b.n	80061d2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb fd50 	bl	8001bb4 <HAL_GetTick>
 8006114:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800612a:	e00a      	b.n	8006142 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fb fd42 	bl	8001bb4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0f0      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ec      	bne.n	800612c <HAL_RCC_OscConfig+0x530>
 8006152:	e03e      	b.n	80061d2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006154:	f7fb fd2e 	bl	8001bb4 <HAL_GetTick>
 8006158:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800616a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800616e:	e00a      	b.n	8006186 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006170:	f7fb fd20 	bl	8001bb4 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	; 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e0ce      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1ec      	bne.n	8006170 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006196:	f7fb fd0d 	bl	8001bb4 <HAL_GetTick>
 800619a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80061b0:	e00a      	b.n	80061c8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb fcff 	bl	8001bb4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e0ad      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80061c8:	f7ff fb35 	bl	8005836 <LL_RCC_LSE_IsReady>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1ef      	bne.n	80061b2 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f000 80a3 	beq.w	8006322 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d076      	beq.n	80062d0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d14b      	bne.n	8006282 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ea:	f7ff fc76 	bl	8005ada <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ee:	f7fb fce1 	bl	8001bb4 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fb fcdd 	bl	8001bb4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b0a      	cmp	r3, #10
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e08d      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006208:	f7ff fc75 	bl	8005af6 <LL_RCC_PLL_IsReady>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f1      	bne.n	80061f6 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	4b44      	ldr	r3, [pc, #272]	; (800632c <HAL_RCC_OscConfig+0x730>)
 800621a:	4013      	ands	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006224:	4311      	orrs	r1, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800622a:	0212      	lsls	r2, r2, #8
 800622c:	4311      	orrs	r1, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006232:	4311      	orrs	r1, r2
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006238:	4311      	orrs	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800623e:	430a      	orrs	r2, r1
 8006240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006244:	4313      	orrs	r3, r2
 8006246:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006248:	f7ff fc39 	bl	8005abe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fb fcaa 	bl	8001bb4 <HAL_GetTick>
 8006260:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006264:	f7fb fca6 	bl	8001bb4 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b0a      	cmp	r3, #10
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e056      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006276:	f7ff fc3e 	bl	8005af6 <LL_RCC_PLL_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f1      	beq.n	8006264 <HAL_RCC_OscConfig+0x668>
 8006280:	e04f      	b.n	8006322 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006282:	f7ff fc2a 	bl	8005ada <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062a0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fb fc83 	bl	8001bb4 <HAL_GetTick>
 80062ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b2:	f7fb fc7f 	bl	8001bb4 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b0a      	cmp	r3, #10
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e02f      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80062c4:	f7ff fc17 	bl	8005af6 <LL_RCC_PLL_IsReady>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f1      	bne.n	80062b2 <HAL_RCC_OscConfig+0x6b6>
 80062ce:	e028      	b.n	8006322 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e023      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f003 0203 	and.w	r2, r3, #3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d115      	bne.n	800631e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d10e      	bne.n	800631e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	429a      	cmp	r2, r3
 800630e:	d106      	bne.n	800631e <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631a:	429a      	cmp	r2, r3
 800631c:	d001      	beq.n	8006322 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	11c1808c 	.word	0x11c1808c

08006330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e10f      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d91b      	bls.n	800638a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b86      	ldr	r3, [pc, #536]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 0207 	bic.w	r2, r3, #7
 800635a:	4984      	ldr	r1, [pc, #528]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	4313      	orrs	r3, r2
 8006360:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006362:	f7fb fc27 	bl	8001bb4 <HAL_GetTick>
 8006366:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006368:	e008      	b.n	800637c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800636a:	f7fb fc23 	bl	8001bb4 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e0f3      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637c:	4b7b      	ldr	r3, [pc, #492]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d1ef      	bne.n	800636a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d016      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fb12 	bl	80059c4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063a0:	f7fb fc08 	bl	8001bb4 <HAL_GetTick>
 80063a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063a8:	f7fb fc04 	bl	8001bb4 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e0d4      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ba:	f7ff fbda 	bl	8005b72 <LL_RCC_IsActiveFlag_HPRE>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f1      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d016      	beq.n	80063fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fb08 	bl	80059ea <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063da:	f7fb fbeb 	bl	8001bb4 <HAL_GetTick>
 80063de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063e2:	f7fb fbe7 	bl	8001bb4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e0b7      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063f4:	f7ff fbce 	bl	8005b94 <LL_RCC_IsActiveFlag_SHDHPRE>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f1      	beq.n	80063e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fb01 	bl	8005a16 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006414:	f7fb fbce 	bl	8001bb4 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800641a:	e008      	b.n	800642e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800641c:	f7fb fbca 	bl	8001bb4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e09a      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800642e:	f7ff fbc3 	bl	8005bb8 <LL_RCC_IsActiveFlag_PPRE1>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f1      	beq.n	800641c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff faf6 	bl	8005a3c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006450:	f7fb fbb0 	bl	8001bb4 <HAL_GetTick>
 8006454:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006458:	f7fb fbac 	bl	8001bb4 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e07c      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800646a:	f7ff fbb6 	bl	8005bda <LL_RCC_IsActiveFlag_PPRE2>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f1      	beq.n	8006458 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d043      	beq.n	8006508 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d106      	bne.n	8006496 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006488:	f7ff f983 	bl	8005792 <LL_RCC_HSE_IsReady>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d11e      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e066      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d106      	bne.n	80064ac <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800649e:	f7ff fb2a 	bl	8005af6 <LL_RCC_PLL_IsReady>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d113      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e05b      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80064b4:	f7ff fa1d 	bl	80058f2 <LL_RCC_MSI_IsReady>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d108      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e050      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80064c2:	f7ff f993 	bl	80057ec <LL_RCC_HSI_IsReady>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e049      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fa57 	bl	8005988 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064da:	f7fb fb6b 	bl	8001bb4 <HAL_GetTick>
 80064de:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e0:	e00a      	b.n	80064f8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e2:	f7fb fb67 	bl	8001bb4 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e035      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f8:	f7ff fa59 	bl	80059ae <LL_RCC_GetSysClkSource>
 80064fc:	4602      	mov	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	429a      	cmp	r2, r3
 8006506:	d1ec      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006508:	4b18      	ldr	r3, [pc, #96]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d21b      	bcs.n	800654e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006516:	4b15      	ldr	r3, [pc, #84]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f023 0207 	bic.w	r2, r3, #7
 800651e:	4913      	ldr	r1, [pc, #76]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	4313      	orrs	r3, r2
 8006524:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006526:	f7fb fb45 	bl	8001bb4 <HAL_GetTick>
 800652a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652c:	e008      	b.n	8006540 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800652e:	f7fb fb41 	bl	8001bb4 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e011      	b.n	8006564 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <HAL_RCC_ClockConfig+0x23c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d1ef      	bne.n	800652e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800654e:	f000 f8b3 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 8006552:	4603      	mov	r3, r0
 8006554:	4a06      	ldr	r2, [pc, #24]	; (8006570 <HAL_RCC_ClockConfig+0x240>)
 8006556:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_ClockConfig+0x244>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f7fb fb1f 	bl	8001ba0 <HAL_InitTick>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	58004000 	.word	0x58004000
 8006570:	20000000 	.word	0x20000000
 8006574:	20000034 	.word	0x20000034

08006578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006586:	f7ff fa12 	bl	80059ae <LL_RCC_GetSysClkSource>
 800658a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800658c:	f7ff fae6 	bl	8005b5c <LL_RCC_PLL_GetMainSource>
 8006590:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x2c>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b0c      	cmp	r3, #12
 800659c:	d139      	bne.n	8006612 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d136      	bne.n	8006612 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80065a4:	f7ff f9b5 	bl	8005912 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d115      	bne.n	80065da <HAL_RCC_GetSysClockFreq+0x62>
 80065ae:	f7ff f9b0 	bl	8005912 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <HAL_RCC_GetSysClockFreq+0x4e>
 80065b8:	f7ff f9bb 	bl	8005932 <LL_RCC_MSI_GetRange>
 80065bc:	4603      	mov	r3, r0
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	e005      	b.n	80065d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80065c6:	f7ff f9bf 	bl	8005948 <LL_RCC_MSI_GetRangeAfterStandby>
 80065ca:	4603      	mov	r3, r0
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	4a36      	ldr	r2, [pc, #216]	; (80066ac <HAL_RCC_GetSysClockFreq+0x134>)
 80065d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d8:	e014      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x8c>
 80065da:	f7ff f99a 	bl	8005912 <LL_RCC_MSI_IsEnabledRangeSelect>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d106      	bne.n	80065f2 <HAL_RCC_GetSysClockFreq+0x7a>
 80065e4:	f7ff f9a5 	bl	8005932 <LL_RCC_MSI_GetRange>
 80065e8:	4603      	mov	r3, r0
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	e005      	b.n	80065fe <HAL_RCC_GetSysClockFreq+0x86>
 80065f2:	f7ff f9a9 	bl	8005948 <LL_RCC_MSI_GetRangeAfterStandby>
 80065f6:	4603      	mov	r3, r0
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <HAL_RCC_GetSysClockFreq+0x134>)
 8006600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006604:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d115      	bne.n	8006638 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006610:	e012      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b04      	cmp	r3, #4
 8006616:	d102      	bne.n	800661e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006618:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e00c      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b08      	cmp	r3, #8
 8006622:	d109      	bne.n	8006638 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006624:	f7ff f888 	bl	8005738 <LL_RCC_HSE_IsEnabledDiv2>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d102      	bne.n	8006634 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800662e:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e001      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006636:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006638:	f7ff f9b9 	bl	80059ae <LL_RCC_GetSysClkSource>
 800663c:	4603      	mov	r3, r0
 800663e:	2b0c      	cmp	r3, #12
 8006640:	d12f      	bne.n	80066a2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006642:	f7ff fa8b 	bl	8005b5c <LL_RCC_PLL_GetMainSource>
 8006646:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d003      	beq.n	8006656 <HAL_RCC_GetSysClockFreq+0xde>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d003      	beq.n	800665c <HAL_RCC_GetSysClockFreq+0xe4>
 8006654:	e00d      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006656:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006658:	60fb      	str	r3, [r7, #12]
        break;
 800665a:	e00d      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800665c:	f7ff f86c 	bl	8005738 <LL_RCC_HSE_IsEnabledDiv2>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d102      	bne.n	800666c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006668:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800666a:	e005      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800666c:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800666e:	60fb      	str	r3, [r7, #12]
        break;
 8006670:	e002      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	60fb      	str	r3, [r7, #12]
        break;
 8006676:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006678:	f7ff fa4e 	bl	8005b18 <LL_RCC_PLL_GetN>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	fb03 f402 	mul.w	r4, r3, r2
 8006684:	f7ff fa5f 	bl	8005b46 <LL_RCC_PLL_GetDivider>
 8006688:	4603      	mov	r3, r0
 800668a:	091b      	lsrs	r3, r3, #4
 800668c:	3301      	adds	r3, #1
 800668e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006692:	f7ff fa4d 	bl	8005b30 <LL_RCC_PLL_GetR>
 8006696:	4603      	mov	r3, r0
 8006698:	0f5b      	lsrs	r3, r3, #29
 800669a:	3301      	adds	r3, #1
 800669c:	fbb4 f3f3 	udiv	r3, r4, r3
 80066a0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80066a2:	697b      	ldr	r3, [r7, #20]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd90      	pop	{r4, r7, pc}
 80066ac:	0801b7a4 	.word	0x0801b7a4
 80066b0:	00f42400 	.word	0x00f42400
 80066b4:	01e84800 	.word	0x01e84800

080066b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b8:	b598      	push	{r3, r4, r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066bc:	f7ff ff5c 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 80066c0:	4604      	mov	r4, r0
 80066c2:	f7ff f9ce 	bl	8005a62 <LL_RCC_GetAHBPrescaler>
 80066c6:	4603      	mov	r3, r0
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	4a03      	ldr	r2, [pc, #12]	; (80066dc <HAL_RCC_GetHCLKFreq+0x24>)
 80066d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066d8:	4618      	mov	r0, r3
 80066da:	bd98      	pop	{r3, r4, r7, pc}
 80066dc:	0801b744 	.word	0x0801b744

080066e0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066e0:	b598      	push	{r3, r4, r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066e4:	f7ff ffe8 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 80066e8:	4604      	mov	r4, r0
 80066ea:	f7ff f9d2 	bl	8005a92 <LL_RCC_GetAPB1Prescaler>
 80066ee:	4603      	mov	r3, r0
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	4a03      	ldr	r2, [pc, #12]	; (8006700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	bd98      	pop	{r3, r4, r7, pc}
 8006700:	0801b784 	.word	0x0801b784

08006704 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006704:	b598      	push	{r3, r4, r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006708:	f7ff ffd6 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 800670c:	4604      	mov	r4, r0
 800670e:	f7ff f9cb 	bl	8005aa8 <LL_RCC_GetAPB2Prescaler>
 8006712:	4603      	mov	r3, r0
 8006714:	0adb      	lsrs	r3, r3, #11
 8006716:	4a03      	ldr	r2, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd98      	pop	{r3, r4, r7, pc}
 8006724:	0801b784 	.word	0x0801b784

08006728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	4a10      	ldr	r2, [pc, #64]	; (800677c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800673a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006740:	f7ff f99a 	bl	8005a78 <LL_RCC_GetAHB3Prescaler>
 8006744:	4603      	mov	r3, r0
 8006746:	091b      	lsrs	r3, r3, #4
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800674e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4a09      	ldr	r2, [pc, #36]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0c9c      	lsrs	r4, r3, #18
 8006764:	f7fe ff40 	bl	80055e8 <HAL_PWREx_GetVoltageRange>
 8006768:	4603      	mov	r3, r0
 800676a:	4619      	mov	r1, r3
 800676c:	4620      	mov	r0, r4
 800676e:	f000 f80b 	bl	8006788 <RCC_SetFlashLatency>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bd90      	pop	{r4, r7, pc}
 800677c:	0801b7a4 	.word	0x0801b7a4
 8006780:	0801b744 	.word	0x0801b744
 8006784:	431bde83 	.word	0x431bde83

08006788 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	; 0x38
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006792:	4a3c      	ldr	r2, [pc, #240]	; (8006884 <RCC_SetFlashLatency+0xfc>)
 8006794:	f107 0320 	add.w	r3, r7, #32
 8006798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800679c:	6018      	str	r0, [r3, #0]
 800679e:	3304      	adds	r3, #4
 80067a0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80067a2:	4a39      	ldr	r2, [pc, #228]	; (8006888 <RCC_SetFlashLatency+0x100>)
 80067a4:	f107 0318 	add.w	r3, r7, #24
 80067a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067ac:	6018      	str	r0, [r3, #0]
 80067ae:	3304      	adds	r3, #4
 80067b0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80067b2:	4a36      	ldr	r2, [pc, #216]	; (800688c <RCC_SetFlashLatency+0x104>)
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80067ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80067be:	2300      	movs	r3, #0
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c8:	d11d      	bne.n	8006806 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30
 80067ce:	e016      	b.n	80067fe <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80067d8:	4413      	add	r3, r2
 80067da:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d808      	bhi.n	80067f8 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80067ee:	4413      	add	r3, r2
 80067f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f6:	e023      	b.n	8006840 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	3301      	adds	r3, #1
 80067fc:	633b      	str	r3, [r7, #48]	; 0x30
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	2b02      	cmp	r3, #2
 8006802:	d9e5      	bls.n	80067d0 <RCC_SetFlashLatency+0x48>
 8006804:	e01c      	b.n	8006840 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006806:	2300      	movs	r3, #0
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	e016      	b.n	800683a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006814:	4413      	add	r3, r2
 8006816:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4293      	cmp	r3, r2
 8006820:	d808      	bhi.n	8006834 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800682a:	4413      	add	r3, r2
 800682c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006832:	e005      	b.n	8006840 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	3301      	adds	r3, #1
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	2b02      	cmp	r3, #2
 800683e:	d9e5      	bls.n	800680c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006840:	4b13      	ldr	r3, [pc, #76]	; (8006890 <RCC_SetFlashLatency+0x108>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f023 0207 	bic.w	r2, r3, #7
 8006848:	4911      	ldr	r1, [pc, #68]	; (8006890 <RCC_SetFlashLatency+0x108>)
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006850:	f7fb f9b0 	bl	8001bb4 <HAL_GetTick>
 8006854:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006856:	e008      	b.n	800686a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006858:	f7fb f9ac 	bl	8001bb4 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e007      	b.n	800687a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <RCC_SetFlashLatency+0x108>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006874:	429a      	cmp	r2, r3
 8006876:	d1ef      	bne.n	8006858 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3738      	adds	r7, #56	; 0x38
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	0801afb0 	.word	0x0801afb0
 8006888:	0801afb8 	.word	0x0801afb8
 800688c:	0801afc0 	.word	0x0801afc0
 8006890:	58004000 	.word	0x58004000

08006894 <LL_RCC_LSE_IsReady>:
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d101      	bne.n	80068ac <LL_RCC_LSE_IsReady+0x18>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <LL_RCC_LSE_IsReady+0x1a>
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <LL_RCC_SetUSARTClockSource>:
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80068be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	43db      	mvns	r3, r3
 80068cc:	401a      	ands	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <LL_RCC_SetI2SClockSource>:
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4313      	orrs	r3, r2
 8006902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <LL_RCC_SetLPUARTClockSource>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr

0800693a <LL_RCC_SetI2CClockSource>:
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006946:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006952:	43db      	mvns	r3, r3
 8006954:	401a      	ands	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800695e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <LL_RCC_SetLPTIMClockSource>:
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800697a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800697e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	041b      	lsls	r3, r3, #16
 8006990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <LL_RCC_SetRNGClockSource>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80069b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4313      	orrs	r3, r2
 80069c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <LL_RCC_SetADCClockSource>:
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_SetRTCClockSource>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <LL_RCC_GetRTCClockSource>:
{
 8006a22:	b480      	push	{r7}
 8006a24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_ForceBackupDomainReset>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a52:	bf00      	nop
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a72:	bf00      	nop
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bc80      	pop	{r7}
 8006a78:	4770      	bx	lr
	...

08006a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006a88:	2300      	movs	r3, #0
 8006a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d058      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006a9c:	f7fe fd62 	bl	8005564 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa0:	f7fb f888 	bl	8001bb4 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006aa6:	e009      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa8:	f7fb f884 	bl	8001bb4 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d902      	bls.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8006aba:	e006      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006abc:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac8:	d1ee      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006aca:	7cfb      	ldrb	r3, [r7, #19]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d13c      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006ad0:	f7ff ffa7 	bl	8006a22 <LL_RCC_GetRTCClockSource>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d00f      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006aec:	f7ff ffa5 	bl	8006a3a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006af0:	f7ff ffb3 	bl	8006a5a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d014      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b08:	f7fb f854 	bl	8001bb4 <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b0e:	e00b      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b10:	f7fb f850 	bl	8001bb4 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d902      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	74fb      	strb	r3, [r7, #19]
            break;
 8006b26:	e004      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b28:	f7ff feb4 	bl	8006894 <LL_RCC_LSE_IsReady>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d1ee      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff ff5b 	bl	80069f8 <LL_RCC_SetRTCClockSource>
 8006b42:	e004      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	74bb      	strb	r3, [r7, #18]
 8006b48:	e001      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	7cfb      	ldrb	r3, [r7, #19]
 8006b4c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fea9 	bl	80068b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fe9e 	bl	80068b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fec0 	bl	8006910 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fee6 	bl	8006972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fedb 	bl	8006972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fed0 	bl	8006972 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d004      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fea9 	bl	800693a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fe9e 	bl	800693a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fe93 	bl	800693a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d011      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fe5e 	bl	80068e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c32:	d107      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fea5 	bl	80069a4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d107      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fea3 	bl	80069ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006ca2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	58000400 	.word	0x58000400

08006cb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d068      	beq.n	8006d94 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa fcbc 	bl	8001654 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ce4:	4b2e      	ldr	r3, [pc, #184]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006ce6:	22ca      	movs	r2, #202	; 0xca
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8006cea:	4b2d      	ldr	r3, [pc, #180]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006cec:	2253      	movs	r2, #83	; 0x53
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa0f 	bl	8007114 <RTC_EnterInitMode>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d13f      	bne.n	8006d80 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d00:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d06:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d10:	4b23      	ldr	r3, [pc, #140]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d12:	699a      	ldr	r2, [r3, #24]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6859      	ldr	r1, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	4319      	orrs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	430b      	orrs	r3, r1
 8006d24:	491e      	ldr	r1, [pc, #120]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	491a      	ldr	r1, [pc, #104]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006d3a:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	4914      	ldr	r1, [pc, #80]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa12 	bl	800717c <RTC_ExitInitMode>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10e      	bne.n	8006d80 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006d62:	4b0f      	ldr	r3, [pc, #60]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a19      	ldr	r1, [r3, #32]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	4319      	orrs	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	4909      	ldr	r1, [pc, #36]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <HAL_RTC_Init+0xf0>)
 8006d82:	22ff      	movs	r2, #255	; 0xff
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40002800 	.word	0x40002800

08006da4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RTC_SetAlarm_IT+0x1e>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e0f3      	b.n	8006faa <HAL_RTC_SetAlarm_IT+0x206>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006dd2:	4b78      	ldr	r3, [pc, #480]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dda:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d06a      	beq.n	8006eba <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d13a      	bne.n	8006e60 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006dea:	4b72      	ldr	r3, [pc, #456]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f9f5 	bl	80071f8 <RTC_ByteToBcd2>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	785b      	ldrb	r3, [r3, #1]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 f9ee 	bl	80071f8 <RTC_ByteToBcd2>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e20:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	789b      	ldrb	r3, [r3, #2]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f9e6 	bl	80071f8 <RTC_ByteToBcd2>
 8006e2c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e2e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e38:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f9d8 	bl	80071f8 <RTC_ByteToBcd2>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e4c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006e54:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e02c      	b.n	8006eba <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006e68:	d00d      	beq.n	8006e86 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e72:	d008      	beq.n	8006e86 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006e74:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006e92:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e98:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	78db      	ldrb	r3, [r3, #3]
 8006e9e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ea0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ea8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006eaa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006eb0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eba:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ebc:	22ca      	movs	r2, #202	; 0xca
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec0:	4b3c      	ldr	r3, [pc, #240]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ec2:	2253      	movs	r2, #83	; 0x53
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ece:	d12c      	bne.n	8006f2a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ed0:	4b38      	ldr	r3, [pc, #224]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	4a37      	ldr	r2, [pc, #220]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ed6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006eda:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee8:	d107      	bne.n	8006efa <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	4930      	ldr	r1, [pc, #192]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	644b      	str	r3, [r1, #68]	; 0x44
 8006ef8:	e006      	b.n	8006f08 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006efa:	4a2e      	ldr	r2, [pc, #184]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006f00:	4a2c      	ldr	r2, [pc, #176]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006f08:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	f043 0201 	orr.w	r2, r3, #1
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006f1c:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	4a24      	ldr	r2, [pc, #144]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f22:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006f26:	6193      	str	r3, [r2, #24]
 8006f28:	e02b      	b.n	8006f82 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f30:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006f34:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006f36:	4b1f      	ldr	r3, [pc, #124]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f38:	2202      	movs	r2, #2
 8006f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f42:	d107      	bne.n	8006f54 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	4919      	ldr	r1, [pc, #100]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f52:	e006      	b.n	8006f62 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006f54:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006f5a:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006f62:	4a14      	ldr	r2, [pc, #80]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f043 0202 	orr.w	r2, r3, #2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	4a0e      	ldr	r2, [pc, #56]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f7c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006f80:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd90      	pop	{r4, r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40002800 	.word	0x40002800
 8006fb8:	58000800 	.word	0x58000800

08006fbc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_RTC_DeactivateAlarm+0x18>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e048      	b.n	8007066 <HAL_RTC_DeactivateAlarm+0xaa>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fe4:	4b22      	ldr	r3, [pc, #136]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fe6:	22ca      	movs	r2, #202	; 0xca
 8006fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8006fea:	4b21      	ldr	r3, [pc, #132]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006fec:	2253      	movs	r2, #83	; 0x53
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff6:	d115      	bne.n	8007024 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007002:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 800700a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800700e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	f023 0201 	bic.w	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 800701e:	2201      	movs	r2, #1
 8007020:	65da      	str	r2, [r3, #92]	; 0x5c
 8007022:	e014      	b.n	800704e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007024:	4b12      	ldr	r3, [pc, #72]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 800702a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800702e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007034:	4a0e      	ldr	r2, [pc, #56]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	f023 0202 	bic.w	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007048:	4b09      	ldr	r3, [pc, #36]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 800704a:	2202      	movs	r2, #2
 800704c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007050:	22ff      	movs	r2, #255	; 0xff
 8007052:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr
 8007070:	40002800 	.word	0x40002800

08007074 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800707c:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800707e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007084:	4013      	ands	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007092:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007094:	2201      	movs	r2, #1
 8007096:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fb f819 	bl	80020d0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_RTC_AlarmIRQHandler+0x50>)
 80070aa:	2202      	movs	r2, #2
 80070ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f94a 	bl	8007348 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40002800 	.word	0x40002800

080070c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80070d0:	4b0f      	ldr	r3, [pc, #60]	; (8007110 <HAL_RTC_WaitForSynchro+0x48>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a0e      	ldr	r2, [pc, #56]	; (8007110 <HAL_RTC_WaitForSynchro+0x48>)
 80070d6:	f023 0320 	bic.w	r3, r3, #32
 80070da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80070dc:	f7fa fd6a 	bl	8001bb4 <HAL_GetTick>
 80070e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070e2:	e009      	b.n	80070f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070e4:	f7fa fd66 	bl	8001bb4 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070f2:	d901      	bls.n	80070f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e006      	b.n	8007106 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <HAL_RTC_WaitForSynchro+0x48>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ef      	beq.n	80070e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40002800 	.word	0x40002800

08007114 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <RTC_EnterInitMode+0x64>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d120      	bne.n	800716e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800712c:	4b12      	ldr	r3, [pc, #72]	; (8007178 <RTC_EnterInitMode+0x64>)
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	4a11      	ldr	r2, [pc, #68]	; (8007178 <RTC_EnterInitMode+0x64>)
 8007132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007136:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007138:	f7fa fd3c 	bl	8001bb4 <HAL_GetTick>
 800713c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800713e:	e00d      	b.n	800715c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007140:	f7fa fd38 	bl	8001bb4 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714e:	d905      	bls.n	800715c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2203      	movs	r2, #3
 8007158:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <RTC_EnterInitMode+0x64>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <RTC_EnterInitMode+0x5a>
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d1e8      	bne.n	8007140 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40002800 	.word	0x40002800

0800717c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <RTC_ExitInitMode+0x78>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <RTC_ExitInitMode+0x78>)
 800718e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007192:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007194:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <RTC_ExitInitMode+0x78>)
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10c      	bne.n	80071ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff91 	bl	80070c8 <HAL_RTC_WaitForSynchro>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2203      	movs	r2, #3
 80071b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	73fb      	strb	r3, [r7, #15]
 80071b8:	e017      	b.n	80071ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071ba:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <RTC_ExitInitMode+0x78>)
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <RTC_ExitInitMode+0x78>)
 80071c0:	f023 0320 	bic.w	r3, r3, #32
 80071c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff ff7e 	bl	80070c8 <HAL_RTC_WaitForSynchro>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <RTC_ExitInitMode+0x78>)
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <RTC_ExitInitMode+0x78>)
 80071e4:	f043 0320 	orr.w	r3, r3, #32
 80071e8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40002800 	.word	0x40002800

080071f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800720a:	e005      	b.n	8007218 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	3b0a      	subs	r3, #10
 8007216:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	2b09      	cmp	r3, #9
 800721c:	d8f6      	bhi.n	800720c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	b2da      	uxtb	r2, r3
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	4313      	orrs	r3, r2
 800722a:	b2db      	uxtb	r3, r3
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
	...

08007238 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_RTCEx_EnableBypassShadow+0x16>
 800724a:	2302      	movs	r3, #2
 800724c:	e01f      	b.n	800728e <HAL_RTCEx_EnableBypassShadow+0x56>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800725e:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007260:	22ca      	movs	r2, #202	; 0xca
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007266:	2253      	movs	r2, #83	; 0x53
 8007268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	4a0a      	ldr	r2, [pc, #40]	; (8007298 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007270:	f043 0320 	orr.w	r3, r3, #32
 8007274:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007276:	4b08      	ldr	r3, [pc, #32]	; (8007298 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr
 8007298:	40002800 	.word	0x40002800

0800729c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_RTCEx_SetSSRU_IT+0x16>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e027      	b.n	8007302 <HAL_RTCEx_SetSSRU_IT+0x66>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072c2:	4b12      	ldr	r3, [pc, #72]	; (800730c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072c4:	22ca      	movs	r2, #202	; 0xca
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24
 80072c8:	4b10      	ldr	r3, [pc, #64]	; (800730c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072ca:	2253      	movs	r2, #83	; 0x53
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80072da:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80072dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072e0:	4a0b      	ldr	r2, [pc, #44]	; (8007310 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80072e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ea:	4b08      	ldr	r3, [pc, #32]	; (800730c <HAL_RTCEx_SetSSRU_IT+0x70>)
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr
 800730c:	40002800 	.word	0x40002800
 8007310:	58000800 	.word	0x58000800

08007314 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007328:	4b06      	ldr	r3, [pc, #24]	; (8007344 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800732a:	2240      	movs	r2, #64	; 0x40
 800732c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fa fed8 	bl	80020e4 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40002800 	.word	0x40002800

08007348 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr
	...

0800735c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <HAL_RTCEx_BKUPWrite+0x2c>)
 800736a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4413      	add	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	601a      	str	r2, [r3, #0]
}
 800737c:	bf00      	nop
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	4000b100 	.word	0x4000b100

0800738c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007396:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <HAL_RTCEx_BKUPRead+0x28>)
 8007398:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	4000b100 	.word	0x4000b100

080073b8 <LL_PWR_SetRadioBusyTrigger>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80073c0:	4b06      	ldr	r3, [pc, #24]	; (80073dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80073c8:	4904      	ldr	r1, [pc, #16]	; (80073dc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	608b      	str	r3, [r1, #8]
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	58000400 	.word	0x58000400

080073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	4a04      	ldr	r2, [pc, #16]	; (80073fc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80073ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	58000400 	.word	0x58000400

08007400 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	4a04      	ldr	r2, [pc, #16]	; (800741c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800740c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr
 800741c:	58000400 	.word	0x58000400

08007420 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800742a:	619a      	str	r2, [r3, #24]
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr
 8007434:	58000400 	.word	0x58000400

08007438 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b02      	cmp	r3, #2
 8007446:	d101      	bne.n	800744c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58000400 	.word	0x58000400

0800745c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d101      	bne.n	8007470 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	58000400 	.word	0x58000400

08007480 <LL_RCC_RF_DisableReset>:
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800748c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007494:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007498:	bf00      	nop
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <LL_RCC_IsRFUnderReset>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80074a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074b4:	d101      	bne.n	80074ba <LL_RCC_IsRFUnderReset+0x1a>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <LL_RCC_IsRFUnderReset+0x1c>
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <LL_EXTI_EnableIT_32_63>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80074ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <LL_EXTI_EnableIT_32_63+0x24>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	58000800 	.word	0x58000800

080074ec <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
    return status;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	e04b      	b.n	800759a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	799b      	ldrb	r3, [r3, #6]
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fa f9a4 	bl	8001864 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007522:	f7ff ffad 	bl	8007480 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007526:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <HAL_SUBGHZ_Init+0xb8>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	0cdb      	lsrs	r3, r3, #19
 8007534:	2264      	movs	r2, #100	; 0x64
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	609a      	str	r2, [r3, #8]
      break;
 800754c:	e007      	b.n	800755e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	3b01      	subs	r3, #1
 8007552:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007554:	f7ff ffa4 	bl	80074a0 <LL_RCC_IsRFUnderReset>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ee      	bne.n	800753c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800755e:	f7ff ff3f 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007562:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007566:	f7ff ffad 	bl	80074c4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800756a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800756e:	f7ff ff23 	bl	80073b8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007572:	f7ff ff55 	bl	8007420 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f000 faad 	bl	8007ae0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	719a      	strb	r2, [r3, #6]

  return status;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000000 	.word	0x20000000

080075a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	607a      	str	r2, [r7, #4]
 80075b2:	461a      	mov	r2, r3
 80075b4:	460b      	mov	r3, r1
 80075b6:	817b      	strh	r3, [r7, #10]
 80075b8:	4613      	mov	r3, r2
 80075ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	799b      	ldrb	r3, [r3, #6]
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d14a      	bne.n	800765c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	795b      	ldrb	r3, [r3, #5]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e045      	b.n	800765e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2202      	movs	r2, #2
 80075dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fb4c 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075e4:	f7ff ff0c 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80075e8:	210d      	movs	r1, #13
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa98 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80075f0:	897b      	ldrh	r3, [r7, #10]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	4619      	mov	r1, r3
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fa90 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007600:	897b      	ldrh	r3, [r7, #10]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	4619      	mov	r1, r3
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fa8a 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	82bb      	strh	r3, [r7, #20]
 8007610:	e00a      	b.n	8007628 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007612:	8abb      	ldrh	r3, [r7, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fa7f 	bl	8007b20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007622:	8abb      	ldrh	r3, [r7, #20]
 8007624:	3301      	adds	r3, #1
 8007626:	82bb      	strh	r3, [r7, #20]
 8007628:	8aba      	ldrh	r2, [r7, #20]
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d3f0      	bcc.n	8007612 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007630:	f7ff fed6 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fb45 	bl	8007cc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	75fb      	strb	r3, [r7, #23]
 8007646:	e001      	b.n	800764c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	715a      	strb	r2, [r3, #5]

    return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	e000      	b.n	800765e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800765c:	2302      	movs	r3, #2
  }
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	461a      	mov	r2, r3
 8007672:	460b      	mov	r3, r1
 8007674:	817b      	strh	r3, [r7, #10]
 8007676:	4613      	mov	r3, r2
 8007678:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	799b      	ldrb	r3, [r3, #6]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d14a      	bne.n	800771e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	795b      	ldrb	r3, [r3, #5]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d101      	bne.n	8007694 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007690:	2302      	movs	r3, #2
 8007692:	e045      	b.n	8007720 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 faee 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076a0:	f7ff feae 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80076a4:	211d      	movs	r1, #29
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fa3a 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80076ac:	897b      	ldrh	r3, [r7, #10]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	4619      	mov	r1, r3
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa32 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80076bc:	897b      	ldrh	r3, [r7, #10]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 fa2c 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80076c8:	2100      	movs	r1, #0
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa28 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	82fb      	strh	r3, [r7, #22]
 80076d4:	e009      	b.n	80076ea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80076d6:	69b9      	ldr	r1, [r7, #24]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa77 	bl	8007bcc <SUBGHZSPI_Receive>
      pData++;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	3301      	adds	r3, #1
 80076e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	3301      	adds	r3, #1
 80076e8:	82fb      	strh	r3, [r7, #22]
 80076ea:	8afa      	ldrh	r2, [r7, #22]
 80076ec:	893b      	ldrh	r3, [r7, #8]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3f1      	bcc.n	80076d6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076f2:	f7ff fe75 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fae4 	bl	8007cc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e001      	b.n	800770e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	715a      	strb	r2, [r3, #5]

    return status;
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	e000      	b.n	8007720 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	461a      	mov	r2, r3
 8007734:	460b      	mov	r3, r1
 8007736:	72fb      	strb	r3, [r7, #11]
 8007738:	4613      	mov	r3, r2
 800773a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	799b      	ldrb	r3, [r3, #6]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b01      	cmp	r3, #1
 8007744:	d14a      	bne.n	80077dc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	795b      	ldrb	r3, [r3, #5]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800774e:	2302      	movs	r3, #2
 8007750:	e045      	b.n	80077de <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fa8f 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800775e:	7afb      	ldrb	r3, [r7, #11]
 8007760:	2b84      	cmp	r3, #132	; 0x84
 8007762:	d002      	beq.n	800776a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	2b94      	cmp	r3, #148	; 0x94
 8007768:	d103      	bne.n	8007772 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	711a      	strb	r2, [r3, #4]
 8007770:	e002      	b.n	8007778 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007778:	f7ff fe42 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	4619      	mov	r1, r3
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f9cd 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007786:	2300      	movs	r3, #0
 8007788:	82bb      	strh	r3, [r7, #20]
 800778a:	e00a      	b.n	80077a2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800778c:	8abb      	ldrh	r3, [r7, #20]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f9c2 	bl	8007b20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800779c:	8abb      	ldrh	r3, [r7, #20]
 800779e:	3301      	adds	r3, #1
 80077a0:	82bb      	strh	r3, [r7, #20]
 80077a2:	8aba      	ldrh	r2, [r7, #20]
 80077a4:	893b      	ldrh	r3, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d3f0      	bcc.n	800778c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077aa:	f7ff fe19 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	2b84      	cmp	r3, #132	; 0x84
 80077b2:	d002      	beq.n	80077ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fa85 	bl	8007cc4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
 80077c6:	e001      	b.n	80077cc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	715a      	strb	r2, [r3, #5]

    return status;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	e000      	b.n	80077de <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
  }
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b088      	sub	sp, #32
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	461a      	mov	r2, r3
 80077f2:	460b      	mov	r3, r1
 80077f4:	72fb      	strb	r3, [r7, #11]
 80077f6:	4613      	mov	r3, r2
 80077f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	799b      	ldrb	r3, [r3, #6]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d13d      	bne.n	8007884 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	795b      	ldrb	r3, [r3, #5]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007810:	2302      	movs	r3, #2
 8007812:	e038      	b.n	8007886 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa2e 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007820:	f7ff fdee 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f979 	bl	8007b20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 f975 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007836:	2300      	movs	r3, #0
 8007838:	82fb      	strh	r3, [r7, #22]
 800783a:	e009      	b.n	8007850 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800783c:	69b9      	ldr	r1, [r7, #24]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f9c4 	bl	8007bcc <SUBGHZSPI_Receive>
      pData++;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	3301      	adds	r3, #1
 8007848:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800784a:	8afb      	ldrh	r3, [r7, #22]
 800784c:	3301      	adds	r3, #1
 800784e:	82fb      	strh	r3, [r7, #22]
 8007850:	8afa      	ldrh	r2, [r7, #22]
 8007852:	893b      	ldrh	r3, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d3f1      	bcc.n	800783c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007858:	f7ff fdc2 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fa31 	bl	8007cc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e001      	b.n	8007874 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	715a      	strb	r2, [r3, #5]

    return status;
 8007880:	7ffb      	ldrb	r3, [r7, #31]
 8007882:	e000      	b.n	8007886 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3720      	adds	r7, #32
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	461a      	mov	r2, r3
 800789a:	460b      	mov	r3, r1
 800789c:	72fb      	strb	r3, [r7, #11]
 800789e:	4613      	mov	r3, r2
 80078a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	799b      	ldrb	r3, [r3, #6]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d13e      	bne.n	800792a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	795b      	ldrb	r3, [r3, #5]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e039      	b.n	800792c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f9dc 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078c4:	f7ff fd9c 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80078c8:	210e      	movs	r1, #14
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f928 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	4619      	mov	r1, r3
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f923 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	82bb      	strh	r3, [r7, #20]
 80078de:	e00a      	b.n	80078f6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80078e0:	8abb      	ldrh	r3, [r7, #20]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	4619      	mov	r1, r3
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f918 	bl	8007b20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078f0:	8abb      	ldrh	r3, [r7, #20]
 80078f2:	3301      	adds	r3, #1
 80078f4:	82bb      	strh	r3, [r7, #20]
 80078f6:	8aba      	ldrh	r2, [r7, #20]
 80078f8:	893b      	ldrh	r3, [r7, #8]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3f0      	bcc.n	80078e0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078fe:	f7ff fd6f 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f9de 	bl	8007cc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]
 8007914:	e001      	b.n	800791a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	715a      	strb	r2, [r3, #5]

    return status;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	e000      	b.n	800792c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800792a:	2302      	movs	r3, #2
  }
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	461a      	mov	r2, r3
 8007940:	460b      	mov	r3, r1
 8007942:	72fb      	strb	r3, [r7, #11]
 8007944:	4613      	mov	r3, r2
 8007946:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	799b      	ldrb	r3, [r3, #6]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b01      	cmp	r3, #1
 8007954:	d141      	bne.n	80079da <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800795e:	2302      	movs	r3, #2
 8007960:	e03c      	b.n	80079dc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 f987 	bl	8007c7c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800796e:	f7ff fd47 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007972:	211e      	movs	r1, #30
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f8d3 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	4619      	mov	r1, r3
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f8ce 	bl	8007b20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f8ca 	bl	8007b20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800798c:	2300      	movs	r3, #0
 800798e:	82fb      	strh	r3, [r7, #22]
 8007990:	e009      	b.n	80079a6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007992:	69b9      	ldr	r1, [r7, #24]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f919 	bl	8007bcc <SUBGHZSPI_Receive>
      pData++;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	3301      	adds	r3, #1
 800799e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80079a0:	8afb      	ldrh	r3, [r7, #22]
 80079a2:	3301      	adds	r3, #1
 80079a4:	82fb      	strh	r3, [r7, #22]
 80079a6:	8afa      	ldrh	r2, [r7, #22]
 80079a8:	893b      	ldrh	r3, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d3f1      	bcc.n	8007992 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079ae:	f7ff fd17 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 f986 	bl	8007cc4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	e001      	b.n	80079ca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	715a      	strb	r2, [r3, #5]

    return status;
 80079d6:	7ffb      	ldrb	r3, [r7, #31]
 80079d8:	e000      	b.n	80079dc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80079da:	2302      	movs	r3, #2
  }
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80079ec:	2300      	movs	r3, #0
 80079ee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80079f0:	f107 020c 	add.w	r2, r7, #12
 80079f4:	2302      	movs	r3, #2
 80079f6:	2112      	movs	r1, #18
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff fef4 	bl	80077e6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80079fe:	7b3b      	ldrb	r3, [r7, #12]
 8007a00:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007a02:	89fb      	ldrh	r3, [r7, #14]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	b21a      	sxth	r2, r3
 8007a08:	7b7b      	ldrb	r3, [r7, #13]
 8007a0a:	b21b      	sxth	r3, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b21b      	sxth	r3, r3
 8007a10:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007a12:	89fb      	ldrh	r3, [r7, #14]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f011 fc59 	bl	80192d4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f011 fc5e 	bl	80192f0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007a34:	89fb      	ldrh	r3, [r7, #14]
 8007a36:	089b      	lsrs	r3, r3, #2
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f011 fcad 	bl	80193a0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007a46:	89fb      	ldrh	r3, [r7, #14]
 8007a48:	08db      	lsrs	r3, r3, #3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f011 fcb2 	bl	80193bc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007a58:	89fb      	ldrh	r3, [r7, #14]
 8007a5a:	091b      	lsrs	r3, r3, #4
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f011 fcb7 	bl	80193d8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007a6a:	89fb      	ldrh	r3, [r7, #14]
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f011 fc84 	bl	8019384 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007a7c:	89fb      	ldrh	r3, [r7, #14]
 8007a7e:	099b      	lsrs	r3, r3, #6
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f011 fc3f 	bl	801930c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007a8e:	89fb      	ldrh	r3, [r7, #14]
 8007a90:	09db      	lsrs	r3, r3, #7
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00e      	beq.n	8007ab8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007a9a:	89fb      	ldrh	r3, [r7, #14]
 8007a9c:	0a1b      	lsrs	r3, r3, #8
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f011 fc3d 	bl	8019328 <HAL_SUBGHZ_CADStatusCallback>
 8007aae:	e003      	b.n	8007ab8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f011 fc38 	bl	8019328 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
 8007aba:	0a5b      	lsrs	r3, r3, #9
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f011 fc4d 	bl	8019364 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007aca:	f107 020c 	add.w	r2, r7, #12
 8007ace:	2302      	movs	r3, #2
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fe28 	bl	8007728 <HAL_SUBGHZ_ExecSetCmd>
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007af4:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007afc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007b00:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007b04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007b06:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <SUBGHZSPI_Init+0x3c>)
 8007b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b10:	6013      	str	r3, [r2, #0]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr
 8007b1c:	58010000 	.word	0x58010000

08007b20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b30:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <SUBGHZSPI_Transmit+0xa0>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4613      	mov	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	0cdb      	lsrs	r3, r3, #19
 8007b3e:	2264      	movs	r2, #100	; 0x64
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	609a      	str	r2, [r3, #8]
      break;
 8007b56:	e008      	b.n	8007b6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007b5e:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <SUBGHZSPI_Transmit+0xa4>)
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d1ed      	bne.n	8007b46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007b6a:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <SUBGHZSPI_Transmit+0xa8>)
 8007b6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b74:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <SUBGHZSPI_Transmit+0xa0>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	0cdb      	lsrs	r3, r3, #19
 8007b82:	2264      	movs	r2, #100	; 0x64
 8007b84:	fb02 f303 	mul.w	r3, r2, r3
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	609a      	str	r2, [r3, #8]
      break;
 8007b9a:	e008      	b.n	8007bae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <SUBGHZSPI_Transmit+0xa4>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1ed      	bne.n	8007b8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <SUBGHZSPI_Transmit+0xa4>)
 8007bb0:	68db      	ldr	r3, [r3, #12]

  return status;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000000 	.word	0x20000000
 8007bc4:	58010000 	.word	0x58010000
 8007bc8:	5801000c 	.word	0x5801000c

08007bcc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007bda:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <SUBGHZSPI_Receive+0xa4>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	0cdb      	lsrs	r3, r3, #19
 8007be8:	2264      	movs	r2, #100	; 0x64
 8007bea:	fb02 f303 	mul.w	r3, r2, r3
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	609a      	str	r2, [r3, #8]
      break;
 8007c00:	e008      	b.n	8007c14 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007c08:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <SUBGHZSPI_Receive+0xa8>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d1ed      	bne.n	8007bf0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007c14:	4b18      	ldr	r3, [pc, #96]	; (8007c78 <SUBGHZSPI_Receive+0xac>)
 8007c16:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	22ff      	movs	r2, #255	; 0xff
 8007c1c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c1e:	4b14      	ldr	r3, [pc, #80]	; (8007c70 <SUBGHZSPI_Receive+0xa4>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	0cdb      	lsrs	r3, r3, #19
 8007c2c:	2264      	movs	r2, #100	; 0x64
 8007c2e:	fb02 f303 	mul.w	r3, r2, r3
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	609a      	str	r2, [r3, #8]
      break;
 8007c44:	e008      	b.n	8007c58 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <SUBGHZSPI_Receive+0xa8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d1ed      	bne.n	8007c34 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007c58:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <SUBGHZSPI_Receive+0xa8>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	701a      	strb	r2, [r3, #0]

  return status;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	20000000 	.word	0x20000000
 8007c74:	58010000 	.word	0x58010000
 8007c78:	5801000c 	.word	0x5801000c

08007c7c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	791b      	ldrb	r3, [r3, #4]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d111      	bne.n	8007cb0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <SUBGHZ_CheckDeviceReady+0x44>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	4413      	add	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c9c:	f7ff fbb0 	bl	8007400 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1f9      	bne.n	8007ca0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007cac:	f7ff fb98 	bl	80073e0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f807 	bl	8007cc4 <SUBGHZ_WaitOnBusy>
 8007cb6:	4603      	mov	r3, r0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000000 	.word	0x20000000

08007cc4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007cd0:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <SUBGHZ_WaitOnBusy+0x58>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	4413      	add	r3, r2
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	0d1b      	lsrs	r3, r3, #20
 8007cde:	2264      	movs	r2, #100	; 0x64
 8007ce0:	fb02 f303 	mul.w	r3, r2, r3
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007ce6:	f7ff fbb9 	bl	800745c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007cea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	609a      	str	r2, [r3, #8]
      break;
 8007cfc:	e009      	b.n	8007d12 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007d04:	f7ff fb98 	bl	8007438 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d0e9      	beq.n	8007ce6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000000 	.word	0x20000000

08007d20 <LL_RCC_GetUSARTClockSource>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	401a      	ands	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	4313      	orrs	r3, r2
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr

08007d44 <LL_RCC_GetLPUARTClockSource>:
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4013      	ands	r3, r2
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e042      	b.n	8007dfa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fa fb04 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	; 0x24
 8007d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0201 	bic.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc4b 	bl	8008640 <UART_SetConfig>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e022      	b.n	8007dfa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fe8f 	bl	8008ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0201 	orr.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 ff15 	bl	8008c22 <UART_CheckIdleState>
 8007df8:	4603      	mov	r3, r0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d142      	bne.n	8007ea2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_UART_Receive_IT+0x24>
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e03b      	b.n	8007ea4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Receive_IT+0x36>
 8007e36:	2302      	movs	r3, #2
 8007e38:	e034      	b.n	8007ea4 <HAL_UART_Receive_IT+0xa0>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_UART_Receive_IT+0xa8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d01f      	beq.n	8007e92 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d018      	beq.n	8007e92 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	623b      	str	r3, [r7, #32]
 8007e80:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e6      	bne.n	8007e60 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	461a      	mov	r2, r3
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 ffd5 	bl	8008e48 <UART_Start_Receive_IT>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	e000      	b.n	8007ea4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3728      	adds	r7, #40	; 0x28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40008000 	.word	0x40008000

08007eb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	; 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d17a      	bne.n	8007fbe <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_UART_Transmit_DMA+0x24>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e073      	b.n	8007fc0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UART_Transmit_DMA+0x36>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e06c      	b.n	8007fc0 <HAL_UART_Transmit_DMA+0x110>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	88fa      	ldrh	r2, [r7, #6]
 8007f00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2221      	movs	r2, #33	; 0x21
 8007f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02c      	beq.n	8007f76 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f20:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <HAL_UART_Transmit_DMA+0x118>)
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f28:	4a28      	ldr	r2, [pc, #160]	; (8007fcc <HAL_UART_Transmit_DMA+0x11c>)
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f30:	4a27      	ldr	r2, [pc, #156]	; (8007fd0 <HAL_UART_Transmit_DMA+0x120>)
 8007f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f38:	2200      	movs	r2, #0
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	4619      	mov	r1, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3328      	adds	r3, #40	; 0x28
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	f7fc f8bc 	bl	80040cc <HAL_DMA_Start_IT>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00d      	beq.n	8007f76 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e024      	b.n	8007fc0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2240      	movs	r2, #64	; 0x40
 8007f7c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	613b      	str	r3, [r7, #16]
   return(result);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa6:	623a      	str	r2, [r7, #32]
 8007fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007faa:	69f9      	ldr	r1, [r7, #28]
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	e841 2300 	strex	r3, r2, [r1]
 8007fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1e5      	bne.n	8007f86 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e000      	b.n	8007fc0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3728      	adds	r7, #40	; 0x28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	08009197 	.word	0x08009197
 8007fcc:	08009231 	.word	0x08009231
 8007fd0:	0800924d 	.word	0x0800924d

08007fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b0ba      	sub	sp, #232	; 0xe8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ffe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008002:	4013      	ands	r3, r2
 8008004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11b      	bne.n	8008048 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d015      	beq.n	8008048 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800801c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800802c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d009      	beq.n	8008048 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 82d6 	beq.w	80085ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
      }
      return;
 8008046:	e2d0      	b.n	80085ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 811f 	beq.w	8008290 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008052:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008056:	4b8b      	ldr	r3, [pc, #556]	; (8008284 <HAL_UART_IRQHandler+0x2b0>)
 8008058:	4013      	ands	r3, r2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800805e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008062:	4b89      	ldr	r3, [pc, #548]	; (8008288 <HAL_UART_IRQHandler+0x2b4>)
 8008064:	4013      	ands	r3, r2
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8112 	beq.w	8008290 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d011      	beq.n	800809c <HAL_UART_IRQHandler+0xc8>
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2201      	movs	r2, #1
 800808a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008092:	f043 0201 	orr.w	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800809c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d011      	beq.n	80080cc <HAL_UART_IRQHandler+0xf8>
 80080a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2202      	movs	r2, #2
 80080ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c2:	f043 0204 	orr.w	r2, r3, #4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d011      	beq.n	80080fc <HAL_UART_IRQHandler+0x128>
 80080d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2204      	movs	r2, #4
 80080ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f2:	f043 0202 	orr.w	r2, r3, #2
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d017      	beq.n	8008138 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008114:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008118:	4b5a      	ldr	r3, [pc, #360]	; (8008284 <HAL_UART_IRQHandler+0x2b0>)
 800811a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2208      	movs	r2, #8
 8008126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812e:	f043 0208 	orr.w	r2, r3, #8
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008140:	2b00      	cmp	r3, #0
 8008142:	d012      	beq.n	800816a <HAL_UART_IRQHandler+0x196>
 8008144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00c      	beq.n	800816a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008160:	f043 0220 	orr.w	r2, r3, #32
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 823c 	beq.w	80085ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	d013      	beq.n	80081aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800818e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b40      	cmp	r3, #64	; 0x40
 80081c0:	d005      	beq.n	80081ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d04f      	beq.n	800826e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 ff7c 	bl	80090cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d141      	bne.n	8008266 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3308      	adds	r3, #8
 800820a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800820e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800821a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1d9      	bne.n	80081e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d013      	beq.n	800825e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823a:	4a14      	ldr	r2, [pc, #80]	; (800828c <HAL_UART_IRQHandler+0x2b8>)
 800823c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008242:	4618      	mov	r0, r3
 8008244:	f7fc f81e 	bl	8004284 <HAL_DMA_Abort_IT>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d017      	beq.n	800827e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	e00f      	b.n	800827e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9d9 	bl	8008616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	e00b      	b.n	800827e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f9d5 	bl	8008616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826c:	e007      	b.n	800827e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9d1 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800827c:	e1b7      	b.n	80085ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827e:	bf00      	nop
    return;
 8008280:	e1b5      	b.n	80085ee <HAL_UART_IRQHandler+0x61a>
 8008282:	bf00      	nop
 8008284:	10000001 	.word	0x10000001
 8008288:	04000120 	.word	0x04000120
 800828c:	080092cd 	.word	0x080092cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	2b01      	cmp	r3, #1
 8008296:	f040 814a 	bne.w	800852e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8143 	beq.w	800852e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80082a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 813c 	beq.w	800852e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2210      	movs	r2, #16
 80082bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	f040 80b5 	bne.w	8008438 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80082da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8187 	beq.w	80085f2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082ee:	429a      	cmp	r2, r3
 80082f0:	f080 817f 	bcs.w	80085f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	f040 8086 	bne.w	800841c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800832c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800833a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800833e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1da      	bne.n	8008310 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800836a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800836c:	f023 0301 	bic.w	r3, r3, #1
 8008370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3308      	adds	r3, #8
 800837a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800837e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e1      	bne.n	800835a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e3      	bne.n	8008396 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ec:	f023 0310 	bic.w	r3, r3, #16
 80083f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8008400:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008404:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800840c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e4      	bne.n	80083dc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008416:	4618      	mov	r0, r3
 8008418:	f7fb fed6 	bl	80041c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008428:	b29b      	uxth	r3, r3
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	b29b      	uxth	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8f9 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008436:	e0dc      	b.n	80085f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008444:	b29b      	uxth	r3, r3
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80ce 	beq.w	80085f6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800845a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80c9 	beq.w	80085f6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
 8008488:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800848c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e4      	bne.n	8008464 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	623b      	str	r3, [r7, #32]
   return(result);
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084c2:	633a      	str	r2, [r7, #48]	; 0x30
 80084c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e1      	bne.n	800849a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0310 	bic.w	r3, r3, #16
 80084fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800850c:	61fb      	str	r3, [r7, #28]
 800850e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	69b9      	ldr	r1, [r7, #24]
 8008512:	69fa      	ldr	r2, [r7, #28]
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	617b      	str	r3, [r7, #20]
   return(result);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e4      	bne.n	80084ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f87e 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800852c:	e063      	b.n	80085f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00e      	beq.n	8008558 <HAL_UART_IRQHandler+0x584>
 800853a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800853e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800854e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 fb59 	bl	8009c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008556:	e051      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008560:	2b00      	cmp	r3, #0
 8008562:	d014      	beq.n	800858e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008574:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d008      	beq.n	800858e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008580:	2b00      	cmp	r3, #0
 8008582:	d03a      	beq.n	80085fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
    }
    return;
 800858c:	e035      	b.n	80085fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <HAL_UART_IRQHandler+0x5da>
 800859a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fea6 	bl	80092f8 <UART_EndTransmit_IT>
    return;
 80085ac:	e026      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_UART_IRQHandler+0x5fa>
 80085ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fb30 	bl	8009c2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085cc:	e016      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d010      	beq.n	80085fc <HAL_UART_IRQHandler+0x628>
 80085da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da0c      	bge.n	80085fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f001 fb19 	bl	8009c1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e8:	e008      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
      return;
 80085ea:	bf00      	nop
 80085ec:	e006      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
    return;
 80085ee:	bf00      	nop
 80085f0:	e004      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
      return;
 80085f2:	bf00      	nop
 80085f4:	e002      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
      return;
 80085f6:	bf00      	nop
 80085f8:	e000      	b.n	80085fc <HAL_UART_IRQHandler+0x628>
    return;
 80085fa:	bf00      	nop
  }
}
 80085fc:	37e8      	adds	r7, #232	; 0xe8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop

08008604 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr
	...

08008640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008640:	b5b0      	push	{r4, r5, r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	4313      	orrs	r3, r2
 8008662:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4bab      	ldr	r3, [pc, #684]	; (8008918 <UART_SetConfig+0x2d8>)
 800866c:	4013      	ands	r3, r2
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	69f9      	ldr	r1, [r7, #28]
 8008674:	430b      	orrs	r3, r1
 8008676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4aa0      	ldr	r2, [pc, #640]	; (800891c <UART_SetConfig+0x2dc>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d004      	beq.n	80086a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80086b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	69f9      	ldr	r1, [r7, #28]
 80086bc:	430b      	orrs	r3, r1
 80086be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	f023 010f 	bic.w	r1, r3, #15
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a91      	ldr	r2, [pc, #580]	; (8008920 <UART_SetConfig+0x2e0>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d122      	bne.n	8008726 <UART_SetConfig+0xe6>
 80086e0:	2003      	movs	r0, #3
 80086e2:	f7ff fb1d 	bl	8007d20 <LL_RCC_GetUSARTClockSource>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d817      	bhi.n	8008720 <UART_SetConfig+0xe0>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0xb8>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008709 	.word	0x08008709
 80086fc:	08008715 	.word	0x08008715
 8008700:	0800870f 	.word	0x0800870f
 8008704:	0800871b 	.word	0x0800871b
 8008708:	2301      	movs	r3, #1
 800870a:	76fb      	strb	r3, [r7, #27]
 800870c:	e072      	b.n	80087f4 <UART_SetConfig+0x1b4>
 800870e:	2302      	movs	r3, #2
 8008710:	76fb      	strb	r3, [r7, #27]
 8008712:	e06f      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008714:	2304      	movs	r3, #4
 8008716:	76fb      	strb	r3, [r7, #27]
 8008718:	e06c      	b.n	80087f4 <UART_SetConfig+0x1b4>
 800871a:	2308      	movs	r3, #8
 800871c:	76fb      	strb	r3, [r7, #27]
 800871e:	e069      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008720:	2310      	movs	r3, #16
 8008722:	76fb      	strb	r3, [r7, #27]
 8008724:	e066      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a7e      	ldr	r2, [pc, #504]	; (8008924 <UART_SetConfig+0x2e4>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d134      	bne.n	800879a <UART_SetConfig+0x15a>
 8008730:	200c      	movs	r0, #12
 8008732:	f7ff faf5 	bl	8007d20 <LL_RCC_GetUSARTClockSource>
 8008736:	4603      	mov	r3, r0
 8008738:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800873c:	2b0c      	cmp	r3, #12
 800873e:	d829      	bhi.n	8008794 <UART_SetConfig+0x154>
 8008740:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <UART_SetConfig+0x108>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	0800877d 	.word	0x0800877d
 800874c:	08008795 	.word	0x08008795
 8008750:	08008795 	.word	0x08008795
 8008754:	08008795 	.word	0x08008795
 8008758:	08008789 	.word	0x08008789
 800875c:	08008795 	.word	0x08008795
 8008760:	08008795 	.word	0x08008795
 8008764:	08008795 	.word	0x08008795
 8008768:	08008783 	.word	0x08008783
 800876c:	08008795 	.word	0x08008795
 8008770:	08008795 	.word	0x08008795
 8008774:	08008795 	.word	0x08008795
 8008778:	0800878f 	.word	0x0800878f
 800877c:	2300      	movs	r3, #0
 800877e:	76fb      	strb	r3, [r7, #27]
 8008780:	e038      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008782:	2302      	movs	r3, #2
 8008784:	76fb      	strb	r3, [r7, #27]
 8008786:	e035      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008788:	2304      	movs	r3, #4
 800878a:	76fb      	strb	r3, [r7, #27]
 800878c:	e032      	b.n	80087f4 <UART_SetConfig+0x1b4>
 800878e:	2308      	movs	r3, #8
 8008790:	76fb      	strb	r3, [r7, #27]
 8008792:	e02f      	b.n	80087f4 <UART_SetConfig+0x1b4>
 8008794:	2310      	movs	r3, #16
 8008796:	76fb      	strb	r3, [r7, #27]
 8008798:	e02c      	b.n	80087f4 <UART_SetConfig+0x1b4>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a5f      	ldr	r2, [pc, #380]	; (800891c <UART_SetConfig+0x2dc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d125      	bne.n	80087f0 <UART_SetConfig+0x1b0>
 80087a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80087a8:	f7ff facc 	bl	8007d44 <LL_RCC_GetLPUARTClockSource>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b2:	d017      	beq.n	80087e4 <UART_SetConfig+0x1a4>
 80087b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b8:	d817      	bhi.n	80087ea <UART_SetConfig+0x1aa>
 80087ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087be:	d00b      	beq.n	80087d8 <UART_SetConfig+0x198>
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c4:	d811      	bhi.n	80087ea <UART_SetConfig+0x1aa>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d003      	beq.n	80087d2 <UART_SetConfig+0x192>
 80087ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ce:	d006      	beq.n	80087de <UART_SetConfig+0x19e>
 80087d0:	e00b      	b.n	80087ea <UART_SetConfig+0x1aa>
 80087d2:	2300      	movs	r3, #0
 80087d4:	76fb      	strb	r3, [r7, #27]
 80087d6:	e00d      	b.n	80087f4 <UART_SetConfig+0x1b4>
 80087d8:	2302      	movs	r3, #2
 80087da:	76fb      	strb	r3, [r7, #27]
 80087dc:	e00a      	b.n	80087f4 <UART_SetConfig+0x1b4>
 80087de:	2304      	movs	r3, #4
 80087e0:	76fb      	strb	r3, [r7, #27]
 80087e2:	e007      	b.n	80087f4 <UART_SetConfig+0x1b4>
 80087e4:	2308      	movs	r3, #8
 80087e6:	76fb      	strb	r3, [r7, #27]
 80087e8:	e004      	b.n	80087f4 <UART_SetConfig+0x1b4>
 80087ea:	2310      	movs	r3, #16
 80087ec:	76fb      	strb	r3, [r7, #27]
 80087ee:	e001      	b.n	80087f4 <UART_SetConfig+0x1b4>
 80087f0:	2310      	movs	r3, #16
 80087f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a48      	ldr	r2, [pc, #288]	; (800891c <UART_SetConfig+0x2dc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	f040 8098 	bne.w	8008930 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008800:	7efb      	ldrb	r3, [r7, #27]
 8008802:	2b08      	cmp	r3, #8
 8008804:	d823      	bhi.n	800884e <UART_SetConfig+0x20e>
 8008806:	a201      	add	r2, pc, #4	; (adr r2, 800880c <UART_SetConfig+0x1cc>)
 8008808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880c:	08008831 	.word	0x08008831
 8008810:	0800884f 	.word	0x0800884f
 8008814:	08008839 	.word	0x08008839
 8008818:	0800884f 	.word	0x0800884f
 800881c:	0800883f 	.word	0x0800883f
 8008820:	0800884f 	.word	0x0800884f
 8008824:	0800884f 	.word	0x0800884f
 8008828:	0800884f 	.word	0x0800884f
 800882c:	08008847 	.word	0x08008847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008830:	f7fd ff56 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008834:	6178      	str	r0, [r7, #20]
        break;
 8008836:	e00f      	b.n	8008858 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008838:	4b3b      	ldr	r3, [pc, #236]	; (8008928 <UART_SetConfig+0x2e8>)
 800883a:	617b      	str	r3, [r7, #20]
        break;
 800883c:	e00c      	b.n	8008858 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883e:	f7fd fe9b 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8008842:	6178      	str	r0, [r7, #20]
        break;
 8008844:	e008      	b.n	8008858 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800884a:	617b      	str	r3, [r7, #20]
        break;
 800884c:	e004      	b.n	8008858 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	76bb      	strb	r3, [r7, #26]
        break;
 8008856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8128 	beq.w	8008ab0 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	4a31      	ldr	r2, [pc, #196]	; (800892c <UART_SetConfig+0x2ec>)
 8008866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800886a:	461a      	mov	r2, r3
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008872:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	4413      	add	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	d305      	bcc.n	8008890 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	d902      	bls.n	8008896 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	76bb      	strb	r3, [r7, #26]
 8008894:	e10c      	b.n	8008ab0 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	4618      	mov	r0, r3
 800889a:	f04f 0100 	mov.w	r1, #0
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	4a22      	ldr	r2, [pc, #136]	; (800892c <UART_SetConfig+0x2ec>)
 80088a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f7f8 f955 	bl	8000b5c <__aeabi_uldivmod>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	4610      	mov	r0, r2
 80088b8:	4619      	mov	r1, r3
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	020b      	lsls	r3, r1, #8
 80088c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088c8:	0202      	lsls	r2, r0, #8
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	6849      	ldr	r1, [r1, #4]
 80088ce:	0849      	lsrs	r1, r1, #1
 80088d0:	4608      	mov	r0, r1
 80088d2:	f04f 0100 	mov.w	r1, #0
 80088d6:	1814      	adds	r4, r2, r0
 80088d8:	eb43 0501 	adc.w	r5, r3, r1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	461a      	mov	r2, r3
 80088e2:	f04f 0300 	mov.w	r3, #0
 80088e6:	4620      	mov	r0, r4
 80088e8:	4629      	mov	r1, r5
 80088ea:	f7f8 f937 	bl	8000b5c <__aeabi_uldivmod>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4613      	mov	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088fc:	d308      	bcc.n	8008910 <UART_SetConfig+0x2d0>
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008904:	d204      	bcs.n	8008910 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e0cf      	b.n	8008ab0 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	76bb      	strb	r3, [r7, #26]
 8008914:	e0cc      	b.n	8008ab0 <UART_SetConfig+0x470>
 8008916:	bf00      	nop
 8008918:	cfff69f3 	.word	0xcfff69f3
 800891c:	40008000 	.word	0x40008000
 8008920:	40013800 	.word	0x40013800
 8008924:	40004400 	.word	0x40004400
 8008928:	00f42400 	.word	0x00f42400
 800892c:	0801b854 	.word	0x0801b854
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008938:	d165      	bne.n	8008a06 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800893a:	7efb      	ldrb	r3, [r7, #27]
 800893c:	2b08      	cmp	r3, #8
 800893e:	d828      	bhi.n	8008992 <UART_SetConfig+0x352>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x308>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	08008993 	.word	0x08008993
 8008958:	08008983 	.word	0x08008983
 800895c:	08008993 	.word	0x08008993
 8008960:	08008993 	.word	0x08008993
 8008964:	08008993 	.word	0x08008993
 8008968:	0800898b 	.word	0x0800898b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fd feb8 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008970:	6178      	str	r0, [r7, #20]
        break;
 8008972:	e013      	b.n	800899c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fd fec6 	bl	8006704 <HAL_RCC_GetPCLK2Freq>
 8008978:	6178      	str	r0, [r7, #20]
        break;
 800897a:	e00f      	b.n	800899c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b56      	ldr	r3, [pc, #344]	; (8008ad8 <UART_SetConfig+0x498>)
 800897e:	617b      	str	r3, [r7, #20]
        break;
 8008980:	e00c      	b.n	800899c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fd fdf9 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8008986:	6178      	str	r0, [r7, #20]
        break;
 8008988:	e008      	b.n	800899c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898e:	617b      	str	r3, [r7, #20]
        break;
 8008990:	e004      	b.n	800899c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	76bb      	strb	r3, [r7, #26]
        break;
 800899a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8086 	beq.w	8008ab0 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	4a4c      	ldr	r2, [pc, #304]	; (8008adc <UART_SetConfig+0x49c>)
 80089aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ae:	461a      	mov	r2, r3
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b6:	005a      	lsls	r2, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	441a      	add	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b0f      	cmp	r3, #15
 80089d0:	d916      	bls.n	8008a00 <UART_SetConfig+0x3c0>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d8:	d212      	bcs.n	8008a00 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f023 030f 	bic.w	r3, r3, #15
 80089e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	89fa      	ldrh	r2, [r7, #14]
 80089fc:	60da      	str	r2, [r3, #12]
 80089fe:	e057      	b.n	8008ab0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	76bb      	strb	r3, [r7, #26]
 8008a04:	e054      	b.n	8008ab0 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a06:	7efb      	ldrb	r3, [r7, #27]
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d828      	bhi.n	8008a5e <UART_SetConfig+0x41e>
 8008a0c:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <UART_SetConfig+0x3d4>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a41 	.word	0x08008a41
 8008a1c:	08008a49 	.word	0x08008a49
 8008a20:	08008a5f 	.word	0x08008a5f
 8008a24:	08008a4f 	.word	0x08008a4f
 8008a28:	08008a5f 	.word	0x08008a5f
 8008a2c:	08008a5f 	.word	0x08008a5f
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	08008a57 	.word	0x08008a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7fd fe52 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
 8008a3c:	6178      	str	r0, [r7, #20]
        break;
 8008a3e:	e013      	b.n	8008a68 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a40:	f7fd fe60 	bl	8006704 <HAL_RCC_GetPCLK2Freq>
 8008a44:	6178      	str	r0, [r7, #20]
        break;
 8008a46:	e00f      	b.n	8008a68 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b23      	ldr	r3, [pc, #140]	; (8008ad8 <UART_SetConfig+0x498>)
 8008a4a:	617b      	str	r3, [r7, #20]
        break;
 8008a4c:	e00c      	b.n	8008a68 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fd fd93 	bl	8006578 <HAL_RCC_GetSysClockFreq>
 8008a52:	6178      	str	r0, [r7, #20]
        break;
 8008a54:	e008      	b.n	8008a68 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5a:	617b      	str	r3, [r7, #20]
        break;
 8008a5c:	e004      	b.n	8008a68 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	76bb      	strb	r3, [r7, #26]
        break;
 8008a66:	bf00      	nop
    }

    if (pclk != 0U)
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d020      	beq.n	8008ab0 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <UART_SetConfig+0x49c>)
 8008a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	441a      	add	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d908      	bls.n	8008aac <UART_SetConfig+0x46c>
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa0:	d204      	bcs.n	8008aac <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	60da      	str	r2, [r3, #12]
 8008aaa:	e001      	b.n	8008ab0 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008acc:	7ebb      	ldrb	r3, [r7, #26]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3720      	adds	r7, #32
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	00f42400 	.word	0x00f42400
 8008adc:	0801b854 	.word	0x0801b854

08008ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	f003 0302 	and.w	r3, r3, #2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bde:	d10a      	bne.n	8008bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	605a      	str	r2, [r3, #4]
  }
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bc80      	pop	{r7}
 8008c20:	4770      	bx	lr

08008c22 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af02      	add	r7, sp, #8
 8008c28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c32:	f7f8 ffbf 	bl	8001bb4 <HAL_GetTick>
 8008c36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d10e      	bne.n	8008c64 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f82f 	bl	8008cb8 <UART_WaitOnFlagUntilTimeout>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e025      	b.n	8008cb0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d10e      	bne.n	8008c90 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f819 	bl	8008cb8 <UART_WaitOnFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e00f      	b.n	8008cb0 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b09c      	sub	sp, #112	; 0x70
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc8:	e0a9      	b.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	f000 80a5 	beq.w	8008e1e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd4:	f7f8 ff6e 	bl	8001bb4 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <UART_WaitOnFlagUntilTimeout+0x32>
 8008ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d140      	bne.n	8008d6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d0a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3308      	adds	r3, #8
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d26:	e853 3f00 	ldrex	r3, [r3]
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	f023 0301 	bic.w	r3, r3, #1
 8008d32:	663b      	str	r3, [r7, #96]	; 0x60
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008d3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d44:	e841 2300 	strex	r3, r2, [r1]
 8008d48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e5      	bne.n	8008d1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2220      	movs	r2, #32
 8008d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e069      	b.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d051      	beq.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d88:	d149      	bne.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db2:	637b      	str	r3, [r7, #52]	; 0x34
 8008db4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008de6:	623a      	str	r2, [r7, #32]
 8008de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	69f9      	ldr	r1, [r7, #28]
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e010      	b.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69da      	ldr	r2, [r3, #28]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	4013      	ands	r3, r2
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	bf0c      	ite	eq
 8008e2e:	2301      	moveq	r3, #1
 8008e30:	2300      	movne	r3, #0
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	f43f af46 	beq.w	8008cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3770      	adds	r7, #112	; 0x70
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b09d      	sub	sp, #116	; 0x74
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	88fa      	ldrh	r2, [r7, #6]
 8008e60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7a:	d10e      	bne.n	8008e9a <UART_Start_Receive_IT+0x52>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <UART_Start_Receive_IT+0x48>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e8e:	e02d      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008e98:	e028      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10d      	bne.n	8008ebe <UART_Start_Receive_IT+0x76>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <UART_Start_Receive_IT+0x6c>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	22ff      	movs	r2, #255	; 0xff
 8008eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008eb2:	e01b      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	227f      	movs	r2, #127	; 0x7f
 8008eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ebc:	e016      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ec6:	d10d      	bne.n	8008ee4 <UART_Start_Receive_IT+0x9c>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d104      	bne.n	8008eda <UART_Start_Receive_IT+0x92>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	227f      	movs	r2, #127	; 0x7f
 8008ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ed8:	e008      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	223f      	movs	r2, #63	; 0x3f
 8008ede:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ee2:	e003      	b.n	8008eec <UART_Start_Receive_IT+0xa4>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2222      	movs	r2, #34	; 0x22
 8008ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f0e:	f043 0301 	orr.w	r3, r3, #1
 8008f12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3308      	adds	r3, #8
 8008f1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f1c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008f1e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e5      	bne.n	8008efc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f38:	d14d      	bne.n	8008fd6 <UART_Start_Receive_IT+0x18e>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f40:	88fa      	ldrh	r2, [r7, #6]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d347      	bcc.n	8008fd6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f4e:	d107      	bne.n	8008f60 <UART_Start_Receive_IT+0x118>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a38      	ldr	r2, [pc, #224]	; (800903c <UART_Start_Receive_IT+0x1f4>)
 8008f5c:	671a      	str	r2, [r3, #112]	; 0x70
 8008f5e:	e002      	b.n	8008f66 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a37      	ldr	r2, [pc, #220]	; (8009040 <UART_Start_Receive_IT+0x1f8>)
 8008f64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f8e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fc0:	637a      	str	r2, [r7, #52]	; 0x34
 8008fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_Start_Receive_IT+0x158>
 8008fd4:	e02c      	b.n	8009030 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fde:	d107      	bne.n	8008ff0 <UART_Start_Receive_IT+0x1a8>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d103      	bne.n	8008ff0 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a16      	ldr	r2, [pc, #88]	; (8009044 <UART_Start_Receive_IT+0x1fc>)
 8008fec:	671a      	str	r2, [r3, #112]	; 0x70
 8008fee:	e002      	b.n	8008ff6 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a15      	ldr	r2, [pc, #84]	; (8009048 <UART_Start_Receive_IT+0x200>)
 8008ff4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	613b      	str	r3, [r7, #16]
   return(result);
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009012:	663b      	str	r3, [r7, #96]	; 0x60
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	461a      	mov	r2, r3
 800901a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800901c:	623b      	str	r3, [r7, #32]
 800901e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	69f9      	ldr	r1, [r7, #28]
 8009022:	6a3a      	ldr	r2, [r7, #32]
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	61bb      	str	r3, [r7, #24]
   return(result);
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e6      	bne.n	8008ffe <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3774      	adds	r7, #116	; 0x74
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr
 800903c:	08009909 	.word	0x08009909
 8009040:	08009611 	.word	0x08009611
 8009044:	080094af 	.word	0x080094af
 8009048:	0800934f 	.word	0x0800934f

0800904c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800904c:	b480      	push	{r7}
 800904e:	b08f      	sub	sp, #60	; 0x3c
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	61fb      	str	r3, [r7, #28]
   return(result);
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009074:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e6      	bne.n	8009054 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	60bb      	str	r3, [r7, #8]
   return(result);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800909c:	633b      	str	r3, [r7, #48]	; 0x30
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a6:	61ba      	str	r2, [r7, #24]
 80090a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69ba      	ldr	r2, [r7, #24]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	613b      	str	r3, [r7, #16]
   return(result);
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e5      	bne.n	8009086 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80090c2:	bf00      	nop
 80090c4:	373c      	adds	r7, #60	; 0x3c
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b095      	sub	sp, #84	; 0x54
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f2:	643b      	str	r3, [r7, #64]	; 0x40
 80090f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e6      	bne.n	80090d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	61fb      	str	r3, [r7, #28]
   return(result);
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800911c:	f023 0301 	bic.w	r3, r3, #1
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e3      	bne.n	8009106 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009142:	2b01      	cmp	r3, #1
 8009144:	d118      	bne.n	8009178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	60bb      	str	r3, [r7, #8]
   return(result);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f023 0310 	bic.w	r3, r3, #16
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	613b      	str	r3, [r7, #16]
   return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e6      	bne.n	8009146 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2220      	movs	r2, #32
 800917c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2200      	movs	r2, #0
 8009184:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800918c:	bf00      	nop
 800918e:	3754      	adds	r7, #84	; 0x54
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr

08009196 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b090      	sub	sp, #64	; 0x40
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0320 	and.w	r3, r3, #32
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d137      	bne.n	8009222 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80091b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80091ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	623b      	str	r3, [r7, #32]
   return(result);
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091da:	633a      	str	r2, [r7, #48]	; 0x30
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	617b      	str	r3, [r7, #20]
   return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e6      	bne.n	80091ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009220:	e002      	b.n	8009228 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009222:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009224:	f7f9 fa22 	bl	800266c <HAL_UART_TxCpltCallback>
}
 8009228:	bf00      	nop
 800922a:	3740      	adds	r7, #64	; 0x40
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff f9e0 	bl	8008604 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009260:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009268:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d109      	bne.n	800928c <UART_DMAError+0x40>
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2b21      	cmp	r3, #33	; 0x21
 800927c:	d106      	bne.n	800928c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2200      	movs	r2, #0
 8009282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009286:	6978      	ldr	r0, [r7, #20]
 8009288:	f7ff fee0 	bl	800904c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009296:	2b40      	cmp	r3, #64	; 0x40
 8009298:	d109      	bne.n	80092ae <UART_DMAError+0x62>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b22      	cmp	r3, #34	; 0x22
 800929e:	d106      	bne.n	80092ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80092a8:	6978      	ldr	r0, [r7, #20]
 80092aa:	f7ff ff0f 	bl	80090cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b4:	f043 0210 	orr.w	r2, r3, #16
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092be:	6978      	ldr	r0, [r7, #20]
 80092c0:	f7ff f9a9 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092c4:	bf00      	nop
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff f993 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	60bb      	str	r3, [r7, #8]
   return(result);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009314:	61fb      	str	r3, [r7, #28]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	61bb      	str	r3, [r7, #24]
 8009320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6979      	ldr	r1, [r7, #20]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	613b      	str	r3, [r7, #16]
   return(result);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e6      	bne.n	8009300 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7f9 f993 	bl	800266c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009346:	bf00      	nop
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b096      	sub	sp, #88	; 0x58
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800935c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009366:	2b22      	cmp	r3, #34	; 0x22
 8009368:	f040 8095 	bne.w	8009496 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009376:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800937a:	b2d9      	uxtb	r1, r3
 800937c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009380:	b2da      	uxtb	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	400a      	ands	r2, r1
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939c:	b29b      	uxth	r3, r3
 800939e:	3b01      	subs	r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d178      	bne.n	80094a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	e853 3f00 	ldrex	r3, [r3]
 80093c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093c8:	653b      	str	r3, [r7, #80]	; 0x50
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d2:	647b      	str	r3, [r7, #68]	; 0x44
 80093d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093da:	e841 2300 	strex	r3, r2, [r1]
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e6      	bne.n	80093b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	623b      	str	r3, [r7, #32]
   return(result);
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	f023 0301 	bic.w	r3, r3, #1
 80093fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009406:	633a      	str	r2, [r7, #48]	; 0x30
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800940c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942c:	2b01      	cmp	r3, #1
 800942e:	d12e      	bne.n	800948e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	60fb      	str	r3, [r7, #12]
   return(result);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0310 	bic.w	r3, r3, #16
 800944a:	64bb      	str	r3, [r7, #72]	; 0x48
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	69b9      	ldr	r1, [r7, #24]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	617b      	str	r3, [r7, #20]
   return(result);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b10      	cmp	r3, #16
 8009474:	d103      	bne.n	800947e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2210      	movs	r2, #16
 800947c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff f8ce 	bl	8008628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800948c:	e00b      	b.n	80094a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7f9 f8fa 	bl	8002688 <HAL_UART_RxCpltCallback>
}
 8009494:	e007      	b.n	80094a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0208 	orr.w	r2, r2, #8
 80094a4:	619a      	str	r2, [r3, #24]
}
 80094a6:	bf00      	nop
 80094a8:	3758      	adds	r7, #88	; 0x58
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b096      	sub	sp, #88	; 0x58
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c6:	2b22      	cmp	r3, #34	; 0x22
 80094c8:	f040 8095 	bne.w	80095f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80094dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80094e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094e4:	4013      	ands	r3, r2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f0:	1c9a      	adds	r2, r3, #2
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800950e:	b29b      	uxth	r3, r3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d178      	bne.n	8009606 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009532:	643b      	str	r3, [r7, #64]	; 0x40
 8009534:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e6      	bne.n	8009514 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	61fb      	str	r3, [r7, #28]
   return(result);
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	64bb      	str	r3, [r7, #72]	; 0x48
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3308      	adds	r3, #8
 8009564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800956c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e5      	bne.n	8009546 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800958c:	2b01      	cmp	r3, #1
 800958e:	d12e      	bne.n	80095ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f023 0310 	bic.w	r3, r3, #16
 80095aa:	647b      	str	r3, [r7, #68]	; 0x44
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095b4:	61bb      	str	r3, [r7, #24]
 80095b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	613b      	str	r3, [r7, #16]
   return(result);
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e6      	bne.n	8009596 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f003 0310 	and.w	r3, r3, #16
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d103      	bne.n	80095de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2210      	movs	r2, #16
 80095dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff f81e 	bl	8008628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ec:	e00b      	b.n	8009606 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f9 f84a 	bl	8002688 <HAL_UART_RxCpltCallback>
}
 80095f4:	e007      	b.n	8009606 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699a      	ldr	r2, [r3, #24]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0208 	orr.w	r2, r2, #8
 8009604:	619a      	str	r2, [r3, #24]
}
 8009606:	bf00      	nop
 8009608:	3758      	adds	r7, #88	; 0x58
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b0a6      	sub	sp, #152	; 0x98
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800961e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009646:	2b22      	cmp	r3, #34	; 0x22
 8009648:	f040 814f 	bne.w	80098ea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009652:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009656:	e0f6      	b.n	8009846 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009662:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009666:	b2d9      	uxtb	r1, r3
 8009668:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009672:	400a      	ands	r2, r1
 8009674:	b2d2      	uxtb	r2, r2
 8009676:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800969e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d053      	beq.n	8009752 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d011      	beq.n	80096da <UART_RxISR_8BIT_FIFOEN+0xca>
 80096b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2201      	movs	r2, #1
 80096c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d0:	f043 0201 	orr.w	r2, r3, #1
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d011      	beq.n	800970a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80096e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00b      	beq.n	800970a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2202      	movs	r2, #2
 80096f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009700:	f043 0204 	orr.w	r2, r3, #4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800970a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800970e:	f003 0304 	and.w	r3, r3, #4
 8009712:	2b00      	cmp	r3, #0
 8009714:	d011      	beq.n	800973a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00b      	beq.n	800973a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2204      	movs	r2, #4
 8009728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009730:	f043 0202 	orr.w	r2, r3, #2
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7fe ff66 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009758:	b29b      	uxth	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d173      	bne.n	8009846 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800976c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009772:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009780:	66bb      	str	r3, [r7, #104]	; 0x68
 8009782:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800978e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e4      	bne.n	800975e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800979e:	e853 3f00 	ldrex	r3, [r3]
 80097a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097b8:	657a      	str	r2, [r7, #84]	; 0x54
 80097ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097c0:	e841 2300 	strex	r3, r2, [r1]
 80097c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e3      	bne.n	8009794 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d12e      	bne.n	8009840 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	f023 0310 	bic.w	r3, r3, #16
 80097fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009806:	643b      	str	r3, [r7, #64]	; 0x40
 8009808:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800980c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e6      	bne.n	80097e8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b10      	cmp	r3, #16
 8009826:	d103      	bne.n	8009830 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2210      	movs	r2, #16
 800982e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7fe fef5 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 800983e:	e002      	b.n	8009846 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7f8 ff21 	bl	8002688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009846:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800984a:	2b00      	cmp	r3, #0
 800984c:	d006      	beq.n	800985c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800984e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009852:	f003 0320 	and.w	r3, r3, #32
 8009856:	2b00      	cmp	r3, #0
 8009858:	f47f aefe 	bne.w	8009658 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009862:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009866:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800986a:	2b00      	cmp	r3, #0
 800986c:	d045      	beq.n	80098fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009878:	429a      	cmp	r2, r3
 800987a:	d23e      	bcs.n	80098fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3308      	adds	r3, #8
 8009882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	61fb      	str	r3, [r7, #28]
   return(result);
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009892:	673b      	str	r3, [r7, #112]	; 0x70
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800989c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e5      	bne.n	800987c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a14      	ldr	r2, [pc, #80]	; (8009904 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80098b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f043 0320 	orr.w	r3, r3, #32
 80098ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6979      	ldr	r1, [r7, #20]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	613b      	str	r3, [r7, #16]
   return(result);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e6      	bne.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e8:	e007      	b.n	80098fa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0208 	orr.w	r2, r2, #8
 80098f8:	619a      	str	r2, [r3, #24]
}
 80098fa:	bf00      	nop
 80098fc:	3798      	adds	r7, #152	; 0x98
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	0800934f 	.word	0x0800934f

08009908 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b0a8      	sub	sp, #160	; 0xa0
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009916:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993e:	2b22      	cmp	r3, #34	; 0x22
 8009940:	f040 8153 	bne.w	8009bea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800994a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800994e:	e0fa      	b.n	8009b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009962:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009966:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800996a:	4013      	ands	r3, r2
 800996c:	b29a      	uxth	r2, r3
 800996e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009972:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009978:	1c9a      	adds	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b01      	subs	r3, #1
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800999a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d053      	beq.n	8009a4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d011      	beq.n	80099d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80099b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80099b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00b      	beq.n	80099d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2201      	movs	r2, #1
 80099c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099cc:	f043 0201 	orr.w	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d011      	beq.n	8009a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00b      	beq.n	8009a06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2202      	movs	r2, #2
 80099f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fc:	f043 0204 	orr.w	r2, r3, #4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d011      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2204      	movs	r2, #4
 8009a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a2c:	f043 0202 	orr.w	r2, r3, #2
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7fe fde8 	bl	8008616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d175      	bne.n	8009b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a7e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e4      	bne.n	8009a5a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3308      	adds	r3, #8
 8009a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	f023 0301 	bic.w	r3, r3, #1
 8009aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e1      	bne.n	8009a90 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d12e      	bne.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	f023 0310 	bic.w	r3, r3, #16
 8009afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b06:	647b      	str	r3, [r7, #68]	; 0x44
 8009b08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e6      	bne.n	8009ae8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d103      	bne.n	8009b30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fe fd75 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 8009b3e:	e002      	b.n	8009b46 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f8 fda1 	bl	8002688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b52:	f003 0320 	and.w	r3, r3, #32
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f47f aefa 	bne.w	8009950 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b62:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d045      	beq.n	8009bfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b74:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d23e      	bcs.n	8009bfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b92:	677b      	str	r3, [r7, #116]	; 0x74
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	3308      	adds	r3, #8
 8009b9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009b9c:	633a      	str	r2, [r7, #48]	; 0x30
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba4:	e841 2300 	strex	r3, r2, [r1]
 8009ba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e5      	bne.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a14      	ldr	r2, [pc, #80]	; (8009c04 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009bb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f043 0320 	orr.w	r3, r3, #32
 8009bca:	673b      	str	r3, [r7, #112]	; 0x70
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	69b9      	ldr	r1, [r7, #24]
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	617b      	str	r3, [r7, #20]
   return(result);
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e6      	bne.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be8:	e007      	b.n	8009bfa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0208 	orr.w	r2, r2, #8
 8009bf8:	619a      	str	r2, [r3, #24]
}
 8009bfa:	bf00      	nop
 8009bfc:	37a0      	adds	r7, #160	; 0xa0
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	080094af 	.word	0x080094af

08009c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bc80      	pop	{r7}
 8009c18:	4770      	bx	lr

08009c1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b083      	sub	sp, #12
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bc80      	pop	{r7}
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b088      	sub	sp, #32
 8009c42:	af02      	add	r7, sp, #8
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	1d3b      	adds	r3, r7, #4
 8009c48:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d101      	bne.n	8009c5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	e046      	b.n	8009cec <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2224      	movs	r2, #36	; 0x24
 8009c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d105      	bne.n	8009ca4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f000 f911 	bl	8009ec6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb4:	f7f7 ff7e 	bl	8001bb4 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7fe fff5 	bl	8008cb8 <UART_WaitOnFlagUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	75fb      	strb	r3, [r7, #23]
 8009cd8:	e003      	b.n	8009ce2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b089      	sub	sp, #36	; 0x24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_UARTEx_EnableStopMode+0x16>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e021      	b.n	8009d4e <HAL_UARTEx_EnableStopMode+0x5a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f043 0302 	orr.w	r3, r3, #2
 8009d26:	61fb      	str	r3, [r7, #28]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	61bb      	str	r3, [r7, #24]
 8009d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d34:	6979      	ldr	r1, [r7, #20]
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	e841 2300 	strex	r3, r2, [r1]
 8009d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e6      	bne.n	8009d12 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3724      	adds	r7, #36	; 0x24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bc80      	pop	{r7}
 8009d56:	4770      	bx	lr

08009d58 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <HAL_UARTEx_EnableFifoMode+0x16>
 8009d6a:	2302      	movs	r3, #2
 8009d6c:	e02b      	b.n	8009dc6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2224      	movs	r2, #36	; 0x24
 8009d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f022 0201 	bic.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009da4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8ac 	bl	8009f0c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d101      	bne.n	8009de6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009de2:	2302      	movs	r3, #2
 8009de4:	e02d      	b.n	8009e42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2224      	movs	r2, #36	; 0x24
 8009df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f872 	bl	8009f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e02d      	b.n	8009ebe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2224      	movs	r2, #36	; 0x24
 8009e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0201 	bic.w	r2, r2, #1
 8009e88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f834 	bl	8009f0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	1d3b      	adds	r3, r7, #4
 8009ed0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f023 0210 	bic.w	r2, r3, #16
 8009ede:	893b      	ldrh	r3, [r7, #8]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8009ef4:	7abb      	ldrb	r3, [r7, #10]
 8009ef6:	061a      	lsls	r2, r3, #24
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]
}
 8009f00:	bf00      	nop
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bc80      	pop	{r7}
 8009f08:	4770      	bx	lr
	...

08009f0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d108      	bne.n	8009f2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f2c:	e031      	b.n	8009f92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f2e:	2308      	movs	r3, #8
 8009f30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f32:	2308      	movs	r3, #8
 8009f34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	0e5b      	lsrs	r3, r3, #25
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	0f5b      	lsrs	r3, r3, #29
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f003 0307 	and.w	r3, r3, #7
 8009f54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	7b3a      	ldrb	r2, [r7, #12]
 8009f5a:	4910      	ldr	r1, [pc, #64]	; (8009f9c <UARTEx_SetNbDataToProcess+0x90>)
 8009f5c:	5c8a      	ldrb	r2, [r1, r2]
 8009f5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f62:	7b3a      	ldrb	r2, [r7, #12]
 8009f64:	490e      	ldr	r1, [pc, #56]	; (8009fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
 8009f76:	7b7a      	ldrb	r2, [r7, #13]
 8009f78:	4908      	ldr	r1, [pc, #32]	; (8009f9c <UARTEx_SetNbDataToProcess+0x90>)
 8009f7a:	5c8a      	ldrb	r2, [r1, r2]
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f80:	7b7a      	ldrb	r2, [r7, #13]
 8009f82:	4907      	ldr	r1, [pc, #28]	; (8009fa0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f92:	bf00      	nop
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bc80      	pop	{r7}
 8009f9a:	4770      	bx	lr
 8009f9c:	0801b86c 	.word	0x0801b86c
 8009fa0:	0801b874 	.word	0x0801b874

08009fa4 <CayenneLppReset>:

  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  CayenneLppCursor = 0;
 8009fa8:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <CayenneLppReset+0x14>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 8009fae:	bf00      	nop
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bc80      	pop	{r7}
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000252 	.word	0x20000252

08009fbc <CayenneLppGetSize>:

uint8_t CayenneLppGetSize(void)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <CayenneLppGetSize+0x10>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bc80      	pop	{r7}
 8009fca:	4770      	bx	lr
 8009fcc:	20000252 	.word	0x20000252

08009fd0 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <CayenneLppCopy+0x24>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4905      	ldr	r1, [pc, #20]	; (8009ff8 <CayenneLppCopy+0x28>)
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f00f fbea 	bl	80197bc <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	; (8009ff4 <CayenneLppCopy+0x24>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000252 	.word	0x20000252
 8009ff8:	20000160 	.word	0x20000160

08009ffc <CayenneLppAddDigitalInput>:

uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	460a      	mov	r2, r1
 800a006:	71fb      	strb	r3, [r7, #7]
 800a008:	4613      	mov	r3, r2
 800a00a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a00c:	4b15      	ldr	r3, [pc, #84]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2bef      	cmp	r3, #239	; 0xef
 800a012:	d901      	bls.n	800a018 <CayenneLppAddDigitalInput+0x1c>
  {
    return 0;
 800a014:	2300      	movs	r3, #0
 800a016:	e01f      	b.n	800a058 <CayenneLppAddDigitalInput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a018:	4b12      	ldr	r3, [pc, #72]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	1c5a      	adds	r2, r3, #1
 800a01e:	b2d1      	uxtb	r1, r2
 800a020:	4a10      	ldr	r2, [pc, #64]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a022:	7011      	strb	r1, [r2, #0]
 800a024:	4619      	mov	r1, r3
 800a026:	4a10      	ldr	r2, [pc, #64]	; (800a068 <CayenneLppAddDigitalInput+0x6c>)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	b2d1      	uxtb	r1, r2
 800a034:	4a0b      	ldr	r2, [pc, #44]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a036:	7011      	strb	r1, [r2, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <CayenneLppAddDigitalInput+0x6c>)
 800a03c:	2100      	movs	r1, #0
 800a03e:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	b2d1      	uxtb	r1, r2
 800a048:	4a06      	ldr	r2, [pc, #24]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a04a:	7011      	strb	r1, [r2, #0]
 800a04c:	4619      	mov	r1, r3
 800a04e:	4a06      	ldr	r2, [pc, #24]	; (800a068 <CayenneLppAddDigitalInput+0x6c>)
 800a050:	79bb      	ldrb	r3, [r7, #6]
 800a052:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
 800a054:	4b03      	ldr	r3, [pc, #12]	; (800a064 <CayenneLppAddDigitalInput+0x68>)
 800a056:	781b      	ldrb	r3, [r3, #0]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000252 	.word	0x20000252
 800a068:	20000160 	.word	0x20000160

0800a06c <CayenneLppAddDigitalOutput>:

uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	460a      	mov	r2, r1
 800a076:	71fb      	strb	r3, [r7, #7]
 800a078:	4613      	mov	r3, r2
 800a07a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a07c:	4b15      	ldr	r3, [pc, #84]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2bef      	cmp	r3, #239	; 0xef
 800a082:	d901      	bls.n	800a088 <CayenneLppAddDigitalOutput+0x1c>
  {
    return 0;
 800a084:	2300      	movs	r3, #0
 800a086:	e01f      	b.n	800a0c8 <CayenneLppAddDigitalOutput+0x5c>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a088:	4b12      	ldr	r3, [pc, #72]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	b2d1      	uxtb	r1, r2
 800a090:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a092:	7011      	strb	r1, [r2, #0]
 800a094:	4619      	mov	r1, r3
 800a096:	4a10      	ldr	r2, [pc, #64]	; (800a0d8 <CayenneLppAddDigitalOutput+0x6c>)
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	b2d1      	uxtb	r1, r2
 800a0a4:	4a0b      	ldr	r2, [pc, #44]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a0a6:	7011      	strb	r1, [r2, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <CayenneLppAddDigitalOutput+0x6c>)
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	b2d1      	uxtb	r1, r2
 800a0b8:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a0ba:	7011      	strb	r1, [r2, #0]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4a06      	ldr	r2, [pc, #24]	; (800a0d8 <CayenneLppAddDigitalOutput+0x6c>)
 800a0c0:	79bb      	ldrb	r3, [r7, #6]
 800a0c2:	5453      	strb	r3, [r2, r1]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
 800a0c4:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <CayenneLppAddDigitalOutput+0x68>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bc80      	pop	{r7}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	20000252 	.word	0x20000252
 800a0d8:	20000160 	.word	0x20000160

0800a0dc <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, int16_t celsius)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	460a      	mov	r2, r1
 800a0e6:	71fb      	strb	r3, [r7, #7]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a0ec:	4b20      	ldr	r3, [pc, #128]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2bee      	cmp	r3, #238	; 0xee
 800a0f2:	d901      	bls.n	800a0f8 <CayenneLppAddTemperature+0x1c>
  {
    return 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e035      	b.n	800a164 <CayenneLppAddTemperature+0x88>
  }
  int16_t val = celsius * 10;
 800a0f8:	88bb      	ldrh	r3, [r7, #4]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	0092      	lsls	r2, r2, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	b29b      	uxth	r3, r3
 800a104:	81fb      	strh	r3, [r7, #14]
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a106:	4b1a      	ldr	r3, [pc, #104]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	b2d1      	uxtb	r1, r2
 800a10e:	4a18      	ldr	r2, [pc, #96]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a110:	7011      	strb	r1, [r2, #0]
 800a112:	4619      	mov	r1, r3
 800a114:	4a17      	ldr	r2, [pc, #92]	; (800a174 <CayenneLppAddTemperature+0x98>)
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 800a11a:	4b15      	ldr	r3, [pc, #84]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	b2d1      	uxtb	r1, r2
 800a122:	4a13      	ldr	r2, [pc, #76]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a124:	7011      	strb	r1, [r2, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	4b12      	ldr	r3, [pc, #72]	; (800a174 <CayenneLppAddTemperature+0x98>)
 800a12a:	2167      	movs	r1, #103	; 0x67
 800a12c:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800a12e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a132:	121b      	asrs	r3, r3, #8
 800a134:	b219      	sxth	r1, r3
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	b2d0      	uxtb	r0, r2
 800a13e:	4a0c      	ldr	r2, [pc, #48]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a140:	7010      	strb	r0, [r2, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	b2c9      	uxtb	r1, r1
 800a146:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <CayenneLppAddTemperature+0x98>)
 800a148:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	b2d1      	uxtb	r1, r2
 800a152:	4a07      	ldr	r2, [pc, #28]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a154:	7011      	strb	r1, [r2, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	b2d9      	uxtb	r1, r3
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <CayenneLppAddTemperature+0x98>)
 800a15e:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
 800a160:	4b03      	ldr	r3, [pc, #12]	; (800a170 <CayenneLppAddTemperature+0x94>)
 800a162:	781b      	ldrb	r3, [r3, #0]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000252 	.word	0x20000252
 800a174:	20000160 	.word	0x20000160

0800a178 <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, uint16_t rh)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	460a      	mov	r2, r1
 800a182:	71fb      	strb	r3, [r7, #7]
 800a184:	4613      	mov	r3, r2
 800a186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a188:	4b16      	ldr	r3, [pc, #88]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2bef      	cmp	r3, #239	; 0xef
 800a18e:	d901      	bls.n	800a194 <CayenneLppAddRelativeHumidity+0x1c>
  {
    return 0;
 800a190:	2300      	movs	r3, #0
 800a192:	e022      	b.n	800a1da <CayenneLppAddRelativeHumidity+0x62>
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a194:	4b13      	ldr	r3, [pc, #76]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	b2d1      	uxtb	r1, r2
 800a19c:	4a11      	ldr	r2, [pc, #68]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a19e:	7011      	strb	r1, [r2, #0]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4a11      	ldr	r2, [pc, #68]	; (800a1e8 <CayenneLppAddRelativeHumidity+0x70>)
 800a1a4:	79fb      	ldrb	r3, [r7, #7]
 800a1a6:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 800a1a8:	4b0e      	ldr	r3, [pc, #56]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	b2d1      	uxtb	r1, r2
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a1b2:	7011      	strb	r1, [r2, #0]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <CayenneLppAddRelativeHumidity+0x70>)
 800a1b8:	2168      	movs	r1, #104	; 0x68
 800a1ba:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = rh * 2;
 800a1bc:	88bb      	ldrh	r3, [r7, #4]
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	1c59      	adds	r1, r3, #1
 800a1c6:	b2c8      	uxtb	r0, r1
 800a1c8:	4906      	ldr	r1, [pc, #24]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a1ca:	7008      	strb	r0, [r1, #0]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	0053      	lsls	r3, r2, #1
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <CayenneLppAddRelativeHumidity+0x70>)
 800a1d4:	545a      	strb	r2, [r3, r1]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
 800a1d6:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <CayenneLppAddRelativeHumidity+0x6c>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bc80      	pop	{r7}
 800a1e2:	4770      	bx	lr
 800a1e4:	20000252 	.word	0x20000252
 800a1e8:	20000160 	.word	0x20000160

0800a1ec <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, uint16_t hpa)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	460a      	mov	r2, r1
 800a1f6:	71fb      	strb	r3, [r7, #7]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800a1fc:	4b1f      	ldr	r3, [pc, #124]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2bee      	cmp	r3, #238	; 0xee
 800a202:	d901      	bls.n	800a208 <CayenneLppAddBarometricPressure+0x1c>
  {
    return 0;
 800a204:	2300      	movs	r3, #0
 800a206:	e033      	b.n	800a270 <CayenneLppAddBarometricPressure+0x84>
  }
  hpa *= 10;
 800a208:	88bb      	ldrh	r3, [r7, #4]
 800a20a:	461a      	mov	r2, r3
 800a20c:	0092      	lsls	r2, r2, #2
 800a20e:	4413      	add	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	80bb      	strh	r3, [r7, #4]

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800a214:	4b19      	ldr	r3, [pc, #100]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	b2d1      	uxtb	r1, r2
 800a21c:	4a17      	ldr	r2, [pc, #92]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a21e:	7011      	strb	r1, [r2, #0]
 800a220:	4619      	mov	r1, r3
 800a222:	4a17      	ldr	r2, [pc, #92]	; (800a280 <CayenneLppAddBarometricPressure+0x94>)
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	5453      	strb	r3, [r2, r1]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800a228:	4b14      	ldr	r3, [pc, #80]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	b2d1      	uxtb	r1, r2
 800a230:	4a12      	ldr	r2, [pc, #72]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a232:	7011      	strb	r1, [r2, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <CayenneLppAddBarometricPressure+0x94>)
 800a238:	2173      	movs	r1, #115	; 0x73
 800a23a:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa >> 8;
 800a23c:	88bb      	ldrh	r3, [r7, #4]
 800a23e:	0a1b      	lsrs	r3, r3, #8
 800a240:	b299      	uxth	r1, r3
 800a242:	4b0e      	ldr	r3, [pc, #56]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	b2d0      	uxtb	r0, r2
 800a24a:	4a0c      	ldr	r2, [pc, #48]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a24c:	7010      	strb	r0, [r2, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	b2c9      	uxtb	r1, r1
 800a252:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <CayenneLppAddBarometricPressure+0x94>)
 800a254:	5499      	strb	r1, [r3, r2]
  CayenneLppBuffer[CayenneLppCursor++] = hpa;
 800a256:	4b09      	ldr	r3, [pc, #36]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	b2d1      	uxtb	r1, r2
 800a25e:	4a07      	ldr	r2, [pc, #28]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a260:	7011      	strb	r1, [r2, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	88bb      	ldrh	r3, [r7, #4]
 800a266:	b2d9      	uxtb	r1, r3
 800a268:	4b05      	ldr	r3, [pc, #20]	; (800a280 <CayenneLppAddBarometricPressure+0x94>)
 800a26a:	5499      	strb	r1, [r3, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
 800a26c:	4b03      	ldr	r3, [pc, #12]	; (800a27c <CayenneLppAddBarometricPressure+0x90>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
}
 800a270:	4618      	mov	r0, r3
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	bc80      	pop	{r7}
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	20000252 	.word	0x20000252
 800a280:	20000160 	.word	0x20000160

0800a284 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a288:	f7f7 fb34 	bl	80018f4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a28c:	f000 f80a 	bl	800a2a4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a290:	bf00      	nop
 800a292:	bd80      	pop	{r7, pc}

0800a294 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	f00f fe92 	bl	8019fc4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a2a0:	bf00      	nop
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	f7f8 fa4e 	bl	800274c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f7f8 fa4b 	bl	800274c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a2b6:	2002      	movs	r0, #2
 800a2b8:	f7f8 fa48 	bl	800274c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a2bc:	2101      	movs	r1, #1
 800a2be:	2001      	movs	r0, #1
 800a2c0:	f7f8 faf4 	bl	80028ac <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4b43      	ldr	r3, [pc, #268]	; (800a3e0 <LoRaWAN_Init+0x13c>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	2002      	movs	r0, #2
 800a2d8:	f010 faa8 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9302      	str	r3, [sp, #8]
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4b3e      	ldr	r3, [pc, #248]	; (800a3e4 <LoRaWAN_Init+0x140>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2002      	movs	r0, #2
 800a2f0:	f010 fa9c 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9302      	str	r3, [sp, #8]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <LoRaWAN_Init+0x144>)
 800a302:	2200      	movs	r2, #0
 800a304:	2100      	movs	r1, #0
 800a306:	2002      	movs	r0, #2
 800a308:	f010 fa90 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	4b36      	ldr	r3, [pc, #216]	; (800a3ec <LoRaWAN_Init+0x148>)
 800a312:	2200      	movs	r2, #0
 800a314:	f04f 31ff 	mov.w	r1, #4294967295
 800a318:	4835      	ldr	r0, [pc, #212]	; (800a3f0 <LoRaWAN_Init+0x14c>)
 800a31a:	f00f ffd9 	bl	801a2d0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a31e:	2300      	movs	r3, #0
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	4b34      	ldr	r3, [pc, #208]	; (800a3f4 <LoRaWAN_Init+0x150>)
 800a324:	2200      	movs	r2, #0
 800a326:	f04f 31ff 	mov.w	r1, #4294967295
 800a32a:	4833      	ldr	r0, [pc, #204]	; (800a3f8 <LoRaWAN_Init+0x154>)
 800a32c:	f00f ffd0 	bl	801a2d0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a330:	2300      	movs	r3, #0
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4b31      	ldr	r3, [pc, #196]	; (800a3fc <LoRaWAN_Init+0x158>)
 800a336:	2201      	movs	r2, #1
 800a338:	f04f 31ff 	mov.w	r1, #4294967295
 800a33c:	4830      	ldr	r0, [pc, #192]	; (800a400 <LoRaWAN_Init+0x15c>)
 800a33e:	f00f ffc7 	bl	801a2d0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a342:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a346:	482a      	ldr	r0, [pc, #168]	; (800a3f0 <LoRaWAN_Init+0x14c>)
 800a348:	f010 f8d6 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a34c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a350:	4829      	ldr	r0, [pc, #164]	; (800a3f8 <LoRaWAN_Init+0x154>)
 800a352:	f010 f8d1 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a356:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a35a:	4829      	ldr	r0, [pc, #164]	; (800a400 <LoRaWAN_Init+0x15c>)
 800a35c:	f010 f8cc 	bl	801a4f8 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a360:	4a28      	ldr	r2, [pc, #160]	; (800a404 <LoRaWAN_Init+0x160>)
 800a362:	2100      	movs	r1, #0
 800a364:	2004      	movs	r0, #4
 800a366:	f00f ff11 	bl	801a18c <UTIL_SEQ_RegTask>
//  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a36a:	2100      	movs	r1, #0
 800a36c:	2004      	movs	r0, #4
 800a36e:	f00f ff2f 	bl	801a1d0 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a372:	4a25      	ldr	r2, [pc, #148]	; (800a408 <LoRaWAN_Init+0x164>)
 800a374:	2100      	movs	r1, #0
 800a376:	2001      	movs	r0, #1
 800a378:	f00f ff08 	bl	801a18c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a37c:	4a23      	ldr	r2, [pc, #140]	; (800a40c <LoRaWAN_Init+0x168>)
 800a37e:	2100      	movs	r1, #0
 800a380:	2002      	movs	r0, #2
 800a382:	f00f ff03 	bl	801a18c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a386:	f000 fa97 	bl	800a8b8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a38a:	4821      	ldr	r0, [pc, #132]	; (800a410 <LoRaWAN_Init+0x16c>)
 800a38c:	f001 fefa 	bl	800c184 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a390:	4820      	ldr	r0, [pc, #128]	; (800a414 <LoRaWAN_Init+0x170>)
 800a392:	f001 ff43 	bl	800c21c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a396:	481a      	ldr	r0, [pc, #104]	; (800a400 <LoRaWAN_Init+0x15c>)
 800a398:	f00f ffd0 	bl	801a33c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a39c:	4b1e      	ldr	r3, [pc, #120]	; (800a418 <LoRaWAN_Init+0x174>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f002 f871 	bl	800c488 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a3a6:	4b1d      	ldr	r3, [pc, #116]	; (800a41c <LoRaWAN_Init+0x178>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d110      	bne.n	800a3d0 <LoRaWAN_Init+0x12c>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4b1b      	ldr	r3, [pc, #108]	; (800a420 <LoRaWAN_Init+0x17c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a3ba:	481a      	ldr	r0, [pc, #104]	; (800a424 <LoRaWAN_Init+0x180>)
 800a3bc:	f00f ff88 	bl	801a2d0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a3c0:	4919      	ldr	r1, [pc, #100]	; (800a428 <LoRaWAN_Init+0x184>)
 800a3c2:	4818      	ldr	r0, [pc, #96]	; (800a424 <LoRaWAN_Init+0x180>)
 800a3c4:	f010 f898 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a3c8:	4816      	ldr	r0, [pc, #88]	; (800a424 <LoRaWAN_Init+0x180>)
 800a3ca:	f00f ffb7 	bl	801a33c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a3ce:	e003      	b.n	800a3d8 <LoRaWAN_Init+0x134>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f8 fa6a 	bl	80028ac <BSP_PB_Init>
}
 800a3d8:	bf00      	nop
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	0801afcc 	.word	0x0801afcc
 800a3e4:	0801afec 	.word	0x0801afec
 800a3e8:	0801b00c 	.word	0x0801b00c
 800a3ec:	0800a729 	.word	0x0800a729
 800a3f0:	20000360 	.word	0x20000360
 800a3f4:	0800a73f 	.word	0x0800a73f
 800a3f8:	20000378 	.word	0x20000378
 800a3fc:	0800a755 	.word	0x0800a755
 800a400:	20000390 	.word	0x20000390
 800a404:	08000e51 	.word	0x08000e51
 800a408:	0800c475 	.word	0x0800c475
 800a40c:	0800a5a5 	.word	0x0800a5a5
 800a410:	2000003c 	.word	0x2000003c
 800a414:	20000070 	.word	0x20000070
 800a418:	20000038 	.word	0x20000038
 800a41c:	20000253 	.word	0x20000253
 800a420:	0800a705 	.word	0x0800a705
 800a424:	20000254 	.word	0x20000254
 800a428:	000927c0 	.word	0x000927c0

0800a42c <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a436:	88fb      	ldrh	r3, [r7, #6]
 800a438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a43c:	d007      	beq.n	800a44e <HAL_GPIO_EXTI_Callback+0x22>
 800a43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a442:	dc09      	bgt.n	800a458 <HAL_GPIO_EXTI_Callback+0x2c>
 800a444:	2b02      	cmp	r3, #2
 800a446:	d009      	beq.n	800a45c <HAL_GPIO_EXTI_Callback+0x30>
 800a448:	2b40      	cmp	r3, #64	; 0x40
 800a44a:	d009      	beq.n	800a460 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a44c:	e004      	b.n	800a458 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a44e:	2100      	movs	r1, #0
 800a450:	2002      	movs	r0, #2
 800a452:	f00f febd 	bl	801a1d0 <UTIL_SEQ_SetTask>
      break;
 800a456:	e004      	b.n	800a462 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a458:	bf00      	nop
 800a45a:	e002      	b.n	800a462 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a45c:	bf00      	nop
 800a45e:	e000      	b.n	800a462 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a460:	bf00      	nop
  }
}
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
	...

0800a46c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af06      	add	r7, sp, #24
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d102      	bne.n	800a482 <OnRxData+0x16>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d078      	beq.n	800a574 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a482:	2000      	movs	r0, #0
 800a484:	f7f8 f9a6 	bl	80027d4 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a488:	483f      	ldr	r0, [pc, #252]	; (800a588 <OnRxData+0x11c>)
 800a48a:	f00f ff57 	bl	801a33c <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a48e:	4b3f      	ldr	r3, [pc, #252]	; (800a58c <OnRxData+0x120>)
 800a490:	2200      	movs	r2, #0
 800a492:	2100      	movs	r1, #0
 800a494:	2002      	movs	r0, #2
 800a496:	f010 f9c9 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4a3a      	ldr	r2, [pc, #232]	; (800a590 <OnRxData+0x124>)
 800a4a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	7809      	ldrb	r1, [r1, #0]
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a4c8:	9105      	str	r1, [sp, #20]
 800a4ca:	9504      	str	r5, [sp, #16]
 800a4cc:	9403      	str	r4, [sp, #12]
 800a4ce:	9002      	str	r0, [sp, #8]
 800a4d0:	9201      	str	r2, [sp, #4]
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	4b2f      	ldr	r3, [pc, #188]	; (800a594 <OnRxData+0x128>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2100      	movs	r1, #0
 800a4da:	2003      	movs	r0, #3
 800a4dc:	f010 f9a6 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d021      	beq.n	800a52c <OnRxData+0xc0>
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d145      	bne.n	800a578 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d117      	bne.n	800a524 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d00e      	beq.n	800a51c <OnRxData+0xb0>
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	dc12      	bgt.n	800a528 <OnRxData+0xbc>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d002      	beq.n	800a50c <OnRxData+0xa0>
 800a506:	2b01      	cmp	r3, #1
 800a508:	d004      	beq.n	800a514 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a50a:	e00d      	b.n	800a528 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a50c:	2000      	movs	r0, #0
 800a50e:	f002 f91d 	bl	800c74c <LmHandlerRequestClass>
              break;
 800a512:	e00a      	b.n	800a52a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a514:	2001      	movs	r0, #1
 800a516:	f002 f919 	bl	800c74c <LmHandlerRequestClass>
              break;
 800a51a:	e006      	b.n	800a52a <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a51c:	2002      	movs	r0, #2
 800a51e:	f002 f915 	bl	800c74c <LmHandlerRequestClass>
              break;
 800a522:	e002      	b.n	800a52a <OnRxData+0xbe>
          }
        }
 800a524:	bf00      	nop
 800a526:	e02a      	b.n	800a57e <OnRxData+0x112>
              break;
 800a528:	bf00      	nop
        break;
 800a52a:	e028      	b.n	800a57e <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d123      	bne.n	800a57c <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	4b15      	ldr	r3, [pc, #84]	; (800a598 <OnRxData+0x12c>)
 800a542:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a544:	4b14      	ldr	r3, [pc, #80]	; (800a598 <OnRxData+0x12c>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d109      	bne.n	800a560 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a54c:	4b13      	ldr	r3, [pc, #76]	; (800a59c <OnRxData+0x130>)
 800a54e:	2200      	movs	r2, #0
 800a550:	2100      	movs	r1, #0
 800a552:	2003      	movs	r0, #3
 800a554:	f010 f96a 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a558:	2002      	movs	r0, #2
 800a55a:	f7f8 f95f 	bl	800281c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a55e:	e00d      	b.n	800a57c <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <OnRxData+0x134>)
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	2003      	movs	r0, #3
 800a568:	f010 f960 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a56c:	2002      	movs	r0, #2
 800a56e:	f7f8 f931 	bl	80027d4 <BSP_LED_On>
        break;
 800a572:	e003      	b.n	800a57c <OnRxData+0x110>

      default:

        break;
    }
  }
 800a574:	bf00      	nop
 800a576:	e002      	b.n	800a57e <OnRxData+0x112>
        break;
 800a578:	bf00      	nop
 800a57a:	e000      	b.n	800a57e <OnRxData+0x112>
        break;
 800a57c:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a57e:	bf00      	nop
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bdb0      	pop	{r4, r5, r7, pc}
 800a586:	bf00      	nop
 800a588:	20000378 	.word	0x20000378
 800a58c:	0801b02c 	.word	0x0801b02c
 800a590:	20000088 	.word	0x20000088
 800a594:	0801b060 	.word	0x0801b060
 800a598:	2000035e 	.word	0x2000035e
 800a59c:	0801b0a8 	.word	0x0801b0a8
 800a5a0:	0801b0b4 	.word	0x0801b0b4

0800a5a4 <SendTxData>:

static void SendTxData(void)
{
 800a5a4:	b590      	push	{r4, r7, lr}
 800a5a6:	b08d      	sub	sp, #52	; 0x34
 800a5a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t temperature = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  int32_t latitude = 0;
  int32_t longitude = 0;
  uint16_t altitudeGps = 0;
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a5bc:	f107 0308 	add.w	r3, r7, #8
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7f7 fbf9 	bl	8001db8 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a5c6:	f7f6 fd5f 	bl	8001088 <SYS_GetTemperatureLevel>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	121b      	asrs	r3, r3, #8
 800a5ce:	84bb      	strh	r3, [r7, #36]	; 0x24
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4944      	ldr	r1, [pc, #272]	; (800a6e4 <SendTxData+0x140>)
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f6 f951 	bl	800087c <__aeabi_fmul>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4942      	ldr	r1, [pc, #264]	; (800a6e8 <SendTxData+0x144>)
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f6 fa00 	bl	80009e4 <__aeabi_fdiv>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f6 fa98 	bl	8000b1c <__aeabi_f2uiz>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	84fb      	strh	r3, [r7, #38]	; 0x26
//  pressure = (uint16_t) Sensor_Data();

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a5f0:	4b3e      	ldr	r3, [pc, #248]	; (800a6ec <SendTxData+0x148>)
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	701a      	strb	r2, [r3, #0]

#ifdef CAYENNE_LPP
  CayenneLppReset();
 800a5f6:	f7ff fcd5 	bl	8009fa4 <CayenneLppReset>
  CayenneLppAddBarometricPressure(channel++, pressure);
 800a5fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a604:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fdef 	bl	800a1ec <CayenneLppAddBarometricPressure>
  CayenneLppAddTemperature(channel++, temperature);
 800a60e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a618:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a61c:	4611      	mov	r1, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fd5c 	bl	800a0dc <CayenneLppAddTemperature>
  CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 800a624:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800a628:	1c63      	adds	r3, r4, #1
 800a62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	4618      	mov	r0, r3
 800a632:	f7f6 fa73 	bl	8000b1c <__aeabi_f2uiz>
 800a636:	4603      	mov	r3, r0
 800a638:	b29b      	uxth	r3, r3
 800a63a:	4619      	mov	r1, r3
 800a63c:	4620      	mov	r0, r4
 800a63e:	f7ff fd9b 	bl	800a178 <CayenneLppAddRelativeHumidity>

  if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 800a642:	4b2b      	ldr	r3, [pc, #172]	; (800a6f0 <SendTxData+0x14c>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b08      	cmp	r3, #8
 800a648:	d01e      	beq.n	800a688 <SendTxData+0xe4>
 800a64a:	4b29      	ldr	r3, [pc, #164]	; (800a6f0 <SendTxData+0x14c>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d01a      	beq.n	800a688 <SendTxData+0xe4>
      && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 800a652:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <SendTxData+0x14c>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d016      	beq.n	800a688 <SendTxData+0xe4>
  {
    CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 800a65a:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 800a65e:	1c63      	adds	r3, r4, #1
 800a660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a664:	f7f7 f972 	bl	800194c <GetBatteryLevel>
 800a668:	4603      	mov	r3, r0
 800a66a:	4619      	mov	r1, r3
 800a66c:	4620      	mov	r0, r4
 800a66e:	f7ff fcc5 	bl	8009ffc <CayenneLppAddDigitalInput>
    CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 800a672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 800a67c:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <SendTxData+0x150>)
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	4611      	mov	r1, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff fcf2 	bl	800a06c <CayenneLppAddDigitalOutput>
  }

  CayenneLppCopy(AppData.Buffer);
 800a688:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <SendTxData+0x148>)
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fc9f 	bl	8009fd0 <CayenneLppCopy>
  AppData.BufferSize = CayenneLppGetSize();
 800a692:	f7ff fc93 	bl	8009fbc <CayenneLppGetSize>
 800a696:	4603      	mov	r3, r0
 800a698:	461a      	mov	r2, r3
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <SendTxData+0x148>)
 800a69c:	705a      	strb	r2, [r3, #1]
  }

  AppData.BufferSize = i;
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a69e:	1d3a      	adds	r2, r7, #4
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4811      	ldr	r0, [pc, #68]	; (800a6ec <SendTxData+0x148>)
 800a6a6:	f001 ff65 	bl	800c574 <LmHandlerSend>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <SendTxData+0x11a>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a6b0:	4b11      	ldr	r3, [pc, #68]	; (800a6f8 <SendTxData+0x154>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f010 f8b8 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a6bc:	e00e      	b.n	800a6dc <SendTxData+0x138>
  else if (nextTxIn > 0)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <SendTxData+0x138>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <SendTxData+0x158>)
 800a6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6cc:	099b      	lsrs	r3, r3, #6
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <SendTxData+0x15c>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	f010 f8a8 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800a6dc:	bf00      	nop
 800a6de:	372c      	adds	r7, #44	; 0x2c
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd90      	pop	{r4, r7, pc}
 800a6e4:	42c80000 	.word	0x42c80000
 800a6e8:	41200000 	.word	0x41200000
 800a6ec:	20000080 	.word	0x20000080
 800a6f0:	20000070 	.word	0x20000070
 800a6f4:	2000035e 	.word	0x2000035e
 800a6f8:	0801b0c0 	.word	0x0801b0c0
 800a6fc:	10624dd3 	.word	0x10624dd3
 800a700:	0801b0d0 	.word	0x0801b0d0

0800a704 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a70c:	2100      	movs	r1, #0
 800a70e:	2002      	movs	r0, #2
 800a710:	f00f fd5e 	bl	801a1d0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a714:	4803      	ldr	r0, [pc, #12]	; (800a724 <OnTxTimerEvent+0x20>)
 800a716:	f00f fe11 	bl	801a33c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000254 	.word	0x20000254

0800a728 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a730:	2001      	movs	r0, #1
 800a732:	f7f8 f873 	bl	800281c <BSP_LED_Off>
}
 800a736:	bf00      	nop
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b082      	sub	sp, #8
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a746:	2000      	movs	r0, #0
 800a748:	f7f8 f868 	bl	800281c <BSP_LED_Off>
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a75c:	2002      	movs	r0, #2
 800a75e:	f7f8 f881 	bl	8002864 <BSP_LED_Toggle>
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af04      	add	r7, sp, #16
 800a772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d044      	beq.n	800a804 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d040      	beq.n	800a804 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a782:	2001      	movs	r0, #1
 800a784:	f7f8 f826 	bl	80027d4 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a788:	4820      	ldr	r0, [pc, #128]	; (800a80c <OnTxData+0xa0>)
 800a78a:	f00f fdd7 	bl	801a33c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a78e:	4b20      	ldr	r3, [pc, #128]	; (800a810 <OnTxData+0xa4>)
 800a790:	2200      	movs	r2, #0
 800a792:	2100      	movs	r1, #0
 800a794:	2002      	movs	r0, #2
 800a796:	f010 f849 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	7b12      	ldrb	r2, [r2, #12]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a7b2:	9203      	str	r2, [sp, #12]
 800a7b4:	9002      	str	r0, [sp, #8]
 800a7b6:	9101      	str	r1, [sp, #4]
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	4b16      	ldr	r3, [pc, #88]	; (800a814 <OnTxData+0xa8>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2100      	movs	r1, #0
 800a7c0:	2003      	movs	r0, #3
 800a7c2:	f010 f833 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a7c6:	4b14      	ldr	r3, [pc, #80]	; (800a818 <OnTxData+0xac>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	2003      	movs	r0, #3
 800a7ce:	f010 f82d 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	789b      	ldrb	r3, [r3, #2]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d10e      	bne.n	800a7f8 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	78db      	ldrb	r3, [r3, #3]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <OnTxData+0x7a>
 800a7e2:	4b0e      	ldr	r3, [pc, #56]	; (800a81c <OnTxData+0xb0>)
 800a7e4:	e000      	b.n	800a7e8 <OnTxData+0x7c>
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <OnTxData+0xb4>)
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <OnTxData+0xb8>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	2003      	movs	r0, #3
 800a7f2:	f010 f81b 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a7f6:	e005      	b.n	800a804 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a7f8:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <OnTxData+0xbc>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	2003      	movs	r0, #3
 800a800:	f010 f814 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20000360 	.word	0x20000360
 800a810:	0801b0f0 	.word	0x0801b0f0
 800a814:	0801b124 	.word	0x0801b124
 800a818:	0801b158 	.word	0x0801b158
 800a81c:	0801b168 	.word	0x0801b168
 800a820:	0801b16c 	.word	0x0801b16c
 800a824:	0801b174 	.word	0x0801b174
 800a828:	0801b188 	.word	0x0801b188

0800a82c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d028      	beq.n	800a88c <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d11d      	bne.n	800a880 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a844:	4813      	ldr	r0, [pc, #76]	; (800a894 <OnJoinRequest+0x68>)
 800a846:	f00f fde7 	bl	801a418 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a84a:	2002      	movs	r0, #2
 800a84c:	f7f7 ffe6 	bl	800281c <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <OnJoinRequest+0x6c>)
 800a852:	2200      	movs	r2, #0
 800a854:	2100      	movs	r1, #0
 800a856:	2002      	movs	r0, #2
 800a858:	f00f ffe8 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d106      	bne.n	800a872 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <OnJoinRequest+0x70>)
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	2002      	movs	r0, #2
 800a86c:	f00f ffde 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a870:	e00c      	b.n	800a88c <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <OnJoinRequest+0x74>)
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	2002      	movs	r0, #2
 800a87a:	f00f ffd7 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800a87e:	e005      	b.n	800a88c <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a880:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <OnJoinRequest+0x78>)
 800a882:	2200      	movs	r2, #0
 800a884:	2100      	movs	r1, #0
 800a886:	2002      	movs	r0, #2
 800a888:	f00f ffd0 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20000390 	.word	0x20000390
 800a898:	0801b198 	.word	0x0801b198
 800a89c:	0801b1b0 	.word	0x0801b1b0
 800a8a0:	0801b1d0 	.word	0x0801b1d0
 800a8a4:	0801b1f0 	.word	0x0801b1f0

0800a8a8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	f00f fc8e 	bl	801a1d0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a8b4:	bf00      	nop
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a8bc:	4b15      	ldr	r3, [pc, #84]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a8c2:	4b14      	ldr	r3, [pc, #80]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a8c8:	4b12      	ldr	r3, [pc, #72]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a8ce:	4b11      	ldr	r3, [pc, #68]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f043 0320 	orr.w	r3, r3, #32
 800a8dc:	4a0d      	ldr	r2, [pc, #52]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8de:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <LoraInfo_Init+0x5c>)
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10c      	bne.n	800a902 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a8e8:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <LoraInfo_Init+0x60>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	f00f ff9c 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a8f4:	bf00      	nop
 800a8f6:	f00f ff87 	bl	801a808 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d1fa      	bne.n	800a8f6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a900:	e7fe      	b.n	800a900 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a902:	4b04      	ldr	r3, [pc, #16]	; (800a914 <LoraInfo_Init+0x5c>)
 800a904:	2200      	movs	r2, #0
 800a906:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <LoraInfo_Init+0x5c>)
 800a90a:	2203      	movs	r2, #3
 800a90c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a90e:	bf00      	nop
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200003a8 	.word	0x200003a8
 800a918:	0801b248 	.word	0x0801b248

0800a91c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a91c:	b480      	push	{r7}
 800a91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a920:	4b02      	ldr	r3, [pc, #8]	; (800a92c <LoraInfo_GetPtr+0x10>)
}
 800a922:	4618      	mov	r0, r3
 800a924:	46bd      	mov	sp, r7
 800a926:	bc80      	pop	{r7}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	200003a8 	.word	0x200003a8

0800a930 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a934:	f7f8 f84b 	bl	80029ce <BSP_RADIO_Init>
 800a938:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	4603      	mov	r3, r0
 800a946:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f8 f870 	bl	8002a30 <BSP_RADIO_ConfigRFSwitch>
 800a950:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a952:	4618      	mov	r0, r3
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a95e:	f7f8 f8b5 	bl	8002acc <BSP_RADIO_GetTxConfig>
 800a962:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}

0800a968 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a96c:	f7f8 f8b5 	bl	8002ada <BSP_RADIO_IsTCXO>
 800a970:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a972:	4618      	mov	r0, r3
 800a974:	bd80      	pop	{r7, pc}

0800a976 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800a97a:	f7f8 f8b5 	bl	8002ae8 <BSP_RADIO_IsDCDC>
 800a97e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a980:	4618      	mov	r0, r3
 800a982:	bd80      	pop	{r7, pc}

0800a984 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	33f1      	adds	r3, #241	; 0xf1
 800a990:	2210      	movs	r2, #16
 800a992:	2100      	movs	r1, #0
 800a994:	4618      	mov	r0, r3
 800a996:	f00b fd43 	bl	8016420 <memset1>
    ctx->M_n = 0;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	22f0      	movs	r2, #240	; 0xf0
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f00b fd39 	bl	8016420 <memset1>
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	2110      	movs	r1, #16
 800a9c6:	6838      	ldr	r0, [r7, #0]
 800a9c8:	f000 fe60 	bl	800b68c <lorawan_aes_set_key>
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08c      	sub	sp, #48	; 0x30
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 80a1 	beq.w	800ab2e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9f2:	f1c3 0310 	rsb	r3, r3, #16
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	bf28      	it	cs
 800a9fc:	4613      	movcs	r3, r2
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f203 1201 	addw	r2, r3, #257	; 0x101
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa0c:	4413      	add	r3, r2
 800aa0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa10:	b292      	uxth	r2, r2
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f00b fcc8 	bl	80163aa <memcpy1>
        ctx->M_n += mlen;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa30:	2b0f      	cmp	r3, #15
 800aa32:	f240 808d 	bls.w	800ab50 <AES_CMAC_Update+0x17c>
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	f000 8088 	beq.w	800ab50 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aa40:	2300      	movs	r3, #0
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa44:	e015      	b.n	800aa72 <AES_CMAC_Update+0x9e>
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4a:	4413      	add	r3, r2
 800aa4c:	33f1      	adds	r3, #241	; 0xf1
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	68f9      	ldr	r1, [r7, #12]
 800aa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa54:	440b      	add	r3, r1
 800aa56:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	4053      	eors	r3, r2
 800aa5e:	b2d9      	uxtb	r1, r3
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	4413      	add	r3, r2
 800aa66:	33f1      	adds	r3, #241	; 0xf1
 800aa68:	460a      	mov	r2, r1
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6e:	3301      	adds	r3, #1
 800aa70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	2b0f      	cmp	r3, #15
 800aa76:	dde6      	ble.n	800aa46 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aa7e:	f107 0314 	add.w	r3, r7, #20
 800aa82:	2210      	movs	r2, #16
 800aa84:	4618      	mov	r0, r3
 800aa86:	f00b fc90 	bl	80163aa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	f107 0114 	add.w	r1, r7, #20
 800aa90:	f107 0314 	add.w	r3, r7, #20
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fed7 	bl	800b848 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	33f1      	adds	r3, #241	; 0xf1
 800aa9e:	f107 0114 	add.w	r1, r7, #20
 800aaa2:	2210      	movs	r2, #16
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f00b fc80 	bl	80163aa <memcpy1>

        data += mlen;
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaae:	4413      	add	r3, r2
 800aab0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800aaba:	e038      	b.n	800ab2e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800aabc:	2300      	movs	r3, #0
 800aabe:	62bb      	str	r3, [r7, #40]	; 0x28
 800aac0:	e013      	b.n	800aaea <AES_CMAC_Update+0x116>
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	4413      	add	r3, r2
 800aac8:	33f1      	adds	r3, #241	; 0xf1
 800aaca:	781a      	ldrb	r2, [r3, #0]
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	440b      	add	r3, r1
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	4053      	eors	r3, r2
 800aad6:	b2d9      	uxtb	r1, r3
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	4413      	add	r3, r2
 800aade:	33f1      	adds	r3, #241	; 0xf1
 800aae0:	460a      	mov	r2, r1
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	3301      	adds	r3, #1
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	2b0f      	cmp	r3, #15
 800aaee:	dde8      	ble.n	800aac2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aaf6:	f107 0314 	add.w	r3, r7, #20
 800aafa:	2210      	movs	r2, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	f00b fc54 	bl	80163aa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	f107 0114 	add.w	r1, r7, #20
 800ab08:	f107 0314 	add.w	r3, r7, #20
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fe9b 	bl	800b848 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	33f1      	adds	r3, #241	; 0xf1
 800ab16:	f107 0114 	add.w	r1, r7, #20
 800ab1a:	2210      	movs	r2, #16
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f00b fc44 	bl	80163aa <memcpy1>

        data += 16;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	3310      	adds	r3, #16
 800ab26:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3b10      	subs	r3, #16
 800ab2c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	d8c3      	bhi.n	800aabc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	b292      	uxth	r2, r2
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f00b fc32 	bl	80163aa <memcpy1>
    ctx->M_n = len;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ab4e:	e000      	b.n	800ab52 <AES_CMAC_Update+0x17e>
            return;
 800ab50:	bf00      	nop
}
 800ab52:	3730      	adds	r7, #48	; 0x30
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b092      	sub	sp, #72	; 0x48
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ab62:	f107 031c 	add.w	r3, r7, #28
 800ab66:	2210      	movs	r2, #16
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f00b fc58 	bl	8016420 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	f107 011c 	add.w	r1, r7, #28
 800ab76:	f107 031c 	add.w	r3, r7, #28
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fe64 	bl	800b848 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ab80:	7f3b      	ldrb	r3, [r7, #28]
 800ab82:	b25b      	sxtb	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	da31      	bge.n	800abec <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ab88:	2300      	movs	r3, #0
 800ab8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab8c:	e01c      	b.n	800abc8 <AES_CMAC_Final+0x70>
 800ab8e:	f107 021c 	add.w	r2, r7, #28
 800ab92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab94:	4413      	add	r3, r2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	b25a      	sxtb	r2, r3
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9e:	3301      	adds	r3, #1
 800aba0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aba4:	440b      	add	r3, r1
 800aba6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800abaa:	09db      	lsrs	r3, r3, #7
 800abac:	b2db      	uxtb	r3, r3
 800abae:	b25b      	sxtb	r3, r3
 800abb0:	4313      	orrs	r3, r2
 800abb2:	b25b      	sxtb	r3, r3
 800abb4:	b2d9      	uxtb	r1, r3
 800abb6:	f107 021c 	add.w	r2, r7, #28
 800abba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abbc:	4413      	add	r3, r2
 800abbe:	460a      	mov	r2, r1
 800abc0:	701a      	strb	r2, [r3, #0]
 800abc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc4:	3301      	adds	r3, #1
 800abc6:	647b      	str	r3, [r7, #68]	; 0x44
 800abc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abca:	2b0e      	cmp	r3, #14
 800abcc:	dddf      	ble.n	800ab8e <AES_CMAC_Final+0x36>
 800abce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800abda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800abde:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800abe2:	43db      	mvns	r3, r3
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abea:	e028      	b.n	800ac3e <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800abec:	2300      	movs	r3, #0
 800abee:	643b      	str	r3, [r7, #64]	; 0x40
 800abf0:	e01c      	b.n	800ac2c <AES_CMAC_Final+0xd4>
 800abf2:	f107 021c 	add.w	r2, r7, #28
 800abf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf8:	4413      	add	r3, r2
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	b25a      	sxtb	r2, r3
 800ac00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac02:	3301      	adds	r3, #1
 800ac04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac08:	440b      	add	r3, r1
 800ac0a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac0e:	09db      	lsrs	r3, r3, #7
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	b25b      	sxtb	r3, r3
 800ac14:	4313      	orrs	r3, r2
 800ac16:	b25b      	sxtb	r3, r3
 800ac18:	b2d9      	uxtb	r1, r3
 800ac1a:	f107 021c 	add.w	r2, r7, #28
 800ac1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac20:	4413      	add	r3, r2
 800ac22:	460a      	mov	r2, r1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac28:	3301      	adds	r3, #1
 800ac2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac2e:	2b0e      	cmp	r3, #14
 800ac30:	dddf      	ble.n	800abf2 <AES_CMAC_Final+0x9a>
 800ac32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ac44:	2b10      	cmp	r3, #16
 800ac46:	d11d      	bne.n	800ac84 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ac48:	2300      	movs	r3, #0
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac4c:	e016      	b.n	800ac7c <AES_CMAC_Final+0x124>
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac52:	4413      	add	r3, r2
 800ac54:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	f107 011c 	add.w	r1, r7, #28
 800ac5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac60:	440b      	add	r3, r1
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	4053      	eors	r3, r2
 800ac66:	b2d9      	uxtb	r1, r3
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ac72:	460a      	mov	r2, r1
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac78:	3301      	adds	r3, #1
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	2b0f      	cmp	r3, #15
 800ac80:	dde5      	ble.n	800ac4e <AES_CMAC_Final+0xf6>
 800ac82:	e098      	b.n	800adb6 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ac84:	7f3b      	ldrb	r3, [r7, #28]
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	da31      	bge.n	800acf0 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac90:	e01c      	b.n	800accc <AES_CMAC_Final+0x174>
 800ac92:	f107 021c 	add.w	r2, r7, #28
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	4413      	add	r3, r2
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	b25a      	sxtb	r2, r3
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	3301      	adds	r3, #1
 800aca4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800aca8:	440b      	add	r3, r1
 800acaa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acae:	09db      	lsrs	r3, r3, #7
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	b25b      	sxtb	r3, r3
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b25b      	sxtb	r3, r3
 800acb8:	b2d9      	uxtb	r1, r3
 800acba:	f107 021c 	add.w	r2, r7, #28
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	4413      	add	r3, r2
 800acc2:	460a      	mov	r2, r1
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	3301      	adds	r3, #1
 800acca:	63bb      	str	r3, [r7, #56]	; 0x38
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	2b0e      	cmp	r3, #14
 800acd0:	dddf      	ble.n	800ac92 <AES_CMAC_Final+0x13a>
 800acd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800acde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ace2:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ace6:	43db      	mvns	r3, r3
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acee:	e028      	b.n	800ad42 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800acf0:	2300      	movs	r3, #0
 800acf2:	637b      	str	r3, [r7, #52]	; 0x34
 800acf4:	e01c      	b.n	800ad30 <AES_CMAC_Final+0x1d8>
 800acf6:	f107 021c 	add.w	r2, r7, #28
 800acfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfc:	4413      	add	r3, r2
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad06:	3301      	adds	r3, #1
 800ad08:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad0c:	440b      	add	r3, r1
 800ad0e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad12:	09db      	lsrs	r3, r3, #7
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	b25b      	sxtb	r3, r3
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	b25b      	sxtb	r3, r3
 800ad1c:	b2d9      	uxtb	r1, r3
 800ad1e:	f107 021c 	add.w	r2, r7, #28
 800ad22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad24:	4413      	add	r3, r2
 800ad26:	460a      	mov	r2, r1
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	2b0e      	cmp	r3, #14
 800ad34:	dddf      	ble.n	800acf6 <AES_CMAC_Final+0x19e>
 800ad36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	2280      	movs	r2, #128	; 0x80
 800ad4e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad52:	e007      	b.n	800ad64 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ad78:	2b0f      	cmp	r3, #15
 800ad7a:	d9eb      	bls.n	800ad54 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad80:	e016      	b.n	800adb0 <AES_CMAC_Final+0x258>
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	4413      	add	r3, r2
 800ad88:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	f107 011c 	add.w	r1, r7, #28
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	440b      	add	r3, r1
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	4053      	eors	r3, r2
 800ad9a:	b2d9      	uxtb	r1, r3
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	4413      	add	r3, r2
 800ada2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ada6:	460a      	mov	r2, r1
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	3301      	adds	r3, #1
 800adae:	633b      	str	r3, [r7, #48]	; 0x30
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	2b0f      	cmp	r3, #15
 800adb4:	dde5      	ble.n	800ad82 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800adb6:	2300      	movs	r3, #0
 800adb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adba:	e015      	b.n	800ade8 <AES_CMAC_Final+0x290>
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	4413      	add	r3, r2
 800adc2:	33f1      	adds	r3, #241	; 0xf1
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	440b      	add	r3, r1
 800adcc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	4053      	eors	r3, r2
 800add4:	b2d9      	uxtb	r1, r3
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	4413      	add	r3, r2
 800addc:	33f1      	adds	r3, #241	; 0xf1
 800adde:	460a      	mov	r2, r1
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	3301      	adds	r3, #1
 800ade6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	2b0f      	cmp	r3, #15
 800adec:	dde6      	ble.n	800adbc <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	2210      	movs	r2, #16
 800adfa:	4618      	mov	r0, r3
 800adfc:	f00b fad5 	bl	80163aa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	f107 030c 	add.w	r3, r7, #12
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fd1d 	bl	800b848 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ae0e:	f107 031c 	add.w	r3, r7, #28
 800ae12:	2210      	movs	r2, #16
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f00b fb02 	bl	8016420 <memset1>
}
 800ae1c:	bf00      	nop
 800ae1e:	3748      	adds	r7, #72	; 0x48
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	7852      	ldrb	r2, [r2, #1]
 800ae3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3302      	adds	r3, #2
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	7892      	ldrb	r2, [r2, #2]
 800ae48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3303      	adds	r3, #3
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	78d2      	ldrb	r2, [r2, #3]
 800ae52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	3304      	adds	r3, #4
 800ae58:	683a      	ldr	r2, [r7, #0]
 800ae5a:	7912      	ldrb	r2, [r2, #4]
 800ae5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3305      	adds	r3, #5
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	7952      	ldrb	r2, [r2, #5]
 800ae66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3306      	adds	r3, #6
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	7992      	ldrb	r2, [r2, #6]
 800ae70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3307      	adds	r3, #7
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	79d2      	ldrb	r2, [r2, #7]
 800ae7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	7a12      	ldrb	r2, [r2, #8]
 800ae84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3309      	adds	r3, #9
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	7a52      	ldrb	r2, [r2, #9]
 800ae8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	330a      	adds	r3, #10
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	7a92      	ldrb	r2, [r2, #10]
 800ae98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	330b      	adds	r3, #11
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	7ad2      	ldrb	r2, [r2, #11]
 800aea2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	330c      	adds	r3, #12
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	7b12      	ldrb	r2, [r2, #12]
 800aeac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	330d      	adds	r3, #13
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	7b52      	ldrb	r2, [r2, #13]
 800aeb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	330e      	adds	r3, #14
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	7b92      	ldrb	r2, [r2, #14]
 800aec0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	330f      	adds	r3, #15
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	7bd2      	ldrb	r2, [r2, #15]
 800aeca:	701a      	strb	r2, [r3, #0]
#endif
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bc80      	pop	{r7}
 800aed4:	4770      	bx	lr

0800aed6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aed6:	b480      	push	{r7}
 800aed8:	b085      	sub	sp, #20
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	4613      	mov	r3, r2
 800aee2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aee4:	e007      	b.n	800aef6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	1c53      	adds	r3, r2, #1
 800aeea:	60bb      	str	r3, [r7, #8]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	1c59      	adds	r1, r3, #1
 800aef0:	60f9      	str	r1, [r7, #12]
 800aef2:	7812      	ldrb	r2, [r2, #0]
 800aef4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	71fa      	strb	r2, [r7, #7]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f2      	bne.n	800aee6 <copy_block_nn+0x10>
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr

0800af0c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	4053      	eors	r3, r2
 800af20:	b2da      	uxtb	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3301      	adds	r3, #1
 800af2a:	7819      	ldrb	r1, [r3, #0]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	3301      	adds	r3, #1
 800af30:	781a      	ldrb	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3301      	adds	r3, #1
 800af36:	404a      	eors	r2, r1
 800af38:	b2d2      	uxtb	r2, r2
 800af3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3302      	adds	r3, #2
 800af40:	7819      	ldrb	r1, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	3302      	adds	r3, #2
 800af46:	781a      	ldrb	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3302      	adds	r3, #2
 800af4c:	404a      	eors	r2, r1
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3303      	adds	r3, #3
 800af56:	7819      	ldrb	r1, [r3, #0]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	3303      	adds	r3, #3
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3303      	adds	r3, #3
 800af62:	404a      	eors	r2, r1
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3304      	adds	r3, #4
 800af6c:	7819      	ldrb	r1, [r3, #0]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	3304      	adds	r3, #4
 800af72:	781a      	ldrb	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3304      	adds	r3, #4
 800af78:	404a      	eors	r2, r1
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3305      	adds	r3, #5
 800af82:	7819      	ldrb	r1, [r3, #0]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3305      	adds	r3, #5
 800af88:	781a      	ldrb	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3305      	adds	r3, #5
 800af8e:	404a      	eors	r2, r1
 800af90:	b2d2      	uxtb	r2, r2
 800af92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3306      	adds	r3, #6
 800af98:	7819      	ldrb	r1, [r3, #0]
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	3306      	adds	r3, #6
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3306      	adds	r3, #6
 800afa4:	404a      	eors	r2, r1
 800afa6:	b2d2      	uxtb	r2, r2
 800afa8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3307      	adds	r3, #7
 800afae:	7819      	ldrb	r1, [r3, #0]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	3307      	adds	r3, #7
 800afb4:	781a      	ldrb	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3307      	adds	r3, #7
 800afba:	404a      	eors	r2, r1
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3308      	adds	r3, #8
 800afc4:	7819      	ldrb	r1, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	3308      	adds	r3, #8
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3308      	adds	r3, #8
 800afd0:	404a      	eors	r2, r1
 800afd2:	b2d2      	uxtb	r2, r2
 800afd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3309      	adds	r3, #9
 800afda:	7819      	ldrb	r1, [r3, #0]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	3309      	adds	r3, #9
 800afe0:	781a      	ldrb	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3309      	adds	r3, #9
 800afe6:	404a      	eors	r2, r1
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	330a      	adds	r3, #10
 800aff0:	7819      	ldrb	r1, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	330a      	adds	r3, #10
 800aff6:	781a      	ldrb	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	330a      	adds	r3, #10
 800affc:	404a      	eors	r2, r1
 800affe:	b2d2      	uxtb	r2, r2
 800b000:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	330b      	adds	r3, #11
 800b006:	7819      	ldrb	r1, [r3, #0]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	330b      	adds	r3, #11
 800b00c:	781a      	ldrb	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	330b      	adds	r3, #11
 800b012:	404a      	eors	r2, r1
 800b014:	b2d2      	uxtb	r2, r2
 800b016:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	330c      	adds	r3, #12
 800b01c:	7819      	ldrb	r1, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	330c      	adds	r3, #12
 800b028:	404a      	eors	r2, r1
 800b02a:	b2d2      	uxtb	r2, r2
 800b02c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	330d      	adds	r3, #13
 800b032:	7819      	ldrb	r1, [r3, #0]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	330d      	adds	r3, #13
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	330d      	adds	r3, #13
 800b03e:	404a      	eors	r2, r1
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	330e      	adds	r3, #14
 800b048:	7819      	ldrb	r1, [r3, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	330e      	adds	r3, #14
 800b04e:	781a      	ldrb	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	330e      	adds	r3, #14
 800b054:	404a      	eors	r2, r1
 800b056:	b2d2      	uxtb	r2, r2
 800b058:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	330f      	adds	r3, #15
 800b05e:	7819      	ldrb	r1, [r3, #0]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	330f      	adds	r3, #15
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	330f      	adds	r3, #15
 800b06a:	404a      	eors	r2, r1
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b07a:	b480      	push	{r7}
 800b07c:	b085      	sub	sp, #20
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	4053      	eors	r3, r2
 800b090:	b2da      	uxtb	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3301      	adds	r3, #1
 800b09a:	7819      	ldrb	r1, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	404a      	eors	r2, r1
 800b0a8:	b2d2      	uxtb	r2, r2
 800b0aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3302      	adds	r3, #2
 800b0b0:	7819      	ldrb	r1, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	781a      	ldrb	r2, [r3, #0]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3302      	adds	r3, #2
 800b0bc:	404a      	eors	r2, r1
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	3303      	adds	r3, #3
 800b0c6:	7819      	ldrb	r1, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3303      	adds	r3, #3
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3303      	adds	r3, #3
 800b0d2:	404a      	eors	r2, r1
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	7819      	ldrb	r1, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	404a      	eors	r2, r1
 800b0ea:	b2d2      	uxtb	r2, r2
 800b0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	3305      	adds	r3, #5
 800b0f2:	7819      	ldrb	r1, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	3305      	adds	r3, #5
 800b0f8:	781a      	ldrb	r2, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3305      	adds	r3, #5
 800b0fe:	404a      	eors	r2, r1
 800b100:	b2d2      	uxtb	r2, r2
 800b102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	3306      	adds	r3, #6
 800b108:	7819      	ldrb	r1, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3306      	adds	r3, #6
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3306      	adds	r3, #6
 800b114:	404a      	eors	r2, r1
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	3307      	adds	r3, #7
 800b11e:	7819      	ldrb	r1, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3307      	adds	r3, #7
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3307      	adds	r3, #7
 800b12a:	404a      	eors	r2, r1
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	3308      	adds	r3, #8
 800b134:	7819      	ldrb	r1, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3308      	adds	r3, #8
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	3308      	adds	r3, #8
 800b140:	404a      	eors	r2, r1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3309      	adds	r3, #9
 800b14a:	7819      	ldrb	r1, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3309      	adds	r3, #9
 800b150:	781a      	ldrb	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3309      	adds	r3, #9
 800b156:	404a      	eors	r2, r1
 800b158:	b2d2      	uxtb	r2, r2
 800b15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	330a      	adds	r3, #10
 800b160:	7819      	ldrb	r1, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	330a      	adds	r3, #10
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	330a      	adds	r3, #10
 800b16c:	404a      	eors	r2, r1
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	330b      	adds	r3, #11
 800b176:	7819      	ldrb	r1, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	330b      	adds	r3, #11
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	330b      	adds	r3, #11
 800b182:	404a      	eors	r2, r1
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	330c      	adds	r3, #12
 800b18c:	7819      	ldrb	r1, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	330c      	adds	r3, #12
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	330c      	adds	r3, #12
 800b198:	404a      	eors	r2, r1
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	330d      	adds	r3, #13
 800b1a2:	7819      	ldrb	r1, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	330d      	adds	r3, #13
 800b1a8:	781a      	ldrb	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	330d      	adds	r3, #13
 800b1ae:	404a      	eors	r2, r1
 800b1b0:	b2d2      	uxtb	r2, r2
 800b1b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	330e      	adds	r3, #14
 800b1b8:	7819      	ldrb	r1, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	330e      	adds	r3, #14
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	330e      	adds	r3, #14
 800b1c4:	404a      	eors	r2, r1
 800b1c6:	b2d2      	uxtb	r2, r2
 800b1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	330f      	adds	r3, #15
 800b1ce:	7819      	ldrb	r1, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	330f      	adds	r3, #15
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	330f      	adds	r3, #15
 800b1da:	404a      	eors	r2, r1
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b1e0:	bf00      	nop
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bc80      	pop	{r7}
 800b1e8:	4770      	bx	lr

0800b1ea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b082      	sub	sp, #8
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fe88 	bl	800af0c <xor_block>
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	461a      	mov	r2, r3
 800b212:	4b48      	ldr	r3, [pc, #288]	; (800b334 <shift_sub_rows+0x130>)
 800b214:	5c9a      	ldrb	r2, [r3, r2]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3304      	adds	r3, #4
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3304      	adds	r3, #4
 800b226:	4a43      	ldr	r2, [pc, #268]	; (800b334 <shift_sub_rows+0x130>)
 800b228:	5c52      	ldrb	r2, [r2, r1]
 800b22a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3308      	adds	r3, #8
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3308      	adds	r3, #8
 800b238:	4a3e      	ldr	r2, [pc, #248]	; (800b334 <shift_sub_rows+0x130>)
 800b23a:	5c52      	ldrb	r2, [r2, r1]
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	330c      	adds	r3, #12
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	4619      	mov	r1, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	330c      	adds	r3, #12
 800b24a:	4a3a      	ldr	r2, [pc, #232]	; (800b334 <shift_sub_rows+0x130>)
 800b24c:	5c52      	ldrb	r2, [r2, r1]
 800b24e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	785b      	ldrb	r3, [r3, #1]
 800b254:	73fb      	strb	r3, [r7, #15]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3305      	adds	r3, #5
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	4619      	mov	r1, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3301      	adds	r3, #1
 800b262:	4a34      	ldr	r2, [pc, #208]	; (800b334 <shift_sub_rows+0x130>)
 800b264:	5c52      	ldrb	r2, [r2, r1]
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3309      	adds	r3, #9
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	4619      	mov	r1, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3305      	adds	r3, #5
 800b274:	4a2f      	ldr	r2, [pc, #188]	; (800b334 <shift_sub_rows+0x130>)
 800b276:	5c52      	ldrb	r2, [r2, r1]
 800b278:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	330d      	adds	r3, #13
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	4619      	mov	r1, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3309      	adds	r3, #9
 800b286:	4a2b      	ldr	r2, [pc, #172]	; (800b334 <shift_sub_rows+0x130>)
 800b288:	5c52      	ldrb	r2, [r2, r1]
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	7bfa      	ldrb	r2, [r7, #15]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	330d      	adds	r3, #13
 800b292:	4928      	ldr	r1, [pc, #160]	; (800b334 <shift_sub_rows+0x130>)
 800b294:	5c8a      	ldrb	r2, [r1, r2]
 800b296:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	789b      	ldrb	r3, [r3, #2]
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	330a      	adds	r3, #10
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3302      	adds	r3, #2
 800b2aa:	4a22      	ldr	r2, [pc, #136]	; (800b334 <shift_sub_rows+0x130>)
 800b2ac:	5c52      	ldrb	r2, [r2, r1]
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	7bfa      	ldrb	r2, [r7, #15]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	330a      	adds	r3, #10
 800b2b6:	491f      	ldr	r1, [pc, #124]	; (800b334 <shift_sub_rows+0x130>)
 800b2b8:	5c8a      	ldrb	r2, [r1, r2]
 800b2ba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	799b      	ldrb	r3, [r3, #6]
 800b2c0:	73fb      	strb	r3, [r7, #15]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	330e      	adds	r3, #14
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3306      	adds	r3, #6
 800b2ce:	4a19      	ldr	r2, [pc, #100]	; (800b334 <shift_sub_rows+0x130>)
 800b2d0:	5c52      	ldrb	r2, [r2, r1]
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	7bfa      	ldrb	r2, [r7, #15]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	330e      	adds	r3, #14
 800b2da:	4916      	ldr	r1, [pc, #88]	; (800b334 <shift_sub_rows+0x130>)
 800b2dc:	5c8a      	ldrb	r2, [r1, r2]
 800b2de:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7bdb      	ldrb	r3, [r3, #15]
 800b2e4:	73fb      	strb	r3, [r7, #15]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	330b      	adds	r3, #11
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	330f      	adds	r3, #15
 800b2f2:	4a10      	ldr	r2, [pc, #64]	; (800b334 <shift_sub_rows+0x130>)
 800b2f4:	5c52      	ldrb	r2, [r2, r1]
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3307      	adds	r3, #7
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	4619      	mov	r1, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	330b      	adds	r3, #11
 800b304:	4a0b      	ldr	r2, [pc, #44]	; (800b334 <shift_sub_rows+0x130>)
 800b306:	5c52      	ldrb	r2, [r2, r1]
 800b308:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3303      	adds	r3, #3
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3307      	adds	r3, #7
 800b316:	4a07      	ldr	r2, [pc, #28]	; (800b334 <shift_sub_rows+0x130>)
 800b318:	5c52      	ldrb	r2, [r2, r1]
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	7bfa      	ldrb	r2, [r7, #15]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3303      	adds	r3, #3
 800b322:	4904      	ldr	r1, [pc, #16]	; (800b334 <shift_sub_rows+0x130>)
 800b324:	5c8a      	ldrb	r2, [r1, r2]
 800b326:	701a      	strb	r2, [r3, #0]
}
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	0801b87c 	.word	0x0801b87c

0800b338 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b340:	f107 0308 	add.w	r3, r7, #8
 800b344:	6879      	ldr	r1, [r7, #4]
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fd6c 	bl	800ae24 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b34c:	7a3b      	ldrb	r3, [r7, #8]
 800b34e:	461a      	mov	r2, r3
 800b350:	4b9a      	ldr	r3, [pc, #616]	; (800b5bc <mix_sub_columns+0x284>)
 800b352:	5c9a      	ldrb	r2, [r3, r2]
 800b354:	7b7b      	ldrb	r3, [r7, #13]
 800b356:	4619      	mov	r1, r3
 800b358:	4b99      	ldr	r3, [pc, #612]	; (800b5c0 <mix_sub_columns+0x288>)
 800b35a:	5c5b      	ldrb	r3, [r3, r1]
 800b35c:	4053      	eors	r3, r2
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	7cbb      	ldrb	r3, [r7, #18]
 800b362:	4619      	mov	r1, r3
 800b364:	4b97      	ldr	r3, [pc, #604]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b366:	5c5b      	ldrb	r3, [r3, r1]
 800b368:	4053      	eors	r3, r2
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	4619      	mov	r1, r3
 800b370:	4b94      	ldr	r3, [pc, #592]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b372:	5c5b      	ldrb	r3, [r3, r1]
 800b374:	4053      	eors	r3, r2
 800b376:	b2da      	uxtb	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b37c:	7a3b      	ldrb	r3, [r7, #8]
 800b37e:	461a      	mov	r2, r3
 800b380:	4b90      	ldr	r3, [pc, #576]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b382:	5c9a      	ldrb	r2, [r3, r2]
 800b384:	7b7b      	ldrb	r3, [r7, #13]
 800b386:	4619      	mov	r1, r3
 800b388:	4b8c      	ldr	r3, [pc, #560]	; (800b5bc <mix_sub_columns+0x284>)
 800b38a:	5c5b      	ldrb	r3, [r3, r1]
 800b38c:	4053      	eors	r3, r2
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	7cbb      	ldrb	r3, [r7, #18]
 800b392:	4619      	mov	r1, r3
 800b394:	4b8a      	ldr	r3, [pc, #552]	; (800b5c0 <mix_sub_columns+0x288>)
 800b396:	5c5b      	ldrb	r3, [r3, r1]
 800b398:	4053      	eors	r3, r2
 800b39a:	b2d9      	uxtb	r1, r3
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4b88      	ldr	r3, [pc, #544]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b3a2:	5c9a      	ldrb	r2, [r3, r2]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	404a      	eors	r2, r1
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b3ae:	7a3b      	ldrb	r3, [r7, #8]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4b84      	ldr	r3, [pc, #528]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b3b4:	5c9a      	ldrb	r2, [r3, r2]
 800b3b6:	7b7b      	ldrb	r3, [r7, #13]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4b82      	ldr	r3, [pc, #520]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b3bc:	5c5b      	ldrb	r3, [r3, r1]
 800b3be:	4053      	eors	r3, r2
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	7cbb      	ldrb	r3, [r7, #18]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4b7d      	ldr	r3, [pc, #500]	; (800b5bc <mix_sub_columns+0x284>)
 800b3c8:	5c5b      	ldrb	r3, [r3, r1]
 800b3ca:	4053      	eors	r3, r2
 800b3cc:	b2d9      	uxtb	r1, r3
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	4b7b      	ldr	r3, [pc, #492]	; (800b5c0 <mix_sub_columns+0x288>)
 800b3d4:	5c9a      	ldrb	r2, [r3, r2]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3302      	adds	r3, #2
 800b3da:	404a      	eors	r2, r1
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b3e0:	7a3b      	ldrb	r3, [r7, #8]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4b76      	ldr	r3, [pc, #472]	; (800b5c0 <mix_sub_columns+0x288>)
 800b3e6:	5c9a      	ldrb	r2, [r3, r2]
 800b3e8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	4b75      	ldr	r3, [pc, #468]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b3ee:	5c5b      	ldrb	r3, [r3, r1]
 800b3f0:	4053      	eors	r3, r2
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	7cbb      	ldrb	r3, [r7, #18]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4b72      	ldr	r3, [pc, #456]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b3fa:	5c5b      	ldrb	r3, [r3, r1]
 800b3fc:	4053      	eors	r3, r2
 800b3fe:	b2d9      	uxtb	r1, r3
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	461a      	mov	r2, r3
 800b404:	4b6d      	ldr	r3, [pc, #436]	; (800b5bc <mix_sub_columns+0x284>)
 800b406:	5c9a      	ldrb	r2, [r3, r2]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3303      	adds	r3, #3
 800b40c:	404a      	eors	r2, r1
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b412:	7b3b      	ldrb	r3, [r7, #12]
 800b414:	461a      	mov	r2, r3
 800b416:	4b69      	ldr	r3, [pc, #420]	; (800b5bc <mix_sub_columns+0x284>)
 800b418:	5c9a      	ldrb	r2, [r3, r2]
 800b41a:	7c7b      	ldrb	r3, [r7, #17]
 800b41c:	4619      	mov	r1, r3
 800b41e:	4b68      	ldr	r3, [pc, #416]	; (800b5c0 <mix_sub_columns+0x288>)
 800b420:	5c5b      	ldrb	r3, [r3, r1]
 800b422:	4053      	eors	r3, r2
 800b424:	b2da      	uxtb	r2, r3
 800b426:	7dbb      	ldrb	r3, [r7, #22]
 800b428:	4619      	mov	r1, r3
 800b42a:	4b66      	ldr	r3, [pc, #408]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b42c:	5c5b      	ldrb	r3, [r3, r1]
 800b42e:	4053      	eors	r3, r2
 800b430:	b2d9      	uxtb	r1, r3
 800b432:	7afb      	ldrb	r3, [r7, #11]
 800b434:	461a      	mov	r2, r3
 800b436:	4b63      	ldr	r3, [pc, #396]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b438:	5c9a      	ldrb	r2, [r3, r2]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3304      	adds	r3, #4
 800b43e:	404a      	eors	r2, r1
 800b440:	b2d2      	uxtb	r2, r2
 800b442:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b444:	7b3b      	ldrb	r3, [r7, #12]
 800b446:	461a      	mov	r2, r3
 800b448:	4b5e      	ldr	r3, [pc, #376]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b44a:	5c9a      	ldrb	r2, [r3, r2]
 800b44c:	7c7b      	ldrb	r3, [r7, #17]
 800b44e:	4619      	mov	r1, r3
 800b450:	4b5a      	ldr	r3, [pc, #360]	; (800b5bc <mix_sub_columns+0x284>)
 800b452:	5c5b      	ldrb	r3, [r3, r1]
 800b454:	4053      	eors	r3, r2
 800b456:	b2da      	uxtb	r2, r3
 800b458:	7dbb      	ldrb	r3, [r7, #22]
 800b45a:	4619      	mov	r1, r3
 800b45c:	4b58      	ldr	r3, [pc, #352]	; (800b5c0 <mix_sub_columns+0x288>)
 800b45e:	5c5b      	ldrb	r3, [r3, r1]
 800b460:	4053      	eors	r3, r2
 800b462:	b2d9      	uxtb	r1, r3
 800b464:	7afb      	ldrb	r3, [r7, #11]
 800b466:	461a      	mov	r2, r3
 800b468:	4b56      	ldr	r3, [pc, #344]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b46a:	5c9a      	ldrb	r2, [r3, r2]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3305      	adds	r3, #5
 800b470:	404a      	eors	r2, r1
 800b472:	b2d2      	uxtb	r2, r2
 800b474:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b476:	7b3b      	ldrb	r3, [r7, #12]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b52      	ldr	r3, [pc, #328]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b47c:	5c9a      	ldrb	r2, [r3, r2]
 800b47e:	7c7b      	ldrb	r3, [r7, #17]
 800b480:	4619      	mov	r1, r3
 800b482:	4b50      	ldr	r3, [pc, #320]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b484:	5c5b      	ldrb	r3, [r3, r1]
 800b486:	4053      	eors	r3, r2
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	7dbb      	ldrb	r3, [r7, #22]
 800b48c:	4619      	mov	r1, r3
 800b48e:	4b4b      	ldr	r3, [pc, #300]	; (800b5bc <mix_sub_columns+0x284>)
 800b490:	5c5b      	ldrb	r3, [r3, r1]
 800b492:	4053      	eors	r3, r2
 800b494:	b2d9      	uxtb	r1, r3
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	461a      	mov	r2, r3
 800b49a:	4b49      	ldr	r3, [pc, #292]	; (800b5c0 <mix_sub_columns+0x288>)
 800b49c:	5c9a      	ldrb	r2, [r3, r2]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3306      	adds	r3, #6
 800b4a2:	404a      	eors	r2, r1
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b4a8:	7b3b      	ldrb	r3, [r7, #12]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	4b44      	ldr	r3, [pc, #272]	; (800b5c0 <mix_sub_columns+0x288>)
 800b4ae:	5c9a      	ldrb	r2, [r3, r2]
 800b4b0:	7c7b      	ldrb	r3, [r7, #17]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4b43      	ldr	r3, [pc, #268]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b4b6:	5c5b      	ldrb	r3, [r3, r1]
 800b4b8:	4053      	eors	r3, r2
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	7dbb      	ldrb	r3, [r7, #22]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4b40      	ldr	r3, [pc, #256]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b4c2:	5c5b      	ldrb	r3, [r3, r1]
 800b4c4:	4053      	eors	r3, r2
 800b4c6:	b2d9      	uxtb	r1, r3
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	4b3b      	ldr	r3, [pc, #236]	; (800b5bc <mix_sub_columns+0x284>)
 800b4ce:	5c9a      	ldrb	r2, [r3, r2]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3307      	adds	r3, #7
 800b4d4:	404a      	eors	r2, r1
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b4da:	7c3b      	ldrb	r3, [r7, #16]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b37      	ldr	r3, [pc, #220]	; (800b5bc <mix_sub_columns+0x284>)
 800b4e0:	5c9a      	ldrb	r2, [r3, r2]
 800b4e2:	7d7b      	ldrb	r3, [r7, #21]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	4b36      	ldr	r3, [pc, #216]	; (800b5c0 <mix_sub_columns+0x288>)
 800b4e8:	5c5b      	ldrb	r3, [r3, r1]
 800b4ea:	4053      	eors	r3, r2
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	7abb      	ldrb	r3, [r7, #10]
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4b34      	ldr	r3, [pc, #208]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b4f4:	5c5b      	ldrb	r3, [r3, r1]
 800b4f6:	4053      	eors	r3, r2
 800b4f8:	b2d9      	uxtb	r1, r3
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4b31      	ldr	r3, [pc, #196]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b500:	5c9a      	ldrb	r2, [r3, r2]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3308      	adds	r3, #8
 800b506:	404a      	eors	r2, r1
 800b508:	b2d2      	uxtb	r2, r2
 800b50a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b50c:	7c3b      	ldrb	r3, [r7, #16]
 800b50e:	461a      	mov	r2, r3
 800b510:	4b2c      	ldr	r3, [pc, #176]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b512:	5c9a      	ldrb	r2, [r3, r2]
 800b514:	7d7b      	ldrb	r3, [r7, #21]
 800b516:	4619      	mov	r1, r3
 800b518:	4b28      	ldr	r3, [pc, #160]	; (800b5bc <mix_sub_columns+0x284>)
 800b51a:	5c5b      	ldrb	r3, [r3, r1]
 800b51c:	4053      	eors	r3, r2
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	7abb      	ldrb	r3, [r7, #10]
 800b522:	4619      	mov	r1, r3
 800b524:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <mix_sub_columns+0x288>)
 800b526:	5c5b      	ldrb	r3, [r3, r1]
 800b528:	4053      	eors	r3, r2
 800b52a:	b2d9      	uxtb	r1, r3
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	461a      	mov	r2, r3
 800b530:	4b24      	ldr	r3, [pc, #144]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b532:	5c9a      	ldrb	r2, [r3, r2]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3309      	adds	r3, #9
 800b538:	404a      	eors	r2, r1
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b53e:	7c3b      	ldrb	r3, [r7, #16]
 800b540:	461a      	mov	r2, r3
 800b542:	4b20      	ldr	r3, [pc, #128]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b544:	5c9a      	ldrb	r2, [r3, r2]
 800b546:	7d7b      	ldrb	r3, [r7, #21]
 800b548:	4619      	mov	r1, r3
 800b54a:	4b1e      	ldr	r3, [pc, #120]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b54c:	5c5b      	ldrb	r3, [r3, r1]
 800b54e:	4053      	eors	r3, r2
 800b550:	b2da      	uxtb	r2, r3
 800b552:	7abb      	ldrb	r3, [r7, #10]
 800b554:	4619      	mov	r1, r3
 800b556:	4b19      	ldr	r3, [pc, #100]	; (800b5bc <mix_sub_columns+0x284>)
 800b558:	5c5b      	ldrb	r3, [r3, r1]
 800b55a:	4053      	eors	r3, r2
 800b55c:	b2d9      	uxtb	r1, r3
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	461a      	mov	r2, r3
 800b562:	4b17      	ldr	r3, [pc, #92]	; (800b5c0 <mix_sub_columns+0x288>)
 800b564:	5c9a      	ldrb	r2, [r3, r2]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	330a      	adds	r3, #10
 800b56a:	404a      	eors	r2, r1
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b570:	7c3b      	ldrb	r3, [r7, #16]
 800b572:	461a      	mov	r2, r3
 800b574:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <mix_sub_columns+0x288>)
 800b576:	5c9a      	ldrb	r2, [r3, r2]
 800b578:	7d7b      	ldrb	r3, [r7, #21]
 800b57a:	4619      	mov	r1, r3
 800b57c:	4b11      	ldr	r3, [pc, #68]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b57e:	5c5b      	ldrb	r3, [r3, r1]
 800b580:	4053      	eors	r3, r2
 800b582:	b2da      	uxtb	r2, r3
 800b584:	7abb      	ldrb	r3, [r7, #10]
 800b586:	4619      	mov	r1, r3
 800b588:	4b0e      	ldr	r3, [pc, #56]	; (800b5c4 <mix_sub_columns+0x28c>)
 800b58a:	5c5b      	ldrb	r3, [r3, r1]
 800b58c:	4053      	eors	r3, r2
 800b58e:	b2d9      	uxtb	r1, r3
 800b590:	7bfb      	ldrb	r3, [r7, #15]
 800b592:	461a      	mov	r2, r3
 800b594:	4b09      	ldr	r3, [pc, #36]	; (800b5bc <mix_sub_columns+0x284>)
 800b596:	5c9a      	ldrb	r2, [r3, r2]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	330b      	adds	r3, #11
 800b59c:	404a      	eors	r2, r1
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b5a2:	7d3b      	ldrb	r3, [r7, #20]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <mix_sub_columns+0x284>)
 800b5a8:	5c9a      	ldrb	r2, [r3, r2]
 800b5aa:	7a7b      	ldrb	r3, [r7, #9]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <mix_sub_columns+0x288>)
 800b5b0:	5c5b      	ldrb	r3, [r3, r1]
 800b5b2:	4053      	eors	r3, r2
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	e005      	b.n	800b5c8 <mix_sub_columns+0x290>
 800b5bc:	0801b97c 	.word	0x0801b97c
 800b5c0:	0801ba7c 	.word	0x0801ba7c
 800b5c4:	0801b87c 	.word	0x0801b87c
 800b5c8:	4b2d      	ldr	r3, [pc, #180]	; (800b680 <mix_sub_columns+0x348>)
 800b5ca:	5c5b      	ldrb	r3, [r3, r1]
 800b5cc:	4053      	eors	r3, r2
 800b5ce:	b2d9      	uxtb	r1, r3
 800b5d0:	7cfb      	ldrb	r3, [r7, #19]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4b2a      	ldr	r3, [pc, #168]	; (800b680 <mix_sub_columns+0x348>)
 800b5d6:	5c9a      	ldrb	r2, [r3, r2]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	330c      	adds	r3, #12
 800b5dc:	404a      	eors	r2, r1
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b5e2:	7d3b      	ldrb	r3, [r7, #20]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4b26      	ldr	r3, [pc, #152]	; (800b680 <mix_sub_columns+0x348>)
 800b5e8:	5c9a      	ldrb	r2, [r3, r2]
 800b5ea:	7a7b      	ldrb	r3, [r7, #9]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	4b25      	ldr	r3, [pc, #148]	; (800b684 <mix_sub_columns+0x34c>)
 800b5f0:	5c5b      	ldrb	r3, [r3, r1]
 800b5f2:	4053      	eors	r3, r2
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4b23      	ldr	r3, [pc, #140]	; (800b688 <mix_sub_columns+0x350>)
 800b5fc:	5c5b      	ldrb	r3, [r3, r1]
 800b5fe:	4053      	eors	r3, r2
 800b600:	b2d9      	uxtb	r1, r3
 800b602:	7cfb      	ldrb	r3, [r7, #19]
 800b604:	461a      	mov	r2, r3
 800b606:	4b1e      	ldr	r3, [pc, #120]	; (800b680 <mix_sub_columns+0x348>)
 800b608:	5c9a      	ldrb	r2, [r3, r2]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	330d      	adds	r3, #13
 800b60e:	404a      	eors	r2, r1
 800b610:	b2d2      	uxtb	r2, r2
 800b612:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b614:	7d3b      	ldrb	r3, [r7, #20]
 800b616:	461a      	mov	r2, r3
 800b618:	4b19      	ldr	r3, [pc, #100]	; (800b680 <mix_sub_columns+0x348>)
 800b61a:	5c9a      	ldrb	r2, [r3, r2]
 800b61c:	7a7b      	ldrb	r3, [r7, #9]
 800b61e:	4619      	mov	r1, r3
 800b620:	4b17      	ldr	r3, [pc, #92]	; (800b680 <mix_sub_columns+0x348>)
 800b622:	5c5b      	ldrb	r3, [r3, r1]
 800b624:	4053      	eors	r3, r2
 800b626:	b2da      	uxtb	r2, r3
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	4619      	mov	r1, r3
 800b62c:	4b15      	ldr	r3, [pc, #84]	; (800b684 <mix_sub_columns+0x34c>)
 800b62e:	5c5b      	ldrb	r3, [r3, r1]
 800b630:	4053      	eors	r3, r2
 800b632:	b2d9      	uxtb	r1, r3
 800b634:	7cfb      	ldrb	r3, [r7, #19]
 800b636:	461a      	mov	r2, r3
 800b638:	4b13      	ldr	r3, [pc, #76]	; (800b688 <mix_sub_columns+0x350>)
 800b63a:	5c9a      	ldrb	r2, [r3, r2]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	330e      	adds	r3, #14
 800b640:	404a      	eors	r2, r1
 800b642:	b2d2      	uxtb	r2, r2
 800b644:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b646:	7d3b      	ldrb	r3, [r7, #20]
 800b648:	461a      	mov	r2, r3
 800b64a:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <mix_sub_columns+0x350>)
 800b64c:	5c9a      	ldrb	r2, [r3, r2]
 800b64e:	7a7b      	ldrb	r3, [r7, #9]
 800b650:	4619      	mov	r1, r3
 800b652:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <mix_sub_columns+0x348>)
 800b654:	5c5b      	ldrb	r3, [r3, r1]
 800b656:	4053      	eors	r3, r2
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	4619      	mov	r1, r3
 800b65e:	4b08      	ldr	r3, [pc, #32]	; (800b680 <mix_sub_columns+0x348>)
 800b660:	5c5b      	ldrb	r3, [r3, r1]
 800b662:	4053      	eors	r3, r2
 800b664:	b2d9      	uxtb	r1, r3
 800b666:	7cfb      	ldrb	r3, [r7, #19]
 800b668:	461a      	mov	r2, r3
 800b66a:	4b06      	ldr	r3, [pc, #24]	; (800b684 <mix_sub_columns+0x34c>)
 800b66c:	5c9a      	ldrb	r2, [r3, r2]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	330f      	adds	r3, #15
 800b672:	404a      	eors	r2, r1
 800b674:	b2d2      	uxtb	r2, r2
 800b676:	701a      	strb	r2, [r3, #0]
  }
 800b678:	bf00      	nop
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	0801b87c 	.word	0x0801b87c
 800b684:	0801b97c 	.word	0x0801b97c
 800b688:	0801ba7c 	.word	0x0801ba7c

0800b68c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	460b      	mov	r3, r1
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	3b10      	subs	r3, #16
 800b69e:	2b10      	cmp	r3, #16
 800b6a0:	bf8c      	ite	hi
 800b6a2:	2201      	movhi	r2, #1
 800b6a4:	2200      	movls	r2, #0
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	2a00      	cmp	r2, #0
 800b6aa:	d10d      	bne.n	800b6c8 <lorawan_aes_set_key+0x3c>
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b6b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bf14      	ite	ne
 800b6be:	2301      	movne	r3, #1
 800b6c0:	2300      	moveq	r3, #0
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d105      	bne.n	800b6d4 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b6d0:	23ff      	movs	r3, #255	; 0xff
 800b6d2:	e0b2      	b.n	800b83a <lorawan_aes_set_key+0x1ae>
        break;
 800b6d4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	7afa      	ldrb	r2, [r7, #11]
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff fbfa 	bl	800aed6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b6e2:	7afb      	ldrb	r3, [r7, #11]
 800b6e4:	331c      	adds	r3, #28
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b6ec:	7c7b      	ldrb	r3, [r7, #17]
 800b6ee:	091b      	lsrs	r3, r3, #4
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b6fc:	7afb      	ldrb	r3, [r7, #11]
 800b6fe:	75fb      	strb	r3, [r7, #23]
 800b700:	2301      	movs	r3, #1
 800b702:	75bb      	strb	r3, [r7, #22]
 800b704:	e093      	b.n	800b82e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	3b04      	subs	r3, #4
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	5cd3      	ldrb	r3, [r2, r3]
 800b70e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	3b03      	subs	r3, #3
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	5cd3      	ldrb	r3, [r2, r3]
 800b718:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	3b02      	subs	r3, #2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	5cd3      	ldrb	r3, [r2, r3]
 800b722:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	3b01      	subs	r3, #1
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	5cd3      	ldrb	r3, [r2, r3]
 800b72c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	7afa      	ldrb	r2, [r7, #11]
 800b732:	fbb3 f1f2 	udiv	r1, r3, r2
 800b736:	fb02 f201 	mul.w	r2, r2, r1
 800b73a:	1a9b      	subs	r3, r3, r2
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d127      	bne.n	800b792 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b742:	7d7b      	ldrb	r3, [r7, #21]
 800b744:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b746:	7d3b      	ldrb	r3, [r7, #20]
 800b748:	4a3e      	ldr	r2, [pc, #248]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b74a:	5cd2      	ldrb	r2, [r2, r3]
 800b74c:	7dbb      	ldrb	r3, [r7, #22]
 800b74e:	4053      	eors	r3, r2
 800b750:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b752:	7cfb      	ldrb	r3, [r7, #19]
 800b754:	4a3b      	ldr	r2, [pc, #236]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b756:	5cd3      	ldrb	r3, [r2, r3]
 800b758:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b75a:	7cbb      	ldrb	r3, [r7, #18]
 800b75c:	4a39      	ldr	r2, [pc, #228]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b75e:	5cd3      	ldrb	r3, [r2, r3]
 800b760:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b762:	7c3b      	ldrb	r3, [r7, #16]
 800b764:	4a37      	ldr	r2, [pc, #220]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b766:	5cd3      	ldrb	r3, [r2, r3]
 800b768:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b76a:	7dbb      	ldrb	r3, [r7, #22]
 800b76c:	005b      	lsls	r3, r3, #1
 800b76e:	b25a      	sxtb	r2, r3
 800b770:	7dbb      	ldrb	r3, [r7, #22]
 800b772:	09db      	lsrs	r3, r3, #7
 800b774:	b2db      	uxtb	r3, r3
 800b776:	4619      	mov	r1, r3
 800b778:	0049      	lsls	r1, r1, #1
 800b77a:	440b      	add	r3, r1
 800b77c:	4619      	mov	r1, r3
 800b77e:	00c8      	lsls	r0, r1, #3
 800b780:	4619      	mov	r1, r3
 800b782:	4603      	mov	r3, r0
 800b784:	440b      	add	r3, r1
 800b786:	b2db      	uxtb	r3, r3
 800b788:	b25b      	sxtb	r3, r3
 800b78a:	4053      	eors	r3, r2
 800b78c:	b25b      	sxtb	r3, r3
 800b78e:	75bb      	strb	r3, [r7, #22]
 800b790:	e01c      	b.n	800b7cc <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	2b18      	cmp	r3, #24
 800b796:	d919      	bls.n	800b7cc <lorawan_aes_set_key+0x140>
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	7afa      	ldrb	r2, [r7, #11]
 800b79c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7a0:	fb02 f201 	mul.w	r2, r2, r1
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b10      	cmp	r3, #16
 800b7aa:	d10f      	bne.n	800b7cc <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b7ac:	7d7b      	ldrb	r3, [r7, #21]
 800b7ae:	4a25      	ldr	r2, [pc, #148]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b7b0:	5cd3      	ldrb	r3, [r2, r3]
 800b7b2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b7b4:	7d3b      	ldrb	r3, [r7, #20]
 800b7b6:	4a23      	ldr	r2, [pc, #140]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b7b8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ba:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b7bc:	7cfb      	ldrb	r3, [r7, #19]
 800b7be:	4a21      	ldr	r2, [pc, #132]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b7c0:	5cd3      	ldrb	r3, [r2, r3]
 800b7c2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b7c4:	7cbb      	ldrb	r3, [r7, #18]
 800b7c6:	4a1f      	ldr	r2, [pc, #124]	; (800b844 <lorawan_aes_set_key+0x1b8>)
 800b7c8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ca:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b7cc:	7dfa      	ldrb	r2, [r7, #23]
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b7d4:	7c3b      	ldrb	r3, [r7, #16]
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	5cd1      	ldrb	r1, [r2, r3]
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	7d7a      	ldrb	r2, [r7, #21]
 800b7de:	404a      	eors	r2, r1
 800b7e0:	b2d1      	uxtb	r1, r2
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b7e6:	7c3b      	ldrb	r3, [r7, #16]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	5cd1      	ldrb	r1, [r2, r3]
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	7d3a      	ldrb	r2, [r7, #20]
 800b7f4:	404a      	eors	r2, r1
 800b7f6:	b2d1      	uxtb	r1, r2
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b7fc:	7c3b      	ldrb	r3, [r7, #16]
 800b7fe:	3302      	adds	r3, #2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	5cd1      	ldrb	r1, [r2, r3]
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	3302      	adds	r3, #2
 800b808:	7cfa      	ldrb	r2, [r7, #19]
 800b80a:	404a      	eors	r2, r1
 800b80c:	b2d1      	uxtb	r1, r2
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b812:	7c3b      	ldrb	r3, [r7, #16]
 800b814:	3303      	adds	r3, #3
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	5cd1      	ldrb	r1, [r2, r3]
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	3303      	adds	r3, #3
 800b81e:	7cba      	ldrb	r2, [r7, #18]
 800b820:	404a      	eors	r2, r1
 800b822:	b2d1      	uxtb	r1, r2
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	3304      	adds	r3, #4
 800b82c:	75fb      	strb	r3, [r7, #23]
 800b82e:	7dfa      	ldrb	r2, [r7, #23]
 800b830:	7c7b      	ldrb	r3, [r7, #17]
 800b832:	429a      	cmp	r2, r3
 800b834:	f4ff af67 	bcc.w	800b706 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	0801b87c 	.word	0x0801b87c

0800b848 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b08a      	sub	sp, #40	; 0x28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d038      	beq.n	800b8d0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	f107 0314 	add.w	r3, r7, #20
 800b864:	68f9      	ldr	r1, [r7, #12]
 800b866:	4618      	mov	r0, r3
 800b868:	f7ff fc07 	bl	800b07a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b86c:	2301      	movs	r3, #1
 800b86e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b872:	e014      	b.n	800b89e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff fd5d 	bl	800b338 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b884:	0112      	lsls	r2, r2, #4
 800b886:	441a      	add	r2, r3
 800b888:	f107 0314 	add.w	r3, r7, #20
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7ff fcab 	bl	800b1ea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b898:	3301      	adds	r3, #1
 800b89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b8a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d3e3      	bcc.n	800b874 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b8ac:	f107 0314 	add.w	r3, r7, #20
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff fca7 	bl	800b204 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8bc:	0112      	lsls	r2, r2, #4
 800b8be:	441a      	add	r2, r3
 800b8c0:	f107 0314 	add.w	r3, r7, #20
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	68b8      	ldr	r0, [r7, #8]
 800b8c8:	f7ff fbd7 	bl	800b07a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e000      	b.n	800b8d2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b8d0:	23ff      	movs	r3, #255	; 0xff
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3728      	adds	r7, #40	; 0x28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8de:	b09d      	sub	sp, #116	; 0x74
 800b8e0:	af10      	add	r7, sp, #64	; 0x40
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b8e8:	2306      	movs	r3, #6
 800b8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b8ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f000 f9f1 	bl	800bce0 <SecureElementGetKeyByID>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f040 80b0 	bne.w	800ba6e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b90e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b916:	4b58      	ldr	r3, [pc, #352]	; (800ba78 <PrintKey+0x19c>)
 800b918:	2200      	movs	r2, #0
 800b91a:	2100      	movs	r1, #0
 800b91c:	2002      	movs	r0, #2
 800b91e:	f00e ff85 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b922:	e056      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d106      	bne.n	800b93a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b92c:	4b53      	ldr	r3, [pc, #332]	; (800ba7c <PrintKey+0x1a0>)
 800b92e:	2200      	movs	r2, #0
 800b930:	2100      	movs	r1, #0
 800b932:	2002      	movs	r0, #2
 800b934:	f00e ff7a 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b938:	e04b      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b93a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d106      	bne.n	800b950 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b942:	4b4f      	ldr	r3, [pc, #316]	; (800ba80 <PrintKey+0x1a4>)
 800b944:	2200      	movs	r2, #0
 800b946:	2100      	movs	r1, #0
 800b948:	2002      	movs	r0, #2
 800b94a:	f00e ff6f 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b94e:	e040      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b954:	2b02      	cmp	r3, #2
 800b956:	d106      	bne.n	800b966 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b958:	4b4a      	ldr	r3, [pc, #296]	; (800ba84 <PrintKey+0x1a8>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	2002      	movs	r0, #2
 800b960:	f00e ff64 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b964:	e035      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	d106      	bne.n	800b97c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b96e:	4b46      	ldr	r3, [pc, #280]	; (800ba88 <PrintKey+0x1ac>)
 800b970:	2200      	movs	r2, #0
 800b972:	2100      	movs	r1, #0
 800b974:	2002      	movs	r0, #2
 800b976:	f00e ff59 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b97a:	e02a      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b980:	2b7f      	cmp	r3, #127	; 0x7f
 800b982:	d106      	bne.n	800b992 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b984:	4b41      	ldr	r3, [pc, #260]	; (800ba8c <PrintKey+0x1b0>)
 800b986:	2200      	movs	r2, #0
 800b988:	2100      	movs	r1, #0
 800b98a:	2002      	movs	r0, #2
 800b98c:	f00e ff4e 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b990:	e01f      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b996:	2b80      	cmp	r3, #128	; 0x80
 800b998:	d106      	bne.n	800b9a8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b99a:	4b3d      	ldr	r3, [pc, #244]	; (800ba90 <PrintKey+0x1b4>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	2002      	movs	r0, #2
 800b9a2:	f00e ff43 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b9a6:	e014      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ac:	2b81      	cmp	r3, #129	; 0x81
 800b9ae:	d106      	bne.n	800b9be <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b9b0:	4b38      	ldr	r3, [pc, #224]	; (800ba94 <PrintKey+0x1b8>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	2002      	movs	r0, #2
 800b9b8:	f00e ff38 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 800b9bc:	e009      	b.n	800b9d2 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b9be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c2:	2b82      	cmp	r3, #130	; 0x82
 800b9c4:	d105      	bne.n	800b9d2 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b9c6:	4b34      	ldr	r3, [pc, #208]	; (800ba98 <PrintKey+0x1bc>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	2002      	movs	r0, #2
 800b9ce:	f00e ff2d 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	789b      	ldrb	r3, [r3, #2]
 800b9dc:	461c      	mov	r4, r3
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	78db      	ldrb	r3, [r3, #3]
 800b9e2:	461d      	mov	r5, r3
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	791b      	ldrb	r3, [r3, #4]
 800b9e8:	461e      	mov	r6, r3
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	795b      	ldrb	r3, [r3, #5]
 800b9ee:	623b      	str	r3, [r7, #32]
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	799b      	ldrb	r3, [r3, #6]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	79db      	ldrb	r3, [r3, #7]
 800b9fa:	61bb      	str	r3, [r7, #24]
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	7a1b      	ldrb	r3, [r3, #8]
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	7a5b      	ldrb	r3, [r3, #9]
 800ba06:	613b      	str	r3, [r7, #16]
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	7a9b      	ldrb	r3, [r3, #10]
 800ba0c:	60fb      	str	r3, [r7, #12]
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	7adb      	ldrb	r3, [r3, #11]
 800ba12:	60bb      	str	r3, [r7, #8]
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	7b1b      	ldrb	r3, [r3, #12]
 800ba18:	607b      	str	r3, [r7, #4]
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	7b5b      	ldrb	r3, [r3, #13]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	7b9b      	ldrb	r3, [r3, #14]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	7bdb      	ldrb	r3, [r3, #15]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	7c1b      	ldrb	r3, [r3, #16]
 800ba30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba32:	920e      	str	r2, [sp, #56]	; 0x38
 800ba34:	910d      	str	r1, [sp, #52]	; 0x34
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	920c      	str	r2, [sp, #48]	; 0x30
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	920a      	str	r2, [sp, #40]	; 0x28
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	9209      	str	r2, [sp, #36]	; 0x24
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	9208      	str	r2, [sp, #32]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	9207      	str	r2, [sp, #28]
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	9206      	str	r2, [sp, #24]
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	9205      	str	r2, [sp, #20]
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	9603      	str	r6, [sp, #12]
 800ba5c:	9502      	str	r5, [sp, #8]
 800ba5e:	9401      	str	r4, [sp, #4]
 800ba60:	9000      	str	r0, [sp, #0]
 800ba62:	4b0e      	ldr	r3, [pc, #56]	; (800ba9c <PrintKey+0x1c0>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	2100      	movs	r1, #0
 800ba68:	2002      	movs	r0, #2
 800ba6a:	f00e fedf 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800ba6e:	bf00      	nop
 800ba70:	3734      	adds	r7, #52	; 0x34
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba76:	bf00      	nop
 800ba78:	0801b298 	.word	0x0801b298
 800ba7c:	0801b2b0 	.word	0x0801b2b0
 800ba80:	0801b2c8 	.word	0x0801b2c8
 800ba84:	0801b2e0 	.word	0x0801b2e0
 800ba88:	0801b2f8 	.word	0x0801b2f8
 800ba8c:	0801b310 	.word	0x0801b310
 800ba90:	0801b328 	.word	0x0801b328
 800ba94:	0801b340 	.word	0x0801b340
 800ba98:	0801b358 	.word	0x0801b358
 800ba9c:	0801b370 	.word	0x0801b370

0800baa0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b085      	sub	sp, #20
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]
 800bab0:	e01a      	b.n	800bae8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bab2:	4b12      	ldr	r3, [pc, #72]	; (800bafc <GetKeyByID+0x5c>)
 800bab4:	6819      	ldr	r1, [r3, #0]
 800bab6:	7bfa      	ldrb	r2, [r7, #15]
 800bab8:	4613      	mov	r3, r2
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	440b      	add	r3, r1
 800bac0:	3310      	adds	r3, #16
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	79fa      	ldrb	r2, [r7, #7]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d10b      	bne.n	800bae2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800baca:	4b0c      	ldr	r3, [pc, #48]	; (800bafc <GetKeyByID+0x5c>)
 800bacc:	6819      	ldr	r1, [r3, #0]
 800bace:	7bfa      	ldrb	r2, [r7, #15]
 800bad0:	4613      	mov	r3, r2
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	4413      	add	r3, r2
 800bad6:	3310      	adds	r3, #16
 800bad8:	18ca      	adds	r2, r1, r3
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bade:	2300      	movs	r3, #0
 800bae0:	e006      	b.n	800baf0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	3301      	adds	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
 800bae8:	7bfb      	ldrb	r3, [r7, #15]
 800baea:	2b09      	cmp	r3, #9
 800baec:	d9e1      	bls.n	800bab2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800baee:	2303      	movs	r3, #3
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bc80      	pop	{r7}
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	200003b8 	.word	0x200003b8

0800bb00 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bb00:	b590      	push	{r4, r7, lr}
 800bb02:	b0d1      	sub	sp, #324	; 0x144
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	f107 040c 	add.w	r4, r7, #12
 800bb0a:	6020      	str	r0, [r4, #0]
 800bb0c:	f107 0008 	add.w	r0, r7, #8
 800bb10:	6001      	str	r1, [r0, #0]
 800bb12:	4619      	mov	r1, r3
 800bb14:	1dbb      	adds	r3, r7, #6
 800bb16:	801a      	strh	r2, [r3, #0]
 800bb18:	1d7b      	adds	r3, r7, #5
 800bb1a:	460a      	mov	r2, r1
 800bb1c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb1e:	f107 0308 	add.w	r3, r7, #8
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <ComputeCmac+0x30>
 800bb28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb30:	2302      	movs	r3, #2
 800bb32:	e04e      	b.n	800bbd2 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb34:	f107 0314 	add.w	r3, r7, #20
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe ff23 	bl	800a984 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bb3e:	f107 0210 	add.w	r2, r7, #16
 800bb42:	1d7b      	adds	r3, r7, #5
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	4611      	mov	r1, r2
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff ffa9 	bl	800baa0 <GetKeyByID>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb54:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d138      	bne.n	800bbce <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bb5c:	f107 0310 	add.w	r3, r7, #16
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe ff23 	bl	800a9b6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bb70:	f107 030c 	add.w	r3, r7, #12
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d007      	beq.n	800bb8a <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bb7a:	f107 030c 	add.w	r3, r7, #12
 800bb7e:	f107 0014 	add.w	r0, r7, #20
 800bb82:	2210      	movs	r2, #16
 800bb84:	6819      	ldr	r1, [r3, #0]
 800bb86:	f7fe ff25 	bl	800a9d4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bb8a:	1dbb      	adds	r3, r7, #6
 800bb8c:	881a      	ldrh	r2, [r3, #0]
 800bb8e:	f107 0308 	add.w	r3, r7, #8
 800bb92:	f107 0014 	add.w	r0, r7, #20
 800bb96:	6819      	ldr	r1, [r3, #0]
 800bb98:	f7fe ff1c 	bl	800a9d4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bb9c:	f107 0214 	add.w	r2, r7, #20
 800bba0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe ffd6 	bl	800ab58 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bbb0:	061a      	lsls	r2, r3, #24
 800bbb2:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bbb6:	041b      	lsls	r3, r3, #16
 800bbb8:	431a      	orrs	r2, r3
 800bbba:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bbbe:	021b      	lsls	r3, r3, #8
 800bbc0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bbc2:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bbcc:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bbce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd90      	pop	{r4, r7, pc}

0800bbdc <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bbdc:	b5b0      	push	{r4, r5, r7, lr}
 800bbde:	b0b2      	sub	sp, #200	; 0xc8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bbe6:	f107 0308 	add.w	r3, r7, #8
 800bbea:	22c0      	movs	r2, #192	; 0xc0
 800bbec:	2100      	movs	r1, #0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f00f f8ba 	bl	801ad68 <memset>
 800bbf4:	4a33      	ldr	r2, [pc, #204]	; (800bcc4 <SecureElementInit+0xe8>)
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbfe:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc02:	4a31      	ldr	r2, [pc, #196]	; (800bcc8 <SecureElementInit+0xec>)
 800bc04:	f107 0310 	add.w	r3, r7, #16
 800bc08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc0c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc10:	4b2e      	ldr	r3, [pc, #184]	; (800bccc <SecureElementInit+0xf0>)
 800bc12:	f107 0419 	add.w	r4, r7, #25
 800bc16:	461d      	mov	r5, r3
 800bc18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	6061      	str	r1, [r4, #4]
 800bc1e:	60a2      	str	r2, [r4, #8]
 800bc20:	60e3      	str	r3, [r4, #12]
 800bc22:	2301      	movs	r3, #1
 800bc24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bc28:	4b29      	ldr	r3, [pc, #164]	; (800bcd0 <SecureElementInit+0xf4>)
 800bc2a:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bc2e:	461d      	mov	r5, r3
 800bc30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	6061      	str	r1, [r4, #4]
 800bc36:	60a2      	str	r2, [r4, #8]
 800bc38:	60e3      	str	r3, [r4, #12]
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bc40:	2303      	movs	r3, #3
 800bc42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bc46:	2304      	movs	r3, #4
 800bc48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bc4c:	237f      	movs	r3, #127	; 0x7f
 800bc4e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bc52:	2380      	movs	r3, #128	; 0x80
 800bc54:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bc58:	2381      	movs	r3, #129	; 0x81
 800bc5a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bc5e:	2382      	movs	r3, #130	; 0x82
 800bc60:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bc64:	2383      	movs	r3, #131	; 0x83
 800bc66:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <SecureElementInit+0x98>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc70:	2302      	movs	r3, #2
 800bc72:	e023      	b.n	800bcbc <SecureElementInit+0xe0>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bc74:	4a17      	ldr	r2, [pc, #92]	; (800bcd4 <SecureElementInit+0xf8>)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bc7a:	4b16      	ldr	r3, [pc, #88]	; (800bcd4 <SecureElementInit+0xf8>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f107 0108 	add.w	r1, r7, #8
 800bc82:	22c0      	movs	r2, #192	; 0xc0
 800bc84:	4618      	mov	r0, r3
 800bc86:	f00a fb90 	bl	80163aa <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <SecureElementInit+0xfc>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2100      	movs	r1, #0
 800bc90:	2002      	movs	r0, #2
 800bc92:	f00e fdcb 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bc96:	2000      	movs	r0, #0
 800bc98:	f7ff fe20 	bl	800b8dc <PrintKey>
    PrintKey(NWK_KEY);
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	f7ff fe1d 	bl	800b8dc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bca2:	4b0e      	ldr	r3, [pc, #56]	; (800bcdc <SecureElementInit+0x100>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	2100      	movs	r1, #0
 800bca8:	2002      	movs	r0, #2
 800bcaa:	f00e fdbf 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bcae:	2003      	movs	r0, #3
 800bcb0:	f7ff fe14 	bl	800b8dc <PrintKey>
    PrintKey(NWK_S_KEY);
 800bcb4:	2002      	movs	r0, #2
 800bcb6:	f7ff fe11 	bl	800b8dc <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	37c8      	adds	r7, #200	; 0xc8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bdb0      	pop	{r4, r5, r7, pc}
 800bcc4:	0801b3f4 	.word	0x0801b3f4
 800bcc8:	0801b3fc 	.word	0x0801b3fc
 800bccc:	0801b404 	.word	0x0801b404
 800bcd0:	0801b414 	.word	0x0801b414
 800bcd4:	200003b8 	.word	0x200003b8
 800bcd8:	0801b3c4 	.word	0x0801b3c4
 800bcdc:	0801b3dc 	.word	0x0801b3dc

0800bce0 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	6039      	str	r1, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bcec:	2300      	movs	r3, #0
 800bcee:	73fb      	strb	r3, [r7, #15]
 800bcf0:	e01a      	b.n	800bd28 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bcf2:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <SecureElementGetKeyByID+0x5c>)
 800bcf4:	6819      	ldr	r1, [r3, #0]
 800bcf6:	7bfa      	ldrb	r2, [r7, #15]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	4413      	add	r3, r2
 800bcfe:	440b      	add	r3, r1
 800bd00:	3310      	adds	r3, #16
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	79fa      	ldrb	r2, [r7, #7]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d10b      	bne.n	800bd22 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bd0a:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <SecureElementGetKeyByID+0x5c>)
 800bd0c:	6819      	ldr	r1, [r3, #0]
 800bd0e:	7bfa      	ldrb	r2, [r7, #15]
 800bd10:	4613      	mov	r3, r2
 800bd12:	011b      	lsls	r3, r3, #4
 800bd14:	4413      	add	r3, r2
 800bd16:	3310      	adds	r3, #16
 800bd18:	18ca      	adds	r2, r1, r3
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e006      	b.n	800bd30 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	3301      	adds	r3, #1
 800bd26:	73fb      	strb	r3, [r7, #15]
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	d9e1      	bls.n	800bcf2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd2e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	200003b8 	.word	0x200003b8

0800bd40 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	4603      	mov	r3, r0
 800bd48:	6039      	str	r1, [r7, #0]
 800bd4a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd52:	2302      	movs	r3, #2
 800bd54:	e04c      	b.n	800bdf0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd56:	2300      	movs	r3, #0
 800bd58:	77fb      	strb	r3, [r7, #31]
 800bd5a:	e045      	b.n	800bde8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bd5c:	4b26      	ldr	r3, [pc, #152]	; (800bdf8 <SecureElementSetKey+0xb8>)
 800bd5e:	6819      	ldr	r1, [r3, #0]
 800bd60:	7ffa      	ldrb	r2, [r7, #31]
 800bd62:	4613      	mov	r3, r2
 800bd64:	011b      	lsls	r3, r3, #4
 800bd66:	4413      	add	r3, r2
 800bd68:	440b      	add	r3, r1
 800bd6a:	3310      	adds	r3, #16
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	79fa      	ldrb	r2, [r7, #7]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d136      	bne.n	800bde2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	2b80      	cmp	r3, #128	; 0x80
 800bd78:	d123      	bne.n	800bdc2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bd7a:	2306      	movs	r3, #6
 800bd7c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	f107 0310 	add.w	r3, r7, #16
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	605a      	str	r2, [r3, #4]
 800bd8c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	227f      	movs	r2, #127	; 0x7f
 800bd94:	2110      	movs	r1, #16
 800bd96:	6838      	ldr	r0, [r7, #0]
 800bd98:	f000 f87d 	bl	800be96 <SecureElementAesEncrypt>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bda0:	4b15      	ldr	r3, [pc, #84]	; (800bdf8 <SecureElementSetKey+0xb8>)
 800bda2:	6819      	ldr	r1, [r3, #0]
 800bda4:	7ffa      	ldrb	r2, [r7, #31]
 800bda6:	4613      	mov	r3, r2
 800bda8:	011b      	lsls	r3, r3, #4
 800bdaa:	4413      	add	r3, r2
 800bdac:	3310      	adds	r3, #16
 800bdae:	440b      	add	r3, r1
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	f107 010c 	add.w	r1, r7, #12
 800bdb6:	2210      	movs	r2, #16
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f00a faf6 	bl	80163aa <memcpy1>
                return retval;
 800bdbe:	7fbb      	ldrb	r3, [r7, #30]
 800bdc0:	e016      	b.n	800bdf0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	; (800bdf8 <SecureElementSetKey+0xb8>)
 800bdc4:	6819      	ldr	r1, [r3, #0]
 800bdc6:	7ffa      	ldrb	r2, [r7, #31]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	011b      	lsls	r3, r3, #4
 800bdcc:	4413      	add	r3, r2
 800bdce:	3310      	adds	r3, #16
 800bdd0:	440b      	add	r3, r1
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	2210      	movs	r2, #16
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f00a fae6 	bl	80163aa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e006      	b.n	800bdf0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bde2:	7ffb      	ldrb	r3, [r7, #31]
 800bde4:	3301      	adds	r3, #1
 800bde6:	77fb      	strb	r3, [r7, #31]
 800bde8:	7ffb      	ldrb	r3, [r7, #31]
 800bdea:	2b09      	cmp	r3, #9
 800bdec:	d9b6      	bls.n	800bd5c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdee:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3720      	adds	r7, #32
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	200003b8 	.word	0x200003b8

0800bdfc <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4611      	mov	r1, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	460b      	mov	r3, r1
 800be0c:	80fb      	strh	r3, [r7, #6]
 800be0e:	4613      	mov	r3, r2
 800be10:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800be12:	797b      	ldrb	r3, [r7, #5]
 800be14:	2b7e      	cmp	r3, #126	; 0x7e
 800be16:	d901      	bls.n	800be1c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be18:	2303      	movs	r3, #3
 800be1a:	e009      	b.n	800be30 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800be1c:	7979      	ldrb	r1, [r7, #5]
 800be1e:	88fa      	ldrh	r2, [r7, #6]
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	460b      	mov	r3, r1
 800be26:	68b9      	ldr	r1, [r7, #8]
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7ff fe69 	bl	800bb00 <ComputeCmac>
 800be2e:	4603      	mov	r3, r0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	607a      	str	r2, [r7, #4]
 800be42:	461a      	mov	r2, r3
 800be44:	460b      	mov	r3, r1
 800be46:	817b      	strh	r3, [r7, #10]
 800be48:	4613      	mov	r3, r2
 800be4a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be52:	2302      	movs	r3, #2
 800be54:	e01b      	b.n	800be8e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800be56:	2306      	movs	r3, #6
 800be58:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800be5e:	7a79      	ldrb	r1, [r7, #9]
 800be60:	897a      	ldrh	r2, [r7, #10]
 800be62:	f107 0310 	add.w	r3, r7, #16
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	460b      	mov	r3, r1
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7ff fe47 	bl	800bb00 <ComputeCmac>
 800be72:	4603      	mov	r3, r0
 800be74:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	e006      	b.n	800be8e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	d001      	beq.n	800be8c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800be88:	2301      	movs	r3, #1
 800be8a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b0c2      	sub	sp, #264	; 0x108
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	1d3a      	adds	r2, r7, #4
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	4603      	mov	r3, r0
 800bea8:	817b      	strh	r3, [r7, #10]
 800beaa:	460b      	mov	r3, r1
 800beac:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <SecureElementAesEncrypt+0x26>
 800beb4:	1d3b      	adds	r3, r7, #4
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bebc:	2302      	movs	r3, #2
 800bebe:	e043      	b.n	800bf48 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bec0:	897b      	ldrh	r3, [r7, #10]
 800bec2:	f003 030f 	and.w	r3, r3, #15
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800becc:	2305      	movs	r3, #5
 800bece:	e03b      	b.n	800bf48 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bed0:	f107 0314 	add.w	r3, r7, #20
 800bed4:	22f0      	movs	r2, #240	; 0xf0
 800bed6:	2100      	movs	r1, #0
 800bed8:	4618      	mov	r0, r3
 800beda:	f00a faa1 	bl	8016420 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bede:	f107 0210 	add.w	r2, r7, #16
 800bee2:	7a7b      	ldrb	r3, [r7, #9]
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fdda 	bl	800baa0 <GetKeyByID>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bef2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d124      	bne.n	800bf44 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	3301      	adds	r3, #1
 800befe:	f107 0214 	add.w	r2, r7, #20
 800bf02:	2110      	movs	r1, #16
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff fbc1 	bl	800b68c <lorawan_aes_set_key>

        uint8_t block = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bf10:	e015      	b.n	800bf3e <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bf12:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	18d0      	adds	r0, r2, r3
 800bf1a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf1e:	1d3a      	adds	r2, r7, #4
 800bf20:	6812      	ldr	r2, [r2, #0]
 800bf22:	4413      	add	r3, r2
 800bf24:	f107 0214 	add.w	r2, r7, #20
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f7ff fc8d 	bl	800b848 <lorawan_aes_encrypt>
            block = block + 16;
 800bf2e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bf32:	3310      	adds	r3, #16
 800bf34:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bf38:	897b      	ldrh	r3, [r7, #10]
 800bf3a:	3b10      	subs	r3, #16
 800bf3c:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bf3e:	897b      	ldrh	r3, [r7, #10]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e6      	bne.n	800bf12 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bf44:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b088      	sub	sp, #32
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	70fb      	strb	r3, [r7, #3]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	e02e      	b.n	800bfca <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bf6c:	2306      	movs	r3, #6
 800bf6e:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bf70:	78bb      	ldrb	r3, [r7, #2]
 800bf72:	2b7f      	cmp	r3, #127	; 0x7f
 800bf74:	d104      	bne.n	800bf80 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	2b04      	cmp	r3, #4
 800bf7a:	d001      	beq.n	800bf80 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e024      	b.n	800bfca <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bf80:	2300      	movs	r3, #0
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	f107 0310 	add.w	r3, r7, #16
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	605a      	str	r2, [r3, #4]
 800bf8e:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bf90:	f107 030c 	add.w	r3, r7, #12
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	2110      	movs	r1, #16
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff7c 	bl	800be96 <SecureElementAesEncrypt>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bfa2:	7ffb      	ldrb	r3, [r7, #31]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d001      	beq.n	800bfac <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bfa8:	7ffb      	ldrb	r3, [r7, #31]
 800bfaa:	e00e      	b.n	800bfca <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bfac:	f107 020c 	add.w	r2, r7, #12
 800bfb0:	78bb      	ldrb	r3, [r7, #2]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff fec3 	bl	800bd40 <SecureElementSetKey>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bfbe:	7ffb      	ldrb	r3, [r7, #31]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bfc4:	7ffb      	ldrb	r3, [r7, #31]
 800bfc6:	e000      	b.n	800bfca <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bfc8:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3720      	adds	r7, #32
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607b      	str	r3, [r7, #4]
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d005      	beq.n	800bff6 <SecureElementProcessJoinAccept+0x24>
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <SecureElementProcessJoinAccept+0x24>
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bff6:	2302      	movs	r3, #2
 800bff8:	e064      	b.n	800c0c4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bffe:	2b21      	cmp	r3, #33	; 0x21
 800c000:	d901      	bls.n	800c006 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c002:	2305      	movs	r3, #5
 800c004:	e05e      	b.n	800c0c4 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c00a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c016:	f00a f9c8 	bl	80163aa <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	1c58      	adds	r0, r3, #1
 800c01e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c022:	b29b      	uxth	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	b299      	uxth	r1, r3
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	3301      	adds	r3, #1
 800c02c:	7dfa      	ldrb	r2, [r7, #23]
 800c02e:	f7ff ff32 	bl	800be96 <SecureElementAesEncrypt>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d001      	beq.n	800c03c <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c038:	2307      	movs	r3, #7
 800c03a:	e043      	b.n	800c0c4 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	330b      	adds	r3, #11
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	09db      	lsrs	r3, r3, #7
 800c044:	b2da      	uxtb	r2, r3
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c04e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c052:	3b04      	subs	r3, #4
 800c054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c056:	4413      	add	r3, r2
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c05c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c060:	3b03      	subs	r3, #3
 800c062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c064:	4413      	add	r3, r2
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c070:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c074:	3b02      	subs	r3, #2
 800c076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c078:	4413      	add	r3, r2
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	041b      	lsls	r3, r3, #16
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	4313      	orrs	r3, r2
 800c082:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c084:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c088:	3b01      	subs	r3, #1
 800c08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08c:	4413      	add	r3, r2
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	061b      	lsls	r3, r3, #24
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10e      	bne.n	800c0be <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c0a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	b299      	uxth	r1, r3
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b0:	f7ff fec2 	bl	800be38 <SecureElementVerifyAesCmac>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e002      	b.n	800c0c4 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c0be:	2304      	movs	r3, #4
 800c0c0:	e000      	b.n	800c0c4 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e006      	b.n	800c0ec <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c0de:	4b05      	ldr	r3, [pc, #20]	; (800c0f4 <SecureElementRandomNumber+0x28>)
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	4798      	blx	r3
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	0801bbc4 	.word	0x0801bbc4

0800c0f8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c106:	2302      	movs	r3, #2
 800c108:	e007      	b.n	800c11a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c10a:	4b06      	ldr	r3, [pc, #24]	; (800c124 <SecureElementSetDevEui+0x2c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2208      	movs	r2, #8
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4618      	mov	r0, r3
 800c114:	f00a f949 	bl	80163aa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	200003b8 	.word	0x200003b8

0800c128 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c128:	b480      	push	{r7}
 800c12a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c12c:	4b02      	ldr	r3, [pc, #8]	; (800c138 <SecureElementGetDevEui+0x10>)
 800c12e:	681b      	ldr	r3, [r3, #0]
}
 800c130:	4618      	mov	r0, r3
 800c132:	46bd      	mov	sp, r7
 800c134:	bc80      	pop	{r7}
 800c136:	4770      	bx	lr
 800c138:	200003b8 	.word	0x200003b8

0800c13c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c14a:	2302      	movs	r3, #2
 800c14c:	e008      	b.n	800c160 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c14e:	4b06      	ldr	r3, [pc, #24]	; (800c168 <SecureElementSetJoinEui+0x2c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3308      	adds	r3, #8
 800c154:	2208      	movs	r2, #8
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4618      	mov	r0, r3
 800c15a:	f00a f926 	bl	80163aa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c15e:	2300      	movs	r3, #0
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	200003b8 	.word	0x200003b8

0800c16c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c170:	4b03      	ldr	r3, [pc, #12]	; (800c180 <SecureElementGetJoinEui+0x14>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3308      	adds	r3, #8
}
 800c176:	4618      	mov	r0, r3
 800c178:	46bd      	mov	sp, r7
 800c17a:	bc80      	pop	{r7}
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	200003b8 	.word	0x200003b8

0800c184 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c18c:	4a1a      	ldr	r2, [pc, #104]	; (800c1f8 <LmHandlerInit+0x74>)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c192:	4b1a      	ldr	r3, [pc, #104]	; (800c1fc <LmHandlerInit+0x78>)
 800c194:	4a1a      	ldr	r2, [pc, #104]	; (800c200 <LmHandlerInit+0x7c>)
 800c196:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c198:	4b18      	ldr	r3, [pc, #96]	; (800c1fc <LmHandlerInit+0x78>)
 800c19a:	4a1a      	ldr	r2, [pc, #104]	; (800c204 <LmHandlerInit+0x80>)
 800c19c:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c19e:	4b17      	ldr	r3, [pc, #92]	; (800c1fc <LmHandlerInit+0x78>)
 800c1a0:	4a19      	ldr	r2, [pc, #100]	; (800c208 <LmHandlerInit+0x84>)
 800c1a2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c1a4:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <LmHandlerInit+0x78>)
 800c1a6:	4a19      	ldr	r2, [pc, #100]	; (800c20c <LmHandlerInit+0x88>)
 800c1a8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c1aa:	4b13      	ldr	r3, [pc, #76]	; (800c1f8 <LmHandlerInit+0x74>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a17      	ldr	r2, [pc, #92]	; (800c210 <LmHandlerInit+0x8c>)
 800c1b2:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c1b4:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <LmHandlerInit+0x74>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	4a15      	ldr	r2, [pc, #84]	; (800c210 <LmHandlerInit+0x8c>)
 800c1bc:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c1be:	4b0e      	ldr	r3, [pc, #56]	; (800c1f8 <LmHandlerInit+0x74>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	4a12      	ldr	r2, [pc, #72]	; (800c210 <LmHandlerInit+0x8c>)
 800c1c6:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c1c8:	4b11      	ldr	r3, [pc, #68]	; (800c210 <LmHandlerInit+0x8c>)
 800c1ca:	4a12      	ldr	r2, [pc, #72]	; (800c214 <LmHandlerInit+0x90>)
 800c1cc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c1ce:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <LmHandlerInit+0x74>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	4a0e      	ldr	r2, [pc, #56]	; (800c210 <LmHandlerInit+0x8c>)
 800c1d6:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c1d8:	490f      	ldr	r1, [pc, #60]	; (800c218 <LmHandlerInit+0x94>)
 800c1da:	2000      	movs	r0, #0
 800c1dc:	f000 fcfe 	bl	800cbdc <LmHandlerPackageRegister>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	e000      	b.n	800c1ee <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200003e0 	.word	0x200003e0
 800c1fc:	200003e4 	.word	0x200003e4
 800c200:	0800c931 	.word	0x0800c931
 800c204:	0800c999 	.word	0x0800c999
 800c208:	0800ca79 	.word	0x0800ca79
 800c20c:	0800cb3d 	.word	0x0800cb3d
 800c210:	200003f4 	.word	0x200003f4
 800c214:	0800ce4d 	.word	0x0800ce4d
 800c218:	200000b8 	.word	0x200000b8

0800c21c <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c21e:	b099      	sub	sp, #100	; 0x64
 800c220:	af08      	add	r7, sp, #32
 800c222:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c228:	2210      	movs	r2, #16
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	4882      	ldr	r0, [pc, #520]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c22e:	f00d fac5 	bl	80197bc <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c232:	f7fe fb73 	bl	800a91c <LoraInfo_GetPtr>
 800c236:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c238:	4b7f      	ldr	r3, [pc, #508]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	461a      	mov	r2, r3
 800c23e:	2301      	movs	r3, #1
 800c240:	4093      	lsls	r3, r2
 800c242:	461a      	mov	r2, r3
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	4013      	ands	r3, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00c      	beq.n	800c268 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c24e:	4b7a      	ldr	r3, [pc, #488]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	4979      	ldr	r1, [pc, #484]	; (800c43c <LmHandlerConfigure+0x220>)
 800c256:	487a      	ldr	r0, [pc, #488]	; (800c440 <LmHandlerConfigure+0x224>)
 800c258:	f004 fb1a 	bl	8010890 <LoRaMacInitialization>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d009      	beq.n	800c276 <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c262:	f04f 33ff 	mov.w	r3, #4294967295
 800c266:	e0e2      	b.n	800c42e <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c268:	4b76      	ldr	r3, [pc, #472]	; (800c444 <LmHandlerConfigure+0x228>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	2100      	movs	r1, #0
 800c26e:	2000      	movs	r0, #0
 800c270:	f00e fadc 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c274:	e7fe      	b.n	800c274 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c276:	f000 fdfa 	bl	800ce6e <NvmDataMgmtRestore>
 800c27a:	4603      	mov	r3, r0
 800c27c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c27e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c284:	4b70      	ldr	r3, [pc, #448]	; (800c448 <LmHandlerConfigure+0x22c>)
 800c286:	2201      	movs	r2, #1
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	e002      	b.n	800c292 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c28c:	4b6e      	ldr	r3, [pc, #440]	; (800c448 <LmHandlerConfigure+0x22c>)
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c292:	2302      	movs	r3, #2
 800c294:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c296:	f107 0314 	add.w	r3, r7, #20
 800c29a:	4618      	mov	r0, r3
 800c29c:	f004 fe42 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	2208      	movs	r2, #8
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4869      	ldr	r0, [pc, #420]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2a8:	f00a f87f 	bl	80163aa <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c2b0:	f107 0314 	add.w	r3, r7, #20
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f004 fe35 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	2208      	movs	r2, #8
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4863      	ldr	r0, [pc, #396]	; (800c450 <LmHandlerConfigure+0x234>)
 800c2c2:	f00a f872 	bl	80163aa <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c2c6:	4b63      	ldr	r3, [pc, #396]	; (800c454 <LmHandlerConfigure+0x238>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	4798      	blx	r3
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	4a5e      	ldr	r2, [pc, #376]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2d2:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c2d8:	4b5c      	ldr	r3, [pc, #368]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c2de:	f107 0314 	add.w	r3, r7, #20
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f004 ff7c 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c2e8:	4b58      	ldr	r3, [pc, #352]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4b57      	ldr	r3, [pc, #348]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2f0:	785b      	ldrb	r3, [r3, #1]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	4b55      	ldr	r3, [pc, #340]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2f6:	789b      	ldrb	r3, [r3, #2]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	4b54      	ldr	r3, [pc, #336]	; (800c44c <LmHandlerConfigure+0x230>)
 800c2fc:	78db      	ldrb	r3, [r3, #3]
 800c2fe:	461c      	mov	r4, r3
 800c300:	4b52      	ldr	r3, [pc, #328]	; (800c44c <LmHandlerConfigure+0x230>)
 800c302:	791b      	ldrb	r3, [r3, #4]
 800c304:	461d      	mov	r5, r3
 800c306:	4b51      	ldr	r3, [pc, #324]	; (800c44c <LmHandlerConfigure+0x230>)
 800c308:	795b      	ldrb	r3, [r3, #5]
 800c30a:	461e      	mov	r6, r3
 800c30c:	4b4f      	ldr	r3, [pc, #316]	; (800c44c <LmHandlerConfigure+0x230>)
 800c30e:	799b      	ldrb	r3, [r3, #6]
 800c310:	603b      	str	r3, [r7, #0]
 800c312:	4b4e      	ldr	r3, [pc, #312]	; (800c44c <LmHandlerConfigure+0x230>)
 800c314:	79db      	ldrb	r3, [r3, #7]
 800c316:	9307      	str	r3, [sp, #28]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	9306      	str	r3, [sp, #24]
 800c31c:	9605      	str	r6, [sp, #20]
 800c31e:	9504      	str	r5, [sp, #16]
 800c320:	9403      	str	r4, [sp, #12]
 800c322:	9002      	str	r0, [sp, #8]
 800c324:	9101      	str	r1, [sp, #4]
 800c326:	9200      	str	r2, [sp, #0]
 800c328:	4b4b      	ldr	r3, [pc, #300]	; (800c458 <LmHandlerConfigure+0x23c>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	2100      	movs	r1, #0
 800c32e:	2002      	movs	r0, #2
 800c330:	f00e fa7c 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c334:	4b45      	ldr	r3, [pc, #276]	; (800c44c <LmHandlerConfigure+0x230>)
 800c336:	7a1b      	ldrb	r3, [r3, #8]
 800c338:	461a      	mov	r2, r3
 800c33a:	4b44      	ldr	r3, [pc, #272]	; (800c44c <LmHandlerConfigure+0x230>)
 800c33c:	7a5b      	ldrb	r3, [r3, #9]
 800c33e:	4619      	mov	r1, r3
 800c340:	4b42      	ldr	r3, [pc, #264]	; (800c44c <LmHandlerConfigure+0x230>)
 800c342:	7a9b      	ldrb	r3, [r3, #10]
 800c344:	4618      	mov	r0, r3
 800c346:	4b41      	ldr	r3, [pc, #260]	; (800c44c <LmHandlerConfigure+0x230>)
 800c348:	7adb      	ldrb	r3, [r3, #11]
 800c34a:	461c      	mov	r4, r3
 800c34c:	4b3f      	ldr	r3, [pc, #252]	; (800c44c <LmHandlerConfigure+0x230>)
 800c34e:	7b1b      	ldrb	r3, [r3, #12]
 800c350:	461d      	mov	r5, r3
 800c352:	4b3e      	ldr	r3, [pc, #248]	; (800c44c <LmHandlerConfigure+0x230>)
 800c354:	7b5b      	ldrb	r3, [r3, #13]
 800c356:	461e      	mov	r6, r3
 800c358:	4b3c      	ldr	r3, [pc, #240]	; (800c44c <LmHandlerConfigure+0x230>)
 800c35a:	7b9b      	ldrb	r3, [r3, #14]
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	4b3b      	ldr	r3, [pc, #236]	; (800c44c <LmHandlerConfigure+0x230>)
 800c360:	7bdb      	ldrb	r3, [r3, #15]
 800c362:	9307      	str	r3, [sp, #28]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	9306      	str	r3, [sp, #24]
 800c368:	9605      	str	r6, [sp, #20]
 800c36a:	9504      	str	r5, [sp, #16]
 800c36c:	9403      	str	r4, [sp, #12]
 800c36e:	9002      	str	r0, [sp, #8]
 800c370:	9101      	str	r1, [sp, #4]
 800c372:	9200      	str	r2, [sp, #0]
 800c374:	4b39      	ldr	r3, [pc, #228]	; (800c45c <LmHandlerConfigure+0x240>)
 800c376:	2200      	movs	r2, #0
 800c378:	2100      	movs	r1, #0
 800c37a:	2002      	movs	r0, #2
 800c37c:	f00e fa56 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c380:	4b37      	ldr	r3, [pc, #220]	; (800c460 <LmHandlerConfigure+0x244>)
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	461a      	mov	r2, r3
 800c386:	4b37      	ldr	r3, [pc, #220]	; (800c464 <LmHandlerConfigure+0x248>)
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	4619      	mov	r1, r3
 800c38c:	4b36      	ldr	r3, [pc, #216]	; (800c468 <LmHandlerConfigure+0x24c>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	4618      	mov	r0, r3
 800c392:	4b36      	ldr	r3, [pc, #216]	; (800c46c <LmHandlerConfigure+0x250>)
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	9002      	str	r0, [sp, #8]
 800c39a:	9101      	str	r1, [sp, #4]
 800c39c:	9200      	str	r2, [sp, #0]
 800c39e:	4b34      	ldr	r3, [pc, #208]	; (800c470 <LmHandlerConfigure+0x254>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	2002      	movs	r0, #2
 800c3a6:	f00e fa41 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c3aa:	230f      	movs	r3, #15
 800c3ac:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c3b2:	f107 0314 	add.w	r3, r7, #20
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f004 ff12 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c3bc:	2305      	movs	r3, #5
 800c3be:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c3c4:	f107 0314 	add.w	r3, r7, #20
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f004 ff09 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c3ce:	2310      	movs	r3, #16
 800c3d0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c3d6:	f107 0314 	add.w	r3, r7, #20
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f004 ff00 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c3e0:	2304      	movs	r3, #4
 800c3e2:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c3e4:	4b14      	ldr	r3, [pc, #80]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c3e6:	789b      	ldrb	r3, [r3, #2]
 800c3e8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c3ea:	f107 0314 	add.w	r3, r7, #20
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f004 fef6 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c3f4:	230f      	movs	r3, #15
 800c3f6:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c3f8:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	f107 020c 	add.w	r2, r7, #12
 800c400:	4611      	mov	r1, r2
 800c402:	4618      	mov	r0, r3
 800c404:	f007 fcc6 	bl	8013d94 <RegionGetPhyParam>
 800c408:	4603      	mov	r3, r0
 800c40a:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bf14      	ite	ne
 800c412:	2301      	movne	r3, #1
 800c414:	2300      	moveq	r3, #0
 800c416:	b2da      	uxtb	r2, r3
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c41a:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c41c:	2014      	movs	r0, #20
 800c41e:	f000 fa6f 	bl	800c900 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c422:	4b05      	ldr	r3, [pc, #20]	; (800c438 <LmHandlerConfigure+0x21c>)
 800c424:	795b      	ldrb	r3, [r3, #5]
 800c426:	4618      	mov	r0, r3
 800c428:	f005 fc4e 	bl	8011cc8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3744      	adds	r7, #68	; 0x44
 800c432:	46bd      	mov	sp, r7
 800c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c436:	bf00      	nop
 800c438:	200003d0 	.word	0x200003d0
 800c43c:	200003f4 	.word	0x200003f4
 800c440:	200003e4 	.word	0x200003e4
 800c444:	0801b424 	.word	0x0801b424
 800c448:	20000512 	.word	0x20000512
 800c44c:	200000a0 	.word	0x200000a0
 800c450:	200000a8 	.word	0x200000a8
 800c454:	200003e0 	.word	0x200003e0
 800c458:	0801b470 	.word	0x0801b470
 800c45c:	0801b4ac 	.word	0x0801b4ac
 800c460:	200000b7 	.word	0x200000b7
 800c464:	200000b6 	.word	0x200000b6
 800c468:	200000b5 	.word	0x200000b5
 800c46c:	200000b4 	.word	0x200000b4
 800c470:	0801b4e8 	.word	0x0801b4e8

0800c474 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c478:	f002 f9b8 	bl	800e7ec <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c47c:	f000 fc9a 	bl	800cdb4 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c480:	f000 fcee 	bl	800ce60 <NvmDataMgmtStore>
}
 800c484:	bf00      	nop
 800c486:	bd80      	pop	{r7, pc}

0800c488 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b090      	sub	sp, #64	; 0x40
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	2b02      	cmp	r3, #2
 800c496:	d111      	bne.n	800c4bc <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c498:	4b23      	ldr	r3, [pc, #140]	; (800c528 <LmHandlerJoin+0xa0>)
 800c49a:	2202      	movs	r2, #2
 800c49c:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c49e:	f004 fcab 	bl	8010df8 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c4a6:	4b21      	ldr	r3, [pc, #132]	; (800c52c <LmHandlerJoin+0xa4>)
 800c4a8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f005 f9d1 	bl	801185c <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c4ba:	e030      	b.n	800c51e <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	; (800c528 <LmHandlerJoin+0xa0>)
 800c4be:	2201      	movs	r2, #1
 800c4c0:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c4c2:	4b1a      	ldr	r3, [pc, #104]	; (800c52c <LmHandlerJoin+0xa4>)
 800c4c4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c4c8:	4b17      	ldr	r3, [pc, #92]	; (800c528 <LmHandlerJoin+0xa0>)
 800c4ca:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c4cc:	4b16      	ldr	r3, [pc, #88]	; (800c528 <LmHandlerJoin+0xa0>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c4d2:	4b17      	ldr	r3, [pc, #92]	; (800c530 <LmHandlerJoin+0xa8>)
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f083 0301 	eor.w	r3, r3, #1
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d008      	beq.n	800c4f2 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c4e0:	2327      	movs	r3, #39	; 0x27
 800c4e2:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c4e4:	4b13      	ldr	r3, [pc, #76]	; (800c534 <LmHandlerJoin+0xac>)
 800c4e6:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c4e8:	f107 031c 	add.w	r3, r7, #28
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f004 fe77 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c4f2:	f004 fc81 	bl	8010df8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c500:	f107 031c 	add.w	r3, r7, #28
 800c504:	4618      	mov	r0, r3
 800c506:	f004 fe6b 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c50a:	4b0b      	ldr	r3, [pc, #44]	; (800c538 <LmHandlerJoin+0xb0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	69db      	ldr	r3, [r3, #28]
 800c510:	4805      	ldr	r0, [pc, #20]	; (800c528 <LmHandlerJoin+0xa0>)
 800c512:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <LmHandlerJoin+0xa4>)
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f917 	bl	800c74c <LmHandlerRequestClass>
}
 800c51e:	bf00      	nop
 800c520:	3740      	adds	r7, #64	; 0x40
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	200000c4 	.word	0x200000c4
 800c52c:	200003d0 	.word	0x200003d0
 800c530:	20000512 	.word	0x20000512
 800c534:	01000300 	.word	0x01000300
 800c538:	200003e0 	.word	0x200003e0

0800c53c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	; 0x28
 800c540:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c542:	2301      	movs	r3, #1
 800c544:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c546:	463b      	mov	r3, r7
 800c548:	4618      	mov	r0, r3
 800c54a:	f004 fceb 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
 800c54e:	4603      	mov	r3, r0
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d106      	bne.n	800c56a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c55c:	793b      	ldrb	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c562:	2300      	movs	r3, #0
 800c564:	e002      	b.n	800c56c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c56a:	2300      	movs	r3, #0
    }
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3728      	adds	r7, #40	; 0x28
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08c      	sub	sp, #48	; 0x30
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	461a      	mov	r2, r3
 800c580:	460b      	mov	r3, r1
 800c582:	72fb      	strb	r3, [r7, #11]
 800c584:	4613      	mov	r3, r2
 800c586:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c588:	23ff      	movs	r3, #255	; 0xff
 800c58a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c58e:	f001 fe97 	bl	800e2c0 <LoRaMacIsBusy>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c598:	f06f 0301 	mvn.w	r3, #1
 800c59c:	e0b4      	b.n	800c708 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c59e:	f7ff ffcd 	bl	800c53c <LmHandlerJoinStatus>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d007      	beq.n	800c5b8 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c5a8:	4b59      	ldr	r3, [pc, #356]	; (800c710 <LmHandlerSend+0x19c>)
 800c5aa:	789b      	ldrb	r3, [r3, #2]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff ff6b 	bl	800c488 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c5b2:	f06f 0302 	mvn.w	r3, #2
 800c5b6:	e0a7      	b.n	800c708 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c5b8:	4b56      	ldr	r3, [pc, #344]	; (800c714 <LmHandlerSend+0x1a0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	4798      	blx	r3
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00d      	beq.n	800c5e2 <LmHandlerSend+0x6e>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	4b52      	ldr	r3, [pc, #328]	; (800c714 <LmHandlerSend+0x1a0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d006      	beq.n	800c5e2 <LmHandlerSend+0x6e>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c5dc:	f06f 0303 	mvn.w	r3, #3
 800c5e0:	e092      	b.n	800c708 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c5e2:	4b4d      	ldr	r3, [pc, #308]	; (800c718 <LmHandlerSend+0x1a4>)
 800c5e4:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c5e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	785b      	ldrb	r3, [r3, #1]
 800c5f0:	f107 0214 	add.w	r2, r7, #20
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f004 fc0c 	bl	8010e14 <LoRaMacQueryTxPossible>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d009      	beq.n	800c616 <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c602:	4b46      	ldr	r3, [pc, #280]	; (800c71c <LmHandlerSend+0x1a8>)
 800c604:	2200      	movs	r2, #0
 800c606:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c608:	2300      	movs	r3, #0
 800c60a:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c614:	e017      	b.n	800c646 <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c616:	4a41      	ldr	r2, [pc, #260]	; (800c71c <LmHandlerSend+0x1a8>)
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	b29b      	uxth	r3, r3
 800c628:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c630:	7afb      	ldrb	r3, [r7, #11]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d102      	bne.n	800c63c <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c636:	2300      	movs	r3, #0
 800c638:	763b      	strb	r3, [r7, #24]
 800c63a:	e004      	b.n	800c646 <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c63c:	2301      	movs	r3, #1
 800c63e:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c640:	2308      	movs	r3, #8
 800c642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c646:	4b35      	ldr	r3, [pc, #212]	; (800c71c <LmHandlerSend+0x1a8>)
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	330c      	adds	r3, #12
 800c64c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c650:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c654:	4b30      	ldr	r3, [pc, #192]	; (800c718 <LmHandlerSend+0x1a4>)
 800c656:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c65a:	4b30      	ldr	r3, [pc, #192]	; (800c71c <LmHandlerSend+0x1a8>)
 800c65c:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c65e:	7aba      	ldrb	r2, [r7, #10]
 800c660:	f107 0318 	add.w	r3, r7, #24
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f005 fa38 	bl	8011adc <LoRaMacMcpsRequest>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c67e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c682:	2b11      	cmp	r3, #17
 800c684:	d83a      	bhi.n	800c6fc <LmHandlerSend+0x188>
 800c686:	a201      	add	r2, pc, #4	; (adr r2, 800c68c <LmHandlerSend+0x118>)
 800c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c6dd 	.word	0x0800c6dd
 800c694:	0800c6fd 	.word	0x0800c6fd
 800c698:	0800c6fd 	.word	0x0800c6fd
 800c69c:	0800c6fd 	.word	0x0800c6fd
 800c6a0:	0800c6fd 	.word	0x0800c6fd
 800c6a4:	0800c6fd 	.word	0x0800c6fd
 800c6a8:	0800c6e5 	.word	0x0800c6e5
 800c6ac:	0800c6fd 	.word	0x0800c6fd
 800c6b0:	0800c6fd 	.word	0x0800c6fd
 800c6b4:	0800c6fd 	.word	0x0800c6fd
 800c6b8:	0800c6f5 	.word	0x0800c6f5
 800c6bc:	0800c6fd 	.word	0x0800c6fd
 800c6c0:	0800c6fd 	.word	0x0800c6fd
 800c6c4:	0800c6dd 	.word	0x0800c6dd
 800c6c8:	0800c6dd 	.word	0x0800c6dd
 800c6cc:	0800c6dd 	.word	0x0800c6dd
 800c6d0:	0800c6ed 	.word	0x0800c6ed
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c6da:	e013      	b.n	800c704 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c6dc:	23fe      	movs	r3, #254	; 0xfe
 800c6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c6e2:	e00f      	b.n	800c704 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6e4:	23fd      	movs	r3, #253	; 0xfd
 800c6e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c6ea:	e00b      	b.n	800c704 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c6ec:	23fb      	movs	r3, #251	; 0xfb
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c6f2:	e007      	b.n	800c704 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c6f4:	23fa      	movs	r3, #250	; 0xfa
 800c6f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c6fa:	e003      	b.n	800c704 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c702:	bf00      	nop
    }

    return lmhStatus;
 800c704:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3730      	adds	r7, #48	; 0x30
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	200000c4 	.word	0x200000c4
 800c714:	200003bc 	.word	0x200003bc
 800c718:	200003d0 	.word	0x200003d0
 800c71c:	20000408 	.word	0x20000408

0800c720 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b086      	sub	sp, #24
 800c724:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c726:	230a      	movs	r3, #10
 800c728:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c72a:	463b      	mov	r3, r7
 800c72c:	4618      	mov	r0, r3
 800c72e:	f005 f895 	bl	801185c <LoRaMacMlmeRequest>
 800c732:	4603      	mov	r3, r0
 800c734:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c73c:	2300      	movs	r3, #0
 800c73e:	e001      	b.n	800c744 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c740:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c744:	4618      	mov	r0, r3
 800c746:	3718      	adds	r7, #24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08c      	sub	sp, #48	; 0x30
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c756:	2300      	movs	r3, #0
 800c758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c75c:	f001 fdb0 	bl	800e2c0 <LoRaMacIsBusy>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d002      	beq.n	800c76c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c766:	f06f 0301 	mvn.w	r3, #1
 800c76a:	e07b      	b.n	800c864 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c76c:	f7ff fee6 	bl	800c53c <LmHandlerJoinStatus>
 800c770:	4603      	mov	r3, r0
 800c772:	2b01      	cmp	r3, #1
 800c774:	d002      	beq.n	800c77c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c776:	f06f 0302 	mvn.w	r3, #2
 800c77a:	e073      	b.n	800c864 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c77c:	2300      	movs	r3, #0
 800c77e:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c780:	f107 0308 	add.w	r3, r7, #8
 800c784:	4618      	mov	r0, r3
 800c786:	f004 fbcd 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c790:	f04f 33ff 	mov.w	r3, #4294967295
 800c794:	e066      	b.n	800c864 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c796:	7b3b      	ldrb	r3, [r7, #12]
 800c798:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c79c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d055      	beq.n	800c852 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c7a6:	79fb      	ldrb	r3, [r7, #7]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d02c      	beq.n	800c806 <LmHandlerRequestClass+0xba>
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	dc52      	bgt.n	800c856 <LmHandlerRequestClass+0x10a>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <LmHandlerRequestClass+0x6e>
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d022      	beq.n	800c7fe <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c7b8:	e04d      	b.n	800c856 <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c7ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d04b      	beq.n	800c85a <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c7c2:	79fb      	ldrb	r3, [r7, #7]
 800c7c4:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f004 fd08 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10f      	bne.n	800c7f6 <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fb1f 	bl	800ce1c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c7de:	4b23      	ldr	r3, [pc, #140]	; (800c86c <LmHandlerRequestClass+0x120>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d038      	beq.n	800c85a <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c7e8:	4b20      	ldr	r3, [pc, #128]	; (800c86c <LmHandlerRequestClass+0x120>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	79fa      	ldrb	r2, [r7, #7]
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
            break;
 800c7f4:	e031      	b.n	800c85a <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c7f6:	23ff      	movs	r3, #255	; 0xff
 800c7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7fc:	e02d      	b.n	800c85a <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c7fe:	23ff      	movs	r3, #255	; 0xff
 800c800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c804:	e02c      	b.n	800c860 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c806:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c80e:	23ff      	movs	r3, #255	; 0xff
 800c810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c814:	e023      	b.n	800c85e <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c81a:	f107 0308 	add.w	r3, r7, #8
 800c81e:	4618      	mov	r0, r3
 800c820:	f004 fcde 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10f      	bne.n	800c84a <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 faf5 	bl	800ce1c <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c832:	4b0e      	ldr	r3, [pc, #56]	; (800c86c <LmHandlerRequestClass+0x120>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d010      	beq.n	800c85e <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c83c:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <LmHandlerRequestClass+0x120>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c842:	79fa      	ldrb	r2, [r7, #7]
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
            break;
 800c848:	e009      	b.n	800c85e <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c84a:	23ff      	movs	r3, #255	; 0xff
 800c84c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c850:	e005      	b.n	800c85e <LmHandlerRequestClass+0x112>
        }
    }
 800c852:	bf00      	nop
 800c854:	e004      	b.n	800c860 <LmHandlerRequestClass+0x114>
            break;
 800c856:	bf00      	nop
 800c858:	e002      	b.n	800c860 <LmHandlerRequestClass+0x114>
            break;
 800c85a:	bf00      	nop
 800c85c:	e000      	b.n	800c860 <LmHandlerRequestClass+0x114>
            break;
 800c85e:	bf00      	nop
    return errorStatus;
 800c860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c864:	4618      	mov	r0, r3
 800c866:	3730      	adds	r7, #48	; 0x30
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	200003e0 	.word	0x200003e0

0800c870 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08c      	sub	sp, #48	; 0x30
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d102      	bne.n	800c884 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
 800c882:	e010      	b.n	800c8a6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c884:	2300      	movs	r3, #0
 800c886:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4618      	mov	r0, r3
 800c88e:	f004 fb49 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c898:	f04f 33ff 	mov.w	r3, #4294967295
 800c89c:	e003      	b.n	800c8a6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c89e:	7c3a      	ldrb	r2, [r7, #16]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3730      	adds	r7, #48	; 0x30
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08c      	sub	sp, #48	; 0x30
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d102      	bne.n	800c8c4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c2:	e016      	b.n	800c8f2 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c8c4:	231f      	movs	r3, #31
 800c8c6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f004 fb29 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8dc:	e009      	b.n	800c8f2 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c8de:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f993 2000 	ldrsb.w	r2, [r3]
 800c8ec:	4b03      	ldr	r3, [pc, #12]	; (800c8fc <LmHandlerGetTxDatarate+0x4c>)
 800c8ee:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3730      	adds	r7, #48	; 0x30
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200003d0 	.word	0x200003d0

0800c900 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b08c      	sub	sp, #48	; 0x30
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c908:	2322      	movs	r3, #34	; 0x22
 800c90a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c910:	f107 030c 	add.w	r3, r7, #12
 800c914:	4618      	mov	r0, r3
 800c916:	f004 fc63 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c920:	f04f 33ff 	mov.w	r3, #4294967295
 800c924:	e000      	b.n	800c928 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3730      	adds	r7, #48	; 0x30
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c938:	4b15      	ldr	r3, [pc, #84]	; (800c990 <McpsConfirm+0x60>)
 800c93a:	2201      	movs	r2, #1
 800c93c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	785a      	ldrb	r2, [r3, #1]
 800c942:	4b13      	ldr	r3, [pc, #76]	; (800c990 <McpsConfirm+0x60>)
 800c944:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	789b      	ldrb	r3, [r3, #2]
 800c94a:	b25a      	sxtb	r2, r3
 800c94c:	4b10      	ldr	r3, [pc, #64]	; (800c990 <McpsConfirm+0x60>)
 800c94e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	4a0e      	ldr	r2, [pc, #56]	; (800c990 <McpsConfirm+0x60>)
 800c956:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c95e:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <McpsConfirm+0x60>)
 800c960:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	b2da      	uxtb	r2, r3
 800c968:	4b09      	ldr	r3, [pc, #36]	; (800c990 <McpsConfirm+0x60>)
 800c96a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	791b      	ldrb	r3, [r3, #4]
 800c970:	461a      	mov	r2, r3
 800c972:	4b07      	ldr	r3, [pc, #28]	; (800c990 <McpsConfirm+0x60>)
 800c974:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c976:	4b07      	ldr	r3, [pc, #28]	; (800c994 <McpsConfirm+0x64>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	6a1b      	ldr	r3, [r3, #32]
 800c97c:	4804      	ldr	r0, [pc, #16]	; (800c990 <McpsConfirm+0x60>)
 800c97e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c980:	6879      	ldr	r1, [r7, #4]
 800c982:	2000      	movs	r0, #0
 800c984:	f000 f99a 	bl	800ccbc <LmHandlerPackagesNotify>
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	20000408 	.word	0x20000408
 800c994:	200003e0 	.word	0x200003e0

0800c998 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c9a6:	4b32      	ldr	r3, [pc, #200]	; (800ca70 <McpsIndication+0xd8>)
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	785a      	ldrb	r2, [r3, #1]
 800c9b0:	4b2f      	ldr	r3, [pc, #188]	; (800ca70 <McpsIndication+0xd8>)
 800c9b2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c9b4:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <McpsIndication+0xd8>)
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d154      	bne.n	800ca66 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	791b      	ldrb	r3, [r3, #4]
 800c9c0:	b25a      	sxtb	r2, r3
 800c9c2:	4b2b      	ldr	r3, [pc, #172]	; (800ca70 <McpsIndication+0xd8>)
 800c9c4:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9cc:	b25a      	sxtb	r2, r3
 800c9ce:	4b28      	ldr	r3, [pc, #160]	; (800ca70 <McpsIndication+0xd8>)
 800c9d0:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c9d8:	4b25      	ldr	r3, [pc, #148]	; (800ca70 <McpsIndication+0xd8>)
 800c9da:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	78db      	ldrb	r3, [r3, #3]
 800c9e0:	b25a      	sxtb	r2, r3
 800c9e2:	4b23      	ldr	r3, [pc, #140]	; (800ca70 <McpsIndication+0xd8>)
 800c9e4:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	4a21      	ldr	r2, [pc, #132]	; (800ca70 <McpsIndication+0xd8>)
 800c9ec:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	78db      	ldrb	r3, [r3, #3]
 800c9f2:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	7b1b      	ldrb	r3, [r3, #12]
 800c9f8:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800ca00:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <McpsIndication+0xdc>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	f107 0218 	add.w	r2, r7, #24
 800ca0a:	4919      	ldr	r1, [pc, #100]	; (800ca70 <McpsIndication+0xd8>)
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800ca10:	4b18      	ldr	r3, [pc, #96]	; (800ca74 <McpsIndication+0xdc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <McpsIndication+0x92>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7e1b      	ldrb	r3, [r3, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ca22:	4b14      	ldr	r3, [pc, #80]	; (800ca74 <McpsIndication+0xdc>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca28:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	f000 f945 	bl	800ccbc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800ca32:	f107 0317 	add.w	r3, r7, #23
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff ff1a 	bl	800c870 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	795b      	ldrb	r3, [r3, #5]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d111      	bne.n	800ca68 <McpsIndication+0xd0>
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10e      	bne.n	800ca68 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	733b      	strb	r3, [r7, #12]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	737b      	strb	r3, [r7, #13]
 800ca52:	2300      	movs	r3, #0
 800ca54:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800ca56:	f107 000c 	add.w	r0, r7, #12
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f7ff fd88 	bl	800c574 <LmHandlerSend>
 800ca64:	e000      	b.n	800ca68 <McpsIndication+0xd0>
        return;
 800ca66:	bf00      	nop
    }
}
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	200000c8 	.word	0x200000c8
 800ca74:	200003e0 	.word	0x200003e0

0800ca78 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08c      	sub	sp, #48	; 0x30
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800ca80:	4b28      	ldr	r3, [pc, #160]	; (800cb24 <MlmeConfirm+0xac>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	785a      	ldrb	r2, [r3, #1]
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <MlmeConfirm+0xac>)
 800ca8c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800ca8e:	4b26      	ldr	r3, [pc, #152]	; (800cb28 <MlmeConfirm+0xb0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	4823      	ldr	r0, [pc, #140]	; (800cb24 <MlmeConfirm+0xac>)
 800ca96:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	2002      	movs	r0, #2
 800ca9c:	f000 f90e 	bl	800ccbc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b0a      	cmp	r3, #10
 800caa6:	d035      	beq.n	800cb14 <MlmeConfirm+0x9c>
 800caa8:	2b0a      	cmp	r3, #10
 800caaa:	dc35      	bgt.n	800cb18 <MlmeConfirm+0xa0>
 800caac:	2b01      	cmp	r3, #1
 800caae:	d002      	beq.n	800cab6 <MlmeConfirm+0x3e>
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d023      	beq.n	800cafc <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cab4:	e030      	b.n	800cb18 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cab6:	2306      	movs	r3, #6
 800cab8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800caba:	f107 030c 	add.w	r3, r7, #12
 800cabe:	4618      	mov	r0, r3
 800cac0:	f004 fa30 	bl	8010f24 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	4a19      	ldr	r2, [pc, #100]	; (800cb2c <MlmeConfirm+0xb4>)
 800cac8:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800caca:	4819      	ldr	r0, [pc, #100]	; (800cb30 <MlmeConfirm+0xb8>)
 800cacc:	f7ff fef0 	bl	800c8b0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	785b      	ldrb	r3, [r3, #1]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d108      	bne.n	800caea <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cad8:	4b15      	ldr	r3, [pc, #84]	; (800cb30 <MlmeConfirm+0xb8>)
 800cada:	2200      	movs	r2, #0
 800cadc:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cade:	4b15      	ldr	r3, [pc, #84]	; (800cb34 <MlmeConfirm+0xbc>)
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7ff fe32 	bl	800c74c <LmHandlerRequestClass>
 800cae8:	e002      	b.n	800caf0 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800caea:	4b11      	ldr	r3, [pc, #68]	; (800cb30 <MlmeConfirm+0xb8>)
 800caec:	22ff      	movs	r2, #255	; 0xff
 800caee:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800caf0:	4b0d      	ldr	r3, [pc, #52]	; (800cb28 <MlmeConfirm+0xb0>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	480e      	ldr	r0, [pc, #56]	; (800cb30 <MlmeConfirm+0xb8>)
 800caf8:	4798      	blx	r3
        break;
 800cafa:	e00e      	b.n	800cb1a <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cafc:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <MlmeConfirm+0xc0>)
 800cafe:	2201      	movs	r2, #1
 800cb00:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7a1a      	ldrb	r2, [r3, #8]
 800cb06:	4b0c      	ldr	r3, [pc, #48]	; (800cb38 <MlmeConfirm+0xc0>)
 800cb08:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7a5a      	ldrb	r2, [r3, #9]
 800cb0e:	4b0a      	ldr	r3, [pc, #40]	; (800cb38 <MlmeConfirm+0xc0>)
 800cb10:	73da      	strb	r2, [r3, #15]
        break;
 800cb12:	e002      	b.n	800cb1a <MlmeConfirm+0xa2>
        break;
 800cb14:	bf00      	nop
 800cb16:	e000      	b.n	800cb1a <MlmeConfirm+0xa2>
        break;
 800cb18:	bf00      	nop
    }
}
 800cb1a:	bf00      	nop
 800cb1c:	3730      	adds	r7, #48	; 0x30
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20000408 	.word	0x20000408
 800cb28:	200003e0 	.word	0x200003e0
 800cb2c:	200000a0 	.word	0x200000a0
 800cb30:	200000c4 	.word	0x200000c4
 800cb34:	200003d0 	.word	0x200003d0
 800cb38:	200000c8 	.word	0x200000c8

0800cb3c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cb46:	4b22      	ldr	r3, [pc, #136]	; (800cbd0 <MlmeIndication+0x94>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	785a      	ldrb	r2, [r3, #1]
 800cb50:	4b1f      	ldr	r3, [pc, #124]	; (800cbd0 <MlmeIndication+0x94>)
 800cb52:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb5a:	b25a      	sxtb	r2, r3
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <MlmeIndication+0x94>)
 800cb5e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cb66:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <MlmeIndication+0x94>)
 800cb68:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	78db      	ldrb	r3, [r3, #3]
 800cb6e:	b25a      	sxtb	r2, r3
 800cb70:	4b17      	ldr	r3, [pc, #92]	; (800cbd0 <MlmeIndication+0x94>)
 800cb72:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cb74:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <MlmeIndication+0x94>)
 800cb76:	785b      	ldrb	r3, [r3, #1]
 800cb78:	2b0e      	cmp	r3, #14
 800cb7a:	d005      	beq.n	800cb88 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cb7c:	4b15      	ldr	r3, [pc, #84]	; (800cbd4 <MlmeIndication+0x98>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb82:	4913      	ldr	r1, [pc, #76]	; (800cbd0 <MlmeIndication+0x94>)
 800cb84:	2000      	movs	r0, #0
 800cb86:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	2b07      	cmp	r3, #7
 800cb8e:	d117      	bne.n	800cbc0 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cb90:	2300      	movs	r3, #0
 800cb92:	723b      	strb	r3, [r7, #8]
 800cb94:	2300      	movs	r3, #0
 800cb96:	727b      	strb	r3, [r7, #9]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cb9c:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <MlmeIndication+0x9c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	4798      	blx	r3
 800cba4:	4603      	mov	r3, r0
 800cba6:	f083 0301 	eor.w	r3, r3, #1
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d009      	beq.n	800cbc4 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cbb0:	f107 0008 	add.w	r0, r7, #8
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	f7ff fcdb 	bl	800c574 <LmHandlerSend>
            }
        }
        break;
 800cbbe:	e001      	b.n	800cbc4 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cbc0:	bf00      	nop
 800cbc2:	e000      	b.n	800cbc6 <MlmeIndication+0x8a>
        break;
 800cbc4:	bf00      	nop
    }
}
 800cbc6:	bf00      	nop
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200000c8 	.word	0x200000c8
 800cbd4:	200003e0 	.word	0x200003e0
 800cbd8:	200003bc 	.word	0x200003bc

0800cbdc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6039      	str	r1, [r7, #0]
 800cbe6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d103      	bne.n	800cbfa <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cbf2:	f000 f943 	bl	800ce7c <LmhpCompliancePackageFactory>
 800cbf6:	60f8      	str	r0, [r7, #12]
            break;
 800cbf8:	e000      	b.n	800cbfc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cbfa:	bf00      	nop
        }
    }
    if( package != NULL )
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d02b      	beq.n	800cc5a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	4918      	ldr	r1, [pc, #96]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	4a16      	ldr	r2, [pc, #88]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc14:	4a15      	ldr	r2, [pc, #84]	; (800cc6c <LmHandlerPackageRegister+0x90>)
 800cc16:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	4a13      	ldr	r2, [pc, #76]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc20:	4a13      	ldr	r2, [pc, #76]	; (800cc70 <LmHandlerPackageRegister+0x94>)
 800cc22:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	4a10      	ldr	r2, [pc, #64]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2c:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <LmHandlerPackageRegister+0x98>)
 800cc2e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cc30:	4b11      	ldr	r3, [pc, #68]	; (800cc78 <LmHandlerPackageRegister+0x9c>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	490c      	ldr	r1, [pc, #48]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc3c:	6912      	ldr	r2, [r2, #16]
 800cc3e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <LmHandlerPackageRegister+0x8c>)
 800cc44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	4a0c      	ldr	r2, [pc, #48]	; (800cc7c <LmHandlerPackageRegister+0xa0>)
 800cc4c:	6851      	ldr	r1, [r2, #4]
 800cc4e:	4a0b      	ldr	r2, [pc, #44]	; (800cc7c <LmHandlerPackageRegister+0xa0>)
 800cc50:	7852      	ldrb	r2, [r2, #1]
 800cc52:	6838      	ldr	r0, [r7, #0]
 800cc54:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cc56:	2300      	movs	r3, #0
 800cc58:	e001      	b.n	800cc5e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cc5a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200003bc 	.word	0x200003bc
 800cc6c:	0800c489 	.word	0x0800c489
 800cc70:	0800c575 	.word	0x0800c575
 800cc74:	0800c721 	.word	0x0800c721
 800cc78:	200003e0 	.word	0x200003e0
 800cc7c:	200000d8 	.word	0x200000d8

0800cc80 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d80e      	bhi.n	800ccae <LmHandlerPackageIsInitialized+0x2e>
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	4a09      	ldr	r2, [pc, #36]	; (800ccb8 <LmHandlerPackageIsInitialized+0x38>)
 800cc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	4a05      	ldr	r2, [pc, #20]	; (800ccb8 <LmHandlerPackageIsInitialized+0x38>)
 800cca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	4798      	blx	r3
 800ccaa:	4603      	mov	r3, r0
 800ccac:	e000      	b.n	800ccb0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ccae:	2300      	movs	r3, #0
    }
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	200003bc 	.word	0x200003bc

0800ccbc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	6039      	str	r1, [r7, #0]
 800ccc6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]
 800cccc:	e067      	b.n	800cd9e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800ccce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccd2:	4a37      	ldr	r2, [pc, #220]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800ccd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d051      	beq.n	800cd80 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d03d      	beq.n	800cd5e <LmHandlerPackagesNotify+0xa2>
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	dc4e      	bgt.n	800cd84 <LmHandlerPackagesNotify+0xc8>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <LmHandlerPackagesNotify+0x34>
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d011      	beq.n	800cd12 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800ccee:	e049      	b.n	800cd84 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ccf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf4:	4a2e      	ldr	r2, [pc, #184]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800ccf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d043      	beq.n	800cd88 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd04:	4a2a      	ldr	r2, [pc, #168]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	6838      	ldr	r0, [r7, #0]
 800cd0e:	4798      	blx	r3
                    break;
 800cd10:	e03a      	b.n	800cd88 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd16:	4a26      	ldr	r2, [pc, #152]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1c:	69db      	ldr	r3, [r3, #28]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d034      	beq.n	800cd8c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd26:	4a22      	ldr	r2, [pc, #136]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2c:	781a      	ldrb	r2, [r3, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d00a      	beq.n	800cd4c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d126      	bne.n	800cd8c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cd3e:	4b1c      	ldr	r3, [pc, #112]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	4798      	blx	r3
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01f      	beq.n	800cd8c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd50:	4a17      	ldr	r2, [pc, #92]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	6838      	ldr	r0, [r7, #0]
 800cd5a:	4798      	blx	r3
                    break;
 800cd5c:	e016      	b.n	800cd8c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd62:	4a13      	ldr	r2, [pc, #76]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d010      	beq.n	800cd90 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cd6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd72:	4a0f      	ldr	r2, [pc, #60]	; (800cdb0 <LmHandlerPackagesNotify+0xf4>)
 800cd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	6838      	ldr	r0, [r7, #0]
 800cd7c:	4798      	blx	r3
                    break;
 800cd7e:	e007      	b.n	800cd90 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800cd80:	bf00      	nop
 800cd82:	e006      	b.n	800cd92 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cd84:	bf00      	nop
 800cd86:	e004      	b.n	800cd92 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cd88:	bf00      	nop
 800cd8a:	e002      	b.n	800cd92 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cd8c:	bf00      	nop
 800cd8e:	e000      	b.n	800cd92 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cd90:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	3301      	adds	r3, #1
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	73fb      	strb	r3, [r7, #15]
 800cd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda2:	2b04      	cmp	r3, #4
 800cda4:	dd93      	ble.n	800ccce <LmHandlerPackagesNotify+0x12>
    }
}
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	200003bc 	.word	0x200003bc

0800cdb4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdba:	2300      	movs	r3, #0
 800cdbc:	71fb      	strb	r3, [r7, #7]
 800cdbe:	e022      	b.n	800ce06 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cdc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdc4:	4a14      	ldr	r2, [pc, #80]	; (800ce18 <LmHandlerPackagesProcess+0x64>)
 800cdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d015      	beq.n	800cdfa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cdce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdd2:	4a11      	ldr	r2, [pc, #68]	; (800ce18 <LmHandlerPackagesProcess+0x64>)
 800cdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00d      	beq.n	800cdfa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff ff4d 	bl	800cc80 <LmHandlerPackageIsInitialized>
 800cde6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d006      	beq.n	800cdfa <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cdec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf0:	4a09      	ldr	r2, [pc, #36]	; (800ce18 <LmHandlerPackagesProcess+0x64>)
 800cdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cdfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	3301      	adds	r3, #1
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	71fb      	strb	r3, [r7, #7]
 800ce06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce0a:	2b04      	cmp	r3, #4
 800ce0c:	ddd8      	ble.n	800cdc0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	200003bc 	.word	0x200003bc

0800ce1c <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af02      	add	r7, sp, #8
 800ce22:	4603      	mov	r3, r0
 800ce24:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ce26:	79fb      	ldrb	r3, [r7, #7]
 800ce28:	4a06      	ldr	r2, [pc, #24]	; (800ce44 <DisplayClassUpdate+0x28>)
 800ce2a:	5cd3      	ldrb	r3, [r2, r3]
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <DisplayClassUpdate+0x2c>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	2100      	movs	r1, #0
 800ce34:	2002      	movs	r0, #2
 800ce36:	f00d fcf9 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800ce3a:	bf00      	nop
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	0801b52c 	.word	0x0801b52c
 800ce48:	0801b510 	.word	0x0801b510

0800ce4c <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ce56:	bf00      	nop
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bc80      	pop	{r7}
 800ce5e:	4770      	bx	lr

0800ce60 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800ce60:	b480      	push	{r7}
 800ce62:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800ce64:	2300      	movs	r3, #0
#endif
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr

0800ce6e <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800ce6e:	b480      	push	{r7}
 800ce70:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bc80      	pop	{r7}
 800ce7a:	4770      	bx	lr

0800ce7c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800ce80:	4b02      	ldr	r3, [pc, #8]	; (800ce8c <LmhpCompliancePackageFactory+0x10>)
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bc80      	pop	{r7}
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	200000e0 	.word	0x200000e0

0800ce90 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00f      	beq.n	800cec4 <LmhpComplianceInit+0x34>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00c      	beq.n	800cec4 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800ceaa:	4a0c      	ldr	r2, [pc, #48]	; (800cedc <LmhpComplianceInit+0x4c>)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800ceb0:	4a0b      	ldr	r2, [pc, #44]	; (800cee0 <LmhpComplianceInit+0x50>)
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ceb6:	4a0a      	ldr	r2, [pc, #40]	; (800cee0 <LmhpComplianceInit+0x50>)
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cebc:	4b08      	ldr	r3, [pc, #32]	; (800cee0 <LmhpComplianceInit+0x50>)
 800cebe:	2201      	movs	r2, #1
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	e006      	b.n	800ced2 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cec4:	4b05      	ldr	r3, [pc, #20]	; (800cedc <LmhpComplianceInit+0x4c>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ceca:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <LmhpComplianceInit+0x50>)
 800cecc:	2200      	movs	r2, #0
 800cece:	701a      	strb	r2, [r3, #0]
    }
}
 800ced0:	bf00      	nop
 800ced2:	bf00      	nop
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bc80      	pop	{r7}
 800ceda:	4770      	bx	lr
 800cedc:	20000540 	.word	0x20000540
 800cee0:	2000052c 	.word	0x2000052c

0800cee4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cee4:	b480      	push	{r7}
 800cee6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cee8:	4b02      	ldr	r3, [pc, #8]	; (800cef4 <LmhpComplianceIsInitialized+0x10>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bc80      	pop	{r7}
 800cef2:	4770      	bx	lr
 800cef4:	2000052c 	.word	0x2000052c

0800cef8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cef8:	b480      	push	{r7}
 800cefa:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cefc:	4b07      	ldr	r3, [pc, #28]	; (800cf1c <LmhpComplianceIsRunning+0x24>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	f083 0301 	eor.w	r3, r3, #1
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e001      	b.n	800cf12 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cf0e:	4b03      	ldr	r3, [pc, #12]	; (800cf1c <LmhpComplianceIsRunning+0x24>)
 800cf10:	785b      	ldrb	r3, [r3, #1]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bc80      	pop	{r7}
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	2000052c 	.word	0x2000052c

0800cf20 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cf28:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f083 0301 	eor.w	r3, r3, #1
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d112      	bne.n	800cf5c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cf36:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf38:	785b      	ldrb	r3, [r3, #1]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00f      	beq.n	800cf5e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d10b      	bne.n	800cf5e <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d007      	beq.n	800cf5e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cf4e:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf50:	899b      	ldrh	r3, [r3, #12]
 800cf52:	3301      	adds	r3, #1
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	4b04      	ldr	r3, [pc, #16]	; (800cf68 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cf58:	819a      	strh	r2, [r3, #12]
 800cf5a:	e000      	b.n	800cf5e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800cf5c:	bf00      	nop
    }
}
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000052c 	.word	0x2000052c

0800cf6c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cf74:	4b12      	ldr	r3, [pc, #72]	; (800cfc0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	f083 0301 	eor.w	r3, r3, #1
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d116      	bne.n	800cfb0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800cf82:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	f083 0301 	eor.w	r3, r3, #1
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d111      	bne.n	800cfb4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	d10e      	bne.n	800cfb6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800cf98:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7a1a      	ldrb	r2, [r3, #8]
 800cfa2:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfa4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7a5a      	ldrb	r2, [r3, #9]
 800cfaa:	4b05      	ldr	r3, [pc, #20]	; (800cfc0 <LmhpComplianceOnMlmeConfirm+0x54>)
 800cfac:	741a      	strb	r2, [r3, #16]
 800cfae:	e002      	b.n	800cfb6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cfb0:	bf00      	nop
 800cfb2:	e000      	b.n	800cfb6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cfb4:	bf00      	nop
    }
}
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bc80      	pop	{r7}
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	2000052c 	.word	0x2000052c

0800cfc4 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800cfc4:	b590      	push	{r4, r7, lr}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cfca:	4b33      	ldr	r3, [pc, #204]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	f083 0301 	eor.w	r3, r3, #1
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfdc:	e058      	b.n	800d090 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800cfde:	4b2e      	ldr	r3, [pc, #184]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800cfe0:	785b      	ldrb	r3, [r3, #1]
 800cfe2:	f083 0301 	eor.w	r3, r3, #1
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cfec:	2300      	movs	r3, #0
 800cfee:	e04f      	b.n	800d090 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800cff0:	4b29      	ldr	r3, [pc, #164]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800cff2:	7b9b      	ldrb	r3, [r3, #14]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d019      	beq.n	800d02c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800cff8:	4b27      	ldr	r3, [pc, #156]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800cffa:	2200      	movs	r2, #0
 800cffc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800cffe:	4b26      	ldr	r3, [pc, #152]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d000:	2203      	movs	r2, #3
 800d002:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d004:	4b24      	ldr	r3, [pc, #144]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2205      	movs	r2, #5
 800d00a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d00c:	4b22      	ldr	r3, [pc, #136]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	3301      	adds	r3, #1
 800d012:	4a21      	ldr	r2, [pc, #132]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d014:	7bd2      	ldrb	r2, [r2, #15]
 800d016:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d018:	4b1f      	ldr	r3, [pc, #124]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	3302      	adds	r3, #2
 800d01e:	4a1e      	ldr	r2, [pc, #120]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d020:	7c12      	ldrb	r2, [r2, #16]
 800d022:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d024:	4b1c      	ldr	r3, [pc, #112]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d026:	2201      	movs	r2, #1
 800d028:	709a      	strb	r2, [r3, #2]
 800d02a:	e01c      	b.n	800d066 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d02c:	4b1a      	ldr	r3, [pc, #104]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d02e:	789b      	ldrb	r3, [r3, #2]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d005      	beq.n	800d040 <LmhpComplianceTxProcess+0x7c>
 800d034:	2b04      	cmp	r3, #4
 800d036:	d116      	bne.n	800d066 <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d038:	4b17      	ldr	r3, [pc, #92]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	709a      	strb	r2, [r3, #2]
            break;
 800d03e:	e012      	b.n	800d066 <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d040:	4b15      	ldr	r3, [pc, #84]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d042:	2202      	movs	r2, #2
 800d044:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d046:	4b14      	ldr	r3, [pc, #80]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d048:	899b      	ldrh	r3, [r3, #12]
 800d04a:	0a1b      	lsrs	r3, r3, #8
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	4b12      	ldr	r3, [pc, #72]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d056:	4b10      	ldr	r3, [pc, #64]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d058:	899a      	ldrh	r2, [r3, #12]
 800d05a:	4b0f      	ldr	r3, [pc, #60]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	3301      	adds	r3, #1
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
            break;
 800d064:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d066:	23e0      	movs	r3, #224	; 0xe0
 800d068:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d06a:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d06c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d06e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d072:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d074:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d076:	4809      	ldr	r0, [pc, #36]	; (800d09c <LmhpComplianceTxProcess+0xd8>)
 800d078:	f00d f960 	bl	801a33c <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d07c:	4b08      	ldr	r3, [pc, #32]	; (800d0a0 <LmhpComplianceTxProcess+0xdc>)
 800d07e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <LmhpComplianceTxProcess+0xd4>)
 800d082:	78db      	ldrb	r3, [r3, #3]
 800d084:	4619      	mov	r1, r3
 800d086:	4638      	mov	r0, r7
 800d088:	2301      	movs	r3, #1
 800d08a:	2200      	movs	r2, #0
 800d08c:	47a0      	blx	r4
 800d08e:	4603      	mov	r3, r0
}
 800d090:	4618      	mov	r0, r3
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	bd90      	pop	{r4, r7, pc}
 800d098:	2000052c 	.word	0x2000052c
 800d09c:	20000514 	.word	0x20000514
 800d0a0:	200000e0 	.word	0x200000e0

0800d0a4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b0a2      	sub	sp, #136	; 0x88
 800d0a8:	af02      	add	r7, sp, #8
 800d0aa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d0ac:	4bae      	ldr	r3, [pc, #696]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	f083 0301 	eor.w	r3, r3, #1
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f040 81c0 	bne.w	800d43c <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7b5b      	ldrb	r3, [r3, #13]
 800d0c0:	f083 0301 	eor.w	r3, r3, #1
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f040 81ba 	bne.w	800d440 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d0cc:	4ba6      	ldr	r3, [pc, #664]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0ce:	785b      	ldrb	r3, [r3, #1]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00c      	beq.n	800d0ee <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	7b9b      	ldrb	r3, [r3, #14]
 800d0d8:	f083 0301 	eor.w	r3, r3, #1
 800d0dc:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d005      	beq.n	800d0ee <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d0e2:	4ba1      	ldr	r3, [pc, #644]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	4b9f      	ldr	r3, [pc, #636]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0ec:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	78db      	ldrb	r3, [r3, #3]
 800d0f2:	2be0      	cmp	r3, #224	; 0xe0
 800d0f4:	f040 81a6 	bne.w	800d444 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d0f8:	4b9b      	ldr	r3, [pc, #620]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d0fa:	785b      	ldrb	r3, [r3, #1]
 800d0fc:	f083 0301 	eor.w	r3, r3, #1
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d060      	beq.n	800d1c8 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	7b1b      	ldrb	r3, [r3, #12]
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	f040 819f 	bne.w	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d116:	2b01      	cmp	r3, #1
 800d118:	f040 8199 	bne.w	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	3301      	adds	r3, #1
 800d122:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d124:	2b01      	cmp	r3, #1
 800d126:	f040 8192 	bne.w	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	3302      	adds	r3, #2
 800d130:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d132:	2b01      	cmp	r3, #1
 800d134:	f040 818b 	bne.w	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	3303      	adds	r3, #3
 800d13e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d140:	2b01      	cmp	r3, #1
 800d142:	f040 8184 	bne.w	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d146:	4b88      	ldr	r3, [pc, #544]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d148:	2200      	movs	r2, #0
 800d14a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d14c:	4b86      	ldr	r3, [pc, #536]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d14e:	22e0      	movs	r2, #224	; 0xe0
 800d150:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d152:	4b85      	ldr	r3, [pc, #532]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d154:	2202      	movs	r2, #2
 800d156:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d158:	4b83      	ldr	r3, [pc, #524]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d15e:	4b82      	ldr	r3, [pc, #520]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d160:	2200      	movs	r2, #0
 800d162:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d164:	4b80      	ldr	r3, [pc, #512]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d166:	2200      	movs	r2, #0
 800d168:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d16a:	4b7f      	ldr	r3, [pc, #508]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d170:	4b7d      	ldr	r3, [pc, #500]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d172:	2201      	movs	r2, #1
 800d174:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d176:	4b7c      	ldr	r3, [pc, #496]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d178:	2201      	movs	r2, #1
 800d17a:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d17c:	2304      	movs	r3, #4
 800d17e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d180:	2301      	movs	r3, #1
 800d182:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d184:	f107 0308 	add.w	r3, r7, #8
 800d188:	4618      	mov	r0, r3
 800d18a:	f004 f829 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d18e:	2000      	movs	r0, #0
 800d190:	f004 fd9a 	bl	8011cc8 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d194:	4b75      	ldr	r3, [pc, #468]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d19e:	4b73      	ldr	r3, [pc, #460]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9300      	str	r3, [sp, #0]
 800d1aa:	4b71      	ldr	r3, [pc, #452]	; (800d370 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f04f 31ff 	mov.w	r1, #4294967295
 800d1b2:	4870      	ldr	r0, [pc, #448]	; (800d374 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d1b4:	f00d f88c 	bl	801a2d0 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d1b8:	f241 3188 	movw	r1, #5000	; 0x1388
 800d1bc:	486d      	ldr	r0, [pc, #436]	; (800d374 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d1be:	f00d f99b 	bl	801a4f8 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d1c2:	f7ff feff 	bl	800cfc4 <LmhpComplianceTxProcess>
 800d1c6:	e142      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	781a      	ldrb	r2, [r3, #0]
 800d1ce:	4b66      	ldr	r3, [pc, #408]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1d0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d1d2:	4b65      	ldr	r3, [pc, #404]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1d4:	789b      	ldrb	r3, [r3, #2]
 800d1d6:	2b0a      	cmp	r3, #10
 800d1d8:	f200 8136 	bhi.w	800d448 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d1dc:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <LmhpComplianceOnMcpsIndication+0x140>)
 800d1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e2:	bf00      	nop
 800d1e4:	0800d211 	.word	0x0800d211
 800d1e8:	0800d25b 	.word	0x0800d25b
 800d1ec:	0800d263 	.word	0x0800d263
 800d1f0:	0800d271 	.word	0x0800d271
 800d1f4:	0800d27f 	.word	0x0800d27f
 800d1f8:	0800d2d7 	.word	0x0800d2d7
 800d1fc:	0800d2e9 	.word	0x0800d2e9
 800d200:	0800d339 	.word	0x0800d339
 800d204:	0800d3f5 	.word	0x0800d3f5
 800d208:	0800d407 	.word	0x0800d407
 800d20c:	0800d421 	.word	0x0800d421
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d210:	4858      	ldr	r0, [pc, #352]	; (800d374 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d212:	f00d f901 	bl	801a418 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d216:	4b54      	ldr	r3, [pc, #336]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d218:	2200      	movs	r2, #0
 800d21a:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d21c:	4b52      	ldr	r3, [pc, #328]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d21e:	2200      	movs	r2, #0
 800d220:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d222:	2304      	movs	r3, #4
 800d224:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d226:	4b51      	ldr	r3, [pc, #324]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d22e:	f107 0308 	add.w	r3, r7, #8
 800d232:	4618      	mov	r0, r3
 800d234:	f003 ffd4 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d238:	4b4c      	ldr	r3, [pc, #304]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	785b      	ldrb	r3, [r3, #1]
 800d23e:	4618      	mov	r0, r3
 800d240:	f004 fd42 	bl	8011cc8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d244:	4b49      	ldr	r3, [pc, #292]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 80fe 	beq.w	800d44c <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d250:	4b46      	ldr	r3, [pc, #280]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	4798      	blx	r3
                }
            }
            break;
 800d258:	e0f8      	b.n	800d44c <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d25a:	4b43      	ldr	r3, [pc, #268]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d25c:	2202      	movs	r2, #2
 800d25e:	719a      	strb	r2, [r3, #6]
            break;
 800d260:	e0f5      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d262:	4b41      	ldr	r3, [pc, #260]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d264:	2201      	movs	r2, #1
 800d266:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d268:	4b3f      	ldr	r3, [pc, #252]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	709a      	strb	r2, [r3, #2]
            break;
 800d26e:	e0ee      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d270:	4b3d      	ldr	r3, [pc, #244]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d272:	2200      	movs	r2, #0
 800d274:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d276:	4b3c      	ldr	r3, [pc, #240]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d278:	2201      	movs	r2, #1
 800d27a:	709a      	strb	r2, [r3, #2]
            break;
 800d27c:	e0e7      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	7b1a      	ldrb	r2, [r3, #12]
 800d282:	4b39      	ldr	r3, [pc, #228]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d284:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d286:	4b38      	ldr	r3, [pc, #224]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	2204      	movs	r2, #4
 800d28c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d28e:	2301      	movs	r3, #1
 800d290:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d294:	e012      	b.n	800d2bc <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689a      	ldr	r2, [r3, #8]
 800d29a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d29e:	4413      	add	r3, r2
 800d2a0:	781a      	ldrb	r2, [r3, #0]
 800d2a2:	4b31      	ldr	r3, [pc, #196]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2a4:	6899      	ldr	r1, [r3, #8]
 800d2a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2aa:	440b      	add	r3, r1
 800d2ac:	3201      	adds	r2, #1
 800d2ae:	b2d2      	uxtb	r2, r2
 800d2b0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d2b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d2bc:	4b2a      	ldr	r3, [pc, #168]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2be:	795a      	ldrb	r2, [r3, #5]
 800d2c0:	4b29      	ldr	r3, [pc, #164]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2c2:	799b      	ldrb	r3, [r3, #6]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d3e0      	bcc.n	800d296 <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d2d4:	e0bb      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d2d6:	2304      	movs	r3, #4
 800d2d8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d2dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f004 fabb 	bl	801185c <LoRaMacMlmeRequest>
            }
            break;
 800d2e6:	e0b2      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d2e8:	4822      	ldr	r0, [pc, #136]	; (800d374 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d2ea:	f00d f895 	bl	801a418 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d2ee:	4b1e      	ldr	r3, [pc, #120]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d2f4:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d2fa:	2304      	movs	r3, #4
 800d2fc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d2fe:	4b1b      	ldr	r3, [pc, #108]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	4618      	mov	r0, r3
 800d30c:	f003 ff68 	bl	80111e0 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d310:	4b16      	ldr	r3, [pc, #88]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	785b      	ldrb	r3, [r3, #1]
 800d316:	4618      	mov	r0, r3
 800d318:	f004 fcd6 	bl	8011cc8 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d31c:	4b13      	ldr	r3, [pc, #76]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d326:	4b11      	ldr	r3, [pc, #68]	; (800d36c <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d32e:	4b12      	ldr	r3, [pc, #72]	; (800d378 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	2002      	movs	r0, #2
 800d334:	4798      	blx	r3
            }
            break;
 800d336:	e08a      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	7b1b      	ldrb	r3, [r3, #12]
 800d33c:	2b03      	cmp	r3, #3
 800d33e:	d11d      	bne.n	800d37c <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d340:	2305      	movs	r3, #5
 800d342:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	3301      	adds	r3, #1
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	021b      	lsls	r3, r3, #8
 800d350:	b21a      	sxth	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	3302      	adds	r3, #2
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	4313      	orrs	r3, r2
 800d35e:	b21b      	sxth	r3, r3
 800d360:	b29b      	uxth	r3, r3
 800d362:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d366:	e03c      	b.n	800d3e2 <LmhpComplianceOnMcpsIndication+0x33e>
 800d368:	2000052c 	.word	0x2000052c
 800d36c:	20000540 	.word	0x20000540
 800d370:	0800d465 	.word	0x0800d465
 800d374:	20000514 	.word	0x20000514
 800d378:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7b1b      	ldrb	r3, [r3, #12]
 800d380:	2b07      	cmp	r3, #7
 800d382:	d12e      	bne.n	800d3e2 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d384:	2306      	movs	r3, #6
 800d386:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	3301      	adds	r3, #1
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	021b      	lsls	r3, r3, #8
 800d394:	b21a      	sxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	3302      	adds	r3, #2
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	b21b      	sxth	r3, r3
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	b21b      	sxth	r3, r3
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	3303      	adds	r3, #3
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	041a      	lsls	r2, r3, #16
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6892      	ldr	r2, [r2, #8]
 800d3c4:	3205      	adds	r2, #5
 800d3c6:	7812      	ldrb	r2, [r2, #0]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	2364      	movs	r3, #100	; 0x64
 800d3ce:	fb03 f302 	mul.w	r3, r3, r2
 800d3d2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	3306      	adds	r3, #6
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	b25b      	sxtb	r3, r3
 800d3de:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d3e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f004 fa38 	bl	801185c <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d3ec:	4b19      	ldr	r3, [pc, #100]	; (800d454 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d3f2:	e02c      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d3f4:	230a      	movs	r3, #10
 800d3f6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d3fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d3fe:	4618      	mov	r0, r3
 800d400:	f004 fa2c 	bl	801185c <LoRaMacMlmeRequest>
            }
            break;
 800d404:	e023      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d406:	2300      	movs	r3, #0
 800d408:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	3301      	adds	r3, #1
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d414:	f107 0308 	add.w	r3, r7, #8
 800d418:	4618      	mov	r0, r3
 800d41a:	f003 fee1 	bl	80111e0 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d41e:	e016      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d420:	230d      	movs	r3, #13
 800d422:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d434:	4618      	mov	r0, r3
 800d436:	f004 fa11 	bl	801185c <LoRaMacMlmeRequest>
            }
            break;
 800d43a:	e008      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d43c:	bf00      	nop
 800d43e:	e006      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d440:	bf00      	nop
 800d442:	e004      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d444:	bf00      	nop
 800d446:	e002      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d448:	bf00      	nop
 800d44a:	e000      	b.n	800d44e <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d44c:	bf00      	nop
        }
    }
}
 800d44e:	3780      	adds	r7, #128	; 0x80
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	2000052c 	.word	0x2000052c

0800d458 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d45c:	bf00      	nop
 800d45e:	46bd      	mov	sp, r7
 800d460:	bc80      	pop	{r7}
 800d462:	4770      	bx	lr

0800d464 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d46c:	f7ff fdaa 	bl	800cfc4 <LmhpComplianceTxProcess>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d478:	b590      	push	{r4, r7, lr}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d47e:	f00d f8e5 	bl	801a64c <UTIL_TIMER_GetCurrentTime>
 800d482:	4603      	mov	r3, r0
 800d484:	4a16      	ldr	r2, [pc, #88]	; (800d4e0 <OnRadioTxDone+0x68>)
 800d486:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d488:	4c16      	ldr	r4, [pc, #88]	; (800d4e4 <OnRadioTxDone+0x6c>)
 800d48a:	463b      	mov	r3, r7
 800d48c:	4618      	mov	r0, r3
 800d48e:	f00c fa6f 	bl	8019970 <SysTimeGet>
 800d492:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d496:	463a      	mov	r2, r7
 800d498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d49c:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d4a0:	4a11      	ldr	r2, [pc, #68]	; (800d4e8 <OnRadioTxDone+0x70>)
 800d4a2:	7813      	ldrb	r3, [r2, #0]
 800d4a4:	f043 0310 	orr.w	r3, r3, #16
 800d4a8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d4aa:	4b0e      	ldr	r3, [pc, #56]	; (800d4e4 <OnRadioTxDone+0x6c>)
 800d4ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00a      	beq.n	800d4ca <OnRadioTxDone+0x52>
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <OnRadioTxDone+0x6c>)
 800d4b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d4c0:	4b08      	ldr	r3, [pc, #32]	; (800d4e4 <OnRadioTxDone+0x6c>)
 800d4c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d4ca:	4b08      	ldr	r3, [pc, #32]	; (800d4ec <OnRadioTxDone+0x74>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	2100      	movs	r1, #0
 800d4d0:	2002      	movs	r0, #2
 800d4d2:	f00d f9ab 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd90      	pop	{r4, r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	200018a0 	.word	0x200018a0
 800d4e4:	20000544 	.word	0x20000544
 800d4e8:	20000d98 	.word	0x20000d98
 800d4ec:	0801b530 	.word	0x0801b530

0800d4f0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4603      	mov	r3, r0
 800d500:	817b      	strh	r3, [r7, #10]
 800d502:	460b      	mov	r3, r1
 800d504:	813b      	strh	r3, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d50a:	f00d f89f 	bl	801a64c <UTIL_TIMER_GetCurrentTime>
 800d50e:	4603      	mov	r3, r0
 800d510:	4a16      	ldr	r2, [pc, #88]	; (800d56c <OnRadioRxDone+0x7c>)
 800d512:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d514:	4a15      	ldr	r2, [pc, #84]	; (800d56c <OnRadioRxDone+0x7c>)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d51a:	4a14      	ldr	r2, [pc, #80]	; (800d56c <OnRadioRxDone+0x7c>)
 800d51c:	897b      	ldrh	r3, [r7, #10]
 800d51e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d520:	4a12      	ldr	r2, [pc, #72]	; (800d56c <OnRadioRxDone+0x7c>)
 800d522:	893b      	ldrh	r3, [r7, #8]
 800d524:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d526:	4a11      	ldr	r2, [pc, #68]	; (800d56c <OnRadioRxDone+0x7c>)
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d52c:	4a10      	ldr	r2, [pc, #64]	; (800d570 <OnRadioRxDone+0x80>)
 800d52e:	7813      	ldrb	r3, [r2, #0]
 800d530:	f043 0308 	orr.w	r3, r3, #8
 800d534:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d536:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <OnRadioRxDone+0x84>)
 800d538:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00a      	beq.n	800d556 <OnRadioRxDone+0x66>
 800d540:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <OnRadioRxDone+0x84>)
 800d542:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d54c:	4b09      	ldr	r3, [pc, #36]	; (800d574 <OnRadioRxDone+0x84>)
 800d54e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d556:	4b08      	ldr	r3, [pc, #32]	; (800d578 <OnRadioRxDone+0x88>)
 800d558:	2201      	movs	r2, #1
 800d55a:	2100      	movs	r1, #0
 800d55c:	2002      	movs	r0, #2
 800d55e:	f00d f965 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800d562:	bf00      	nop
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	200018a4 	.word	0x200018a4
 800d570:	20000d98 	.word	0x20000d98
 800d574:	20000544 	.word	0x20000544
 800d578:	0801b540 	.word	0x0801b540

0800d57c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d580:	4a0e      	ldr	r2, [pc, #56]	; (800d5bc <OnRadioTxTimeout+0x40>)
 800d582:	7813      	ldrb	r3, [r2, #0]
 800d584:	f043 0304 	orr.w	r3, r3, #4
 800d588:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d58a:	4b0d      	ldr	r3, [pc, #52]	; (800d5c0 <OnRadioTxTimeout+0x44>)
 800d58c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00a      	beq.n	800d5aa <OnRadioTxTimeout+0x2e>
 800d594:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <OnRadioTxTimeout+0x44>)
 800d596:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d004      	beq.n	800d5aa <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <OnRadioTxTimeout+0x44>)
 800d5a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5a6:	691b      	ldr	r3, [r3, #16]
 800d5a8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d5aa:	4b06      	ldr	r3, [pc, #24]	; (800d5c4 <OnRadioTxTimeout+0x48>)
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	2002      	movs	r0, #2
 800d5b2:	f00d f93b 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800d5b6:	bf00      	nop
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000d98 	.word	0x20000d98
 800d5c0:	20000544 	.word	0x20000544
 800d5c4:	0801b550 	.word	0x0801b550

0800d5c8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d5cc:	4a0b      	ldr	r2, [pc, #44]	; (800d5fc <OnRadioRxError+0x34>)
 800d5ce:	7813      	ldrb	r3, [r2, #0]
 800d5d0:	f043 0302 	orr.w	r3, r3, #2
 800d5d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5d6:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <OnRadioRxError+0x38>)
 800d5d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00a      	beq.n	800d5f6 <OnRadioRxError+0x2e>
 800d5e0:	4b07      	ldr	r3, [pc, #28]	; (800d600 <OnRadioRxError+0x38>)
 800d5e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d5ec:	4b04      	ldr	r3, [pc, #16]	; (800d600 <OnRadioRxError+0x38>)
 800d5ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	4798      	blx	r3
    }
}
 800d5f6:	bf00      	nop
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20000d98 	.word	0x20000d98
 800d600:	20000544 	.word	0x20000544

0800d604 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d608:	4a0e      	ldr	r2, [pc, #56]	; (800d644 <OnRadioRxTimeout+0x40>)
 800d60a:	7813      	ldrb	r3, [r2, #0]
 800d60c:	f043 0301 	orr.w	r3, r3, #1
 800d610:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d612:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <OnRadioRxTimeout+0x44>)
 800d614:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00a      	beq.n	800d632 <OnRadioRxTimeout+0x2e>
 800d61c:	4b0a      	ldr	r3, [pc, #40]	; (800d648 <OnRadioRxTimeout+0x44>)
 800d61e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d004      	beq.n	800d632 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <OnRadioRxTimeout+0x44>)
 800d62a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d632:	4b06      	ldr	r3, [pc, #24]	; (800d64c <OnRadioRxTimeout+0x48>)
 800d634:	2201      	movs	r2, #1
 800d636:	2100      	movs	r1, #0
 800d638:	2002      	movs	r0, #2
 800d63a:	f00d f8f7 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 800d63e:	bf00      	nop
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20000d98 	.word	0x20000d98
 800d648:	20000544 	.word	0x20000544
 800d64c:	0801b560 	.word	0x0801b560

0800d650 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d654:	4b08      	ldr	r3, [pc, #32]	; (800d678 <UpdateRxSlotIdleState+0x28>)
 800d656:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d004      	beq.n	800d668 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d65e:	4b07      	ldr	r3, [pc, #28]	; (800d67c <UpdateRxSlotIdleState+0x2c>)
 800d660:	2206      	movs	r2, #6
 800d662:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d666:	e003      	b.n	800d670 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d668:	4b04      	ldr	r3, [pc, #16]	; (800d67c <UpdateRxSlotIdleState+0x2c>)
 800d66a:	2202      	movs	r2, #2
 800d66c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d670:	bf00      	nop
 800d672:	46bd      	mov	sp, r7
 800d674:	bc80      	pop	{r7}
 800d676:	4770      	bx	lr
 800d678:	20000a4c 	.word	0x20000a4c
 800d67c:	20000544 	.word	0x20000544

0800d680 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b08e      	sub	sp, #56	; 0x38
 800d684:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d686:	4b44      	ldr	r3, [pc, #272]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d688:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d002      	beq.n	800d696 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d690:	4b42      	ldr	r3, [pc, #264]	; (800d79c <ProcessRadioTxDone+0x11c>)
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d696:	4b42      	ldr	r3, [pc, #264]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d698:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d69c:	4619      	mov	r1, r3
 800d69e:	4841      	ldr	r0, [pc, #260]	; (800d7a4 <ProcessRadioTxDone+0x124>)
 800d6a0:	f00c ff2a 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d6a4:	483f      	ldr	r0, [pc, #252]	; (800d7a4 <ProcessRadioTxDone+0x124>)
 800d6a6:	f00c fe49 	bl	801a33c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d6aa:	4b3d      	ldr	r3, [pc, #244]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d6ac:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	483d      	ldr	r0, [pc, #244]	; (800d7a8 <ProcessRadioTxDone+0x128>)
 800d6b4:	f00c ff20 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d6b8:	483b      	ldr	r0, [pc, #236]	; (800d7a8 <ProcessRadioTxDone+0x128>)
 800d6ba:	f00c fe3f 	bl	801a33c <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d6be:	4b36      	ldr	r3, [pc, #216]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d6c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d004      	beq.n	800d6d2 <ProcessRadioTxDone+0x52>
 800d6c8:	4b35      	ldr	r3, [pc, #212]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d6ca:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d019      	beq.n	800d706 <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d6d2:	2316      	movs	r3, #22
 800d6d4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d6d8:	4b2f      	ldr	r3, [pc, #188]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d6da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d6de:	f107 0220 	add.w	r2, r7, #32
 800d6e2:	4611      	mov	r1, r2
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f006 fb55 	bl	8013d94 <RegionGetPhyParam>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d6ee:	4b2c      	ldr	r3, [pc, #176]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d6f0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	482c      	ldr	r0, [pc, #176]	; (800d7ac <ProcessRadioTxDone+0x12c>)
 800d6fc:	f00c fefc 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d700:	482a      	ldr	r0, [pc, #168]	; (800d7ac <ProcessRadioTxDone+0x12c>)
 800d702:	f00c fe1b 	bl	801a33c <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d706:	4b2a      	ldr	r3, [pc, #168]	; (800d7b0 <ProcessRadioTxDone+0x130>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a23      	ldr	r2, [pc, #140]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d70c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d70e:	4b24      	ldr	r3, [pc, #144]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d710:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d714:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d716:	4b26      	ldr	r3, [pc, #152]	; (800d7b0 <ProcessRadioTxDone+0x130>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d71c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d720:	4618      	mov	r0, r3
 800d722:	f00c f95d 	bl	80199e0 <SysTimeGetMcuTime>
 800d726:	4638      	mov	r0, r7
 800d728:	4b1b      	ldr	r3, [pc, #108]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d72a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d72e:	9200      	str	r2, [sp, #0]
 800d730:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d734:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d738:	ca06      	ldmia	r2, {r1, r2}
 800d73a:	f00c f8b2 	bl	80198a2 <SysTimeSub>
 800d73e:	f107 0314 	add.w	r3, r7, #20
 800d742:	463a      	mov	r2, r7
 800d744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d748:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d74c:	4b14      	ldr	r3, [pc, #80]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d74e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d752:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d754:	2301      	movs	r3, #1
 800d756:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d758:	4b0f      	ldr	r3, [pc, #60]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d75a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d762:	2300      	movs	r3, #0
 800d764:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d766:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <ProcessRadioTxDone+0x118>)
 800d768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d76c:	f107 0208 	add.w	r2, r7, #8
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f006 fb27 	bl	8013dc6 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d778:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d77a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d77e:	f083 0301 	eor.w	r3, r3, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <ProcessRadioTxDone+0x120>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d790:	bf00      	nop
 800d792:	3730      	adds	r7, #48	; 0x30
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	20000a4c 	.word	0x20000a4c
 800d79c:	0801bbc4 	.word	0x0801bbc4
 800d7a0:	20000544 	.word	0x20000544
 800d7a4:	200008c4 	.word	0x200008c4
 800d7a8:	200008dc 	.word	0x200008dc
 800d7ac:	2000093c 	.word	0x2000093c
 800d7b0:	200018a0 	.word	0x200018a0

0800d7b4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d7b8:	4b10      	ldr	r3, [pc, #64]	; (800d7fc <PrepareRxDoneAbort+0x48>)
 800d7ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d7be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c2:	4a0e      	ldr	r2, [pc, #56]	; (800d7fc <PrepareRxDoneAbort+0x48>)
 800d7c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d7c8:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <PrepareRxDoneAbort+0x48>)
 800d7ca:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	f001 f8f8 	bl	800e9c8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d7d8:	4a08      	ldr	r2, [pc, #32]	; (800d7fc <PrepareRxDoneAbort+0x48>)
 800d7da:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d7de:	f043 0302 	orr.w	r3, r3, #2
 800d7e2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d7e6:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <PrepareRxDoneAbort+0x48>)
 800d7e8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d7ec:	f043 0320 	orr.w	r3, r3, #32
 800d7f0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d7f4:	f7ff ff2c 	bl	800d650 <UpdateRxSlotIdleState>
}
 800d7f8:	bf00      	nop
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	20000544 	.word	0x20000544

0800d800 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d800:	b5b0      	push	{r4, r5, r7, lr}
 800d802:	b0a6      	sub	sp, #152	; 0x98
 800d804:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d806:	2313      	movs	r3, #19
 800d808:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d80c:	4bb9      	ldr	r3, [pc, #740]	; (800daf4 <ProcessRadioRxDone+0x2f4>)
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d812:	4bb8      	ldr	r3, [pc, #736]	; (800daf4 <ProcessRadioRxDone+0x2f4>)
 800d814:	891b      	ldrh	r3, [r3, #8]
 800d816:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d81a:	4bb6      	ldr	r3, [pc, #728]	; (800daf4 <ProcessRadioRxDone+0x2f4>)
 800d81c:	895b      	ldrh	r3, [r3, #10]
 800d81e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d822:	4bb4      	ldr	r3, [pc, #720]	; (800daf4 <ProcessRadioRxDone+0x2f4>)
 800d824:	7b1b      	ldrb	r3, [r3, #12]
 800d826:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d82a:	2300      	movs	r3, #0
 800d82c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d830:	2300      	movs	r3, #0
 800d832:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d834:	4bb0      	ldr	r3, [pc, #704]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800d836:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d83a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d844:	2301      	movs	r3, #1
 800d846:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d84a:	4bac      	ldr	r3, [pc, #688]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d852:	4aaa      	ldr	r2, [pc, #680]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d854:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d858:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d85c:	4aa7      	ldr	r2, [pc, #668]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d85e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d862:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d866:	4ba5      	ldr	r3, [pc, #660]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d868:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d86c:	4ba3      	ldr	r3, [pc, #652]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d86e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d872:	4ba2      	ldr	r3, [pc, #648]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d874:	2200      	movs	r2, #0
 800d876:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d87a:	4ba0      	ldr	r3, [pc, #640]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d882:	4b9e      	ldr	r3, [pc, #632]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d88a:	4b9c      	ldr	r3, [pc, #624]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d892:	4b9a      	ldr	r3, [pc, #616]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d89a:	4b98      	ldr	r3, [pc, #608]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d8a2:	4b96      	ldr	r3, [pc, #600]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d8aa:	4b94      	ldr	r3, [pc, #592]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d8b2:	4b92      	ldr	r3, [pc, #584]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d8ba:	4b90      	ldr	r3, [pc, #576]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d8c2:	4b8e      	ldr	r3, [pc, #568]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d8ca:	4b8d      	ldr	r3, [pc, #564]	; (800db00 <ProcessRadioRxDone+0x300>)
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d8d0:	488c      	ldr	r0, [pc, #560]	; (800db04 <ProcessRadioRxDone+0x304>)
 800d8d2:	f00c fda1 	bl	801a418 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d8d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d8de:	f004 fb28 	bl	8011f32 <LoRaMacClassBRxBeacon>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00a      	beq.n	800d8fe <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d8e8:	4a84      	ldr	r2, [pc, #528]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d8ee:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d8f2:	4a82      	ldr	r2, [pc, #520]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d8f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d8f8:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d8fc:	e3bf      	b.n	800e07e <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d8fe:	4b7e      	ldr	r3, [pc, #504]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800d900:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d904:	2b01      	cmp	r3, #1
 800d906:	d11e      	bne.n	800d946 <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d908:	f004 fb26 	bl	8011f58 <LoRaMacClassBIsPingExpected>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00a      	beq.n	800d928 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d912:	2000      	movs	r0, #0
 800d914:	f004 fad7 	bl	8011ec6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d918:	2000      	movs	r0, #0
 800d91a:	f004 faf8 	bl	8011f0e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d91e:	4b77      	ldr	r3, [pc, #476]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d920:	2204      	movs	r2, #4
 800d922:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d926:	e00e      	b.n	800d946 <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d928:	f004 fb1d 	bl	8011f66 <LoRaMacClassBIsMulticastExpected>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d932:	2000      	movs	r0, #0
 800d934:	f004 fad1 	bl	8011eda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d938:	2000      	movs	r0, #0
 800d93a:	f004 faf1 	bl	8011f20 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d93e:	4b6f      	ldr	r3, [pc, #444]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d940:	2205      	movs	r2, #5
 800d942:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d946:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800d950:	461a      	mov	r2, r3
 800d952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d954:	4413      	add	r3, r2
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800d95c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d960:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d964:	b2db      	uxtb	r3, r3
 800d966:	3b01      	subs	r3, #1
 800d968:	2b06      	cmp	r3, #6
 800d96a:	f200 8362 	bhi.w	800e032 <ProcessRadioRxDone+0x832>
 800d96e:	a201      	add	r2, pc, #4	; (adr r2, 800d974 <ProcessRadioRxDone+0x174>)
 800d970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d974:	0800d991 	.word	0x0800d991
 800d978:	0800e033 	.word	0x0800e033
 800d97c:	0800db11 	.word	0x0800db11
 800d980:	0800e033 	.word	0x0800e033
 800d984:	0800db09 	.word	0x0800db09
 800d988:	0800e033 	.word	0x0800e033
 800d98c:	0800dfd9 	.word	0x0800dfd9
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d990:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d994:	2b10      	cmp	r3, #16
 800d996:	d806      	bhi.n	800d9a6 <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d998:	4b58      	ldr	r3, [pc, #352]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d9a0:	f7ff ff08 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800d9a4:	e36b      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800d9a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a8:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800d9aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d9b2:	4b51      	ldr	r3, [pc, #324]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800d9b4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d9bc:	4b4f      	ldr	r3, [pc, #316]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800d9c4:	f7ff fef6 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800d9c8:	e359      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800d9ca:	f7fe fbcf 	bl	800c16c <SecureElementGetJoinEui>
 800d9ce:	4601      	mov	r1, r0
 800d9d0:	f107 0308 	add.w	r3, r7, #8
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	20ff      	movs	r0, #255	; 0xff
 800d9d8:	f005 fc60 	bl	801329c <LoRaMacCryptoHandleJoinAccept>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800d9e2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d172      	bne.n	800dad0 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d9ea:	7c7b      	ldrb	r3, [r7, #17]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4b42      	ldr	r3, [pc, #264]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800d9f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d9f4:	4b40      	ldr	r3, [pc, #256]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800d9f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800d9fa:	7cbb      	ldrb	r3, [r7, #18]
 800d9fc:	021b      	lsls	r3, r3, #8
 800d9fe:	4313      	orrs	r3, r2
 800da00:	4a3d      	ldr	r2, [pc, #244]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da02:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800da06:	4b3c      	ldr	r3, [pc, #240]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800da0c:	7cfb      	ldrb	r3, [r7, #19]
 800da0e:	041b      	lsls	r3, r3, #16
 800da10:	4313      	orrs	r3, r2
 800da12:	4a39      	ldr	r2, [pc, #228]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da14:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	4a37      	ldr	r2, [pc, #220]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da1c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800da20:	7e3b      	ldrb	r3, [r7, #24]
 800da22:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800da26:	b2db      	uxtb	r3, r3
 800da28:	461a      	mov	r2, r3
 800da2a:	4b33      	ldr	r3, [pc, #204]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da30:	7e3b      	ldrb	r3, [r7, #24]
 800da32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da36:	b2db      	uxtb	r3, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	4b2f      	ldr	r3, [pc, #188]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da3c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800da40:	7e3b      	ldrb	r3, [r7, #24]
 800da42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800da46:	b2db      	uxtb	r3, r3
 800da48:	461a      	mov	r2, r3
 800da4a:	4b2b      	ldr	r3, [pc, #172]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800da50:	7e7b      	ldrb	r3, [r7, #25]
 800da52:	461a      	mov	r2, r3
 800da54:	4b28      	ldr	r3, [pc, #160]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da56:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800da58:	4b27      	ldr	r3, [pc, #156]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800da60:	4b25      	ldr	r3, [pc, #148]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da62:	2201      	movs	r2, #1
 800da64:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800da66:	4b24      	ldr	r3, [pc, #144]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800da6e:	fb02 f303 	mul.w	r3, r2, r3
 800da72:	4a21      	ldr	r2, [pc, #132]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da74:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800da76:	4b20      	ldr	r3, [pc, #128]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da7a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800da7e:	4a1e      	ldr	r2, [pc, #120]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da80:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800da82:	4b1d      	ldr	r3, [pc, #116]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800da84:	2200      	movs	r2, #0
 800da86:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800da8a:	f107 0308 	add.w	r3, r7, #8
 800da8e:	3312      	adds	r3, #18
 800da90:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800da92:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da96:	b2db      	uxtb	r3, r3
 800da98:	3b11      	subs	r3, #17
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800daa0:	4b15      	ldr	r3, [pc, #84]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800daa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daa6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f006 f9c4 	bl	8013e3a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dab2:	4b11      	ldr	r3, [pc, #68]	; (800daf8 <ProcessRadioRxDone+0x2f8>)
 800dab4:	2202      	movs	r2, #2
 800dab6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800daba:	2001      	movs	r0, #1
 800dabc:	f004 ff18 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00e      	beq.n	800dae4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800dac6:	2101      	movs	r1, #1
 800dac8:	2000      	movs	r0, #0
 800daca:	f004 fe85 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
 800dace:	e009      	b.n	800dae4 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dad0:	2001      	movs	r0, #1
 800dad2:	f004 ff0d 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dadc:	2101      	movs	r1, #1
 800dade:	2007      	movs	r0, #7
 800dae0:	f004 fe7a 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800dae4:	4a05      	ldr	r2, [pc, #20]	; (800dafc <ProcessRadioRxDone+0x2fc>)
 800dae6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800daea:	f043 0308 	orr.w	r3, r3, #8
 800daee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800daf2:	e2a5      	b.n	800e040 <ProcessRadioRxDone+0x840>
 800daf4:	200018a4 	.word	0x200018a4
 800daf8:	20000a4c 	.word	0x20000a4c
 800dafc:	20000544 	.word	0x20000544
 800db00:	0801bbc4 	.word	0x0801bbc4
 800db04:	200008dc 	.word	0x200008dc
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800db08:	4bae      	ldr	r3, [pc, #696]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800db10:	4bad      	ldr	r3, [pc, #692]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800db12:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800db16:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800db1a:	4baa      	ldr	r3, [pc, #680]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800db1c:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800db20:	b25b      	sxtb	r3, r3
 800db22:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800db26:	230d      	movs	r3, #13
 800db28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800db2c:	4ba6      	ldr	r3, [pc, #664]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800db2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800db36:	230e      	movs	r3, #14
 800db38:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800db3c:	4ba2      	ldr	r3, [pc, #648]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800db3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db42:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800db46:	4611      	mov	r1, r2
 800db48:	4618      	mov	r0, r3
 800db4a:	f006 f923 	bl	8013d94 <RegionGetPhyParam>
 800db4e:	4603      	mov	r3, r0
 800db50:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800db52:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db56:	3b0d      	subs	r3, #13
 800db58:	b29b      	uxth	r3, r3
 800db5a:	b21b      	sxth	r3, r3
 800db5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800db60:	b21a      	sxth	r2, r3
 800db62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db64:	b21b      	sxth	r3, r3
 800db66:	429a      	cmp	r2, r3
 800db68:	dc03      	bgt.n	800db72 <ProcessRadioRxDone+0x372>
 800db6a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db6e:	2b0b      	cmp	r3, #11
 800db70:	d806      	bhi.n	800db80 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db72:	4b94      	ldr	r3, [pc, #592]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800db74:	2201      	movs	r2, #1
 800db76:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800db7a:	f7ff fe1b 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800db7e:	e27e      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800db80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db82:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800db84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800db8e:	4b8f      	ldr	r3, [pc, #572]	; (800ddcc <ProcessRadioRxDone+0x5cc>)
 800db90:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800db92:	23ff      	movs	r3, #255	; 0xff
 800db94:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800db98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db9c:	4618      	mov	r0, r3
 800db9e:	f005 fe7c 	bl	801389a <LoRaMacParserData>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d006      	beq.n	800dbb6 <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dba8:	4b86      	ldr	r3, [pc, #536]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dbb0:	f7ff fe00 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800dbb4:	e263      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	4a82      	ldr	r2, [pc, #520]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dbba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dbbe:	1cba      	adds	r2, r7, #2
 800dbc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f002 fcde 	bl	8010588 <DetermineFrameType>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d006      	beq.n	800dbe0 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbd2:	4b7c      	ldr	r3, [pc, #496]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dbda:	f7ff fdeb 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800dbde:	e24e      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dbea:	2300      	movs	r3, #0
 800dbec:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dbf0:	e049      	b.n	800dc86 <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dbf2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dbf6:	4a74      	ldr	r2, [pc, #464]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dbf8:	212c      	movs	r1, #44	; 0x2c
 800dbfa:	fb01 f303 	mul.w	r3, r1, r3
 800dbfe:	4413      	add	r3, r2
 800dc00:	33d4      	adds	r3, #212	; 0xd4
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d138      	bne.n	800dc7c <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dc0a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc0e:	4a6e      	ldr	r2, [pc, #440]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dc10:	212c      	movs	r1, #44	; 0x2c
 800dc12:	fb01 f303 	mul.w	r3, r1, r3
 800dc16:	4413      	add	r3, r2
 800dc18:	33d2      	adds	r3, #210	; 0xd2
 800dc1a:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d02d      	beq.n	800dc7c <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dc20:	2301      	movs	r3, #1
 800dc22:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dc26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc2a:	4a67      	ldr	r2, [pc, #412]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dc2c:	212c      	movs	r1, #44	; 0x2c
 800dc2e:	fb01 f303 	mul.w	r3, r1, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	33d3      	adds	r3, #211	; 0xd3
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dc3c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc40:	4a61      	ldr	r2, [pc, #388]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dc42:	212c      	movs	r1, #44	; 0x2c
 800dc44:	fb01 f303 	mul.w	r3, r1, r3
 800dc48:	4413      	add	r3, r2
 800dc4a:	33f0      	adds	r3, #240	; 0xf0
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dc52:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc56:	4a5c      	ldr	r2, [pc, #368]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dc58:	212c      	movs	r1, #44	; 0x2c
 800dc5a:	fb01 f303 	mul.w	r3, r1, r3
 800dc5e:	4413      	add	r3, r2
 800dc60:	33d4      	adds	r3, #212	; 0xd4
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dc68:	4b57      	ldr	r3, [pc, #348]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dc6a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d10e      	bne.n	800dc90 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dc72:	4b54      	ldr	r3, [pc, #336]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dc74:	2203      	movs	r2, #3
 800dc76:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dc7a:	e009      	b.n	800dc90 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dc7c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc80:	3301      	adds	r3, #1
 800dc82:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dc86:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0b1      	beq.n	800dbf2 <ProcessRadioRxDone+0x3f2>
 800dc8e:	e000      	b.n	800dc92 <ProcessRadioRxDone+0x492>
                    break;
 800dc90:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dc92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d117      	bne.n	800dcca <ProcessRadioRxDone+0x4ca>
 800dc9a:	78bb      	ldrb	r3, [r7, #2]
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d10d      	bne.n	800dcbc <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dca0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dca4:	f003 0320 	and.w	r3, r3, #32
 800dca8:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dcae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dcb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcb6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d006      	beq.n	800dcca <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcbc:	4b41      	ldr	r3, [pc, #260]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcc4:	f7ff fd76 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800dcc8:	e1d9      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dcca:	2315      	movs	r3, #21
 800dccc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dcd0:	4b3d      	ldr	r3, [pc, #244]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dcd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dcd6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f006 f859 	bl	8013d94 <RegionGetPhyParam>
 800dce2:	4603      	mov	r3, r0
 800dce4:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dce6:	78b9      	ldrb	r1, [r7, #2]
 800dce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4d36      	ldr	r5, [pc, #216]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dcee:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800dcf2:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dcf6:	1d3a      	adds	r2, r7, #4
 800dcf8:	9202      	str	r2, [sp, #8]
 800dcfa:	1cfa      	adds	r2, r7, #3
 800dcfc:	9201      	str	r2, [sp, #4]
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800dd04:	4622      	mov	r2, r4
 800dd06:	f000 fe95 	bl	800ea34 <GetFCntDown>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd10:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d031      	beq.n	800dd7c <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dd18:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd1c:	2b07      	cmp	r3, #7
 800dd1e:	d119      	bne.n	800dd54 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dd20:	4b28      	ldr	r3, [pc, #160]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dd22:	2208      	movs	r2, #8
 800dd24:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dd28:	4b27      	ldr	r3, [pc, #156]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dd2a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d11d      	bne.n	800dd6e <ProcessRadioRxDone+0x56e>
 800dd32:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dd36:	f023 031f 	bic.w	r3, r3, #31
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2ba0      	cmp	r3, #160	; 0xa0
 800dd3e:	d116      	bne.n	800dd6e <ProcessRadioRxDone+0x56e>
 800dd40:	4b21      	ldr	r3, [pc, #132]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dd42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d111      	bne.n	800dd6e <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dd4a:	4b1f      	ldr	r3, [pc, #124]	; (800ddc8 <ProcessRadioRxDone+0x5c8>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800dd52:	e00c      	b.n	800dd6e <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dd54:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd58:	2b08      	cmp	r3, #8
 800dd5a:	d104      	bne.n	800dd66 <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dd5c:	4b19      	ldr	r3, [pc, #100]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dd5e:	220a      	movs	r2, #10
 800dd60:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800dd64:	e003      	b.n	800dd6e <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd66:	4b17      	ldr	r3, [pc, #92]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dd68:	2201      	movs	r2, #1
 800dd6a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a14      	ldr	r2, [pc, #80]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800dd72:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800dd76:	f7ff fd1d 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800dd7a:	e180      	b.n	800e07e <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dd7c:	78fa      	ldrb	r2, [r7, #3]
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800dd84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dd90:	f005 fbd0 	bl	8013534 <LoRaMacCryptoUnsecureMessage>
 800dd94:	4603      	mov	r3, r0
 800dd96:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd9a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d016      	beq.n	800ddd0 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800dda2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d104      	bne.n	800ddb4 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ddaa:	4b06      	ldr	r3, [pc, #24]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800ddac:	220b      	movs	r2, #11
 800ddae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800ddb2:	e003      	b.n	800ddbc <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ddb4:	4b03      	ldr	r3, [pc, #12]	; (800ddc4 <ProcessRadioRxDone+0x5c4>)
 800ddb6:	220c      	movs	r2, #12
 800ddb8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800ddbc:	f7ff fcfa 	bl	800d7b4 <PrepareRxDoneAbort>
                return;
 800ddc0:	e15d      	b.n	800e07e <ProcessRadioRxDone+0x87e>
 800ddc2:	bf00      	nop
 800ddc4:	20000544 	.word	0x20000544
 800ddc8:	20000a4c 	.word	0x20000a4c
 800ddcc:	2000077c 	.word	0x2000077c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ddd0:	4bac      	ldr	r3, [pc, #688]	; (800e084 <ProcessRadioRxDone+0x884>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800ddd8:	4aaa      	ldr	r2, [pc, #680]	; (800e084 <ProcessRadioRxDone+0x884>)
 800ddda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ddde:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800dde2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dde6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	461a      	mov	r2, r3
 800ddee:	4ba5      	ldr	r3, [pc, #660]	; (800e084 <ProcessRadioRxDone+0x884>)
 800ddf0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800ddf4:	4ba3      	ldr	r3, [pc, #652]	; (800e084 <ProcessRadioRxDone+0x884>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800ddfc:	4ba1      	ldr	r3, [pc, #644]	; (800e084 <ProcessRadioRxDone+0x884>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a9f      	ldr	r2, [pc, #636]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de08:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b00      	cmp	r3, #0
 800de18:	bf14      	ite	ne
 800de1a:	2301      	movne	r3, #1
 800de1c:	2300      	moveq	r3, #0
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	4b98      	ldr	r3, [pc, #608]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de22:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de26:	4b97      	ldr	r3, [pc, #604]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800de2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de32:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de36:	b2db      	uxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bf14      	ite	ne
 800de3c:	2301      	movne	r3, #1
 800de3e:	2300      	moveq	r3, #0
 800de40:	b2da      	uxtb	r2, r3
 800de42:	4b90      	ldr	r3, [pc, #576]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de44:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de48:	4b8e      	ldr	r3, [pc, #568]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de4a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800de52:	4b8c      	ldr	r3, [pc, #560]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de54:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d102      	bne.n	800de62 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800de5c:	4b8a      	ldr	r3, [pc, #552]	; (800e088 <ProcessRadioRxDone+0x888>)
 800de5e:	2200      	movs	r2, #0
 800de60:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800de62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de66:	2b01      	cmp	r3, #1
 800de68:	d104      	bne.n	800de74 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800de6a:	4b86      	ldr	r3, [pc, #536]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de6c:	2202      	movs	r2, #2
 800de6e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800de72:	e01f      	b.n	800deb4 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800de74:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800de78:	f023 031f 	bic.w	r3, r3, #31
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2ba0      	cmp	r3, #160	; 0xa0
 800de80:	d110      	bne.n	800dea4 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800de82:	4b81      	ldr	r3, [pc, #516]	; (800e088 <ProcessRadioRxDone+0x888>)
 800de84:	2201      	movs	r2, #1
 800de86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800de8a:	4b7f      	ldr	r3, [pc, #508]	; (800e088 <ProcessRadioRxDone+0x888>)
 800de8c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800de90:	2b00      	cmp	r3, #0
 800de92:	d102      	bne.n	800de9a <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800de94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de96:	4a7c      	ldr	r2, [pc, #496]	; (800e088 <ProcessRadioRxDone+0x888>)
 800de98:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de9a:	4b7a      	ldr	r3, [pc, #488]	; (800e084 <ProcessRadioRxDone+0x884>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800dea2:	e007      	b.n	800deb4 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800dea4:	4b78      	ldr	r3, [pc, #480]	; (800e088 <ProcessRadioRxDone+0x888>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800deac:	4b75      	ldr	r3, [pc, #468]	; (800e084 <ProcessRadioRxDone+0x884>)
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800deb4:	4b73      	ldr	r3, [pc, #460]	; (800e084 <ProcessRadioRxDone+0x884>)
 800deb6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800deba:	4a72      	ldr	r2, [pc, #456]	; (800e084 <ProcessRadioRxDone+0x884>)
 800debc:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800dec0:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800dec4:	4618      	mov	r0, r3
 800dec6:	f001 ff0d 	bl	800fce4 <RemoveMacCommands>

            switch( fType )
 800deca:	78bb      	ldrb	r3, [r7, #2]
 800decc:	2b03      	cmp	r3, #3
 800dece:	d874      	bhi.n	800dfba <ProcessRadioRxDone+0x7ba>
 800ded0:	a201      	add	r2, pc, #4	; (adr r2, 800ded8 <ProcessRadioRxDone+0x6d8>)
 800ded2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded6:	bf00      	nop
 800ded8:	0800dee9 	.word	0x0800dee9
 800dedc:	0800df39 	.word	0x0800df39
 800dee0:	0800df6f 	.word	0x0800df6f
 800dee4:	0800df95 	.word	0x0800df95
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dee8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800deec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800def0:	b2db      	uxtb	r3, r3
 800def2:	461c      	mov	r4, r3
 800def4:	4b63      	ldr	r3, [pc, #396]	; (800e084 <ProcessRadioRxDone+0x884>)
 800def6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800defa:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800defe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df02:	f102 0010 	add.w	r0, r2, #16
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	460b      	mov	r3, r1
 800df0a:	4622      	mov	r2, r4
 800df0c:	2100      	movs	r1, #0
 800df0e:	f000 ff03 	bl	800ed18 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df12:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df16:	4b5b      	ldr	r3, [pc, #364]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df18:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df1e:	4a59      	ldr	r2, [pc, #356]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df20:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800df24:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df28:	4b56      	ldr	r3, [pc, #344]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df2a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800df2e:	4b55      	ldr	r3, [pc, #340]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df30:	2201      	movs	r2, #1
 800df32:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800df36:	e047      	b.n	800dfc8 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800df38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df40:	b2db      	uxtb	r3, r3
 800df42:	461c      	mov	r4, r3
 800df44:	4b4f      	ldr	r3, [pc, #316]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df46:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df4a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df4e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df52:	f102 0010 	add.w	r0, r2, #16
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	460b      	mov	r3, r1
 800df5a:	4622      	mov	r2, r4
 800df5c:	2100      	movs	r1, #0
 800df5e:	f000 fedb 	bl	800ed18 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df62:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df66:	4b47      	ldr	r3, [pc, #284]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df68:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800df6c:	e02c      	b.n	800dfc8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800df6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800df70:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800df74:	4b43      	ldr	r3, [pc, #268]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df76:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df7a:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	460b      	mov	r3, r1
 800df82:	2100      	movs	r1, #0
 800df84:	f000 fec8 	bl	800ed18 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df88:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df8c:	4b3d      	ldr	r3, [pc, #244]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df8e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800df92:	e019      	b.n	800dfc8 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df94:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800df98:	4b3a      	ldr	r3, [pc, #232]	; (800e084 <ProcessRadioRxDone+0x884>)
 800df9a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa0:	4a38      	ldr	r2, [pc, #224]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dfa2:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800dfa6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dfaa:	4b36      	ldr	r3, [pc, #216]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dfac:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800dfb0:	4b34      	ldr	r3, [pc, #208]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800dfb8:	e006      	b.n	800dfc8 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfba:	4b32      	ldr	r3, [pc, #200]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800dfc2:	f7ff fbf7 	bl	800d7b4 <PrepareRxDoneAbort>
                    break;
 800dfc6:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800dfc8:	4a2e      	ldr	r2, [pc, #184]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dfca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dfce:	f043 0302 	orr.w	r3, r3, #2
 800dfd2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800dfd6:	e033      	b.n	800e040 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800dfd8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dfdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dfde:	18d1      	adds	r1, r2, r3
 800dfe0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800dfea:	1ad3      	subs	r3, r2, r3
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	461a      	mov	r2, r3
 800dff0:	4826      	ldr	r0, [pc, #152]	; (800e08c <ProcessRadioRxDone+0x88c>)
 800dff2:	f008 f9da 	bl	80163aa <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800dff6:	4b23      	ldr	r3, [pc, #140]	; (800e084 <ProcessRadioRxDone+0x884>)
 800dff8:	2203      	movs	r2, #3
 800dffa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dffe:	4b21      	ldr	r3, [pc, #132]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e000:	2200      	movs	r2, #0
 800e002:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e006:	4b1f      	ldr	r3, [pc, #124]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e008:	4a20      	ldr	r2, [pc, #128]	; (800e08c <ProcessRadioRxDone+0x88c>)
 800e00a:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e00e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e012:	b2da      	uxtb	r2, r3
 800e014:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	b2da      	uxtb	r2, r3
 800e01c:	4b19      	ldr	r3, [pc, #100]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e01e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e022:	4a18      	ldr	r2, [pc, #96]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e024:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e028:	f043 0302 	orr.w	r3, r3, #2
 800e02c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e030:	e006      	b.n	800e040 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e032:	4b14      	ldr	r3, [pc, #80]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e034:	2201      	movs	r2, #1
 800e036:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e03a:	f7ff fbbb 	bl	800d7b4 <PrepareRxDoneAbort>
            break;
 800e03e:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e040:	4b10      	ldr	r3, [pc, #64]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e042:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e046:	2b00      	cmp	r3, #0
 800e048:	d008      	beq.n	800e05c <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e04a:	4b0e      	ldr	r3, [pc, #56]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e04c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e054:	2000      	movs	r0, #0
 800e056:	f000 fcb7 	bl	800e9c8 <OnAckTimeoutTimerEvent>
 800e05a:	e007      	b.n	800e06c <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e05c:	4b0a      	ldr	r3, [pc, #40]	; (800e088 <ProcessRadioRxDone+0x888>)
 800e05e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e062:	2b02      	cmp	r3, #2
 800e064:	d102      	bne.n	800e06c <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e066:	2000      	movs	r0, #0
 800e068:	f000 fcae 	bl	800e9c8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e06c:	4a05      	ldr	r2, [pc, #20]	; (800e084 <ProcessRadioRxDone+0x884>)
 800e06e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e072:	f043 0320 	orr.w	r3, r3, #32
 800e076:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e07a:	f7ff fae9 	bl	800d650 <UpdateRxSlotIdleState>
}
 800e07e:	3788      	adds	r7, #136	; 0x88
 800e080:	46bd      	mov	sp, r7
 800e082:	bdb0      	pop	{r4, r5, r7, pc}
 800e084:	20000544 	.word	0x20000544
 800e088:	20000a4c 	.word	0x20000a4c
 800e08c:	2000077c 	.word	0x2000077c

0800e090 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e094:	4b11      	ldr	r3, [pc, #68]	; (800e0dc <ProcessRadioTxTimeout+0x4c>)
 800e096:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d002      	beq.n	800e0a4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e09e:	4b10      	ldr	r3, [pc, #64]	; (800e0e0 <ProcessRadioTxTimeout+0x50>)
 800e0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e0a4:	f7ff fad4 	bl	800d650 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <ProcessRadioTxTimeout+0x54>)
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e0b0:	2002      	movs	r0, #2
 800e0b2:	f004 fbe9 	bl	8012888 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <ProcessRadioTxTimeout+0x54>)
 800e0b8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d003      	beq.n	800e0c8 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e0c0:	4b08      	ldr	r3, [pc, #32]	; (800e0e4 <ProcessRadioTxTimeout+0x54>)
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e0c8:	4a06      	ldr	r2, [pc, #24]	; (800e0e4 <ProcessRadioTxTimeout+0x54>)
 800e0ca:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0ce:	f043 0320 	orr.w	r3, r3, #32
 800e0d2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e0d6:	bf00      	nop
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20000a4c 	.word	0x20000a4c
 800e0e0:	0801bbc4 	.word	0x0801bbc4
 800e0e4:	20000544 	.word	0x20000544

0800e0e8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	460a      	mov	r2, r1
 800e0f2:	71fb      	strb	r3, [r7, #7]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e0fc:	4b40      	ldr	r3, [pc, #256]	; (800e200 <HandleRadioRxErrorTimeout+0x118>)
 800e0fe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e102:	2b02      	cmp	r3, #2
 800e104:	d002      	beq.n	800e10c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e106:	4b3f      	ldr	r3, [pc, #252]	; (800e204 <HandleRadioRxErrorTimeout+0x11c>)
 800e108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e10c:	f003 ff1d 	bl	8011f4a <LoRaMacClassBIsBeaconExpected>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d007      	beq.n	800e126 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e116:	2002      	movs	r0, #2
 800e118:	f003 fecb 	bl	8011eb2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e11c:	2000      	movs	r0, #0
 800e11e:	f003 feed 	bl	8011efc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e122:	2301      	movs	r3, #1
 800e124:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e126:	4b36      	ldr	r3, [pc, #216]	; (800e200 <HandleRadioRxErrorTimeout+0x118>)
 800e128:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d119      	bne.n	800e164 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e130:	f003 ff12 	bl	8011f58 <LoRaMacClassBIsPingExpected>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d007      	beq.n	800e14a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e13a:	2000      	movs	r0, #0
 800e13c:	f003 fec3 	bl	8011ec6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e140:	2000      	movs	r0, #0
 800e142:	f003 fee4 	bl	8011f0e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e146:	2301      	movs	r3, #1
 800e148:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e14a:	f003 ff0c 	bl	8011f66 <LoRaMacClassBIsMulticastExpected>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d007      	beq.n	800e164 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e154:	2000      	movs	r0, #0
 800e156:	f003 fec0 	bl	8011eda <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e15a:	2000      	movs	r0, #0
 800e15c:	f003 fee0 	bl	8011f20 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e160:	2301      	movs	r3, #1
 800e162:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	f083 0301 	eor.w	r3, r3, #1
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d040      	beq.n	800e1f2 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e170:	4b25      	ldr	r3, [pc, #148]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e172:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e176:	2b00      	cmp	r3, #0
 800e178:	d122      	bne.n	800e1c0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e17a:	4b23      	ldr	r3, [pc, #140]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e17c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e184:	4a20      	ldr	r2, [pc, #128]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	4618      	mov	r0, r3
 800e190:	f004 fb7a 	bl	8012888 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e194:	4b1a      	ldr	r3, [pc, #104]	; (800e200 <HandleRadioRxErrorTimeout+0x118>)
 800e196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e198:	4618      	mov	r0, r3
 800e19a:	f00c fa69 	bl	801a670 <UTIL_TIMER_GetElapsedTime>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	4b19      	ldr	r3, [pc, #100]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e1a2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d323      	bcc.n	800e1f2 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e1aa:	4818      	ldr	r0, [pc, #96]	; (800e20c <HandleRadioRxErrorTimeout+0x124>)
 800e1ac:	f00c f934 	bl	801a418 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e1b0:	4a15      	ldr	r2, [pc, #84]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e1b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e1b6:	f043 0320 	orr.w	r3, r3, #32
 800e1ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e1be:	e018      	b.n	800e1f2 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e1c0:	4b11      	ldr	r3, [pc, #68]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e1c2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e1ca:	4a0f      	ldr	r2, [pc, #60]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e1cc:	79bb      	ldrb	r3, [r7, #6]
 800e1ce:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e1d2:	79bb      	ldrb	r3, [r7, #6]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 fb57 	bl	8012888 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e1da:	4b09      	ldr	r3, [pc, #36]	; (800e200 <HandleRadioRxErrorTimeout+0x118>)
 800e1dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	d006      	beq.n	800e1f2 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e1e4:	4a08      	ldr	r2, [pc, #32]	; (800e208 <HandleRadioRxErrorTimeout+0x120>)
 800e1e6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e1ea:	f043 0320 	orr.w	r3, r3, #32
 800e1ee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e1f2:	f7ff fa2d 	bl	800d650 <UpdateRxSlotIdleState>
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	20000a4c 	.word	0x20000a4c
 800e204:	0801bbc4 	.word	0x0801bbc4
 800e208:	20000544 	.word	0x20000544
 800e20c:	200008dc 	.word	0x200008dc

0800e210 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e214:	2106      	movs	r1, #6
 800e216:	2005      	movs	r0, #5
 800e218:	f7ff ff66 	bl	800e0e8 <HandleRadioRxErrorTimeout>
}
 800e21c:	bf00      	nop
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e224:	2104      	movs	r1, #4
 800e226:	2003      	movs	r0, #3
 800e228:	f7ff ff5e 	bl	800e0e8 <HandleRadioRxErrorTimeout>
}
 800e22c:	bf00      	nop
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e236:	f3ef 8310 	mrs	r3, PRIMASK
 800e23a:	607b      	str	r3, [r7, #4]
  return(result);
 800e23c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e23e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e240:	b672      	cpsid	i
}
 800e242:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e244:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <LoRaMacHandleIrqEvents+0x8c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e24a:	4b1c      	ldr	r3, [pc, #112]	; (800e2bc <LoRaMacHandleIrqEvents+0x8c>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	f383 8810 	msr	PRIMASK, r3
}
 800e25a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d027      	beq.n	800e2b2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e262:	783b      	ldrb	r3, [r7, #0]
 800e264:	f003 0310 	and.w	r3, r3, #16
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e26e:	f7ff fa07 	bl	800d680 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e272:	783b      	ldrb	r3, [r7, #0]
 800e274:	f003 0308 	and.w	r3, r3, #8
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e27e:	f7ff fabf 	bl	800d800 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e282:	783b      	ldrb	r3, [r7, #0]
 800e284:	f003 0304 	and.w	r3, r3, #4
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e28e:	f7ff feff 	bl	800e090 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e292:	783b      	ldrb	r3, [r7, #0]
 800e294:	f003 0302 	and.w	r3, r3, #2
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e29e:	f7ff ffb7 	bl	800e210 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e2a2:	783b      	ldrb	r3, [r7, #0]
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e2ae:	f7ff ffb7 	bl	800e220 <ProcessRadioRxTimeout>
        }
    }
}
 800e2b2:	bf00      	nop
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20000d98 	.word	0x20000d98

0800e2c0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2c4:	4b08      	ldr	r3, [pc, #32]	; (800e2e8 <LoRaMacIsBusy+0x28>)
 800e2c6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d106      	bne.n	800e2dc <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <LoRaMacIsBusy+0x28>)
 800e2d0:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d101      	bne.n	800e2dc <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	e000      	b.n	800e2de <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e2dc:	2301      	movs	r3, #1
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bc80      	pop	{r7}
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	20000544 	.word	0x20000544

0800e2ec <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e2f6:	4a04      	ldr	r2, [pc, #16]	; (800e308 <LoRaMacEnableRequests+0x1c>)
 800e2f8:	79fb      	ldrb	r3, [r7, #7]
 800e2fa:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	bc80      	pop	{r7}
 800e306:	4770      	bx	lr
 800e308:	20000544 	.word	0x20000544

0800e30c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e312:	4b2c      	ldr	r3, [pc, #176]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e314:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e318:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e31a:	4b2a      	ldr	r3, [pc, #168]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e31c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e320:	2b00      	cmp	r3, #0
 800e322:	d14a      	bne.n	800e3ba <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e324:	4b27      	ldr	r3, [pc, #156]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e326:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b00      	cmp	r3, #0
 800e332:	d006      	beq.n	800e342 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e334:	4a23      	ldr	r2, [pc, #140]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e336:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e33a:	f36f 0300 	bfc	r3, #0, #1
 800e33e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e342:	4b20      	ldr	r3, [pc, #128]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e344:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e348:	f003 0304 	and.w	r3, r3, #4
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d006      	beq.n	800e360 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e352:	4a1c      	ldr	r2, [pc, #112]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e354:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e358:	f36f 0382 	bfc	r3, #2, #1
 800e35c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e360:	2001      	movs	r0, #1
 800e362:	f7ff ffc3 	bl	800e2ec <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e366:	793b      	ldrb	r3, [r7, #4]
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d005      	beq.n	800e37e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e372:	4b14      	ldr	r3, [pc, #80]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e374:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4813      	ldr	r0, [pc, #76]	; (800e3c8 <LoRaMacHandleRequestEvents+0xbc>)
 800e37c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e37e:	793b      	ldrb	r3, [r7, #4]
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00e      	beq.n	800e3a8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e38a:	4810      	ldr	r0, [pc, #64]	; (800e3cc <LoRaMacHandleRequestEvents+0xc0>)
 800e38c:	f004 faca 	bl	8012924 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e390:	f004 fb14 	bl	80129bc <LoRaMacConfirmQueueGetCnt>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d006      	beq.n	800e3a8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e39a:	4a0a      	ldr	r2, [pc, #40]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e39c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3a0:	f043 0304 	orr.w	r3, r3, #4
 800e3a4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e3a8:	f003 fdfb 	bl	8011fa2 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e3ac:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <LoRaMacHandleRequestEvents+0xb8>)
 800e3ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3b2:	f36f 1345 	bfc	r3, #5, #1
 800e3b6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e3ba:	bf00      	nop
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20000544 	.word	0x20000544
 800e3c8:	2000097c 	.word	0x2000097c
 800e3cc:	20000990 	.word	0x20000990

0800e3d0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e3d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10a      	bne.n	800e3f6 <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e3e4:	1dfb      	adds	r3, r7, #7
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f004 f882 	bl	80124f0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e3f2:	f000 fc81 	bl	800ecf8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e3f6:	bf00      	nop
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	20000544 	.word	0x20000544

0800e404 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b088      	sub	sp, #32
 800e408:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e40a:	4b25      	ldr	r3, [pc, #148]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e40c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e410:	f003 0308 	and.w	r3, r3, #8
 800e414:	b2db      	uxtb	r3, r3
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00d      	beq.n	800e436 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e41a:	4a21      	ldr	r2, [pc, #132]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e41c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e420:	f36f 03c3 	bfc	r3, #3, #1
 800e424:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e428:	4b1d      	ldr	r3, [pc, #116]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e42a:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	491c      	ldr	r1, [pc, #112]	; (800e4a4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e432:	481d      	ldr	r0, [pc, #116]	; (800e4a8 <LoRaMacHandleIndicationEvents+0xa4>)
 800e434:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e436:	4b1a      	ldr	r3, [pc, #104]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e438:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d012      	beq.n	800e46c <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e446:	2307      	movs	r3, #7
 800e448:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e450:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	1d3a      	adds	r2, r7, #4
 800e458:	4912      	ldr	r1, [pc, #72]	; (800e4a4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e45a:	4610      	mov	r0, r2
 800e45c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e45e:	4a10      	ldr	r2, [pc, #64]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e460:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e464:	f36f 1304 	bfc	r3, #4, #1
 800e468:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e46c:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e46e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e472:	f003 0302 	and.w	r3, r3, #2
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00d      	beq.n	800e498 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e47c:	4a08      	ldr	r2, [pc, #32]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e47e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e482:	f36f 0341 	bfc	r3, #1, #1
 800e486:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <LoRaMacHandleIndicationEvents+0x9c>)
 800e48c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	4904      	ldr	r1, [pc, #16]	; (800e4a4 <LoRaMacHandleIndicationEvents+0xa0>)
 800e494:	4805      	ldr	r0, [pc, #20]	; (800e4ac <LoRaMacHandleIndicationEvents+0xa8>)
 800e496:	4798      	blx	r3
    }
}
 800e498:	bf00      	nop
 800e49a:	3720      	adds	r7, #32
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	20000544 	.word	0x20000544
 800e4a4:	200009c0 	.word	0x200009c0
 800e4a8:	200009a4 	.word	0x200009a4
 800e4ac:	20000960 	.word	0x20000960

0800e4b0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e4b6:	4b32      	ldr	r3, [pc, #200]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4b8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d058      	beq.n	800e578 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e4ce:	4b2c      	ldr	r3, [pc, #176]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4d0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d004      	beq.n	800e4e2 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e4d8:	4b29      	ldr	r3, [pc, #164]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4da:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d104      	bne.n	800e4ec <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e4e2:	f002 f89f 	bl	8010624 <CheckRetransUnconfirmedUplink>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	71fb      	strb	r3, [r7, #7]
 800e4ea:	e020      	b.n	800e52e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e4ec:	4b24      	ldr	r3, [pc, #144]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4ee:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d11b      	bne.n	800e52e <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e4f6:	4b22      	ldr	r3, [pc, #136]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4f8:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d014      	beq.n	800e52a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e500:	f002 f8bc 	bl	801067c <CheckRetransConfirmedUplink>
 800e504:	4603      	mov	r3, r0
 800e506:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e508:	4b1e      	ldr	r3, [pc, #120]	; (800e584 <LoRaMacHandleMcpsRequest+0xd4>)
 800e50a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10d      	bne.n	800e52e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e512:	79fb      	ldrb	r3, [r7, #7]
 800e514:	f083 0301 	eor.w	r3, r3, #1
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e51e:	f002 f929 	bl	8010774 <AckTimeoutRetriesProcess>
 800e522:	e004      	b.n	800e52e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e524:	f002 f964 	bl	80107f0 <AckTimeoutRetriesFinalize>
 800e528:	e001      	b.n	800e52e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e52a:	2301      	movs	r3, #1
 800e52c:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00d      	beq.n	800e550 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e534:	4814      	ldr	r0, [pc, #80]	; (800e588 <LoRaMacHandleMcpsRequest+0xd8>)
 800e536:	f00b ff6f 	bl	801a418 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e53a:	4b11      	ldr	r3, [pc, #68]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e53c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e540:	f023 0320 	bic.w	r3, r3, #32
 800e544:	4a0e      	ldr	r2, [pc, #56]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e546:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e54a:	f002 f8b9 	bl	80106c0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e54e:	e013      	b.n	800e578 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e550:	79bb      	ldrb	r3, [r7, #6]
 800e552:	f083 0301 	eor.w	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00d      	beq.n	800e578 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e55c:	4a08      	ldr	r2, [pc, #32]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e55e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e562:	f36f 1345 	bfc	r3, #5, #1
 800e566:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e56a:	4b05      	ldr	r3, [pc, #20]	; (800e580 <LoRaMacHandleMcpsRequest+0xd0>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e572:	2000      	movs	r0, #0
 800e574:	f000 f97e 	bl	800e874 <OnTxDelayedTimerEvent>
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20000544 	.word	0x20000544
 800e584:	20000a4c 	.word	0x20000a4c
 800e588:	200008ac 	.word	0x200008ac

0800e58c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e590:	4b1b      	ldr	r3, [pc, #108]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e592:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e596:	f003 0304 	and.w	r3, r3, #4
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d02c      	beq.n	800e5fa <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	f004 f9a5 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d012      	beq.n	800e5d2 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e5ac:	2001      	movs	r0, #1
 800e5ae:	f004 f941 	bl	8012834 <LoRaMacConfirmQueueGetStatus>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d103      	bne.n	800e5c0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e5b8:	4b11      	ldr	r3, [pc, #68]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5c0:	4b0f      	ldr	r3, [pc, #60]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e5c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5c6:	f023 0302 	bic.w	r3, r3, #2
 800e5ca:	4a0d      	ldr	r2, [pc, #52]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e5cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e5d0:	e013      	b.n	800e5fa <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e5d2:	2005      	movs	r0, #5
 800e5d4:	f004 f98c 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d105      	bne.n	800e5ea <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e5de:	2006      	movs	r0, #6
 800e5e0:	f004 f986 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800e5e4:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d007      	beq.n	800e5fa <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e5ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5f0:	f023 0302 	bic.w	r3, r3, #2
 800e5f4:	4a02      	ldr	r2, [pc, #8]	; (800e600 <LoRaMacHandleMlmeRequest+0x74>)
 800e5f6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e5fa:	bf00      	nop
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000544 	.word	0x20000544

0800e604 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e608:	200c      	movs	r0, #12
 800e60a:	f004 f971 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d019      	beq.n	800e648 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e614:	4b0e      	ldr	r3, [pc, #56]	; (800e650 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e616:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e620:	2b00      	cmp	r3, #0
 800e622:	d111      	bne.n	800e648 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e624:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e626:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e62a:	f003 0304 	and.w	r3, r3, #4
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d009      	beq.n	800e648 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e634:	4b06      	ldr	r3, [pc, #24]	; (800e650 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e636:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e63a:	f023 0302 	bic.w	r3, r3, #2
 800e63e:	4a04      	ldr	r2, [pc, #16]	; (800e650 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e640:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e644:	2301      	movs	r3, #1
 800e646:	e000      	b.n	800e64a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20000544 	.word	0x20000544

0800e654 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e654:	b480      	push	{r7}
 800e656:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e658:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <LoRaMacCheckForRxAbort+0x3c>)
 800e65a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00f      	beq.n	800e686 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e666:	4b0a      	ldr	r3, [pc, #40]	; (800e690 <LoRaMacCheckForRxAbort+0x3c>)
 800e668:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e66c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e670:	4a07      	ldr	r2, [pc, #28]	; (800e690 <LoRaMacCheckForRxAbort+0x3c>)
 800e672:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e676:	4b06      	ldr	r3, [pc, #24]	; (800e690 <LoRaMacCheckForRxAbort+0x3c>)
 800e678:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e67c:	f023 0302 	bic.w	r3, r3, #2
 800e680:	4a03      	ldr	r2, [pc, #12]	; (800e690 <LoRaMacCheckForRxAbort+0x3c>)
 800e682:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e686:	bf00      	nop
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	20000544 	.word	0x20000544

0800e694 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e69c:	2300      	movs	r3, #0
 800e69e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e6a4:	4b50      	ldr	r3, [pc, #320]	; (800e7e8 <LoRaMacHandleNvm+0x154>)
 800e6a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f040 8097 	bne.w	800e7de <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2124      	movs	r1, #36	; 0x24
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f007 fecd 	bl	8016454 <Crc32>
 800e6ba:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c0:	68ba      	ldr	r2, [r7, #8]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d006      	beq.n	800e6d4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68ba      	ldr	r2, [r7, #8]
 800e6ca:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e6cc:	89fb      	ldrh	r3, [r7, #14]
 800e6ce:	f043 0301 	orr.w	r3, r3, #1
 800e6d2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	3328      	adds	r3, #40	; 0x28
 800e6d8:	2114      	movs	r1, #20
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f007 feba 	bl	8016454 <Crc32>
 800e6e0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d006      	beq.n	800e6fa <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e6f2:	89fb      	ldrh	r3, [r7, #14]
 800e6f4:	f043 0302 	orr.w	r3, r3, #2
 800e6f8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3340      	adds	r3, #64	; 0x40
 800e6fe:	21d4      	movs	r1, #212	; 0xd4
 800e700:	4618      	mov	r0, r3
 800e702:	f007 fea7 	bl	8016454 <Crc32>
 800e706:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e70e:	68ba      	ldr	r2, [r7, #8]
 800e710:	429a      	cmp	r2, r3
 800e712:	d007      	beq.n	800e724 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e71c:	89fb      	ldrh	r3, [r7, #14]
 800e71e:	f043 0304 	orr.w	r3, r3, #4
 800e722:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e72a:	21bc      	movs	r1, #188	; 0xbc
 800e72c:	4618      	mov	r0, r3
 800e72e:	f007 fe91 	bl	8016454 <Crc32>
 800e732:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d007      	beq.n	800e750 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e748:	89fb      	ldrh	r3, [r7, #14]
 800e74a:	f043 0308 	orr.w	r3, r3, #8
 800e74e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e756:	2190      	movs	r1, #144	; 0x90
 800e758:	4618      	mov	r0, r3
 800e75a:	f007 fe7b 	bl	8016454 <Crc32>
 800e75e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d007      	beq.n	800e77c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e774:	89fb      	ldrh	r3, [r7, #14]
 800e776:	f043 0310 	orr.w	r3, r3, #16
 800e77a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e782:	21c4      	movs	r1, #196	; 0xc4
 800e784:	4618      	mov	r0, r3
 800e786:	f007 fe65 	bl	8016454 <Crc32>
 800e78a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	429a      	cmp	r2, r3
 800e796:	d007      	beq.n	800e7a8 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e7a0:	89fb      	ldrh	r3, [r7, #14]
 800e7a2:	f043 0320 	orr.w	r3, r3, #32
 800e7a6:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e7ae:	2114      	movs	r1, #20
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f007 fe4f 	bl	8016454 <Crc32>
 800e7b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d007      	beq.n	800e7d4 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e7cc:	89fb      	ldrh	r3, [r7, #14]
 800e7ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d2:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e7d4:	89fb      	ldrh	r3, [r7, #14]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f001 ffae 	bl	8010738 <CallNvmDataChangeCallback>
 800e7dc:	e000      	b.n	800e7e0 <LoRaMacHandleNvm+0x14c>
        return;
 800e7de:	bf00      	nop
}
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000544 	.word	0x20000544

0800e7ec <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e7f6:	f7ff fd1b 	bl	800e230 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e7fa:	f003 fc36 	bl	801206a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e7fe:	4b1b      	ldr	r3, [pc, #108]	; (800e86c <LoRaMacProcess+0x80>)
 800e800:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e804:	f003 0320 	and.w	r3, r3, #32
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d021      	beq.n	800e852 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e80e:	2000      	movs	r0, #0
 800e810:	f7ff fd6c 	bl	800e2ec <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e814:	f7ff ff1e 	bl	800e654 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e818:	f002 f81e 	bl	8010858 <IsRequestPending>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d006      	beq.n	800e830 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e822:	f7ff feef 	bl	800e604 <LoRaMacCheckForBeaconAcquisition>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d103      	bne.n	800e83e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e836:	f7ff fea9 	bl	800e58c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e83a:	f7ff fe39 	bl	800e4b0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e83e:	f7ff fd65 	bl	800e30c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e842:	f7ff fdc5 	bl	800e3d0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e846:	480a      	ldr	r0, [pc, #40]	; (800e870 <LoRaMacProcess+0x84>)
 800e848:	f7ff ff24 	bl	800e694 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e84c:	2001      	movs	r0, #1
 800e84e:	f7ff fd4d 	bl	800e2ec <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e852:	f7ff fdd7 	bl	800e404 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e856:	4b05      	ldr	r3, [pc, #20]	; (800e86c <LoRaMacProcess+0x80>)
 800e858:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d101      	bne.n	800e864 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e860:	f001 fb7c 	bl	800ff5c <OpenContinuousRxCWindow>
    }
}
 800e864:	bf00      	nop
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	20000544 	.word	0x20000544
 800e870:	20000a4c 	.word	0x20000a4c

0800e874 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e87c:	4817      	ldr	r0, [pc, #92]	; (800e8dc <OnTxDelayedTimerEvent+0x68>)
 800e87e:	f00b fdcb 	bl	801a418 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e882:	4b17      	ldr	r3, [pc, #92]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e884:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e888:	f023 0320 	bic.w	r3, r3, #32
 800e88c:	4a14      	ldr	r2, [pc, #80]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e88e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e892:	2001      	movs	r0, #1
 800e894:	f001 f8fc 	bl	800fa90 <ScheduleTx>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d018      	beq.n	800e8d0 <OnTxDelayedTimerEvent+0x5c>
 800e89e:	2b0b      	cmp	r3, #11
 800e8a0:	d016      	beq.n	800e8d0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e8a2:	4b10      	ldr	r3, [pc, #64]	; (800e8e4 <OnTxDelayedTimerEvent+0x70>)
 800e8a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	4b0d      	ldr	r3, [pc, #52]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e8ac:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e8b0:	4b0b      	ldr	r3, [pc, #44]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e8b2:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e8b6:	4b0a      	ldr	r3, [pc, #40]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e8b8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e8bc:	4b08      	ldr	r3, [pc, #32]	; (800e8e0 <OnTxDelayedTimerEvent+0x6c>)
 800e8be:	2209      	movs	r2, #9
 800e8c0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e8c4:	2009      	movs	r0, #9
 800e8c6:	f003 ffdf 	bl	8012888 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e8ca:	f001 fef9 	bl	80106c0 <StopRetransmission>
            break;
 800e8ce:	e000      	b.n	800e8d2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e8d0:	bf00      	nop
        }
    }
}
 800e8d2:	bf00      	nop
 800e8d4:	3708      	adds	r7, #8
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	200008ac 	.word	0x200008ac
 800e8e0:	20000544 	.word	0x20000544
 800e8e4:	20000a4c 	.word	0x20000a4c

0800e8e8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e8f0:	4b14      	ldr	r3, [pc, #80]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e8f2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e8f6:	4b13      	ldr	r3, [pc, #76]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e8f8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e8fc:	4b12      	ldr	r3, [pc, #72]	; (800e948 <OnRxWindow1TimerEvent+0x60>)
 800e8fe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e902:	b25a      	sxtb	r2, r3
 800e904:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e906:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e90a:	4b0f      	ldr	r3, [pc, #60]	; (800e948 <OnRxWindow1TimerEvent+0x60>)
 800e90c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e910:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e912:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <OnRxWindow1TimerEvent+0x60>)
 800e918:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e91c:	4b09      	ldr	r3, [pc, #36]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e91e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e922:	4b08      	ldr	r3, [pc, #32]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e924:	2200      	movs	r2, #0
 800e926:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e92a:	4b06      	ldr	r3, [pc, #24]	; (800e944 <OnRxWindow1TimerEvent+0x5c>)
 800e92c:	2200      	movs	r2, #0
 800e92e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e932:	4906      	ldr	r1, [pc, #24]	; (800e94c <OnRxWindow1TimerEvent+0x64>)
 800e934:	4806      	ldr	r0, [pc, #24]	; (800e950 <OnRxWindow1TimerEvent+0x68>)
 800e936:	f001 fae3 	bl	800ff00 <RxWindowSetup>
}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20000544 	.word	0x20000544
 800e948:	20000a4c 	.word	0x20000a4c
 800e94c:	200008fc 	.word	0x200008fc
 800e950:	200008c4 	.word	0x200008c4

0800e954 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e95c:	4b16      	ldr	r3, [pc, #88]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e95e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e962:	2b00      	cmp	r3, #0
 800e964:	d023      	beq.n	800e9ae <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e968:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e96c:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e96e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e972:	4b12      	ldr	r3, [pc, #72]	; (800e9bc <OnRxWindow2TimerEvent+0x68>)
 800e974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e976:	4a10      	ldr	r2, [pc, #64]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e978:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e97c:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <OnRxWindow2TimerEvent+0x68>)
 800e97e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e982:	4b0d      	ldr	r3, [pc, #52]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e984:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e988:	4b0c      	ldr	r3, [pc, #48]	; (800e9bc <OnRxWindow2TimerEvent+0x68>)
 800e98a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e98e:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e990:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e994:	4b08      	ldr	r3, [pc, #32]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e996:	2200      	movs	r2, #0
 800e998:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <OnRxWindow2TimerEvent+0x64>)
 800e99e:	2201      	movs	r2, #1
 800e9a0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e9a4:	4906      	ldr	r1, [pc, #24]	; (800e9c0 <OnRxWindow2TimerEvent+0x6c>)
 800e9a6:	4807      	ldr	r0, [pc, #28]	; (800e9c4 <OnRxWindow2TimerEvent+0x70>)
 800e9a8:	f001 faaa 	bl	800ff00 <RxWindowSetup>
 800e9ac:	e000      	b.n	800e9b0 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e9ae:	bf00      	nop
}
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20000544 	.word	0x20000544
 800e9bc:	20000a4c 	.word	0x20000a4c
 800e9c0:	20000910 	.word	0x20000910
 800e9c4:	200008dc 	.word	0x200008dc

0800e9c8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e9d0:	4815      	ldr	r0, [pc, #84]	; (800ea28 <OnAckTimeoutTimerEvent+0x60>)
 800e9d2:	f00b fd21 	bl	801a418 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e9d6:	4b15      	ldr	r3, [pc, #84]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800e9d8:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d003      	beq.n	800e9e8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e9e0:	4b12      	ldr	r3, [pc, #72]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e9e8:	4b11      	ldr	r3, [pc, #68]	; (800ea30 <OnAckTimeoutTimerEvent+0x68>)
 800e9ea:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e9ee:	2b02      	cmp	r3, #2
 800e9f0:	d106      	bne.n	800ea00 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800e9f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e9f8:	f043 0320 	orr.w	r3, r3, #32
 800e9fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea00:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800ea02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00a      	beq.n	800ea20 <OnAckTimeoutTimerEvent+0x58>
 800ea0a:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800ea0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d004      	beq.n	800ea20 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea16:	4b05      	ldr	r3, [pc, #20]	; (800ea2c <OnAckTimeoutTimerEvent+0x64>)
 800ea18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	4798      	blx	r3
    }
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	2000093c 	.word	0x2000093c
 800ea2c:	20000544 	.word	0x20000544
 800ea30:	20000a4c 	.word	0x20000a4c

0800ea34 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60ba      	str	r2, [r7, #8]
 800ea3c:	607b      	str	r3, [r7, #4]
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
 800ea42:	460b      	mov	r3, r1
 800ea44:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <GetFCntDown+0x24>
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <GetFCntDown+0x24>
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ea58:	230a      	movs	r3, #10
 800ea5a:	e029      	b.n	800eab0 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d016      	beq.n	800ea90 <GetFCntDown+0x5c>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d118      	bne.n	800ea98 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ea66:	79bb      	ldrb	r3, [r7, #6]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d10d      	bne.n	800ea88 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ea6c:	7bbb      	ldrb	r3, [r7, #14]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d002      	beq.n	800ea78 <GetFCntDown+0x44>
 800ea72:	7bbb      	ldrb	r3, [r7, #14]
 800ea74:	2b03      	cmp	r3, #3
 800ea76:	d103      	bne.n	800ea80 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2202      	movs	r2, #2
 800ea7c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ea7e:	e00d      	b.n	800ea9c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	2201      	movs	r2, #1
 800ea84:	701a      	strb	r2, [r3, #0]
            break;
 800ea86:	e009      	b.n	800ea9c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	2203      	movs	r2, #3
 800ea8c:	701a      	strb	r2, [r3, #0]
            break;
 800ea8e:	e005      	b.n	800ea9c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2204      	movs	r2, #4
 800ea94:	701a      	strb	r2, [r3, #0]
            break;
 800ea96:	e001      	b.n	800ea9c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ea98:	2305      	movs	r3, #5
 800ea9a:	e009      	b.n	800eab0 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	7818      	ldrb	r0, [r3, #0]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	89db      	ldrh	r3, [r3, #14]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	8b39      	ldrh	r1, [r7, #24]
 800eaa8:	6a3b      	ldr	r3, [r7, #32]
 800eaaa:	f004 faf1 	bl	8013090 <LoRaMacCryptoGetFCntDown>
 800eaae:	4603      	mov	r3, r0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eab8:	b5b0      	push	{r4, r5, r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eac2:	2303      	movs	r3, #3
 800eac4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eac6:	4b61      	ldr	r3, [pc, #388]	; (800ec4c <SwitchClass+0x194>)
 800eac8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eacc:	2b02      	cmp	r3, #2
 800eace:	f000 80a5 	beq.w	800ec1c <SwitchClass+0x164>
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	f300 80b4 	bgt.w	800ec40 <SwitchClass+0x188>
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d003      	beq.n	800eae4 <SwitchClass+0x2c>
 800eadc:	2b01      	cmp	r3, #1
 800eade:	f000 808f 	beq.w	800ec00 <SwitchClass+0x148>
 800eae2:	e0ad      	b.n	800ec40 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eae4:	79fb      	ldrb	r3, [r7, #7]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d107      	bne.n	800eafa <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800eaea:	4b58      	ldr	r3, [pc, #352]	; (800ec4c <SwitchClass+0x194>)
 800eaec:	4a57      	ldr	r2, [pc, #348]	; (800ec4c <SwitchClass+0x194>)
 800eaee:	336c      	adds	r3, #108	; 0x6c
 800eaf0:	3264      	adds	r2, #100	; 0x64
 800eaf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eaf6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d10c      	bne.n	800eb1a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800eb00:	79fb      	ldrb	r3, [r7, #7]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f003 fa53 	bl	8011fae <LoRaMacClassBSwitchClass>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d103      	bne.n	800eb1a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb12:	4a4e      	ldr	r2, [pc, #312]	; (800ec4c <SwitchClass+0x194>)
 800eb14:	79fb      	ldrb	r3, [r7, #7]
 800eb16:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800eb1a:	79fb      	ldrb	r3, [r7, #7]
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	f040 808a 	bne.w	800ec36 <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb22:	4a4a      	ldr	r2, [pc, #296]	; (800ec4c <SwitchClass+0x194>)
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800eb2a:	4a49      	ldr	r2, [pc, #292]	; (800ec50 <SwitchClass+0x198>)
 800eb2c:	4b48      	ldr	r3, [pc, #288]	; (800ec50 <SwitchClass+0x198>)
 800eb2e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800eb32:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800eb36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb3a:	682b      	ldr	r3, [r5, #0]
 800eb3c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eb3e:	4b44      	ldr	r3, [pc, #272]	; (800ec50 <SwitchClass+0x198>)
 800eb40:	2202      	movs	r2, #2
 800eb42:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb46:	2300      	movs	r3, #0
 800eb48:	73bb      	strb	r3, [r7, #14]
 800eb4a:	e049      	b.n	800ebe0 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800eb4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb50:	4a3e      	ldr	r2, [pc, #248]	; (800ec4c <SwitchClass+0x194>)
 800eb52:	212c      	movs	r1, #44	; 0x2c
 800eb54:	fb01 f303 	mul.w	r3, r1, r3
 800eb58:	4413      	add	r3, r2
 800eb5a:	33d2      	adds	r3, #210	; 0xd2
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d038      	beq.n	800ebd4 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800eb62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb66:	4a39      	ldr	r2, [pc, #228]	; (800ec4c <SwitchClass+0x194>)
 800eb68:	212c      	movs	r1, #44	; 0x2c
 800eb6a:	fb01 f303 	mul.w	r3, r1, r3
 800eb6e:	4413      	add	r3, r2
 800eb70:	33e8      	adds	r3, #232	; 0xe8
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a35      	ldr	r2, [pc, #212]	; (800ec4c <SwitchClass+0x194>)
 800eb76:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800eb78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb7c:	4a33      	ldr	r2, [pc, #204]	; (800ec4c <SwitchClass+0x194>)
 800eb7e:	212c      	movs	r1, #44	; 0x2c
 800eb80:	fb01 f303 	mul.w	r3, r1, r3
 800eb84:	4413      	add	r3, r2
 800eb86:	33ec      	adds	r3, #236	; 0xec
 800eb88:	f993 3000 	ldrsb.w	r3, [r3]
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	4b2f      	ldr	r3, [pc, #188]	; (800ec4c <SwitchClass+0x194>)
 800eb90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eb94:	4b2e      	ldr	r3, [pc, #184]	; (800ec50 <SwitchClass+0x198>)
 800eb96:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800eb9a:	4b2d      	ldr	r3, [pc, #180]	; (800ec50 <SwitchClass+0x198>)
 800eb9c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eba0:	4b2a      	ldr	r3, [pc, #168]	; (800ec4c <SwitchClass+0x194>)
 800eba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba4:	4a2a      	ldr	r2, [pc, #168]	; (800ec50 <SwitchClass+0x198>)
 800eba6:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ebaa:	4b28      	ldr	r3, [pc, #160]	; (800ec4c <SwitchClass+0x194>)
 800ebac:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ebb0:	4b27      	ldr	r3, [pc, #156]	; (800ec50 <SwitchClass+0x198>)
 800ebb2:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ebb6:	4b25      	ldr	r3, [pc, #148]	; (800ec4c <SwitchClass+0x194>)
 800ebb8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ebbc:	4b24      	ldr	r3, [pc, #144]	; (800ec50 <SwitchClass+0x198>)
 800ebbe:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ebc2:	4b23      	ldr	r3, [pc, #140]	; (800ec50 <SwitchClass+0x198>)
 800ebc4:	2203      	movs	r2, #3
 800ebc6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ebca:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <SwitchClass+0x198>)
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ebd2:	e009      	b.n	800ebe8 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	3301      	adds	r3, #1
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	73bb      	strb	r3, [r7, #14]
 800ebe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	ddb1      	ble.n	800eb4c <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ebe8:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <SwitchClass+0x198>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ebf0:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <SwitchClass+0x19c>)
 800ebf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ebf6:	f001 f9b1 	bl	800ff5c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ebfe:	e01a      	b.n	800ec36 <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ec00:	79fb      	ldrb	r3, [r7, #7]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f003 f9d3 	bl	8011fae <LoRaMacClassBSwitchClass>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d113      	bne.n	800ec3a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec12:	4a0e      	ldr	r2, [pc, #56]	; (800ec4c <SwitchClass+0x194>)
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ec1a:	e00e      	b.n	800ec3a <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10d      	bne.n	800ec3e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ec22:	4a0a      	ldr	r2, [pc, #40]	; (800ec4c <SwitchClass+0x194>)
 800ec24:	79fb      	ldrb	r3, [r7, #7]
 800ec26:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ec2a:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <SwitchClass+0x19c>)
 800ec2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ec34:	e003      	b.n	800ec3e <SwitchClass+0x186>
            break;
 800ec36:	bf00      	nop
 800ec38:	e002      	b.n	800ec40 <SwitchClass+0x188>
            break;
 800ec3a:	bf00      	nop
 800ec3c:	e000      	b.n	800ec40 <SwitchClass+0x188>
            break;
 800ec3e:	bf00      	nop
        }
    }

    return status;
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bdb0      	pop	{r4, r5, r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	20000a4c 	.word	0x20000a4c
 800ec50:	20000544 	.word	0x20000544
 800ec54:	0801bbc4 	.word	0x0801bbc4

0800ec58 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec62:	4b10      	ldr	r3, [pc, #64]	; (800eca4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ec68:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ec6a:	79fb      	ldrb	r3, [r7, #7]
 800ec6c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ec6e:	230d      	movs	r3, #13
 800ec70:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ec72:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec7c:	230e      	movs	r3, #14
 800ec7e:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec80:	4b08      	ldr	r3, [pc, #32]	; (800eca4 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec86:	f107 0210 	add.w	r2, r7, #16
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f005 f881 	bl	8013d94 <RegionGetPhyParam>
 800ec92:	4603      	mov	r3, r0
 800ec94:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	b2db      	uxtb	r3, r3
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000a4c 	.word	0x20000a4c

0800eca8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	4603      	mov	r3, r0
 800ecb0:	71fb      	strb	r3, [r7, #7]
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	71bb      	strb	r3, [r7, #6]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ecc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff ffc6 	bl	800ec58 <GetMaxAppPayloadWithoutFOptsLength>
 800eccc:	4603      	mov	r3, r0
 800ecce:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ecd0:	79fb      	ldrb	r3, [r7, #7]
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	797b      	ldrb	r3, [r7, #5]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	4413      	add	r3, r2
 800ecda:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ecdc:	89ba      	ldrh	r2, [r7, #12]
 800ecde:	89fb      	ldrh	r3, [r7, #14]
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d804      	bhi.n	800ecee <ValidatePayloadLength+0x46>
 800ece4:	89bb      	ldrh	r3, [r7, #12]
 800ece6:	2bff      	cmp	r3, #255	; 0xff
 800ece8:	d801      	bhi.n	800ecee <ValidatePayloadLength+0x46>
    {
        return true;
 800ecea:	2301      	movs	r3, #1
 800ecec:	e000      	b.n	800ecf0 <ValidatePayloadLength+0x48>
    }
    return false;
 800ecee:	2300      	movs	r3, #0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800ecfc:	4a05      	ldr	r2, [pc, #20]	; (800ed14 <SetMlmeScheduleUplinkIndication+0x1c>)
 800ecfe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800ed02:	f043 0310 	orr.w	r3, r3, #16
 800ed06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800ed0a:	bf00      	nop
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bc80      	pop	{r7}
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	20000544 	.word	0x20000544

0800ed18 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ed18:	b590      	push	{r4, r7, lr}
 800ed1a:	b0a5      	sub	sp, #148	; 0x94
 800ed1c:	af02      	add	r7, sp, #8
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	4608      	mov	r0, r1
 800ed22:	4611      	mov	r1, r2
 800ed24:	461a      	mov	r2, r3
 800ed26:	4603      	mov	r3, r0
 800ed28:	70fb      	strb	r3, [r7, #3]
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	70bb      	strb	r3, [r7, #2]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800ed44:	f000 bc73 	b.w	800f62e <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ed48:	78fb      	ldrb	r3, [r7, #3]
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f003 fbf5 	bl	8012540 <LoRaMacCommandsGetCmdSize>
 800ed56:	4603      	mov	r3, r0
 800ed58:	461a      	mov	r2, r3
 800ed5a:	78fb      	ldrb	r3, [r7, #3]
 800ed5c:	441a      	add	r2, r3
 800ed5e:	78bb      	ldrb	r3, [r7, #2]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	f300 846a 	bgt.w	800f63a <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	70fa      	strb	r2, [r7, #3]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	3b02      	subs	r3, #2
 800ed76:	2b11      	cmp	r3, #17
 800ed78:	f200 8461 	bhi.w	800f63e <ProcessMacCommands+0x926>
 800ed7c:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <ProcessMacCommands+0x6c>)
 800ed7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed82:	bf00      	nop
 800ed84:	0800edcd 	.word	0x0800edcd
 800ed88:	0800ee0f 	.word	0x0800ee0f
 800ed8c:	0800ef2b 	.word	0x0800ef2b
 800ed90:	0800ef69 	.word	0x0800ef69
 800ed94:	0800f059 	.word	0x0800f059
 800ed98:	0800f0b5 	.word	0x0800f0b5
 800ed9c:	0800f171 	.word	0x0800f171
 800eda0:	0800f1cb 	.word	0x0800f1cb
 800eda4:	0800f2af 	.word	0x0800f2af
 800eda8:	0800f63f 	.word	0x0800f63f
 800edac:	0800f63f 	.word	0x0800f63f
 800edb0:	0800f359 	.word	0x0800f359
 800edb4:	0800f63f 	.word	0x0800f63f
 800edb8:	0800f63f 	.word	0x0800f63f
 800edbc:	0800f46f 	.word	0x0800f46f
 800edc0:	0800f4a3 	.word	0x0800f4a3
 800edc4:	0800f533 	.word	0x0800f533
 800edc8:	0800f5a9 	.word	0x0800f5a9
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800edcc:	2004      	movs	r0, #4
 800edce:	f003 fd8f 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 842a 	beq.w	800f62e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800edda:	2104      	movs	r1, #4
 800eddc:	2000      	movs	r0, #0
 800edde:	f003 fcfb 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ede2:	78fb      	ldrb	r3, [r7, #3]
 800ede4:	1c5a      	adds	r2, r3, #1
 800ede6:	70fa      	strb	r2, [r7, #3]
 800ede8:	461a      	mov	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4413      	add	r3, r2
 800edee:	781a      	ldrb	r2, [r3, #0]
 800edf0:	4bad      	ldr	r3, [pc, #692]	; (800f0a8 <ProcessMacCommands+0x390>)
 800edf2:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800edf6:	78fb      	ldrb	r3, [r7, #3]
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	70fa      	strb	r2, [r7, #3]
 800edfc:	461a      	mov	r2, r3
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4413      	add	r3, r2
 800ee02:	781a      	ldrb	r2, [r3, #0]
 800ee04:	4ba8      	ldr	r3, [pc, #672]	; (800f0a8 <ProcessMacCommands+0x390>)
 800ee06:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800ee0a:	f000 bc10 	b.w	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800ee26:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ee2a:	f083 0301 	eor.w	r3, r3, #1
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d078      	beq.n	800ef26 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ee34:	2301      	movs	r3, #1
 800ee36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	4413      	add	r3, r2
 800ee42:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ee44:	78ba      	ldrb	r2, [r7, #2]
 800ee46:	78fb      	ldrb	r3, [r7, #3]
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ee54:	4b95      	ldr	r3, [pc, #596]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee56:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ee5a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ee5e:	4b93      	ldr	r3, [pc, #588]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ee64:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ee68:	4b90      	ldr	r3, [pc, #576]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee6a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ee6e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ee72:	4b8e      	ldr	r3, [pc, #568]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee74:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ee78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ee7c:	4b8b      	ldr	r3, [pc, #556]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee7e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee82:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ee86:	4b89      	ldr	r3, [pc, #548]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee88:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ee8c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ee8e:	4b87      	ldr	r3, [pc, #540]	; (800f0ac <ProcessMacCommands+0x394>)
 800ee90:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee94:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ee98:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ee9c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800eea0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	4623      	mov	r3, r4
 800eeae:	f005 f82f 	bl	8013f10 <RegionLinkAdrReq>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800eeb8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eebc:	f003 0307 	and.w	r3, r3, #7
 800eec0:	2b07      	cmp	r3, #7
 800eec2:	d10e      	bne.n	800eee2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800eec4:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800eec8:	4b78      	ldr	r3, [pc, #480]	; (800f0ac <ProcessMacCommands+0x394>)
 800eeca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800eece:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800eed2:	4b76      	ldr	r3, [pc, #472]	; (800f0ac <ProcessMacCommands+0x394>)
 800eed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800eed8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800eedc:	4b73      	ldr	r3, [pc, #460]	; (800f0ac <ProcessMacCommands+0x394>)
 800eede:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800eee2:	2300      	movs	r3, #0
 800eee4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800eee8:	e00b      	b.n	800ef02 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800eeea:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800eeee:	2201      	movs	r2, #1
 800eef0:	4619      	mov	r1, r3
 800eef2:	2003      	movs	r0, #3
 800eef4:	f003 f9d4 	bl	80122a0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800eef8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800eefc:	3301      	adds	r3, #1
 800eefe:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ef02:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ef06:	4a6a      	ldr	r2, [pc, #424]	; (800f0b0 <ProcessMacCommands+0x398>)
 800ef08:	fba2 2303 	umull	r2, r3, r2, r3
 800ef0c:	089b      	lsrs	r3, r3, #2
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d3e8      	bcc.n	800eeea <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ef18:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800ef1c:	78fb      	ldrb	r3, [r7, #3]
 800ef1e:	4413      	add	r3, r2
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	3b01      	subs	r3, #1
 800ef24:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800ef26:	bf00      	nop
 800ef28:	e381      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ef2a:	78fb      	ldrb	r3, [r7, #3]
 800ef2c:	1c5a      	adds	r2, r3, #1
 800ef2e:	70fa      	strb	r2, [r7, #3]
 800ef30:	461a      	mov	r2, r3
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4413      	add	r3, r2
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	f003 030f 	and.w	r3, r3, #15
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	4b5b      	ldr	r3, [pc, #364]	; (800f0ac <ProcessMacCommands+0x394>)
 800ef40:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800ef44:	4b59      	ldr	r3, [pc, #356]	; (800f0ac <ProcessMacCommands+0x394>)
 800ef46:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	4093      	lsls	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	4b56      	ldr	r3, [pc, #344]	; (800f0ac <ProcessMacCommands+0x394>)
 800ef54:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800ef58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	4619      	mov	r1, r3
 800ef60:	2004      	movs	r0, #4
 800ef62:	f003 f99d 	bl	80122a0 <LoRaMacCommandsAddCmd>
                break;
 800ef66:	e362      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800ef68:	2307      	movs	r3, #7
 800ef6a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800ef6e:	78fb      	ldrb	r3, [r7, #3]
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	4413      	add	r3, r2
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	091b      	lsrs	r3, r3, #4
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	b25b      	sxtb	r3, r3
 800ef7c:	f003 0307 	and.w	r3, r3, #7
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800ef86:	78fb      	ldrb	r3, [r7, #3]
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	b25b      	sxtb	r3, r3
 800ef90:	f003 030f 	and.w	r3, r3, #15
 800ef94:	b25b      	sxtb	r3, r3
 800ef96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800ef9a:	78fb      	ldrb	r3, [r7, #3]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800efa0:	78fb      	ldrb	r3, [r7, #3]
 800efa2:	1c5a      	adds	r2, r3, #1
 800efa4:	70fa      	strb	r2, [r7, #3]
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4413      	add	r3, r2
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800efb0:	78fb      	ldrb	r3, [r7, #3]
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	70fa      	strb	r2, [r7, #3]
 800efb6:	461a      	mov	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4413      	add	r3, r2
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	021a      	lsls	r2, r3, #8
 800efc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc2:	4313      	orrs	r3, r2
 800efc4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800efc6:	78fb      	ldrb	r3, [r7, #3]
 800efc8:	1c5a      	adds	r2, r3, #1
 800efca:	70fa      	strb	r2, [r7, #3]
 800efcc:	461a      	mov	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	4413      	add	r3, r2
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	041a      	lsls	r2, r3, #16
 800efd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd8:	4313      	orrs	r3, r2
 800efda:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800efdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efde:	2264      	movs	r2, #100	; 0x64
 800efe0:	fb02 f303 	mul.w	r3, r2, r3
 800efe4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800efe6:	4b31      	ldr	r3, [pc, #196]	; (800f0ac <ProcessMacCommands+0x394>)
 800efe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f004 ffa6 	bl	8013f44 <RegionRxParamSetupReq>
 800eff8:	4603      	mov	r3, r0
 800effa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800effe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b07      	cmp	r3, #7
 800f008:	d117      	bne.n	800f03a <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f00a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	4b26      	ldr	r3, [pc, #152]	; (800f0ac <ProcessMacCommands+0x394>)
 800f012:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f016:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	4b23      	ldr	r3, [pc, #140]	; (800f0ac <ProcessMacCommands+0x394>)
 800f01e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f024:	4a21      	ldr	r2, [pc, #132]	; (800f0ac <ProcessMacCommands+0x394>)
 800f026:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f02a:	4a20      	ldr	r2, [pc, #128]	; (800f0ac <ProcessMacCommands+0x394>)
 800f02c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f02e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f032:	b2da      	uxtb	r2, r3
 800f034:	4b1d      	ldr	r3, [pc, #116]	; (800f0ac <ProcessMacCommands+0x394>)
 800f036:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f03a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f03e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f042:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f046:	2201      	movs	r2, #1
 800f048:	4619      	mov	r1, r3
 800f04a:	2005      	movs	r0, #5
 800f04c:	f003 f928 	bl	80122a0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f050:	f7ff fe52 	bl	800ecf8 <SetMlmeScheduleUplinkIndication>
                break;
 800f054:	bf00      	nop
 800f056:	e2ea      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f058:	23ff      	movs	r3, #255	; 0xff
 800f05a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f05e:	4b12      	ldr	r3, [pc, #72]	; (800f0a8 <ProcessMacCommands+0x390>)
 800f060:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f064:	2b00      	cmp	r3, #0
 800f066:	d00d      	beq.n	800f084 <ProcessMacCommands+0x36c>
 800f068:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <ProcessMacCommands+0x390>)
 800f06a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d007      	beq.n	800f084 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f074:	4b0c      	ldr	r3, [pc, #48]	; (800f0a8 <ProcessMacCommands+0x390>)
 800f076:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4798      	blx	r3
 800f07e:	4603      	mov	r3, r0
 800f080:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f084:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f088:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f08c:	787b      	ldrb	r3, [r7, #1]
 800f08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f098:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f09c:	2202      	movs	r2, #2
 800f09e:	4619      	mov	r1, r3
 800f0a0:	2006      	movs	r0, #6
 800f0a2:	f003 f8fd 	bl	80122a0 <LoRaMacCommandsAddCmd>
                break;
 800f0a6:	e2c2      	b.n	800f62e <ProcessMacCommands+0x916>
 800f0a8:	20000544 	.word	0x20000544
 800f0ac:	20000a4c 	.word	0x20000a4c
 800f0b0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f0b4:	2303      	movs	r3, #3
 800f0b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f0ba:	78fb      	ldrb	r3, [r7, #3]
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	70fa      	strb	r2, [r7, #3]
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	b25b      	sxtb	r3, r3
 800f0ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f0ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f0d2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f0d4:	78fb      	ldrb	r3, [r7, #3]
 800f0d6:	1c5a      	adds	r2, r3, #1
 800f0d8:	70fa      	strb	r2, [r7, #3]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4413      	add	r3, r2
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f0e4:	78fb      	ldrb	r3, [r7, #3]
 800f0e6:	1c5a      	adds	r2, r3, #1
 800f0e8:	70fa      	strb	r2, [r7, #3]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	021a      	lsls	r2, r3, #8
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f0fa:	78fb      	ldrb	r3, [r7, #3]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	70fa      	strb	r2, [r7, #3]
 800f100:	461a      	mov	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4413      	add	r3, r2
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	041a      	lsls	r2, r3, #16
 800f10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10c:	4313      	orrs	r3, r2
 800f10e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	2264      	movs	r2, #100	; 0x64
 800f114:	fb02 f303 	mul.w	r3, r2, r3
 800f118:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	70fa      	strb	r2, [r7, #3]
 800f124:	461a      	mov	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4413      	add	r3, r2
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	b25b      	sxtb	r3, r3
 800f12e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f132:	4b87      	ldr	r3, [pc, #540]	; (800f350 <ProcessMacCommands+0x638>)
 800f134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f138:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f13c:	4611      	mov	r1, r2
 800f13e:	4618      	mov	r0, r3
 800f140:	f004 ff13 	bl	8013f6a <RegionNewChannelReq>
 800f144:	4603      	mov	r3, r0
 800f146:	b2db      	uxtb	r3, r3
 800f148:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f14c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f150:	b25b      	sxtb	r3, r3
 800f152:	2b00      	cmp	r3, #0
 800f154:	db0a      	blt.n	800f16c <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f156:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f15a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f15e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f162:	2201      	movs	r2, #1
 800f164:	4619      	mov	r1, r3
 800f166:	2007      	movs	r0, #7
 800f168:	f003 f89a 	bl	80122a0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f16c:	bf00      	nop
 800f16e:	e25e      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	70fa      	strb	r2, [r7, #3]
 800f176:	461a      	mov	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4413      	add	r3, r2
 800f17c:	781b      	ldrb	r3, [r3, #0]
 800f17e:	f003 030f 	and.w	r3, r3, #15
 800f182:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f186:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d104      	bne.n	800f198 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f18e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f192:	3301      	adds	r3, #1
 800f194:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f198:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f19c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f1a0:	fb02 f303 	mul.w	r3, r2, r3
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	4b6a      	ldr	r3, [pc, #424]	; (800f350 <ProcessMacCommands+0x638>)
 800f1a8:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f1aa:	4b69      	ldr	r3, [pc, #420]	; (800f350 <ProcessMacCommands+0x638>)
 800f1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f1b2:	4a67      	ldr	r2, [pc, #412]	; (800f350 <ProcessMacCommands+0x638>)
 800f1b4:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f1b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	4619      	mov	r1, r3
 800f1be:	2008      	movs	r0, #8
 800f1c0:	f003 f86e 	bl	80122a0 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f1c4:	f7ff fd98 	bl	800ecf8 <SetMlmeScheduleUplinkIndication>
                break;
 800f1c8:	e231      	b.n	800f62e <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f1ca:	78fb      	ldrb	r3, [r7, #3]
 800f1cc:	1c5a      	adds	r2, r3, #1
 800f1ce:	70fa      	strb	r2, [r7, #3]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f1e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1ec:	f003 0320 	and.w	r3, r3, #32
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d002      	beq.n	800f1fa <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f1fa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1fe:	f003 0310 	and.w	r3, r3, #16
 800f202:	2b00      	cmp	r3, #0
 800f204:	d002      	beq.n	800f20c <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f206:	2301      	movs	r3, #1
 800f208:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f20c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f210:	f003 030f 	and.w	r3, r3, #15
 800f214:	b2db      	uxtb	r3, r3
 800f216:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f21a:	4b4d      	ldr	r3, [pc, #308]	; (800f350 <ProcessMacCommands+0x638>)
 800f21c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f220:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f224:	4611      	mov	r1, r2
 800f226:	4618      	mov	r0, r3
 800f228:	f004 feb2 	bl	8013f90 <RegionTxParamSetupReq>
 800f22c:	4603      	mov	r3, r0
 800f22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f232:	d03a      	beq.n	800f2aa <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f234:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f238:	4b45      	ldr	r3, [pc, #276]	; (800f350 <ProcessMacCommands+0x638>)
 800f23a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f23e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f242:	4b43      	ldr	r3, [pc, #268]	; (800f350 <ProcessMacCommands+0x638>)
 800f244:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f248:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f24c:	461a      	mov	r2, r3
 800f24e:	4b41      	ldr	r3, [pc, #260]	; (800f354 <ProcessMacCommands+0x63c>)
 800f250:	5c9b      	ldrb	r3, [r3, r2]
 800f252:	4618      	mov	r0, r3
 800f254:	f7f1 faba 	bl	80007cc <__aeabi_ui2f>
 800f258:	4603      	mov	r3, r0
 800f25a:	4a3d      	ldr	r2, [pc, #244]	; (800f350 <ProcessMacCommands+0x638>)
 800f25c:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f25e:	2302      	movs	r3, #2
 800f260:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f264:	4b3a      	ldr	r3, [pc, #232]	; (800f350 <ProcessMacCommands+0x638>)
 800f266:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f26a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f26e:	4b38      	ldr	r3, [pc, #224]	; (800f350 <ProcessMacCommands+0x638>)
 800f270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f274:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f278:	4611      	mov	r1, r2
 800f27a:	4618      	mov	r0, r3
 800f27c:	f004 fd8a 	bl	8013d94 <RegionGetPhyParam>
 800f280:	4603      	mov	r3, r0
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	b25a      	sxtb	r2, r3
 800f288:	4b31      	ldr	r3, [pc, #196]	; (800f350 <ProcessMacCommands+0x638>)
 800f28a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f28e:	4293      	cmp	r3, r2
 800f290:	bfb8      	it	lt
 800f292:	4613      	movlt	r3, r2
 800f294:	b25a      	sxtb	r2, r3
 800f296:	4b2e      	ldr	r3, [pc, #184]	; (800f350 <ProcessMacCommands+0x638>)
 800f298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f29c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	2009      	movs	r0, #9
 800f2a6:	f002 fffb 	bl	80122a0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f2aa:	bf00      	nop
 800f2ac:	e1bf      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f2b4:	78fb      	ldrb	r3, [r7, #3]
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	70fa      	strb	r2, [r7, #3]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4413      	add	r3, r2
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	70fa      	strb	r2, [r7, #3]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2d6:	78fb      	ldrb	r3, [r7, #3]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	70fa      	strb	r2, [r7, #3]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	021a      	lsls	r2, r3, #8
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f2ec:	78fb      	ldrb	r3, [r7, #3]
 800f2ee:	1c5a      	adds	r2, r3, #1
 800f2f0:	70fa      	strb	r2, [r7, #3]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	041a      	lsls	r2, r3, #16
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	4313      	orrs	r3, r2
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	2264      	movs	r2, #100	; 0x64
 800f306:	fb02 f303 	mul.w	r3, r2, r3
 800f30a:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f30c:	4b10      	ldr	r3, [pc, #64]	; (800f350 <ProcessMacCommands+0x638>)
 800f30e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f312:	f107 0220 	add.w	r2, r7, #32
 800f316:	4611      	mov	r1, r2
 800f318:	4618      	mov	r0, r3
 800f31a:	f004 fe4c 	bl	8013fb6 <RegionDlChannelReq>
 800f31e:	4603      	mov	r3, r0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f326:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f32a:	b25b      	sxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	db0c      	blt.n	800f34a <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f330:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f334:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f338:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f33c:	2201      	movs	r2, #1
 800f33e:	4619      	mov	r1, r3
 800f340:	200a      	movs	r0, #10
 800f342:	f002 ffad 	bl	80122a0 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f346:	f7ff fcd7 	bl	800ecf8 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f34a:	bf00      	nop
 800f34c:	e16f      	b.n	800f62e <ProcessMacCommands+0x916>
 800f34e:	bf00      	nop
 800f350:	20000a4c 	.word	0x20000a4c
 800f354:	0801bb7c 	.word	0x0801bb7c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f358:	200a      	movs	r0, #10
 800f35a:	f003 fac9 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 8164 	beq.w	800f62e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f366:	210a      	movs	r1, #10
 800f368:	2000      	movs	r0, #0
 800f36a:	f003 fa35 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f36e:	f107 0318 	add.w	r3, r7, #24
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
 800f376:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f378:	f107 0310 	add.w	r3, r7, #16
 800f37c:	2200      	movs	r2, #0
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f382:	f107 0308 	add.w	r3, r7, #8
 800f386:	2200      	movs	r2, #0
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f38c:	78fb      	ldrb	r3, [r7, #3]
 800f38e:	1c5a      	adds	r2, r3, #1
 800f390:	70fa      	strb	r2, [r7, #3]
 800f392:	461a      	mov	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4413      	add	r3, r2
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	1c5a      	adds	r2, r3, #1
 800f3a0:	70fa      	strb	r2, [r7, #3]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	021a      	lsls	r2, r3, #8
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f3b2:	78fb      	ldrb	r3, [r7, #3]
 800f3b4:	1c5a      	adds	r2, r3, #1
 800f3b6:	70fa      	strb	r2, [r7, #3]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4413      	add	r3, r2
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	041a      	lsls	r2, r3, #16
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f3c8:	78fb      	ldrb	r3, [r7, #3]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	70fa      	strb	r2, [r7, #3]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	061a      	lsls	r2, r3, #24
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f3de:	78fb      	ldrb	r3, [r7, #3]
 800f3e0:	1c5a      	adds	r2, r3, #1
 800f3e2:	70fa      	strb	r2, [r7, #3]
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4413      	add	r3, r2
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	b21b      	sxth	r3, r3
 800f3ee:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f3f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3fa:	fb03 f302 	mul.w	r3, r3, r2
 800f3fe:	121b      	asrs	r3, r3, #8
 800f400:	b21b      	sxth	r3, r3
 800f402:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f404:	f107 0310 	add.w	r3, r7, #16
 800f408:	f107 0218 	add.w	r2, r7, #24
 800f40c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f410:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	4b8c      	ldr	r3, [pc, #560]	; (800f648 <ProcessMacCommands+0x930>)
 800f418:	4413      	add	r3, r2
 800f41a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f41c:	f107 0308 	add.w	r3, r7, #8
 800f420:	4618      	mov	r0, r3
 800f422:	f00a faa5 	bl	8019970 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f426:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f42a:	4b88      	ldr	r3, [pc, #544]	; (800f64c <ProcessMacCommands+0x934>)
 800f42c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f430:	9200      	str	r2, [sp, #0]
 800f432:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f436:	f107 0210 	add.w	r2, r7, #16
 800f43a:	ca06      	ldmia	r2, {r1, r2}
 800f43c:	f00a fa31 	bl	80198a2 <SysTimeSub>
 800f440:	f107 0010 	add.w	r0, r7, #16
 800f444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f44a:	f107 0208 	add.w	r2, r7, #8
 800f44e:	ca06      	ldmia	r2, {r1, r2}
 800f450:	f00a f9ee 	bl	8019830 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f454:	f107 0310 	add.w	r3, r7, #16
 800f458:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f45c:	f00a fa5a 	bl	8019914 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f460:	f002 fde3 	bl	801202a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f464:	4b79      	ldr	r3, [pc, #484]	; (800f64c <ProcessMacCommands+0x934>)
 800f466:	2201      	movs	r2, #1
 800f468:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f46c:	e0df      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f46e:	200d      	movs	r0, #13
 800f470:	f003 fa3e 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 80d9 	beq.w	800f62e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f47c:	210d      	movs	r1, #13
 800f47e:	2000      	movs	r0, #0
 800f480:	f003 f9aa 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f484:	4b71      	ldr	r3, [pc, #452]	; (800f64c <ProcessMacCommands+0x934>)
 800f486:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	f000 80cf 	beq.w	800f62e <ProcessMacCommands+0x916>
 800f490:	4b6e      	ldr	r3, [pc, #440]	; (800f64c <ProcessMacCommands+0x934>)
 800f492:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f496:	2b05      	cmp	r3, #5
 800f498:	f000 80c9 	beq.w	800f62e <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f49c:	f002 fda6 	bl	8011fec <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f4a0:	e0c5      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f4ac:	78fb      	ldrb	r3, [r7, #3]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	70fa      	strb	r2, [r7, #3]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f4bc:	78fb      	ldrb	r3, [r7, #3]
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	70fa      	strb	r2, [r7, #3]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	021b      	lsls	r3, r3, #8
 800f4cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4ce:	4313      	orrs	r3, r2
 800f4d0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f4d2:	78fb      	ldrb	r3, [r7, #3]
 800f4d4:	1c5a      	adds	r2, r3, #1
 800f4d6:	70fa      	strb	r2, [r7, #3]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4413      	add	r3, r2
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	041b      	lsls	r3, r3, #16
 800f4e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f4e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4ea:	2264      	movs	r2, #100	; 0x64
 800f4ec:	fb02 f303 	mul.w	r3, r2, r3
 800f4f0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f4f2:	78fb      	ldrb	r3, [r7, #3]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	70fa      	strb	r2, [r7, #3]
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	f003 030f 	and.w	r3, r3, #15
 800f504:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f508:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f50c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f50e:	4618      	mov	r0, r3
 800f510:	f002 fd72 	bl	8011ff8 <LoRaMacClassBPingSlotChannelReq>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f51a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f51e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f522:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f526:	2201      	movs	r2, #1
 800f528:	4619      	mov	r1, r3
 800f52a:	2011      	movs	r0, #17
 800f52c:	f002 feb8 	bl	80122a0 <LoRaMacCommandsAddCmd>
                break;
 800f530:	e07d      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f532:	200e      	movs	r0, #14
 800f534:	f003 f9dc 	bl	80128f0 <LoRaMacConfirmQueueIsCmdActive>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d077      	beq.n	800f62e <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f53e:	210e      	movs	r1, #14
 800f540:	2000      	movs	r0, #0
 800f542:	f003 f949 	bl	80127d8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f552:	78fb      	ldrb	r3, [r7, #3]
 800f554:	1c5a      	adds	r2, r3, #1
 800f556:	70fa      	strb	r2, [r7, #3]
 800f558:	461a      	mov	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4413      	add	r3, r2
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	70fa      	strb	r2, [r7, #3]
 800f56a:	461a      	mov	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4413      	add	r3, r2
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	021b      	lsls	r3, r3, #8
 800f574:	b21a      	sxth	r2, r3
 800f576:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f57a:	4313      	orrs	r3, r2
 800f57c:	b21b      	sxth	r3, r3
 800f57e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f582:	78fb      	ldrb	r3, [r7, #3]
 800f584:	1c5a      	adds	r2, r3, #1
 800f586:	70fa      	strb	r2, [r7, #3]
 800f588:	461a      	mov	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4413      	add	r3, r2
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f594:	4b2e      	ldr	r3, [pc, #184]	; (800f650 <ProcessMacCommands+0x938>)
 800f596:	681a      	ldr	r2, [r3, #0]
 800f598:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f59c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f002 fd35 	bl	8012010 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f5a6:	e042      	b.n	800f62e <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f5ae:	78fb      	ldrb	r3, [r7, #3]
 800f5b0:	1c5a      	adds	r2, r3, #1
 800f5b2:	70fa      	strb	r2, [r7, #3]
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f5c0:	78fb      	ldrb	r3, [r7, #3]
 800f5c2:	1c5a      	adds	r2, r3, #1
 800f5c4:	70fa      	strb	r2, [r7, #3]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	021b      	lsls	r3, r3, #8
 800f5d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f5da:	78fb      	ldrb	r3, [r7, #3]
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	70fa      	strb	r2, [r7, #3]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	041b      	lsls	r3, r3, #16
 800f5ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f5f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f5f8:	2264      	movs	r2, #100	; 0x64
 800f5fa:	fb02 f303 	mul.w	r3, r2, r3
 800f5fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f602:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f606:	f002 fd16 	bl	8012036 <LoRaMacClassBBeaconFreqReq>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d003      	beq.n	800f618 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f610:	2301      	movs	r3, #1
 800f612:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f616:	e002      	b.n	800f61e <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f61e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f622:	2201      	movs	r2, #1
 800f624:	4619      	mov	r1, r3
 800f626:	2013      	movs	r0, #19
 800f628:	f002 fe3a 	bl	80122a0 <LoRaMacCommandsAddCmd>
                }
                break;
 800f62c:	bf00      	nop
    while( macIndex < commandsSize )
 800f62e:	78fa      	ldrb	r2, [r7, #3]
 800f630:	78bb      	ldrb	r3, [r7, #2]
 800f632:	429a      	cmp	r2, r3
 800f634:	f4ff ab88 	bcc.w	800ed48 <ProcessMacCommands+0x30>
 800f638:	e002      	b.n	800f640 <ProcessMacCommands+0x928>
            return;
 800f63a:	bf00      	nop
 800f63c:	e000      	b.n	800f640 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f63e:	bf00      	nop
        }
    }
}
 800f640:	378c      	adds	r7, #140	; 0x8c
 800f642:	46bd      	mov	sp, r7
 800f644:	bd90      	pop	{r4, r7, pc}
 800f646:	bf00      	nop
 800f648:	12d53d80 	.word	0x12d53d80
 800f64c:	20000544 	.word	0x20000544
 800f650:	200018a4 	.word	0x200018a4

0800f654 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08e      	sub	sp, #56	; 0x38
 800f658:	af02      	add	r7, sp, #8
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	607a      	str	r2, [r7, #4]
 800f65e:	461a      	mov	r2, r3
 800f660:	460b      	mov	r3, r1
 800f662:	72fb      	strb	r3, [r7, #11]
 800f664:	4613      	mov	r3, r2
 800f666:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f668:	2303      	movs	r3, #3
 800f66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f66e:	4b65      	ldr	r3, [pc, #404]	; (800f804 <Send+0x1b0>)
 800f670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f674:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f678:	4b62      	ldr	r3, [pc, #392]	; (800f804 <Send+0x1b0>)
 800f67a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f67e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f682:	4b60      	ldr	r3, [pc, #384]	; (800f804 <Send+0x1b0>)
 800f684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f686:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f688:	4b5e      	ldr	r3, [pc, #376]	; (800f804 <Send+0x1b0>)
 800f68a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d101      	bne.n	800f696 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f692:	2307      	movs	r3, #7
 800f694:	e0b1      	b.n	800f7fa <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f696:	4b5b      	ldr	r3, [pc, #364]	; (800f804 <Send+0x1b0>)
 800f698:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d102      	bne.n	800f6a6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f6a0:	4b58      	ldr	r3, [pc, #352]	; (800f804 <Send+0x1b0>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f6ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6b0:	f36f 0303 	bfc	r3, #0, #4
 800f6b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f6b8:	4b52      	ldr	r3, [pc, #328]	; (800f804 <Send+0x1b0>)
 800f6ba:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f6be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6c2:	f362 13c7 	bfi	r3, r2, #7, #1
 800f6c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f6ca:	4b4e      	ldr	r3, [pc, #312]	; (800f804 <Send+0x1b0>)
 800f6cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d106      	bne.n	800f6e2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f6d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6d8:	f043 0310 	orr.w	r3, r3, #16
 800f6dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f6e0:	e005      	b.n	800f6ee <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f6e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6e6:	f36f 1304 	bfc	r3, #4, #1
 800f6ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f6ee:	4b45      	ldr	r3, [pc, #276]	; (800f804 <Send+0x1b0>)
 800f6f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d005      	beq.n	800f704 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f6f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f6fc:	f043 0320 	orr.w	r3, r3, #32
 800f700:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f704:	4b3f      	ldr	r3, [pc, #252]	; (800f804 <Send+0x1b0>)
 800f706:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f70a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f70c:	2301      	movs	r3, #1
 800f70e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f714:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	bf14      	ite	ne
 800f71e:	2301      	movne	r3, #1
 800f720:	2300      	moveq	r3, #0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f726:	4b37      	ldr	r3, [pc, #220]	; (800f804 <Send+0x1b0>)
 800f728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f72a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f72c:	4b36      	ldr	r3, [pc, #216]	; (800f808 <Send+0x1b4>)
 800f72e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f732:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f734:	4b34      	ldr	r3, [pc, #208]	; (800f808 <Send+0x1b4>)
 800f736:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f73a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f73c:	4b31      	ldr	r3, [pc, #196]	; (800f804 <Send+0x1b0>)
 800f73e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f742:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f746:	4b2f      	ldr	r3, [pc, #188]	; (800f804 <Send+0x1b0>)
 800f748:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f74c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f750:	4b2c      	ldr	r3, [pc, #176]	; (800f804 <Send+0x1b0>)
 800f752:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f756:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f75a:	4b2a      	ldr	r3, [pc, #168]	; (800f804 <Send+0x1b0>)
 800f75c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f768:	f107 0014 	add.w	r0, r7, #20
 800f76c:	4a27      	ldr	r2, [pc, #156]	; (800f80c <Send+0x1b8>)
 800f76e:	4928      	ldr	r1, [pc, #160]	; (800f810 <Send+0x1bc>)
 800f770:	f002 fb7c 	bl	8011e6c <LoRaMacAdrCalcNext>
 800f774:	4603      	mov	r3, r0
 800f776:	461a      	mov	r2, r3
 800f778:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f77c:	f362 1386 	bfi	r3, r2, #6, #1
 800f780:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f784:	7afa      	ldrb	r2, [r7, #11]
 800f786:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f78a:	893b      	ldrh	r3, [r7, #8]
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	f000 fc21 	bl	800ffd8 <PrepareFrame>
 800f796:	4603      	mov	r3, r0
 800f798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f79c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <Send+0x158>
 800f7a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7a8:	2b0a      	cmp	r3, #10
 800f7aa:	d107      	bne.n	800f7bc <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f7ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 f96d 	bl	800fa90 <ScheduleTx>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f7bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00a      	beq.n	800f7da <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f7c4:	4a0f      	ldr	r2, [pc, #60]	; (800f804 <Send+0x1b0>)
 800f7c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f7ca:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f7ce:	4a0d      	ldr	r2, [pc, #52]	; (800f804 <Send+0x1b0>)
 800f7d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f7d4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f7d8:	e00d      	b.n	800f7f6 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f7da:	4b0a      	ldr	r3, [pc, #40]	; (800f804 <Send+0x1b0>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	4a07      	ldr	r2, [pc, #28]	; (800f804 <Send+0x1b0>)
 800f7e6:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f7e8:	f002 fdd2 	bl	8012390 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f7f2:	2313      	movs	r3, #19
 800f7f4:	e001      	b.n	800f7fa <Send+0x1a6>
        }
    }
    return status;
 800f7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3730      	adds	r7, #48	; 0x30
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	20000a4c 	.word	0x20000a4c
 800f808:	20000544 	.word	0x20000544
 800f80c:	20000a84 	.word	0x20000a84
 800f810:	20000a85 	.word	0x20000a85

0800f814 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	4603      	mov	r3, r0
 800f81c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f826:	2301      	movs	r3, #1
 800f828:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2bff      	cmp	r3, #255	; 0xff
 800f82e:	d129      	bne.n	800f884 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f830:	2000      	movs	r0, #0
 800f832:	f7ff f941 	bl	800eab8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f836:	4b1a      	ldr	r3, [pc, #104]	; (800f8a0 <SendReJoinReq+0x8c>)
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f83e:	4b18      	ldr	r3, [pc, #96]	; (800f8a0 <SendReJoinReq+0x8c>)
 800f840:	4a18      	ldr	r2, [pc, #96]	; (800f8a4 <SendReJoinReq+0x90>)
 800f842:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f846:	4b16      	ldr	r3, [pc, #88]	; (800f8a0 <SendReJoinReq+0x8c>)
 800f848:	22ff      	movs	r2, #255	; 0xff
 800f84a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f84e:	7b3b      	ldrb	r3, [r7, #12]
 800f850:	f36f 1347 	bfc	r3, #5, #3
 800f854:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f856:	7b3a      	ldrb	r2, [r7, #12]
 800f858:	4b11      	ldr	r3, [pc, #68]	; (800f8a0 <SendReJoinReq+0x8c>)
 800f85a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f85e:	f7fc fc85 	bl	800c16c <SecureElementGetJoinEui>
 800f862:	4603      	mov	r3, r0
 800f864:	2208      	movs	r2, #8
 800f866:	4619      	mov	r1, r3
 800f868:	480f      	ldr	r0, [pc, #60]	; (800f8a8 <SendReJoinReq+0x94>)
 800f86a:	f006 fd9e 	bl	80163aa <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f86e:	f7fc fc5b 	bl	800c128 <SecureElementGetDevEui>
 800f872:	4603      	mov	r3, r0
 800f874:	2208      	movs	r2, #8
 800f876:	4619      	mov	r1, r3
 800f878:	480c      	ldr	r0, [pc, #48]	; (800f8ac <SendReJoinReq+0x98>)
 800f87a:	f006 fd96 	bl	80163aa <memcpy1>

            allowDelayedTx = false;
 800f87e:	2300      	movs	r3, #0
 800f880:	73fb      	strb	r3, [r7, #15]

            break;
 800f882:	e002      	b.n	800f88a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f884:	2302      	movs	r3, #2
 800f886:	73bb      	strb	r3, [r7, #14]
            break;
 800f888:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 f8ff 	bl	800fa90 <ScheduleTx>
 800f892:	4603      	mov	r3, r0
 800f894:	73bb      	strb	r3, [r7, #14]
    return status;
 800f896:	7bbb      	ldrb	r3, [r7, #14]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	20000544 	.word	0x20000544
 800f8a4:	20000546 	.word	0x20000546
 800f8a8:	20000652 	.word	0x20000652
 800f8ac:	2000065a 	.word	0x2000065a

0800f8b0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f8b4:	f002 fb49 	bl	8011f4a <LoRaMacClassBIsBeaconExpected>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f8be:	230e      	movs	r3, #14
 800f8c0:	e013      	b.n	800f8ea <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f8c2:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <CheckForClassBCollision+0x40>)
 800f8c4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d10d      	bne.n	800f8e8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f8cc:	f002 fb44 	bl	8011f58 <LoRaMacClassBIsPingExpected>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d001      	beq.n	800f8da <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f8d6:	230f      	movs	r3, #15
 800f8d8:	e007      	b.n	800f8ea <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f8da:	f002 fb44 	bl	8011f66 <LoRaMacClassBIsMulticastExpected>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f8e4:	230f      	movs	r3, #15
 800f8e6:	e000      	b.n	800f8ea <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20000a4c 	.word	0x20000a4c

0800f8f4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f8f4:	b590      	push	{r4, r7, lr}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8fa:	4b2d      	ldr	r3, [pc, #180]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f8fc:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f900:	4b2b      	ldr	r3, [pc, #172]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f902:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f906:	4b2a      	ldr	r3, [pc, #168]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f908:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f90c:	4b28      	ldr	r3, [pc, #160]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f90e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f912:	4b27      	ldr	r3, [pc, #156]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f914:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f918:	b25b      	sxtb	r3, r3
 800f91a:	f004 fba3 	bl	8014064 <RegionApplyDrOffset>
 800f91e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f920:	b259      	sxtb	r1, r3
 800f922:	4b23      	ldr	r3, [pc, #140]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f924:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f928:	4b21      	ldr	r3, [pc, #132]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f92c:	4821      	ldr	r0, [pc, #132]	; (800f9b4 <ComputeRxWindowParameters+0xc0>)
 800f92e:	9000      	str	r0, [sp, #0]
 800f930:	4620      	mov	r0, r4
 800f932:	f004 faa7 	bl	8013e84 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f938:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f93c:	4b1c      	ldr	r3, [pc, #112]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f93e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f942:	b259      	sxtb	r1, r3
 800f944:	4b1a      	ldr	r3, [pc, #104]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f946:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f94a:	4b19      	ldr	r3, [pc, #100]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f94e:	4c1a      	ldr	r4, [pc, #104]	; (800f9b8 <ComputeRxWindowParameters+0xc4>)
 800f950:	9400      	str	r4, [sp, #0]
 800f952:	f004 fa97 	bl	8013e84 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f956:	4b16      	ldr	r3, [pc, #88]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f95a:	4a18      	ldr	r2, [pc, #96]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f95c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f960:	4413      	add	r3, r2
 800f962:	4a16      	ldr	r2, [pc, #88]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f964:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f968:	4b11      	ldr	r3, [pc, #68]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f96c:	4a13      	ldr	r2, [pc, #76]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f96e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f972:	4413      	add	r3, r2
 800f974:	4a11      	ldr	r2, [pc, #68]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f976:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f97a:	4b0d      	ldr	r3, [pc, #52]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f97c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f980:	2b00      	cmp	r3, #0
 800f982:	d111      	bne.n	800f9a8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f984:	4b0a      	ldr	r3, [pc, #40]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f988:	4a0c      	ldr	r2, [pc, #48]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f98a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800f98e:	4413      	add	r3, r2
 800f990:	4a0a      	ldr	r2, [pc, #40]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f992:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f996:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <ComputeRxWindowParameters+0xbc>)
 800f998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f99a:	4a08      	ldr	r2, [pc, #32]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f99c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800f9a0:	4413      	add	r3, r2
 800f9a2:	4a06      	ldr	r2, [pc, #24]	; (800f9bc <ComputeRxWindowParameters+0xc8>)
 800f9a4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800f9a8:	bf00      	nop
 800f9aa:	3704      	adds	r7, #4
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd90      	pop	{r4, r7, pc}
 800f9b0:	20000a4c 	.word	0x20000a4c
 800f9b4:	200008fc 	.word	0x200008fc
 800f9b8:	20000910 	.word	0x20000910
 800f9bc:	20000544 	.word	0x20000544

0800f9c0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f9ca:	4b13      	ldr	r3, [pc, #76]	; (800fa18 <VerifyTxFrame+0x58>)
 800f9cc:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d01b      	beq.n	800fa0c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f9d4:	1d3b      	adds	r3, r7, #4
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f002 fd20 	bl	801241c <LoRaMacCommandsGetSizeSerializedCmds>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f9e2:	2313      	movs	r3, #19
 800f9e4:	e013      	b.n	800fa0e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f9e6:	4b0d      	ldr	r3, [pc, #52]	; (800fa1c <VerifyTxFrame+0x5c>)
 800f9e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800f9ec:	4a0a      	ldr	r2, [pc, #40]	; (800fa18 <VerifyTxFrame+0x58>)
 800f9ee:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	b2d2      	uxtb	r2, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff f956 	bl	800eca8 <ValidatePayloadLength>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	f083 0301 	eor.w	r3, r3, #1
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fa08:	2308      	movs	r3, #8
 800fa0a:	e000      	b.n	800fa0e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20000a4c 	.word	0x20000a4c
 800fa1c:	20000544 	.word	0x20000544

0800fa20 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fa26:	4b18      	ldr	r3, [pc, #96]	; (800fa88 <SerializeTxFrame+0x68>)
 800fa28:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <SerializeTxFrame+0x16>
 800fa30:	2b04      	cmp	r3, #4
 800fa32:	d011      	beq.n	800fa58 <SerializeTxFrame+0x38>
 800fa34:	e021      	b.n	800fa7a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fa36:	4815      	ldr	r0, [pc, #84]	; (800fa8c <SerializeTxFrame+0x6c>)
 800fa38:	f004 f823 	bl	8013a82 <LoRaMacSerializerJoinRequest>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d001      	beq.n	800fa4a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa46:	2311      	movs	r3, #17
 800fa48:	e01a      	b.n	800fa80 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fa4a:	4b0f      	ldr	r3, [pc, #60]	; (800fa88 <SerializeTxFrame+0x68>)
 800fa4c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	4b0d      	ldr	r3, [pc, #52]	; (800fa88 <SerializeTxFrame+0x68>)
 800fa54:	801a      	strh	r2, [r3, #0]
            break;
 800fa56:	e012      	b.n	800fa7e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fa58:	480c      	ldr	r0, [pc, #48]	; (800fa8c <SerializeTxFrame+0x6c>)
 800fa5a:	f004 f894 	bl	8013b86 <LoRaMacSerializerData>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fa62:	79fb      	ldrb	r3, [r7, #7]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d001      	beq.n	800fa6c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fa68:	2311      	movs	r3, #17
 800fa6a:	e009      	b.n	800fa80 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fa6c:	4b06      	ldr	r3, [pc, #24]	; (800fa88 <SerializeTxFrame+0x68>)
 800fa6e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	4b04      	ldr	r3, [pc, #16]	; (800fa88 <SerializeTxFrame+0x68>)
 800fa76:	801a      	strh	r2, [r3, #0]
            break;
 800fa78:	e001      	b.n	800fa7e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fa7a:	2303      	movs	r3, #3
 800fa7c:	e000      	b.n	800fa80 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fa7e:	2300      	movs	r3, #0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	20000544 	.word	0x20000544
 800fa8c:	2000064c 	.word	0x2000064c

0800fa90 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b090      	sub	sp, #64	; 0x40
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	4603      	mov	r3, r0
 800fa98:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa9a:	2303      	movs	r3, #3
 800fa9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800faa0:	f7ff ff06 	bl	800f8b0 <CheckForClassBCollision>
 800faa4:	4603      	mov	r3, r0
 800faa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800faaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d002      	beq.n	800fab8 <ScheduleTx+0x28>
    {
        return status;
 800fab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fab6:	e08f      	b.n	800fbd8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fab8:	f000 f8fa 	bl	800fcb0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fabc:	f7ff ffb0 	bl	800fa20 <SerializeTxFrame>
 800fac0:	4603      	mov	r3, r0
 800fac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800faca:	2b00      	cmp	r3, #0
 800facc:	d002      	beq.n	800fad4 <ScheduleTx+0x44>
    {
        return status;
 800face:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fad2:	e081      	b.n	800fbd8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fad4:	4b42      	ldr	r3, [pc, #264]	; (800fbe0 <ScheduleTx+0x150>)
 800fad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fad8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fada:	4b41      	ldr	r3, [pc, #260]	; (800fbe0 <ScheduleTx+0x150>)
 800fadc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fae0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fae2:	4b3f      	ldr	r3, [pc, #252]	; (800fbe0 <ScheduleTx+0x150>)
 800fae4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fae8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800faea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800faee:	4618      	mov	r0, r3
 800faf0:	f009 ff76 	bl	80199e0 <SysTimeGetMcuTime>
 800faf4:	4638      	mov	r0, r7
 800faf6:	4b3a      	ldr	r3, [pc, #232]	; (800fbe0 <ScheduleTx+0x150>)
 800faf8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fafc:	9200      	str	r2, [sp, #0]
 800fafe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fb02:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fb06:	ca06      	ldmia	r2, {r1, r2}
 800fb08:	f009 fecb 	bl	80198a2 <SysTimeSub>
 800fb0c:	f107 0320 	add.w	r3, r7, #32
 800fb10:	463a      	mov	r2, r7
 800fb12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb16:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fb1a:	4b31      	ldr	r3, [pc, #196]	; (800fbe0 <ScheduleTx+0x150>)
 800fb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb1e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fb20:	2300      	movs	r3, #0
 800fb22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fb26:	2301      	movs	r3, #1
 800fb28:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fb2a:	4b2e      	ldr	r3, [pc, #184]	; (800fbe4 <ScheduleTx+0x154>)
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fb30:	4b2b      	ldr	r3, [pc, #172]	; (800fbe0 <ScheduleTx+0x150>)
 800fb32:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d104      	bne.n	800fb44 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fb40:	2300      	movs	r3, #0
 800fb42:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fb44:	4b26      	ldr	r3, [pc, #152]	; (800fbe0 <ScheduleTx+0x150>)
 800fb46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fb4a:	f107 0114 	add.w	r1, r7, #20
 800fb4e:	4b26      	ldr	r3, [pc, #152]	; (800fbe8 <ScheduleTx+0x158>)
 800fb50:	9300      	str	r3, [sp, #0]
 800fb52:	4b26      	ldr	r3, [pc, #152]	; (800fbec <ScheduleTx+0x15c>)
 800fb54:	4a26      	ldr	r2, [pc, #152]	; (800fbf0 <ScheduleTx+0x160>)
 800fb56:	f004 fa5b 	bl	8014010 <RegionNextChannel>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fb60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d022      	beq.n	800fbae <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fb68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb6c:	2b0b      	cmp	r3, #11
 800fb6e:	d11b      	bne.n	800fba8 <ScheduleTx+0x118>
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d018      	beq.n	800fba8 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <ScheduleTx+0x154>)
 800fb78:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d011      	beq.n	800fba4 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fb80:	4b18      	ldr	r3, [pc, #96]	; (800fbe4 <ScheduleTx+0x154>)
 800fb82:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb86:	f043 0320 	orr.w	r3, r3, #32
 800fb8a:	4a16      	ldr	r2, [pc, #88]	; (800fbe4 <ScheduleTx+0x154>)
 800fb8c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fb90:	4b14      	ldr	r3, [pc, #80]	; (800fbe4 <ScheduleTx+0x154>)
 800fb92:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fb96:	4619      	mov	r1, r3
 800fb98:	4816      	ldr	r0, [pc, #88]	; (800fbf4 <ScheduleTx+0x164>)
 800fb9a:	f00a fcad 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fb9e:	4815      	ldr	r0, [pc, #84]	; (800fbf4 <ScheduleTx+0x164>)
 800fba0:	f00a fbcc 	bl	801a33c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e017      	b.n	800fbd8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbac:	e014      	b.n	800fbd8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fbae:	f7ff fea1 	bl	800f8f4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fbb2:	f7ff ff05 	bl	800f9c0 <VerifyTxFrame>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fbbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <ScheduleTx+0x13a>
    {
        return status;
 800fbc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc8:	e006      	b.n	800fbd8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fbca:	4b06      	ldr	r3, [pc, #24]	; (800fbe4 <ScheduleTx+0x154>)
 800fbcc:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 fb1d 	bl	8010210 <SendFrameOnChannel>
 800fbd6:	4603      	mov	r3, r0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3738      	adds	r7, #56	; 0x38
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	20000a4c 	.word	0x20000a4c
 800fbe4:	20000544 	.word	0x20000544
 800fbe8:	20000a7c 	.word	0x20000a7c
 800fbec:	200009c8 	.word	0x200009c8
 800fbf0:	20000959 	.word	0x20000959
 800fbf4:	200008ac 	.word	0x200008ac

0800fbf8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4603      	mov	r3, r0
 800fc00:	460a      	mov	r2, r1
 800fc02:	71fb      	strb	r3, [r7, #7]
 800fc04:	4613      	mov	r3, r2
 800fc06:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fc08:	2313      	movs	r3, #19
 800fc0a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fc10:	4b25      	ldr	r3, [pc, #148]	; (800fca8 <SecureFrame+0xb0>)
 800fc12:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d002      	beq.n	800fc20 <SecureFrame+0x28>
 800fc1a:	2b04      	cmp	r3, #4
 800fc1c:	d011      	beq.n	800fc42 <SecureFrame+0x4a>
 800fc1e:	e03b      	b.n	800fc98 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fc20:	4822      	ldr	r0, [pc, #136]	; (800fcac <SecureFrame+0xb4>)
 800fc22:	f003 faf7 	bl	8013214 <LoRaMacCryptoPrepareJoinRequest>
 800fc26:	4603      	mov	r3, r0
 800fc28:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fc2a:	7bfb      	ldrb	r3, [r7, #15]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc30:	2311      	movs	r3, #17
 800fc32:	e034      	b.n	800fc9e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fc34:	4b1c      	ldr	r3, [pc, #112]	; (800fca8 <SecureFrame+0xb0>)
 800fc36:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	4b1a      	ldr	r3, [pc, #104]	; (800fca8 <SecureFrame+0xb0>)
 800fc3e:	801a      	strh	r2, [r3, #0]
            break;
 800fc40:	e02c      	b.n	800fc9c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fc42:	f107 0308 	add.w	r3, r7, #8
 800fc46:	4618      	mov	r0, r3
 800fc48:	f003 fa0a 	bl	8013060 <LoRaMacCryptoGetFCntUp>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fc52:	2312      	movs	r3, #18
 800fc54:	e023      	b.n	800fc9e <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fc56:	4b14      	ldr	r3, [pc, #80]	; (800fca8 <SecureFrame+0xb0>)
 800fc58:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d104      	bne.n	800fc6a <SecureFrame+0x72>
 800fc60:	4b11      	ldr	r3, [pc, #68]	; (800fca8 <SecureFrame+0xb0>)
 800fc62:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d902      	bls.n	800fc70 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fc70:	68b8      	ldr	r0, [r7, #8]
 800fc72:	79ba      	ldrb	r2, [r7, #6]
 800fc74:	79f9      	ldrb	r1, [r7, #7]
 800fc76:	4b0d      	ldr	r3, [pc, #52]	; (800fcac <SecureFrame+0xb4>)
 800fc78:	f003 fbe4 	bl	8013444 <LoRaMacCryptoSecureMessage>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fc80:	7bfb      	ldrb	r3, [r7, #15]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fc86:	2311      	movs	r3, #17
 800fc88:	e009      	b.n	800fc9e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fc8a:	4b07      	ldr	r3, [pc, #28]	; (800fca8 <SecureFrame+0xb0>)
 800fc8c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <SecureFrame+0xb0>)
 800fc94:	801a      	strh	r2, [r3, #0]
            break;
 800fc96:	e001      	b.n	800fc9c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc98:	2303      	movs	r3, #3
 800fc9a:	e000      	b.n	800fc9e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20000544 	.word	0x20000544
 800fcac:	2000064c 	.word	0x2000064c

0800fcb0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fcb4:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <CalculateBackOff+0x2c>)
 800fcb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10a      	bne.n	800fcd2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fcbc:	4b07      	ldr	r3, [pc, #28]	; (800fcdc <CalculateBackOff+0x2c>)
 800fcbe:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	4a06      	ldr	r2, [pc, #24]	; (800fce0 <CalculateBackOff+0x30>)
 800fcc6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fcca:	fb02 f303 	mul.w	r3, r2, r3
 800fcce:	4a03      	ldr	r2, [pc, #12]	; (800fcdc <CalculateBackOff+0x2c>)
 800fcd0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fcd2:	bf00      	nop
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bc80      	pop	{r7}
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	20000a4c 	.word	0x20000a4c
 800fce0:	20000544 	.word	0x20000544

0800fce4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	7139      	strb	r1, [r7, #4]
 800fcee:	71fb      	strb	r3, [r7, #7]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <RemoveMacCommands+0x1c>
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d10d      	bne.n	800fd1c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fd00:	79bb      	ldrb	r3, [r7, #6]
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d108      	bne.n	800fd18 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fd06:	793b      	ldrb	r3, [r7, #4]
 800fd08:	f003 0320 	and.w	r3, r3, #32
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d004      	beq.n	800fd1c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd12:	f002 fb61 	bl	80123d8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fd16:	e001      	b.n	800fd1c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fd18:	f002 fb5e 	bl	80123d8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fd1c:	bf00      	nop
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fd24:	b5b0      	push	{r4, r5, r7, lr}
 800fd26:	b08e      	sub	sp, #56	; 0x38
 800fd28:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fd2a:	4b68      	ldr	r3, [pc, #416]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fd32:	4b66      	ldr	r3, [pc, #408]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fd38:	4b65      	ldr	r3, [pc, #404]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fd40:	4b63      	ldr	r3, [pc, #396]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fd48:	4b61      	ldr	r3, [pc, #388]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fd50:	4b5f      	ldr	r3, [pc, #380]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fd58:	4b5c      	ldr	r3, [pc, #368]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fd60:	4b5a      	ldr	r3, [pc, #360]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fd68:	4b58      	ldr	r3, [pc, #352]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd6a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fd6e:	4b57      	ldr	r3, [pc, #348]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fd74:	4b55      	ldr	r3, [pc, #340]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd76:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fd7a:	4b54      	ldr	r3, [pc, #336]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fd80:	4b52      	ldr	r3, [pc, #328]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd82:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fd86:	4b51      	ldr	r3, [pc, #324]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fd8c:	4b4f      	ldr	r3, [pc, #316]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd8e:	4a4f      	ldr	r2, [pc, #316]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd90:	3364      	adds	r3, #100	; 0x64
 800fd92:	32a4      	adds	r2, #164	; 0xa4
 800fd94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd98:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fd9c:	4b4b      	ldr	r3, [pc, #300]	; (800fecc <ResetMacParameters+0x1a8>)
 800fd9e:	4a4b      	ldr	r2, [pc, #300]	; (800fecc <ResetMacParameters+0x1a8>)
 800fda0:	336c      	adds	r3, #108	; 0x6c
 800fda2:	32ac      	adds	r2, #172	; 0xac
 800fda4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fda8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fdac:	4b47      	ldr	r3, [pc, #284]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdae:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fdb2:	4b46      	ldr	r3, [pc, #280]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fdb8:	4b44      	ldr	r3, [pc, #272]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdba:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fdbe:	4b43      	ldr	r3, [pc, #268]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdc0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fdc4:	4b41      	ldr	r3, [pc, #260]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdc6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fdca:	4a40      	ldr	r2, [pc, #256]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdcc:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fdce:	4b3f      	ldr	r3, [pc, #252]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdd0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fdd4:	4a3d      	ldr	r2, [pc, #244]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdd6:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fdd8:	4b3d      	ldr	r3, [pc, #244]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fde0:	4b3a      	ldr	r3, [pc, #232]	; (800fecc <ResetMacParameters+0x1a8>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fde8:	2301      	movs	r3, #1
 800fdea:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fdec:	4b39      	ldr	r3, [pc, #228]	; (800fed4 <ResetMacParameters+0x1b0>)
 800fdee:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fdf0:	4b39      	ldr	r3, [pc, #228]	; (800fed8 <ResetMacParameters+0x1b4>)
 800fdf2:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fdf4:	4b35      	ldr	r3, [pc, #212]	; (800fecc <ResetMacParameters+0x1a8>)
 800fdf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdfa:	1d3a      	adds	r2, r7, #4
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f003 fff2 	bl	8013de8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fe04:	4b32      	ldr	r3, [pc, #200]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe06:	2200      	movs	r2, #0
 800fe08:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fe0c:	4b30      	ldr	r3, [pc, #192]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe0e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fe12:	4b2f      	ldr	r3, [pc, #188]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fe18:	4b2c      	ldr	r3, [pc, #176]	; (800fecc <ResetMacParameters+0x1a8>)
 800fe1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe1c:	4a2c      	ldr	r2, [pc, #176]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe1e:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe22:	4b2a      	ldr	r3, [pc, #168]	; (800fecc <ResetMacParameters+0x1a8>)
 800fe24:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fe28:	4b29      	ldr	r3, [pc, #164]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe2a:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fe2e:	4b27      	ldr	r3, [pc, #156]	; (800fecc <ResetMacParameters+0x1a8>)
 800fe30:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fe34:	4b26      	ldr	r3, [pc, #152]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe36:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe3a:	4b25      	ldr	r3, [pc, #148]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe42:	4b23      	ldr	r3, [pc, #140]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe44:	2201      	movs	r2, #1
 800fe46:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fe4a:	4a21      	ldr	r2, [pc, #132]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe4c:	4b20      	ldr	r3, [pc, #128]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe4e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800fe52:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800fe56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe5a:	682b      	ldr	r3, [r5, #0]
 800fe5c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe5e:	4b1c      	ldr	r3, [pc, #112]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe60:	2201      	movs	r2, #1
 800fe62:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe66:	4b1a      	ldr	r3, [pc, #104]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe68:	2202      	movs	r2, #2
 800fe6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800fe76:	4b16      	ldr	r3, [pc, #88]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe78:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d009      	beq.n	800fe94 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fe80:	4b13      	ldr	r3, [pc, #76]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe82:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe86:	685b      	ldr	r3, [r3, #4]
 800fe88:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fe8a:	4b11      	ldr	r3, [pc, #68]	; (800fed0 <ResetMacParameters+0x1ac>)
 800fe8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fe94:	4b11      	ldr	r3, [pc, #68]	; (800fedc <ResetMacParameters+0x1b8>)
 800fe96:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fe98:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <ResetMacParameters+0x1bc>)
 800fe9a:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fe9c:	4b11      	ldr	r3, [pc, #68]	; (800fee4 <ResetMacParameters+0x1c0>)
 800fe9e:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fea0:	4b11      	ldr	r3, [pc, #68]	; (800fee8 <ResetMacParameters+0x1c4>)
 800fea2:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fea4:	4b11      	ldr	r3, [pc, #68]	; (800feec <ResetMacParameters+0x1c8>)
 800fea6:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fea8:	4b11      	ldr	r3, [pc, #68]	; (800fef0 <ResetMacParameters+0x1cc>)
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800feac:	4b11      	ldr	r3, [pc, #68]	; (800fef4 <ResetMacParameters+0x1d0>)
 800feae:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800feb0:	4b11      	ldr	r3, [pc, #68]	; (800fef8 <ResetMacParameters+0x1d4>)
 800feb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800feb4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800feb8:	f107 0310 	add.w	r3, r7, #16
 800febc:	4a0f      	ldr	r2, [pc, #60]	; (800fefc <ResetMacParameters+0x1d8>)
 800febe:	4618      	mov	r0, r3
 800fec0:	f001 ffec 	bl	8011e9c <LoRaMacClassBInit>
}
 800fec4:	bf00      	nop
 800fec6:	3738      	adds	r7, #56	; 0x38
 800fec8:	46bd      	mov	sp, r7
 800feca:	bdb0      	pop	{r4, r5, r7, pc}
 800fecc:	20000a4c 	.word	0x20000a4c
 800fed0:	20000544 	.word	0x20000544
 800fed4:	20000c24 	.word	0x20000c24
 800fed8:	20000cb8 	.word	0x20000cb8
 800fedc:	200009a4 	.word	0x200009a4
 800fee0:	20000960 	.word	0x20000960
 800fee4:	20000990 	.word	0x20000990
 800fee8:	200009c5 	.word	0x200009c5
 800feec:	20000b18 	.word	0x20000b18
 800fef0:	20000a8c 	.word	0x20000a8c
 800fef4:	20000a90 	.word	0x20000a90
 800fef8:	20000b1c 	.word	0x20000b1c
 800fefc:	20000d80 	.word	0x20000d80

0800ff00 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f00a fa84 	bl	801a418 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ff10:	4b0e      	ldr	r3, [pc, #56]	; (800ff4c <RxWindowSetup+0x4c>)
 800ff12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff14:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ff16:	4b0e      	ldr	r3, [pc, #56]	; (800ff50 <RxWindowSetup+0x50>)
 800ff18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff1c:	4a0d      	ldr	r2, [pc, #52]	; (800ff54 <RxWindowSetup+0x54>)
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f003 ffc9 	bl	8013eb8 <RegionRxConfig>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00a      	beq.n	800ff42 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ff2c:	4b07      	ldr	r3, [pc, #28]	; (800ff4c <RxWindowSetup+0x4c>)
 800ff2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff30:	4a07      	ldr	r2, [pc, #28]	; (800ff50 <RxWindowSetup+0x50>)
 800ff32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ff34:	4610      	mov	r0, r2
 800ff36:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	7cda      	ldrb	r2, [r3, #19]
 800ff3c:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <RxWindowSetup+0x58>)
 800ff3e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ff42:	bf00      	nop
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	0801bbc4 	.word	0x0801bbc4
 800ff50:	20000a4c 	.word	0x20000a4c
 800ff54:	20000964 	.word	0x20000964
 800ff58:	20000544 	.word	0x20000544

0800ff5c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ff5c:	b590      	push	{r4, r7, lr}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff62:	4b18      	ldr	r3, [pc, #96]	; (800ffc4 <OpenContinuousRxCWindow+0x68>)
 800ff64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ff68:	4b16      	ldr	r3, [pc, #88]	; (800ffc4 <OpenContinuousRxCWindow+0x68>)
 800ff6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff6e:	b259      	sxtb	r1, r3
 800ff70:	4b14      	ldr	r3, [pc, #80]	; (800ffc4 <OpenContinuousRxCWindow+0x68>)
 800ff72:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff76:	4b13      	ldr	r3, [pc, #76]	; (800ffc4 <OpenContinuousRxCWindow+0x68>)
 800ff78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff7a:	4c13      	ldr	r4, [pc, #76]	; (800ffc8 <OpenContinuousRxCWindow+0x6c>)
 800ff7c:	9400      	str	r4, [sp, #0]
 800ff7e:	f003 ff81 	bl	8013e84 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff82:	4b12      	ldr	r3, [pc, #72]	; (800ffcc <OpenContinuousRxCWindow+0x70>)
 800ff84:	2202      	movs	r2, #2
 800ff86:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ff8a:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <OpenContinuousRxCWindow+0x70>)
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ff92:	4b0c      	ldr	r3, [pc, #48]	; (800ffc4 <OpenContinuousRxCWindow+0x68>)
 800ff94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff98:	4a0d      	ldr	r2, [pc, #52]	; (800ffd0 <OpenContinuousRxCWindow+0x74>)
 800ff9a:	490b      	ldr	r1, [pc, #44]	; (800ffc8 <OpenContinuousRxCWindow+0x6c>)
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f003 ff8b 	bl	8013eb8 <RegionRxConfig>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d009      	beq.n	800ffbc <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	; (800ffd4 <OpenContinuousRxCWindow+0x78>)
 800ffaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffac:	2000      	movs	r0, #0
 800ffae:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ffb0:	4b06      	ldr	r3, [pc, #24]	; (800ffcc <OpenContinuousRxCWindow+0x70>)
 800ffb2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 800ffb6:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <OpenContinuousRxCWindow+0x70>)
 800ffb8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800ffbc:	bf00      	nop
 800ffbe:	3704      	adds	r7, #4
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd90      	pop	{r4, r7, pc}
 800ffc4:	20000a4c 	.word	0x20000a4c
 800ffc8:	20000924 	.word	0x20000924
 800ffcc:	20000544 	.word	0x20000544
 800ffd0:	20000964 	.word	0x20000964
 800ffd4:	0801bbc4 	.word	0x0801bbc4

0800ffd8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	603b      	str	r3, [r7, #0]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800ffe8:	4b82      	ldr	r3, [pc, #520]	; (80101f4 <PrepareFrame+0x21c>)
 800ffea:	2200      	movs	r2, #0
 800ffec:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800ffee:	4b81      	ldr	r3, [pc, #516]	; (80101f4 <PrepareFrame+0x21c>)
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010008:	2300      	movs	r3, #0
 801000a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801000c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801000e:	461a      	mov	r2, r3
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	4879      	ldr	r0, [pc, #484]	; (80101f8 <PrepareFrame+0x220>)
 8010014:	f006 f9c9 	bl	80163aa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801001a:	b2da      	uxtb	r2, r3
 801001c:	4b75      	ldr	r3, [pc, #468]	; (80101f4 <PrepareFrame+0x21c>)
 801001e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	781a      	ldrb	r2, [r3, #0]
 8010026:	4b73      	ldr	r3, [pc, #460]	; (80101f4 <PrepareFrame+0x21c>)
 8010028:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010032:	b2db      	uxtb	r3, r3
 8010034:	2b07      	cmp	r3, #7
 8010036:	f000 80b9 	beq.w	80101ac <PrepareFrame+0x1d4>
 801003a:	2b07      	cmp	r3, #7
 801003c:	f300 80d0 	bgt.w	80101e0 <PrepareFrame+0x208>
 8010040:	2b02      	cmp	r3, #2
 8010042:	d006      	beq.n	8010052 <PrepareFrame+0x7a>
 8010044:	2b04      	cmp	r3, #4
 8010046:	f040 80cb 	bne.w	80101e0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801004a:	4b6a      	ldr	r3, [pc, #424]	; (80101f4 <PrepareFrame+0x21c>)
 801004c:	2201      	movs	r2, #1
 801004e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010052:	4b68      	ldr	r3, [pc, #416]	; (80101f4 <PrepareFrame+0x21c>)
 8010054:	2204      	movs	r2, #4
 8010056:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801005a:	4b66      	ldr	r3, [pc, #408]	; (80101f4 <PrepareFrame+0x21c>)
 801005c:	4a67      	ldr	r2, [pc, #412]	; (80101fc <PrepareFrame+0x224>)
 801005e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010062:	4b64      	ldr	r3, [pc, #400]	; (80101f4 <PrepareFrame+0x21c>)
 8010064:	22ff      	movs	r2, #255	; 0xff
 8010066:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	781a      	ldrb	r2, [r3, #0]
 801006e:	4b61      	ldr	r3, [pc, #388]	; (80101f4 <PrepareFrame+0x21c>)
 8010070:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010074:	4a5f      	ldr	r2, [pc, #380]	; (80101f4 <PrepareFrame+0x21c>)
 8010076:	79fb      	ldrb	r3, [r7, #7]
 8010078:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801007c:	4b60      	ldr	r3, [pc, #384]	; (8010200 <PrepareFrame+0x228>)
 801007e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010082:	4a5c      	ldr	r2, [pc, #368]	; (80101f4 <PrepareFrame+0x21c>)
 8010084:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	781a      	ldrb	r2, [r3, #0]
 801008c:	4b59      	ldr	r3, [pc, #356]	; (80101f4 <PrepareFrame+0x21c>)
 801008e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010092:	4b58      	ldr	r3, [pc, #352]	; (80101f4 <PrepareFrame+0x21c>)
 8010094:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010098:	4b56      	ldr	r3, [pc, #344]	; (80101f4 <PrepareFrame+0x21c>)
 801009a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801009e:	4b55      	ldr	r3, [pc, #340]	; (80101f4 <PrepareFrame+0x21c>)
 80100a0:	4a55      	ldr	r2, [pc, #340]	; (80101f8 <PrepareFrame+0x220>)
 80100a2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80100a6:	f107 0318 	add.w	r3, r7, #24
 80100aa:	4618      	mov	r0, r3
 80100ac:	f002 ffd8 	bl	8013060 <LoRaMacCryptoGetFCntUp>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80100b6:	2312      	movs	r3, #18
 80100b8:	e098      	b.n	80101ec <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	b29a      	uxth	r2, r3
 80100be:	4b4d      	ldr	r3, [pc, #308]	; (80101f4 <PrepareFrame+0x21c>)
 80100c0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80100c4:	4b4b      	ldr	r3, [pc, #300]	; (80101f4 <PrepareFrame+0x21c>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80100cc:	4b49      	ldr	r3, [pc, #292]	; (80101f4 <PrepareFrame+0x21c>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	4a47      	ldr	r2, [pc, #284]	; (80101f4 <PrepareFrame+0x21c>)
 80100d8:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80100dc:	f107 0314 	add.w	r3, r7, #20
 80100e0:	4618      	mov	r0, r3
 80100e2:	f002 f99b 	bl	801241c <LoRaMacCommandsGetSizeSerializedCmds>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100ec:	2313      	movs	r3, #19
 80100ee:	e07d      	b.n	80101ec <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d076      	beq.n	80101e4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80100f6:	4b42      	ldr	r3, [pc, #264]	; (8010200 <PrepareFrame+0x228>)
 80100f8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fdab 	bl	800ec58 <GetMaxAppPayloadWithoutFOptsLength>
 8010102:	4603      	mov	r3, r0
 8010104:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010106:	4b3b      	ldr	r3, [pc, #236]	; (80101f4 <PrepareFrame+0x21c>)
 8010108:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801010c:	2b00      	cmp	r3, #0
 801010e:	d01d      	beq.n	801014c <PrepareFrame+0x174>
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	2b0f      	cmp	r3, #15
 8010114:	d81a      	bhi.n	801014c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010116:	f107 0314 	add.w	r3, r7, #20
 801011a:	4a3a      	ldr	r2, [pc, #232]	; (8010204 <PrepareFrame+0x22c>)
 801011c:	4619      	mov	r1, r3
 801011e:	200f      	movs	r0, #15
 8010120:	f002 f992 	bl	8012448 <LoRaMacCommandsSerializeCmds>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801012a:	2313      	movs	r3, #19
 801012c:	e05e      	b.n	80101ec <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f003 030f 	and.w	r3, r3, #15
 8010134:	b2d9      	uxtb	r1, r3
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	7813      	ldrb	r3, [r2, #0]
 801013a:	f361 0303 	bfi	r3, r1, #0, #4
 801013e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	781a      	ldrb	r2, [r3, #0]
 8010144:	4b2b      	ldr	r3, [pc, #172]	; (80101f4 <PrepareFrame+0x21c>)
 8010146:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801014a:	e04b      	b.n	80101e4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801014c:	4b29      	ldr	r3, [pc, #164]	; (80101f4 <PrepareFrame+0x21c>)
 801014e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010152:	2b00      	cmp	r3, #0
 8010154:	d010      	beq.n	8010178 <PrepareFrame+0x1a0>
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	2b0f      	cmp	r3, #15
 801015a:	d90d      	bls.n	8010178 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801015c:	7ffb      	ldrb	r3, [r7, #31]
 801015e:	f107 0114 	add.w	r1, r7, #20
 8010162:	4a29      	ldr	r2, [pc, #164]	; (8010208 <PrepareFrame+0x230>)
 8010164:	4618      	mov	r0, r3
 8010166:	f002 f96f 	bl	8012448 <LoRaMacCommandsSerializeCmds>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	d001      	beq.n	8010174 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010170:	2313      	movs	r3, #19
 8010172:	e03b      	b.n	80101ec <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010174:	230a      	movs	r3, #10
 8010176:	e039      	b.n	80101ec <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010178:	7ffb      	ldrb	r3, [r7, #31]
 801017a:	f107 0114 	add.w	r1, r7, #20
 801017e:	4a22      	ldr	r2, [pc, #136]	; (8010208 <PrepareFrame+0x230>)
 8010180:	4618      	mov	r0, r3
 8010182:	f002 f961 	bl	8012448 <LoRaMacCommandsSerializeCmds>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801018c:	2313      	movs	r3, #19
 801018e:	e02d      	b.n	80101ec <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010190:	4b18      	ldr	r3, [pc, #96]	; (80101f4 <PrepareFrame+0x21c>)
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010198:	4b16      	ldr	r3, [pc, #88]	; (80101f4 <PrepareFrame+0x21c>)
 801019a:	4a1b      	ldr	r2, [pc, #108]	; (8010208 <PrepareFrame+0x230>)
 801019c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	b2da      	uxtb	r2, r3
 80101a4:	4b13      	ldr	r3, [pc, #76]	; (80101f4 <PrepareFrame+0x21c>)
 80101a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80101aa:	e01b      	b.n	80101e4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d01a      	beq.n	80101e8 <PrepareFrame+0x210>
 80101b2:	4b10      	ldr	r3, [pc, #64]	; (80101f4 <PrepareFrame+0x21c>)
 80101b4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d015      	beq.n	80101e8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80101bc:	4813      	ldr	r0, [pc, #76]	; (801020c <PrepareFrame+0x234>)
 80101be:	4b0d      	ldr	r3, [pc, #52]	; (80101f4 <PrepareFrame+0x21c>)
 80101c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101c4:	b29b      	uxth	r3, r3
 80101c6:	461a      	mov	r2, r3
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	f006 f8ee 	bl	80163aa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80101ce:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <PrepareFrame+0x21c>)
 80101d0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	3301      	adds	r3, #1
 80101d8:	b29a      	uxth	r2, r3
 80101da:	4b06      	ldr	r3, [pc, #24]	; (80101f4 <PrepareFrame+0x21c>)
 80101dc:	801a      	strh	r2, [r3, #0]
            }
            break;
 80101de:	e003      	b.n	80101e8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80101e0:	2302      	movs	r3, #2
 80101e2:	e003      	b.n	80101ec <PrepareFrame+0x214>
            break;
 80101e4:	bf00      	nop
 80101e6:	e000      	b.n	80101ea <PrepareFrame+0x212>
            break;
 80101e8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80101ea:	2300      	movs	r3, #0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3720      	adds	r7, #32
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20000544 	.word	0x20000544
 80101f8:	2000067c 	.word	0x2000067c
 80101fc:	20000546 	.word	0x20000546
 8010200:	20000a4c 	.word	0x20000a4c
 8010204:	2000065c 	.word	0x2000065c
 8010208:	200009cc 	.word	0x200009cc
 801020c:	20000547 	.word	0x20000547

08010210 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08a      	sub	sp, #40	; 0x28
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801021a:	2303      	movs	r3, #3
 801021c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010228:	4b47      	ldr	r3, [pc, #284]	; (8010348 <SendFrameOnChannel+0x138>)
 801022a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801022e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010230:	4b45      	ldr	r3, [pc, #276]	; (8010348 <SendFrameOnChannel+0x138>)
 8010232:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010236:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010238:	4b43      	ldr	r3, [pc, #268]	; (8010348 <SendFrameOnChannel+0x138>)
 801023a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801023c:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801023e:	4b42      	ldr	r3, [pc, #264]	; (8010348 <SendFrameOnChannel+0x138>)
 8010240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010242:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010244:	4b41      	ldr	r3, [pc, #260]	; (801034c <SendFrameOnChannel+0x13c>)
 8010246:	881b      	ldrh	r3, [r3, #0]
 8010248:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801024a:	4b3f      	ldr	r3, [pc, #252]	; (8010348 <SendFrameOnChannel+0x138>)
 801024c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010250:	f107 020f 	add.w	r2, r7, #15
 8010254:	f107 0110 	add.w	r1, r7, #16
 8010258:	4b3d      	ldr	r3, [pc, #244]	; (8010350 <SendFrameOnChannel+0x140>)
 801025a:	f003 fe42 	bl	8013ee2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801025e:	4b3b      	ldr	r3, [pc, #236]	; (801034c <SendFrameOnChannel+0x13c>)
 8010260:	2201      	movs	r2, #1
 8010262:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010266:	4b38      	ldr	r3, [pc, #224]	; (8010348 <SendFrameOnChannel+0x138>)
 8010268:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801026c:	b2da      	uxtb	r2, r3
 801026e:	4b37      	ldr	r3, [pc, #220]	; (801034c <SendFrameOnChannel+0x13c>)
 8010270:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010274:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010278:	4b34      	ldr	r3, [pc, #208]	; (801034c <SendFrameOnChannel+0x13c>)
 801027a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	4a32      	ldr	r2, [pc, #200]	; (801034c <SendFrameOnChannel+0x13c>)
 8010282:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010286:	4b31      	ldr	r3, [pc, #196]	; (801034c <SendFrameOnChannel+0x13c>)
 8010288:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801028c:	4a2f      	ldr	r2, [pc, #188]	; (801034c <SendFrameOnChannel+0x13c>)
 801028e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010292:	4b2e      	ldr	r3, [pc, #184]	; (801034c <SendFrameOnChannel+0x13c>)
 8010294:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010298:	4a2c      	ldr	r2, [pc, #176]	; (801034c <SendFrameOnChannel+0x13c>)
 801029a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801029e:	f001 fe69 	bl	8011f74 <LoRaMacClassBIsBeaconModeActive>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d00b      	beq.n	80102c0 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80102a8:	4b28      	ldr	r3, [pc, #160]	; (801034c <SendFrameOnChannel+0x13c>)
 80102aa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80102ae:	4618      	mov	r0, r3
 80102b0:	f001 fecb 	bl	801204a <LoRaMacClassBIsUplinkCollision>
 80102b4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80102bc:	2310      	movs	r3, #16
 80102be:	e03e      	b.n	801033e <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102c0:	4b21      	ldr	r3, [pc, #132]	; (8010348 <SendFrameOnChannel+0x138>)
 80102c2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d101      	bne.n	80102ce <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80102ca:	f001 fec8 	bl	801205e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80102ce:	f001 fe62 	bl	8011f96 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80102d2:	4b1d      	ldr	r3, [pc, #116]	; (8010348 <SendFrameOnChannel+0x138>)
 80102d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	4a1c      	ldr	r2, [pc, #112]	; (801034c <SendFrameOnChannel+0x13c>)
 80102dc:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80102e0:	4611      	mov	r1, r2
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fc88 	bl	800fbf8 <SecureFrame>
 80102e8:	4603      	mov	r3, r0
 80102ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80102ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <SendFrameOnChannel+0xec>
    {
        return status;
 80102f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102fa:	e020      	b.n	801033e <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80102fc:	4b13      	ldr	r3, [pc, #76]	; (801034c <SendFrameOnChannel+0x13c>)
 80102fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010302:	f043 0302 	orr.w	r3, r3, #2
 8010306:	4a11      	ldr	r2, [pc, #68]	; (801034c <SendFrameOnChannel+0x13c>)
 8010308:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 801030c:	4b0f      	ldr	r3, [pc, #60]	; (801034c <SendFrameOnChannel+0x13c>)
 801030e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8010312:	f083 0301 	eor.w	r3, r3, #1
 8010316:	b2db      	uxtb	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d007      	beq.n	801032c <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 801031c:	4b0b      	ldr	r3, [pc, #44]	; (801034c <SendFrameOnChannel+0x13c>)
 801031e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010322:	3301      	adds	r3, #1
 8010324:	b2da      	uxtb	r2, r3
 8010326:	4b09      	ldr	r3, [pc, #36]	; (801034c <SendFrameOnChannel+0x13c>)
 8010328:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801032c:	4b09      	ldr	r3, [pc, #36]	; (8010354 <SendFrameOnChannel+0x144>)
 801032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010330:	4a06      	ldr	r2, [pc, #24]	; (801034c <SendFrameOnChannel+0x13c>)
 8010332:	8812      	ldrh	r2, [r2, #0]
 8010334:	b2d2      	uxtb	r2, r2
 8010336:	4611      	mov	r1, r2
 8010338:	4807      	ldr	r0, [pc, #28]	; (8010358 <SendFrameOnChannel+0x148>)
 801033a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3728      	adds	r7, #40	; 0x28
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	20000a4c 	.word	0x20000a4c
 801034c:	20000544 	.word	0x20000544
 8010350:	2000095c 	.word	0x2000095c
 8010354:	0801bbc4 	.word	0x0801bbc4
 8010358:	20000546 	.word	0x20000546

0801035c <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	4603      	mov	r3, r0
 8010364:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010366:	4b15      	ldr	r3, [pc, #84]	; (80103bc <SetTxContinuousWave+0x60>)
 8010368:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 801036c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801036e:	4b14      	ldr	r3, [pc, #80]	; (80103c0 <SetTxContinuousWave+0x64>)
 8010370:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010374:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010376:	4b12      	ldr	r3, [pc, #72]	; (80103c0 <SetTxContinuousWave+0x64>)
 8010378:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801037c:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801037e:	4b10      	ldr	r3, [pc, #64]	; (80103c0 <SetTxContinuousWave+0x64>)
 8010380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010382:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010384:	4b0e      	ldr	r3, [pc, #56]	; (80103c0 <SetTxContinuousWave+0x64>)
 8010386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010388:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801038e:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <SetTxContinuousWave+0x64>)
 8010390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010394:	f107 0208 	add.w	r2, r7, #8
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f003 fe50 	bl	8014040 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103a0:	4b06      	ldr	r3, [pc, #24]	; (80103bc <SetTxContinuousWave+0x60>)
 80103a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103a6:	f043 0302 	orr.w	r3, r3, #2
 80103aa:	4a04      	ldr	r2, [pc, #16]	; (80103bc <SetTxContinuousWave+0x60>)
 80103ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	20000544 	.word	0x20000544
 80103c0:	20000a4c 	.word	0x20000a4c

080103c4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	6039      	str	r1, [r7, #0]
 80103ce:	80fb      	strh	r3, [r7, #6]
 80103d0:	4613      	mov	r3, r2
 80103d2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80103d4:	4b09      	ldr	r3, [pc, #36]	; (80103fc <SetTxContinuousWave1+0x38>)
 80103d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	6838      	ldr	r0, [r7, #0]
 80103e0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103e2:	4b07      	ldr	r3, [pc, #28]	; (8010400 <SetTxContinuousWave1+0x3c>)
 80103e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103e8:	f043 0302 	orr.w	r3, r3, #2
 80103ec:	4a04      	ldr	r2, [pc, #16]	; (8010400 <SetTxContinuousWave1+0x3c>)
 80103ee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	0801bbc4 	.word	0x0801bbc4
 8010400:	20000544 	.word	0x20000544

08010404 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
    return &Nvm;
 8010408:	4b02      	ldr	r3, [pc, #8]	; (8010414 <GetNvmData+0x10>)
}
 801040a:	4618      	mov	r0, r3
 801040c:	46bd      	mov	sp, r7
 801040e:	bc80      	pop	{r7}
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	20000a4c 	.word	0x20000a4c

08010418 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8010420:	2300      	movs	r3, #0
 8010422:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d101      	bne.n	801042e <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801042a:	2303      	movs	r3, #3
 801042c:	e09a      	b.n	8010564 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801042e:	4b4f      	ldr	r3, [pc, #316]	; (801056c <RestoreNvmData+0x154>)
 8010430:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010434:	2b01      	cmp	r3, #1
 8010436:	d001      	beq.n	801043c <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8010438:	2301      	movs	r3, #1
 801043a:	e093      	b.n	8010564 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2124      	movs	r1, #36	; 0x24
 8010440:	4618      	mov	r0, r3
 8010442:	f006 f807 	bl	8016454 <Crc32>
 8010446:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	429a      	cmp	r2, r3
 8010450:	d105      	bne.n	801045e <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2228      	movs	r2, #40	; 0x28
 8010456:	4619      	mov	r1, r3
 8010458:	4845      	ldr	r0, [pc, #276]	; (8010570 <RestoreNvmData+0x158>)
 801045a:	f005 ffa6 	bl	80163aa <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3328      	adds	r3, #40	; 0x28
 8010462:	2114      	movs	r1, #20
 8010464:	4618      	mov	r0, r3
 8010466:	f005 fff5 	bl	8016454 <Crc32>
 801046a:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	429a      	cmp	r2, r3
 8010474:	d106      	bne.n	8010484 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	3328      	adds	r3, #40	; 0x28
 801047a:	2218      	movs	r2, #24
 801047c:	4619      	mov	r1, r3
 801047e:	483d      	ldr	r0, [pc, #244]	; (8010574 <RestoreNvmData+0x15c>)
 8010480:	f005 ff93 	bl	80163aa <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	3340      	adds	r3, #64	; 0x40
 8010488:	21d4      	movs	r1, #212	; 0xd4
 801048a:	4618      	mov	r0, r3
 801048c:	f005 ffe2 	bl	8016454 <Crc32>
 8010490:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	429a      	cmp	r2, r3
 801049c:	d11f      	bne.n	80104de <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	3340      	adds	r3, #64	; 0x40
 80104a2:	22d8      	movs	r2, #216	; 0xd8
 80104a4:	4619      	mov	r1, r3
 80104a6:	4834      	ldr	r0, [pc, #208]	; (8010578 <RestoreNvmData+0x160>)
 80104a8:	f005 ff7f 	bl	80163aa <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80104ac:	4b2f      	ldr	r3, [pc, #188]	; (801056c <RestoreNvmData+0x154>)
 80104ae:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80104b2:	4b2e      	ldr	r3, [pc, #184]	; (801056c <RestoreNvmData+0x154>)
 80104b4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80104b8:	4b2d      	ldr	r3, [pc, #180]	; (8010570 <RestoreNvmData+0x158>)
 80104ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104bc:	4a2b      	ldr	r2, [pc, #172]	; (801056c <RestoreNvmData+0x154>)
 80104be:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80104c2:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <RestoreNvmData+0x158>)
 80104c4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80104c8:	4b28      	ldr	r3, [pc, #160]	; (801056c <RestoreNvmData+0x154>)
 80104ca:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80104ce:	4b27      	ldr	r3, [pc, #156]	; (801056c <RestoreNvmData+0x154>)
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80104d6:	4b25      	ldr	r3, [pc, #148]	; (801056c <RestoreNvmData+0x154>)
 80104d8:	2202      	movs	r2, #2
 80104da:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80104e4:	21bc      	movs	r1, #188	; 0xbc
 80104e6:	4618      	mov	r0, r3
 80104e8:	f005 ffb4 	bl	8016454 <Crc32>
 80104ec:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d107      	bne.n	801050a <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8010500:	22c0      	movs	r2, #192	; 0xc0
 8010502:	4619      	mov	r1, r3
 8010504:	481d      	ldr	r0, [pc, #116]	; (801057c <RestoreNvmData+0x164>)
 8010506:	f005 ff50 	bl	80163aa <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010510:	2190      	movs	r1, #144	; 0x90
 8010512:	4618      	mov	r0, r3
 8010514:	f005 ff9e 	bl	8016454 <Crc32>
 8010518:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	429a      	cmp	r2, r3
 8010524:	d107      	bne.n	8010536 <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801052c:	2294      	movs	r2, #148	; 0x94
 801052e:	4619      	mov	r1, r3
 8010530:	4813      	ldr	r0, [pc, #76]	; (8010580 <RestoreNvmData+0x168>)
 8010532:	f005 ff3a 	bl	80163aa <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801053c:	2114      	movs	r1, #20
 801053e:	4618      	mov	r0, r3
 8010540:	f005 ff88 	bl	8016454 <Crc32>
 8010544:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	429a      	cmp	r2, r3
 8010550:	d107      	bne.n	8010562 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010558:	2218      	movs	r2, #24
 801055a:	4619      	mov	r1, r3
 801055c:	4809      	ldr	r0, [pc, #36]	; (8010584 <RestoreNvmData+0x16c>)
 801055e:	f005 ff24 	bl	80163aa <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8010562:	2300      	movs	r3, #0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	20000544 	.word	0x20000544
 8010570:	20000a4c 	.word	0x20000a4c
 8010574:	20000a74 	.word	0x20000a74
 8010578:	20000a8c 	.word	0x20000a8c
 801057c:	20000b64 	.word	0x20000b64
 8010580:	20000c24 	.word	0x20000c24
 8010584:	20000d80 	.word	0x20000d80

08010588 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d002      	beq.n	801059e <DetermineFrameType+0x16>
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801059e:	2303      	movs	r3, #3
 80105a0:	e03b      	b.n	801061a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	7b1b      	ldrb	r3, [r3, #12]
 80105a6:	f003 030f 	and.w	r3, r3, #15
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d008      	beq.n	80105c2 <DetermineFrameType+0x3a>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d003      	beq.n	80105c2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	2200      	movs	r2, #0
 80105be:	701a      	strb	r2, [r3, #0]
 80105c0:	e02a      	b.n	8010618 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d103      	bne.n	80105d4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2201      	movs	r2, #1
 80105d0:	701a      	strb	r2, [r3, #0]
 80105d2:	e021      	b.n	8010618 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	7b1b      	ldrb	r3, [r3, #12]
 80105d8:	f003 030f 	and.w	r3, r3, #15
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d108      	bne.n	80105f4 <DetermineFrameType+0x6c>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d103      	bne.n	80105f4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2202      	movs	r2, #2
 80105f0:	701a      	strb	r2, [r3, #0]
 80105f2:	e011      	b.n	8010618 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	7b1b      	ldrb	r3, [r3, #12]
 80105f8:	f003 030f 	and.w	r3, r3, #15
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d108      	bne.n	8010614 <DetermineFrameType+0x8c>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	2203      	movs	r2, #3
 8010610:	701a      	strb	r2, [r3, #0]
 8010612:	e001      	b.n	8010618 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010614:	2317      	movs	r3, #23
 8010616:	e000      	b.n	801061a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	bc80      	pop	{r7}
 8010622:	4770      	bx	lr

08010624 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010624:	b480      	push	{r7}
 8010626:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8010628:	4b12      	ldr	r3, [pc, #72]	; (8010674 <CheckRetransUnconfirmedUplink+0x50>)
 801062a:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801062e:	4b12      	ldr	r3, [pc, #72]	; (8010678 <CheckRetransUnconfirmedUplink+0x54>)
 8010630:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010634:	429a      	cmp	r2, r3
 8010636:	d301      	bcc.n	801063c <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8010638:	2301      	movs	r3, #1
 801063a:	e016      	b.n	801066a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801063c:	4b0d      	ldr	r3, [pc, #52]	; (8010674 <CheckRetransUnconfirmedUplink+0x50>)
 801063e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010642:	f003 0302 	and.w	r3, r3, #2
 8010646:	b2db      	uxtb	r3, r3
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00d      	beq.n	8010668 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801064c:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <CheckRetransUnconfirmedUplink+0x54>)
 801064e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8010656:	2301      	movs	r3, #1
 8010658:	e007      	b.n	801066a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801065a:	4b06      	ldr	r3, [pc, #24]	; (8010674 <CheckRetransUnconfirmedUplink+0x50>)
 801065c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010664:	2301      	movs	r3, #1
 8010666:	e000      	b.n	801066a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	46bd      	mov	sp, r7
 801066e:	bc80      	pop	{r7}
 8010670:	4770      	bx	lr
 8010672:	bf00      	nop
 8010674:	20000544 	.word	0x20000544
 8010678:	20000a4c 	.word	0x20000a4c

0801067c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801067c:	b480      	push	{r7}
 801067e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010680:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <CheckRetransConfirmedUplink+0x40>)
 8010682:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 8010686:	4b0d      	ldr	r3, [pc, #52]	; (80106bc <CheckRetransConfirmedUplink+0x40>)
 8010688:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 801068c:	429a      	cmp	r2, r3
 801068e:	d301      	bcc.n	8010694 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010690:	2301      	movs	r3, #1
 8010692:	e00f      	b.n	80106b4 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010694:	4b09      	ldr	r3, [pc, #36]	; (80106bc <CheckRetransConfirmedUplink+0x40>)
 8010696:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801069a:	f003 0302 	and.w	r3, r3, #2
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d006      	beq.n	80106b2 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80106a4:	4b05      	ldr	r3, [pc, #20]	; (80106bc <CheckRetransConfirmedUplink+0x40>)
 80106a6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e000      	b.n	80106b4 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bc80      	pop	{r7}
 80106ba:	4770      	bx	lr
 80106bc:	20000544 	.word	0x20000544

080106c0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80106c0:	b480      	push	{r7}
 80106c2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80106c4:	4b1a      	ldr	r3, [pc, #104]	; (8010730 <StopRetransmission+0x70>)
 80106c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80106ca:	f003 0302 	and.w	r3, r3, #2
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d009      	beq.n	80106e8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80106d4:	4b16      	ldr	r3, [pc, #88]	; (8010730 <StopRetransmission+0x70>)
 80106d6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00e      	beq.n	80106fc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80106de:	4b14      	ldr	r3, [pc, #80]	; (8010730 <StopRetransmission+0x70>)
 80106e0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d009      	beq.n	80106fc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80106e8:	4b12      	ldr	r3, [pc, #72]	; (8010734 <StopRetransmission+0x74>)
 80106ea:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d004      	beq.n	80106fc <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80106f2:	4b10      	ldr	r3, [pc, #64]	; (8010734 <StopRetransmission+0x74>)
 80106f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106f6:	3301      	adds	r3, #1
 80106f8:	4a0e      	ldr	r2, [pc, #56]	; (8010734 <StopRetransmission+0x74>)
 80106fa:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80106fc:	4b0c      	ldr	r3, [pc, #48]	; (8010730 <StopRetransmission+0x70>)
 80106fe:	2200      	movs	r2, #0
 8010700:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8010704:	4b0a      	ldr	r3, [pc, #40]	; (8010730 <StopRetransmission+0x70>)
 8010706:	2200      	movs	r2, #0
 8010708:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 801070c:	4b08      	ldr	r3, [pc, #32]	; (8010730 <StopRetransmission+0x70>)
 801070e:	2200      	movs	r2, #0
 8010710:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010714:	4b06      	ldr	r3, [pc, #24]	; (8010730 <StopRetransmission+0x70>)
 8010716:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801071a:	f023 0302 	bic.w	r3, r3, #2
 801071e:	4a04      	ldr	r2, [pc, #16]	; (8010730 <StopRetransmission+0x70>)
 8010720:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010724:	2301      	movs	r3, #1
}
 8010726:	4618      	mov	r0, r3
 8010728:	46bd      	mov	sp, r7
 801072a:	bc80      	pop	{r7}
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20000544 	.word	0x20000544
 8010734:	20000a4c 	.word	0x20000a4c

08010738 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	4603      	mov	r3, r0
 8010740:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010742:	4b0b      	ldr	r3, [pc, #44]	; (8010770 <CallNvmDataChangeCallback+0x38>)
 8010744:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00c      	beq.n	8010766 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801074c:	4b08      	ldr	r3, [pc, #32]	; (8010770 <CallNvmDataChangeCallback+0x38>)
 801074e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010752:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010754:	2b00      	cmp	r3, #0
 8010756:	d006      	beq.n	8010766 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010758:	4b05      	ldr	r3, [pc, #20]	; (8010770 <CallNvmDataChangeCallback+0x38>)
 801075a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	88fa      	ldrh	r2, [r7, #6]
 8010762:	4610      	mov	r0, r2
 8010764:	4798      	blx	r3
    }
}
 8010766:	bf00      	nop
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20000544 	.word	0x20000544

08010774 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801077a:	4b1b      	ldr	r3, [pc, #108]	; (80107e8 <AckTimeoutRetriesProcess+0x74>)
 801077c:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010780:	4b19      	ldr	r3, [pc, #100]	; (80107e8 <AckTimeoutRetriesProcess+0x74>)
 8010782:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010786:	429a      	cmp	r2, r3
 8010788:	d229      	bcs.n	80107de <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801078a:	4b17      	ldr	r3, [pc, #92]	; (80107e8 <AckTimeoutRetriesProcess+0x74>)
 801078c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010790:	3301      	adds	r3, #1
 8010792:	b2da      	uxtb	r2, r3
 8010794:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <AckTimeoutRetriesProcess+0x74>)
 8010796:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801079a:	4b13      	ldr	r3, [pc, #76]	; (80107e8 <AckTimeoutRetriesProcess+0x74>)
 801079c:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80107a0:	f003 0301 	and.w	r3, r3, #1
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d019      	beq.n	80107de <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80107aa:	2322      	movs	r3, #34	; 0x22
 80107ac:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80107ae:	4b0f      	ldr	r3, [pc, #60]	; (80107ec <AckTimeoutRetriesProcess+0x78>)
 80107b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80107b4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107b6:	4b0d      	ldr	r3, [pc, #52]	; (80107ec <AckTimeoutRetriesProcess+0x78>)
 80107b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107bc:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107be:	4b0b      	ldr	r3, [pc, #44]	; (80107ec <AckTimeoutRetriesProcess+0x78>)
 80107c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107c4:	f107 0208 	add.w	r2, r7, #8
 80107c8:	4611      	mov	r1, r2
 80107ca:	4618      	mov	r0, r3
 80107cc:	f003 fae2 	bl	8013d94 <RegionGetPhyParam>
 80107d0:	4603      	mov	r3, r0
 80107d2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	b25a      	sxtb	r2, r3
 80107d8:	4b04      	ldr	r3, [pc, #16]	; (80107ec <AckTimeoutRetriesProcess+0x78>)
 80107da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80107de:	bf00      	nop
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	20000544 	.word	0x20000544
 80107ec:	20000a4c 	.word	0x20000a4c

080107f0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80107f6:	4b14      	ldr	r3, [pc, #80]	; (8010848 <AckTimeoutRetriesFinalize+0x58>)
 80107f8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80107fc:	f083 0301 	eor.w	r3, r3, #1
 8010800:	b2db      	uxtb	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	d015      	beq.n	8010832 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010806:	2302      	movs	r3, #2
 8010808:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801080a:	4b10      	ldr	r3, [pc, #64]	; (801084c <AckTimeoutRetriesFinalize+0x5c>)
 801080c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801080e:	4b10      	ldr	r3, [pc, #64]	; (8010850 <AckTimeoutRetriesFinalize+0x60>)
 8010810:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010812:	4b10      	ldr	r3, [pc, #64]	; (8010854 <AckTimeoutRetriesFinalize+0x64>)
 8010814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010818:	1d3a      	adds	r2, r7, #4
 801081a:	4611      	mov	r1, r2
 801081c:	4618      	mov	r0, r3
 801081e:	f003 fae3 	bl	8013de8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010822:	4b09      	ldr	r3, [pc, #36]	; (8010848 <AckTimeoutRetriesFinalize+0x58>)
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801082a:	4b07      	ldr	r3, [pc, #28]	; (8010848 <AckTimeoutRetriesFinalize+0x58>)
 801082c:	2200      	movs	r2, #0
 801082e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010832:	4b05      	ldr	r3, [pc, #20]	; (8010848 <AckTimeoutRetriesFinalize+0x58>)
 8010834:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010838:	4b03      	ldr	r3, [pc, #12]	; (8010848 <AckTimeoutRetriesFinalize+0x58>)
 801083a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 801083e:	bf00      	nop
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	20000544 	.word	0x20000544
 801084c:	20000c24 	.word	0x20000c24
 8010850:	20000cb8 	.word	0x20000cb8
 8010854:	20000a4c 	.word	0x20000a4c

08010858 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010858:	b480      	push	{r7}
 801085a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801085c:	4b0b      	ldr	r3, [pc, #44]	; (801088c <IsRequestPending+0x34>)
 801085e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010862:	f003 0304 	and.w	r3, r3, #4
 8010866:	b2db      	uxtb	r3, r3
 8010868:	2b00      	cmp	r3, #0
 801086a:	d107      	bne.n	801087c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 801086c:	4b07      	ldr	r3, [pc, #28]	; (801088c <IsRequestPending+0x34>)
 801086e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010872:	f003 0301 	and.w	r3, r3, #1
 8010876:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010878:	2b00      	cmp	r3, #0
 801087a:	d001      	beq.n	8010880 <IsRequestPending+0x28>
    {
        return 1;
 801087c:	2301      	movs	r3, #1
 801087e:	e000      	b.n	8010882 <IsRequestPending+0x2a>
    }
    return 0;
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	46bd      	mov	sp, r7
 8010886:	bc80      	pop	{r7}
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	20000544 	.word	0x20000544

08010890 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010890:	b590      	push	{r4, r7, lr}
 8010892:	b08f      	sub	sp, #60	; 0x3c
 8010894:	af02      	add	r7, sp, #8
 8010896:	6178      	str	r0, [r7, #20]
 8010898:	6139      	str	r1, [r7, #16]
 801089a:	4613      	mov	r3, r2
 801089c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <LoRaMacInitialization+0x1a>
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108aa:	2303      	movs	r3, #3
 80108ac:	e275      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00b      	beq.n	80108ce <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d007      	beq.n	80108ce <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80108ce:	2303      	movs	r3, #3
 80108d0:	e263      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80108d2:	7bfb      	ldrb	r3, [r7, #15]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f003 fa4d 	bl	8013d74 <RegionIsActive>
 80108da:	4603      	mov	r3, r0
 80108dc:	f083 0301 	eor.w	r3, r3, #1
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80108e6:	2309      	movs	r3, #9
 80108e8:	e257      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80108ea:	6978      	ldr	r0, [r7, #20]
 80108ec:	f001 fef6 	bl	80126dc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80108f0:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80108f4:	2100      	movs	r1, #0
 80108f6:	48c7      	ldr	r0, [pc, #796]	; (8010c14 <LoRaMacInitialization+0x384>)
 80108f8:	f005 fd92 	bl	8016420 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80108fc:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8010900:	2100      	movs	r1, #0
 8010902:	48c5      	ldr	r0, [pc, #788]	; (8010c18 <LoRaMacInitialization+0x388>)
 8010904:	f005 fd8c 	bl	8016420 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010908:	4bc3      	ldr	r3, [pc, #780]	; (8010c18 <LoRaMacInitialization+0x388>)
 801090a:	2201      	movs	r2, #1
 801090c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8010910:	4bc1      	ldr	r3, [pc, #772]	; (8010c18 <LoRaMacInitialization+0x388>)
 8010912:	2201      	movs	r2, #1
 8010914:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 8010918:	4abe      	ldr	r2, [pc, #760]	; (8010c14 <LoRaMacInitialization+0x384>)
 801091a:	7bfb      	ldrb	r3, [r7, #15]
 801091c:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010920:	4bbc      	ldr	r3, [pc, #752]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010922:	2200      	movs	r2, #0
 8010924:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010928:	4bba      	ldr	r3, [pc, #744]	; (8010c14 <LoRaMacInitialization+0x384>)
 801092a:	2200      	movs	r2, #0
 801092c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010930:	4bb8      	ldr	r3, [pc, #736]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010932:	4aba      	ldr	r2, [pc, #744]	; (8010c1c <LoRaMacInitialization+0x38c>)
 8010934:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010938:	230f      	movs	r3, #15
 801093a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801093e:	4bb5      	ldr	r3, [pc, #724]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010944:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010948:	4611      	mov	r1, r2
 801094a:	4618      	mov	r0, r3
 801094c:	f003 fa22 	bl	8013d94 <RegionGetPhyParam>
 8010950:	4603      	mov	r3, r0
 8010952:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	2b00      	cmp	r3, #0
 8010958:	bf14      	ite	ne
 801095a:	2301      	movne	r3, #1
 801095c:	2300      	moveq	r3, #0
 801095e:	b2da      	uxtb	r2, r3
 8010960:	4bac      	ldr	r3, [pc, #688]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010962:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010966:	230a      	movs	r3, #10
 8010968:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801096c:	4ba9      	ldr	r3, [pc, #676]	; (8010c14 <LoRaMacInitialization+0x384>)
 801096e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010976:	4611      	mov	r1, r2
 8010978:	4618      	mov	r0, r3
 801097a:	f003 fa0b 	bl	8013d94 <RegionGetPhyParam>
 801097e:	4603      	mov	r3, r0
 8010980:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010984:	b25a      	sxtb	r2, r3
 8010986:	4ba3      	ldr	r3, [pc, #652]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010988:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 801098c:	2306      	movs	r3, #6
 801098e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010992:	4ba0      	ldr	r3, [pc, #640]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010998:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f003 f9f8 	bl	8013d94 <RegionGetPhyParam>
 80109a4:	4603      	mov	r3, r0
 80109a6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80109a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109aa:	b25a      	sxtb	r2, r3
 80109ac:	4b99      	ldr	r3, [pc, #612]	; (8010c14 <LoRaMacInitialization+0x384>)
 80109ae:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80109b2:	2310      	movs	r3, #16
 80109b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109b8:	4b96      	ldr	r3, [pc, #600]	; (8010c14 <LoRaMacInitialization+0x384>)
 80109ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109c2:	4611      	mov	r1, r2
 80109c4:	4618      	mov	r0, r3
 80109c6:	f003 f9e5 	bl	8013d94 <RegionGetPhyParam>
 80109ca:	4603      	mov	r3, r0
 80109cc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80109ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d0:	4a90      	ldr	r2, [pc, #576]	; (8010c14 <LoRaMacInitialization+0x384>)
 80109d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80109d6:	2311      	movs	r3, #17
 80109d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109dc:	4b8d      	ldr	r3, [pc, #564]	; (8010c14 <LoRaMacInitialization+0x384>)
 80109de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109e6:	4611      	mov	r1, r2
 80109e8:	4618      	mov	r0, r3
 80109ea:	f003 f9d3 	bl	8013d94 <RegionGetPhyParam>
 80109ee:	4603      	mov	r3, r0
 80109f0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80109f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f4:	4a87      	ldr	r2, [pc, #540]	; (8010c14 <LoRaMacInitialization+0x384>)
 80109f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80109fa:	2312      	movs	r3, #18
 80109fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a00:	4b84      	ldr	r3, [pc, #528]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a0a:	4611      	mov	r1, r2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f003 f9c1 	bl	8013d94 <RegionGetPhyParam>
 8010a12:	4603      	mov	r3, r0
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	4a7e      	ldr	r2, [pc, #504]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010a1e:	2313      	movs	r3, #19
 8010a20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a24:	4b7b      	ldr	r3, [pc, #492]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a2e:	4611      	mov	r1, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f003 f9af 	bl	8013d94 <RegionGetPhyParam>
 8010a36:	4603      	mov	r3, r0
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	4a75      	ldr	r2, [pc, #468]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010a42:	2314      	movs	r3, #20
 8010a44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a48:	4b72      	ldr	r3, [pc, #456]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a52:	4611      	mov	r1, r2
 8010a54:	4618      	mov	r0, r3
 8010a56:	f003 f99d 	bl	8013d94 <RegionGetPhyParam>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	4a6c      	ldr	r2, [pc, #432]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010a66:	2317      	movs	r3, #23
 8010a68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a6c:	4b69      	ldr	r3, [pc, #420]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a76:	4611      	mov	r1, r2
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f003 f98b 	bl	8013d94 <RegionGetPhyParam>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	4b63      	ldr	r3, [pc, #396]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010a8c:	2318      	movs	r3, #24
 8010a8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a92:	4b60      	ldr	r3, [pc, #384]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f003 f978 	bl	8013d94 <RegionGetPhyParam>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aaa:	4a5a      	ldr	r2, [pc, #360]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010aac:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab2:	4a58      	ldr	r2, [pc, #352]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010ab4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010ab8:	2319      	movs	r3, #25
 8010aba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010abe:	4b55      	ldr	r3, [pc, #340]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ac4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f003 f962 	bl	8013d94 <RegionGetPhyParam>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad6:	b2da      	uxtb	r2, r3
 8010ad8:	4b4e      	ldr	r3, [pc, #312]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010ada:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	b2da      	uxtb	r2, r3
 8010ae2:	4b4c      	ldr	r3, [pc, #304]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010ae4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010ae8:	231e      	movs	r3, #30
 8010aea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010aee:	4b49      	ldr	r3, [pc, #292]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010af4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010af8:	4611      	mov	r1, r2
 8010afa:	4618      	mov	r0, r3
 8010afc:	f003 f94a 	bl	8013d94 <RegionGetPhyParam>
 8010b00:	4603      	mov	r3, r0
 8010b02:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	b2da      	uxtb	r2, r3
 8010b08:	4b42      	ldr	r3, [pc, #264]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b0a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010b0e:	231f      	movs	r3, #31
 8010b10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b14:	4b3f      	ldr	r3, [pc, #252]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f003 f937 	bl	8013d94 <RegionGetPhyParam>
 8010b26:	4603      	mov	r3, r0
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b39      	ldr	r3, [pc, #228]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b30:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010b34:	2320      	movs	r3, #32
 8010b36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b3a:	4b36      	ldr	r3, [pc, #216]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b44:	4611      	mov	r1, r2
 8010b46:	4618      	mov	r0, r3
 8010b48:	f003 f924 	bl	8013d94 <RegionGetPhyParam>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	4a30      	ldr	r2, [pc, #192]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b54:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010b58:	2321      	movs	r3, #33	; 0x21
 8010b5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b5e:	4b2d      	ldr	r3, [pc, #180]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b68:	4611      	mov	r1, r2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f003 f912 	bl	8013d94 <RegionGetPhyParam>
 8010b70:	4603      	mov	r3, r0
 8010b72:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b76:	4a27      	ldr	r2, [pc, #156]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b78:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010b7c:	230b      	movs	r3, #11
 8010b7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b82:	4b24      	ldr	r3, [pc, #144]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f003 f900 	bl	8013d94 <RegionGetPhyParam>
 8010b94:	4603      	mov	r3, r0
 8010b96:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	4b1e      	ldr	r3, [pc, #120]	; (8010c18 <LoRaMacInitialization+0x388>)
 8010b9e:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010ba2:	230c      	movs	r3, #12
 8010ba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ba8:	4b1a      	ldr	r3, [pc, #104]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f003 f8ed 	bl	8013d94 <RegionGetPhyParam>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	4b15      	ldr	r3, [pc, #84]	; (8010c18 <LoRaMacInitialization+0x388>)
 8010bc4:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010bc8:	4b12      	ldr	r3, [pc, #72]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bca:	2201      	movs	r2, #1
 8010bcc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010bd0:	4b10      	ldr	r3, [pc, #64]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bd2:	220a      	movs	r2, #10
 8010bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010bd8:	4b0e      	ldr	r3, [pc, #56]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bda:	2206      	movs	r2, #6
 8010bdc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010be0:	4b0c      	ldr	r3, [pc, #48]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010be6:	4a0b      	ldr	r2, [pc, #44]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010be8:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010bea:	4b0a      	ldr	r3, [pc, #40]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bec:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010bf0:	4b08      	ldr	r3, [pc, #32]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010bf6:	4b07      	ldr	r3, [pc, #28]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bfc:	4a05      	ldr	r2, [pc, #20]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010c00:	4b04      	ldr	r3, [pc, #16]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c06:	4a03      	ldr	r2, [pc, #12]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010c08:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010c0a:	4b02      	ldr	r3, [pc, #8]	; (8010c14 <LoRaMacInitialization+0x384>)
 8010c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c10:	e006      	b.n	8010c20 <LoRaMacInitialization+0x390>
 8010c12:	bf00      	nop
 8010c14:	20000a4c 	.word	0x20000a4c
 8010c18:	20000544 	.word	0x20000544
 8010c1c:	01000300 	.word	0x01000300
 8010c20:	4a60      	ldr	r2, [pc, #384]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c22:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010c24:	4b5f      	ldr	r3, [pc, #380]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c2a:	4a5e      	ldr	r2, [pc, #376]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c2c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010c2e:	4b5d      	ldr	r3, [pc, #372]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010c34:	4a5b      	ldr	r2, [pc, #364]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c36:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010c38:	4b5a      	ldr	r3, [pc, #360]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c3a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010c3e:	4b59      	ldr	r3, [pc, #356]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010c4a:	4b57      	ldr	r3, [pc, #348]	; (8010da8 <LoRaMacInitialization+0x518>)
 8010c4c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010c4e:	4b57      	ldr	r3, [pc, #348]	; (8010dac <LoRaMacInitialization+0x51c>)
 8010c50:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010c52:	4b54      	ldr	r3, [pc, #336]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c58:	f107 0218 	add.w	r2, r7, #24
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f003 f8c2 	bl	8013de8 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010c64:	4a52      	ldr	r2, [pc, #328]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010c6c:	f7ff f85a 	bl	800fd24 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010c70:	4b4c      	ldr	r3, [pc, #304]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010c78:	4a4d      	ldr	r2, [pc, #308]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010c80:	4b4b      	ldr	r3, [pc, #300]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010c88:	4b49      	ldr	r3, [pc, #292]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010c90:	4b44      	ldr	r3, [pc, #272]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010c96:	4b43      	ldr	r3, [pc, #268]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	9300      	str	r3, [sp, #0]
 8010ca0:	4b44      	ldr	r3, [pc, #272]	; (8010db4 <LoRaMacInitialization+0x524>)
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8010ca8:	4843      	ldr	r0, [pc, #268]	; (8010db8 <LoRaMacInitialization+0x528>)
 8010caa:	f009 fb11 	bl	801a2d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010cae:	2300      	movs	r3, #0
 8010cb0:	9300      	str	r3, [sp, #0]
 8010cb2:	4b42      	ldr	r3, [pc, #264]	; (8010dbc <LoRaMacInitialization+0x52c>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8010cba:	4841      	ldr	r0, [pc, #260]	; (8010dc0 <LoRaMacInitialization+0x530>)
 8010cbc:	f009 fb08 	bl	801a2d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	4b3f      	ldr	r3, [pc, #252]	; (8010dc4 <LoRaMacInitialization+0x534>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8010ccc:	483e      	ldr	r0, [pc, #248]	; (8010dc8 <LoRaMacInitialization+0x538>)
 8010cce:	f009 faff 	bl	801a2d0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	4b3d      	ldr	r3, [pc, #244]	; (8010dcc <LoRaMacInitialization+0x53c>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f04f 31ff 	mov.w	r1, #4294967295
 8010cde:	483c      	ldr	r0, [pc, #240]	; (8010dd0 <LoRaMacInitialization+0x540>)
 8010ce0:	f009 faf6 	bl	801a2d0 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010ce4:	4c2f      	ldr	r4, [pc, #188]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010ce6:	463b      	mov	r3, r7
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f008 fe79 	bl	80199e0 <SysTimeGetMcuTime>
 8010cee:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010cf2:	463a      	mov	r2, r7
 8010cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cf8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010cfc:	4b2c      	ldr	r3, [pc, #176]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010cfe:	4a35      	ldr	r2, [pc, #212]	; (8010dd4 <LoRaMacInitialization+0x544>)
 8010d00:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010d04:	4b2a      	ldr	r3, [pc, #168]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010d06:	4a34      	ldr	r2, [pc, #208]	; (8010dd8 <LoRaMacInitialization+0x548>)
 8010d08:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010d0c:	4b28      	ldr	r3, [pc, #160]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010d0e:	4a33      	ldr	r2, [pc, #204]	; (8010ddc <LoRaMacInitialization+0x54c>)
 8010d10:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010d14:	4b26      	ldr	r3, [pc, #152]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010d16:	4a32      	ldr	r2, [pc, #200]	; (8010de0 <LoRaMacInitialization+0x550>)
 8010d18:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010d1c:	4b24      	ldr	r3, [pc, #144]	; (8010db0 <LoRaMacInitialization+0x520>)
 8010d1e:	4a31      	ldr	r2, [pc, #196]	; (8010de4 <LoRaMacInitialization+0x554>)
 8010d20:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010d24:	4b30      	ldr	r3, [pc, #192]	; (8010de8 <LoRaMacInitialization+0x558>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4830      	ldr	r0, [pc, #192]	; (8010dec <LoRaMacInitialization+0x55c>)
 8010d2a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	4619      	mov	r1, r3
 8010d32:	482f      	ldr	r0, [pc, #188]	; (8010df0 <LoRaMacInitialization+0x560>)
 8010d34:	f7fa ff52 	bl	800bbdc <SecureElementInit>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d3e:	2311      	movs	r3, #17
 8010d40:	e02b      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010d42:	4818      	ldr	r0, [pc, #96]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010d44:	f002 f950 	bl	8012fe8 <LoRaMacCryptoInit>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d4e:	2311      	movs	r3, #17
 8010d50:	e023      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010d52:	f001 fa95 	bl	8012280 <LoRaMacCommandsInit>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d5c:	2313      	movs	r3, #19
 8010d5e:	e01c      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010d60:	4824      	ldr	r0, [pc, #144]	; (8010df4 <LoRaMacInitialization+0x564>)
 8010d62:	f002 f9ff 	bl	8013164 <LoRaMacCryptoSetMulticastReference>
 8010d66:	4603      	mov	r3, r0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d001      	beq.n	8010d70 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d6c:	2311      	movs	r3, #17
 8010d6e:	e014      	b.n	8010d9a <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010d70:	4b1d      	ldr	r3, [pc, #116]	; (8010de8 <LoRaMacInitialization+0x558>)
 8010d72:	695b      	ldr	r3, [r3, #20]
 8010d74:	4798      	blx	r3
 8010d76:	4603      	mov	r3, r0
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f005 faf1 	bl	8016360 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010d7e:	4b1a      	ldr	r3, [pc, #104]	; (8010de8 <LoRaMacInitialization+0x558>)
 8010d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d82:	4a08      	ldr	r2, [pc, #32]	; (8010da4 <LoRaMacInitialization+0x514>)
 8010d84:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010d88:	4610      	mov	r0, r2
 8010d8a:	4798      	blx	r3
    Radio.Sleep( );
 8010d8c:	4b16      	ldr	r3, [pc, #88]	; (8010de8 <LoRaMacInitialization+0x558>)
 8010d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d90:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010d92:	2001      	movs	r0, #1
 8010d94:	f7fd faaa 	bl	800e2ec <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010d98:	2300      	movs	r3, #0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3734      	adds	r7, #52	; 0x34
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd90      	pop	{r4, r7, pc}
 8010da2:	bf00      	nop
 8010da4:	20000a4c 	.word	0x20000a4c
 8010da8:	20000c24 	.word	0x20000c24
 8010dac:	20000cb8 	.word	0x20000cb8
 8010db0:	20000544 	.word	0x20000544
 8010db4:	0800e875 	.word	0x0800e875
 8010db8:	200008ac 	.word	0x200008ac
 8010dbc:	0800e8e9 	.word	0x0800e8e9
 8010dc0:	200008c4 	.word	0x200008c4
 8010dc4:	0800e955 	.word	0x0800e955
 8010dc8:	200008dc 	.word	0x200008dc
 8010dcc:	0800e9c9 	.word	0x0800e9c9
 8010dd0:	2000093c 	.word	0x2000093c
 8010dd4:	0800d479 	.word	0x0800d479
 8010dd8:	0800d4f1 	.word	0x0800d4f1
 8010ddc:	0800d5c9 	.word	0x0800d5c9
 8010de0:	0800d57d 	.word	0x0800d57d
 8010de4:	0800d605 	.word	0x0800d605
 8010de8:	0801bbc4 	.word	0x0801bbc4
 8010dec:	20000890 	.word	0x20000890
 8010df0:	20000b64 	.word	0x20000b64
 8010df4:	20000b1c 	.word	0x20000b1c

08010df8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010df8:	b480      	push	{r7}
 8010dfa:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010dfc:	4b04      	ldr	r3, [pc, #16]	; (8010e10 <LoRaMacStart+0x18>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bc80      	pop	{r7}
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	20000544 	.word	0x20000544

08010e14 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08a      	sub	sp, #40	; 0x28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	6039      	str	r1, [r7, #0]
 8010e1e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010e20:	4b3e      	ldr	r3, [pc, #248]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e24:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010e26:	4b3d      	ldr	r3, [pc, #244]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e28:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010e2c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010e2e:	4b3b      	ldr	r3, [pc, #236]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e30:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010e34:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010e36:	2300      	movs	r3, #0
 8010e38:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e40:	2303      	movs	r3, #3
 8010e42:	e066      	b.n	8010f12 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010e44:	4b35      	ldr	r3, [pc, #212]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010e4a:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010e50:	4b32      	ldr	r3, [pc, #200]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e52:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010e56:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010e58:	4b30      	ldr	r3, [pc, #192]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e5c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010e5e:	4b30      	ldr	r3, [pc, #192]	; (8010f20 <LoRaMacQueryTxPossible+0x10c>)
 8010e60:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010e64:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010e66:	4b2e      	ldr	r3, [pc, #184]	; (8010f20 <LoRaMacQueryTxPossible+0x10c>)
 8010e68:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010e6c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010e6e:	4b2b      	ldr	r3, [pc, #172]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e70:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010e74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010e78:	4b28      	ldr	r3, [pc, #160]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e7a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010e7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e82:	4b26      	ldr	r3, [pc, #152]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010e8c:	4b23      	ldr	r3, [pc, #140]	; (8010f1c <LoRaMacQueryTxPossible+0x108>)
 8010e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010e96:	f107 0310 	add.w	r3, r7, #16
 8010e9a:	f107 020e 	add.w	r2, r7, #14
 8010e9e:	f107 010f 	add.w	r1, r7, #15
 8010ea2:	f107 0014 	add.w	r0, r7, #20
 8010ea6:	f000 ffe1 	bl	8011e6c <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fd fed2 	bl	800ec58 <GetMaxAppPayloadWithoutFOptsLength>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010ebc:	f107 0308 	add.w	r3, r7, #8
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f001 faab 	bl	801241c <LoRaMacCommandsGetSizeSerializedCmds>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d001      	beq.n	8010ed0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ecc:	2313      	movs	r3, #19
 8010ece:	e020      	b.n	8010f12 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	2b0f      	cmp	r3, #15
 8010ed4:	d819      	bhi.n	8010f0a <LoRaMacQueryTxPossible+0xf6>
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	785b      	ldrb	r3, [r3, #1]
 8010eda:	461a      	mov	r2, r3
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d313      	bcc.n	8010f0a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	785a      	ldrb	r2, [r3, #1]
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	b2db      	uxtb	r3, r3
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	b2da      	uxtb	r2, r3
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	785b      	ldrb	r3, [r3, #1]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	79fa      	ldrb	r2, [r7, #7]
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	4413      	add	r3, r2
 8010efe:	4299      	cmp	r1, r3
 8010f00:	d301      	bcc.n	8010f06 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010f02:	2300      	movs	r3, #0
 8010f04:	e005      	b.n	8010f12 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010f06:	2308      	movs	r3, #8
 8010f08:	e003      	b.n	8010f12 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010f10:	2308      	movs	r3, #8
    }
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3728      	adds	r7, #40	; 0x28
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	20000a4c 	.word	0x20000a4c
 8010f20:	20000544 	.word	0x20000544

08010f24 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b087      	sub	sp, #28
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d101      	bne.n	8010f3a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f36:	2303      	movs	r3, #3
 8010f38:	e14b      	b.n	80111d2 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	2b28      	cmp	r3, #40	; 0x28
 8010f40:	f200 8140 	bhi.w	80111c4 <LoRaMacMibGetRequestConfirm+0x2a0>
 8010f44:	a201      	add	r2, pc, #4	; (adr r2, 8010f4c <LoRaMacMibGetRequestConfirm+0x28>)
 8010f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f4a:	bf00      	nop
 8010f4c:	08010ff1 	.word	0x08010ff1
 8010f50:	08010ffd 	.word	0x08010ffd
 8010f54:	08011009 	.word	0x08011009
 8010f58:	08011015 	.word	0x08011015
 8010f5c:	08011021 	.word	0x08011021
 8010f60:	0801102d 	.word	0x0801102d
 8010f64:	08011039 	.word	0x08011039
 8010f68:	080111c5 	.word	0x080111c5
 8010f6c:	080111c5 	.word	0x080111c5
 8010f70:	080111c5 	.word	0x080111c5
 8010f74:	080111c5 	.word	0x080111c5
 8010f78:	080111c5 	.word	0x080111c5
 8010f7c:	080111c5 	.word	0x080111c5
 8010f80:	080111c5 	.word	0x080111c5
 8010f84:	080111c5 	.word	0x080111c5
 8010f88:	08011045 	.word	0x08011045
 8010f8c:	08011051 	.word	0x08011051
 8010f90:	0801105d 	.word	0x0801105d
 8010f94:	0801107f 	.word	0x0801107f
 8010f98:	08011091 	.word	0x08011091
 8010f9c:	080110a3 	.word	0x080110a3
 8010fa0:	080110b5 	.word	0x080110b5
 8010fa4:	080110e9 	.word	0x080110e9
 8010fa8:	080110c7 	.word	0x080110c7
 8010fac:	0801110b 	.word	0x0801110b
 8010fb0:	08011117 	.word	0x08011117
 8010fb4:	08011121 	.word	0x08011121
 8010fb8:	0801112b 	.word	0x0801112b
 8010fbc:	08011135 	.word	0x08011135
 8010fc0:	0801113f 	.word	0x0801113f
 8010fc4:	08011149 	.word	0x08011149
 8010fc8:	08011155 	.word	0x08011155
 8010fcc:	0801116d 	.word	0x0801116d
 8010fd0:	08011161 	.word	0x08011161
 8010fd4:	08011179 	.word	0x08011179
 8010fd8:	08011183 	.word	0x08011183
 8010fdc:	0801118f 	.word	0x0801118f
 8010fe0:	080111a5 	.word	0x080111a5
 8010fe4:	08011199 	.word	0x08011199
 8010fe8:	080111c5 	.word	0x080111c5
 8010fec:	080111b1 	.word	0x080111b1
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010ff0:	4b7a      	ldr	r3, [pc, #488]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ff2:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	711a      	strb	r2, [r3, #4]
            break;
 8010ffa:	e0e9      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010ffc:	4b77      	ldr	r3, [pc, #476]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8010ffe:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	711a      	strb	r2, [r3, #4]
            break;
 8011006:	e0e3      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011008:	f7fb f88e 	bl	800c128 <SecureElementGetDevEui>
 801100c:	4602      	mov	r2, r0
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	605a      	str	r2, [r3, #4]
            break;
 8011012:	e0dd      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011014:	f7fb f8aa 	bl	800c16c <SecureElementGetJoinEui>
 8011018:	4602      	mov	r2, r0
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	605a      	str	r2, [r3, #4]
            break;
 801101e:	e0d7      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011020:	4b6e      	ldr	r3, [pc, #440]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011022:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	711a      	strb	r2, [r3, #4]
            break;
 801102a:	e0d1      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801102c:	4b6b      	ldr	r3, [pc, #428]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801102e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	605a      	str	r2, [r3, #4]
            break;
 8011036:	e0cb      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011038:	4b68      	ldr	r3, [pc, #416]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801103a:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	605a      	str	r2, [r3, #4]
            break;
 8011042:	e0c5      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011044:	4b65      	ldr	r3, [pc, #404]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011046:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	711a      	strb	r2, [r3, #4]
            break;
 801104e:	e0bf      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011050:	4b62      	ldr	r3, [pc, #392]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011052:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	711a      	strb	r2, [r3, #4]
            break;
 801105a:	e0b9      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801105c:	231d      	movs	r3, #29
 801105e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011060:	4b5e      	ldr	r3, [pc, #376]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011066:	f107 0210 	add.w	r2, r7, #16
 801106a:	4611      	mov	r1, r2
 801106c:	4618      	mov	r0, r3
 801106e:	f002 fe91 	bl	8013d94 <RegionGetPhyParam>
 8011072:	4603      	mov	r3, r0
 8011074:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	605a      	str	r2, [r3, #4]
            break;
 801107c:	e0a8      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	4a56      	ldr	r2, [pc, #344]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011082:	3304      	adds	r3, #4
 8011084:	3264      	adds	r2, #100	; 0x64
 8011086:	e892 0003 	ldmia.w	r2, {r0, r1}
 801108a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801108e:	e09f      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	4a52      	ldr	r2, [pc, #328]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011094:	3304      	adds	r3, #4
 8011096:	32a4      	adds	r2, #164	; 0xa4
 8011098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801109c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110a0:	e096      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4a4d      	ldr	r2, [pc, #308]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110a6:	3304      	adds	r3, #4
 80110a8:	326c      	adds	r2, #108	; 0x6c
 80110aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110ae:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110b2:	e08d      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4a49      	ldr	r2, [pc, #292]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110b8:	3304      	adds	r3, #4
 80110ba:	32ac      	adds	r2, #172	; 0xac
 80110bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110c0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80110c4:	e084      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80110c6:	231b      	movs	r3, #27
 80110c8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110ca:	4b44      	ldr	r3, [pc, #272]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110d0:	f107 0210 	add.w	r2, r7, #16
 80110d4:	4611      	mov	r1, r2
 80110d6:	4618      	mov	r0, r3
 80110d8:	f002 fe5c 	bl	8013d94 <RegionGetPhyParam>
 80110dc:	4603      	mov	r3, r0
 80110de:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	605a      	str	r2, [r3, #4]
            break;
 80110e6:	e073      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80110e8:	231a      	movs	r3, #26
 80110ea:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110ec:	4b3b      	ldr	r3, [pc, #236]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110f2:	f107 0210 	add.w	r2, r7, #16
 80110f6:	4611      	mov	r1, r2
 80110f8:	4618      	mov	r0, r3
 80110fa:	f002 fe4b 	bl	8013d94 <RegionGetPhyParam>
 80110fe:	4603      	mov	r3, r0
 8011100:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	605a      	str	r2, [r3, #4]
            break;
 8011108:	e062      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801110a:	4b34      	ldr	r3, [pc, #208]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801110c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	711a      	strb	r2, [r3, #4]
            break;
 8011114:	e05c      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011116:	4b31      	ldr	r3, [pc, #196]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	605a      	str	r2, [r3, #4]
            break;
 801111e:	e057      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011120:	4b2e      	ldr	r3, [pc, #184]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011122:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	605a      	str	r2, [r3, #4]
            break;
 8011128:	e052      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801112a:	4b2c      	ldr	r3, [pc, #176]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801112c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	605a      	str	r2, [r3, #4]
            break;
 8011132:	e04d      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011134:	4b29      	ldr	r3, [pc, #164]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	605a      	str	r2, [r3, #4]
            break;
 801113c:	e048      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801113e:	4b27      	ldr	r3, [pc, #156]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	605a      	str	r2, [r3, #4]
            break;
 8011146:	e043      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011148:	4b24      	ldr	r3, [pc, #144]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801114a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	711a      	strb	r2, [r3, #4]
            break;
 8011152:	e03d      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011154:	4b21      	ldr	r3, [pc, #132]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011156:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	711a      	strb	r2, [r3, #4]
            break;
 801115e:	e037      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011160:	4b1e      	ldr	r3, [pc, #120]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011162:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	711a      	strb	r2, [r3, #4]
            break;
 801116a:	e031      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801116c:	4b1b      	ldr	r3, [pc, #108]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801116e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	711a      	strb	r2, [r3, #4]
            break;
 8011176:	e02b      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011178:	4b18      	ldr	r3, [pc, #96]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 801117a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	605a      	str	r2, [r3, #4]
            break;
 8011180:	e026      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011182:	4b16      	ldr	r3, [pc, #88]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011184:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	711a      	strb	r2, [r3, #4]
            break;
 801118c:	e020      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011190:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	605a      	str	r2, [r3, #4]
            break;
 8011196:	e01b      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8011198:	f7ff f934 	bl	8010404 <GetNvmData>
 801119c:	4602      	mov	r2, r0
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	605a      	str	r2, [r3, #4]
            break;
 80111a2:	e015      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80111a4:	4b0d      	ldr	r3, [pc, #52]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	605a      	str	r2, [r3, #4]
            break;
 80111ae:	e00f      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a0a      	ldr	r2, [pc, #40]	; (80111dc <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111b4:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80111b8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80111ba:	687c      	ldr	r4, [r7, #4]
 80111bc:	f002 ff74 	bl	80140a8 <RegionGetVersion>
 80111c0:	60a0      	str	r0, [r4, #8]
            break;
 80111c2:	e005      	b.n	80111d0 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f000 fefd 	bl	8011fc4 <LoRaMacClassBMibGetRequestConfirm>
 80111ca:	4603      	mov	r3, r0
 80111cc:	75fb      	strb	r3, [r7, #23]
            break;
 80111ce:	bf00      	nop
        }
    }
    return status;
 80111d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	371c      	adds	r7, #28
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd90      	pop	{r4, r7, pc}
 80111da:	bf00      	nop
 80111dc:	20000a4c 	.word	0x20000a4c

080111e0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80111e8:	2300      	movs	r3, #0
 80111ea:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d101      	bne.n	80111f6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80111f2:	2303      	movs	r3, #3
 80111f4:	e32b      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80111f6:	4bbe      	ldr	r3, [pc, #760]	; (80114f0 <LoRaMacMibSetRequestConfirm+0x310>)
 80111f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80111fc:	f003 0302 	and.w	r3, r3, #2
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011204:	2301      	movs	r3, #1
 8011206:	e322      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	2b27      	cmp	r3, #39	; 0x27
 801120e:	f200 82fc 	bhi.w	801180a <LoRaMacMibSetRequestConfirm+0x62a>
 8011212:	a201      	add	r2, pc, #4	; (adr r2, 8011218 <LoRaMacMibSetRequestConfirm+0x38>)
 8011214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011218:	080112b9 	.word	0x080112b9
 801121c:	080112c9 	.word	0x080112c9
 8011220:	080112e3 	.word	0x080112e3
 8011224:	080112fb 	.word	0x080112fb
 8011228:	08011313 	.word	0x08011313
 801122c:	0801131f 	.word	0x0801131f
 8011230:	0801132b 	.word	0x0801132b
 8011234:	08011337 	.word	0x08011337
 8011238:	0801135d 	.word	0x0801135d
 801123c:	08011383 	.word	0x08011383
 8011240:	080113a9 	.word	0x080113a9
 8011244:	080113cf 	.word	0x080113cf
 8011248:	080113f5 	.word	0x080113f5
 801124c:	0801141b 	.word	0x0801141b
 8011250:	08011441 	.word	0x08011441
 8011254:	08011467 	.word	0x08011467
 8011258:	08011487 	.word	0x08011487
 801125c:	0801180b 	.word	0x0801180b
 8011260:	08011493 	.word	0x08011493
 8011264:	0801150f 	.word	0x0801150f
 8011268:	0801154f 	.word	0x0801154f
 801126c:	080115b1 	.word	0x080115b1
 8011270:	08011621 	.word	0x08011621
 8011274:	080115f1 	.word	0x080115f1
 8011278:	08011651 	.word	0x08011651
 801127c:	08011673 	.word	0x08011673
 8011280:	0801167d 	.word	0x0801167d
 8011284:	08011687 	.word	0x08011687
 8011288:	08011691 	.word	0x08011691
 801128c:	0801169b 	.word	0x0801169b
 8011290:	080116a5 	.word	0x080116a5
 8011294:	080116d7 	.word	0x080116d7
 8011298:	08011743 	.word	0x08011743
 801129c:	08011711 	.word	0x08011711
 80112a0:	08011775 	.word	0x08011775
 80112a4:	0801178b 	.word	0x0801178b
 80112a8:	080117a3 	.word	0x080117a3
 80112ac:	080117ad 	.word	0x080117ad
 80112b0:	080117b9 	.word	0x080117b9
 80112b4:	080117e1 	.word	0x080117e1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	791b      	ldrb	r3, [r3, #4]
 80112bc:	4618      	mov	r0, r3
 80112be:	f7fd fbfb 	bl	800eab8 <SwitchClass>
 80112c2:	4603      	mov	r3, r0
 80112c4:	75fb      	strb	r3, [r7, #23]
            break;
 80112c6:	e2c1      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	791b      	ldrb	r3, [r3, #4]
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d005      	beq.n	80112dc <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	791a      	ldrb	r2, [r3, #4]
 80112d4:	4b87      	ldr	r3, [pc, #540]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 80112d6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80112da:	e2b7      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112dc:	2303      	movs	r3, #3
 80112de:	75fb      	strb	r3, [r7, #23]
            break;
 80112e0:	e2b4      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fa ff06 	bl	800c0f8 <SecureElementSetDevEui>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f000 8291 	beq.w	8011816 <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112f4:	2303      	movs	r3, #3
 80112f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80112f8:	e28d      	b.n	8011816 <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fa ff1c 	bl	800c13c <SecureElementSetJoinEui>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	f000 8287 	beq.w	801181a <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801130c:	2303      	movs	r3, #3
 801130e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011310:	e283      	b.n	801181a <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	791a      	ldrb	r2, [r3, #4]
 8011316:	4b77      	ldr	r3, [pc, #476]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 8011318:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 801131c:	e296      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	4a74      	ldr	r2, [pc, #464]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 8011324:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8011328:	e290      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	4a71      	ldr	r2, [pc, #452]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 8011330:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8011334:	e28a      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00b      	beq.n	8011356 <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	4619      	mov	r1, r3
 8011344:	2000      	movs	r0, #0
 8011346:	f001 ff35 	bl	80131b4 <LoRaMacCryptoSetKey>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	f000 8266 	beq.w	801181e <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011352:	2311      	movs	r3, #17
 8011354:	e27b      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011356:	2303      	movs	r3, #3
 8011358:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801135a:	e260      	b.n	801181e <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d00b      	beq.n	801137c <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	4619      	mov	r1, r3
 801136a:	2001      	movs	r0, #1
 801136c:	f001 ff22 	bl	80131b4 <LoRaMacCryptoSetKey>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 8255 	beq.w	8011822 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011378:	2311      	movs	r3, #17
 801137a:	e268      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801137c:	2303      	movs	r3, #3
 801137e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011380:	e24f      	b.n	8011822 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00b      	beq.n	80113a2 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	4619      	mov	r1, r3
 8011390:	2002      	movs	r0, #2
 8011392:	f001 ff0f 	bl	80131b4 <LoRaMacCryptoSetKey>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 8244 	beq.w	8011826 <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801139e:	2311      	movs	r3, #17
 80113a0:	e255      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113a2:	2303      	movs	r3, #3
 80113a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113a6:	e23e      	b.n	8011826 <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d00b      	beq.n	80113c8 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	4619      	mov	r1, r3
 80113b6:	2003      	movs	r0, #3
 80113b8:	f001 fefc 	bl	80131b4 <LoRaMacCryptoSetKey>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 8233 	beq.w	801182a <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113c4:	2311      	movs	r3, #17
 80113c6:	e242      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113c8:	2303      	movs	r3, #3
 80113ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113cc:	e22d      	b.n	801182a <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00b      	beq.n	80113ee <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	4619      	mov	r1, r3
 80113dc:	207f      	movs	r0, #127	; 0x7f
 80113de:	f001 fee9 	bl	80131b4 <LoRaMacCryptoSetKey>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	f000 8222 	beq.w	801182e <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80113ea:	2311      	movs	r3, #17
 80113ec:	e22f      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113ee:	2303      	movs	r3, #3
 80113f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113f2:	e21c      	b.n	801182e <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00b      	beq.n	8011414 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	685b      	ldr	r3, [r3, #4]
 8011400:	4619      	mov	r1, r3
 8011402:	2080      	movs	r0, #128	; 0x80
 8011404:	f001 fed6 	bl	80131b4 <LoRaMacCryptoSetKey>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	f000 8211 	beq.w	8011832 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011410:	2311      	movs	r3, #17
 8011412:	e21c      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011414:	2303      	movs	r3, #3
 8011416:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011418:	e20b      	b.n	8011832 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00b      	beq.n	801143a <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	4619      	mov	r1, r3
 8011428:	2081      	movs	r0, #129	; 0x81
 801142a:	f001 fec3 	bl	80131b4 <LoRaMacCryptoSetKey>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	f000 8200 	beq.w	8011836 <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011436:	2311      	movs	r3, #17
 8011438:	e209      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801143a:	2303      	movs	r3, #3
 801143c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801143e:	e1fa      	b.n	8011836 <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d00b      	beq.n	8011460 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	4619      	mov	r1, r3
 801144e:	2082      	movs	r0, #130	; 0x82
 8011450:	f001 feb0 	bl	80131b4 <LoRaMacCryptoSetKey>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	f000 81ef 	beq.w	801183a <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801145c:	2311      	movs	r3, #17
 801145e:	e1f6      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011460:	2303      	movs	r3, #3
 8011462:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011464:	e1e9      	b.n	801183a <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	791a      	ldrb	r2, [r3, #4]
 801146a:	4b22      	ldr	r3, [pc, #136]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 801146c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011470:	4b21      	ldr	r3, [pc, #132]	; (80114f8 <LoRaMacMibSetRequestConfirm+0x318>)
 8011472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011474:	4a1f      	ldr	r2, [pc, #124]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 8011476:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801147a:	4610      	mov	r0, r2
 801147c:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801147e:	4b1e      	ldr	r3, [pc, #120]	; (80114f8 <LoRaMacMibSetRequestConfirm+0x318>)
 8011480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011482:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011484:	e1e2      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	791a      	ldrb	r2, [r3, #4]
 801148a:	4b1a      	ldr	r3, [pc, #104]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 801148c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011490:	e1dc      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	7a1b      	ldrb	r3, [r3, #8]
 8011496:	b25b      	sxtb	r3, r3
 8011498:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801149a:	4b16      	ldr	r3, [pc, #88]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 801149c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80114a0:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80114a2:	4b14      	ldr	r3, [pc, #80]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 80114a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114a8:	f107 0108 	add.w	r1, r7, #8
 80114ac:	2207      	movs	r2, #7
 80114ae:	4618      	mov	r0, r3
 80114b0:	f002 fcac 	bl	8013e0c <RegionVerify>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f083 0301 	eor.w	r3, r3, #1
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114c0:	2303      	movs	r3, #3
 80114c2:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80114c4:	e1c2      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80114cc:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <LoRaMacMibSetRequestConfirm+0x314>)
 80114ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114d2:	f107 0108 	add.w	r1, r7, #8
 80114d6:	2200      	movs	r2, #0
 80114d8:	4618      	mov	r0, r3
 80114da:	f002 fc97 	bl	8013e0c <RegionVerify>
 80114de:	4603      	mov	r3, r0
 80114e0:	f083 0301 	eor.w	r3, r3, #1
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d008      	beq.n	80114fc <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114ea:	2303      	movs	r3, #3
 80114ec:	75fb      	strb	r3, [r7, #23]
            break;
 80114ee:	e1ad      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
 80114f0:	20000544 	.word	0x20000544
 80114f4:	20000a4c 	.word	0x20000a4c
 80114f8:	0801bbc4 	.word	0x0801bbc4
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80114fc:	4bb6      	ldr	r3, [pc, #728]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	3364      	adds	r3, #100	; 0x64
 8011502:	3204      	adds	r2, #4
 8011504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011508:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801150c:	e19e      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7a1b      	ldrb	r3, [r3, #8]
 8011512:	b25b      	sxtb	r3, r3
 8011514:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011516:	4bb0      	ldr	r3, [pc, #704]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011518:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801151c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801151e:	4bae      	ldr	r3, [pc, #696]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011524:	f107 0108 	add.w	r1, r7, #8
 8011528:	2207      	movs	r2, #7
 801152a:	4618      	mov	r0, r3
 801152c:	f002 fc6e 	bl	8013e0c <RegionVerify>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d008      	beq.n	8011548 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011536:	4ba8      	ldr	r3, [pc, #672]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	33a4      	adds	r3, #164	; 0xa4
 801153c:	3204      	adds	r2, #4
 801153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011542:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011546:	e181      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011548:	2303      	movs	r3, #3
 801154a:	75fb      	strb	r3, [r7, #23]
            break;
 801154c:	e17e      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	7a1b      	ldrb	r3, [r3, #8]
 8011552:	b25b      	sxtb	r3, r3
 8011554:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011556:	4ba0      	ldr	r3, [pc, #640]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011558:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801155c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801155e:	4b9e      	ldr	r3, [pc, #632]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011564:	f107 0108 	add.w	r1, r7, #8
 8011568:	2207      	movs	r2, #7
 801156a:	4618      	mov	r0, r3
 801156c:	f002 fc4e 	bl	8013e0c <RegionVerify>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d019      	beq.n	80115aa <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011576:	4b98      	ldr	r3, [pc, #608]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	336c      	adds	r3, #108	; 0x6c
 801157c:	3204      	adds	r2, #4
 801157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011582:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011586:	4b94      	ldr	r3, [pc, #592]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011588:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801158c:	2b02      	cmp	r3, #2
 801158e:	f040 8156 	bne.w	801183e <LoRaMacMibSetRequestConfirm+0x65e>
 8011592:	4b91      	ldr	r3, [pc, #580]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011594:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 8150 	beq.w	801183e <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801159e:	4b8f      	ldr	r3, [pc, #572]	; (80117dc <LoRaMacMibSetRequestConfirm+0x5fc>)
 80115a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a2:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80115a4:	f7fe fcda 	bl	800ff5c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115a8:	e149      	b.n	801183e <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115aa:	2303      	movs	r3, #3
 80115ac:	75fb      	strb	r3, [r7, #23]
            break;
 80115ae:	e146      	b.n	801183e <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	7a1b      	ldrb	r3, [r3, #8]
 80115b4:	b25b      	sxtb	r3, r3
 80115b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115b8:	4b87      	ldr	r3, [pc, #540]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115ba:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115be:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115c0:	4b85      	ldr	r3, [pc, #532]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115c6:	f107 0108 	add.w	r1, r7, #8
 80115ca:	2207      	movs	r2, #7
 80115cc:	4618      	mov	r0, r3
 80115ce:	f002 fc1d 	bl	8013e0c <RegionVerify>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d008      	beq.n	80115ea <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80115d8:	4b7f      	ldr	r3, [pc, #508]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	33ac      	adds	r3, #172	; 0xac
 80115de:	3204      	adds	r2, #4
 80115e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115e4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115e8:	e130      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115ea:	2303      	movs	r3, #3
 80115ec:	75fb      	strb	r3, [r7, #23]
            break;
 80115ee:	e12d      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80115f6:	2301      	movs	r3, #1
 80115f8:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80115fa:	4b77      	ldr	r3, [pc, #476]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011600:	f107 020c 	add.w	r2, r7, #12
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f002 fc29 	bl	8013e5e <RegionChanMaskSet>
 801160c:	4603      	mov	r3, r0
 801160e:	f083 0301 	eor.w	r3, r3, #1
 8011612:	b2db      	uxtb	r3, r3
 8011614:	2b00      	cmp	r3, #0
 8011616:	f000 8114 	beq.w	8011842 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801161a:	2303      	movs	r3, #3
 801161c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801161e:	e110      	b.n	8011842 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011626:	2300      	movs	r3, #0
 8011628:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801162a:	4b6b      	ldr	r3, [pc, #428]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801162c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011630:	f107 020c 	add.w	r2, r7, #12
 8011634:	4611      	mov	r1, r2
 8011636:	4618      	mov	r0, r3
 8011638:	f002 fc11 	bl	8013e5e <RegionChanMaskSet>
 801163c:	4603      	mov	r3, r0
 801163e:	f083 0301 	eor.w	r3, r3, #1
 8011642:	b2db      	uxtb	r3, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	f000 80fe 	beq.w	8011846 <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801164a:	2303      	movs	r3, #3
 801164c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801164e:	e0fa      	b.n	8011846 <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	791b      	ldrb	r3, [r3, #4]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d009      	beq.n	801166c <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801165c:	2b0f      	cmp	r3, #15
 801165e:	d805      	bhi.n	801166c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	791a      	ldrb	r2, [r3, #4]
 8011664:	4b5c      	ldr	r3, [pc, #368]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011666:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801166a:	e0ef      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801166c:	2303      	movs	r3, #3
 801166e:	75fb      	strb	r3, [r7, #23]
            break;
 8011670:	e0ec      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	4a58      	ldr	r2, [pc, #352]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011678:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801167a:	e0e7      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	4a55      	ldr	r2, [pc, #340]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011682:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011684:	e0e2      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	4a53      	ldr	r2, [pc, #332]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801168c:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801168e:	e0dd      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	4a50      	ldr	r2, [pc, #320]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011696:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011698:	e0d8      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	4a4e      	ldr	r2, [pc, #312]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116a0:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80116a2:	e0d3      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80116aa:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80116ac:	4b4a      	ldr	r3, [pc, #296]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116b2:	f107 0108 	add.w	r1, r7, #8
 80116b6:	2206      	movs	r2, #6
 80116b8:	4618      	mov	r0, r3
 80116ba:	f002 fba7 	bl	8013e0c <RegionVerify>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d005      	beq.n	80116d0 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80116c4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80116c8:	4b43      	ldr	r3, [pc, #268]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116ca:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116ce:	e0bd      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116d0:	2303      	movs	r3, #3
 80116d2:	75fb      	strb	r3, [r7, #23]
            break;
 80116d4:	e0ba      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80116dc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80116de:	4b3e      	ldr	r3, [pc, #248]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80116e4:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80116e6:	4b3c      	ldr	r3, [pc, #240]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116ec:	f107 0108 	add.w	r1, r7, #8
 80116f0:	2205      	movs	r2, #5
 80116f2:	4618      	mov	r0, r3
 80116f4:	f002 fb8a 	bl	8013e0c <RegionVerify>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d005      	beq.n	801170a <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80116fe:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011702:	4b35      	ldr	r3, [pc, #212]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011708:	e0a0      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801170a:	2303      	movs	r3, #3
 801170c:	75fb      	strb	r3, [r7, #23]
            break;
 801170e:	e09d      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011716:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011718:	4b2f      	ldr	r3, [pc, #188]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801171a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801171e:	f107 0108 	add.w	r1, r7, #8
 8011722:	220a      	movs	r2, #10
 8011724:	4618      	mov	r0, r3
 8011726:	f002 fb71 	bl	8013e0c <RegionVerify>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d005      	beq.n	801173c <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011730:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011734:	4b28      	ldr	r3, [pc, #160]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011736:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801173a:	e087      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801173c:	2303      	movs	r3, #3
 801173e:	75fb      	strb	r3, [r7, #23]
            break;
 8011740:	e084      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011748:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801174a:	4b23      	ldr	r3, [pc, #140]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801174c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011750:	f107 0108 	add.w	r1, r7, #8
 8011754:	2209      	movs	r2, #9
 8011756:	4618      	mov	r0, r3
 8011758:	f002 fb58 	bl	8013e0c <RegionVerify>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d005      	beq.n	801176e <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011762:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011766:	4b1c      	ldr	r3, [pc, #112]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801176c:	e06e      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801176e:	2303      	movs	r3, #3
 8011770:	75fb      	strb	r3, [r7, #23]
            break;
 8011772:	e06b      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	4a17      	ldr	r2, [pc, #92]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801177a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 801177e:	4b16      	ldr	r3, [pc, #88]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011784:	4a14      	ldr	r2, [pc, #80]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011786:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011788:	e060      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	791a      	ldrb	r2, [r3, #4]
 801178e:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011790:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011794:	4b10      	ldr	r3, [pc, #64]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011796:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801179a:	4b0f      	ldr	r3, [pc, #60]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801179c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80117a0:	e054      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	4a0c      	ldr	r2, [pc, #48]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117a8:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80117aa:	e04f      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	4a09      	ldr	r2, [pc, #36]	; (80117d8 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117b2:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 80117b6:	e049      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d007      	beq.n	80117d0 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fe fe27 	bl	8010418 <RestoreNvmData>
 80117ca:	4603      	mov	r3, r0
 80117cc:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117ce:	e03d      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117d0:	2303      	movs	r3, #3
 80117d2:	75fb      	strb	r3, [r7, #23]
            break;
 80117d4:	e03a      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
 80117d6:	bf00      	nop
 80117d8:	20000a4c 	.word	0x20000a4c
 80117dc:	0801bbc4 	.word	0x0801bbc4
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	799b      	ldrb	r3, [r3, #6]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d80d      	bhi.n	8011804 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80117e8:	4a1b      	ldr	r2, [pc, #108]	; (8011858 <LoRaMacMibSetRequestConfirm+0x678>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6858      	ldr	r0, [r3, #4]
 80117f6:	f001 fc23 	bl	8013040 <LoRaMacCryptoSetLrWanVersion>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d024      	beq.n	801184a <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011800:	2311      	movs	r3, #17
 8011802:	e024      	b.n	801184e <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011804:	2303      	movs	r3, #3
 8011806:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011808:	e01f      	b.n	801184a <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fbe4 	bl	8011fd8 <LoRaMacMibClassBSetRequestConfirm>
 8011810:	4603      	mov	r3, r0
 8011812:	75fb      	strb	r3, [r7, #23]
            break;
 8011814:	e01a      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011816:	bf00      	nop
 8011818:	e018      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801181a:	bf00      	nop
 801181c:	e016      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801181e:	bf00      	nop
 8011820:	e014      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011822:	bf00      	nop
 8011824:	e012      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011826:	bf00      	nop
 8011828:	e010      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801182a:	bf00      	nop
 801182c:	e00e      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801182e:	bf00      	nop
 8011830:	e00c      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011832:	bf00      	nop
 8011834:	e00a      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011836:	bf00      	nop
 8011838:	e008      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801183a:	bf00      	nop
 801183c:	e006      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801183e:	bf00      	nop
 8011840:	e004      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011842:	bf00      	nop
 8011844:	e002      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011846:	bf00      	nop
 8011848:	e000      	b.n	801184c <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801184a:	bf00      	nop
        }
    }
    return status;
 801184c:	7dfb      	ldrb	r3, [r7, #23]
}
 801184e:	4618      	mov	r0, r3
 8011850:	3718      	adds	r7, #24
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20000a4c 	.word	0x20000a4c

0801185c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b086      	sub	sp, #24
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011864:	2302      	movs	r3, #2
 8011866:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011868:	2300      	movs	r3, #0
 801186a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d101      	bne.n	8011876 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011872:	2303      	movs	r3, #3
 8011874:	e127      	b.n	8011ac6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 8011876:	f7fc fd23 	bl	800e2c0 <LoRaMacIsBusy>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d001      	beq.n	8011884 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011880:	2301      	movs	r3, #1
 8011882:	e120      	b.n	8011ac6 <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011884:	f001 f8a6 	bl	80129d4 <LoRaMacConfirmQueueIsFull>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d001      	beq.n	8011892 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801188e:	2301      	movs	r3, #1
 8011890:	e119      	b.n	8011ac6 <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011892:	f001 f893 	bl	80129bc <LoRaMacConfirmQueueGetCnt>
 8011896:	4603      	mov	r3, r0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d104      	bne.n	80118a6 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801189c:	2214      	movs	r2, #20
 801189e:	2100      	movs	r1, #0
 80118a0:	488b      	ldr	r0, [pc, #556]	; (8011ad0 <LoRaMacMlmeRequest+0x274>)
 80118a2:	f004 fdbd 	bl	8016420 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118a6:	4b8b      	ldr	r3, [pc, #556]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 80118a8:	2201      	movs	r2, #1
 80118aa:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80118ae:	4a89      	ldr	r2, [pc, #548]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 80118b0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118b4:	f043 0304 	orr.w	r3, r3, #4
 80118b8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118c2:	2301      	movs	r3, #1
 80118c4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80118c6:	2300      	movs	r3, #0
 80118c8:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	3b01      	subs	r3, #1
 80118d0:	2b0d      	cmp	r3, #13
 80118d2:	f200 80ce 	bhi.w	8011a72 <LoRaMacMlmeRequest+0x216>
 80118d6:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <LoRaMacMlmeRequest+0x80>)
 80118d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118dc:	08011915 	.word	0x08011915
 80118e0:	08011a73 	.word	0x08011a73
 80118e4:	08011a73 	.word	0x08011a73
 80118e8:	0801197f 	.word	0x0801197f
 80118ec:	0801199d 	.word	0x0801199d
 80118f0:	080119ad 	.word	0x080119ad
 80118f4:	08011a73 	.word	0x08011a73
 80118f8:	08011a73 	.word	0x08011a73
 80118fc:	08011a73 	.word	0x08011a73
 8011900:	080119c9 	.word	0x080119c9
 8011904:	08011a73 	.word	0x08011a73
 8011908:	08011a47 	.word	0x08011a47
 801190c:	080119e7 	.word	0x080119e7
 8011910:	08011a29 	.word	0x08011a29
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011914:	4b6f      	ldr	r3, [pc, #444]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 8011916:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801191a:	f003 0320 	and.w	r3, r3, #32
 801191e:	2b00      	cmp	r3, #0
 8011920:	d001      	beq.n	8011926 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011922:	2301      	movs	r3, #1
 8011924:	e0cf      	b.n	8011ac6 <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 8011926:	f7fe f9fd 	bl	800fd24 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801192a:	4b6b      	ldr	r3, [pc, #428]	; (8011ad8 <LoRaMacMlmeRequest+0x27c>)
 801192c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	791b      	ldrb	r3, [r3, #4]
 8011934:	b25b      	sxtb	r3, r3
 8011936:	2200      	movs	r2, #0
 8011938:	4619      	mov	r1, r3
 801193a:	f002 fb4f 	bl	8013fdc <RegionAlternateDr>
 801193e:	4603      	mov	r3, r0
 8011940:	461a      	mov	r2, r3
 8011942:	4b65      	ldr	r3, [pc, #404]	; (8011ad8 <LoRaMacMlmeRequest+0x27c>)
 8011944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011948:	2307      	movs	r3, #7
 801194a:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801194c:	20ff      	movs	r0, #255	; 0xff
 801194e:	f7fd ff61 	bl	800f814 <SendReJoinReq>
 8011952:	4603      	mov	r3, r0
 8011954:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011956:	7dfb      	ldrb	r3, [r7, #23]
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 808c 	beq.w	8011a76 <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801195e:	4b5e      	ldr	r3, [pc, #376]	; (8011ad8 <LoRaMacMlmeRequest+0x27c>)
 8011960:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	791b      	ldrb	r3, [r3, #4]
 8011968:	b25b      	sxtb	r3, r3
 801196a:	2201      	movs	r2, #1
 801196c:	4619      	mov	r1, r3
 801196e:	f002 fb35 	bl	8013fdc <RegionAlternateDr>
 8011972:	4603      	mov	r3, r0
 8011974:	461a      	mov	r2, r3
 8011976:	4b58      	ldr	r3, [pc, #352]	; (8011ad8 <LoRaMacMlmeRequest+0x27c>)
 8011978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 801197c:	e07b      	b.n	8011a76 <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801197e:	2300      	movs	r3, #0
 8011980:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011982:	f107 030c 	add.w	r3, r7, #12
 8011986:	2200      	movs	r2, #0
 8011988:	4619      	mov	r1, r3
 801198a:	2002      	movs	r0, #2
 801198c:	f000 fc88 	bl	80122a0 <LoRaMacCommandsAddCmd>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d071      	beq.n	8011a7a <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011996:	2313      	movs	r3, #19
 8011998:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801199a:	e06e      	b.n	8011a7a <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	889b      	ldrh	r3, [r3, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fe fcdb 	bl	801035c <SetTxContinuousWave>
 80119a6:	4603      	mov	r3, r0
 80119a8:	75fb      	strb	r3, [r7, #23]
            break;
 80119aa:	e06d      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	8898      	ldrh	r0, [r3, #4]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6899      	ldr	r1, [r3, #8]
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80119ba:	b2db      	uxtb	r3, r3
 80119bc:	461a      	mov	r2, r3
 80119be:	f7fe fd01 	bl	80103c4 <SetTxContinuousWave1>
 80119c2:	4603      	mov	r3, r0
 80119c4:	75fb      	strb	r3, [r7, #23]
            break;
 80119c6:	e05f      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80119c8:	2300      	movs	r3, #0
 80119ca:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80119cc:	f107 030c 	add.w	r3, r7, #12
 80119d0:	2200      	movs	r2, #0
 80119d2:	4619      	mov	r1, r3
 80119d4:	200d      	movs	r0, #13
 80119d6:	f000 fc63 	bl	80122a0 <LoRaMacCommandsAddCmd>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d04e      	beq.n	8011a7e <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80119e0:	2313      	movs	r3, #19
 80119e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119e4:	e04b      	b.n	8011a7e <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80119e6:	4b3c      	ldr	r3, [pc, #240]	; (8011ad8 <LoRaMacMlmeRequest+0x27c>)
 80119e8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d148      	bne.n	8011a82 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	791b      	ldrb	r3, [r3, #4]
 80119f4:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	791b      	ldrb	r3, [r3, #4]
 80119fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 fabe 	bl	8011f82 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011a06:	7dbb      	ldrb	r3, [r7, #22]
 8011a08:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a0e:	f107 030c 	add.w	r3, r7, #12
 8011a12:	2201      	movs	r2, #1
 8011a14:	4619      	mov	r1, r3
 8011a16:	2010      	movs	r0, #16
 8011a18:	f000 fc42 	bl	80122a0 <LoRaMacCommandsAddCmd>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d02f      	beq.n	8011a82 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a22:	2313      	movs	r3, #19
 8011a24:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011a26:	e02c      	b.n	8011a82 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a2c:	f107 030c 	add.w	r3, r7, #12
 8011a30:	2200      	movs	r2, #0
 8011a32:	4619      	mov	r1, r3
 8011a34:	2012      	movs	r0, #18
 8011a36:	f000 fc33 	bl	80122a0 <LoRaMacCommandsAddCmd>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d022      	beq.n	8011a86 <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a40:	2313      	movs	r3, #19
 8011a42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a44:	e01f      	b.n	8011a86 <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011a46:	2301      	movs	r3, #1
 8011a48:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011a4a:	f000 fa50 	bl	8011eee <LoRaMacClassBIsAcquisitionInProgress>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	f083 0301 	eor.w	r3, r3, #1
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d008      	beq.n	8011a6c <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f000 fa29 	bl	8011eb2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011a60:	2000      	movs	r0, #0
 8011a62:	f000 fa4b 	bl	8011efc <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011a66:	2300      	movs	r3, #0
 8011a68:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011a6a:	e00d      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	75fb      	strb	r3, [r7, #23]
            break;
 8011a70:	e00a      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011a72:	bf00      	nop
 8011a74:	e008      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a76:	bf00      	nop
 8011a78:	e006      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a7a:	bf00      	nop
 8011a7c:	e004      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a7e:	bf00      	nop
 8011a80:	e002      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a82:	bf00      	nop
 8011a84:	e000      	b.n	8011a88 <LoRaMacMlmeRequest+0x22c>
            break;
 8011a86:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011a88:	4b12      	ldr	r3, [pc, #72]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 8011a8a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011a92:	7dfb      	ldrb	r3, [r7, #23]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d010      	beq.n	8011aba <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011a98:	f000 ff90 	bl	80129bc <LoRaMacConfirmQueueGetCnt>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d110      	bne.n	8011ac4 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011aa2:	4b0c      	ldr	r3, [pc, #48]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011aaa:	4a0a      	ldr	r2, [pc, #40]	; (8011ad4 <LoRaMacMlmeRequest+0x278>)
 8011aac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ab0:	f36f 0382 	bfc	r3, #2, #1
 8011ab4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011ab8:	e004      	b.n	8011ac4 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011aba:	f107 0310 	add.w	r3, r7, #16
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f000 fe2e 	bl	8012720 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3718      	adds	r7, #24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	20000990 	.word	0x20000990
 8011ad4:	20000544 	.word	0x20000544
 8011ad8:	20000a4c 	.word	0x20000a4c

08011adc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08c      	sub	sp, #48	; 0x30
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ae8:	2302      	movs	r3, #2
 8011aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011af4:	2300      	movs	r3, #0
 8011af6:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011af8:	2300      	movs	r3, #0
 8011afa:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011afc:	2300      	movs	r3, #0
 8011afe:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d101      	bne.n	8011b0a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b06:	2303      	movs	r3, #3
 8011b08:	e0d4      	b.n	8011cb4 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011b0a:	f7fc fbd9 	bl	800e2c0 <LoRaMacIsBusy>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011b14:	2301      	movs	r3, #1
 8011b16:	e0cd      	b.n	8011cb4 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011b1c:	2214      	movs	r2, #20
 8011b1e:	2100      	movs	r1, #0
 8011b20:	4866      	ldr	r0, [pc, #408]	; (8011cbc <LoRaMacMcpsRequest+0x1e0>)
 8011b22:	f004 fc7d 	bl	8016420 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011b26:	4b66      	ldr	r3, [pc, #408]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011b28:	2201      	movs	r2, #1
 8011b2a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011b2e:	4b64      	ldr	r3, [pc, #400]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011b30:	2201      	movs	r2, #1
 8011b32:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d03d      	beq.n	8011bba <LoRaMacMcpsRequest+0xde>
 8011b3e:	2b03      	cmp	r3, #3
 8011b40:	dc4f      	bgt.n	8011be2 <LoRaMacMcpsRequest+0x106>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d002      	beq.n	8011b4c <LoRaMacMcpsRequest+0x70>
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d019      	beq.n	8011b7e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011b4a:	e04a      	b.n	8011be2 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011b50:	4b5b      	ldr	r3, [pc, #364]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011b52:	2201      	movs	r2, #1
 8011b54:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011b58:	7b3b      	ldrb	r3, [r7, #12]
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	f362 1347 	bfi	r3, r2, #5, #3
 8011b60:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	791b      	ldrb	r3, [r3, #4]
 8011b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	689b      	ldr	r3, [r3, #8]
 8011b6e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	899b      	ldrh	r3, [r3, #12]
 8011b74:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	7b9b      	ldrb	r3, [r3, #14]
 8011b7a:	777b      	strb	r3, [r7, #29]
            break;
 8011b7c:	e032      	b.n	8011be4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	7bdb      	ldrb	r3, [r3, #15]
 8011b86:	2b08      	cmp	r3, #8
 8011b88:	bf28      	it	cs
 8011b8a:	2308      	movcs	r3, #8
 8011b8c:	b2da      	uxtb	r2, r3
 8011b8e:	4b4c      	ldr	r3, [pc, #304]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011b90:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011b94:	7b3b      	ldrb	r3, [r7, #12]
 8011b96:	2204      	movs	r2, #4
 8011b98:	f362 1347 	bfi	r3, r2, #5, #3
 8011b9c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	791b      	ldrb	r3, [r3, #4]
 8011ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	689b      	ldr	r3, [r3, #8]
 8011baa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	899b      	ldrh	r3, [r3, #12]
 8011bb0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	7b9b      	ldrb	r3, [r3, #14]
 8011bb6:	777b      	strb	r3, [r7, #29]
            break;
 8011bb8:	e014      	b.n	8011be4 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011bbe:	4b40      	ldr	r3, [pc, #256]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011bc6:	7b3b      	ldrb	r3, [r7, #12]
 8011bc8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011bcc:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	891b      	ldrh	r3, [r3, #8]
 8011bd8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	7a9b      	ldrb	r3, [r3, #10]
 8011bde:	777b      	strb	r3, [r7, #29]
            break;
 8011be0:	e000      	b.n	8011be4 <LoRaMacMcpsRequest+0x108>
            break;
 8011be2:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011be4:	2302      	movs	r3, #2
 8011be6:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011be8:	4b36      	ldr	r3, [pc, #216]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011bea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011bee:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bf0:	4b34      	ldr	r3, [pc, #208]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bf6:	f107 0214 	add.w	r2, r7, #20
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f002 f8c9 	bl	8013d94 <RegionGetPhyParam>
 8011c02:	4603      	mov	r3, r0
 8011c04:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	b25b      	sxtb	r3, r3
 8011c0a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	bfb8      	it	lt
 8011c12:	4613      	movlt	r3, r2
 8011c14:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011c16:	7f3b      	ldrb	r3, [r7, #28]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d044      	beq.n	8011ca6 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011c1c:	4b29      	ldr	r3, [pc, #164]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011c1e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011c22:	f083 0301 	eor.w	r3, r3, #1
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d019      	beq.n	8011c60 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011c2c:	7f7b      	ldrb	r3, [r7, #29]
 8011c2e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011c30:	4b24      	ldr	r3, [pc, #144]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011c32:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011c36:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011c38:	4b22      	ldr	r3, [pc, #136]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c3e:	f107 0108 	add.w	r1, r7, #8
 8011c42:	2205      	movs	r2, #5
 8011c44:	4618      	mov	r0, r3
 8011c46:	f002 f8e1 	bl	8013e0c <RegionVerify>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d005      	beq.n	8011c5c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011c50:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c54:	4b1b      	ldr	r3, [pc, #108]	; (8011cc4 <LoRaMacMcpsRequest+0x1e8>)
 8011c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011c5a:	e001      	b.n	8011c60 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c5c:	2303      	movs	r3, #3
 8011c5e:	e029      	b.n	8011cb4 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011c60:	8bfa      	ldrh	r2, [r7, #30]
 8011c62:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011c66:	f107 000c 	add.w	r0, r7, #12
 8011c6a:	78fb      	ldrb	r3, [r7, #3]
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	6a3a      	ldr	r2, [r7, #32]
 8011c72:	f7fd fcef 	bl	800f654 <Send>
 8011c76:	4603      	mov	r3, r0
 8011c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d10c      	bne.n	8011c9e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	781a      	ldrb	r2, [r3, #0]
 8011c88:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011c8a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011c8e:	4a0c      	ldr	r2, [pc, #48]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011c90:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c94:	f043 0301 	orr.w	r3, r3, #1
 8011c98:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011c9c:	e003      	b.n	8011ca6 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011c9e:	4b08      	ldr	r3, [pc, #32]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011ca6:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <LoRaMacMcpsRequest+0x1e4>)
 8011ca8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	611a      	str	r2, [r3, #16]

    return status;
 8011cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3728      	adds	r7, #40	; 0x28
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	2000097c 	.word	0x2000097c
 8011cc0:	20000544 	.word	0x20000544
 8011cc4:	20000a4c 	.word	0x20000a4c

08011cc8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	4603      	mov	r3, r0
 8011cd0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011cd6:	4b0a      	ldr	r3, [pc, #40]	; (8011d00 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cdc:	f107 010c 	add.w	r1, r7, #12
 8011ce0:	220f      	movs	r2, #15
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f002 f892 	bl	8013e0c <RegionVerify>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d003      	beq.n	8011cf6 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011cee:	4a04      	ldr	r2, [pc, #16]	; (8011d00 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011cf0:	79fb      	ldrb	r3, [r7, #7]
 8011cf2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011cf6:	bf00      	nop
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	20000a4c 	.word	0x20000a4c

08011d04 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08c      	sub	sp, #48	; 0x30
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011d12:	2300      	movs	r3, #0
 8011d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	7c1b      	ldrb	r3, [r3, #16]
 8011d1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	7c5b      	ldrb	r3, [r3, #17]
 8011d24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	689a      	ldr	r2, [r3, #8]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	795b      	ldrb	r3, [r3, #5]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	f000 808b 	beq.w	8011e50 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	7c9b      	ldrb	r3, [r3, #18]
 8011d44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	7cdb      	ldrb	r3, [r3, #19]
 8011d4c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011d50:	4611      	mov	r1, r2
 8011d52:	4618      	mov	r0, r3
 8011d54:	f002 f81e 	bl	8013d94 <RegionGetPhyParam>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011d5c:	6a3b      	ldr	r3, [r7, #32]
 8011d5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011d62:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011d66:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011d6a:	4293      	cmp	r3, r2
 8011d6c:	bfb8      	it	lt
 8011d6e:	4613      	movlt	r3, r2
 8011d70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011d74:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011d78:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d106      	bne.n	8011d8e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	2200      	movs	r2, #0
 8011d84:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011d86:	2300      	movs	r3, #0
 8011d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011d8c:	e060      	b.n	8011e50 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	689b      	ldr	r3, [r3, #8]
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	8992      	ldrh	r2, [r2, #12]
 8011d96:	4293      	cmp	r3, r2
 8011d98:	d303      	bcc.n	8011da2 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011da0:	e002      	b.n	8011da8 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011da2:	2300      	movs	r3, #0
 8011da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	8992      	ldrh	r2, [r2, #12]
 8011db0:	4611      	mov	r1, r2
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	89d2      	ldrh	r2, [r2, #14]
 8011db6:	440a      	add	r2, r1
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d349      	bcc.n	8011e50 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011dbc:	2308      	movs	r3, #8
 8011dbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	7cdb      	ldrb	r3, [r3, #19]
 8011dc6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011dca:	4611      	mov	r1, r2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f001 ffe1 	bl	8013d94 <RegionGetPhyParam>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	689b      	ldr	r3, [r3, #8]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	89d2      	ldrh	r2, [r2, #14]
 8011de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8011de8:	fb02 f201 	mul.w	r2, r2, r1
 8011dec:	1a9b      	subs	r3, r3, r2
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d12e      	bne.n	8011e50 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011df2:	2322      	movs	r3, #34	; 0x22
 8011df4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011df8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011dfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	7c9b      	ldrb	r3, [r3, #18]
 8011e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	7cdb      	ldrb	r3, [r3, #19]
 8011e0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e10:	4611      	mov	r1, r2
 8011e12:	4618      	mov	r0, r3
 8011e14:	f001 ffbe 	bl	8013d94 <RegionGetPhyParam>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011e1c:	6a3b      	ldr	r3, [r7, #32]
 8011e1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011e22:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e26:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d110      	bne.n	8011e50 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	791b      	ldrb	r3, [r3, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d009      	beq.n	8011e50 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	7cdb      	ldrb	r3, [r3, #19]
 8011e44:	f107 0214 	add.w	r2, r7, #20
 8011e48:	4611      	mov	r1, r2
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f001 ffcc 	bl	8013de8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011e56:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e5e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3730      	adds	r7, #48	; 0x30
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
 8011e78:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	789b      	ldrb	r3, [r3, #2]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d107      	bne.n	8011e92 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	687a      	ldr	r2, [r7, #4]
 8011e86:	68b9      	ldr	r1, [r7, #8]
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f7ff ff3b 	bl	8011d04 <CalcNextV10X>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	e000      	b.n	8011e94 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011e92:	2300      	movs	r3, #0
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3710      	adds	r7, #16
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	b085      	sub	sp, #20
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ea8:	bf00      	nop
 8011eaa:	3714      	adds	r7, #20
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bc80      	pop	{r7}
 8011eb0:	4770      	bx	lr

08011eb2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011eb2:	b480      	push	{r7}
 8011eb4:	b083      	sub	sp, #12
 8011eb6:	af00      	add	r7, sp, #0
 8011eb8:	4603      	mov	r3, r0
 8011eba:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ebc:	bf00      	nop
 8011ebe:	370c      	adds	r7, #12
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bc80      	pop	{r7}
 8011ec4:	4770      	bx	lr

08011ec6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011ec6:	b480      	push	{r7}
 8011ec8:	b083      	sub	sp, #12
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	4603      	mov	r3, r0
 8011ece:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ed0:	bf00      	nop
 8011ed2:	370c      	adds	r7, #12
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bc80      	pop	{r7}
 8011ed8:	4770      	bx	lr

08011eda <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011eda:	b480      	push	{r7}
 8011edc:	b083      	sub	sp, #12
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ee4:	bf00      	nop
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bc80      	pop	{r7}
 8011eec:	4770      	bx	lr

08011eee <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011eee:	b480      	push	{r7}
 8011ef0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011ef2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bc80      	pop	{r7}
 8011efa:	4770      	bx	lr

08011efc <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f04:	bf00      	nop
 8011f06:	370c      	adds	r7, #12
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bc80      	pop	{r7}
 8011f0c:	4770      	bx	lr

08011f0e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011f0e:	b480      	push	{r7}
 8011f10:	b083      	sub	sp, #12
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f16:	bf00      	nop
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bc80      	pop	{r7}
 8011f1e:	4770      	bx	lr

08011f20 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f28:	bf00      	nop
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bc80      	pop	{r7}
 8011f30:	4770      	bx	lr

08011f32 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011f32:	b480      	push	{r7}
 8011f34:	b083      	sub	sp, #12
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
 8011f3a:	460b      	mov	r3, r1
 8011f3c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011f3e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bc80      	pop	{r7}
 8011f48:	4770      	bx	lr

08011f4a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011f4a:	b480      	push	{r7}
 8011f4c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f4e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bc80      	pop	{r7}
 8011f56:	4770      	bx	lr

08011f58 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011f58:	b480      	push	{r7}
 8011f5a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f5c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bc80      	pop	{r7}
 8011f64:	4770      	bx	lr

08011f66 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011f66:	b480      	push	{r7}
 8011f68:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f6a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bc80      	pop	{r7}
 8011f72:	4770      	bx	lr

08011f74 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011f74:	b480      	push	{r7}
 8011f76:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011f78:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bc80      	pop	{r7}
 8011f80:	4770      	bx	lr

08011f82 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011f82:	b480      	push	{r7}
 8011f84:	b083      	sub	sp, #12
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	4603      	mov	r3, r0
 8011f8a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f8c:	bf00      	nop
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bc80      	pop	{r7}
 8011f94:	4770      	bx	lr

08011f96 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011f96:	b480      	push	{r7}
 8011f98:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f9a:	bf00      	nop
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bc80      	pop	{r7}
 8011fa0:	4770      	bx	lr

08011fa2 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fa6:	bf00      	nop
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bc80      	pop	{r7}
 8011fac:	4770      	bx	lr

08011fae <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011fae:	b480      	push	{r7}
 8011fb0:	b083      	sub	sp, #12
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fb8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bc80      	pop	{r7}
 8011fc2:	4770      	bx	lr

08011fc4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b083      	sub	sp, #12
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fcc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bc80      	pop	{r7}
 8011fd6:	4770      	bx	lr

08011fd8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b083      	sub	sp, #12
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011fe0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bc80      	pop	{r7}
 8011fea:	4770      	bx	lr

08011fec <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011fec:	b480      	push	{r7}
 8011fee:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ff0:	bf00      	nop
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bc80      	pop	{r7}
 8011ff6:	4770      	bx	lr

08011ff8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	4603      	mov	r3, r0
 8012000:	6039      	str	r1, [r7, #0]
 8012002:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012004:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012006:	4618      	mov	r0, r3
 8012008:	370c      	adds	r7, #12
 801200a:	46bd      	mov	sp, r7
 801200c:	bc80      	pop	{r7}
 801200e:	4770      	bx	lr

08012010 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	4603      	mov	r3, r0
 8012018:	603a      	str	r2, [r7, #0]
 801201a:	80fb      	strh	r3, [r7, #6]
 801201c:	460b      	mov	r3, r1
 801201e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012020:	bf00      	nop
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	bc80      	pop	{r7}
 8012028:	4770      	bx	lr

0801202a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801202a:	b480      	push	{r7}
 801202c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801202e:	bf00      	nop
 8012030:	46bd      	mov	sp, r7
 8012032:	bc80      	pop	{r7}
 8012034:	4770      	bx	lr

08012036 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012036:	b480      	push	{r7}
 8012038:	b083      	sub	sp, #12
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801203e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	bc80      	pop	{r7}
 8012048:	4770      	bx	lr

0801204a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801204a:	b480      	push	{r7}
 801204c:	b083      	sub	sp, #12
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012052:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012054:	4618      	mov	r0, r3
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	bc80      	pop	{r7}
 801205c:	4770      	bx	lr

0801205e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801205e:	b480      	push	{r7}
 8012060:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012062:	bf00      	nop
 8012064:	46bd      	mov	sp, r7
 8012066:	bc80      	pop	{r7}
 8012068:	4770      	bx	lr

0801206a <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801206a:	b480      	push	{r7}
 801206c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801206e:	bf00      	nop
 8012070:	46bd      	mov	sp, r7
 8012072:	bc80      	pop	{r7}
 8012074:	4770      	bx	lr

08012076 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012076:	b480      	push	{r7}
 8012078:	b085      	sub	sp, #20
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012082:	2300      	movs	r3, #0
 8012084:	81fb      	strh	r3, [r7, #14]
 8012086:	e00a      	b.n	801209e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012088:	89fb      	ldrh	r3, [r7, #14]
 801208a:	68ba      	ldr	r2, [r7, #8]
 801208c:	4413      	add	r3, r2
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d001      	beq.n	8012098 <IsSlotFree+0x22>
        {
            return false;
 8012094:	2300      	movs	r3, #0
 8012096:	e006      	b.n	80120a6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012098:	89fb      	ldrh	r3, [r7, #14]
 801209a:	3301      	adds	r3, #1
 801209c:	81fb      	strh	r3, [r7, #14]
 801209e:	89fb      	ldrh	r3, [r7, #14]
 80120a0:	2b0f      	cmp	r3, #15
 80120a2:	d9f1      	bls.n	8012088 <IsSlotFree+0x12>
        }
    }
    return true;
 80120a4:	2301      	movs	r3, #1
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bc80      	pop	{r7}
 80120ae:	4770      	bx	lr

080120b0 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80120b6:	2300      	movs	r3, #0
 80120b8:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80120ba:	e007      	b.n	80120cc <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80120bc:	79fb      	ldrb	r3, [r7, #7]
 80120be:	3301      	adds	r3, #1
 80120c0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80120c2:	79fb      	ldrb	r3, [r7, #7]
 80120c4:	2b0f      	cmp	r3, #15
 80120c6:	d101      	bne.n	80120cc <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80120c8:	2300      	movs	r3, #0
 80120ca:	e012      	b.n	80120f2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80120cc:	79fb      	ldrb	r3, [r7, #7]
 80120ce:	011b      	lsls	r3, r3, #4
 80120d0:	3308      	adds	r3, #8
 80120d2:	4a0a      	ldr	r2, [pc, #40]	; (80120fc <MallocNewMacCommandSlot+0x4c>)
 80120d4:	4413      	add	r3, r2
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff ffcd 	bl	8012076 <IsSlotFree>
 80120dc:	4603      	mov	r3, r0
 80120de:	f083 0301 	eor.w	r3, r3, #1
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d1e9      	bne.n	80120bc <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80120e8:	79fb      	ldrb	r3, [r7, #7]
 80120ea:	011b      	lsls	r3, r3, #4
 80120ec:	3308      	adds	r3, #8
 80120ee:	4a03      	ldr	r2, [pc, #12]	; (80120fc <MallocNewMacCommandSlot+0x4c>)
 80120f0:	4413      	add	r3, r2
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	20000d9c 	.word	0x20000d9c

08012100 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d101      	bne.n	8012112 <FreeMacCommandSlot+0x12>
    {
        return false;
 801210e:	2300      	movs	r3, #0
 8012110:	e005      	b.n	801211e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012112:	2210      	movs	r2, #16
 8012114:	2100      	movs	r1, #0
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f004 f982 	bl	8016420 <memset1>

    return true;
 801211c:	2301      	movs	r3, #1
}
 801211e:	4618      	mov	r0, r3
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012126:	b480      	push	{r7}
 8012128:	b083      	sub	sp, #12
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <LinkedListInit+0x12>
    {
        return false;
 8012134:	2300      	movs	r3, #0
 8012136:	e006      	b.n	8012146 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	605a      	str	r2, [r3, #4]

    return true;
 8012144:	2301      	movs	r3, #1
}
 8012146:	4618      	mov	r0, r3
 8012148:	370c      	adds	r7, #12
 801214a:	46bd      	mov	sp, r7
 801214c:	bc80      	pop	{r7}
 801214e:	4770      	bx	lr

08012150 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <LinkedListAdd+0x16>
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <LinkedListAdd+0x1a>
    {
        return false;
 8012166:	2300      	movs	r3, #0
 8012168:	e015      	b.n	8012196 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d102      	bne.n	8012178 <LinkedListAdd+0x28>
    {
        list->First = element;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	683a      	ldr	r2, [r7, #0]
 8012176:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d003      	beq.n	8012188 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	683a      	ldr	r2, [r7, #0]
 8012186:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	2200      	movs	r2, #0
 801218c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	683a      	ldr	r2, [r7, #0]
 8012192:	605a      	str	r2, [r3, #4]

    return true;
 8012194:	2301      	movs	r3, #1
}
 8012196:	4618      	mov	r0, r3
 8012198:	370c      	adds	r7, #12
 801219a:	46bd      	mov	sp, r7
 801219c:	bc80      	pop	{r7}
 801219e:	4770      	bx	lr

080121a0 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80121a0:	b480      	push	{r7}
 80121a2:	b085      	sub	sp, #20
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d002      	beq.n	80121b6 <LinkedListGetPrevious+0x16>
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d101      	bne.n	80121ba <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80121b6:	2300      	movs	r3, #0
 80121b8:	e016      	b.n	80121e8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80121c0:	683a      	ldr	r2, [r7, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d00c      	beq.n	80121e2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80121c8:	e002      	b.n	80121d0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d007      	beq.n	80121e6 <LinkedListGetPrevious+0x46>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	683a      	ldr	r2, [r7, #0]
 80121dc:	429a      	cmp	r2, r3
 80121de:	d1f4      	bne.n	80121ca <LinkedListGetPrevious+0x2a>
 80121e0:	e001      	b.n	80121e6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80121e2:	2300      	movs	r3, #0
 80121e4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80121e6:	68fb      	ldr	r3, [r7, #12]
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3714      	adds	r7, #20
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bc80      	pop	{r7}
 80121f0:	4770      	bx	lr

080121f2 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b084      	sub	sp, #16
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
 80121fa:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <LinkedListRemove+0x16>
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <LinkedListRemove+0x1a>
    {
        return false;
 8012208:	2300      	movs	r3, #0
 801220a:	e020      	b.n	801224e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ff ffc6 	bl	80121a0 <LinkedListGetPrevious>
 8012214:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	683a      	ldr	r2, [r7, #0]
 801221c:	429a      	cmp	r2, r3
 801221e:	d103      	bne.n	8012228 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	681a      	ldr	r2, [r3, #0]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	683a      	ldr	r2, [r7, #0]
 801222e:	429a      	cmp	r2, r3
 8012230:	d102      	bne.n	8012238 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d003      	beq.n	8012246 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	2200      	movs	r2, #0
 801224a:	601a      	str	r2, [r3, #0]

    return true;
 801224c:	2301      	movs	r3, #1
}
 801224e:	4618      	mov	r0, r3
 8012250:	3710      	adds	r7, #16
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012256:	b480      	push	{r7}
 8012258:	b083      	sub	sp, #12
 801225a:	af00      	add	r7, sp, #0
 801225c:	4603      	mov	r3, r0
 801225e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	2b05      	cmp	r3, #5
 8012264:	d004      	beq.n	8012270 <IsSticky+0x1a>
 8012266:	2b05      	cmp	r3, #5
 8012268:	db04      	blt.n	8012274 <IsSticky+0x1e>
 801226a:	3b08      	subs	r3, #8
 801226c:	2b02      	cmp	r3, #2
 801226e:	d801      	bhi.n	8012274 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8012270:	2301      	movs	r3, #1
 8012272:	e000      	b.n	8012276 <IsSticky+0x20>
        default:
            return false;
 8012274:	2300      	movs	r3, #0
    }
}
 8012276:	4618      	mov	r0, r3
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	bc80      	pop	{r7}
 801227e:	4770      	bx	lr

08012280 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012284:	22fc      	movs	r2, #252	; 0xfc
 8012286:	2100      	movs	r1, #0
 8012288:	4804      	ldr	r0, [pc, #16]	; (801229c <LoRaMacCommandsInit+0x1c>)
 801228a:	f004 f8c9 	bl	8016420 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801228e:	4803      	ldr	r0, [pc, #12]	; (801229c <LoRaMacCommandsInit+0x1c>)
 8012290:	f7ff ff49 	bl	8012126 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012294:	2300      	movs	r3, #0
}
 8012296:	4618      	mov	r0, r3
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	20000d9c 	.word	0x20000d9c

080122a0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b086      	sub	sp, #24
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	4603      	mov	r3, r0
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	607a      	str	r2, [r7, #4]
 80122ac:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80122b4:	2301      	movs	r3, #1
 80122b6:	e033      	b.n	8012320 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80122b8:	f7ff fefa 	bl	80120b0 <MallocNewMacCommandSlot>
 80122bc:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d101      	bne.n	80122c8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80122c4:	2302      	movs	r3, #2
 80122c6:	e02b      	b.n	8012320 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80122c8:	6979      	ldr	r1, [r7, #20]
 80122ca:	4817      	ldr	r0, [pc, #92]	; (8012328 <LoRaMacCommandsAddCmd+0x88>)
 80122cc:	f7ff ff40 	bl	8012150 <LinkedListAdd>
 80122d0:	4603      	mov	r3, r0
 80122d2:	f083 0301 	eor.w	r3, r3, #1
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80122dc:	2305      	movs	r3, #5
 80122de:	e01f      	b.n	8012320 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	7bfa      	ldrb	r2, [r7, #15]
 80122e4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	687a      	ldr	r2, [r7, #4]
 80122ea:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	3305      	adds	r3, #5
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	b292      	uxth	r2, r2
 80122f4:	68b9      	ldr	r1, [r7, #8]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f004 f857 	bl	80163aa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80122fc:	7bfb      	ldrb	r3, [r7, #15]
 80122fe:	4618      	mov	r0, r3
 8012300:	f7ff ffa9 	bl	8012256 <IsSticky>
 8012304:	4603      	mov	r3, r0
 8012306:	461a      	mov	r2, r3
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801230c:	4b06      	ldr	r3, [pc, #24]	; (8012328 <LoRaMacCommandsAddCmd+0x88>)
 801230e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	4413      	add	r3, r2
 8012316:	3301      	adds	r3, #1
 8012318:	4a03      	ldr	r2, [pc, #12]	; (8012328 <LoRaMacCommandsAddCmd+0x88>)
 801231a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801231e:	2300      	movs	r3, #0
}
 8012320:	4618      	mov	r0, r3
 8012322:	3718      	adds	r7, #24
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}
 8012328:	20000d9c 	.word	0x20000d9c

0801232c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d101      	bne.n	801233e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801233a:	2301      	movs	r3, #1
 801233c:	e021      	b.n	8012382 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801233e:	6879      	ldr	r1, [r7, #4]
 8012340:	4812      	ldr	r0, [pc, #72]	; (801238c <LoRaMacCommandsRemoveCmd+0x60>)
 8012342:	f7ff ff56 	bl	80121f2 <LinkedListRemove>
 8012346:	4603      	mov	r3, r0
 8012348:	f083 0301 	eor.w	r3, r3, #1
 801234c:	b2db      	uxtb	r3, r3
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012352:	2303      	movs	r3, #3
 8012354:	e015      	b.n	8012382 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012356:	4b0d      	ldr	r3, [pc, #52]	; (801238c <LoRaMacCommandsRemoveCmd+0x60>)
 8012358:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	3b01      	subs	r3, #1
 8012364:	4a09      	ldr	r2, [pc, #36]	; (801238c <LoRaMacCommandsRemoveCmd+0x60>)
 8012366:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7ff fec8 	bl	8012100 <FreeMacCommandSlot>
 8012370:	4603      	mov	r3, r0
 8012372:	f083 0301 	eor.w	r3, r3, #1
 8012376:	b2db      	uxtb	r3, r3
 8012378:	2b00      	cmp	r3, #0
 801237a:	d001      	beq.n	8012380 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801237c:	2305      	movs	r3, #5
 801237e:	e000      	b.n	8012382 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012380:	2300      	movs	r3, #0
}
 8012382:	4618      	mov	r0, r3
 8012384:	3708      	adds	r7, #8
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	20000d9c 	.word	0x20000d9c

08012390 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012396:	4b0f      	ldr	r3, [pc, #60]	; (80123d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801239c:	e012      	b.n	80123c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	7b1b      	ldrb	r3, [r3, #12]
 80123a2:	f083 0301 	eor.w	r3, r3, #1
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d008      	beq.n	80123be <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff ffba 	bl	801232c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	607b      	str	r3, [r7, #4]
 80123bc:	e002      	b.n	80123c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d1e9      	bne.n	801239e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	20000d9c 	.word	0x20000d9c

080123d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80123de:	4b0e      	ldr	r3, [pc, #56]	; (8012418 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80123e4:	e00f      	b.n	8012406 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	791b      	ldrb	r3, [r3, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7ff ff30 	bl	8012256 <IsSticky>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ff95 	bl	801232c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d1ec      	bne.n	80123e6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801240c:	2300      	movs	r3, #0
}
 801240e:	4618      	mov	r0, r3
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	20000d9c 	.word	0x20000d9c

0801241c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801241c:	b480      	push	{r7}
 801241e:	b083      	sub	sp, #12
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801242a:	2301      	movs	r3, #1
 801242c:	e005      	b.n	801243a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801242e:	4b05      	ldr	r3, [pc, #20]	; (8012444 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012430:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012438:	2300      	movs	r3, #0
}
 801243a:	4618      	mov	r0, r3
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	bc80      	pop	{r7}
 8012442:	4770      	bx	lr
 8012444:	20000d9c 	.word	0x20000d9c

08012448 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b088      	sub	sp, #32
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012454:	4b25      	ldr	r3, [pc, #148]	; (80124ec <LoRaMacCommandsSerializeCmds+0xa4>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d002      	beq.n	801246a <LoRaMacCommandsSerializeCmds+0x22>
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d126      	bne.n	80124b8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801246a:	2301      	movs	r3, #1
 801246c:	e039      	b.n	80124e2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801246e:	7efb      	ldrb	r3, [r7, #27]
 8012470:	68fa      	ldr	r2, [r7, #12]
 8012472:	1ad2      	subs	r2, r2, r3
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	689b      	ldr	r3, [r3, #8]
 8012478:	3301      	adds	r3, #1
 801247a:	429a      	cmp	r2, r3
 801247c:	d320      	bcc.n	80124c0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801247e:	7efb      	ldrb	r3, [r7, #27]
 8012480:	1c5a      	adds	r2, r3, #1
 8012482:	76fa      	strb	r2, [r7, #27]
 8012484:	461a      	mov	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4413      	add	r3, r2
 801248a:	69fa      	ldr	r2, [r7, #28]
 801248c:	7912      	ldrb	r2, [r2, #4]
 801248e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012490:	7efb      	ldrb	r3, [r7, #27]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	18d0      	adds	r0, r2, r3
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	1d59      	adds	r1, r3, #5
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	689b      	ldr	r3, [r3, #8]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	461a      	mov	r2, r3
 80124a2:	f003 ff82 	bl	80163aa <memcpy1>
            itr += curElement->PayloadSize;
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	7efb      	ldrb	r3, [r7, #27]
 80124ae:	4413      	add	r3, r2
 80124b0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80124b8:	69fb      	ldr	r3, [r7, #28]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1d7      	bne.n	801246e <LoRaMacCommandsSerializeCmds+0x26>
 80124be:	e009      	b.n	80124d4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80124c0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80124c2:	e007      	b.n	80124d4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80124ca:	69f8      	ldr	r0, [r7, #28]
 80124cc:	f7ff ff2e 	bl	801232c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80124d4:	69fb      	ldr	r3, [r7, #28]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1f4      	bne.n	80124c4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80124da:	68b8      	ldr	r0, [r7, #8]
 80124dc:	f7ff ff9e 	bl	801241c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80124e0:	2300      	movs	r3, #0
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3720      	adds	r7, #32
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	20000d9c 	.word	0x20000d9c

080124f0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124fe:	2301      	movs	r3, #1
 8012500:	e016      	b.n	8012530 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012502:	4b0e      	ldr	r3, [pc, #56]	; (801253c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801250e:	e00b      	b.n	8012528 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	7b1b      	ldrb	r3, [r3, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d004      	beq.n	8012522 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2201      	movs	r2, #1
 801251c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801251e:	2300      	movs	r3, #0
 8012520:	e006      	b.n	8012530 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1f0      	bne.n	8012510 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801252e:	2300      	movs	r3, #0
}
 8012530:	4618      	mov	r0, r3
 8012532:	3714      	adds	r7, #20
 8012534:	46bd      	mov	sp, r7
 8012536:	bc80      	pop	{r7}
 8012538:	4770      	bx	lr
 801253a:	bf00      	nop
 801253c:	20000d9c 	.word	0x20000d9c

08012540 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012540:	b480      	push	{r7}
 8012542:	b085      	sub	sp, #20
 8012544:	af00      	add	r7, sp, #0
 8012546:	4603      	mov	r3, r0
 8012548:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801254a:	2300      	movs	r3, #0
 801254c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801254e:	79fb      	ldrb	r3, [r7, #7]
 8012550:	3b02      	subs	r3, #2
 8012552:	2b11      	cmp	r3, #17
 8012554:	d850      	bhi.n	80125f8 <LoRaMacCommandsGetCmdSize+0xb8>
 8012556:	a201      	add	r2, pc, #4	; (adr r2, 801255c <LoRaMacCommandsGetCmdSize+0x1c>)
 8012558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801255c:	080125a5 	.word	0x080125a5
 8012560:	080125ab 	.word	0x080125ab
 8012564:	080125b1 	.word	0x080125b1
 8012568:	080125b7 	.word	0x080125b7
 801256c:	080125bd 	.word	0x080125bd
 8012570:	080125c3 	.word	0x080125c3
 8012574:	080125c9 	.word	0x080125c9
 8012578:	080125cf 	.word	0x080125cf
 801257c:	080125d5 	.word	0x080125d5
 8012580:	080125f9 	.word	0x080125f9
 8012584:	080125f9 	.word	0x080125f9
 8012588:	080125db 	.word	0x080125db
 801258c:	080125f9 	.word	0x080125f9
 8012590:	080125f9 	.word	0x080125f9
 8012594:	080125e1 	.word	0x080125e1
 8012598:	080125e7 	.word	0x080125e7
 801259c:	080125ed 	.word	0x080125ed
 80125a0:	080125f3 	.word	0x080125f3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80125a4:	2303      	movs	r3, #3
 80125a6:	73fb      	strb	r3, [r7, #15]
            break;
 80125a8:	e027      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80125aa:	2305      	movs	r3, #5
 80125ac:	73fb      	strb	r3, [r7, #15]
            break;
 80125ae:	e024      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80125b0:	2302      	movs	r3, #2
 80125b2:	73fb      	strb	r3, [r7, #15]
            break;
 80125b4:	e021      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80125b6:	2305      	movs	r3, #5
 80125b8:	73fb      	strb	r3, [r7, #15]
            break;
 80125ba:	e01e      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80125bc:	2301      	movs	r3, #1
 80125be:	73fb      	strb	r3, [r7, #15]
            break;
 80125c0:	e01b      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80125c2:	2306      	movs	r3, #6
 80125c4:	73fb      	strb	r3, [r7, #15]
            break;
 80125c6:	e018      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80125c8:	2302      	movs	r3, #2
 80125ca:	73fb      	strb	r3, [r7, #15]
            break;
 80125cc:	e015      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80125ce:	2302      	movs	r3, #2
 80125d0:	73fb      	strb	r3, [r7, #15]
            break;
 80125d2:	e012      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80125d4:	2305      	movs	r3, #5
 80125d6:	73fb      	strb	r3, [r7, #15]
            break;
 80125d8:	e00f      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80125da:	2306      	movs	r3, #6
 80125dc:	73fb      	strb	r3, [r7, #15]
            break;
 80125de:	e00c      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80125e0:	2301      	movs	r3, #1
 80125e2:	73fb      	strb	r3, [r7, #15]
            break;
 80125e4:	e009      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80125e6:	2305      	movs	r3, #5
 80125e8:	73fb      	strb	r3, [r7, #15]
            break;
 80125ea:	e006      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80125ec:	2304      	movs	r3, #4
 80125ee:	73fb      	strb	r3, [r7, #15]
            break;
 80125f0:	e003      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80125f2:	2304      	movs	r3, #4
 80125f4:	73fb      	strb	r3, [r7, #15]
            break;
 80125f6:	e000      	b.n	80125fa <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80125f8:	bf00      	nop
        }
    }
    return cidSize;
 80125fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3714      	adds	r7, #20
 8012600:	46bd      	mov	sp, r7
 8012602:	bc80      	pop	{r7}
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop

08012608 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4a07      	ldr	r2, [pc, #28]	; (8012630 <IncreaseBufferPointer+0x28>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d102      	bne.n	801261e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012618:	4b06      	ldr	r3, [pc, #24]	; (8012634 <IncreaseBufferPointer+0x2c>)
 801261a:	607b      	str	r3, [r7, #4]
 801261c:	e002      	b.n	8012624 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	3304      	adds	r3, #4
 8012622:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012624:	687b      	ldr	r3, [r7, #4]
}
 8012626:	4618      	mov	r0, r3
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	bc80      	pop	{r7}
 801262e:	4770      	bx	lr
 8012630:	20000eb4 	.word	0x20000eb4
 8012634:	20000ea4 	.word	0x20000ea4

08012638 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	4603      	mov	r3, r0
 8012640:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012642:	79fb      	ldrb	r3, [r7, #7]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <IsListEmpty+0x14>
    {
        return true;
 8012648:	2301      	movs	r3, #1
 801264a:	e000      	b.n	801264e <IsListEmpty+0x16>
    }
    return false;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	bc80      	pop	{r7}
 8012656:	4770      	bx	lr

08012658 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	4603      	mov	r3, r0
 8012660:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012662:	79fb      	ldrb	r3, [r7, #7]
 8012664:	2b04      	cmp	r3, #4
 8012666:	d901      	bls.n	801266c <IsListFull+0x14>
    {
        return true;
 8012668:	2301      	movs	r3, #1
 801266a:	e000      	b.n	801266e <IsListFull+0x16>
    }
    return false;
 801266c:	2300      	movs	r3, #0
}
 801266e:	4618      	mov	r0, r3
 8012670:	370c      	adds	r7, #12
 8012672:	46bd      	mov	sp, r7
 8012674:	bc80      	pop	{r7}
 8012676:	4770      	bx	lr

08012678 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	4603      	mov	r3, r0
 8012680:	60b9      	str	r1, [r7, #8]
 8012682:	607a      	str	r2, [r7, #4]
 8012684:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801268a:	4b13      	ldr	r3, [pc, #76]	; (80126d8 <GetElement+0x60>)
 801268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff ffd1 	bl	8012638 <IsListEmpty>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d001      	beq.n	80126a0 <GetElement+0x28>
    {
        return NULL;
 801269c:	2300      	movs	r3, #0
 801269e:	e017      	b.n	80126d0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80126a0:	2300      	movs	r3, #0
 80126a2:	74fb      	strb	r3, [r7, #19]
 80126a4:	e00d      	b.n	80126c2 <GetElement+0x4a>
    {
        if( element->Request == request )
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	7bfa      	ldrb	r2, [r7, #15]
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d101      	bne.n	80126b4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	e00d      	b.n	80126d0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80126b4:	6978      	ldr	r0, [r7, #20]
 80126b6:	f7ff ffa7 	bl	8012608 <IncreaseBufferPointer>
 80126ba:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80126bc:	7cfb      	ldrb	r3, [r7, #19]
 80126be:	3301      	adds	r3, #1
 80126c0:	74fb      	strb	r3, [r7, #19]
 80126c2:	4b05      	ldr	r3, [pc, #20]	; (80126d8 <GetElement+0x60>)
 80126c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80126c8:	7cfa      	ldrb	r2, [r7, #19]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d3eb      	bcc.n	80126a6 <GetElement+0x2e>
    }

    return NULL;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3718      	adds	r7, #24
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	20000e98 	.word	0x20000e98

080126dc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80126e4:	4a0c      	ldr	r2, [pc, #48]	; (8012718 <LoRaMacConfirmQueueInit+0x3c>)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80126ea:	4b0b      	ldr	r3, [pc, #44]	; (8012718 <LoRaMacConfirmQueueInit+0x3c>)
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126f2:	4b09      	ldr	r3, [pc, #36]	; (8012718 <LoRaMacConfirmQueueInit+0x3c>)
 80126f4:	4a09      	ldr	r2, [pc, #36]	; (801271c <LoRaMacConfirmQueueInit+0x40>)
 80126f6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126f8:	4b07      	ldr	r3, [pc, #28]	; (8012718 <LoRaMacConfirmQueueInit+0x3c>)
 80126fa:	4a08      	ldr	r2, [pc, #32]	; (801271c <LoRaMacConfirmQueueInit+0x40>)
 80126fc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80126fe:	2214      	movs	r2, #20
 8012700:	21ff      	movs	r1, #255	; 0xff
 8012702:	4806      	ldr	r0, [pc, #24]	; (801271c <LoRaMacConfirmQueueInit+0x40>)
 8012704:	f003 fe8c 	bl	8016420 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012708:	4b03      	ldr	r3, [pc, #12]	; (8012718 <LoRaMacConfirmQueueInit+0x3c>)
 801270a:	2201      	movs	r2, #1
 801270c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012710:	bf00      	nop
 8012712:	3708      	adds	r7, #8
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	20000e98 	.word	0x20000e98
 801271c:	20000ea4 	.word	0x20000ea4

08012720 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012728:	4b19      	ldr	r3, [pc, #100]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 801272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff ff92 	bl	8012658 <IsListFull>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801273a:	2300      	movs	r3, #0
 801273c:	e023      	b.n	8012786 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801273e:	4b14      	ldr	r3, [pc, #80]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	7812      	ldrb	r2, [r2, #0]
 8012746:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012748:	4b11      	ldr	r3, [pc, #68]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	7852      	ldrb	r2, [r2, #1]
 8012750:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012752:	4b0f      	ldr	r3, [pc, #60]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012754:	689b      	ldr	r3, [r3, #8]
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	78d2      	ldrb	r2, [r2, #3]
 801275a:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 801275c:	4b0c      	ldr	r3, [pc, #48]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 801275e:	689b      	ldr	r3, [r3, #8]
 8012760:	2200      	movs	r2, #0
 8012762:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012764:	4b0a      	ldr	r3, [pc, #40]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012766:	f893 3020 	ldrb.w	r3, [r3, #32]
 801276a:	3301      	adds	r3, #1
 801276c:	b2da      	uxtb	r2, r3
 801276e:	4b08      	ldr	r3, [pc, #32]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012770:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012774:	4b06      	ldr	r3, [pc, #24]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	4618      	mov	r0, r3
 801277a:	f7ff ff45 	bl	8012608 <IncreaseBufferPointer>
 801277e:	4603      	mov	r3, r0
 8012780:	4a03      	ldr	r2, [pc, #12]	; (8012790 <LoRaMacConfirmQueueAdd+0x70>)
 8012782:	6093      	str	r3, [r2, #8]

    return true;
 8012784:	2301      	movs	r3, #1
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20000e98 	.word	0x20000e98

08012794 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012798:	4b0e      	ldr	r3, [pc, #56]	; (80127d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801279a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff ff4a 	bl	8012638 <IsListEmpty>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d001      	beq.n	80127ae <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80127aa:	2300      	movs	r3, #0
 80127ac:	e010      	b.n	80127d0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80127ae:	4b09      	ldr	r3, [pc, #36]	; (80127d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127b4:	3b01      	subs	r3, #1
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	4b06      	ldr	r3, [pc, #24]	; (80127d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127ba:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80127be:	4b05      	ldr	r3, [pc, #20]	; (80127d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7ff ff20 	bl	8012608 <IncreaseBufferPointer>
 80127c8:	4603      	mov	r3, r0
 80127ca:	4a02      	ldr	r2, [pc, #8]	; (80127d4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80127cc:	6053      	str	r3, [r2, #4]

    return true;
 80127ce:	2301      	movs	r3, #1
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	20000e98 	.word	0x20000e98

080127d8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	4603      	mov	r3, r0
 80127e0:	460a      	mov	r2, r1
 80127e2:	71fb      	strb	r3, [r7, #7]
 80127e4:	4613      	mov	r3, r2
 80127e6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80127e8:	2300      	movs	r3, #0
 80127ea:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <LoRaMacConfirmQueueSetStatus+0x58>)
 80127ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7ff ff20 	bl	8012638 <IsListEmpty>
 80127f8:	4603      	mov	r3, r0
 80127fa:	f083 0301 	eor.w	r3, r3, #1
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	2b00      	cmp	r3, #0
 8012802:	d011      	beq.n	8012828 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012804:	4b0a      	ldr	r3, [pc, #40]	; (8012830 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012806:	6859      	ldr	r1, [r3, #4]
 8012808:	4b09      	ldr	r3, [pc, #36]	; (8012830 <LoRaMacConfirmQueueSetStatus+0x58>)
 801280a:	689a      	ldr	r2, [r3, #8]
 801280c:	79bb      	ldrb	r3, [r7, #6]
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff ff32 	bl	8012678 <GetElement>
 8012814:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d005      	beq.n	8012828 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	79fa      	ldrb	r2, [r7, #7]
 8012820:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2201      	movs	r2, #1
 8012826:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012828:	bf00      	nop
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	20000e98 	.word	0x20000e98

08012834 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	4603      	mov	r3, r0
 801283c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801283e:	2300      	movs	r3, #0
 8012840:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012842:	4b10      	ldr	r3, [pc, #64]	; (8012884 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012848:	4618      	mov	r0, r3
 801284a:	f7ff fef5 	bl	8012638 <IsListEmpty>
 801284e:	4603      	mov	r3, r0
 8012850:	f083 0301 	eor.w	r3, r3, #1
 8012854:	b2db      	uxtb	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d00e      	beq.n	8012878 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801285a:	4b0a      	ldr	r3, [pc, #40]	; (8012884 <LoRaMacConfirmQueueGetStatus+0x50>)
 801285c:	6859      	ldr	r1, [r3, #4]
 801285e:	4b09      	ldr	r3, [pc, #36]	; (8012884 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012860:	689a      	ldr	r2, [r3, #8]
 8012862:	79fb      	ldrb	r3, [r7, #7]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff ff07 	bl	8012678 <GetElement>
 801286a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d002      	beq.n	8012878 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	785b      	ldrb	r3, [r3, #1]
 8012876:	e000      	b.n	801287a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012878:	2301      	movs	r3, #1
}
 801287a:	4618      	mov	r0, r3
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20000e98 	.word	0x20000e98

08012888 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	4603      	mov	r3, r0
 8012890:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012892:	4b16      	ldr	r3, [pc, #88]	; (80128ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012898:	4a14      	ldr	r2, [pc, #80]	; (80128ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801289a:	79fb      	ldrb	r3, [r7, #7]
 801289c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128a0:	4b12      	ldr	r3, [pc, #72]	; (80128ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7ff fec6 	bl	8012638 <IsListEmpty>
 80128ac:	4603      	mov	r3, r0
 80128ae:	f083 0301 	eor.w	r3, r3, #1
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d015      	beq.n	80128e4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	79fa      	ldrb	r2, [r7, #7]
 80128bc:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	78db      	ldrb	r3, [r3, #3]
 80128c2:	f083 0301 	eor.w	r3, r3, #1
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2201      	movs	r2, #1
 80128d0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80128d2:	68f8      	ldr	r0, [r7, #12]
 80128d4:	f7ff fe98 	bl	8012608 <IncreaseBufferPointer>
 80128d8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80128da:	4b04      	ldr	r3, [pc, #16]	; (80128ec <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	68fa      	ldr	r2, [r7, #12]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d1e9      	bne.n	80128b8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80128e4:	bf00      	nop
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20000e98 	.word	0x20000e98

080128f0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b082      	sub	sp, #8
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	4603      	mov	r3, r0
 80128f8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80128fa:	4b09      	ldr	r3, [pc, #36]	; (8012920 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80128fc:	6859      	ldr	r1, [r3, #4]
 80128fe:	4b08      	ldr	r3, [pc, #32]	; (8012920 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012900:	689a      	ldr	r2, [r3, #8]
 8012902:	79fb      	ldrb	r3, [r7, #7]
 8012904:	4618      	mov	r0, r3
 8012906:	f7ff feb7 	bl	8012678 <GetElement>
 801290a:	4603      	mov	r3, r0
 801290c:	2b00      	cmp	r3, #0
 801290e:	d001      	beq.n	8012914 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012910:	2301      	movs	r3, #1
 8012912:	e000      	b.n	8012916 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3708      	adds	r7, #8
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	20000e98 	.word	0x20000e98

08012924 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801292c:	4b22      	ldr	r3, [pc, #136]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801292e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012932:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012934:	2300      	movs	r3, #0
 8012936:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012938:	2300      	movs	r3, #0
 801293a:	73fb      	strb	r3, [r7, #15]
 801293c:	e032      	b.n	80129a4 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801293e:	4b1e      	ldr	r3, [pc, #120]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	781a      	ldrb	r2, [r3, #0]
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012948:	4b1b      	ldr	r3, [pc, #108]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	785a      	ldrb	r2, [r3, #1]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012952:	4b19      	ldr	r3, [pc, #100]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	789b      	ldrb	r3, [r3, #2]
 8012958:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801295a:	7b7b      	ldrb	r3, [r7, #13]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d005      	beq.n	801296c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012960:	4b15      	ldr	r3, [pc, #84]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	4798      	blx	r3
 801296a:	e00b      	b.n	8012984 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801296c:	4b12      	ldr	r3, [pc, #72]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012974:	4b10      	ldr	r3, [pc, #64]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	785b      	ldrb	r3, [r3, #1]
 801297a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801297c:	4b0e      	ldr	r3, [pc, #56]	; (80129b8 <LoRaMacConfirmQueueHandleCb+0x94>)
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	78db      	ldrb	r3, [r3, #3]
 8012982:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012984:	f7ff ff06 	bl	8012794 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012988:	7b7b      	ldrb	r3, [r7, #13]
 801298a:	f083 0301 	eor.w	r3, r3, #1
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d004      	beq.n	801299e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012994:	f107 0308 	add.w	r3, r7, #8
 8012998:	4618      	mov	r0, r3
 801299a:	f7ff fec1 	bl	8012720 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801299e:	7bfb      	ldrb	r3, [r7, #15]
 80129a0:	3301      	adds	r3, #1
 80129a2:	73fb      	strb	r3, [r7, #15]
 80129a4:	7bfa      	ldrb	r2, [r7, #15]
 80129a6:	7bbb      	ldrb	r3, [r7, #14]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d3c8      	bcc.n	801293e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80129ac:	bf00      	nop
 80129ae:	bf00      	nop
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	20000e98 	.word	0x20000e98

080129bc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80129bc:	b480      	push	{r7}
 80129be:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80129c0:	4b03      	ldr	r3, [pc, #12]	; (80129d0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80129c2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bc80      	pop	{r7}
 80129cc:	4770      	bx	lr
 80129ce:	bf00      	nop
 80129d0:	20000e98 	.word	0x20000e98

080129d4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80129d8:	4b06      	ldr	r3, [pc, #24]	; (80129f4 <LoRaMacConfirmQueueIsFull+0x20>)
 80129da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129de:	4618      	mov	r0, r3
 80129e0:	f7ff fe3a 	bl	8012658 <IsListFull>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80129ea:	2301      	movs	r3, #1
 80129ec:	e000      	b.n	80129f0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80129ee:	2300      	movs	r3, #0
    }
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	20000e98 	.word	0x20000e98

080129f8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b08e      	sub	sp, #56	; 0x38
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	607b      	str	r3, [r7, #4]
 8012a02:	460b      	mov	r3, r1
 8012a04:	817b      	strh	r3, [r7, #10]
 8012a06:	4613      	mov	r3, r2
 8012a08:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d101      	bne.n	8012a14 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012a10:	230a      	movs	r3, #10
 8012a12:	e087      	b.n	8012b24 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012a14:	2300      	movs	r3, #0
 8012a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012a1e:	2300      	movs	r3, #0
 8012a20:	623b      	str	r3, [r7, #32]
 8012a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a26:	2200      	movs	r2, #0
 8012a28:	601a      	str	r2, [r3, #0]
 8012a2a:	605a      	str	r2, [r3, #4]
 8012a2c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012a2e:	2300      	movs	r3, #0
 8012a30:	613b      	str	r3, [r7, #16]
 8012a32:	f107 0314 	add.w	r3, r7, #20
 8012a36:	2200      	movs	r2, #0
 8012a38:	601a      	str	r2, [r3, #0]
 8012a3a:	605a      	str	r2, [r3, #4]
 8012a3c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012a42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012a46:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	0a1b      	lsrs	r3, r3, #8
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	0c1b      	lsrs	r3, r3, #16
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	0e1b      	lsrs	r3, r3, #24
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a6e:	0a1b      	lsrs	r3, r3, #8
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a76:	0c1b      	lsrs	r3, r3, #16
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a7e:	0e1b      	lsrs	r3, r3, #24
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012a84:	e049      	b.n	8012b1a <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012a86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012a8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012a8e:	3301      	adds	r3, #1
 8012a90:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012a92:	f107 0320 	add.w	r3, r7, #32
 8012a96:	7a7a      	ldrb	r2, [r7, #9]
 8012a98:	f107 0010 	add.w	r0, r7, #16
 8012a9c:	2110      	movs	r1, #16
 8012a9e:	f7f9 f9fa 	bl	800be96 <SecureElementAesEncrypt>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012aa8:	230f      	movs	r3, #15
 8012aaa:	e03b      	b.n	8012b24 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012aac:	2300      	movs	r3, #0
 8012aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012ab2:	e01f      	b.n	8012af4 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012ab4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012abc:	4413      	add	r3, r2
 8012abe:	461a      	mov	r2, r3
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	7819      	ldrb	r1, [r3, #0]
 8012ac6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012aca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012ace:	4413      	add	r3, r2
 8012ad0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012ad4:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012adc:	4403      	add	r3, r0
 8012ade:	4618      	mov	r0, r3
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	4403      	add	r3, r0
 8012ae4:	404a      	eors	r2, r1
 8012ae6:	b2d2      	uxtb	r2, r2
 8012ae8:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012aee:	3301      	adds	r3, #1
 8012af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012af4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012af8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012afc:	2a10      	cmp	r2, #16
 8012afe:	bfa8      	it	ge
 8012b00:	2210      	movge	r2, #16
 8012b02:	b212      	sxth	r2, r2
 8012b04:	4293      	cmp	r3, r2
 8012b06:	dbd5      	blt.n	8012ab4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012b08:	897b      	ldrh	r3, [r7, #10]
 8012b0a:	3b10      	subs	r3, #16
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b14:	3310      	adds	r3, #16
 8012b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012b1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	dcb1      	bgt.n	8012a86 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3738      	adds	r7, #56	; 0x38
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012b2c:	b490      	push	{r4, r7}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	4604      	mov	r4, r0
 8012b34:	4608      	mov	r0, r1
 8012b36:	4611      	mov	r1, r2
 8012b38:	461a      	mov	r2, r3
 8012b3a:	4623      	mov	r3, r4
 8012b3c:	80fb      	strh	r3, [r7, #6]
 8012b3e:	4603      	mov	r3, r0
 8012b40:	717b      	strb	r3, [r7, #5]
 8012b42:	460b      	mov	r3, r1
 8012b44:	713b      	strb	r3, [r7, #4]
 8012b46:	4613      	mov	r3, r2
 8012b48:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012b50:	230a      	movs	r3, #10
 8012b52:	e04e      	b.n	8012bf2 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	2249      	movs	r2, #73	; 0x49
 8012b58:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	2200      	movs	r2, #0
 8012b60:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	3302      	adds	r3, #2
 8012b66:	2200      	movs	r2, #0
 8012b68:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	3303      	adds	r3, #3
 8012b6e:	2200      	movs	r2, #0
 8012b70:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	3304      	adds	r3, #4
 8012b76:	2200      	movs	r2, #0
 8012b78:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	3305      	adds	r3, #5
 8012b7e:	78fa      	ldrb	r2, [r7, #3]
 8012b80:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	3306      	adds	r3, #6
 8012b86:	693a      	ldr	r2, [r7, #16]
 8012b88:	b2d2      	uxtb	r2, r2
 8012b8a:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	0a1a      	lsrs	r2, r3, #8
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	3307      	adds	r3, #7
 8012b94:	b2d2      	uxtb	r2, r2
 8012b96:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	0c1a      	lsrs	r2, r3, #16
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	3308      	adds	r3, #8
 8012ba0:	b2d2      	uxtb	r2, r2
 8012ba2:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	0e1a      	lsrs	r2, r3, #24
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	3309      	adds	r3, #9
 8012bac:	b2d2      	uxtb	r2, r2
 8012bae:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	330a      	adds	r3, #10
 8012bb4:	697a      	ldr	r2, [r7, #20]
 8012bb6:	b2d2      	uxtb	r2, r2
 8012bb8:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	0a1a      	lsrs	r2, r3, #8
 8012bbe:	69bb      	ldr	r3, [r7, #24]
 8012bc0:	330b      	adds	r3, #11
 8012bc2:	b2d2      	uxtb	r2, r2
 8012bc4:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	0c1a      	lsrs	r2, r3, #16
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	330c      	adds	r3, #12
 8012bce:	b2d2      	uxtb	r2, r2
 8012bd0:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	0e1a      	lsrs	r2, r3, #24
 8012bd6:	69bb      	ldr	r3, [r7, #24]
 8012bd8:	330d      	adds	r3, #13
 8012bda:	b2d2      	uxtb	r2, r2
 8012bdc:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	330e      	adds	r3, #14
 8012be2:	2200      	movs	r2, #0
 8012be4:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	330f      	adds	r3, #15
 8012bea:	88fa      	ldrh	r2, [r7, #6]
 8012bec:	b2d2      	uxtb	r2, r2
 8012bee:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bc90      	pop	{r4, r7}
 8012bfa:	4770      	bx	lr

08012bfc <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012bfc:	b590      	push	{r4, r7, lr}
 8012bfe:	b08b      	sub	sp, #44	; 0x2c
 8012c00:	af04      	add	r7, sp, #16
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	4608      	mov	r0, r1
 8012c06:	4611      	mov	r1, r2
 8012c08:	461a      	mov	r2, r3
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	807b      	strh	r3, [r7, #2]
 8012c0e:	460b      	mov	r3, r1
 8012c10:	707b      	strb	r3, [r7, #1]
 8012c12:	4613      	mov	r3, r2
 8012c14:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <ComputeCmacB0+0x26>
 8012c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d101      	bne.n	8012c26 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c22:	230a      	movs	r3, #10
 8012c24:	e024      	b.n	8012c70 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012c26:	887b      	ldrh	r3, [r7, #2]
 8012c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c2c:	d901      	bls.n	8012c32 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012c2e:	230e      	movs	r3, #14
 8012c30:	e01e      	b.n	8012c70 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012c32:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012c36:	783a      	ldrb	r2, [r7, #0]
 8012c38:	7879      	ldrb	r1, [r7, #1]
 8012c3a:	8878      	ldrh	r0, [r7, #2]
 8012c3c:	f107 0308 	add.w	r3, r7, #8
 8012c40:	9302      	str	r3, [sp, #8]
 8012c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c44:	9301      	str	r3, [sp, #4]
 8012c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	4623      	mov	r3, r4
 8012c4c:	f7ff ff6e 	bl	8012b2c <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012c50:	7879      	ldrb	r1, [r7, #1]
 8012c52:	887a      	ldrh	r2, [r7, #2]
 8012c54:	f107 0008 	add.w	r0, r7, #8
 8012c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c5a:	9300      	str	r3, [sp, #0]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	6879      	ldr	r1, [r7, #4]
 8012c60:	f7f9 f8cc 	bl	800bdfc <SecureElementComputeAesCmac>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012c6a:	230f      	movs	r3, #15
 8012c6c:	e000      	b.n	8012c70 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012c6e:	2300      	movs	r3, #0
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	371c      	adds	r7, #28
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd90      	pop	{r4, r7, pc}

08012c78 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012c78:	b590      	push	{r4, r7, lr}
 8012c7a:	b0cd      	sub	sp, #308	; 0x134
 8012c7c:	af04      	add	r7, sp, #16
 8012c7e:	1d3c      	adds	r4, r7, #4
 8012c80:	6020      	str	r0, [r4, #0]
 8012c82:	460c      	mov	r4, r1
 8012c84:	4610      	mov	r0, r2
 8012c86:	4619      	mov	r1, r3
 8012c88:	1cbb      	adds	r3, r7, #2
 8012c8a:	4622      	mov	r2, r4
 8012c8c:	801a      	strh	r2, [r3, #0]
 8012c8e:	1c7b      	adds	r3, r7, #1
 8012c90:	4602      	mov	r2, r0
 8012c92:	701a      	strb	r2, [r3, #0]
 8012c94:	463b      	mov	r3, r7
 8012c96:	460a      	mov	r2, r1
 8012c98:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012c9a:	1d3b      	adds	r3, r7, #4
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d101      	bne.n	8012ca6 <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ca2:	230a      	movs	r3, #10
 8012ca4:	e04b      	b.n	8012d3e <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012ca6:	1cbb      	adds	r3, r7, #2
 8012ca8:	881b      	ldrh	r3, [r3, #0]
 8012caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cae:	d901      	bls.n	8012cb4 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012cb0:	230e      	movs	r3, #14
 8012cb2:	e044      	b.n	8012d3e <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012cb4:	f107 030c 	add.w	r3, r7, #12
 8012cb8:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012cbc:	2100      	movs	r1, #0
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f003 fbae 	bl	8016420 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012cc4:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012cc8:	463b      	mov	r3, r7
 8012cca:	781a      	ldrb	r2, [r3, #0]
 8012ccc:	1c7b      	adds	r3, r7, #1
 8012cce:	7819      	ldrb	r1, [r3, #0]
 8012cd0:	1cbb      	adds	r3, r7, #2
 8012cd2:	8818      	ldrh	r0, [r3, #0]
 8012cd4:	f107 030c 	add.w	r3, r7, #12
 8012cd8:	9302      	str	r3, [sp, #8]
 8012cda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012ce4:	9300      	str	r3, [sp, #0]
 8012ce6:	4623      	mov	r3, r4
 8012ce8:	f7ff ff20 	bl	8012b2c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012cec:	f107 030c 	add.w	r3, r7, #12
 8012cf0:	3310      	adds	r3, #16
 8012cf2:	1cba      	adds	r2, r7, #2
 8012cf4:	8812      	ldrh	r2, [r2, #0]
 8012cf6:	1d39      	adds	r1, r7, #4
 8012cf8:	6809      	ldr	r1, [r1, #0]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f003 fb55 	bl	80163aa <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012d00:	2306      	movs	r3, #6
 8012d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012d06:	1cbb      	adds	r3, r7, #2
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	3310      	adds	r3, #16
 8012d0c:	b299      	uxth	r1, r3
 8012d0e:	1c7b      	adds	r3, r7, #1
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	f107 000c 	add.w	r0, r7, #12
 8012d16:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012d1a:	f7f9 f88d 	bl	800be38 <SecureElementVerifyAesCmac>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	e006      	b.n	8012d3e <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012d30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d101      	bne.n	8012d3c <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e000      	b.n	8012d3e <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d3c:	230f      	movs	r3, #15
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd90      	pop	{r4, r7, pc}

08012d48 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	4603      	mov	r3, r0
 8012d50:	6039      	str	r1, [r7, #0]
 8012d52:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012d54:	2300      	movs	r3, #0
 8012d56:	73fb      	strb	r3, [r7, #15]
 8012d58:	e011      	b.n	8012d7e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012d5a:	7bfb      	ldrb	r3, [r7, #15]
 8012d5c:	4a0c      	ldr	r2, [pc, #48]	; (8012d90 <GetKeyAddrItem+0x48>)
 8012d5e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012d62:	79fa      	ldrb	r2, [r7, #7]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d107      	bne.n	8012d78 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012d68:	7bfb      	ldrb	r3, [r7, #15]
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4a08      	ldr	r2, [pc, #32]	; (8012d90 <GetKeyAddrItem+0x48>)
 8012d6e:	441a      	add	r2, r3
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012d74:	2300      	movs	r3, #0
 8012d76:	e006      	b.n	8012d86 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012d78:	7bfb      	ldrb	r3, [r7, #15]
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	73fb      	strb	r3, [r7, #15]
 8012d7e:	7bfb      	ldrb	r3, [r7, #15]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d9ea      	bls.n	8012d5a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012d84:	230c      	movs	r3, #12
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3714      	adds	r7, #20
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bc80      	pop	{r7}
 8012d8e:	4770      	bx	lr
 8012d90:	20000114 	.word	0x20000114

08012d94 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b088      	sub	sp, #32
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	60b9      	str	r1, [r7, #8]
 8012d9c:	607a      	str	r2, [r7, #4]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	4603      	mov	r3, r0
 8012da2:	73fb      	strb	r3, [r7, #15]
 8012da4:	4613      	mov	r3, r2
 8012da6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012da8:	2300      	movs	r3, #0
 8012daa:	613b      	str	r3, [r7, #16]
 8012dac:	f107 0314 	add.w	r3, r7, #20
 8012db0:	2200      	movs	r2, #0
 8012db2:	601a      	str	r2, [r3, #0]
 8012db4:	605a      	str	r2, [r3, #4]
 8012db6:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012db8:	7bfb      	ldrb	r3, [r7, #15]
 8012dba:	2b02      	cmp	r3, #2
 8012dbc:	d002      	beq.n	8012dc4 <DeriveSessionKey10x+0x30>
 8012dbe:	2b03      	cmp	r3, #3
 8012dc0:	d003      	beq.n	8012dca <DeriveSessionKey10x+0x36>
 8012dc2:	e005      	b.n	8012dd0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	743b      	strb	r3, [r7, #16]
            break;
 8012dc8:	e004      	b.n	8012dd4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012dca:	2302      	movs	r3, #2
 8012dcc:	743b      	strb	r3, [r7, #16]
            break;
 8012dce:	e001      	b.n	8012dd4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012dd0:	230b      	movs	r3, #11
 8012dd2:	e02a      	b.n	8012e2a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	0a1b      	lsrs	r3, r3, #8
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	0c1b      	lsrs	r3, r3, #16
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	0a1b      	lsrs	r3, r3, #8
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	0c1b      	lsrs	r3, r3, #16
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012e00:	89bb      	ldrh	r3, [r7, #12]
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012e06:	89bb      	ldrh	r3, [r7, #12]
 8012e08:	0a1b      	lsrs	r3, r3, #8
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012e10:	7bfa      	ldrb	r2, [r7, #15]
 8012e12:	f107 0310 	add.w	r3, r7, #16
 8012e16:	2101      	movs	r1, #1
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f9 f89a 	bl	800bf52 <SecureElementDeriveAndStoreKey>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e24:	230f      	movs	r3, #15
 8012e26:	e000      	b.n	8012e2a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3720      	adds	r7, #32
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
	...

08012e34 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	6039      	str	r1, [r7, #0]
 8012e3e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d101      	bne.n	8012e4a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e46:	230a      	movs	r3, #10
 8012e48:	e03b      	b.n	8012ec2 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012e4a:	79fb      	ldrb	r3, [r7, #7]
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	2b03      	cmp	r3, #3
 8012e50:	d834      	bhi.n	8012ebc <GetLastFcntDown+0x88>
 8012e52:	a201      	add	r2, pc, #4	; (adr r2, 8012e58 <GetLastFcntDown+0x24>)
 8012e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e58:	08012e69 	.word	0x08012e69
 8012e5c:	08012e81 	.word	0x08012e81
 8012e60:	08012e99 	.word	0x08012e99
 8012e64:	08012eb1 	.word	0x08012eb1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012e68:	4b18      	ldr	r3, [pc, #96]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	691a      	ldr	r2, [r3, #16]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012e72:	4b16      	ldr	r3, [pc, #88]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	4b15      	ldr	r3, [pc, #84]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	6912      	ldr	r2, [r2, #16]
 8012e7c:	621a      	str	r2, [r3, #32]
            break;
 8012e7e:	e01f      	b.n	8012ec0 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012e80:	4b12      	ldr	r3, [pc, #72]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	695a      	ldr	r2, [r3, #20]
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012e8a:	4b10      	ldr	r3, [pc, #64]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b0f      	ldr	r3, [pc, #60]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	6952      	ldr	r2, [r2, #20]
 8012e94:	621a      	str	r2, [r3, #32]
            break;
 8012e96:	e013      	b.n	8012ec0 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012e98:	4b0c      	ldr	r3, [pc, #48]	; (8012ecc <GetLastFcntDown+0x98>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	699a      	ldr	r2, [r3, #24]
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012ea2:	4b0a      	ldr	r3, [pc, #40]	; (8012ecc <GetLastFcntDown+0x98>)
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <GetLastFcntDown+0x98>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	6992      	ldr	r2, [r2, #24]
 8012eac:	621a      	str	r2, [r3, #32]
            break;
 8012eae:	e007      	b.n	8012ec0 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012eb0:	4b06      	ldr	r3, [pc, #24]	; (8012ecc <GetLastFcntDown+0x98>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	69da      	ldr	r2, [r3, #28]
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	601a      	str	r2, [r3, #0]
            break;
 8012eba:	e001      	b.n	8012ec0 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012ebc:	2305      	movs	r3, #5
 8012ebe:	e000      	b.n	8012ec2 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012ec0:	2300      	movs	r3, #0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	370c      	adds	r7, #12
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bc80      	pop	{r7}
 8012eca:	4770      	bx	lr
 8012ecc:	20000ebc 	.word	0x20000ebc

08012ed0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b084      	sub	sp, #16
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	6039      	str	r1, [r7, #0]
 8012eda:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012edc:	2300      	movs	r3, #0
 8012ede:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012ee0:	f107 020c 	add.w	r2, r7, #12
 8012ee4:	79fb      	ldrb	r3, [r7, #7]
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7ff ffa3 	bl	8012e34 <GetLastFcntDown>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d001      	beq.n	8012ef8 <CheckFCntDown+0x28>
    {
        return false;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	e00a      	b.n	8012f0e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	683a      	ldr	r2, [r7, #0]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d803      	bhi.n	8012f08 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012f00:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f06:	d101      	bne.n	8012f0c <CheckFCntDown+0x3c>
    {
        return true;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e000      	b.n	8012f0e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012f0c:	2300      	movs	r3, #0
    }
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
	...

08012f18 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	6039      	str	r1, [r7, #0]
 8012f22:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012f24:	79fb      	ldrb	r3, [r7, #7]
 8012f26:	3b01      	subs	r3, #1
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d81f      	bhi.n	8012f6c <UpdateFCntDown+0x54>
 8012f2c:	a201      	add	r2, pc, #4	; (adr r2, 8012f34 <UpdateFCntDown+0x1c>)
 8012f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f32:	bf00      	nop
 8012f34:	08012f45 	.word	0x08012f45
 8012f38:	08012f4f 	.word	0x08012f4f
 8012f3c:	08012f59 	.word	0x08012f59
 8012f40:	08012f63 	.word	0x08012f63
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012f44:	4b0c      	ldr	r3, [pc, #48]	; (8012f78 <UpdateFCntDown+0x60>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	611a      	str	r2, [r3, #16]
            break;
 8012f4c:	e00f      	b.n	8012f6e <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012f4e:	4b0a      	ldr	r3, [pc, #40]	; (8012f78 <UpdateFCntDown+0x60>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	615a      	str	r2, [r3, #20]
            break;
 8012f56:	e00a      	b.n	8012f6e <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012f58:	4b07      	ldr	r3, [pc, #28]	; (8012f78 <UpdateFCntDown+0x60>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	619a      	str	r2, [r3, #24]
            break;
 8012f60:	e005      	b.n	8012f6e <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012f62:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <UpdateFCntDown+0x60>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	683a      	ldr	r2, [r7, #0]
 8012f68:	61da      	str	r2, [r3, #28]
            break;
 8012f6a:	e000      	b.n	8012f6e <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012f6c:	bf00      	nop
    }
}
 8012f6e:	bf00      	nop
 8012f70:	370c      	adds	r7, #12
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bc80      	pop	{r7}
 8012f76:	4770      	bx	lr
 8012f78:	20000ebc 	.word	0x20000ebc

08012f7c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b083      	sub	sp, #12
 8012f80:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012f82:	4b18      	ldr	r3, [pc, #96]	; (8012fe4 <ResetFCnts+0x68>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2200      	movs	r2, #0
 8012f88:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f8a:	4b16      	ldr	r3, [pc, #88]	; (8012fe4 <ResetFCnts+0x68>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f92:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f94:	4b13      	ldr	r3, [pc, #76]	; (8012fe4 <ResetFCnts+0x68>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8012f9e:	4b11      	ldr	r3, [pc, #68]	; (8012fe4 <ResetFCnts+0x68>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012fa8:	4b0e      	ldr	r3, [pc, #56]	; (8012fe4 <ResetFCnts+0x68>)
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	4b0d      	ldr	r3, [pc, #52]	; (8012fe4 <ResetFCnts+0x68>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	6992      	ldr	r2, [r2, #24]
 8012fb2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	607b      	str	r3, [r7, #4]
 8012fb8:	e00b      	b.n	8012fd2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8012fba:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <ResetFCnts+0x68>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	3306      	adds	r3, #6
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8012fca:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	607b      	str	r3, [r7, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	ddf0      	ble.n	8012fba <ResetFCnts+0x3e>
    }
}
 8012fd8:	bf00      	nop
 8012fda:	bf00      	nop
 8012fdc:	370c      	adds	r7, #12
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bc80      	pop	{r7}
 8012fe2:	4770      	bx	lr
 8012fe4:	20000ebc 	.word	0x20000ebc

08012fe8 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012ff6:	2309      	movs	r3, #9
 8012ff8:	e01c      	b.n	8013034 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012ffa:	4a10      	ldr	r2, [pc, #64]	; (801303c <LoRaMacCryptoInit+0x54>)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013000:	4b0e      	ldr	r3, [pc, #56]	; (801303c <LoRaMacCryptoInit+0x54>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2228      	movs	r2, #40	; 0x28
 8013006:	2100      	movs	r1, #0
 8013008:	4618      	mov	r0, r3
 801300a:	f003 fa09 	bl	8016420 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801300e:	4b0b      	ldr	r3, [pc, #44]	; (801303c <LoRaMacCryptoInit+0x54>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	2201      	movs	r2, #1
 8013014:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013016:	4b09      	ldr	r3, [pc, #36]	; (801303c <LoRaMacCryptoInit+0x54>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2201      	movs	r2, #1
 801301c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801301e:	4b07      	ldr	r3, [pc, #28]	; (801303c <LoRaMacCryptoInit+0x54>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2201      	movs	r2, #1
 8013024:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013026:	4b05      	ldr	r3, [pc, #20]	; (801303c <LoRaMacCryptoInit+0x54>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2200      	movs	r2, #0
 801302c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801302e:	f7ff ffa5 	bl	8012f7c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013032:	2300      	movs	r3, #0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3708      	adds	r7, #8
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	20000ebc 	.word	0x20000ebc

08013040 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013048:	4b04      	ldr	r3, [pc, #16]	; (801305c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013050:	2300      	movs	r3, #0
}
 8013052:	4618      	mov	r0, r3
 8013054:	370c      	adds	r7, #12
 8013056:	46bd      	mov	sp, r7
 8013058:	bc80      	pop	{r7}
 801305a:	4770      	bx	lr
 801305c:	20000ebc 	.word	0x20000ebc

08013060 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d101      	bne.n	8013072 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801306e:	230a      	movs	r3, #10
 8013070:	e006      	b.n	8013080 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013072:	4b06      	ldr	r3, [pc, #24]	; (801308c <LoRaMacCryptoGetFCntUp+0x2c>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	1c5a      	adds	r2, r3, #1
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801307e:	2300      	movs	r3, #0
}
 8013080:	4618      	mov	r0, r3
 8013082:	370c      	adds	r7, #12
 8013084:	46bd      	mov	sp, r7
 8013086:	bc80      	pop	{r7}
 8013088:	4770      	bx	lr
 801308a:	bf00      	nop
 801308c:	20000ebc 	.word	0x20000ebc

08013090 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013090:	b5b0      	push	{r4, r5, r7, lr}
 8013092:	b088      	sub	sp, #32
 8013094:	af00      	add	r7, sp, #0
 8013096:	60ba      	str	r2, [r7, #8]
 8013098:	607b      	str	r3, [r7, #4]
 801309a:	4603      	mov	r3, r0
 801309c:	73fb      	strb	r3, [r7, #15]
 801309e:	460b      	mov	r3, r1
 80130a0:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 80130a2:	2300      	movs	r3, #0
 80130a4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80130a6:	2300      	movs	r3, #0
 80130a8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80130aa:	2313      	movs	r3, #19
 80130ac:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d101      	bne.n	80130b8 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80130b4:	230a      	movs	r3, #10
 80130b6:	e04f      	b.n	8013158 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80130b8:	f107 0214 	add.w	r2, r7, #20
 80130bc:	7bfb      	ldrb	r3, [r7, #15]
 80130be:	4611      	mov	r1, r2
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7ff feb7 	bl	8012e34 <GetLastFcntDown>
 80130c6:	4603      	mov	r3, r0
 80130c8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80130ca:	7efb      	ldrb	r3, [r7, #27]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d001      	beq.n	80130d4 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 80130d0:	7efb      	ldrb	r3, [r7, #27]
 80130d2:	e041      	b.n	8013158 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130da:	d103      	bne.n	80130e4 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	68ba      	ldr	r2, [r7, #8]
 80130e0:	601a      	str	r2, [r3, #0]
 80130e2:	e01e      	b.n	8013122 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	dd05      	ble.n	8013100 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80130f4:	697a      	ldr	r2, [r7, #20]
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	441a      	add	r2, r3
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	601a      	str	r2, [r3, #0]
 80130fe:	e010      	b.n	8013122 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d104      	bne.n	8013110 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013106:	697a      	ldr	r2, [r7, #20]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801310c:	2307      	movs	r3, #7
 801310e:	e023      	b.n	8013158 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	0c1b      	lsrs	r3, r3, #16
 8013114:	041b      	lsls	r3, r3, #16
 8013116:	68ba      	ldr	r2, [r7, #8]
 8013118:	4413      	add	r3, r2
 801311a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013122:	4b0f      	ldr	r3, [pc, #60]	; (8013160 <LoRaMacCryptoGetFCntDown+0xd0>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	789b      	ldrb	r3, [r3, #2]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d114      	bne.n	8013156 <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4618      	mov	r0, r3
 8013132:	f04f 0100 	mov.w	r1, #0
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	461a      	mov	r2, r3
 801313a:	f04f 0300 	mov.w	r3, #0
 801313e:	1a84      	subs	r4, r0, r2
 8013140:	eb61 0503 	sbc.w	r5, r1, r3
 8013144:	89ba      	ldrh	r2, [r7, #12]
 8013146:	f04f 0300 	mov.w	r3, #0
 801314a:	4294      	cmp	r4, r2
 801314c:	eb75 0303 	sbcs.w	r3, r5, r3
 8013150:	db01      	blt.n	8013156 <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013152:	2308      	movs	r3, #8
 8013154:	e000      	b.n	8013158 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013156:	2300      	movs	r3, #0
}
 8013158:	4618      	mov	r0, r3
 801315a:	3720      	adds	r7, #32
 801315c:	46bd      	mov	sp, r7
 801315e:	bdb0      	pop	{r4, r5, r7, pc}
 8013160:	20000ebc 	.word	0x20000ebc

08013164 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013164:	b480      	push	{r7}
 8013166:	b085      	sub	sp, #20
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d101      	bne.n	8013176 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013172:	230a      	movs	r3, #10
 8013174:	e017      	b.n	80131a6 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013176:	2300      	movs	r3, #0
 8013178:	60fb      	str	r3, [r7, #12]
 801317a:	e010      	b.n	801319e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801317c:	4b0c      	ldr	r3, [pc, #48]	; (80131b0 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801317e:	6819      	ldr	r1, [r3, #0]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	222c      	movs	r2, #44	; 0x2c
 8013184:	fb02 f303 	mul.w	r3, r2, r3
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	4413      	add	r3, r2
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	3206      	adds	r2, #6
 8013190:	0092      	lsls	r2, r2, #2
 8013192:	440a      	add	r2, r1
 8013194:	3204      	adds	r2, #4
 8013196:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	3301      	adds	r3, #1
 801319c:	60fb      	str	r3, [r7, #12]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	ddeb      	ble.n	801317c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3714      	adds	r7, #20
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bc80      	pop	{r7}
 80131ae:	4770      	bx	lr
 80131b0:	20000ebc 	.word	0x20000ebc

080131b4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	6039      	str	r1, [r7, #0]
 80131be:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	6839      	ldr	r1, [r7, #0]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f8 fdbb 	bl	800bd40 <SecureElementSetKey>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131d0:	230f      	movs	r3, #15
 80131d2:	e018      	b.n	8013206 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80131d4:	79fb      	ldrb	r3, [r7, #7]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d114      	bne.n	8013204 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80131da:	4b0d      	ldr	r3, [pc, #52]	; (8013210 <LoRaMacCryptoSetKey+0x5c>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	789b      	ldrb	r3, [r3, #2]
 80131e0:	79fa      	ldrb	r2, [r7, #7]
 80131e2:	4611      	mov	r1, r2
 80131e4:	4618      	mov	r0, r3
 80131e6:	f000 fa3f 	bl	8013668 <LoRaMacCryptoDeriveMcRootKey>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80131f0:	230f      	movs	r3, #15
 80131f2:	e008      	b.n	8013206 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80131f4:	2004      	movs	r0, #4
 80131f6:	f000 fa62 	bl	80136be <LoRaMacCryptoDeriveMcKEKey>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013200:	230f      	movs	r3, #15
 8013202:	e000      	b.n	8013206 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	20000ebc 	.word	0x20000ebc

08013214 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af02      	add	r7, sp, #8
 801321a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d101      	bne.n	8013226 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013222:	230a      	movs	r3, #10
 8013224:	e033      	b.n	801328e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013226:	2301      	movs	r3, #1
 8013228:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801322a:	2300      	movs	r3, #0
 801322c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801322e:	f107 0308 	add.w	r3, r7, #8
 8013232:	4618      	mov	r0, r3
 8013234:	f7f8 ff4a 	bl	800c0cc <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	4b17      	ldr	r3, [pc, #92]	; (8013298 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	b292      	uxth	r2, r2
 8013240:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013242:	4b15      	ldr	r3, [pc, #84]	; (8013298 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	889a      	ldrh	r2, [r3, #4]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 fc18 	bl	8013a82 <LoRaMacSerializerJoinRequest>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d001      	beq.n	801325c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013258:	2311      	movs	r3, #17
 801325a:	e018      	b.n	801328e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6819      	ldr	r1, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	3318      	adds	r3, #24
 8013264:	7bfa      	ldrb	r2, [r7, #15]
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	4613      	mov	r3, r2
 801326a:	2213      	movs	r2, #19
 801326c:	2000      	movs	r0, #0
 801326e:	f7f8 fdc5 	bl	800bdfc <SecureElementComputeAesCmac>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d001      	beq.n	801327c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013278:	230f      	movs	r3, #15
 801327a:	e008      	b.n	801328e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 fc00 	bl	8013a82 <LoRaMacSerializerJoinRequest>
 8013282:	4603      	mov	r3, r0
 8013284:	2b00      	cmp	r3, #0
 8013286:	d001      	beq.n	801328c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013288:	2311      	movs	r3, #17
 801328a:	e000      	b.n	801328e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801328c:	2300      	movs	r3, #0
}
 801328e:	4618      	mov	r0, r3
 8013290:	3710      	adds	r7, #16
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	20000ebc 	.word	0x20000ebc

0801329c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801329c:	b590      	push	{r4, r7, lr}
 801329e:	b097      	sub	sp, #92	; 0x5c
 80132a0:	af04      	add	r7, sp, #16
 80132a2:	4603      	mov	r3, r0
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d101      	bne.n	80132ba <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132b6:	230a      	movs	r3, #10
 80132b8:	e0bd      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80132ba:	2313      	movs	r3, #19
 80132bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80132c0:	2300      	movs	r3, #0
 80132c2:	61bb      	str	r3, [r7, #24]
 80132c4:	f107 031c 	add.w	r3, r7, #28
 80132c8:	221d      	movs	r2, #29
 80132ca:	2100      	movs	r1, #0
 80132cc:	4618      	mov	r0, r3
 80132ce:	f007 fd4b 	bl	801ad68 <memset>
    uint8_t versionMinor         = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80132d6:	4b5a      	ldr	r3, [pc, #360]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	889b      	ldrh	r3, [r3, #4]
 80132dc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681c      	ldr	r4, [r3, #0]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	791b      	ldrb	r3, [r3, #4]
 80132e8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80132ec:	7bf8      	ldrb	r0, [r7, #15]
 80132ee:	f107 0217 	add.w	r2, r7, #23
 80132f2:	9202      	str	r2, [sp, #8]
 80132f4:	f107 0218 	add.w	r2, r7, #24
 80132f8:	9201      	str	r2, [sp, #4]
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4623      	mov	r3, r4
 80132fe:	460a      	mov	r2, r1
 8013300:	68b9      	ldr	r1, [r7, #8]
 8013302:	f7f8 fe66 	bl	800bfd2 <SecureElementProcessJoinAccept>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801330c:	230f      	movs	r3, #15
 801330e:	e092      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6818      	ldr	r0, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	791b      	ldrb	r3, [r3, #4]
 8013318:	b29a      	uxth	r2, r3
 801331a:	f107 0318 	add.w	r3, r7, #24
 801331e:	4619      	mov	r1, r3
 8013320:	f003 f843 	bl	80163aa <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f000 f9ed 	bl	8013704 <LoRaMacParserJoinAccept>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d001      	beq.n	8013334 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013330:	2310      	movs	r3, #16
 8013332:	e080      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	799b      	ldrb	r3, [r3, #6]
 8013338:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	79db      	ldrb	r3, [r3, #7]
 801333e:	021b      	lsls	r3, r3, #8
 8013340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013342:	4313      	orrs	r3, r2
 8013344:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	7a1b      	ldrb	r3, [r3, #8]
 801334a:	041b      	lsls	r3, r3, #16
 801334c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801334e:	4313      	orrs	r3, r2
 8013350:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013352:	4b3b      	ldr	r3, [pc, #236]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801335a:	429a      	cmp	r2, r3
 801335c:	d010      	beq.n	8013380 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801335e:	4b38      	ldr	r3, [pc, #224]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013364:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013366:	7dfb      	ldrb	r3, [r7, #23]
 8013368:	2100      	movs	r1, #0
 801336a:	4618      	mov	r0, r3
 801336c:	f000 f97c 	bl	8013668 <LoRaMacCryptoDeriveMcRootKey>
 8013370:	4603      	mov	r3, r0
 8013372:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013376:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801337a:	2b00      	cmp	r3, #0
 801337c:	d005      	beq.n	801338a <LoRaMacCryptoHandleJoinAccept+0xee>
 801337e:	e001      	b.n	8013384 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013380:	2303      	movs	r3, #3
 8013382:	e058      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013388:	e055      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801338a:	2004      	movs	r0, #4
 801338c:	f000 f997 	bl	80136be <LoRaMacCryptoDeriveMcKEKey>
 8013390:	4603      	mov	r3, r0
 8013392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801339a:	2b00      	cmp	r3, #0
 801339c:	d002      	beq.n	80133a4 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801339e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133a2:	e048      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	7a5b      	ldrb	r3, [r3, #9]
 80133a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7a9b      	ldrb	r3, [r3, #10]
 80133ae:	021b      	lsls	r3, r3, #8
 80133b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133b2:	4313      	orrs	r3, r2
 80133b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	7adb      	ldrb	r3, [r3, #11]
 80133ba:	041b      	lsls	r3, r3, #16
 80133bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133be:	4313      	orrs	r3, r2
 80133c0:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80133c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80133c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133ca:	2003      	movs	r0, #3
 80133cc:	f7ff fce2 	bl	8012d94 <DeriveSessionKey10x>
 80133d0:	4603      	mov	r3, r0
 80133d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d002      	beq.n	80133e4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80133de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133e2:	e028      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80133e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80133e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80133ec:	2002      	movs	r0, #2
 80133ee:	f7ff fcd1 	bl	8012d94 <DeriveSessionKey10x>
 80133f2:	4603      	mov	r3, r0
 80133f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80133f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d002      	beq.n	8013406 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013404:	e017      	b.n	8013436 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013406:	4b0e      	ldr	r3, [pc, #56]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	7dfa      	ldrb	r2, [r7, #23]
 801340c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 801340e:	4b0c      	ldr	r3, [pc, #48]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2200      	movs	r2, #0
 8013414:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013416:	4b0a      	ldr	r3, [pc, #40]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f04f 32ff 	mov.w	r2, #4294967295
 801341e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013420:	4b07      	ldr	r3, [pc, #28]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	f04f 32ff 	mov.w	r2, #4294967295
 8013428:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801342a:	4b05      	ldr	r3, [pc, #20]	; (8013440 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f04f 32ff 	mov.w	r2, #4294967295
 8013432:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013434:	2300      	movs	r3, #0
}
 8013436:	4618      	mov	r0, r3
 8013438:	374c      	adds	r7, #76	; 0x4c
 801343a:	46bd      	mov	sp, r7
 801343c:	bd90      	pop	{r4, r7, pc}
 801343e:	bf00      	nop
 8013440:	20000ebc 	.word	0x20000ebc

08013444 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013444:	b590      	push	{r4, r7, lr}
 8013446:	b08b      	sub	sp, #44	; 0x2c
 8013448:	af04      	add	r7, sp, #16
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	607b      	str	r3, [r7, #4]
 801344e:	460b      	mov	r3, r1
 8013450:	72fb      	strb	r3, [r7, #11]
 8013452:	4613      	mov	r3, r2
 8013454:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013456:	2313      	movs	r3, #19
 8013458:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801345a:	2303      	movs	r3, #3
 801345c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d101      	bne.n	8013468 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013464:	230a      	movs	r3, #10
 8013466:	e05f      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013468:	4b31      	ldr	r3, [pc, #196]	; (8013530 <LoRaMacCryptoSecureMessage+0xec>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	68db      	ldr	r3, [r3, #12]
 801346e:	68fa      	ldr	r2, [r7, #12]
 8013470:	429a      	cmp	r2, r3
 8013472:	d201      	bcs.n	8013478 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013474:	2306      	movs	r3, #6
 8013476:	e057      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d101      	bne.n	8013486 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013482:	2302      	movs	r3, #2
 8013484:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013486:	4b2a      	ldr	r3, [pc, #168]	; (8013530 <LoRaMacCryptoSecureMessage+0xec>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	429a      	cmp	r2, r3
 8013490:	d916      	bls.n	80134c0 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801349c:	b219      	sxth	r1, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	689c      	ldr	r4, [r3, #8]
 80134a2:	7dfa      	ldrb	r2, [r7, #23]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	9301      	str	r3, [sp, #4]
 80134a8:	2300      	movs	r3, #0
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	4623      	mov	r3, r4
 80134ae:	f7ff faa3 	bl	80129f8 <PayloadEncrypt>
 80134b2:	4603      	mov	r3, r0
 80134b4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134b6:	7dbb      	ldrb	r3, [r7, #22]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d001      	beq.n	80134c0 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80134bc:	7dbb      	ldrb	r3, [r7, #22]
 80134be:	e033      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 fb60 	bl	8013b86 <LoRaMacSerializerData>
 80134c6:	4603      	mov	r3, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d001      	beq.n	80134d0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80134cc:	2311      	movs	r3, #17
 80134ce:	e02b      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80134d0:	2302      	movs	r3, #2
 80134d2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6818      	ldr	r0, [r3, #0]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	791b      	ldrb	r3, [r3, #4]
 80134dc:	b29b      	uxth	r3, r3
 80134de:	3b04      	subs	r3, #4
 80134e0:	b299      	uxth	r1, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	322c      	adds	r2, #44	; 0x2c
 80134ea:	7dfc      	ldrb	r4, [r7, #23]
 80134ec:	9203      	str	r2, [sp, #12]
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	9202      	str	r2, [sp, #8]
 80134f2:	9301      	str	r3, [sp, #4]
 80134f4:	2300      	movs	r3, #0
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	2300      	movs	r3, #0
 80134fa:	4622      	mov	r2, r4
 80134fc:	f7ff fb7e 	bl	8012bfc <ComputeCmacB0>
 8013500:	4603      	mov	r3, r0
 8013502:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013504:	7dbb      	ldrb	r3, [r7, #22]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 801350a:	7dbb      	ldrb	r3, [r7, #22]
 801350c:	e00c      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 fb39 	bl	8013b86 <LoRaMacSerializerData>
 8013514:	4603      	mov	r3, r0
 8013516:	2b00      	cmp	r3, #0
 8013518:	d001      	beq.n	801351e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801351a:	2311      	movs	r3, #17
 801351c:	e004      	b.n	8013528 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801351e:	4b04      	ldr	r3, [pc, #16]	; (8013530 <LoRaMacCryptoSecureMessage+0xec>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013526:	2300      	movs	r3, #0
}
 8013528:	4618      	mov	r0, r3
 801352a:	371c      	adds	r7, #28
 801352c:	46bd      	mov	sp, r7
 801352e:	bd90      	pop	{r4, r7, pc}
 8013530:	20000ebc 	.word	0x20000ebc

08013534 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013534:	b590      	push	{r4, r7, lr}
 8013536:	b08b      	sub	sp, #44	; 0x2c
 8013538:	af04      	add	r7, sp, #16
 801353a:	60b9      	str	r1, [r7, #8]
 801353c:	607b      	str	r3, [r7, #4]
 801353e:	4603      	mov	r3, r0
 8013540:	73fb      	strb	r3, [r7, #15]
 8013542:	4613      	mov	r3, r2
 8013544:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	2b00      	cmp	r3, #0
 801354a:	d101      	bne.n	8013550 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801354c:	230a      	movs	r3, #10
 801354e:	e084      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013550:	7bbb      	ldrb	r3, [r7, #14]
 8013552:	6879      	ldr	r1, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	f7ff fcbb 	bl	8012ed0 <CheckFCntDown>
 801355a:	4603      	mov	r3, r0
 801355c:	f083 0301 	eor.w	r3, r3, #1
 8013560:	b2db      	uxtb	r3, r3
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013566:	2306      	movs	r3, #6
 8013568:	e077      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801356a:	2313      	movs	r3, #19
 801356c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801356e:	2303      	movs	r3, #3
 8013570:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013572:	2302      	movs	r3, #2
 8013574:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013578:	f000 f98f 	bl	801389a <LoRaMacParserData>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013582:	2310      	movs	r3, #16
 8013584:	e069      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013586:	f107 0210 	add.w	r2, r7, #16
 801358a:	7bfb      	ldrb	r3, [r7, #15]
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f7ff fbda 	bl	8012d48 <GetKeyAddrItem>
 8013594:	4603      	mov	r3, r0
 8013596:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013598:	7d7b      	ldrb	r3, [r7, #21]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d001      	beq.n	80135a2 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801359e:	7d7b      	ldrb	r3, [r7, #21]
 80135a0:	e05b      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	785b      	ldrb	r3, [r3, #1]
 80135a6:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	789b      	ldrb	r3, [r3, #2]
 80135ac:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80135ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	68ba      	ldr	r2, [r7, #8]
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d001      	beq.n	80135bc <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80135b8:	2302      	movs	r3, #2
 80135ba:	e04e      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80135bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135be:	7b1b      	ldrb	r3, [r3, #12]
 80135c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	bf14      	ite	ne
 80135ca:	2301      	movne	r3, #1
 80135cc:	2300      	moveq	r3, #0
 80135ce:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80135d0:	4b24      	ldr	r3, [pc, #144]	; (8013664 <LoRaMacCryptoUnsecureMessage+0x130>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	789b      	ldrb	r3, [r3, #2]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d101      	bne.n	80135de <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80135da:	2300      	movs	r3, #0
 80135dc:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80135de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e0:	6818      	ldr	r0, [r3, #0]
 80135e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e4:	791b      	ldrb	r3, [r3, #4]
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	3b04      	subs	r3, #4
 80135ea:	b299      	uxth	r1, r3
 80135ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f0:	7dbc      	ldrb	r4, [r7, #22]
 80135f2:	7d3a      	ldrb	r2, [r7, #20]
 80135f4:	9303      	str	r3, [sp, #12]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	9302      	str	r3, [sp, #8]
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	9301      	str	r3, [sp, #4]
 80135fe:	2301      	movs	r3, #1
 8013600:	9300      	str	r3, [sp, #0]
 8013602:	4623      	mov	r3, r4
 8013604:	f7ff fb38 	bl	8012c78 <VerifyCmacB0>
 8013608:	4603      	mov	r3, r0
 801360a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801360c:	7d7b      	ldrb	r3, [r7, #21]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d001      	beq.n	8013616 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013612:	7d7b      	ldrb	r3, [r7, #21]
 8013614:	e021      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	f893 3020 	ldrb.w	r3, [r3, #32]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013620:	2302      	movs	r3, #2
 8013622:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013626:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801362e:	b219      	sxth	r1, r3
 8013630:	7dfa      	ldrb	r2, [r7, #23]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	9301      	str	r3, [sp, #4]
 8013636:	2301      	movs	r3, #1
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	f7ff f9dc 	bl	80129f8 <PayloadEncrypt>
 8013640:	4603      	mov	r3, r0
 8013642:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013644:	7d7b      	ldrb	r3, [r7, #21]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801364a:	7d7b      	ldrb	r3, [r7, #21]
 801364c:	e005      	b.n	801365a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801364e:	7bbb      	ldrb	r3, [r7, #14]
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7ff fc60 	bl	8012f18 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013658:	2300      	movs	r3, #0
}
 801365a:	4618      	mov	r0, r3
 801365c:	371c      	adds	r7, #28
 801365e:	46bd      	mov	sp, r7
 8013660:	bd90      	pop	{r4, r7, pc}
 8013662:	bf00      	nop
 8013664:	20000ebc 	.word	0x20000ebc

08013668 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af00      	add	r7, sp, #0
 801366e:	4603      	mov	r3, r0
 8013670:	460a      	mov	r2, r1
 8013672:	71fb      	strb	r3, [r7, #7]
 8013674:	4613      	mov	r3, r2
 8013676:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013678:	79bb      	ldrb	r3, [r7, #6]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d001      	beq.n	8013682 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801367e:	230b      	movs	r3, #11
 8013680:	e019      	b.n	80136b6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013682:	2300      	movs	r3, #0
 8013684:	60bb      	str	r3, [r7, #8]
 8013686:	f107 030c 	add.w	r3, r7, #12
 801368a:	2200      	movs	r2, #0
 801368c:	601a      	str	r2, [r3, #0]
 801368e:	605a      	str	r2, [r3, #4]
 8013690:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013692:	79fb      	ldrb	r3, [r7, #7]
 8013694:	2b01      	cmp	r3, #1
 8013696:	d101      	bne.n	801369c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013698:	2320      	movs	r3, #32
 801369a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801369c:	79b9      	ldrb	r1, [r7, #6]
 801369e:	f107 0308 	add.w	r3, r7, #8
 80136a2:	2204      	movs	r2, #4
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7f8 fc54 	bl	800bf52 <SecureElementDeriveAndStoreKey>
 80136aa:	4603      	mov	r3, r0
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d001      	beq.n	80136b4 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136b0:	230f      	movs	r3, #15
 80136b2:	e000      	b.n	80136b6 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136b4:	2300      	movs	r3, #0
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3718      	adds	r7, #24
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b086      	sub	sp, #24
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	4603      	mov	r3, r0
 80136c6:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80136c8:	79fb      	ldrb	r3, [r7, #7]
 80136ca:	2b04      	cmp	r3, #4
 80136cc:	d001      	beq.n	80136d2 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80136ce:	230b      	movs	r3, #11
 80136d0:	e014      	b.n	80136fc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80136d2:	2300      	movs	r3, #0
 80136d4:	60bb      	str	r3, [r7, #8]
 80136d6:	f107 030c 	add.w	r3, r7, #12
 80136da:	2200      	movs	r2, #0
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	605a      	str	r2, [r3, #4]
 80136e0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80136e2:	79f9      	ldrb	r1, [r7, #7]
 80136e4:	f107 0308 	add.w	r3, r7, #8
 80136e8:	227f      	movs	r2, #127	; 0x7f
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7f8 fc31 	bl	800bf52 <SecureElementDeriveAndStoreKey>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d001      	beq.n	80136fa <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136f6:	230f      	movs	r3, #15
 80136f8:	e000      	b.n	80136fc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3718      	adds	r7, #24
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b084      	sub	sp, #16
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d003      	beq.n	801371a <LoRaMacParserJoinAccept+0x16>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d101      	bne.n	801371e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801371a:	2302      	movs	r3, #2
 801371c:	e0b9      	b.n	8013892 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801371e:	2300      	movs	r3, #0
 8013720:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	89fb      	ldrh	r3, [r7, #14]
 8013728:	1c59      	adds	r1, r3, #1
 801372a:	81f9      	strh	r1, [r7, #14]
 801372c:	4413      	add	r3, r2
 801372e:	781a      	ldrb	r2, [r3, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	1d98      	adds	r0, r3, #6
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	89fb      	ldrh	r3, [r7, #14]
 801373e:	4413      	add	r3, r2
 8013740:	2203      	movs	r2, #3
 8013742:	4619      	mov	r1, r3
 8013744:	f002 fe31 	bl	80163aa <memcpy1>
    bufItr = bufItr + 3;
 8013748:	89fb      	ldrh	r3, [r7, #14]
 801374a:	3303      	adds	r3, #3
 801374c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f103 0009 	add.w	r0, r3, #9
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681a      	ldr	r2, [r3, #0]
 8013758:	89fb      	ldrh	r3, [r7, #14]
 801375a:	4413      	add	r3, r2
 801375c:	2203      	movs	r2, #3
 801375e:	4619      	mov	r1, r3
 8013760:	f002 fe23 	bl	80163aa <memcpy1>
    bufItr = bufItr + 3;
 8013764:	89fb      	ldrh	r3, [r7, #14]
 8013766:	3303      	adds	r3, #3
 8013768:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	89fb      	ldrh	r3, [r7, #14]
 8013770:	1c59      	adds	r1, r3, #1
 8013772:	81f9      	strh	r1, [r7, #14]
 8013774:	4413      	add	r3, r2
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	461a      	mov	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	89fb      	ldrh	r3, [r7, #14]
 8013784:	1c59      	adds	r1, r3, #1
 8013786:	81f9      	strh	r1, [r7, #14]
 8013788:	4413      	add	r3, r2
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	021a      	lsls	r2, r3, #8
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	431a      	orrs	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	89fb      	ldrh	r3, [r7, #14]
 801379e:	1c59      	adds	r1, r3, #1
 80137a0:	81f9      	strh	r1, [r7, #14]
 80137a2:	4413      	add	r3, r2
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	041a      	lsls	r2, r3, #16
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	431a      	orrs	r2, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	89fb      	ldrh	r3, [r7, #14]
 80137b8:	1c59      	adds	r1, r3, #1
 80137ba:	81f9      	strh	r1, [r7, #14]
 80137bc:	4413      	add	r3, r2
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	061a      	lsls	r2, r3, #24
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	431a      	orrs	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681a      	ldr	r2, [r3, #0]
 80137d0:	89fb      	ldrh	r3, [r7, #14]
 80137d2:	1c59      	adds	r1, r3, #1
 80137d4:	81f9      	strh	r1, [r7, #14]
 80137d6:	4413      	add	r3, r2
 80137d8:	781a      	ldrb	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	89fb      	ldrh	r3, [r7, #14]
 80137e4:	1c59      	adds	r1, r3, #1
 80137e6:	81f9      	strh	r1, [r7, #14]
 80137e8:	4413      	add	r3, r2
 80137ea:	781a      	ldrb	r2, [r3, #0]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	791b      	ldrb	r3, [r3, #4]
 80137f4:	1f1a      	subs	r2, r3, #4
 80137f6:	89fb      	ldrh	r3, [r7, #14]
 80137f8:	1ad3      	subs	r3, r2, r3
 80137fa:	2b10      	cmp	r3, #16
 80137fc:	d10e      	bne.n	801381c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f103 0012 	add.w	r0, r3, #18
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	89fb      	ldrh	r3, [r7, #14]
 801380a:	4413      	add	r3, r2
 801380c:	2210      	movs	r2, #16
 801380e:	4619      	mov	r1, r3
 8013810:	f002 fdcb 	bl	80163aa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013814:	89fb      	ldrh	r3, [r7, #14]
 8013816:	3310      	adds	r3, #16
 8013818:	81fb      	strh	r3, [r7, #14]
 801381a:	e008      	b.n	801382e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	791b      	ldrb	r3, [r3, #4]
 8013820:	1f1a      	subs	r2, r3, #4
 8013822:	89fb      	ldrh	r3, [r7, #14]
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	2b00      	cmp	r3, #0
 8013828:	dd01      	ble.n	801382e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801382a:	2301      	movs	r3, #1
 801382c:	e031      	b.n	8013892 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	89fb      	ldrh	r3, [r7, #14]
 8013834:	1c59      	adds	r1, r3, #1
 8013836:	81f9      	strh	r1, [r7, #14]
 8013838:	4413      	add	r3, r2
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	461a      	mov	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	89fb      	ldrh	r3, [r7, #14]
 8013848:	1c59      	adds	r1, r3, #1
 801384a:	81f9      	strh	r1, [r7, #14]
 801384c:	4413      	add	r3, r2
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	021a      	lsls	r2, r3, #8
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013856:	431a      	orrs	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	89fb      	ldrh	r3, [r7, #14]
 8013862:	1c59      	adds	r1, r3, #1
 8013864:	81f9      	strh	r1, [r7, #14]
 8013866:	4413      	add	r3, r2
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	041a      	lsls	r2, r3, #16
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013870:	431a      	orrs	r2, r3
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681a      	ldr	r2, [r3, #0]
 801387a:	89fb      	ldrh	r3, [r7, #14]
 801387c:	1c59      	adds	r1, r3, #1
 801387e:	81f9      	strh	r1, [r7, #14]
 8013880:	4413      	add	r3, r2
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	061a      	lsls	r2, r3, #24
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388a:	431a      	orrs	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013890:	2300      	movs	r3, #0
}
 8013892:	4618      	mov	r0, r3
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b084      	sub	sp, #16
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d003      	beq.n	80138b0 <LoRaMacParserData+0x16>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80138b0:	2302      	movs	r3, #2
 80138b2:	e0e2      	b.n	8013a7a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80138b4:	2300      	movs	r3, #0
 80138b6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	89fb      	ldrh	r3, [r7, #14]
 80138be:	1c59      	adds	r1, r3, #1
 80138c0:	81f9      	strh	r1, [r7, #14]
 80138c2:	4413      	add	r3, r2
 80138c4:	781a      	ldrb	r2, [r3, #0]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681a      	ldr	r2, [r3, #0]
 80138ce:	89fb      	ldrh	r3, [r7, #14]
 80138d0:	1c59      	adds	r1, r3, #1
 80138d2:	81f9      	strh	r1, [r7, #14]
 80138d4:	4413      	add	r3, r2
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	461a      	mov	r2, r3
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	89fb      	ldrh	r3, [r7, #14]
 80138e4:	1c59      	adds	r1, r3, #1
 80138e6:	81f9      	strh	r1, [r7, #14]
 80138e8:	4413      	add	r3, r2
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	021a      	lsls	r2, r3, #8
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	689b      	ldr	r3, [r3, #8]
 80138f2:	431a      	orrs	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	89fb      	ldrh	r3, [r7, #14]
 80138fe:	1c59      	adds	r1, r3, #1
 8013900:	81f9      	strh	r1, [r7, #14]
 8013902:	4413      	add	r3, r2
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	041a      	lsls	r2, r3, #16
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	431a      	orrs	r2, r3
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	89fb      	ldrh	r3, [r7, #14]
 8013918:	1c59      	adds	r1, r3, #1
 801391a:	81f9      	strh	r1, [r7, #14]
 801391c:	4413      	add	r3, r2
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	061a      	lsls	r2, r3, #24
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	689b      	ldr	r3, [r3, #8]
 8013926:	431a      	orrs	r2, r3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	89fb      	ldrh	r3, [r7, #14]
 8013932:	1c59      	adds	r1, r3, #1
 8013934:	81f9      	strh	r1, [r7, #14]
 8013936:	4413      	add	r3, r2
 8013938:	781a      	ldrb	r2, [r3, #0]
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	89fb      	ldrh	r3, [r7, #14]
 8013944:	1c59      	adds	r1, r3, #1
 8013946:	81f9      	strh	r1, [r7, #14]
 8013948:	4413      	add	r3, r2
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	b29a      	uxth	r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	89fb      	ldrh	r3, [r7, #14]
 8013958:	1c59      	adds	r1, r3, #1
 801395a:	81f9      	strh	r1, [r7, #14]
 801395c:	4413      	add	r3, r2
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	0219      	lsls	r1, r3, #8
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	89db      	ldrh	r3, [r3, #14]
 8013966:	b21a      	sxth	r2, r3
 8013968:	b20b      	sxth	r3, r1
 801396a:	4313      	orrs	r3, r2
 801396c:	b21b      	sxth	r3, r3
 801396e:	b29a      	uxth	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f103 0010 	add.w	r0, r3, #16
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	89fb      	ldrh	r3, [r7, #14]
 8013980:	18d1      	adds	r1, r2, r3
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	7b1b      	ldrb	r3, [r3, #12]
 8013986:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801398a:	b2db      	uxtb	r3, r3
 801398c:	b29b      	uxth	r3, r3
 801398e:	461a      	mov	r2, r3
 8013990:	f002 fd0b 	bl	80163aa <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	7b1b      	ldrb	r3, [r3, #12]
 8013998:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801399c:	b2db      	uxtb	r3, r3
 801399e:	b29a      	uxth	r2, r3
 80139a0:	89fb      	ldrh	r3, [r7, #14]
 80139a2:	4413      	add	r3, r2
 80139a4:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2200      	movs	r2, #0
 80139aa:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2200      	movs	r2, #0
 80139b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	791b      	ldrb	r3, [r3, #4]
 80139ba:	461a      	mov	r2, r3
 80139bc:	89fb      	ldrh	r3, [r7, #14]
 80139be:	1ad3      	subs	r3, r2, r3
 80139c0:	2b04      	cmp	r3, #4
 80139c2:	dd28      	ble.n	8013a16 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	89fb      	ldrh	r3, [r7, #14]
 80139ca:	1c59      	adds	r1, r3, #1
 80139cc:	81f9      	strh	r1, [r7, #14]
 80139ce:	4413      	add	r3, r2
 80139d0:	781a      	ldrb	r2, [r3, #0]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	791a      	ldrb	r2, [r3, #4]
 80139dc:	89fb      	ldrh	r3, [r7, #14]
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	1ad3      	subs	r3, r2, r3
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	3b04      	subs	r3, #4
 80139e6:	b2da      	uxtb	r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	89fb      	ldrh	r3, [r7, #14]
 80139f8:	18d1      	adds	r1, r2, r3
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	461a      	mov	r2, r3
 8013a04:	f002 fcd1 	bl	80163aa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	89fb      	ldrh	r3, [r7, #14]
 8013a12:	4413      	add	r3, r2
 8013a14:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	791b      	ldrb	r3, [r3, #4]
 8013a1e:	3b04      	subs	r3, #4
 8013a20:	4413      	add	r3, r2
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	461a      	mov	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6819      	ldr	r1, [r3, #0]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	791b      	ldrb	r3, [r3, #4]
 8013a36:	3b03      	subs	r3, #3
 8013a38:	440b      	add	r3, r1
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	021b      	lsls	r3, r3, #8
 8013a3e:	431a      	orrs	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6819      	ldr	r1, [r3, #0]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	791b      	ldrb	r3, [r3, #4]
 8013a50:	3b02      	subs	r3, #2
 8013a52:	440b      	add	r3, r1
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	041b      	lsls	r3, r3, #16
 8013a58:	431a      	orrs	r2, r3
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6819      	ldr	r1, [r3, #0]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	791b      	ldrb	r3, [r3, #4]
 8013a6a:	3b01      	subs	r3, #1
 8013a6c:	440b      	add	r3, r1
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	061b      	lsls	r3, r3, #24
 8013a72:	431a      	orrs	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013a78:	2300      	movs	r3, #0
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d003      	beq.n	8013a98 <LoRaMacSerializerJoinRequest+0x16>
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d101      	bne.n	8013a9c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	e070      	b.n	8013b7e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	791b      	ldrb	r3, [r3, #4]
 8013aa4:	2b16      	cmp	r3, #22
 8013aa6:	d801      	bhi.n	8013aac <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013aa8:	2302      	movs	r3, #2
 8013aaa:	e068      	b.n	8013b7e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	89fb      	ldrh	r3, [r7, #14]
 8013ab2:	1c59      	adds	r1, r3, #1
 8013ab4:	81f9      	strh	r1, [r7, #14]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	7952      	ldrb	r2, [r2, #5]
 8013abc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	89fb      	ldrh	r3, [r7, #14]
 8013ac4:	18d0      	adds	r0, r2, r3
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	3306      	adds	r3, #6
 8013aca:	2208      	movs	r2, #8
 8013acc:	4619      	mov	r1, r3
 8013ace:	f002 fc87 	bl	80163e0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013ad2:	89fb      	ldrh	r3, [r7, #14]
 8013ad4:	3308      	adds	r3, #8
 8013ad6:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	89fb      	ldrh	r3, [r7, #14]
 8013ade:	18d0      	adds	r0, r2, r3
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	330e      	adds	r3, #14
 8013ae4:	2208      	movs	r2, #8
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	f002 fc7a 	bl	80163e0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013aec:	89fb      	ldrh	r3, [r7, #14]
 8013aee:	3308      	adds	r3, #8
 8013af0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8ad9      	ldrh	r1, [r3, #22]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	89fb      	ldrh	r3, [r7, #14]
 8013afc:	1c58      	adds	r0, r3, #1
 8013afe:	81f8      	strh	r0, [r7, #14]
 8013b00:	4413      	add	r3, r2
 8013b02:	b2ca      	uxtb	r2, r1
 8013b04:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8adb      	ldrh	r3, [r3, #22]
 8013b0a:	0a1b      	lsrs	r3, r3, #8
 8013b0c:	b299      	uxth	r1, r3
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	89fb      	ldrh	r3, [r7, #14]
 8013b14:	1c58      	adds	r0, r3, #1
 8013b16:	81f8      	strh	r0, [r7, #14]
 8013b18:	4413      	add	r3, r2
 8013b1a:	b2ca      	uxtb	r2, r1
 8013b1c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6999      	ldr	r1, [r3, #24]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681a      	ldr	r2, [r3, #0]
 8013b26:	89fb      	ldrh	r3, [r7, #14]
 8013b28:	1c58      	adds	r0, r3, #1
 8013b2a:	81f8      	strh	r0, [r7, #14]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	b2ca      	uxtb	r2, r1
 8013b30:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	699b      	ldr	r3, [r3, #24]
 8013b36:	0a19      	lsrs	r1, r3, #8
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	89fb      	ldrh	r3, [r7, #14]
 8013b3e:	1c58      	adds	r0, r3, #1
 8013b40:	81f8      	strh	r0, [r7, #14]
 8013b42:	4413      	add	r3, r2
 8013b44:	b2ca      	uxtb	r2, r1
 8013b46:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	699b      	ldr	r3, [r3, #24]
 8013b4c:	0c19      	lsrs	r1, r3, #16
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	89fb      	ldrh	r3, [r7, #14]
 8013b54:	1c58      	adds	r0, r3, #1
 8013b56:	81f8      	strh	r0, [r7, #14]
 8013b58:	4413      	add	r3, r2
 8013b5a:	b2ca      	uxtb	r2, r1
 8013b5c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	699b      	ldr	r3, [r3, #24]
 8013b62:	0e19      	lsrs	r1, r3, #24
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	89fb      	ldrh	r3, [r7, #14]
 8013b6a:	1c58      	adds	r0, r3, #1
 8013b6c:	81f8      	strh	r0, [r7, #14]
 8013b6e:	4413      	add	r3, r2
 8013b70:	b2ca      	uxtb	r2, r1
 8013b72:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013b74:	89fb      	ldrh	r3, [r7, #14]
 8013b76:	b2da      	uxtb	r2, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}

08013b86 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b084      	sub	sp, #16
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d003      	beq.n	8013b9c <LoRaMacSerializerData+0x16>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d101      	bne.n	8013ba0 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e0e5      	b.n	8013d6c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013ba4:	2308      	movs	r3, #8
 8013ba6:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	7b1b      	ldrb	r3, [r3, #12]
 8013bac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013bb0:	b2db      	uxtb	r3, r3
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	89bb      	ldrh	r3, [r7, #12]
 8013bb6:	4413      	add	r3, r2
 8013bb8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d002      	beq.n	8013bca <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013bc4:	89bb      	ldrh	r3, [r7, #12]
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	89bb      	ldrh	r3, [r7, #12]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013bd8:	89bb      	ldrh	r3, [r7, #12]
 8013bda:	3304      	adds	r3, #4
 8013bdc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	791b      	ldrb	r3, [r3, #4]
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	89ba      	ldrh	r2, [r7, #12]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d901      	bls.n	8013bee <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013bea:	2302      	movs	r3, #2
 8013bec:	e0be      	b.n	8013d6c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	89fb      	ldrh	r3, [r7, #14]
 8013bf4:	1c59      	adds	r1, r3, #1
 8013bf6:	81f9      	strh	r1, [r7, #14]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	7952      	ldrb	r2, [r2, #5]
 8013bfe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6899      	ldr	r1, [r3, #8]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	89fb      	ldrh	r3, [r7, #14]
 8013c0a:	1c58      	adds	r0, r3, #1
 8013c0c:	81f8      	strh	r0, [r7, #14]
 8013c0e:	4413      	add	r3, r2
 8013c10:	b2ca      	uxtb	r2, r1
 8013c12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	0a19      	lsrs	r1, r3, #8
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681a      	ldr	r2, [r3, #0]
 8013c1e:	89fb      	ldrh	r3, [r7, #14]
 8013c20:	1c58      	adds	r0, r3, #1
 8013c22:	81f8      	strh	r0, [r7, #14]
 8013c24:	4413      	add	r3, r2
 8013c26:	b2ca      	uxtb	r2, r1
 8013c28:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	0c19      	lsrs	r1, r3, #16
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681a      	ldr	r2, [r3, #0]
 8013c34:	89fb      	ldrh	r3, [r7, #14]
 8013c36:	1c58      	adds	r0, r3, #1
 8013c38:	81f8      	strh	r0, [r7, #14]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	b2ca      	uxtb	r2, r1
 8013c3e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	0e19      	lsrs	r1, r3, #24
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	89fb      	ldrh	r3, [r7, #14]
 8013c4c:	1c58      	adds	r0, r3, #1
 8013c4e:	81f8      	strh	r0, [r7, #14]
 8013c50:	4413      	add	r3, r2
 8013c52:	b2ca      	uxtb	r2, r1
 8013c54:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	1c59      	adds	r1, r3, #1
 8013c5e:	81f9      	strh	r1, [r7, #14]
 8013c60:	4413      	add	r3, r2
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	7b12      	ldrb	r2, [r2, #12]
 8013c66:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	89d9      	ldrh	r1, [r3, #14]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	89fb      	ldrh	r3, [r7, #14]
 8013c72:	1c58      	adds	r0, r3, #1
 8013c74:	81f8      	strh	r0, [r7, #14]
 8013c76:	4413      	add	r3, r2
 8013c78:	b2ca      	uxtb	r2, r1
 8013c7a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	89db      	ldrh	r3, [r3, #14]
 8013c80:	0a1b      	lsrs	r3, r3, #8
 8013c82:	b299      	uxth	r1, r3
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	89fb      	ldrh	r3, [r7, #14]
 8013c8a:	1c58      	adds	r0, r3, #1
 8013c8c:	81f8      	strh	r0, [r7, #14]
 8013c8e:	4413      	add	r3, r2
 8013c90:	b2ca      	uxtb	r2, r1
 8013c92:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	89fb      	ldrh	r3, [r7, #14]
 8013c9a:	18d0      	adds	r0, r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f103 0110 	add.w	r1, r3, #16
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7b1b      	ldrb	r3, [r3, #12]
 8013ca6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013caa:	b2db      	uxtb	r3, r3
 8013cac:	b29b      	uxth	r3, r3
 8013cae:	461a      	mov	r2, r3
 8013cb0:	f002 fb7b 	bl	80163aa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	7b1b      	ldrb	r3, [r3, #12]
 8013cb8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	b29a      	uxth	r2, r3
 8013cc0:	89fb      	ldrh	r3, [r7, #14]
 8013cc2:	4413      	add	r3, r2
 8013cc4:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d009      	beq.n	8013ce4 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	89fb      	ldrh	r3, [r7, #14]
 8013cd6:	1c59      	adds	r1, r3, #1
 8013cd8:	81f9      	strh	r1, [r7, #14]
 8013cda:	4413      	add	r3, r2
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013ce2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	89fb      	ldrh	r3, [r7, #14]
 8013cea:	18d0      	adds	r0, r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	461a      	mov	r2, r3
 8013cfa:	f002 fb56 	bl	80163aa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d04:	b29a      	uxth	r2, r3
 8013d06:	89fb      	ldrh	r3, [r7, #14]
 8013d08:	4413      	add	r3, r2
 8013d0a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	89fb      	ldrh	r3, [r7, #14]
 8013d16:	1c58      	adds	r0, r3, #1
 8013d18:	81f8      	strh	r0, [r7, #14]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	b2ca      	uxtb	r2, r1
 8013d1e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d24:	0a19      	lsrs	r1, r3, #8
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	89fb      	ldrh	r3, [r7, #14]
 8013d2c:	1c58      	adds	r0, r3, #1
 8013d2e:	81f8      	strh	r0, [r7, #14]
 8013d30:	4413      	add	r3, r2
 8013d32:	b2ca      	uxtb	r2, r1
 8013d34:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3a:	0c19      	lsrs	r1, r3, #16
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	89fb      	ldrh	r3, [r7, #14]
 8013d42:	1c58      	adds	r0, r3, #1
 8013d44:	81f8      	strh	r0, [r7, #14]
 8013d46:	4413      	add	r3, r2
 8013d48:	b2ca      	uxtb	r2, r1
 8013d4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d50:	0e19      	lsrs	r1, r3, #24
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	89fb      	ldrh	r3, [r7, #14]
 8013d58:	1c58      	adds	r0, r3, #1
 8013d5a:	81f8      	strh	r0, [r7, #14]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	b2ca      	uxtb	r2, r1
 8013d60:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013d62:	89fb      	ldrh	r3, [r7, #14]
 8013d64:	b2da      	uxtb	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013d6a:	2300      	movs	r3, #0
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013d74:	b480      	push	{r7}
 8013d76:	b083      	sub	sp, #12
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d7e:	79fb      	ldrb	r3, [r7, #7]
 8013d80:	2b05      	cmp	r3, #5
 8013d82:	d101      	bne.n	8013d88 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013d84:	2301      	movs	r3, #1
 8013d86:	e000      	b.n	8013d8a <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013d88:	2300      	movs	r3, #0
        }
    }
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bc80      	pop	{r7}
 8013d92:	4770      	bx	lr

08013d94 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	6039      	str	r1, [r7, #0]
 8013d9e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013da0:	2300      	movs	r3, #0
 8013da2:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013da4:	79fb      	ldrb	r3, [r7, #7]
 8013da6:	2b05      	cmp	r3, #5
 8013da8:	d105      	bne.n	8013db6 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013daa:	6838      	ldr	r0, [r7, #0]
 8013dac:	f001 f992 	bl	80150d4 <RegionEU868GetPhyParam>
 8013db0:	4603      	mov	r3, r0
 8013db2:	60fb      	str	r3, [r7, #12]
 8013db4:	e001      	b.n	8013dba <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	60fb      	str	r3, [r7, #12]
 8013dba:	2300      	movs	r3, #0
 8013dbc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b082      	sub	sp, #8
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	4603      	mov	r3, r0
 8013dce:	6039      	str	r1, [r7, #0]
 8013dd0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013dd2:	79fb      	ldrb	r3, [r7, #7]
 8013dd4:	2b05      	cmp	r3, #5
 8013dd6:	d103      	bne.n	8013de0 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013dd8:	6838      	ldr	r0, [r7, #0]
 8013dda:	f001 fac5 	bl	8015368 <RegionEU868SetBandTxDone>
 8013dde:	e000      	b.n	8013de2 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013de0:	bf00      	nop
        }
    }
}
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	4603      	mov	r3, r0
 8013df0:	6039      	str	r1, [r7, #0]
 8013df2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013df4:	79fb      	ldrb	r3, [r7, #7]
 8013df6:	2b05      	cmp	r3, #5
 8013df8:	d103      	bne.n	8013e02 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013dfa:	6838      	ldr	r0, [r7, #0]
 8013dfc:	f001 fae0 	bl	80153c0 <RegionEU868InitDefaults>
 8013e00:	e000      	b.n	8013e04 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013e02:	bf00      	nop
        }
    }
}
 8013e04:	bf00      	nop
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	4603      	mov	r3, r0
 8013e14:	6039      	str	r1, [r7, #0]
 8013e16:	71fb      	strb	r3, [r7, #7]
 8013e18:	4613      	mov	r3, r2
 8013e1a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013e1c:	79fb      	ldrb	r3, [r7, #7]
 8013e1e:	2b05      	cmp	r3, #5
 8013e20:	d106      	bne.n	8013e30 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013e22:	79bb      	ldrb	r3, [r7, #6]
 8013e24:	4619      	mov	r1, r3
 8013e26:	6838      	ldr	r0, [r7, #0]
 8013e28:	f001 fb66 	bl	80154f8 <RegionEU868Verify>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	e000      	b.n	8013e32 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013e30:	2300      	movs	r3, #0
        }
    }
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3708      	adds	r7, #8
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b082      	sub	sp, #8
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	4603      	mov	r3, r0
 8013e42:	6039      	str	r1, [r7, #0]
 8013e44:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e46:	79fb      	ldrb	r3, [r7, #7]
 8013e48:	2b05      	cmp	r3, #5
 8013e4a:	d103      	bne.n	8013e54 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013e4c:	6838      	ldr	r0, [r7, #0]
 8013e4e:	f001 fbcf 	bl	80155f0 <RegionEU868ApplyCFList>
 8013e52:	e000      	b.n	8013e56 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013e54:	bf00      	nop
        }
    }
}
 8013e56:	bf00      	nop
 8013e58:	3708      	adds	r7, #8
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}

08013e5e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	4603      	mov	r3, r0
 8013e66:	6039      	str	r1, [r7, #0]
 8013e68:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e6a:	79fb      	ldrb	r3, [r7, #7]
 8013e6c:	2b05      	cmp	r3, #5
 8013e6e:	d104      	bne.n	8013e7a <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013e70:	6838      	ldr	r0, [r7, #0]
 8013e72:	f001 fc31 	bl	80156d8 <RegionEU868ChanMaskSet>
 8013e76:	4603      	mov	r3, r0
 8013e78:	e000      	b.n	8013e7c <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013e7a:	2300      	movs	r3, #0
        }
    }
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	603b      	str	r3, [r7, #0]
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	71fb      	strb	r3, [r7, #7]
 8013e90:	460b      	mov	r3, r1
 8013e92:	71bb      	strb	r3, [r7, #6]
 8013e94:	4613      	mov	r3, r2
 8013e96:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013e98:	79fb      	ldrb	r3, [r7, #7]
 8013e9a:	2b05      	cmp	r3, #5
 8013e9c:	d107      	bne.n	8013eae <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013e9e:	7979      	ldrb	r1, [r7, #5]
 8013ea0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	683a      	ldr	r2, [r7, #0]
 8013ea8:	f001 fc40 	bl	801572c <RegionEU868ComputeRxWindowParameters>
 8013eac:	e000      	b.n	8013eb0 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013eae:	bf00      	nop
        }
    }
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013ec6:	7bfb      	ldrb	r3, [r7, #15]
 8013ec8:	2b05      	cmp	r3, #5
 8013eca:	d105      	bne.n	8013ed8 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013ecc:	6879      	ldr	r1, [r7, #4]
 8013ece:	68b8      	ldr	r0, [r7, #8]
 8013ed0:	f001 fc86 	bl	80157e0 <RegionEU868RxConfig>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	e000      	b.n	8013eda <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013ed8:	2300      	movs	r3, #0
        }
    }
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013ee2:	b580      	push	{r7, lr}
 8013ee4:	b084      	sub	sp, #16
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
 8013eec:	603b      	str	r3, [r7, #0]
 8013eee:	4603      	mov	r3, r0
 8013ef0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013ef2:	7bfb      	ldrb	r3, [r7, #15]
 8013ef4:	2b05      	cmp	r3, #5
 8013ef6:	d106      	bne.n	8013f06 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013ef8:	683a      	ldr	r2, [r7, #0]
 8013efa:	6879      	ldr	r1, [r7, #4]
 8013efc:	68b8      	ldr	r0, [r7, #8]
 8013efe:	f001 fd3f 	bl	8015980 <RegionEU868TxConfig>
 8013f02:	4603      	mov	r3, r0
 8013f04:	e000      	b.n	8013f08 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013f06:	2300      	movs	r3, #0
        }
    }
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b086      	sub	sp, #24
 8013f14:	af02      	add	r7, sp, #8
 8013f16:	60b9      	str	r1, [r7, #8]
 8013f18:	607a      	str	r2, [r7, #4]
 8013f1a:	603b      	str	r3, [r7, #0]
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f20:	7bfb      	ldrb	r3, [r7, #15]
 8013f22:	2b05      	cmp	r3, #5
 8013f24:	d109      	bne.n	8013f3a <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	9300      	str	r3, [sp, #0]
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	683a      	ldr	r2, [r7, #0]
 8013f2e:	6879      	ldr	r1, [r7, #4]
 8013f30:	68b8      	ldr	r0, [r7, #8]
 8013f32:	f001 fdf5 	bl	8015b20 <RegionEU868LinkAdrReq>
 8013f36:	4603      	mov	r3, r0
 8013f38:	e000      	b.n	8013f3c <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013f3a:	2300      	movs	r3, #0
        }
    }
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3710      	adds	r7, #16
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	6039      	str	r1, [r7, #0]
 8013f4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f50:	79fb      	ldrb	r3, [r7, #7]
 8013f52:	2b05      	cmp	r3, #5
 8013f54:	d104      	bne.n	8013f60 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013f56:	6838      	ldr	r0, [r7, #0]
 8013f58:	f001 ff04 	bl	8015d64 <RegionEU868RxParamSetupReq>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	e000      	b.n	8013f62 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013f60:	2300      	movs	r3, #0
        }
    }
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}

08013f6a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013f6a:	b580      	push	{r7, lr}
 8013f6c:	b082      	sub	sp, #8
 8013f6e:	af00      	add	r7, sp, #0
 8013f70:	4603      	mov	r3, r0
 8013f72:	6039      	str	r1, [r7, #0]
 8013f74:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f76:	79fb      	ldrb	r3, [r7, #7]
 8013f78:	2b05      	cmp	r3, #5
 8013f7a:	d104      	bne.n	8013f86 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013f7c:	6838      	ldr	r0, [r7, #0]
 8013f7e:	f001 ff2f 	bl	8015de0 <RegionEU868NewChannelReq>
 8013f82:	4603      	mov	r3, r0
 8013f84:	e000      	b.n	8013f88 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013f86:	2300      	movs	r3, #0
        }
    }
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	4603      	mov	r3, r0
 8013f98:	6039      	str	r1, [r7, #0]
 8013f9a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f9c:	79fb      	ldrb	r3, [r7, #7]
 8013f9e:	2b05      	cmp	r3, #5
 8013fa0:	d104      	bne.n	8013fac <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013fa2:	6838      	ldr	r0, [r7, #0]
 8013fa4:	f001 ff7a 	bl	8015e9c <RegionEU868TxParamSetupReq>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	e000      	b.n	8013fae <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013fac:	2300      	movs	r3, #0
        }
    }
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b082      	sub	sp, #8
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	6039      	str	r1, [r7, #0]
 8013fc0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013fc2:	79fb      	ldrb	r3, [r7, #7]
 8013fc4:	2b05      	cmp	r3, #5
 8013fc6:	d104      	bne.n	8013fd2 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013fc8:	6838      	ldr	r0, [r7, #0]
 8013fca:	f001 ff73 	bl	8015eb4 <RegionEU868DlChannelReq>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	e000      	b.n	8013fd4 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013fd2:	2300      	movs	r3, #0
        }
    }
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	3708      	adds	r7, #8
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd80      	pop	{r7, pc}

08013fdc <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	71fb      	strb	r3, [r7, #7]
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	71bb      	strb	r3, [r7, #6]
 8013fea:	4613      	mov	r3, r2
 8013fec:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013fee:	79fb      	ldrb	r3, [r7, #7]
 8013ff0:	2b05      	cmp	r3, #5
 8013ff2:	d108      	bne.n	8014006 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013ff4:	797a      	ldrb	r2, [r7, #5]
 8013ff6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013ffa:	4611      	mov	r1, r2
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f001 ff9d 	bl	8015f3c <RegionEU868AlternateDr>
 8014002:	4603      	mov	r3, r0
 8014004:	e000      	b.n	8014008 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014006:	2300      	movs	r3, #0
        }
    }
}
 8014008:	4618      	mov	r0, r3
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
 801401a:	603b      	str	r3, [r7, #0]
 801401c:	4603      	mov	r3, r0
 801401e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014020:	7bfb      	ldrb	r3, [r7, #15]
 8014022:	2b05      	cmp	r3, #5
 8014024:	d107      	bne.n	8014036 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	683a      	ldr	r2, [r7, #0]
 801402a:	6879      	ldr	r1, [r7, #4]
 801402c:	68b8      	ldr	r0, [r7, #8]
 801402e:	f001 ff95 	bl	8015f5c <RegionEU868NextChannel>
 8014032:	4603      	mov	r3, r0
 8014034:	e000      	b.n	8014038 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8014036:	2309      	movs	r3, #9
        }
    }
}
 8014038:	4618      	mov	r0, r3
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	4603      	mov	r3, r0
 8014048:	6039      	str	r1, [r7, #0]
 801404a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801404c:	79fb      	ldrb	r3, [r7, #7]
 801404e:	2b05      	cmp	r3, #5
 8014050:	d103      	bne.n	801405a <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8014052:	6838      	ldr	r0, [r7, #0]
 8014054:	f002 f8fa 	bl	801624c <RegionEU868SetContinuousWave>
 8014058:	e000      	b.n	801405c <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801405a:	bf00      	nop
        }
    }
}
 801405c:	bf00      	nop
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014064:	b590      	push	{r4, r7, lr}
 8014066:	b083      	sub	sp, #12
 8014068:	af00      	add	r7, sp, #0
 801406a:	4604      	mov	r4, r0
 801406c:	4608      	mov	r0, r1
 801406e:	4611      	mov	r1, r2
 8014070:	461a      	mov	r2, r3
 8014072:	4623      	mov	r3, r4
 8014074:	71fb      	strb	r3, [r7, #7]
 8014076:	4603      	mov	r3, r0
 8014078:	71bb      	strb	r3, [r7, #6]
 801407a:	460b      	mov	r3, r1
 801407c:	717b      	strb	r3, [r7, #5]
 801407e:	4613      	mov	r3, r2
 8014080:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014082:	79fb      	ldrb	r3, [r7, #7]
 8014084:	2b05      	cmp	r3, #5
 8014086:	d109      	bne.n	801409c <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014088:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801408c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014090:	79bb      	ldrb	r3, [r7, #6]
 8014092:	4618      	mov	r0, r3
 8014094:	f002 f928 	bl	80162e8 <RegionEU868ApplyDrOffset>
 8014098:	4603      	mov	r3, r0
 801409a:	e000      	b.n	801409e <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801409c:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801409e:	4618      	mov	r0, r3
 80140a0:	370c      	adds	r7, #12
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd90      	pop	{r4, r7, pc}
	...

080140a8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80140a8:	b480      	push	{r7}
 80140aa:	b083      	sub	sp, #12
 80140ac:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80140ae:	4b04      	ldr	r3, [pc, #16]	; (80140c0 <RegionGetVersion+0x18>)
 80140b0:	607b      	str	r3, [r7, #4]

    return version;
 80140b2:	687b      	ldr	r3, [r7, #4]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	370c      	adds	r7, #12
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bc80      	pop	{r7}
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop
 80140c0:	01000300 	.word	0x01000300

080140c4 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80140c4:	b480      	push	{r7}
 80140c6:	b087      	sub	sp, #28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	4608      	mov	r0, r1
 80140ce:	4639      	mov	r1, r7
 80140d0:	e881 000c 	stmia.w	r1, {r2, r3}
 80140d4:	4603      	mov	r3, r0
 80140d6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	881b      	ldrh	r3, [r3, #0]
 80140dc:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80140de:	7afb      	ldrb	r3, [r7, #11]
 80140e0:	f083 0301 	eor.w	r3, r3, #1
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d01b      	beq.n	8014122 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80140ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80140ee:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80140f6:	d202      	bcs.n	80140fe <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80140f8:	2364      	movs	r3, #100	; 0x64
 80140fa:	82bb      	strh	r3, [r7, #20]
 80140fc:	e00b      	b.n	8014116 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014104:	4293      	cmp	r3, r2
 8014106:	d803      	bhi.n	8014110 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801410c:	82bb      	strh	r3, [r7, #20]
 801410e:	e002      	b.n	8014116 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014110:	f242 7310 	movw	r3, #10000	; 0x2710
 8014114:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014116:	8aba      	ldrh	r2, [r7, #20]
 8014118:	8afb      	ldrh	r3, [r7, #22]
 801411a:	4293      	cmp	r3, r2
 801411c:	bf38      	it	cc
 801411e:	4613      	movcc	r3, r2
 8014120:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014122:	8afb      	ldrh	r3, [r7, #22]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d101      	bne.n	801412c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014128:	2301      	movs	r3, #1
 801412a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801412c:	8afb      	ldrh	r3, [r7, #22]
}
 801412e:	4618      	mov	r0, r3
 8014130:	371c      	adds	r7, #28
 8014132:	46bd      	mov	sp, r7
 8014134:	bc80      	pop	{r7}
 8014136:	4770      	bx	lr

08014138 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b08e      	sub	sp, #56	; 0x38
 801413c:	af02      	add	r7, sp, #8
 801413e:	60f8      	str	r0, [r7, #12]
 8014140:	4608      	mov	r0, r1
 8014142:	4639      	mov	r1, r7
 8014144:	e881 000c 	stmia.w	r1, {r2, r3}
 8014148:	4603      	mov	r3, r0
 801414a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	881b      	ldrh	r3, [r3, #0]
 8014150:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014152:	4b4b      	ldr	r3, [pc, #300]	; (8014280 <SetMaxTimeCredits+0x148>)
 8014154:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014156:	463b      	mov	r3, r7
 8014158:	e893 0003 	ldmia.w	r3, {r0, r1}
 801415c:	f005 fc60 	bl	8019a20 <SysTimeToMs>
 8014160:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014162:	f107 0314 	add.w	r3, r7, #20
 8014166:	2200      	movs	r2, #0
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801416c:	7af9      	ldrb	r1, [r7, #11]
 801416e:	463b      	mov	r3, r7
 8014170:	cb0c      	ldmia	r3, {r2, r3}
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f7ff ffa6 	bl	80140c4 <GetDutyCycle>
 8014178:	4603      	mov	r3, r0
 801417a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801417c:	7afb      	ldrb	r3, [r7, #11]
 801417e:	f083 0301 	eor.w	r3, r3, #1
 8014182:	b2db      	uxtb	r3, r3
 8014184:	2b00      	cmp	r3, #0
 8014186:	d062      	beq.n	801424e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801418a:	2b64      	cmp	r3, #100	; 0x64
 801418c:	d105      	bne.n	801419a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801418e:	4b3c      	ldr	r3, [pc, #240]	; (8014280 <SetMaxTimeCredits+0x148>)
 8014190:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014196:	609a      	str	r2, [r3, #8]
 8014198:	e00b      	b.n	80141b2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801419a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801419c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141a0:	d105      	bne.n	80141ae <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80141a2:	4b38      	ldr	r3, [pc, #224]	; (8014284 <SetMaxTimeCredits+0x14c>)
 80141a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141aa:	609a      	str	r2, [r3, #8]
 80141ac:	e001      	b.n	80141b2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80141ae:	4b36      	ldr	r3, [pc, #216]	; (8014288 <SetMaxTimeCredits+0x150>)
 80141b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	689a      	ldr	r2, [r3, #8]
 80141b6:	f107 031c 	add.w	r3, r7, #28
 80141ba:	4611      	mov	r1, r2
 80141bc:	4618      	mov	r0, r3
 80141be:	f005 fc57 	bl	8019a70 <SysTimeFromMs>
 80141c2:	f107 0014 	add.w	r0, r7, #20
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	463a      	mov	r2, r7
 80141ce:	ca06      	ldmia	r2, {r1, r2}
 80141d0:	f005 fb67 	bl	80198a2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80141d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80141d8:	f083 0301 	eor.w	r3, r3, #1
 80141dc:	b2db      	uxtb	r3, r3
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d006      	beq.n	80141f0 <SetMaxTimeCredits+0xb8>
 80141e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80141e6:	f083 0301 	eor.w	r3, r3, #1
 80141ea:	b2db      	uxtb	r3, r3
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d108      	bne.n	8014202 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80141f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d103      	bne.n	8014202 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80141fa:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80141fc:	4a23      	ldr	r2, [pc, #140]	; (801428c <SetMaxTimeCredits+0x154>)
 80141fe:	4293      	cmp	r3, r2
 8014200:	d92f      	bls.n	8014262 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014206:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	4a21      	ldr	r2, [pc, #132]	; (8014290 <SetMaxTimeCredits+0x158>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d928      	bls.n	8014262 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014216:	3b30      	subs	r3, #48	; 0x30
 8014218:	4a1e      	ldr	r2, [pc, #120]	; (8014294 <SetMaxTimeCredits+0x15c>)
 801421a:	fba2 2303 	umull	r2, r3, r2, r3
 801421e:	0c1b      	lsrs	r3, r3, #16
 8014220:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014222:	697b      	ldr	r3, [r7, #20]
 8014224:	4a1c      	ldr	r2, [pc, #112]	; (8014298 <SetMaxTimeCredits+0x160>)
 8014226:	fb02 f303 	mul.w	r3, r2, r3
 801422a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801422c:	697b      	ldr	r3, [r7, #20]
 801422e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014232:	3330      	adds	r3, #48	; 0x30
 8014234:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014236:	2300      	movs	r3, #0
 8014238:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801423a:	f107 0314 	add.w	r3, r7, #20
 801423e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014242:	f005 fbed 	bl	8019a20 <SysTimeToMs>
 8014246:	4602      	mov	r2, r0
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	609a      	str	r2, [r3, #8]
 801424c:	e009      	b.n	8014262 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801424e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014252:	f083 0301 	eor.w	r3, r3, #1
 8014256:	b2db      	uxtb	r3, r3
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014260:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d102      	bne.n	8014270 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801426e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014274:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014276:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014278:	4618      	mov	r0, r3
 801427a:	3730      	adds	r7, #48	; 0x30
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	001b7740 	.word	0x001b7740
 8014284:	0112a880 	.word	0x0112a880
 8014288:	02932e00 	.word	0x02932e00
 801428c:	0001517f 	.word	0x0001517f
 8014290:	0001ec2f 	.word	0x0001ec2f
 8014294:	c22e4507 	.word	0xc22e4507
 8014298:	00015180 	.word	0x00015180

0801429c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b086      	sub	sp, #24
 80142a0:	af02      	add	r7, sp, #8
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	4608      	mov	r0, r1
 80142a6:	4611      	mov	r1, r2
 80142a8:	461a      	mov	r2, r3
 80142aa:	4603      	mov	r3, r0
 80142ac:	70fb      	strb	r3, [r7, #3]
 80142ae:	460b      	mov	r3, r1
 80142b0:	70bb      	strb	r3, [r7, #2]
 80142b2:	4613      	mov	r3, r2
 80142b4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80142b6:	78f9      	ldrb	r1, [r7, #3]
 80142b8:	787b      	ldrb	r3, [r7, #1]
 80142ba:	9301      	str	r3, [sp, #4]
 80142bc:	78bb      	ldrb	r3, [r7, #2]
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	f107 0318 	add.w	r3, r7, #24
 80142c4:	cb0c      	ldmia	r3, {r2, r3}
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7ff ff36 	bl	8014138 <SetMaxTimeCredits>
 80142cc:	4603      	mov	r3, r0
 80142ce:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80142d0:	78fb      	ldrb	r3, [r7, #3]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00a      	beq.n	80142ec <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	4618      	mov	r0, r3
 80142dc:	f006 f9c8 	bl	801a670 <UTIL_TIMER_GetElapsedTime>
 80142e0:	4602      	mov	r2, r0
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	68db      	ldr	r3, [r3, #12]
 80142e6:	441a      	add	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	68da      	ldr	r2, [r3, #12]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	691b      	ldr	r3, [r3, #16]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d903      	bls.n	8014300 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	691a      	ldr	r2, [r3, #16]
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6a3a      	ldr	r2, [r7, #32]
 8014304:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014306:	89fb      	ldrh	r3, [r7, #14]
}
 8014308:	4618      	mov	r0, r3
 801430a:	3710      	adds	r7, #16
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}

08014310 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	4603      	mov	r3, r0
 8014318:	460a      	mov	r2, r1
 801431a:	80fb      	strh	r3, [r7, #6]
 801431c:	4613      	mov	r3, r2
 801431e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014320:	2300      	movs	r3, #0
 8014322:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014324:	2300      	movs	r3, #0
 8014326:	73bb      	strb	r3, [r7, #14]
 8014328:	e011      	b.n	801434e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801432a:	88fa      	ldrh	r2, [r7, #6]
 801432c:	7bbb      	ldrb	r3, [r7, #14]
 801432e:	2101      	movs	r1, #1
 8014330:	fa01 f303 	lsl.w	r3, r1, r3
 8014334:	401a      	ands	r2, r3
 8014336:	7bbb      	ldrb	r3, [r7, #14]
 8014338:	2101      	movs	r1, #1
 801433a:	fa01 f303 	lsl.w	r3, r1, r3
 801433e:	429a      	cmp	r2, r3
 8014340:	d102      	bne.n	8014348 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014342:	7bfb      	ldrb	r3, [r7, #15]
 8014344:	3301      	adds	r3, #1
 8014346:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014348:	7bbb      	ldrb	r3, [r7, #14]
 801434a:	3301      	adds	r3, #1
 801434c:	73bb      	strb	r3, [r7, #14]
 801434e:	7bba      	ldrb	r2, [r7, #14]
 8014350:	797b      	ldrb	r3, [r7, #5]
 8014352:	429a      	cmp	r2, r3
 8014354:	d3e9      	bcc.n	801432a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014356:	7bfb      	ldrb	r3, [r7, #15]
}
 8014358:	4618      	mov	r0, r3
 801435a:	3714      	adds	r7, #20
 801435c:	46bd      	mov	sp, r7
 801435e:	bc80      	pop	{r7}
 8014360:	4770      	bx	lr

08014362 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014362:	b580      	push	{r7, lr}
 8014364:	b084      	sub	sp, #16
 8014366:	af00      	add	r7, sp, #0
 8014368:	6039      	str	r1, [r7, #0]
 801436a:	4611      	mov	r1, r2
 801436c:	461a      	mov	r2, r3
 801436e:	4603      	mov	r3, r0
 8014370:	71fb      	strb	r3, [r7, #7]
 8014372:	460b      	mov	r3, r1
 8014374:	71bb      	strb	r3, [r7, #6]
 8014376:	4613      	mov	r3, r2
 8014378:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801437a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801437e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014382:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014386:	4618      	mov	r0, r3
 8014388:	f000 f85d 	bl	8014446 <RegionCommonValueInRange>
 801438c:	4603      	mov	r3, r0
 801438e:	2b00      	cmp	r3, #0
 8014390:	d101      	bne.n	8014396 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014392:	2300      	movs	r3, #0
 8014394:	e053      	b.n	801443e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014396:	2300      	movs	r3, #0
 8014398:	73fb      	strb	r3, [r7, #15]
 801439a:	2300      	movs	r3, #0
 801439c:	73bb      	strb	r3, [r7, #14]
 801439e:	e049      	b.n	8014434 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80143a0:	2300      	movs	r3, #0
 80143a2:	737b      	strb	r3, [r7, #13]
 80143a4:	e03d      	b.n	8014422 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80143a6:	7bbb      	ldrb	r3, [r7, #14]
 80143a8:	005b      	lsls	r3, r3, #1
 80143aa:	683a      	ldr	r2, [r7, #0]
 80143ac:	4413      	add	r3, r2
 80143ae:	881b      	ldrh	r3, [r3, #0]
 80143b0:	461a      	mov	r2, r3
 80143b2:	7b7b      	ldrb	r3, [r7, #13]
 80143b4:	fa42 f303 	asr.w	r3, r2, r3
 80143b8:	f003 0301 	and.w	r3, r3, #1
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d02d      	beq.n	801441c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80143c0:	7bfa      	ldrb	r2, [r7, #15]
 80143c2:	7b7b      	ldrb	r3, [r7, #13]
 80143c4:	4413      	add	r3, r2
 80143c6:	461a      	mov	r2, r3
 80143c8:	4613      	mov	r3, r2
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	4413      	add	r3, r2
 80143ce:	009b      	lsls	r3, r3, #2
 80143d0:	461a      	mov	r2, r3
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	4413      	add	r3, r2
 80143d6:	7a1b      	ldrb	r3, [r3, #8]
 80143d8:	f343 0303 	sbfx	r3, r3, #0, #4
 80143dc:	b25b      	sxtb	r3, r3
 80143de:	f003 030f 	and.w	r3, r3, #15
 80143e2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80143e4:	7bfa      	ldrb	r2, [r7, #15]
 80143e6:	7b7b      	ldrb	r3, [r7, #13]
 80143e8:	4413      	add	r3, r2
 80143ea:	461a      	mov	r2, r3
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	009b      	lsls	r3, r3, #2
 80143f4:	461a      	mov	r2, r3
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	4413      	add	r3, r2
 80143fa:	7a1b      	ldrb	r3, [r3, #8]
 80143fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8014400:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014402:	f003 030f 	and.w	r3, r3, #15
 8014406:	b25a      	sxtb	r2, r3
 8014408:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801440c:	4618      	mov	r0, r3
 801440e:	f000 f81a 	bl	8014446 <RegionCommonValueInRange>
 8014412:	4603      	mov	r3, r0
 8014414:	2b01      	cmp	r3, #1
 8014416:	d101      	bne.n	801441c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014418:	2301      	movs	r3, #1
 801441a:	e010      	b.n	801443e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801441c:	7b7b      	ldrb	r3, [r7, #13]
 801441e:	3301      	adds	r3, #1
 8014420:	737b      	strb	r3, [r7, #13]
 8014422:	7b7b      	ldrb	r3, [r7, #13]
 8014424:	2b0f      	cmp	r3, #15
 8014426:	d9be      	bls.n	80143a6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014428:	7bfb      	ldrb	r3, [r7, #15]
 801442a:	3310      	adds	r3, #16
 801442c:	73fb      	strb	r3, [r7, #15]
 801442e:	7bbb      	ldrb	r3, [r7, #14]
 8014430:	3301      	adds	r3, #1
 8014432:	73bb      	strb	r3, [r7, #14]
 8014434:	7bfa      	ldrb	r2, [r7, #15]
 8014436:	79fb      	ldrb	r3, [r7, #7]
 8014438:	429a      	cmp	r2, r3
 801443a:	d3b1      	bcc.n	80143a0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801443c:	2300      	movs	r3, #0
}
 801443e:	4618      	mov	r0, r3
 8014440:	3710      	adds	r7, #16
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014446:	b480      	push	{r7}
 8014448:	b083      	sub	sp, #12
 801444a:	af00      	add	r7, sp, #0
 801444c:	4603      	mov	r3, r0
 801444e:	71fb      	strb	r3, [r7, #7]
 8014450:	460b      	mov	r3, r1
 8014452:	71bb      	strb	r3, [r7, #6]
 8014454:	4613      	mov	r3, r2
 8014456:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014458:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801445c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014460:	429a      	cmp	r2, r3
 8014462:	db07      	blt.n	8014474 <RegionCommonValueInRange+0x2e>
 8014464:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014468:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801446c:	429a      	cmp	r2, r3
 801446e:	dc01      	bgt.n	8014474 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014470:	2301      	movs	r3, #1
 8014472:	e000      	b.n	8014476 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	370c      	adds	r7, #12
 801447a:	46bd      	mov	sp, r7
 801447c:	bc80      	pop	{r7}
 801447e:	4770      	bx	lr

08014480 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014480:	b480      	push	{r7}
 8014482:	b085      	sub	sp, #20
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
 8014488:	460b      	mov	r3, r1
 801448a:	70fb      	strb	r3, [r7, #3]
 801448c:	4613      	mov	r3, r2
 801448e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014490:	78fb      	ldrb	r3, [r7, #3]
 8014492:	091b      	lsrs	r3, r3, #4
 8014494:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014496:	78bb      	ldrb	r3, [r7, #2]
 8014498:	091b      	lsrs	r3, r3, #4
 801449a:	b2db      	uxtb	r3, r3
 801449c:	7bfa      	ldrb	r2, [r7, #15]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d803      	bhi.n	80144aa <RegionCommonChanDisable+0x2a>
 80144a2:	78fa      	ldrb	r2, [r7, #3]
 80144a4:	78bb      	ldrb	r3, [r7, #2]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d301      	bcc.n	80144ae <RegionCommonChanDisable+0x2e>
    {
        return false;
 80144aa:	2300      	movs	r3, #0
 80144ac:	e017      	b.n	80144de <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80144ae:	7bfb      	ldrb	r3, [r7, #15]
 80144b0:	005b      	lsls	r3, r3, #1
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	4413      	add	r3, r2
 80144b6:	881b      	ldrh	r3, [r3, #0]
 80144b8:	b21a      	sxth	r2, r3
 80144ba:	78fb      	ldrb	r3, [r7, #3]
 80144bc:	f003 030f 	and.w	r3, r3, #15
 80144c0:	2101      	movs	r1, #1
 80144c2:	fa01 f303 	lsl.w	r3, r1, r3
 80144c6:	b21b      	sxth	r3, r3
 80144c8:	43db      	mvns	r3, r3
 80144ca:	b21b      	sxth	r3, r3
 80144cc:	4013      	ands	r3, r2
 80144ce:	b219      	sxth	r1, r3
 80144d0:	7bfb      	ldrb	r3, [r7, #15]
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	4413      	add	r3, r2
 80144d8:	b28a      	uxth	r2, r1
 80144da:	801a      	strh	r2, [r3, #0]

    return true;
 80144dc:	2301      	movs	r3, #1
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3714      	adds	r7, #20
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bc80      	pop	{r7}
 80144e6:	4770      	bx	lr

080144e8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	460b      	mov	r3, r1
 80144f2:	70fb      	strb	r3, [r7, #3]
 80144f4:	4613      	mov	r3, r2
 80144f6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80144f8:	2300      	movs	r3, #0
 80144fa:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d101      	bne.n	8014506 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014502:	2300      	movs	r3, #0
 8014504:	e018      	b.n	8014538 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014506:	78fb      	ldrb	r3, [r7, #3]
 8014508:	73bb      	strb	r3, [r7, #14]
 801450a:	e010      	b.n	801452e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801450c:	7bbb      	ldrb	r3, [r7, #14]
 801450e:	005b      	lsls	r3, r3, #1
 8014510:	687a      	ldr	r2, [r7, #4]
 8014512:	4413      	add	r3, r2
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	2110      	movs	r1, #16
 8014518:	4618      	mov	r0, r3
 801451a:	f7ff fef9 	bl	8014310 <CountChannels>
 801451e:	4603      	mov	r3, r0
 8014520:	461a      	mov	r2, r3
 8014522:	7bfb      	ldrb	r3, [r7, #15]
 8014524:	4413      	add	r3, r2
 8014526:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014528:	7bbb      	ldrb	r3, [r7, #14]
 801452a:	3301      	adds	r3, #1
 801452c:	73bb      	strb	r3, [r7, #14]
 801452e:	7bba      	ldrb	r2, [r7, #14]
 8014530:	78bb      	ldrb	r3, [r7, #2]
 8014532:	429a      	cmp	r2, r3
 8014534:	d3ea      	bcc.n	801450c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014536:	7bfb      	ldrb	r3, [r7, #15]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014540:	b480      	push	{r7}
 8014542:	b087      	sub	sp, #28
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	4613      	mov	r3, r2
 801454c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d016      	beq.n	8014582 <RegionCommonChanMaskCopy+0x42>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d013      	beq.n	8014582 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801455a:	2300      	movs	r3, #0
 801455c:	75fb      	strb	r3, [r7, #23]
 801455e:	e00c      	b.n	801457a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014560:	7dfb      	ldrb	r3, [r7, #23]
 8014562:	005b      	lsls	r3, r3, #1
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	441a      	add	r2, r3
 8014568:	7dfb      	ldrb	r3, [r7, #23]
 801456a:	005b      	lsls	r3, r3, #1
 801456c:	68f9      	ldr	r1, [r7, #12]
 801456e:	440b      	add	r3, r1
 8014570:	8812      	ldrh	r2, [r2, #0]
 8014572:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014574:	7dfb      	ldrb	r3, [r7, #23]
 8014576:	3301      	adds	r3, #1
 8014578:	75fb      	strb	r3, [r7, #23]
 801457a:	7dfa      	ldrb	r2, [r7, #23]
 801457c:	79fb      	ldrb	r3, [r7, #7]
 801457e:	429a      	cmp	r2, r3
 8014580:	d3ee      	bcc.n	8014560 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014582:	bf00      	nop
 8014584:	371c      	adds	r7, #28
 8014586:	46bd      	mov	sp, r7
 8014588:	bc80      	pop	{r7}
 801458a:	4770      	bx	lr

0801458c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801458c:	b082      	sub	sp, #8
 801458e:	b580      	push	{r7, lr}
 8014590:	b086      	sub	sp, #24
 8014592:	af00      	add	r7, sp, #0
 8014594:	60f8      	str	r0, [r7, #12]
 8014596:	60b9      	str	r1, [r7, #8]
 8014598:	627b      	str	r3, [r7, #36]	; 0x24
 801459a:	4613      	mov	r3, r2
 801459c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801459e:	79f9      	ldrb	r1, [r7, #7]
 80145a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145a4:	cb0c      	ldmia	r3, {r2, r3}
 80145a6:	68f8      	ldr	r0, [r7, #12]
 80145a8:	f7ff fd8c 	bl	80140c4 <GetDutyCycle>
 80145ac:	4603      	mov	r3, r0
 80145ae:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	68da      	ldr	r2, [r3, #12]
 80145b4:	8afb      	ldrh	r3, [r7, #22]
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	fb01 f303 	mul.w	r3, r1, r3
 80145bc:	429a      	cmp	r2, r3
 80145be:	d909      	bls.n	80145d4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	68da      	ldr	r2, [r3, #12]
 80145c4:	8afb      	ldrh	r3, [r7, #22]
 80145c6:	68b9      	ldr	r1, [r7, #8]
 80145c8:	fb01 f303 	mul.w	r3, r1, r3
 80145cc:	1ad2      	subs	r2, r2, r3
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80145d2:	e002      	b.n	80145da <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2200      	movs	r2, #0
 80145d8:	60da      	str	r2, [r3, #12]
}
 80145da:	bf00      	nop
 80145dc:	3718      	adds	r7, #24
 80145de:	46bd      	mov	sp, r7
 80145e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80145e4:	b002      	add	sp, #8
 80145e6:	4770      	bx	lr

080145e8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80145e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ea:	b08f      	sub	sp, #60	; 0x3c
 80145ec:	af04      	add	r7, sp, #16
 80145ee:	6039      	str	r1, [r7, #0]
 80145f0:	4611      	mov	r1, r2
 80145f2:	461a      	mov	r2, r3
 80145f4:	4603      	mov	r3, r0
 80145f6:	71fb      	strb	r3, [r7, #7]
 80145f8:	460b      	mov	r3, r1
 80145fa:	71bb      	strb	r3, [r7, #6]
 80145fc:	4613      	mov	r3, r2
 80145fe:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014600:	f04f 33ff 	mov.w	r3, #4294967295
 8014604:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014606:	f006 f821 	bl	801a64c <UTIL_TIMER_GetCurrentTime>
 801460a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801460c:	2300      	movs	r3, #0
 801460e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014610:	2301      	movs	r3, #1
 8014612:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014614:	2300      	movs	r3, #0
 8014616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801461a:	2300      	movs	r3, #0
 801461c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014620:	e0ba      	b.n	8014798 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014622:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014626:	4613      	mov	r3, r2
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	4413      	add	r3, r2
 801462c:	00db      	lsls	r3, r3, #3
 801462e:	461a      	mov	r2, r3
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	189c      	adds	r4, r3, r2
 8014634:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8014638:	797a      	ldrb	r2, [r7, #5]
 801463a:	79fd      	ldrb	r5, [r7, #7]
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	9302      	str	r3, [sp, #8]
 8014640:	46ec      	mov	ip, sp
 8014642:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014646:	e893 0003 	ldmia.w	r3, {r0, r1}
 801464a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801464e:	4633      	mov	r3, r6
 8014650:	4629      	mov	r1, r5
 8014652:	4620      	mov	r0, r4
 8014654:	f7ff fe22 	bl	801429c <UpdateTimeCredits>
 8014658:	4603      	mov	r3, r0
 801465a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801465c:	8afa      	ldrh	r2, [r7, #22]
 801465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014660:	fb02 f303 	mul.w	r3, r2, r3
 8014664:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014666:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801466a:	4613      	mov	r3, r2
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	4413      	add	r3, r2
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	461a      	mov	r2, r3
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	4413      	add	r3, r2
 8014678:	68db      	ldr	r3, [r3, #12]
 801467a:	69ba      	ldr	r2, [r7, #24]
 801467c:	429a      	cmp	r2, r3
 801467e:	d308      	bcc.n	8014692 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014680:	797b      	ldrb	r3, [r7, #5]
 8014682:	f083 0301 	eor.w	r3, r3, #1
 8014686:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014688:	2b00      	cmp	r3, #0
 801468a:	d013      	beq.n	80146b4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801468c:	79fb      	ldrb	r3, [r7, #7]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d010      	beq.n	80146b4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014692:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	461a      	mov	r2, r3
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	4413      	add	r3, r2
 80146a4:	2201      	movs	r2, #1
 80146a6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80146a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80146ac:	3301      	adds	r3, #1
 80146ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80146b2:	e06c      	b.n	801478e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80146b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146b8:	4613      	mov	r3, r2
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	4413      	add	r3, r2
 80146be:	00db      	lsls	r3, r3, #3
 80146c0:	461a      	mov	r2, r3
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	4413      	add	r3, r2
 80146c6:	2200      	movs	r2, #0
 80146c8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80146ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146ce:	4613      	mov	r3, r2
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	4413      	add	r3, r2
 80146d4:	00db      	lsls	r3, r3, #3
 80146d6:	461a      	mov	r2, r3
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	4413      	add	r3, r2
 80146dc:	691b      	ldr	r3, [r3, #16]
 80146de:	69ba      	ldr	r2, [r7, #24]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d215      	bcs.n	8014710 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80146e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	461a      	mov	r2, r3
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	4413      	add	r3, r2
 80146f6:	68db      	ldr	r3, [r3, #12]
 80146f8:	69ba      	ldr	r2, [r7, #24]
 80146fa:	1ad3      	subs	r3, r2, r3
 80146fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146fe:	4293      	cmp	r3, r2
 8014700:	bf28      	it	cs
 8014702:	4613      	movcs	r3, r2
 8014704:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801470a:	3301      	adds	r3, #1
 801470c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014710:	79fb      	ldrb	r3, [r7, #7]
 8014712:	f083 0301 	eor.w	r3, r3, #1
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d038      	beq.n	801478e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801471c:	2300      	movs	r3, #0
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	2300      	movs	r3, #0
 8014722:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014724:	8afb      	ldrh	r3, [r7, #22]
 8014726:	2b64      	cmp	r3, #100	; 0x64
 8014728:	d103      	bne.n	8014732 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801472a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	e009      	b.n	8014746 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014732:	8afb      	ldrh	r3, [r7, #22]
 8014734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014738:	d103      	bne.n	8014742 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801473a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801473e:	60fb      	str	r3, [r7, #12]
 8014740:	e001      	b.n	8014746 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014742:	4b1e      	ldr	r3, [pc, #120]	; (80147bc <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014744:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014748:	4a1c      	ldr	r2, [pc, #112]	; (80147bc <RegionCommonUpdateBandTimeOff+0x1d4>)
 801474a:	4293      	cmp	r3, r2
 801474c:	d90e      	bls.n	801476c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801474e:	68fa      	ldr	r2, [r7, #12]
 8014750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014752:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014756:	3b30      	subs	r3, #48	; 0x30
 8014758:	4919      	ldr	r1, [pc, #100]	; (80147c0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801475a:	fba1 1303 	umull	r1, r3, r1, r3
 801475e:	0c1b      	lsrs	r3, r3, #16
 8014760:	3301      	adds	r3, #1
 8014762:	4918      	ldr	r1, [pc, #96]	; (80147c4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014764:	fb01 f303 	mul.w	r3, r1, r3
 8014768:	4413      	add	r3, r2
 801476a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801476c:	f107 000c 	add.w	r0, r7, #12
 8014770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014776:	f107 020c 	add.w	r2, r7, #12
 801477a:	ca06      	ldmia	r2, {r1, r2}
 801477c:	f005 f891 	bl	80198a2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014780:	f107 030c 	add.w	r3, r7, #12
 8014784:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014788:	f005 f94a 	bl	8019a20 <SysTimeToMs>
 801478c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801478e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014792:	3301      	adds	r3, #1
 8014794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014798:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801479c:	79bb      	ldrb	r3, [r7, #6]
 801479e:	429a      	cmp	r2, r3
 80147a0:	f4ff af3f 	bcc.w	8014622 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 80147a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d102      	bne.n	80147b2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80147ac:	f04f 33ff 	mov.w	r3, #4294967295
 80147b0:	e000      	b.n	80147b4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147b4:	4618      	mov	r0, r3
 80147b6:	372c      	adds	r7, #44	; 0x2c
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147bc:	0001ec30 	.word	0x0001ec30
 80147c0:	c22e4507 	.word	0xc22e4507
 80147c4:	00015180 	.word	0x00015180

080147c8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80147c8:	b480      	push	{r7}
 80147ca:	b085      	sub	sp, #20
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	2b03      	cmp	r3, #3
 80147dc:	d13f      	bne.n	801485e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	3301      	adds	r3, #1
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	b25a      	sxtb	r2, r3
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147f0:	f003 030f 	and.w	r3, r3, #15
 80147f4:	b25a      	sxtb	r2, r3
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014800:	b2db      	uxtb	r3, r3
 8014802:	091b      	lsrs	r3, r3, #4
 8014804:	b2db      	uxtb	r3, r3
 8014806:	b25a      	sxtb	r2, r3
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	3302      	adds	r3, #2
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	b29a      	uxth	r2, r3
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	889b      	ldrh	r3, [r3, #4]
 801481c:	b21a      	sxth	r2, r3
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	3303      	adds	r3, #3
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	021b      	lsls	r3, r3, #8
 8014826:	b21b      	sxth	r3, r3
 8014828:	4313      	orrs	r3, r2
 801482a:	b21b      	sxth	r3, r3
 801482c:	b29a      	uxth	r2, r3
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	791a      	ldrb	r2, [r3, #4]
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	091b      	lsrs	r3, r3, #4
 8014840:	b2db      	uxtb	r3, r3
 8014842:	f003 0307 	and.w	r3, r3, #7
 8014846:	b2da      	uxtb	r2, r3
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	f003 030f 	and.w	r3, r3, #15
 8014854:	b2da      	uxtb	r2, r3
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801485a:	2305      	movs	r3, #5
 801485c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3714      	adds	r7, #20
 8014864:	46bd      	mov	sp, r7
 8014866:	bc80      	pop	{r7}
 8014868:	4770      	bx	lr

0801486a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801486a:	b5b0      	push	{r4, r5, r7, lr}
 801486c:	b088      	sub	sp, #32
 801486e:	af02      	add	r7, sp, #8
 8014870:	60f8      	str	r0, [r7, #12]
 8014872:	60b9      	str	r1, [r7, #8]
 8014874:	607a      	str	r2, [r7, #4]
 8014876:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	791b      	ldrb	r3, [r3, #4]
 801487c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	799b      	ldrb	r3, [r3, #6]
 8014882:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	79db      	ldrb	r3, [r3, #7]
 8014888:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	7a1b      	ldrb	r3, [r3, #8]
 801488e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	795b      	ldrb	r3, [r3, #5]
 8014894:	f083 0301 	eor.w	r3, r3, #1
 8014898:	b2db      	uxtb	r3, r3
 801489a:	2b00      	cmp	r3, #0
 801489c:	d008      	beq.n	80148b0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	7adb      	ldrb	r3, [r3, #11]
 80148a2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	7a5b      	ldrb	r3, [r3, #9]
 80148a8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	7a9b      	ldrb	r3, [r3, #10]
 80148ae:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80148b0:	7dfb      	ldrb	r3, [r7, #23]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d03a      	beq.n	801492c <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	7b18      	ldrb	r0, [r3, #12]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6919      	ldr	r1, [r3, #16]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	6992      	ldr	r2, [r2, #24]
 80148ce:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80148d2:	9201      	str	r2, [sp, #4]
 80148d4:	9300      	str	r3, [sp, #0]
 80148d6:	462b      	mov	r3, r5
 80148d8:	4622      	mov	r2, r4
 80148da:	f7ff fd42 	bl	8014362 <RegionCommonChanVerifyDr>
 80148de:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80148e0:	f083 0301 	eor.w	r3, r3, #1
 80148e4:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d003      	beq.n	80148f2 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	f023 0302 	bic.w	r3, r3, #2
 80148f0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80148fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014902:	4618      	mov	r0, r3
 8014904:	f7ff fd9f 	bl	8014446 <RegionCommonValueInRange>
 8014908:	4603      	mov	r3, r0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d10e      	bne.n	801492c <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8014914:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8014918:	429a      	cmp	r2, r3
 801491a:	da03      	bge.n	8014924 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	7f5b      	ldrb	r3, [r3, #29]
 8014920:	757b      	strb	r3, [r7, #21]
 8014922:	e003      	b.n	801492c <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8014924:	7dfb      	ldrb	r3, [r7, #23]
 8014926:	f023 0304 	bic.w	r3, r3, #4
 801492a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801492c:	7dfb      	ldrb	r3, [r7, #23]
 801492e:	2b07      	cmp	r3, #7
 8014930:	d105      	bne.n	801493e <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014932:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801493a:	2301      	movs	r3, #1
 801493c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	7dba      	ldrb	r2, [r7, #22]
 8014942:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	7d7a      	ldrb	r2, [r7, #21]
 8014948:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801494a:	7d3a      	ldrb	r2, [r7, #20]
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	701a      	strb	r2, [r3, #0]

    return status;
 8014950:	7dfb      	ldrb	r3, [r7, #23]
}
 8014952:	4618      	mov	r0, r3
 8014954:	3718      	adds	r7, #24
 8014956:	46bd      	mov	sp, r7
 8014958:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801495c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801495c:	b480      	push	{r7}
 801495e:	b083      	sub	sp, #12
 8014960:	af00      	add	r7, sp, #0
 8014962:	4603      	mov	r3, r0
 8014964:	6039      	str	r1, [r7, #0]
 8014966:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014968:	79fb      	ldrb	r3, [r7, #7]
 801496a:	4a06      	ldr	r2, [pc, #24]	; (8014984 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801496c:	fa02 f303 	lsl.w	r3, r2, r3
 8014970:	461a      	mov	r2, r3
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014978:	4618      	mov	r0, r3
 801497a:	370c      	adds	r7, #12
 801497c:	46bd      	mov	sp, r7
 801497e:	bc80      	pop	{r7}
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	000f4240 	.word	0x000f4240

08014988 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014992:	79fb      	ldrb	r3, [r7, #7]
 8014994:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014998:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801499c:	4618      	mov	r0, r3
 801499e:	370c      	adds	r7, #12
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bc80      	pop	{r7}
 80149a4:	4770      	bx	lr
	...

080149a8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80149a8:	b480      	push	{r7}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	607a      	str	r2, [r7, #4]
 80149b2:	603b      	str	r3, [r7, #0]
 80149b4:	460b      	mov	r3, r1
 80149b6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80149b8:	7afa      	ldrb	r2, [r7, #11]
 80149ba:	7afb      	ldrb	r3, [r7, #11]
 80149bc:	3b04      	subs	r3, #4
 80149be:	4619      	mov	r1, r3
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	fb03 f101 	mul.w	r1, r3, r1
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80149cc:	fb00 f303 	mul.w	r3, r0, r3
 80149d0:	440b      	add	r3, r1
 80149d2:	005b      	lsls	r3, r3, #1
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d013      	beq.n	8014a00 <RegionCommonComputeRxWindowParameters+0x58>
 80149d8:	7afb      	ldrb	r3, [r7, #11]
 80149da:	3b04      	subs	r3, #4
 80149dc:	4619      	mov	r1, r3
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	fb03 f101 	mul.w	r1, r3, r1
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80149ea:	fb00 f303 	mul.w	r3, r0, r3
 80149ee:	440b      	add	r3, r1
 80149f0:	0059      	lsls	r1, r3, #1
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	440b      	add	r3, r1
 80149f6:	1e59      	subs	r1, r3, #1
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80149fe:	e00f      	b.n	8014a20 <RegionCommonComputeRxWindowParameters+0x78>
 8014a00:	7afb      	ldrb	r3, [r7, #11]
 8014a02:	3b04      	subs	r3, #4
 8014a04:	4619      	mov	r1, r3
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	fb03 f101 	mul.w	r1, r3, r1
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a12:	fb00 f303 	mul.w	r3, r0, r3
 8014a16:	440b      	add	r3, r1
 8014a18:	0059      	lsls	r1, r3, #1
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a20:	429a      	cmp	r2, r3
 8014a22:	bf38      	it	cc
 8014a24:	461a      	movcc	r2, r3
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	009b      	lsls	r3, r3, #2
 8014a2e:	4619      	mov	r1, r3
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	68fa      	ldr	r2, [r7, #12]
 8014a36:	fb02 f303 	mul.w	r3, r2, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d007      	beq.n	8014a4e <RegionCommonComputeRxWindowParameters+0xa6>
 8014a3e:	69bb      	ldr	r3, [r7, #24]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	fb02 f303 	mul.w	r3, r2, r3
 8014a48:	3301      	adds	r3, #1
 8014a4a:	085b      	lsrs	r3, r3, #1
 8014a4c:	e005      	b.n	8014a5a <RegionCommonComputeRxWindowParameters+0xb2>
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	fb02 f303 	mul.w	r3, r2, r3
 8014a58:	085b      	lsrs	r3, r3, #1
 8014a5a:	1acb      	subs	r3, r1, r3
 8014a5c:	683a      	ldr	r2, [r7, #0]
 8014a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014a62:	fb01 f202 	mul.w	r2, r1, r2
 8014a66:	1a9b      	subs	r3, r3, r2
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	dd27      	ble.n	8014abc <RegionCommonComputeRxWindowParameters+0x114>
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	4619      	mov	r1, r3
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	fb02 f303 	mul.w	r3, r2, r3
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d007      	beq.n	8014a90 <RegionCommonComputeRxWindowParameters+0xe8>
 8014a80:	69bb      	ldr	r3, [r7, #24]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	fb02 f303 	mul.w	r3, r2, r3
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	085b      	lsrs	r3, r3, #1
 8014a8e:	e005      	b.n	8014a9c <RegionCommonComputeRxWindowParameters+0xf4>
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	fb02 f303 	mul.w	r3, r2, r3
 8014a9a:	085b      	lsrs	r3, r3, #1
 8014a9c:	1acb      	subs	r3, r1, r3
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014aa4:	fb01 f202 	mul.w	r2, r1, r2
 8014aa8:	1a9b      	subs	r3, r3, r2
 8014aaa:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014aae:	4a19      	ldr	r2, [pc, #100]	; (8014b14 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8014ab4:	1192      	asrs	r2, r2, #6
 8014ab6:	17db      	asrs	r3, r3, #31
 8014ab8:	1ad3      	subs	r3, r2, r3
 8014aba:	e024      	b.n	8014b06 <RegionCommonComputeRxWindowParameters+0x15e>
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	68fa      	ldr	r2, [r7, #12]
 8014ac8:	fb02 f303 	mul.w	r3, r2, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d007      	beq.n	8014ae0 <RegionCommonComputeRxWindowParameters+0x138>
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	fb02 f303 	mul.w	r3, r2, r3
 8014ada:	3301      	adds	r3, #1
 8014adc:	085b      	lsrs	r3, r3, #1
 8014ade:	e005      	b.n	8014aec <RegionCommonComputeRxWindowParameters+0x144>
 8014ae0:	69bb      	ldr	r3, [r7, #24]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	68fa      	ldr	r2, [r7, #12]
 8014ae6:	fb02 f303 	mul.w	r3, r2, r3
 8014aea:	085b      	lsrs	r3, r3, #1
 8014aec:	1acb      	subs	r3, r1, r3
 8014aee:	683a      	ldr	r2, [r7, #0]
 8014af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014af4:	fb01 f202 	mul.w	r2, r1, r2
 8014af8:	1a9b      	subs	r3, r3, r2
 8014afa:	4a06      	ldr	r2, [pc, #24]	; (8014b14 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014afc:	fb82 1203 	smull	r1, r2, r2, r3
 8014b00:	1192      	asrs	r2, r2, #6
 8014b02:	17db      	asrs	r3, r3, #31
 8014b04:	1ad3      	subs	r3, r2, r3
 8014b06:	69fa      	ldr	r2, [r7, #28]
 8014b08:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014b0a:	bf00      	nop
 8014b0c:	3714      	adds	r7, #20
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bc80      	pop	{r7}
 8014b12:	4770      	bx	lr
 8014b14:	10624dd3 	.word	0x10624dd3

08014b18 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b086      	sub	sp, #24
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	4603      	mov	r3, r0
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	607a      	str	r2, [r7, #4]
 8014b24:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b2e:	005b      	lsls	r3, r3, #1
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7eb fe4b 	bl	80007cc <__aeabi_ui2f>
 8014b36:	4603      	mov	r3, r0
 8014b38:	4619      	mov	r1, r3
 8014b3a:	68b8      	ldr	r0, [r7, #8]
 8014b3c:	f7eb fd94 	bl	8000668 <__aeabi_fsub>
 8014b40:	4603      	mov	r3, r0
 8014b42:	6879      	ldr	r1, [r7, #4]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7eb fd8f 	bl	8000668 <__aeabi_fsub>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7eb fc7f 	bl	8000450 <__aeabi_f2d>
 8014b52:	4602      	mov	r2, r0
 8014b54:	460b      	mov	r3, r1
 8014b56:	4610      	mov	r0, r2
 8014b58:	4619      	mov	r1, r3
 8014b5a:	f006 f90d 	bl	801ad78 <floor>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	460b      	mov	r3, r1
 8014b62:	4610      	mov	r0, r2
 8014b64:	4619      	mov	r1, r3
 8014b66:	f7eb fd53 	bl	8000610 <__aeabi_d2iz>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3718      	adds	r7, #24
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}

08014b7a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014b7a:	b590      	push	{r4, r7, lr}
 8014b7c:	b087      	sub	sp, #28
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	60f8      	str	r0, [r7, #12]
 8014b82:	60b9      	str	r1, [r7, #8]
 8014b84:	607a      	str	r2, [r7, #4]
 8014b86:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014b90:	2300      	movs	r3, #0
 8014b92:	757b      	strb	r3, [r7, #21]
 8014b94:	2300      	movs	r3, #0
 8014b96:	753b      	strb	r3, [r7, #20]
 8014b98:	e09c      	b.n	8014cd4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	74fb      	strb	r3, [r7, #19]
 8014b9e:	e08f      	b.n	8014cc0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	685a      	ldr	r2, [r3, #4]
 8014ba4:	7d3b      	ldrb	r3, [r7, #20]
 8014ba6:	005b      	lsls	r3, r3, #1
 8014ba8:	4413      	add	r3, r2
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	461a      	mov	r2, r3
 8014bae:	7cfb      	ldrb	r3, [r7, #19]
 8014bb0:	fa42 f303 	asr.w	r3, r2, r3
 8014bb4:	f003 0301 	and.w	r3, r3, #1
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d07e      	beq.n	8014cba <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	689a      	ldr	r2, [r3, #8]
 8014bc0:	7d79      	ldrb	r1, [r7, #21]
 8014bc2:	7cfb      	ldrb	r3, [r7, #19]
 8014bc4:	440b      	add	r3, r1
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	460b      	mov	r3, r1
 8014bca:	005b      	lsls	r3, r3, #1
 8014bcc:	440b      	add	r3, r1
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	4413      	add	r3, r2
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d06b      	beq.n	8014cb0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	f083 0301 	eor.w	r3, r3, #1
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d011      	beq.n	8014c0a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d00d      	beq.n	8014c0a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	695a      	ldr	r2, [r3, #20]
 8014bf2:	7d3b      	ldrb	r3, [r7, #20]
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	4413      	add	r3, r2
 8014bf8:	881b      	ldrh	r3, [r3, #0]
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	7cfb      	ldrb	r3, [r7, #19]
 8014bfe:	fa42 f303 	asr.w	r3, r2, r3
 8014c02:	f003 0301 	and.w	r3, r3, #1
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d054      	beq.n	8014cb4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	785b      	ldrb	r3, [r3, #1]
 8014c0e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	689a      	ldr	r2, [r3, #8]
 8014c14:	7d79      	ldrb	r1, [r7, #21]
 8014c16:	7cfb      	ldrb	r3, [r7, #19]
 8014c18:	440b      	add	r3, r1
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	005b      	lsls	r3, r3, #1
 8014c20:	440b      	add	r3, r1
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	4413      	add	r3, r2
 8014c26:	7a1b      	ldrb	r3, [r3, #8]
 8014c28:	f343 0303 	sbfx	r3, r3, #0, #4
 8014c2c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c2e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	689a      	ldr	r2, [r3, #8]
 8014c34:	7d79      	ldrb	r1, [r7, #21]
 8014c36:	7cfb      	ldrb	r3, [r7, #19]
 8014c38:	440b      	add	r3, r1
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	005b      	lsls	r3, r3, #1
 8014c40:	440b      	add	r3, r1
 8014c42:	009b      	lsls	r3, r3, #2
 8014c44:	4413      	add	r3, r2
 8014c46:	7a1b      	ldrb	r3, [r3, #8]
 8014c48:	f343 1303 	sbfx	r3, r3, #4, #4
 8014c4c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014c4e:	461a      	mov	r2, r3
 8014c50:	4621      	mov	r1, r4
 8014c52:	f7ff fbf8 	bl	8014446 <RegionCommonValueInRange>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d02d      	beq.n	8014cb8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	68da      	ldr	r2, [r3, #12]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	6899      	ldr	r1, [r3, #8]
 8014c64:	7d78      	ldrb	r0, [r7, #21]
 8014c66:	7cfb      	ldrb	r3, [r7, #19]
 8014c68:	4403      	add	r3, r0
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4403      	add	r3, r0
 8014c72:	009b      	lsls	r3, r3, #2
 8014c74:	440b      	add	r3, r1
 8014c76:	7a5b      	ldrb	r3, [r3, #9]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	005b      	lsls	r3, r3, #1
 8014c7e:	440b      	add	r3, r1
 8014c80:	00db      	lsls	r3, r3, #3
 8014c82:	4413      	add	r3, r2
 8014c84:	7d1b      	ldrb	r3, [r3, #20]
 8014c86:	f083 0301 	eor.w	r3, r3, #1
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d003      	beq.n	8014c98 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014c90:	7dbb      	ldrb	r3, [r7, #22]
 8014c92:	3301      	adds	r3, #1
 8014c94:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014c96:	e010      	b.n	8014cba <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014c98:	7dfb      	ldrb	r3, [r7, #23]
 8014c9a:	1c5a      	adds	r2, r3, #1
 8014c9c:	75fa      	strb	r2, [r7, #23]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	7d79      	ldrb	r1, [r7, #21]
 8014ca6:	7cfa      	ldrb	r2, [r7, #19]
 8014ca8:	440a      	add	r2, r1
 8014caa:	b2d2      	uxtb	r2, r2
 8014cac:	701a      	strb	r2, [r3, #0]
 8014cae:	e004      	b.n	8014cba <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014cb0:	bf00      	nop
 8014cb2:	e002      	b.n	8014cba <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014cb4:	bf00      	nop
 8014cb6:	e000      	b.n	8014cba <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014cb8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014cba:	7cfb      	ldrb	r3, [r7, #19]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	74fb      	strb	r3, [r7, #19]
 8014cc0:	7cfb      	ldrb	r3, [r7, #19]
 8014cc2:	2b0f      	cmp	r3, #15
 8014cc4:	f67f af6c 	bls.w	8014ba0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014cc8:	7d7b      	ldrb	r3, [r7, #21]
 8014cca:	3310      	adds	r3, #16
 8014ccc:	757b      	strb	r3, [r7, #21]
 8014cce:	7d3b      	ldrb	r3, [r7, #20]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	753b      	strb	r3, [r7, #20]
 8014cd4:	7d7b      	ldrb	r3, [r7, #21]
 8014cd6:	b29a      	uxth	r2, r3
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	8a1b      	ldrh	r3, [r3, #16]
 8014cdc:	429a      	cmp	r2, r3
 8014cde:	f4ff af5c 	bcc.w	8014b9a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	7dfa      	ldrb	r2, [r7, #23]
 8014ce6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	7dba      	ldrb	r2, [r7, #22]
 8014cec:	701a      	strb	r2, [r3, #0]
}
 8014cee:	bf00      	nop
 8014cf0:	371c      	adds	r7, #28
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd90      	pop	{r4, r7, pc}

08014cf6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cf8:	b08b      	sub	sp, #44	; 0x2c
 8014cfa:	af04      	add	r7, sp, #16
 8014cfc:	60f8      	str	r0, [r7, #12]
 8014cfe:	60b9      	str	r1, [r7, #8]
 8014d00:	607a      	str	r2, [r7, #4]
 8014d02:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f005 fcb1 	bl	801a670 <UTIL_TIMER_GetElapsedTime>
 8014d0e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	1ad2      	subs	r2, r2, r3
 8014d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d1a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d1e:	2201      	movs	r2, #1
 8014d20:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	2200      	movs	r2, #0
 8014d26:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d004      	beq.n	8014d3a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014d34:	697a      	ldr	r2, [r7, #20]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d32b      	bcc.n	8014d92 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	69db      	ldr	r3, [r3, #28]
 8014d44:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014d4a:	68dd      	ldr	r5, [r3, #12]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	7a5e      	ldrb	r6, [r3, #9]
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	7d1b      	ldrb	r3, [r3, #20]
 8014d5a:	68fa      	ldr	r2, [r7, #12]
 8014d5c:	6992      	ldr	r2, [r2, #24]
 8014d5e:	9203      	str	r2, [sp, #12]
 8014d60:	68fa      	ldr	r2, [r7, #12]
 8014d62:	f10d 0e04 	add.w	lr, sp, #4
 8014d66:	320c      	adds	r2, #12
 8014d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d6c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4663      	mov	r3, ip
 8014d74:	4632      	mov	r2, r6
 8014d76:	4629      	mov	r1, r5
 8014d78:	4620      	mov	r0, r4
 8014d7a:	f7ff fc35 	bl	80145e8 <RegionCommonUpdateBandTimeOff>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d82:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	69d8      	ldr	r0, [r3, #28]
 8014d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	6879      	ldr	r1, [r7, #4]
 8014d8e:	f7ff fef4 	bl	8014b7a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d004      	beq.n	8014da4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014da0:	2300      	movs	r3, #0
 8014da2:	e006      	b.n	8014db2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d001      	beq.n	8014db0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014dac:	230b      	movs	r3, #11
 8014dae:	e000      	b.n	8014db2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014db0:	230c      	movs	r3, #12
    }
}
 8014db2:	4618      	mov	r0, r3
 8014db4:	371c      	adds	r7, #28
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014dba <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014dba:	b5b0      	push	{r4, r5, r7, lr}
 8014dbc:	b086      	sub	sp, #24
 8014dbe:	af02      	add	r7, sp, #8
 8014dc0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f993 2000 	ldrsb.w	r2, [r3]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d103      	bne.n	8014de0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014dde:	e026      	b.n	8014e2e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014de0:	7bfb      	ldrb	r3, [r7, #15]
 8014de2:	3b01      	subs	r3, #1
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014dee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d019      	beq.n	8014e2a <RegionCommonGetNextLowerTxDr+0x70>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	78d8      	ldrb	r0, [r3, #3]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6859      	ldr	r1, [r3, #4]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	6892      	ldr	r2, [r2, #8]
 8014e0e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014e12:	9201      	str	r2, [sp, #4]
 8014e14:	9300      	str	r3, [sp, #0]
 8014e16:	462b      	mov	r3, r5
 8014e18:	4622      	mov	r2, r4
 8014e1a:	f7ff faa2 	bl	8014362 <RegionCommonChanVerifyDr>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	f083 0301 	eor.w	r3, r3, #1
 8014e24:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1da      	bne.n	8014de0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	3710      	adds	r7, #16
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bdb0      	pop	{r4, r5, r7, pc}

08014e36 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014e36:	b480      	push	{r7}
 8014e38:	b083      	sub	sp, #12
 8014e3a:	af00      	add	r7, sp, #0
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	460a      	mov	r2, r1
 8014e40:	71fb      	strb	r3, [r7, #7]
 8014e42:	4613      	mov	r3, r2
 8014e44:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014e46:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	bfb8      	it	lt
 8014e52:	4613      	movlt	r3, r2
 8014e54:	b25b      	sxtb	r3, r3
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	370c      	adds	r7, #12
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bc80      	pop	{r7}
 8014e5e:	4770      	bx	lr

08014e60 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014e60:	b480      	push	{r7}
 8014e62:	b083      	sub	sp, #12
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	683a      	ldr	r2, [r7, #0]
 8014e70:	4413      	add	r3, r2
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	4a07      	ldr	r2, [pc, #28]	; (8014e94 <RegionCommonGetBandwidth+0x34>)
 8014e76:	4293      	cmp	r3, r2
 8014e78:	d004      	beq.n	8014e84 <RegionCommonGetBandwidth+0x24>
 8014e7a:	4a07      	ldr	r2, [pc, #28]	; (8014e98 <RegionCommonGetBandwidth+0x38>)
 8014e7c:	4293      	cmp	r3, r2
 8014e7e:	d003      	beq.n	8014e88 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014e80:	2300      	movs	r3, #0
 8014e82:	e002      	b.n	8014e8a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014e84:	2301      	movs	r3, #1
 8014e86:	e000      	b.n	8014e8a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014e88:	2302      	movs	r3, #2
    }
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bc80      	pop	{r7}
 8014e92:	4770      	bx	lr
 8014e94:	0003d090 	.word	0x0003d090
 8014e98:	0007a120 	.word	0x0007a120

08014e9c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014e9c:	b5b0      	push	{r4, r5, r7, lr}
 8014e9e:	b08c      	sub	sp, #48	; 0x30
 8014ea0:	af04      	add	r7, sp, #16
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	6039      	str	r1, [r7, #0]
 8014ea6:	71fb      	strb	r3, [r7, #7]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014eac:	4b17      	ldr	r3, [pc, #92]	; (8014f0c <RegionCommonRxConfigPrint+0x70>)
 8014eae:	f107 0408 	add.w	r4, r7, #8
 8014eb2:	461d      	mov	r5, r3
 8014eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014eb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ebc:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014ec0:	79fb      	ldrb	r3, [r7, #7]
 8014ec2:	2b05      	cmp	r3, #5
 8014ec4:	d813      	bhi.n	8014eee <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014ec6:	79fb      	ldrb	r3, [r7, #7]
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	f107 0220 	add.w	r2, r7, #32
 8014ece:	4413      	add	r3, r2
 8014ed0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014ed4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014ed8:	9202      	str	r2, [sp, #8]
 8014eda:	683a      	ldr	r2, [r7, #0]
 8014edc:	9201      	str	r2, [sp, #4]
 8014ede:	9300      	str	r3, [sp, #0]
 8014ee0:	4b0b      	ldr	r3, [pc, #44]	; (8014f10 <RegionCommonRxConfigPrint+0x74>)
 8014ee2:	2201      	movs	r2, #1
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	2002      	movs	r0, #2
 8014ee8:	f005 fca0 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014eec:	e00a      	b.n	8014f04 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014eee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014ef2:	9301      	str	r3, [sp, #4]
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	4b06      	ldr	r3, [pc, #24]	; (8014f14 <RegionCommonRxConfigPrint+0x78>)
 8014efa:	2201      	movs	r2, #1
 8014efc:	2100      	movs	r1, #0
 8014efe:	2002      	movs	r0, #2
 8014f00:	f005 fc94 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 8014f04:	bf00      	nop
 8014f06:	3720      	adds	r7, #32
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8014f0c:	0801b5ec 	.word	0x0801b5ec
 8014f10:	0801b5b0 	.word	0x0801b5b0
 8014f14:	0801b5d0 	.word	0x0801b5d0

08014f18 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b084      	sub	sp, #16
 8014f1c:	af02      	add	r7, sp, #8
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	460b      	mov	r3, r1
 8014f22:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f28:	9301      	str	r3, [sp, #4]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	9300      	str	r3, [sp, #0]
 8014f2e:	4b05      	ldr	r3, [pc, #20]	; (8014f44 <RegionCommonTxConfigPrint+0x2c>)
 8014f30:	2201      	movs	r2, #1
 8014f32:	2100      	movs	r1, #0
 8014f34:	2002      	movs	r0, #2
 8014f36:	f005 fc79 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
}
 8014f3a:	bf00      	nop
 8014f3c:	3708      	adds	r7, #8
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	0801b604 	.word	0x0801b604

08014f48 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014f52:	4b2d      	ldr	r3, [pc, #180]	; (8015008 <VerifyRfFreq+0xc0>)
 8014f54:	6a1b      	ldr	r3, [r3, #32]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	4798      	blx	r3
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	f083 0301 	eor.w	r3, r3, #1
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d001      	beq.n	8014f6a <VerifyRfFreq+0x22>
    {
        return false;
 8014f66:	2300      	movs	r3, #0
 8014f68:	e04a      	b.n	8015000 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	4a27      	ldr	r2, [pc, #156]	; (801500c <VerifyRfFreq+0xc4>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d307      	bcc.n	8014f82 <VerifyRfFreq+0x3a>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4a26      	ldr	r2, [pc, #152]	; (8015010 <VerifyRfFreq+0xc8>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d803      	bhi.n	8014f82 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	2202      	movs	r2, #2
 8014f7e:	701a      	strb	r2, [r3, #0]
 8014f80:	e03d      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	4a22      	ldr	r2, [pc, #136]	; (8015010 <VerifyRfFreq+0xc8>)
 8014f86:	4293      	cmp	r3, r2
 8014f88:	d907      	bls.n	8014f9a <VerifyRfFreq+0x52>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4a21      	ldr	r2, [pc, #132]	; (8015014 <VerifyRfFreq+0xcc>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d803      	bhi.n	8014f9a <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	2200      	movs	r2, #0
 8014f96:	701a      	strb	r2, [r3, #0]
 8014f98:	e031      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4a1d      	ldr	r2, [pc, #116]	; (8015014 <VerifyRfFreq+0xcc>)
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d907      	bls.n	8014fb2 <VerifyRfFreq+0x6a>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	4a1c      	ldr	r2, [pc, #112]	; (8015018 <VerifyRfFreq+0xd0>)
 8014fa6:	4293      	cmp	r3, r2
 8014fa8:	d803      	bhi.n	8014fb2 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	2201      	movs	r2, #1
 8014fae:	701a      	strb	r2, [r3, #0]
 8014fb0:	e025      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4a19      	ldr	r2, [pc, #100]	; (801501c <VerifyRfFreq+0xd4>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d907      	bls.n	8014fca <VerifyRfFreq+0x82>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	4a18      	ldr	r2, [pc, #96]	; (8015020 <VerifyRfFreq+0xd8>)
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d803      	bhi.n	8014fca <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	2205      	movs	r2, #5
 8014fc6:	701a      	strb	r2, [r3, #0]
 8014fc8:	e019      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a15      	ldr	r2, [pc, #84]	; (8015024 <VerifyRfFreq+0xdc>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d907      	bls.n	8014fe2 <VerifyRfFreq+0x9a>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	4a14      	ldr	r2, [pc, #80]	; (8015028 <VerifyRfFreq+0xe0>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d803      	bhi.n	8014fe2 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	2203      	movs	r2, #3
 8014fde:	701a      	strb	r2, [r3, #0]
 8014fe0:	e00d      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4a11      	ldr	r2, [pc, #68]	; (801502c <VerifyRfFreq+0xe4>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d307      	bcc.n	8014ffa <VerifyRfFreq+0xb2>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4a10      	ldr	r2, [pc, #64]	; (8015030 <VerifyRfFreq+0xe8>)
 8014fee:	4293      	cmp	r3, r2
 8014ff0:	d803      	bhi.n	8014ffa <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	2204      	movs	r2, #4
 8014ff6:	701a      	strb	r2, [r3, #0]
 8014ff8:	e001      	b.n	8014ffe <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	e000      	b.n	8015000 <VerifyRfFreq+0xb8>
    }
    return true;
 8014ffe:	2301      	movs	r3, #1
}
 8015000:	4618      	mov	r0, r3
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}
 8015008:	0801bbc4 	.word	0x0801bbc4
 801500c:	337055c0 	.word	0x337055c0
 8015010:	338eda3f 	.word	0x338eda3f
 8015014:	33bca100 	.word	0x33bca100
 8015018:	33c5c8c0 	.word	0x33c5c8c0
 801501c:	33c74f5f 	.word	0x33c74f5f
 8015020:	33cef080 	.word	0x33cef080
 8015024:	33d1fdbf 	.word	0x33d1fdbf
 8015028:	33d5ce50 	.word	0x33d5ce50
 801502c:	33d691a0 	.word	0x33d691a0
 8015030:	33db2580 	.word	0x33db2580

08015034 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015034:	b590      	push	{r4, r7, lr}
 8015036:	b08b      	sub	sp, #44	; 0x2c
 8015038:	af04      	add	r7, sp, #16
 801503a:	4603      	mov	r3, r0
 801503c:	460a      	mov	r2, r1
 801503e:	71fb      	strb	r3, [r7, #7]
 8015040:	4613      	mov	r3, r2
 8015042:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015048:	4a1f      	ldr	r2, [pc, #124]	; (80150c8 <GetTimeOnAir+0x94>)
 801504a:	5cd3      	ldrb	r3, [r2, r3]
 801504c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015052:	491e      	ldr	r1, [pc, #120]	; (80150cc <GetTimeOnAir+0x98>)
 8015054:	4618      	mov	r0, r3
 8015056:	f7ff ff03 	bl	8014e60 <RegionCommonGetBandwidth>
 801505a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801505c:	2300      	movs	r3, #0
 801505e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015064:	2b07      	cmp	r3, #7
 8015066:	d118      	bne.n	801509a <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015068:	4b19      	ldr	r3, [pc, #100]	; (80150d0 <GetTimeOnAir+0x9c>)
 801506a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801506c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015074:	fb02 f303 	mul.w	r3, r2, r3
 8015078:	4619      	mov	r1, r3
 801507a:	88bb      	ldrh	r3, [r7, #4]
 801507c:	b2db      	uxtb	r3, r3
 801507e:	2201      	movs	r2, #1
 8015080:	9203      	str	r2, [sp, #12]
 8015082:	9302      	str	r3, [sp, #8]
 8015084:	2300      	movs	r3, #0
 8015086:	9301      	str	r3, [sp, #4]
 8015088:	2305      	movs	r3, #5
 801508a:	9300      	str	r3, [sp, #0]
 801508c:	2300      	movs	r3, #0
 801508e:	460a      	mov	r2, r1
 8015090:	68f9      	ldr	r1, [r7, #12]
 8015092:	2000      	movs	r0, #0
 8015094:	47a0      	blx	r4
 8015096:	6178      	str	r0, [r7, #20]
 8015098:	e011      	b.n	80150be <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801509a:	4b0d      	ldr	r3, [pc, #52]	; (80150d0 <GetTimeOnAir+0x9c>)
 801509c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801509e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80150a2:	88bb      	ldrh	r3, [r7, #4]
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	2101      	movs	r1, #1
 80150a8:	9103      	str	r1, [sp, #12]
 80150aa:	9302      	str	r3, [sp, #8]
 80150ac:	2300      	movs	r3, #0
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	2308      	movs	r3, #8
 80150b2:	9300      	str	r3, [sp, #0]
 80150b4:	2301      	movs	r3, #1
 80150b6:	68f9      	ldr	r1, [r7, #12]
 80150b8:	2001      	movs	r0, #1
 80150ba:	47a0      	blx	r4
 80150bc:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80150be:	697b      	ldr	r3, [r7, #20]
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	371c      	adds	r7, #28
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd90      	pop	{r4, r7, pc}
 80150c8:	0801bb8c 	.word	0x0801bb8c
 80150cc:	0801bb94 	.word	0x0801bb94
 80150d0:	0801bbc4 	.word	0x0801bbc4

080150d4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b088      	sub	sp, #32
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80150dc:	2300      	movs	r3, #0
 80150de:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	3b01      	subs	r3, #1
 80150e6:	2b38      	cmp	r3, #56	; 0x38
 80150e8:	f200 8125 	bhi.w	8015336 <RegionEU868GetPhyParam+0x262>
 80150ec:	a201      	add	r2, pc, #4	; (adr r2, 80150f4 <RegionEU868GetPhyParam+0x20>)
 80150ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150f2:	bf00      	nop
 80150f4:	080151d9 	.word	0x080151d9
 80150f8:	080151df 	.word	0x080151df
 80150fc:	08015337 	.word	0x08015337
 8015100:	08015337 	.word	0x08015337
 8015104:	08015337 	.word	0x08015337
 8015108:	080151e5 	.word	0x080151e5
 801510c:	08015337 	.word	0x08015337
 8015110:	0801521d 	.word	0x0801521d
 8015114:	08015337 	.word	0x08015337
 8015118:	08015223 	.word	0x08015223
 801511c:	08015229 	.word	0x08015229
 8015120:	0801522f 	.word	0x0801522f
 8015124:	08015235 	.word	0x08015235
 8015128:	08015245 	.word	0x08015245
 801512c:	08015255 	.word	0x08015255
 8015130:	0801525b 	.word	0x0801525b
 8015134:	08015263 	.word	0x08015263
 8015138:	0801526b 	.word	0x0801526b
 801513c:	08015273 	.word	0x08015273
 8015140:	0801527b 	.word	0x0801527b
 8015144:	08015283 	.word	0x08015283
 8015148:	0801528b 	.word	0x0801528b
 801514c:	0801529f 	.word	0x0801529f
 8015150:	080152a5 	.word	0x080152a5
 8015154:	080152ab 	.word	0x080152ab
 8015158:	080152b1 	.word	0x080152b1
 801515c:	080152bb 	.word	0x080152bb
 8015160:	080152c5 	.word	0x080152c5
 8015164:	080152cb 	.word	0x080152cb
 8015168:	080152d3 	.word	0x080152d3
 801516c:	080152d9 	.word	0x080152d9
 8015170:	080152df 	.word	0x080152df
 8015174:	080152e7 	.word	0x080152e7
 8015178:	080151eb 	.word	0x080151eb
 801517c:	08015337 	.word	0x08015337
 8015180:	08015337 	.word	0x08015337
 8015184:	08015337 	.word	0x08015337
 8015188:	08015337 	.word	0x08015337
 801518c:	08015337 	.word	0x08015337
 8015190:	08015337 	.word	0x08015337
 8015194:	08015337 	.word	0x08015337
 8015198:	08015337 	.word	0x08015337
 801519c:	08015337 	.word	0x08015337
 80151a0:	08015337 	.word	0x08015337
 80151a4:	08015337 	.word	0x08015337
 80151a8:	08015337 	.word	0x08015337
 80151ac:	08015337 	.word	0x08015337
 80151b0:	080152ed 	.word	0x080152ed
 80151b4:	080152f3 	.word	0x080152f3
 80151b8:	08015301 	.word	0x08015301
 80151bc:	08015337 	.word	0x08015337
 80151c0:	08015337 	.word	0x08015337
 80151c4:	08015307 	.word	0x08015307
 80151c8:	0801530d 	.word	0x0801530d
 80151cc:	08015337 	.word	0x08015337
 80151d0:	08015313 	.word	0x08015313
 80151d4:	08015323 	.word	0x08015323
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80151d8:	2300      	movs	r3, #0
 80151da:	61bb      	str	r3, [r7, #24]
            break;
 80151dc:	e0ac      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80151de:	2300      	movs	r3, #0
 80151e0:	61bb      	str	r3, [r7, #24]
            break;
 80151e2:	e0a9      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80151e4:	2300      	movs	r3, #0
 80151e6:	61bb      	str	r3, [r7, #24]
            break;
 80151e8:	e0a6      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80151f0:	733b      	strb	r3, [r7, #12]
 80151f2:	2307      	movs	r3, #7
 80151f4:	737b      	strb	r3, [r7, #13]
 80151f6:	2300      	movs	r3, #0
 80151f8:	73bb      	strb	r3, [r7, #14]
 80151fa:	2310      	movs	r3, #16
 80151fc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80151fe:	4b52      	ldr	r3, [pc, #328]	; (8015348 <RegionEU868GetPhyParam+0x274>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015204:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015206:	4b50      	ldr	r3, [pc, #320]	; (8015348 <RegionEU868GetPhyParam+0x274>)
 8015208:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801520a:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801520c:	f107 030c 	add.w	r3, r7, #12
 8015210:	4618      	mov	r0, r3
 8015212:	f7ff fdd2 	bl	8014dba <RegionCommonGetNextLowerTxDr>
 8015216:	4603      	mov	r3, r0
 8015218:	61bb      	str	r3, [r7, #24]
            break;
 801521a:	e08d      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801521c:	2300      	movs	r3, #0
 801521e:	61bb      	str	r3, [r7, #24]
            break;
 8015220:	e08a      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015222:	2300      	movs	r3, #0
 8015224:	61bb      	str	r3, [r7, #24]
            break;
 8015226:	e087      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015228:	2340      	movs	r3, #64	; 0x40
 801522a:	61bb      	str	r3, [r7, #24]
            break;
 801522c:	e084      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801522e:	2320      	movs	r3, #32
 8015230:	61bb      	str	r3, [r7, #24]
            break;
 8015232:	e081      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801523a:	461a      	mov	r2, r3
 801523c:	4b43      	ldr	r3, [pc, #268]	; (801534c <RegionEU868GetPhyParam+0x278>)
 801523e:	5c9b      	ldrb	r3, [r3, r2]
 8015240:	61bb      	str	r3, [r7, #24]
            break;
 8015242:	e079      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801524a:	461a      	mov	r2, r3
 801524c:	4b40      	ldr	r3, [pc, #256]	; (8015350 <RegionEU868GetPhyParam+0x27c>)
 801524e:	5c9b      	ldrb	r3, [r3, r2]
 8015250:	61bb      	str	r3, [r7, #24]
            break;
 8015252:	e071      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015254:	2301      	movs	r3, #1
 8015256:	61bb      	str	r3, [r7, #24]
            break;
 8015258:	e06e      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801525a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801525e:	61bb      	str	r3, [r7, #24]
            break;
 8015260:	e06a      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015266:	61bb      	str	r3, [r7, #24]
            break;
 8015268:	e066      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801526a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801526e:	61bb      	str	r3, [r7, #24]
            break;
 8015270:	e062      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015272:	f241 3388 	movw	r3, #5000	; 0x1388
 8015276:	61bb      	str	r3, [r7, #24]
            break;
 8015278:	e05e      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801527a:	f241 7370 	movw	r3, #6000	; 0x1770
 801527e:	61bb      	str	r3, [r7, #24]
            break;
 8015280:	e05a      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8015282:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015286:	61bb      	str	r3, [r7, #24]
            break;
 8015288:	e056      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801528a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801528e:	4831      	ldr	r0, [pc, #196]	; (8015354 <RegionEU868GetPhyParam+0x280>)
 8015290:	f001 f874 	bl	801637c <randr>
 8015294:	4603      	mov	r3, r0
 8015296:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801529a:	61bb      	str	r3, [r7, #24]
            break;
 801529c:	e04c      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801529e:	2300      	movs	r3, #0
 80152a0:	61bb      	str	r3, [r7, #24]
            break;
 80152a2:	e049      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80152a4:	4b2c      	ldr	r3, [pc, #176]	; (8015358 <RegionEU868GetPhyParam+0x284>)
 80152a6:	61bb      	str	r3, [r7, #24]
            break;
 80152a8:	e046      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80152aa:	2300      	movs	r3, #0
 80152ac:	61bb      	str	r3, [r7, #24]
            break;
 80152ae:	e043      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80152b0:	4b25      	ldr	r3, [pc, #148]	; (8015348 <RegionEU868GetPhyParam+0x274>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	33c0      	adds	r3, #192	; 0xc0
 80152b6:	61bb      	str	r3, [r7, #24]
            break;
 80152b8:	e03e      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80152ba:	4b23      	ldr	r3, [pc, #140]	; (8015348 <RegionEU868GetPhyParam+0x274>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	33c2      	adds	r3, #194	; 0xc2
 80152c0:	61bb      	str	r3, [r7, #24]
            break;
 80152c2:	e039      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80152c4:	2310      	movs	r3, #16
 80152c6:	61bb      	str	r3, [r7, #24]
            break;
 80152c8:	e036      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80152ca:	4b1f      	ldr	r3, [pc, #124]	; (8015348 <RegionEU868GetPhyParam+0x274>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	61bb      	str	r3, [r7, #24]
            break;
 80152d0:	e032      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80152d2:	2300      	movs	r3, #0
 80152d4:	61bb      	str	r3, [r7, #24]
            break;
 80152d6:	e02f      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80152d8:	2300      	movs	r3, #0
 80152da:	61bb      	str	r3, [r7, #24]
            break;
 80152dc:	e02c      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80152de:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80152e2:	61bb      	str	r3, [r7, #24]
            break;
 80152e4:	e028      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80152e6:	4b1d      	ldr	r3, [pc, #116]	; (801535c <RegionEU868GetPhyParam+0x288>)
 80152e8:	61bb      	str	r3, [r7, #24]
            break;
 80152ea:	e025      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80152ec:	4b1a      	ldr	r3, [pc, #104]	; (8015358 <RegionEU868GetPhyParam+0x284>)
 80152ee:	61bb      	str	r3, [r7, #24]
            break;
 80152f0:	e022      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80152f2:	2311      	movs	r3, #17
 80152f4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80152f6:	2302      	movs	r3, #2
 80152f8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80152fa:	2300      	movs	r3, #0
 80152fc:	76bb      	strb	r3, [r7, #26]
            break;
 80152fe:	e01b      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015300:	2303      	movs	r3, #3
 8015302:	61bb      	str	r3, [r7, #24]
            break;
 8015304:	e018      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015306:	4b14      	ldr	r3, [pc, #80]	; (8015358 <RegionEU868GetPhyParam+0x284>)
 8015308:	61bb      	str	r3, [r7, #24]
            break;
 801530a:	e015      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801530c:	2303      	movs	r3, #3
 801530e:	61bb      	str	r3, [r7, #24]
            break;
 8015310:	e012      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015318:	461a      	mov	r2, r3
 801531a:	4b11      	ldr	r3, [pc, #68]	; (8015360 <RegionEU868GetPhyParam+0x28c>)
 801531c:	5c9b      	ldrb	r3, [r3, r2]
 801531e:	61bb      	str	r3, [r7, #24]
            break;
 8015320:	e00a      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015328:	490e      	ldr	r1, [pc, #56]	; (8015364 <RegionEU868GetPhyParam+0x290>)
 801532a:	4618      	mov	r0, r3
 801532c:	f7ff fd98 	bl	8014e60 <RegionCommonGetBandwidth>
 8015330:	4603      	mov	r3, r0
 8015332:	61bb      	str	r3, [r7, #24]
            break;
 8015334:	e000      	b.n	8015338 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 8015336:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015338:	69bb      	ldr	r3, [r7, #24]
 801533a:	61fb      	str	r3, [r7, #28]
 801533c:	2300      	movs	r3, #0
 801533e:	69fb      	ldr	r3, [r7, #28]
}
 8015340:	4618      	mov	r0, r3
 8015342:	3720      	adds	r7, #32
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}
 8015348:	20000ec4 	.word	0x20000ec4
 801534c:	0801bbb4 	.word	0x0801bbb4
 8015350:	0801bbbc 	.word	0x0801bbbc
 8015354:	fffffc18 	.word	0xfffffc18
 8015358:	33d3e608 	.word	0x33d3e608
 801535c:	4009999a 	.word	0x4009999a
 8015360:	0801bb8c 	.word	0x0801bb8c
 8015364:	0801bb94 	.word	0x0801bb94

08015368 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015368:	b590      	push	{r4, r7, lr}
 801536a:	b085      	sub	sp, #20
 801536c:	af02      	add	r7, sp, #8
 801536e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015370:	4b11      	ldr	r3, [pc, #68]	; (80153b8 <RegionEU868SetBandTxDone+0x50>)
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	4b11      	ldr	r3, [pc, #68]	; (80153bc <RegionEU868SetBandTxDone+0x54>)
 8015376:	6819      	ldr	r1, [r3, #0]
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	781b      	ldrb	r3, [r3, #0]
 801537c:	4618      	mov	r0, r3
 801537e:	4603      	mov	r3, r0
 8015380:	005b      	lsls	r3, r3, #1
 8015382:	4403      	add	r3, r0
 8015384:	009b      	lsls	r3, r3, #2
 8015386:	440b      	add	r3, r1
 8015388:	3309      	adds	r3, #9
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	4619      	mov	r1, r3
 801538e:	460b      	mov	r3, r1
 8015390:	005b      	lsls	r3, r3, #1
 8015392:	440b      	add	r3, r1
 8015394:	00db      	lsls	r3, r3, #3
 8015396:	18d0      	adds	r0, r2, r3
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6899      	ldr	r1, [r3, #8]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	785c      	ldrb	r4, [r3, #1]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	691a      	ldr	r2, [r3, #16]
 80153a4:	9200      	str	r2, [sp, #0]
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	4622      	mov	r2, r4
 80153aa:	f7ff f8ef 	bl	801458c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80153ae:	bf00      	nop
 80153b0:	370c      	adds	r7, #12
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd90      	pop	{r4, r7, pc}
 80153b6:	bf00      	nop
 80153b8:	20000ec0 	.word	0x20000ec0
 80153bc:	20000ec4 	.word	0x20000ec4

080153c0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b0b0      	sub	sp, #192	; 0xc0
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80153c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80153cc:	2290      	movs	r2, #144	; 0x90
 80153ce:	2100      	movs	r1, #0
 80153d0:	4618      	mov	r0, r3
 80153d2:	f005 fcc9 	bl	801ad68 <memset>
 80153d6:	2364      	movs	r3, #100	; 0x64
 80153d8:	863b      	strh	r3, [r7, #48]	; 0x30
 80153da:	2364      	movs	r3, #100	; 0x64
 80153dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80153e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153e4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80153e8:	230a      	movs	r3, #10
 80153ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80153ee:	2364      	movs	r3, #100	; 0x64
 80153f0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80153f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153f8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	7a1b      	ldrb	r3, [r3, #8]
 8015400:	2b02      	cmp	r3, #2
 8015402:	d05c      	beq.n	80154be <RegionEU868InitDefaults+0xfe>
 8015404:	2b02      	cmp	r3, #2
 8015406:	dc69      	bgt.n	80154dc <RegionEU868InitDefaults+0x11c>
 8015408:	2b00      	cmp	r3, #0
 801540a:	d002      	beq.n	8015412 <RegionEU868InitDefaults+0x52>
 801540c:	2b01      	cmp	r3, #1
 801540e:	d03e      	beq.n	801548e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015410:	e064      	b.n	80154dc <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d061      	beq.n	80154de <RegionEU868InitDefaults+0x11e>
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d05d      	beq.n	80154de <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4a2f      	ldr	r2, [pc, #188]	; (80154e4 <RegionEU868InitDefaults+0x124>)
 8015428:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	685b      	ldr	r3, [r3, #4]
 801542e:	4a2e      	ldr	r2, [pc, #184]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015430:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015432:	4b2c      	ldr	r3, [pc, #176]	; (80154e4 <RegionEU868InitDefaults+0x124>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4618      	mov	r0, r3
 8015438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801543c:	2290      	movs	r2, #144	; 0x90
 801543e:	4619      	mov	r1, r3
 8015440:	f000 ffb3 	bl	80163aa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015444:	4b28      	ldr	r3, [pc, #160]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	4a28      	ldr	r2, [pc, #160]	; (80154ec <RegionEU868InitDefaults+0x12c>)
 801544a:	ca07      	ldmia	r2, {r0, r1, r2}
 801544c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015450:	4b25      	ldr	r3, [pc, #148]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	4a26      	ldr	r2, [pc, #152]	; (80154f0 <RegionEU868InitDefaults+0x130>)
 8015456:	330c      	adds	r3, #12
 8015458:	ca07      	ldmia	r2, {r0, r1, r2}
 801545a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801545e:	4b22      	ldr	r3, [pc, #136]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	4a24      	ldr	r2, [pc, #144]	; (80154f4 <RegionEU868InitDefaults+0x134>)
 8015464:	3318      	adds	r3, #24
 8015466:	ca07      	ldmia	r2, {r0, r1, r2}
 8015468:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801546c:	4b1e      	ldr	r3, [pc, #120]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2207      	movs	r2, #7
 8015472:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015476:	4b1c      	ldr	r3, [pc, #112]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 801547e:	4b1a      	ldr	r3, [pc, #104]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	33c2      	adds	r3, #194	; 0xc2
 8015484:	2201      	movs	r2, #1
 8015486:	4619      	mov	r1, r3
 8015488:	f7ff f85a 	bl	8014540 <RegionCommonChanMaskCopy>
 801548c:	e027      	b.n	80154de <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801548e:	4b16      	ldr	r3, [pc, #88]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	2200      	movs	r2, #0
 8015494:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015496:	4b14      	ldr	r3, [pc, #80]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	2200      	movs	r2, #0
 801549c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801549e:	4b12      	ldr	r3, [pc, #72]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2200      	movs	r2, #0
 80154a4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80154a6:	4b10      	ldr	r3, [pc, #64]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80154ae:	4b0e      	ldr	r3, [pc, #56]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	33c2      	adds	r3, #194	; 0xc2
 80154b4:	2201      	movs	r2, #1
 80154b6:	4619      	mov	r1, r3
 80154b8:	f7ff f842 	bl	8014540 <RegionCommonChanMaskCopy>
            break;
 80154bc:	e00f      	b.n	80154de <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80154be:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 80154c6:	4b08      	ldr	r3, [pc, #32]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80154ce:	4b06      	ldr	r3, [pc, #24]	; (80154e8 <RegionEU868InitDefaults+0x128>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	430a      	orrs	r2, r1
 80154d4:	b292      	uxth	r2, r2
 80154d6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 80154da:	e000      	b.n	80154de <RegionEU868InitDefaults+0x11e>
            break;
 80154dc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80154de:	37c0      	adds	r7, #192	; 0xc0
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	20000ec0 	.word	0x20000ec0
 80154e8:	20000ec4 	.word	0x20000ec4
 80154ec:	0801b620 	.word	0x0801b620
 80154f0:	0801b62c 	.word	0x0801b62c
 80154f4:	0801b638 	.word	0x0801b638

080154f8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
 8015500:	460b      	mov	r3, r1
 8015502:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015504:	78fb      	ldrb	r3, [r7, #3]
 8015506:	2b0f      	cmp	r3, #15
 8015508:	d86c      	bhi.n	80155e4 <RegionEU868Verify+0xec>
 801550a:	a201      	add	r2, pc, #4	; (adr r2, 8015510 <RegionEU868Verify+0x18>)
 801550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015510:	08015551 	.word	0x08015551
 8015514:	080155e5 	.word	0x080155e5
 8015518:	080155e5 	.word	0x080155e5
 801551c:	080155e5 	.word	0x080155e5
 8015520:	080155e5 	.word	0x080155e5
 8015524:	08015569 	.word	0x08015569
 8015528:	08015587 	.word	0x08015587
 801552c:	080155a5 	.word	0x080155a5
 8015530:	080155e5 	.word	0x080155e5
 8015534:	080155c3 	.word	0x080155c3
 8015538:	080155c3 	.word	0x080155c3
 801553c:	080155e5 	.word	0x080155e5
 8015540:	080155e5 	.word	0x080155e5
 8015544:	080155e5 	.word	0x080155e5
 8015548:	080155e5 	.word	0x080155e5
 801554c:	080155e1 	.word	0x080155e1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015550:	2300      	movs	r3, #0
 8015552:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	f107 020f 	add.w	r2, r7, #15
 801555c:	4611      	mov	r1, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff fcf2 	bl	8014f48 <VerifyRfFreq>
 8015564:	4603      	mov	r3, r0
 8015566:	e03e      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f993 3000 	ldrsb.w	r3, [r3]
 801556e:	2207      	movs	r2, #7
 8015570:	2100      	movs	r1, #0
 8015572:	4618      	mov	r0, r3
 8015574:	f7fe ff67 	bl	8014446 <RegionCommonValueInRange>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	bf14      	ite	ne
 801557e:	2301      	movne	r3, #1
 8015580:	2300      	moveq	r3, #0
 8015582:	b2db      	uxtb	r3, r3
 8015584:	e02f      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f993 3000 	ldrsb.w	r3, [r3]
 801558c:	2205      	movs	r2, #5
 801558e:	2100      	movs	r1, #0
 8015590:	4618      	mov	r0, r3
 8015592:	f7fe ff58 	bl	8014446 <RegionCommonValueInRange>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	bf14      	ite	ne
 801559c:	2301      	movne	r3, #1
 801559e:	2300      	moveq	r3, #0
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	e020      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f993 3000 	ldrsb.w	r3, [r3]
 80155aa:	2207      	movs	r2, #7
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7fe ff49 	bl	8014446 <RegionCommonValueInRange>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	bf14      	ite	ne
 80155ba:	2301      	movne	r3, #1
 80155bc:	2300      	moveq	r3, #0
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	e011      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f993 3000 	ldrsb.w	r3, [r3]
 80155c8:	2207      	movs	r2, #7
 80155ca:	2100      	movs	r1, #0
 80155cc:	4618      	mov	r0, r3
 80155ce:	f7fe ff3a 	bl	8014446 <RegionCommonValueInRange>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	bf14      	ite	ne
 80155d8:	2301      	movne	r3, #1
 80155da:	2300      	moveq	r3, #0
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	e002      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80155e0:	2301      	movs	r3, #1
 80155e2:	e000      	b.n	80155e6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80155e4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3710      	adds	r7, #16
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop

080155f0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b08a      	sub	sp, #40	; 0x28
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80155f8:	2350      	movs	r3, #80	; 0x50
 80155fa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	791b      	ldrb	r3, [r3, #4]
 8015602:	2b10      	cmp	r3, #16
 8015604:	d162      	bne.n	80156cc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	330f      	adds	r3, #15
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d15e      	bne.n	80156d0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015612:	2300      	movs	r3, #0
 8015614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015618:	2303      	movs	r3, #3
 801561a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801561e:	e050      	b.n	80156c2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015624:	2b07      	cmp	r3, #7
 8015626:	d824      	bhi.n	8015672 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015630:	4413      	add	r3, r2
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015636:	69ba      	ldr	r2, [r7, #24]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6819      	ldr	r1, [r3, #0]
 801563c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015640:	3301      	adds	r3, #1
 8015642:	440b      	add	r3, r1
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	021b      	lsls	r3, r3, #8
 8015648:	4313      	orrs	r3, r2
 801564a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6819      	ldr	r1, [r3, #0]
 8015652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015656:	3302      	adds	r3, #2
 8015658:	440b      	add	r3, r1
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	041b      	lsls	r3, r3, #16
 801565e:	4313      	orrs	r3, r2
 8015660:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	2264      	movs	r2, #100	; 0x64
 8015666:	fb02 f303 	mul.w	r3, r2, r3
 801566a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801566c:	2300      	movs	r3, #0
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e006      	b.n	8015680 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015672:	2300      	movs	r3, #0
 8015674:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015676:	2300      	movs	r3, #0
 8015678:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801567c:	2300      	movs	r3, #0
 801567e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00b      	beq.n	801569e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015686:	f107 0318 	add.w	r3, r7, #24
 801568a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801568c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015690:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015692:	f107 0310 	add.w	r3, r7, #16
 8015696:	4618      	mov	r0, r3
 8015698:	f000 fd0e 	bl	80160b8 <RegionEU868ChannelAdd>
 801569c:	e007      	b.n	80156ae <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801569e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156a2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80156a4:	f107 030c 	add.w	r3, r7, #12
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 fda7 	bl	80161fc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80156ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156b2:	3303      	adds	r3, #3
 80156b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156bc:	3301      	adds	r3, #1
 80156be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156c6:	2b0f      	cmp	r3, #15
 80156c8:	d9aa      	bls.n	8015620 <RegionEU868ApplyCFList+0x30>
 80156ca:	e002      	b.n	80156d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80156cc:	bf00      	nop
 80156ce:	e000      	b.n	80156d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80156d0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80156d2:	3728      	adds	r7, #40	; 0x28
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	791b      	ldrb	r3, [r3, #4]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d002      	beq.n	80156ee <RegionEU868ChanMaskSet+0x16>
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d00b      	beq.n	8015704 <RegionEU868ChanMaskSet+0x2c>
 80156ec:	e015      	b.n	801571a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80156ee:	4b0e      	ldr	r3, [pc, #56]	; (8015728 <RegionEU868ChanMaskSet+0x50>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	2201      	movs	r2, #1
 80156fc:	4619      	mov	r1, r3
 80156fe:	f7fe ff1f 	bl	8014540 <RegionCommonChanMaskCopy>
            break;
 8015702:	e00c      	b.n	801571e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015704:	4b08      	ldr	r3, [pc, #32]	; (8015728 <RegionEU868ChanMaskSet+0x50>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2201      	movs	r2, #1
 8015712:	4619      	mov	r1, r3
 8015714:	f7fe ff14 	bl	8014540 <RegionCommonChanMaskCopy>
            break;
 8015718:	e001      	b.n	801571e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801571a:	2300      	movs	r3, #0
 801571c:	e000      	b.n	8015720 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801571e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	20000ec4 	.word	0x20000ec4

0801572c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b088      	sub	sp, #32
 8015730:	af02      	add	r7, sp, #8
 8015732:	60ba      	str	r2, [r7, #8]
 8015734:	607b      	str	r3, [r7, #4]
 8015736:	4603      	mov	r3, r0
 8015738:	73fb      	strb	r3, [r7, #15]
 801573a:	460b      	mov	r3, r1
 801573c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801573e:	2300      	movs	r3, #0
 8015740:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015746:	2b07      	cmp	r3, #7
 8015748:	bfa8      	it	ge
 801574a:	2307      	movge	r3, #7
 801574c:	b25a      	sxtb	r2, r3
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015758:	491e      	ldr	r1, [pc, #120]	; (80157d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801575a:	4618      	mov	r0, r3
 801575c:	f7ff fb80 	bl	8014e60 <RegionCommonGetBandwidth>
 8015760:	4603      	mov	r3, r0
 8015762:	b2da      	uxtb	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801576e:	2b07      	cmp	r3, #7
 8015770:	d10a      	bne.n	8015788 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015778:	461a      	mov	r2, r3
 801577a:	4b17      	ldr	r3, [pc, #92]	; (80157d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801577c:	5c9b      	ldrb	r3, [r3, r2]
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff f902 	bl	8014988 <RegionCommonComputeSymbolTimeFsk>
 8015784:	6178      	str	r0, [r7, #20]
 8015786:	e011      	b.n	80157ac <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801578e:	461a      	mov	r2, r3
 8015790:	4b11      	ldr	r3, [pc, #68]	; (80157d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015792:	5c9a      	ldrb	r2, [r3, r2]
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801579a:	4619      	mov	r1, r3
 801579c:	4b0d      	ldr	r3, [pc, #52]	; (80157d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801579e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80157a2:	4619      	mov	r1, r3
 80157a4:	4610      	mov	r0, r2
 80157a6:	f7ff f8d9 	bl	801495c <RegionCommonComputeSymbolTimeLoRa>
 80157aa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80157ac:	4b0b      	ldr	r3, [pc, #44]	; (80157dc <RegionEU868ComputeRxWindowParameters+0xb0>)
 80157ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157b0:	4798      	blx	r3
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	3308      	adds	r3, #8
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	320c      	adds	r2, #12
 80157ba:	7bb9      	ldrb	r1, [r7, #14]
 80157bc:	9201      	str	r2, [sp, #4]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	4603      	mov	r3, r0
 80157c2:	68ba      	ldr	r2, [r7, #8]
 80157c4:	6978      	ldr	r0, [r7, #20]
 80157c6:	f7ff f8ef 	bl	80149a8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80157ca:	bf00      	nop
 80157cc:	3718      	adds	r7, #24
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801bb94 	.word	0x0801bb94
 80157d8:	0801bb8c 	.word	0x0801bb8c
 80157dc:	0801bbc4 	.word	0x0801bbc4

080157e0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80157e0:	b5b0      	push	{r4, r5, r7, lr}
 80157e2:	b090      	sub	sp, #64	; 0x40
 80157e4:	af0a      	add	r7, sp, #40	; 0x28
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	785b      	ldrb	r3, [r3, #1]
 80157ee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80157fe:	4b5a      	ldr	r3, [pc, #360]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	4798      	blx	r3
 8015804:	4603      	mov	r3, r0
 8015806:	2b00      	cmp	r3, #0
 8015808:	d001      	beq.n	801580e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801580a:	2300      	movs	r3, #0
 801580c:	e0a8      	b.n	8015960 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7cdb      	ldrb	r3, [r3, #19]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d126      	bne.n	8015864 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015816:	4b55      	ldr	r3, [pc, #340]	; (801596c <RegionEU868RxConfig+0x18c>)
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	4619      	mov	r1, r3
 8015820:	460b      	mov	r3, r1
 8015822:	005b      	lsls	r3, r3, #1
 8015824:	440b      	add	r3, r1
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	4413      	add	r3, r2
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801582e:	4b4f      	ldr	r3, [pc, #316]	; (801596c <RegionEU868RxConfig+0x18c>)
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	4619      	mov	r1, r3
 8015838:	460b      	mov	r3, r1
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	440b      	add	r3, r1
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	3304      	adds	r3, #4
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00c      	beq.n	8015864 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801584a:	4b48      	ldr	r3, [pc, #288]	; (801596c <RegionEU868RxConfig+0x18c>)
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	4619      	mov	r1, r3
 8015854:	460b      	mov	r3, r1
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	440b      	add	r3, r1
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	4413      	add	r3, r2
 801585e:	3304      	adds	r3, #4
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015868:	4a41      	ldr	r2, [pc, #260]	; (8015970 <RegionEU868RxConfig+0x190>)
 801586a:	5cd3      	ldrb	r3, [r2, r3]
 801586c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801586e:	4b3e      	ldr	r3, [pc, #248]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	6938      	ldr	r0, [r7, #16]
 8015874:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801587a:	2b07      	cmp	r3, #7
 801587c:	d128      	bne.n	80158d0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801587e:	2300      	movs	r3, #0
 8015880:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015882:	4b39      	ldr	r3, [pc, #228]	; (8015968 <RegionEU868RxConfig+0x188>)
 8015884:	699c      	ldr	r4, [r3, #24]
 8015886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801588a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801588e:	fb02 f303 	mul.w	r3, r2, r3
 8015892:	4619      	mov	r1, r3
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	689b      	ldr	r3, [r3, #8]
 8015898:	b29b      	uxth	r3, r3
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	7c92      	ldrb	r2, [r2, #18]
 801589e:	7df8      	ldrb	r0, [r7, #23]
 80158a0:	9209      	str	r2, [sp, #36]	; 0x24
 80158a2:	2200      	movs	r2, #0
 80158a4:	9208      	str	r2, [sp, #32]
 80158a6:	2200      	movs	r2, #0
 80158a8:	9207      	str	r2, [sp, #28]
 80158aa:	2200      	movs	r2, #0
 80158ac:	9206      	str	r2, [sp, #24]
 80158ae:	2201      	movs	r2, #1
 80158b0:	9205      	str	r2, [sp, #20]
 80158b2:	2200      	movs	r2, #0
 80158b4:	9204      	str	r2, [sp, #16]
 80158b6:	2200      	movs	r2, #0
 80158b8:	9203      	str	r2, [sp, #12]
 80158ba:	9302      	str	r3, [sp, #8]
 80158bc:	2305      	movs	r3, #5
 80158be:	9301      	str	r3, [sp, #4]
 80158c0:	4b2c      	ldr	r3, [pc, #176]	; (8015974 <RegionEU868RxConfig+0x194>)
 80158c2:	9300      	str	r3, [sp, #0]
 80158c4:	2300      	movs	r3, #0
 80158c6:	460a      	mov	r2, r1
 80158c8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80158cc:	47a0      	blx	r4
 80158ce:	e024      	b.n	801591a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80158d0:	2301      	movs	r3, #1
 80158d2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80158d4:	4b24      	ldr	r3, [pc, #144]	; (8015968 <RegionEU868RxConfig+0x188>)
 80158d6:	699c      	ldr	r4, [r3, #24]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	789b      	ldrb	r3, [r3, #2]
 80158dc:	461d      	mov	r5, r3
 80158de:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	7c92      	ldrb	r2, [r2, #18]
 80158ec:	7df8      	ldrb	r0, [r7, #23]
 80158ee:	9209      	str	r2, [sp, #36]	; 0x24
 80158f0:	2201      	movs	r2, #1
 80158f2:	9208      	str	r2, [sp, #32]
 80158f4:	2200      	movs	r2, #0
 80158f6:	9207      	str	r2, [sp, #28]
 80158f8:	2200      	movs	r2, #0
 80158fa:	9206      	str	r2, [sp, #24]
 80158fc:	2200      	movs	r2, #0
 80158fe:	9205      	str	r2, [sp, #20]
 8015900:	2200      	movs	r2, #0
 8015902:	9204      	str	r2, [sp, #16]
 8015904:	2200      	movs	r2, #0
 8015906:	9203      	str	r2, [sp, #12]
 8015908:	9302      	str	r3, [sp, #8]
 801590a:	2308      	movs	r3, #8
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	2300      	movs	r3, #0
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	2301      	movs	r3, #1
 8015914:	460a      	mov	r2, r1
 8015916:	4629      	mov	r1, r5
 8015918:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	7c5b      	ldrb	r3, [r3, #17]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d005      	beq.n	801592e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8015922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015926:	4a14      	ldr	r2, [pc, #80]	; (8015978 <RegionEU868RxConfig+0x198>)
 8015928:	5cd3      	ldrb	r3, [r2, r3]
 801592a:	75bb      	strb	r3, [r7, #22]
 801592c:	e004      	b.n	8015938 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801592e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015932:	4a12      	ldr	r2, [pc, #72]	; (801597c <RegionEU868RxConfig+0x19c>)
 8015934:	5cd3      	ldrb	r3, [r2, r3]
 8015936:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015938:	4b0b      	ldr	r3, [pc, #44]	; (8015968 <RegionEU868RxConfig+0x188>)
 801593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801593c:	7dba      	ldrb	r2, [r7, #22]
 801593e:	320d      	adds	r2, #13
 8015940:	b2d1      	uxtb	r1, r2
 8015942:	7dfa      	ldrb	r2, [r7, #23]
 8015944:	4610      	mov	r0, r2
 8015946:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	7cdb      	ldrb	r3, [r3, #19]
 801594c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015950:	6939      	ldr	r1, [r7, #16]
 8015952:	4618      	mov	r0, r3
 8015954:	f7ff faa2 	bl	8014e9c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	7bfa      	ldrb	r2, [r7, #15]
 801595c:	701a      	strb	r2, [r3, #0]
    return true;
 801595e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015960:	4618      	mov	r0, r3
 8015962:	3718      	adds	r7, #24
 8015964:	46bd      	mov	sp, r7
 8015966:	bdb0      	pop	{r4, r5, r7, pc}
 8015968:	0801bbc4 	.word	0x0801bbc4
 801596c:	20000ec4 	.word	0x20000ec4
 8015970:	0801bb8c 	.word	0x0801bb8c
 8015974:	00014585 	.word	0x00014585
 8015978:	0801bbbc 	.word	0x0801bbbc
 801597c:	0801bbb4 	.word	0x0801bbb4

08015980 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015980:	b590      	push	{r4, r7, lr}
 8015982:	b093      	sub	sp, #76	; 0x4c
 8015984:	af0a      	add	r7, sp, #40	; 0x28
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015992:	461a      	mov	r2, r3
 8015994:	4b5d      	ldr	r3, [pc, #372]	; (8015b0c <RegionEU868TxConfig+0x18c>)
 8015996:	5c9b      	ldrb	r3, [r3, r2]
 8015998:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80159a0:	4b5b      	ldr	r3, [pc, #364]	; (8015b10 <RegionEU868TxConfig+0x190>)
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	4b5b      	ldr	r3, [pc, #364]	; (8015b14 <RegionEU868TxConfig+0x194>)
 80159a6:	6819      	ldr	r1, [r3, #0]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	461c      	mov	r4, r3
 80159ae:	4623      	mov	r3, r4
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4423      	add	r3, r4
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	440b      	add	r3, r1
 80159b8:	3309      	adds	r3, #9
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	4619      	mov	r1, r3
 80159be:	460b      	mov	r3, r1
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	440b      	add	r3, r1
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	4413      	add	r3, r2
 80159c8:	3302      	adds	r3, #2
 80159ca:	f993 3000 	ldrsb.w	r3, [r3]
 80159ce:	4619      	mov	r1, r3
 80159d0:	f7ff fa31 	bl	8014e36 <RegionCommonLimitTxPower>
 80159d4:	4603      	mov	r3, r0
 80159d6:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159de:	494e      	ldr	r1, [pc, #312]	; (8015b18 <RegionEU868TxConfig+0x198>)
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff fa3d 	bl	8014e60 <RegionCommonGetBandwidth>
 80159e6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80159e8:	2300      	movs	r3, #0
 80159ea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	6859      	ldr	r1, [r3, #4]
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	689a      	ldr	r2, [r3, #8]
 80159f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff f88d 	bl	8014b18 <RegionCommonComputeTxPower>
 80159fe:	4603      	mov	r3, r0
 8015a00:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015a02:	4b46      	ldr	r3, [pc, #280]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a04:	68da      	ldr	r2, [r3, #12]
 8015a06:	4b43      	ldr	r3, [pc, #268]	; (8015b14 <RegionEU868TxConfig+0x194>)
 8015a08:	6819      	ldr	r1, [r3, #0]
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	4603      	mov	r3, r0
 8015a12:	005b      	lsls	r3, r3, #1
 8015a14:	4403      	add	r3, r0
 8015a16:	009b      	lsls	r3, r3, #2
 8015a18:	440b      	add	r3, r1
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a26:	2b07      	cmp	r3, #7
 8015a28:	d124      	bne.n	8015a74 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015a2e:	4b3b      	ldr	r3, [pc, #236]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a30:	69dc      	ldr	r4, [r3, #28]
 8015a32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015a3a:	fb02 f303 	mul.w	r3, r2, r3
 8015a3e:	461a      	mov	r2, r3
 8015a40:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a44:	7ff8      	ldrb	r0, [r7, #31]
 8015a46:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015a4a:	9308      	str	r3, [sp, #32]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	9307      	str	r3, [sp, #28]
 8015a50:	2300      	movs	r3, #0
 8015a52:	9306      	str	r3, [sp, #24]
 8015a54:	2300      	movs	r3, #0
 8015a56:	9305      	str	r3, [sp, #20]
 8015a58:	2301      	movs	r3, #1
 8015a5a:	9304      	str	r3, [sp, #16]
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	9303      	str	r3, [sp, #12]
 8015a60:	2305      	movs	r3, #5
 8015a62:	9302      	str	r3, [sp, #8]
 8015a64:	2300      	movs	r3, #0
 8015a66:	9301      	str	r3, [sp, #4]
 8015a68:	9200      	str	r2, [sp, #0]
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015a70:	47a0      	blx	r4
 8015a72:	e01d      	b.n	8015ab0 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015a74:	2301      	movs	r3, #1
 8015a76:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015a78:	4b28      	ldr	r3, [pc, #160]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015a7a:	69dc      	ldr	r4, [r3, #28]
 8015a7c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a80:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a84:	7ff8      	ldrb	r0, [r7, #31]
 8015a86:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015a8a:	9208      	str	r2, [sp, #32]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	9207      	str	r2, [sp, #28]
 8015a90:	2200      	movs	r2, #0
 8015a92:	9206      	str	r2, [sp, #24]
 8015a94:	2200      	movs	r2, #0
 8015a96:	9205      	str	r2, [sp, #20]
 8015a98:	2201      	movs	r2, #1
 8015a9a:	9204      	str	r2, [sp, #16]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	9203      	str	r2, [sp, #12]
 8015aa0:	2208      	movs	r2, #8
 8015aa2:	9202      	str	r2, [sp, #8]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	9201      	str	r2, [sp, #4]
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	69bb      	ldr	r3, [r7, #24]
 8015aac:	2200      	movs	r2, #0
 8015aae:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015ab0:	4b18      	ldr	r3, [pc, #96]	; (8015b14 <RegionEU868TxConfig+0x194>)
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	460b      	mov	r3, r1
 8015abc:	005b      	lsls	r3, r3, #1
 8015abe:	440b      	add	r3, r1
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	4413      	add	r3, r2
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015acc:	4619      	mov	r1, r3
 8015ace:	4610      	mov	r0, r2
 8015ad0:	f7ff fa22 	bl	8014f18 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	4619      	mov	r1, r3
 8015ae0:	4610      	mov	r0, r2
 8015ae2:	f7ff faa7 	bl	8015034 <GetTimeOnAir>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015aec:	4b0b      	ldr	r3, [pc, #44]	; (8015b1c <RegionEU868TxConfig+0x19c>)
 8015aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015af0:	68fa      	ldr	r2, [r7, #12]
 8015af2:	8992      	ldrh	r2, [r2, #12]
 8015af4:	b2d1      	uxtb	r1, r2
 8015af6:	7ffa      	ldrb	r2, [r7, #31]
 8015af8:	4610      	mov	r0, r2
 8015afa:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	7f7a      	ldrb	r2, [r7, #29]
 8015b00:	701a      	strb	r2, [r3, #0]
    return true;
 8015b02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3724      	adds	r7, #36	; 0x24
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd90      	pop	{r4, r7, pc}
 8015b0c:	0801bb8c 	.word	0x0801bb8c
 8015b10:	20000ec0 	.word	0x20000ec0
 8015b14:	20000ec4 	.word	0x20000ec4
 8015b18:	0801bb94 	.word	0x0801bb94
 8015b1c:	0801bbc4 	.word	0x0801bbc4

08015b20 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b093      	sub	sp, #76	; 0x4c
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015b2e:	2307      	movs	r3, #7
 8015b30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015b38:	2200      	movs	r2, #0
 8015b3a:	601a      	str	r2, [r3, #0]
 8015b3c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015b44:	2300      	movs	r3, #0
 8015b46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015b4e:	e085      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	685a      	ldr	r2, [r3, #4]
 8015b54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015b58:	4413      	add	r3, r2
 8015b5a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015b5e:	4611      	mov	r1, r2
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7fe fe31 	bl	80147c8 <RegionCommonParseLinkAdrReq>
 8015b66:	4603      	mov	r3, r0
 8015b68:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015b6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d07b      	beq.n	8015c6c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015b74:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015b78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015b7c:	4413      	add	r3, r2
 8015b7e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015b82:	2307      	movs	r3, #7
 8015b84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015b8c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d109      	bne.n	8015baa <RegionEU868LinkAdrReq+0x8a>
 8015b96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d106      	bne.n	8015baa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015ba0:	f023 0301 	bic.w	r3, r3, #1
 8015ba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ba8:	e058      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d003      	beq.n	8015bba <RegionEU868LinkAdrReq+0x9a>
 8015bb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bb6:	2b05      	cmp	r3, #5
 8015bb8:	d903      	bls.n	8015bc2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015bbe:	2b06      	cmp	r3, #6
 8015bc0:	d906      	bls.n	8015bd0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015bc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015bc6:	f023 0301 	bic.w	r3, r3, #1
 8015bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015bce:	e045      	b.n	8015c5c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015bd6:	e03d      	b.n	8015c54 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015bdc:	2b06      	cmp	r3, #6
 8015bde:	d118      	bne.n	8015c12 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015be0:	4b5f      	ldr	r3, [pc, #380]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015be2:	6819      	ldr	r1, [r3, #0]
 8015be4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015be8:	4613      	mov	r3, r2
 8015bea:	005b      	lsls	r3, r3, #1
 8015bec:	4413      	add	r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	440b      	add	r3, r1
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d028      	beq.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015bf8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8015c02:	b21a      	sxth	r2, r3
 8015c04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c06:	b21b      	sxth	r3, r3
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	b21b      	sxth	r3, r3
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015c10:	e01b      	b.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c14:	461a      	mov	r2, r3
 8015c16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c1a:	fa42 f303 	asr.w	r3, r2, r3
 8015c1e:	f003 0301 	and.w	r3, r3, #1
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d011      	beq.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015c26:	4b4e      	ldr	r3, [pc, #312]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015c28:	6819      	ldr	r1, [r3, #0]
 8015c2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015c2e:	4613      	mov	r3, r2
 8015c30:	005b      	lsls	r3, r3, #1
 8015c32:	4413      	add	r3, r2
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	440b      	add	r3, r1
 8015c38:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d105      	bne.n	8015c4a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015c3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c42:	f023 0301 	bic.w	r3, r3, #1
 8015c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c4a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c4e:	3301      	adds	r3, #1
 8015c50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c54:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015c58:	2b0f      	cmp	r3, #15
 8015c5a:	d9bd      	bls.n	8015bd8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	7a1b      	ldrb	r3, [r3, #8]
 8015c60:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c64:	429a      	cmp	r2, r3
 8015c66:	f4ff af73 	bcc.w	8015b50 <RegionEU868LinkAdrReq+0x30>
 8015c6a:	e000      	b.n	8015c6e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015c6c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015c6e:	2302      	movs	r3, #2
 8015c70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	7a5b      	ldrb	r3, [r3, #9]
 8015c78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015c7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7ff fa27 	bl	80150d4 <RegionEU868GetPhyParam>
 8015c86:	4603      	mov	r3, r0
 8015c88:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c8e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	7a9b      	ldrb	r3, [r3, #10]
 8015c94:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015c96:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015c9a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015c9c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015ca0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015ca2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015ca6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015cae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015cb6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	7b5b      	ldrb	r3, [r3, #13]
 8015cbc:	b25b      	sxtb	r3, r3
 8015cbe:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015cc0:	2310      	movs	r3, #16
 8015cc2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015cc4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015cc8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	b25b      	sxtb	r3, r3
 8015cce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015cd2:	2307      	movs	r3, #7
 8015cd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015cd8:	4b21      	ldr	r3, [pc, #132]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015cde:	2307      	movs	r3, #7
 8015ce0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015cf0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cf8:	1c9a      	adds	r2, r3, #2
 8015cfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015cfe:	1c59      	adds	r1, r3, #1
 8015d00:	f107 0010 	add.w	r0, r7, #16
 8015d04:	4623      	mov	r3, r4
 8015d06:	f7fe fdb0 	bl	801486a <RegionCommonLinkAdrReqVerifyParams>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015d10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d14:	2b07      	cmp	r3, #7
 8015d16:	d10c      	bne.n	8015d32 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015d18:	4b11      	ldr	r3, [pc, #68]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	33c0      	adds	r3, #192	; 0xc0
 8015d1e:	2202      	movs	r2, #2
 8015d20:	2100      	movs	r1, #0
 8015d22:	4618      	mov	r0, r3
 8015d24:	f000 fb7c 	bl	8016420 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015d28:	4b0d      	ldr	r3, [pc, #52]	; (8015d60 <RegionEU868LinkAdrReq+0x240>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015d2e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015d32:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015d3a:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015d42:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d4c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015d50:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	374c      	adds	r7, #76	; 0x4c
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd90      	pop	{r4, r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	20000ec4 	.word	0x20000ec4

08015d64 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015d6c:	2307      	movs	r3, #7
 8015d6e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015d70:	2300      	movs	r3, #0
 8015d72:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	f107 020e 	add.w	r2, r7, #14
 8015d7c:	4611      	mov	r1, r2
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7ff f8e2 	bl	8014f48 <VerifyRfFreq>
 8015d84:	4603      	mov	r3, r0
 8015d86:	f083 0301 	eor.w	r3, r3, #1
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d003      	beq.n	8015d98 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015d90:	7bfb      	ldrb	r3, [r7, #15]
 8015d92:	f023 0301 	bic.w	r3, r3, #1
 8015d96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8015d9e:	2207      	movs	r2, #7
 8015da0:	2100      	movs	r1, #0
 8015da2:	4618      	mov	r0, r3
 8015da4:	f7fe fb4f 	bl	8014446 <RegionCommonValueInRange>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d103      	bne.n	8015db6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015dae:	7bfb      	ldrb	r3, [r7, #15]
 8015db0:	f023 0302 	bic.w	r3, r3, #2
 8015db4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015dbc:	2205      	movs	r2, #5
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7fe fb40 	bl	8014446 <RegionCommonValueInRange>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d103      	bne.n	8015dd4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015dcc:	7bfb      	ldrb	r3, [r7, #15]
 8015dce:	f023 0304 	bic.w	r3, r3, #4
 8015dd2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3710      	adds	r7, #16
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
	...

08015de0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b086      	sub	sp, #24
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015de8:	2303      	movs	r3, #3
 8015dea:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d114      	bne.n	8015e20 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015e00:	f107 0308 	add.w	r3, r7, #8
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 f9f9 	bl	80161fc <RegionEU868ChannelsRemove>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f083 0301 	eor.w	r3, r3, #1
 8015e10:	b2db      	uxtb	r3, r3
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d03b      	beq.n	8015e8e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015e16:	7dfb      	ldrb	r3, [r7, #23]
 8015e18:	f023 0303 	bic.w	r3, r3, #3
 8015e1c:	75fb      	strb	r3, [r7, #23]
 8015e1e:	e036      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015e2c:	b2db      	uxtb	r3, r3
 8015e2e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015e30:	f107 030c 	add.w	r3, r7, #12
 8015e34:	4618      	mov	r0, r3
 8015e36:	f000 f93f 	bl	80160b8 <RegionEU868ChannelAdd>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b06      	cmp	r3, #6
 8015e3e:	d820      	bhi.n	8015e82 <RegionEU868NewChannelReq+0xa2>
 8015e40:	a201      	add	r2, pc, #4	; (adr r2, 8015e48 <RegionEU868NewChannelReq+0x68>)
 8015e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e46:	bf00      	nop
 8015e48:	08015e8d 	.word	0x08015e8d
 8015e4c:	08015e83 	.word	0x08015e83
 8015e50:	08015e83 	.word	0x08015e83
 8015e54:	08015e83 	.word	0x08015e83
 8015e58:	08015e65 	.word	0x08015e65
 8015e5c:	08015e6f 	.word	0x08015e6f
 8015e60:	08015e79 	.word	0x08015e79
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015e64:	7dfb      	ldrb	r3, [r7, #23]
 8015e66:	f023 0301 	bic.w	r3, r3, #1
 8015e6a:	75fb      	strb	r3, [r7, #23]
                break;
 8015e6c:	e00f      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015e6e:	7dfb      	ldrb	r3, [r7, #23]
 8015e70:	f023 0302 	bic.w	r3, r3, #2
 8015e74:	75fb      	strb	r3, [r7, #23]
                break;
 8015e76:	e00a      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015e78:	7dfb      	ldrb	r3, [r7, #23]
 8015e7a:	f023 0303 	bic.w	r3, r3, #3
 8015e7e:	75fb      	strb	r3, [r7, #23]
                break;
 8015e80:	e005      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015e82:	7dfb      	ldrb	r3, [r7, #23]
 8015e84:	f023 0303 	bic.w	r3, r3, #3
 8015e88:	75fb      	strb	r3, [r7, #23]
                break;
 8015e8a:	e000      	b.n	8015e8e <RegionEU868NewChannelReq+0xae>
                break;
 8015e8c:	bf00      	nop
            }
        }
    }

    return status;
 8015e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3718      	adds	r7, #24
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop

08015e9c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e9c:	b480      	push	{r7}
 8015e9e:	b083      	sub	sp, #12
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	370c      	adds	r7, #12
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bc80      	pop	{r7}
 8015eb0:	4770      	bx	lr
	...

08015eb4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015ebc:	2303      	movs	r3, #3
 8015ebe:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	685b      	ldr	r3, [r3, #4]
 8015ec8:	f107 020e 	add.w	r2, r7, #14
 8015ecc:	4611      	mov	r1, r2
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f7ff f83a 	bl	8014f48 <VerifyRfFreq>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	f083 0301 	eor.w	r3, r3, #1
 8015eda:	b2db      	uxtb	r3, r3
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d003      	beq.n	8015ee8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015ee0:	7bfb      	ldrb	r3, [r7, #15]
 8015ee2:	f023 0301 	bic.w	r3, r3, #1
 8015ee6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015ee8:	4b13      	ldr	r3, [pc, #76]	; (8015f38 <RegionEU868DlChannelReq+0x84>)
 8015eea:	681a      	ldr	r2, [r3, #0]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	781b      	ldrb	r3, [r3, #0]
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	440b      	add	r3, r1
 8015ef8:	009b      	lsls	r3, r3, #2
 8015efa:	4413      	add	r3, r2
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d103      	bne.n	8015f0a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015f02:	7bfb      	ldrb	r3, [r7, #15]
 8015f04:	f023 0302 	bic.w	r3, r3, #2
 8015f08:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015f0a:	7bfb      	ldrb	r3, [r7, #15]
 8015f0c:	2b03      	cmp	r3, #3
 8015f0e:	d10d      	bne.n	8015f2c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015f10:	4b09      	ldr	r3, [pc, #36]	; (8015f38 <RegionEU868DlChannelReq+0x84>)
 8015f12:	6819      	ldr	r1, [r3, #0]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	4618      	mov	r0, r3
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	685a      	ldr	r2, [r3, #4]
 8015f1e:	4603      	mov	r3, r0
 8015f20:	005b      	lsls	r3, r3, #1
 8015f22:	4403      	add	r3, r0
 8015f24:	009b      	lsls	r3, r3, #2
 8015f26:	440b      	add	r3, r1
 8015f28:	3304      	adds	r3, #4
 8015f2a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3710      	adds	r7, #16
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	20000ec4 	.word	0x20000ec4

08015f3c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b083      	sub	sp, #12
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	460a      	mov	r2, r1
 8015f46:	71fb      	strb	r3, [r7, #7]
 8015f48:	4613      	mov	r3, r2
 8015f4a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	370c      	adds	r7, #12
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bc80      	pop	{r7}
 8015f58:	4770      	bx	lr
	...

08015f5c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b09a      	sub	sp, #104	; 0x68
 8015f60:	af02      	add	r7, sp, #8
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015f70:	2300      	movs	r3, #0
 8015f72:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015f76:	2300      	movs	r3, #0
 8015f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f7e:	2200      	movs	r2, #0
 8015f80:	601a      	str	r2, [r3, #0]
 8015f82:	605a      	str	r2, [r3, #4]
 8015f84:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015f86:	230c      	movs	r3, #12
 8015f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015f8c:	2307      	movs	r3, #7
 8015f8e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015f90:	4b47      	ldr	r3, [pc, #284]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	33c0      	adds	r3, #192	; 0xc0
 8015f96:	2201      	movs	r2, #1
 8015f98:	2100      	movs	r1, #0
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7fe faa4 	bl	80144e8 <RegionCommonCountChannels>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d10a      	bne.n	8015fbc <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015fa6:	4b42      	ldr	r3, [pc, #264]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8015fae:	4b40      	ldr	r3, [pc, #256]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f042 0207 	orr.w	r2, r2, #7
 8015fb6:	b292      	uxth	r2, r2
 8015fb8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	7a5b      	ldrb	r3, [r3, #9]
 8015fc0:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015fc8:	b2db      	uxtb	r3, r3
 8015fca:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015fcc:	4b38      	ldr	r3, [pc, #224]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	33c0      	adds	r3, #192	; 0xc0
 8015fd2:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015fd4:	4b36      	ldr	r3, [pc, #216]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015fda:	4b36      	ldr	r3, [pc, #216]	; (80160b4 <RegionEU868NextChannel+0x158>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015fe0:	2310      	movs	r3, #16
 8015fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015fe4:	f107 0312 	add.w	r3, r7, #18
 8015fe8:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	7a9b      	ldrb	r3, [r3, #10]
 8015ffa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015ffe:	2306      	movs	r3, #6
 8016000:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016004:	68fa      	ldr	r2, [r7, #12]
 8016006:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801600a:	320c      	adds	r2, #12
 801600c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016010:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	7d1b      	ldrb	r3, [r3, #20]
 8016018:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	8adb      	ldrh	r3, [r3, #22]
 8016026:	4619      	mov	r1, r3
 8016028:	4610      	mov	r0, r2
 801602a:	f7ff f803 	bl	8015034 <GetTimeOnAir>
 801602e:	4603      	mov	r3, r0
 8016030:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016032:	f107 0314 	add.w	r3, r7, #20
 8016036:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016038:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801603c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016040:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	460b      	mov	r3, r1
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	f7fe fe50 	bl	8014cf6 <RegionCommonIdentifyChannels>
 8016056:	4603      	mov	r3, r0
 8016058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801605c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016060:	2b00      	cmp	r3, #0
 8016062:	d10f      	bne.n	8016084 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016064:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016068:	3b01      	subs	r3, #1
 801606a:	4619      	mov	r1, r3
 801606c:	2000      	movs	r0, #0
 801606e:	f000 f985 	bl	801637c <randr>
 8016072:	4603      	mov	r3, r0
 8016074:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016078:	4413      	add	r3, r2
 801607a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	701a      	strb	r2, [r3, #0]
 8016082:	e00e      	b.n	80160a2 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016088:	2b0c      	cmp	r3, #12
 801608a:	d10a      	bne.n	80160a2 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801608c:	4b08      	ldr	r3, [pc, #32]	; (80160b0 <RegionEU868NextChannel+0x154>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016094:	4b06      	ldr	r3, [pc, #24]	; (80160b0 <RegionEU868NextChannel+0x154>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	f042 0207 	orr.w	r2, r2, #7
 801609c:	b292      	uxth	r2, r2
 801609e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 80160a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3760      	adds	r7, #96	; 0x60
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	20000ec4 	.word	0x20000ec4
 80160b4:	20000ec0 	.word	0x20000ec0

080160b8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80160c0:	2300      	movs	r3, #0
 80160c2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80160c4:	2300      	movs	r3, #0
 80160c6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80160c8:	2300      	movs	r3, #0
 80160ca:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	791b      	ldrb	r3, [r3, #4]
 80160d0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80160d2:	7b7b      	ldrb	r3, [r7, #13]
 80160d4:	2b02      	cmp	r3, #2
 80160d6:	d801      	bhi.n	80160dc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80160d8:	2306      	movs	r3, #6
 80160da:	e089      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80160dc:	7b7b      	ldrb	r3, [r7, #13]
 80160de:	2b0f      	cmp	r3, #15
 80160e0:	d901      	bls.n	80160e6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80160e2:	2303      	movs	r3, #3
 80160e4:	e084      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	7a1b      	ldrb	r3, [r3, #8]
 80160ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80160f0:	b25b      	sxtb	r3, r3
 80160f2:	2207      	movs	r2, #7
 80160f4:	2100      	movs	r1, #0
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fe f9a5 	bl	8014446 <RegionCommonValueInRange>
 80160fc:	4603      	mov	r3, r0
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d101      	bne.n	8016106 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016102:	2301      	movs	r3, #1
 8016104:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	7a1b      	ldrb	r3, [r3, #8]
 801610c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016110:	b25b      	sxtb	r3, r3
 8016112:	2207      	movs	r2, #7
 8016114:	2100      	movs	r1, #0
 8016116:	4618      	mov	r0, r3
 8016118:	f7fe f995 	bl	8014446 <RegionCommonValueInRange>
 801611c:	4603      	mov	r3, r0
 801611e:	2b00      	cmp	r3, #0
 8016120:	d101      	bne.n	8016126 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016122:	2301      	movs	r3, #1
 8016124:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	7a1b      	ldrb	r3, [r3, #8]
 801612c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016130:	b25a      	sxtb	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	7a1b      	ldrb	r3, [r3, #8]
 8016138:	f343 1303 	sbfx	r3, r3, #4, #4
 801613c:	b25b      	sxtb	r3, r3
 801613e:	429a      	cmp	r2, r3
 8016140:	dd01      	ble.n	8016146 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016142:	2301      	movs	r3, #1
 8016144:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016146:	7bbb      	ldrb	r3, [r7, #14]
 8016148:	f083 0301 	eor.w	r3, r3, #1
 801614c:	b2db      	uxtb	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d010      	beq.n	8016174 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f107 020c 	add.w	r2, r7, #12
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7fe fef2 	bl	8014f48 <VerifyRfFreq>
 8016164:	4603      	mov	r3, r0
 8016166:	f083 0301 	eor.w	r3, r3, #1
 801616a:	b2db      	uxtb	r3, r3
 801616c:	2b00      	cmp	r3, #0
 801616e:	d001      	beq.n	8016174 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016170:	2301      	movs	r3, #1
 8016172:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016174:	7bfb      	ldrb	r3, [r7, #15]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d004      	beq.n	8016184 <RegionEU868ChannelAdd+0xcc>
 801617a:	7bbb      	ldrb	r3, [r7, #14]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d001      	beq.n	8016184 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016180:	2306      	movs	r3, #6
 8016182:	e035      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016184:	7bfb      	ldrb	r3, [r7, #15]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d001      	beq.n	801618e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801618a:	2305      	movs	r3, #5
 801618c:	e030      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801618e:	7bbb      	ldrb	r3, [r7, #14]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016194:	2304      	movs	r3, #4
 8016196:	e02b      	b.n	80161f0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016198:	4b17      	ldr	r3, [pc, #92]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 801619a:	6819      	ldr	r1, [r3, #0]
 801619c:	7b7a      	ldrb	r2, [r7, #13]
 801619e:	4613      	mov	r3, r2
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	4413      	add	r3, r2
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	18c8      	adds	r0, r1, r3
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	220c      	movs	r2, #12
 80161ae:	4619      	mov	r1, r3
 80161b0:	f000 f8fb 	bl	80163aa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80161b4:	4b10      	ldr	r3, [pc, #64]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161b6:	6819      	ldr	r1, [r3, #0]
 80161b8:	7b7a      	ldrb	r2, [r7, #13]
 80161ba:	7b38      	ldrb	r0, [r7, #12]
 80161bc:	4613      	mov	r3, r2
 80161be:	005b      	lsls	r3, r3, #1
 80161c0:	4413      	add	r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	440b      	add	r3, r1
 80161c6:	3309      	adds	r3, #9
 80161c8:	4602      	mov	r2, r0
 80161ca:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80161cc:	4b0a      	ldr	r3, [pc, #40]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80161d4:	b21a      	sxth	r2, r3
 80161d6:	7b7b      	ldrb	r3, [r7, #13]
 80161d8:	2101      	movs	r1, #1
 80161da:	fa01 f303 	lsl.w	r3, r1, r3
 80161de:	b21b      	sxth	r3, r3
 80161e0:	4313      	orrs	r3, r2
 80161e2:	b21a      	sxth	r2, r3
 80161e4:	4b04      	ldr	r3, [pc, #16]	; (80161f8 <RegionEU868ChannelAdd+0x140>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	b292      	uxth	r2, r2
 80161ea:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80161ee:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	20000ec4 	.word	0x20000ec4

080161fc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b086      	sub	sp, #24
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	781b      	ldrb	r3, [r3, #0]
 8016208:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801620a:	7dfb      	ldrb	r3, [r7, #23]
 801620c:	2b02      	cmp	r3, #2
 801620e:	d801      	bhi.n	8016214 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016210:	2300      	movs	r3, #0
 8016212:	e015      	b.n	8016240 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016214:	4b0c      	ldr	r3, [pc, #48]	; (8016248 <RegionEU868ChannelsRemove+0x4c>)
 8016216:	6819      	ldr	r1, [r3, #0]
 8016218:	7dfa      	ldrb	r2, [r7, #23]
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	440b      	add	r3, r1
 8016224:	461a      	mov	r2, r3
 8016226:	2300      	movs	r3, #0
 8016228:	6013      	str	r3, [r2, #0]
 801622a:	6053      	str	r3, [r2, #4]
 801622c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801622e:	4b06      	ldr	r3, [pc, #24]	; (8016248 <RegionEU868ChannelsRemove+0x4c>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	33c0      	adds	r3, #192	; 0xc0
 8016234:	7df9      	ldrb	r1, [r7, #23]
 8016236:	2210      	movs	r2, #16
 8016238:	4618      	mov	r0, r3
 801623a:	f7fe f921 	bl	8014480 <RegionCommonChanDisable>
 801623e:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016240:	4618      	mov	r0, r3
 8016242:	3718      	adds	r7, #24
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	20000ec4 	.word	0x20000ec4

0801624c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801624c:	b590      	push	{r4, r7, lr}
 801624e:	b085      	sub	sp, #20
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801625a:	4b20      	ldr	r3, [pc, #128]	; (80162dc <RegionEU868SetContinuousWave+0x90>)
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	4b20      	ldr	r3, [pc, #128]	; (80162e0 <RegionEU868SetContinuousWave+0x94>)
 8016260:	6819      	ldr	r1, [r3, #0]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	461c      	mov	r4, r3
 8016268:	4623      	mov	r3, r4
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	4423      	add	r3, r4
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	440b      	add	r3, r1
 8016272:	3309      	adds	r3, #9
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	4619      	mov	r1, r3
 8016278:	460b      	mov	r3, r1
 801627a:	005b      	lsls	r3, r3, #1
 801627c:	440b      	add	r3, r1
 801627e:	00db      	lsls	r3, r3, #3
 8016280:	4413      	add	r3, r2
 8016282:	3302      	adds	r3, #2
 8016284:	f993 3000 	ldrsb.w	r3, [r3]
 8016288:	4619      	mov	r1, r3
 801628a:	f7fe fdd4 	bl	8014e36 <RegionCommonLimitTxPower>
 801628e:	4603      	mov	r3, r0
 8016290:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8016296:	4b12      	ldr	r3, [pc, #72]	; (80162e0 <RegionEU868SetContinuousWave+0x94>)
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	4619      	mov	r1, r3
 80162a0:	460b      	mov	r3, r1
 80162a2:	005b      	lsls	r3, r3, #1
 80162a4:	440b      	add	r3, r1
 80162a6:	009b      	lsls	r3, r3, #2
 80162a8:	4413      	add	r3, r2
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6859      	ldr	r1, [r3, #4]
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	689a      	ldr	r2, [r3, #8]
 80162b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe fc2c 	bl	8014b18 <RegionCommonComputeTxPower>
 80162c0:	4603      	mov	r3, r0
 80162c2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80162c4:	4b07      	ldr	r3, [pc, #28]	; (80162e4 <RegionEU868SetContinuousWave+0x98>)
 80162c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162c8:	687a      	ldr	r2, [r7, #4]
 80162ca:	8992      	ldrh	r2, [r2, #12]
 80162cc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80162d0:	68b8      	ldr	r0, [r7, #8]
 80162d2:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80162d4:	bf00      	nop
 80162d6:	3714      	adds	r7, #20
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd90      	pop	{r4, r7, pc}
 80162dc:	20000ec0 	.word	0x20000ec0
 80162e0:	20000ec4 	.word	0x20000ec4
 80162e4:	0801bbc4 	.word	0x0801bbc4

080162e8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80162e8:	b480      	push	{r7}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	4603      	mov	r3, r0
 80162f0:	71fb      	strb	r3, [r7, #7]
 80162f2:	460b      	mov	r3, r1
 80162f4:	71bb      	strb	r3, [r7, #6]
 80162f6:	4613      	mov	r3, r2
 80162f8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80162fa:	79ba      	ldrb	r2, [r7, #6]
 80162fc:	797b      	ldrb	r3, [r7, #5]
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	b2db      	uxtb	r3, r3
 8016302:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016308:	2b00      	cmp	r3, #0
 801630a:	da01      	bge.n	8016310 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801630c:	2300      	movs	r3, #0
 801630e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016310:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016312:	4618      	mov	r0, r3
 8016314:	3714      	adds	r7, #20
 8016316:	46bd      	mov	sp, r7
 8016318:	bc80      	pop	{r7}
 801631a:	4770      	bx	lr

0801631c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801631c:	b480      	push	{r7}
 801631e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016320:	4b0d      	ldr	r3, [pc, #52]	; (8016358 <rand1+0x3c>)
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a0d      	ldr	r2, [pc, #52]	; (801635c <rand1+0x40>)
 8016326:	fb02 f303 	mul.w	r3, r2, r3
 801632a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801632e:	3339      	adds	r3, #57	; 0x39
 8016330:	4a09      	ldr	r2, [pc, #36]	; (8016358 <rand1+0x3c>)
 8016332:	6013      	str	r3, [r2, #0]
 8016334:	4b08      	ldr	r3, [pc, #32]	; (8016358 <rand1+0x3c>)
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	2303      	movs	r3, #3
 801633a:	fba3 1302 	umull	r1, r3, r3, r2
 801633e:	1ad1      	subs	r1, r2, r3
 8016340:	0849      	lsrs	r1, r1, #1
 8016342:	440b      	add	r3, r1
 8016344:	0f99      	lsrs	r1, r3, #30
 8016346:	460b      	mov	r3, r1
 8016348:	07db      	lsls	r3, r3, #31
 801634a:	1a5b      	subs	r3, r3, r1
 801634c:	1ad1      	subs	r1, r2, r3
 801634e:	460b      	mov	r3, r1
}
 8016350:	4618      	mov	r0, r3
 8016352:	46bd      	mov	sp, r7
 8016354:	bc80      	pop	{r7}
 8016356:	4770      	bx	lr
 8016358:	2000011c 	.word	0x2000011c
 801635c:	41c64e6d 	.word	0x41c64e6d

08016360 <srand1>:

void srand1( uint32_t seed )
{
 8016360:	b480      	push	{r7}
 8016362:	b083      	sub	sp, #12
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
    next = seed;
 8016368:	4a03      	ldr	r2, [pc, #12]	; (8016378 <srand1+0x18>)
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6013      	str	r3, [r2, #0]
}
 801636e:	bf00      	nop
 8016370:	370c      	adds	r7, #12
 8016372:	46bd      	mov	sp, r7
 8016374:	bc80      	pop	{r7}
 8016376:	4770      	bx	lr
 8016378:	2000011c 	.word	0x2000011c

0801637c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016386:	f7ff ffc9 	bl	801631c <rand1>
 801638a:	4602      	mov	r2, r0
 801638c:	6839      	ldr	r1, [r7, #0]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	1acb      	subs	r3, r1, r3
 8016392:	3301      	adds	r3, #1
 8016394:	fb92 f1f3 	sdiv	r1, r2, r3
 8016398:	fb03 f301 	mul.w	r3, r3, r1
 801639c:	1ad2      	subs	r2, r2, r3
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	4413      	add	r3, r2
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3708      	adds	r7, #8
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}

080163aa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80163aa:	b480      	push	{r7}
 80163ac:	b085      	sub	sp, #20
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	60f8      	str	r0, [r7, #12]
 80163b2:	60b9      	str	r1, [r7, #8]
 80163b4:	4613      	mov	r3, r2
 80163b6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80163b8:	e007      	b.n	80163ca <memcpy1+0x20>
    {
        *dst++ = *src++;
 80163ba:	68ba      	ldr	r2, [r7, #8]
 80163bc:	1c53      	adds	r3, r2, #1
 80163be:	60bb      	str	r3, [r7, #8]
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	1c59      	adds	r1, r3, #1
 80163c4:	60f9      	str	r1, [r7, #12]
 80163c6:	7812      	ldrb	r2, [r2, #0]
 80163c8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80163ca:	88fb      	ldrh	r3, [r7, #6]
 80163cc:	1e5a      	subs	r2, r3, #1
 80163ce:	80fa      	strh	r2, [r7, #6]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1f2      	bne.n	80163ba <memcpy1+0x10>
    }
}
 80163d4:	bf00      	nop
 80163d6:	bf00      	nop
 80163d8:	3714      	adds	r7, #20
 80163da:	46bd      	mov	sp, r7
 80163dc:	bc80      	pop	{r7}
 80163de:	4770      	bx	lr

080163e0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b085      	sub	sp, #20
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	4613      	mov	r3, r2
 80163ec:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80163ee:	88fb      	ldrh	r3, [r7, #6]
 80163f0:	3b01      	subs	r3, #1
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	4413      	add	r3, r2
 80163f6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80163f8:	e007      	b.n	801640a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80163fa:	68ba      	ldr	r2, [r7, #8]
 80163fc:	1c53      	adds	r3, r2, #1
 80163fe:	60bb      	str	r3, [r7, #8]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	1e59      	subs	r1, r3, #1
 8016404:	60f9      	str	r1, [r7, #12]
 8016406:	7812      	ldrb	r2, [r2, #0]
 8016408:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801640a:	88fb      	ldrh	r3, [r7, #6]
 801640c:	1e5a      	subs	r2, r3, #1
 801640e:	80fa      	strh	r2, [r7, #6]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d1f2      	bne.n	80163fa <memcpyr+0x1a>
    }
}
 8016414:	bf00      	nop
 8016416:	bf00      	nop
 8016418:	3714      	adds	r7, #20
 801641a:	46bd      	mov	sp, r7
 801641c:	bc80      	pop	{r7}
 801641e:	4770      	bx	lr

08016420 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	460b      	mov	r3, r1
 801642a:	70fb      	strb	r3, [r7, #3]
 801642c:	4613      	mov	r3, r2
 801642e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016430:	e004      	b.n	801643c <memset1+0x1c>
    {
        *dst++ = value;
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	1c5a      	adds	r2, r3, #1
 8016436:	607a      	str	r2, [r7, #4]
 8016438:	78fa      	ldrb	r2, [r7, #3]
 801643a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801643c:	883b      	ldrh	r3, [r7, #0]
 801643e:	1e5a      	subs	r2, r3, #1
 8016440:	803a      	strh	r2, [r7, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d1f5      	bne.n	8016432 <memset1+0x12>
    }
}
 8016446:	bf00      	nop
 8016448:	bf00      	nop
 801644a:	370c      	adds	r7, #12
 801644c:	46bd      	mov	sp, r7
 801644e:	bc80      	pop	{r7}
 8016450:	4770      	bx	lr
	...

08016454 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016454:	b480      	push	{r7}
 8016456:	b087      	sub	sp, #28
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	460b      	mov	r3, r1
 801645e:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016460:	4b1a      	ldr	r3, [pc, #104]	; (80164cc <Crc32+0x78>)
 8016462:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016464:	f04f 33ff 	mov.w	r3, #4294967295
 8016468:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d101      	bne.n	8016474 <Crc32+0x20>
    {
        return 0;
 8016470:	2300      	movs	r3, #0
 8016472:	e026      	b.n	80164c2 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016474:	2300      	movs	r3, #0
 8016476:	827b      	strh	r3, [r7, #18]
 8016478:	e01d      	b.n	80164b6 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801647a:	8a7b      	ldrh	r3, [r7, #18]
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	4413      	add	r3, r2
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	461a      	mov	r2, r3
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	4053      	eors	r3, r2
 8016488:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801648a:	2300      	movs	r3, #0
 801648c:	823b      	strh	r3, [r7, #16]
 801648e:	e00c      	b.n	80164aa <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	085a      	lsrs	r2, r3, #1
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	f003 0301 	and.w	r3, r3, #1
 801649a:	4259      	negs	r1, r3
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	400b      	ands	r3, r1
 80164a0:	4053      	eors	r3, r2
 80164a2:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 80164a4:	8a3b      	ldrh	r3, [r7, #16]
 80164a6:	3301      	adds	r3, #1
 80164a8:	823b      	strh	r3, [r7, #16]
 80164aa:	8a3b      	ldrh	r3, [r7, #16]
 80164ac:	2b07      	cmp	r3, #7
 80164ae:	d9ef      	bls.n	8016490 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 80164b0:	8a7b      	ldrh	r3, [r7, #18]
 80164b2:	3301      	adds	r3, #1
 80164b4:	827b      	strh	r3, [r7, #18]
 80164b6:	8a7a      	ldrh	r2, [r7, #18]
 80164b8:	887b      	ldrh	r3, [r7, #2]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d3dd      	bcc.n	801647a <Crc32+0x26>
        }
    }

    return ~crc;
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	43db      	mvns	r3, r3
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bc80      	pop	{r7}
 80164ca:	4770      	bx	lr
 80164cc:	edb88320 	.word	0xedb88320

080164d0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80164d0:	b480      	push	{r7}
 80164d2:	b083      	sub	sp, #12
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	683a      	ldr	r2, [r7, #0]
 80164de:	619a      	str	r2, [r3, #24]
}
 80164e0:	bf00      	nop
 80164e2:	370c      	adds	r7, #12
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bc80      	pop	{r7}
 80164e8:	4770      	bx	lr

080164ea <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80164ea:	b480      	push	{r7}
 80164ec:	b083      	sub	sp, #12
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
 80164f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	683a      	ldr	r2, [r7, #0]
 80164f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80164fa:	bf00      	nop
 80164fc:	370c      	adds	r7, #12
 80164fe:	46bd      	mov	sp, r7
 8016500:	bc80      	pop	{r7}
 8016502:	4770      	bx	lr

08016504 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af02      	add	r7, sp, #8
 801650a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801650c:	4a21      	ldr	r2, [pc, #132]	; (8016594 <RadioInit+0x90>)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016512:	4b21      	ldr	r3, [pc, #132]	; (8016598 <RadioInit+0x94>)
 8016514:	2200      	movs	r2, #0
 8016516:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016518:	4b1f      	ldr	r3, [pc, #124]	; (8016598 <RadioInit+0x94>)
 801651a:	2200      	movs	r2, #0
 801651c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801651e:	4b1e      	ldr	r3, [pc, #120]	; (8016598 <RadioInit+0x94>)
 8016520:	2200      	movs	r2, #0
 8016522:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8016524:	481d      	ldr	r0, [pc, #116]	; (801659c <RadioInit+0x98>)
 8016526:	f001 fee3 	bl	80182f0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801652a:	2000      	movs	r0, #0
 801652c:	f001 f82a 	bl	8017584 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016530:	f002 f974 	bl	801881c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016534:	2100      	movs	r1, #0
 8016536:	2000      	movs	r0, #0
 8016538:	f002 fcca 	bl	8018ed0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801653c:	2204      	movs	r2, #4
 801653e:	2100      	movs	r1, #0
 8016540:	2001      	movs	r0, #1
 8016542:	f002 faf5 	bl	8018b30 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016546:	2300      	movs	r3, #0
 8016548:	2200      	movs	r2, #0
 801654a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801654e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016552:	f002 fa29 	bl	80189a8 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016556:	f000 fea1 	bl	801729c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801655a:	2300      	movs	r3, #0
 801655c:	9300      	str	r3, [sp, #0]
 801655e:	4b10      	ldr	r3, [pc, #64]	; (80165a0 <RadioInit+0x9c>)
 8016560:	2200      	movs	r2, #0
 8016562:	f04f 31ff 	mov.w	r1, #4294967295
 8016566:	480f      	ldr	r0, [pc, #60]	; (80165a4 <RadioInit+0xa0>)
 8016568:	f003 feb2 	bl	801a2d0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801656c:	2300      	movs	r3, #0
 801656e:	9300      	str	r3, [sp, #0]
 8016570:	4b0d      	ldr	r3, [pc, #52]	; (80165a8 <RadioInit+0xa4>)
 8016572:	2200      	movs	r2, #0
 8016574:	f04f 31ff 	mov.w	r1, #4294967295
 8016578:	480c      	ldr	r0, [pc, #48]	; (80165ac <RadioInit+0xa8>)
 801657a:	f003 fea9 	bl	801a2d0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801657e:	4809      	ldr	r0, [pc, #36]	; (80165a4 <RadioInit+0xa0>)
 8016580:	f003 ff4a 	bl	801a418 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016584:	4809      	ldr	r0, [pc, #36]	; (80165ac <RadioInit+0xa8>)
 8016586:	f003 ff47 	bl	801a418 <UTIL_TIMER_Stop>
}
 801658a:	bf00      	nop
 801658c:	3708      	adds	r7, #8
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	20000fc8 	.word	0x20000fc8
 8016598:	200018b4 	.word	0x200018b4
 801659c:	0801767d 	.word	0x0801767d
 80165a0:	080175f1 	.word	0x080175f1
 80165a4:	2000190c 	.word	0x2000190c
 80165a8:	08017605 	.word	0x08017605
 80165ac:	20001924 	.word	0x20001924

080165b0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80165b4:	f001 fede 	bl	8018374 <SUBGRF_GetOperatingMode>
 80165b8:	4603      	mov	r3, r0
 80165ba:	2b07      	cmp	r3, #7
 80165bc:	d00a      	beq.n	80165d4 <RadioGetStatus+0x24>
 80165be:	2b07      	cmp	r3, #7
 80165c0:	dc0a      	bgt.n	80165d8 <RadioGetStatus+0x28>
 80165c2:	2b04      	cmp	r3, #4
 80165c4:	d002      	beq.n	80165cc <RadioGetStatus+0x1c>
 80165c6:	2b05      	cmp	r3, #5
 80165c8:	d002      	beq.n	80165d0 <RadioGetStatus+0x20>
 80165ca:	e005      	b.n	80165d8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80165cc:	2302      	movs	r3, #2
 80165ce:	e004      	b.n	80165da <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80165d0:	2301      	movs	r3, #1
 80165d2:	e002      	b.n	80165da <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80165d4:	2303      	movs	r3, #3
 80165d6:	e000      	b.n	80165da <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80165d8:	2300      	movs	r3, #0
    }
}
 80165da:	4618      	mov	r0, r3
 80165dc:	bd80      	pop	{r7, pc}
	...

080165e0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	4603      	mov	r3, r0
 80165e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80165ea:	4a25      	ldr	r2, [pc, #148]	; (8016680 <RadioSetModem+0xa0>)
 80165ec:	79fb      	ldrb	r3, [r7, #7]
 80165ee:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80165f0:	79fb      	ldrb	r3, [r7, #7]
 80165f2:	4618      	mov	r0, r3
 80165f4:	f003 f831 	bl	801965a <RFW_SetRadioModem>
    switch( modem )
 80165f8:	79fb      	ldrb	r3, [r7, #7]
 80165fa:	3b01      	subs	r3, #1
 80165fc:	2b03      	cmp	r3, #3
 80165fe:	d80b      	bhi.n	8016618 <RadioSetModem+0x38>
 8016600:	a201      	add	r2, pc, #4	; (adr r2, 8016608 <RadioSetModem+0x28>)
 8016602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016606:	bf00      	nop
 8016608:	08016627 	.word	0x08016627
 801660c:	0801664d 	.word	0x0801664d
 8016610:	0801665b 	.word	0x0801665b
 8016614:	08016669 	.word	0x08016669
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016618:	2000      	movs	r0, #0
 801661a:	f002 fa63 	bl	8018ae4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801661e:	4b18      	ldr	r3, [pc, #96]	; (8016680 <RadioSetModem+0xa0>)
 8016620:	2200      	movs	r2, #0
 8016622:	735a      	strb	r2, [r3, #13]
        break;
 8016624:	e028      	b.n	8016678 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016626:	2001      	movs	r0, #1
 8016628:	f002 fa5c 	bl	8018ae4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801662c:	4b14      	ldr	r3, [pc, #80]	; (8016680 <RadioSetModem+0xa0>)
 801662e:	7b5a      	ldrb	r2, [r3, #13]
 8016630:	4b13      	ldr	r3, [pc, #76]	; (8016680 <RadioSetModem+0xa0>)
 8016632:	7b1b      	ldrb	r3, [r3, #12]
 8016634:	429a      	cmp	r2, r3
 8016636:	d01e      	beq.n	8016676 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016638:	4b11      	ldr	r3, [pc, #68]	; (8016680 <RadioSetModem+0xa0>)
 801663a:	7b1a      	ldrb	r2, [r3, #12]
 801663c:	4b10      	ldr	r3, [pc, #64]	; (8016680 <RadioSetModem+0xa0>)
 801663e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016640:	4b0f      	ldr	r3, [pc, #60]	; (8016680 <RadioSetModem+0xa0>)
 8016642:	7b5b      	ldrb	r3, [r3, #13]
 8016644:	4618      	mov	r0, r3
 8016646:	f000 ff9d 	bl	8017584 <RadioSetPublicNetwork>
        }
        break;
 801664a:	e014      	b.n	8016676 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801664c:	2002      	movs	r0, #2
 801664e:	f002 fa49 	bl	8018ae4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016652:	4b0b      	ldr	r3, [pc, #44]	; (8016680 <RadioSetModem+0xa0>)
 8016654:	2200      	movs	r2, #0
 8016656:	735a      	strb	r2, [r3, #13]
        break;
 8016658:	e00e      	b.n	8016678 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801665a:	2002      	movs	r0, #2
 801665c:	f002 fa42 	bl	8018ae4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016660:	4b07      	ldr	r3, [pc, #28]	; (8016680 <RadioSetModem+0xa0>)
 8016662:	2200      	movs	r2, #0
 8016664:	735a      	strb	r2, [r3, #13]
        break;
 8016666:	e007      	b.n	8016678 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016668:	2000      	movs	r0, #0
 801666a:	f002 fa3b 	bl	8018ae4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801666e:	4b04      	ldr	r3, [pc, #16]	; (8016680 <RadioSetModem+0xa0>)
 8016670:	2200      	movs	r2, #0
 8016672:	735a      	strb	r2, [r3, #13]
        break;
 8016674:	e000      	b.n	8016678 <RadioSetModem+0x98>
        break;
 8016676:	bf00      	nop
    }
}
 8016678:	bf00      	nop
 801667a:	3708      	adds	r7, #8
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	200018b4 	.word	0x200018b4

08016684 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f002 f9e7 	bl	8018a60 <SUBGRF_SetRfFrequency>
}
 8016692:	bf00      	nop
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801669a:	b580      	push	{r7, lr}
 801669c:	b090      	sub	sp, #64	; 0x40
 801669e:	af0a      	add	r7, sp, #40	; 0x28
 80166a0:	60f8      	str	r0, [r7, #12]
 80166a2:	60b9      	str	r1, [r7, #8]
 80166a4:	603b      	str	r3, [r7, #0]
 80166a6:	4613      	mov	r3, r2
 80166a8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80166aa:	2301      	movs	r3, #1
 80166ac:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80166ae:	2300      	movs	r3, #0
 80166b0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80166b2:	2300      	movs	r3, #0
 80166b4:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80166b6:	f000 fe04 	bl	80172c2 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80166ba:	2000      	movs	r0, #0
 80166bc:	f7ff ff90 	bl	80165e0 <RadioSetModem>

    RadioSetChannel( freq );
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	f7ff ffdf 	bl	8016684 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80166c6:	2301      	movs	r3, #1
 80166c8:	9309      	str	r3, [sp, #36]	; 0x24
 80166ca:	2300      	movs	r3, #0
 80166cc:	9308      	str	r3, [sp, #32]
 80166ce:	2300      	movs	r3, #0
 80166d0:	9307      	str	r3, [sp, #28]
 80166d2:	2300      	movs	r3, #0
 80166d4:	9306      	str	r3, [sp, #24]
 80166d6:	2300      	movs	r3, #0
 80166d8:	9305      	str	r3, [sp, #20]
 80166da:	2300      	movs	r3, #0
 80166dc:	9304      	str	r3, [sp, #16]
 80166de:	2300      	movs	r3, #0
 80166e0:	9303      	str	r3, [sp, #12]
 80166e2:	2300      	movs	r3, #0
 80166e4:	9302      	str	r3, [sp, #8]
 80166e6:	2303      	movs	r3, #3
 80166e8:	9301      	str	r3, [sp, #4]
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	9300      	str	r3, [sp, #0]
 80166ee:	2300      	movs	r3, #0
 80166f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80166f4:	68b9      	ldr	r1, [r7, #8]
 80166f6:	2000      	movs	r0, #0
 80166f8:	f000 f840 	bl	801677c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80166fc:	2000      	movs	r0, #0
 80166fe:	f000 fde7 	bl	80172d0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016702:	f000 ff6d 	bl	80175e0 <RadioGetWakeupTime>
 8016706:	4603      	mov	r3, r0
 8016708:	4618      	mov	r0, r3
 801670a:	f7eb fa5a 	bl	8001bc2 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801670e:	f003 ff9d 	bl	801a64c <UTIL_TIMER_GetCurrentTime>
 8016712:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016714:	e00d      	b.n	8016732 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016716:	2000      	movs	r0, #0
 8016718:	f000 feb2 	bl	8017480 <RadioRssi>
 801671c:	4603      	mov	r3, r0
 801671e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016720:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016728:	429a      	cmp	r2, r3
 801672a:	dd02      	ble.n	8016732 <RadioIsChannelFree+0x98>
        {
            status = false;
 801672c:	2300      	movs	r3, #0
 801672e:	75fb      	strb	r3, [r7, #23]
            break;
 8016730:	e006      	b.n	8016740 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016732:	6938      	ldr	r0, [r7, #16]
 8016734:	f003 ff9c 	bl	801a670 <UTIL_TIMER_GetElapsedTime>
 8016738:	4602      	mov	r2, r0
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	4293      	cmp	r3, r2
 801673e:	d8ea      	bhi.n	8016716 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016740:	f000 fdbf 	bl	80172c2 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016744:	7dfb      	ldrb	r3, [r7, #23]
}
 8016746:	4618      	mov	r0, r3
 8016748:	3718      	adds	r7, #24
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}

0801674e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801674e:	b580      	push	{r7, lr}
 8016750:	b082      	sub	sp, #8
 8016752:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016754:	2300      	movs	r3, #0
 8016756:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016758:	2001      	movs	r0, #1
 801675a:	f7ff ff41 	bl	80165e0 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801675e:	2300      	movs	r3, #0
 8016760:	2200      	movs	r2, #0
 8016762:	2100      	movs	r1, #0
 8016764:	2000      	movs	r0, #0
 8016766:	f002 f91f 	bl	80189a8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801676a:	f001 fed4 	bl	8018516 <SUBGRF_GetRandom>
 801676e:	6078      	str	r0, [r7, #4]

    return rnd;
 8016770:	687b      	ldr	r3, [r7, #4]
}
 8016772:	4618      	mov	r0, r3
 8016774:	3708      	adds	r7, #8
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
	...

0801677c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b08a      	sub	sp, #40	; 0x28
 8016780:	af00      	add	r7, sp, #0
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
 8016786:	461a      	mov	r2, r3
 8016788:	4603      	mov	r3, r0
 801678a:	73fb      	strb	r3, [r7, #15]
 801678c:	4613      	mov	r3, r2
 801678e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016790:	4abd      	ldr	r2, [pc, #756]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016792:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016796:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016798:	f002 ff1d 	bl	80195d6 <RFW_DeInit>
    if( rxContinuous == true )
 801679c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d001      	beq.n	80167a8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80167a4:	2300      	movs	r3, #0
 80167a6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80167a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d004      	beq.n	80167ba <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80167b0:	4ab6      	ldr	r2, [pc, #728]	; (8016a8c <RadioSetRxConfig+0x310>)
 80167b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80167b6:	7013      	strb	r3, [r2, #0]
 80167b8:	e002      	b.n	80167c0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80167ba:	4bb4      	ldr	r3, [pc, #720]	; (8016a8c <RadioSetRxConfig+0x310>)
 80167bc:	22ff      	movs	r2, #255	; 0xff
 80167be:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80167c0:	7bfb      	ldrb	r3, [r7, #15]
 80167c2:	2b04      	cmp	r3, #4
 80167c4:	d009      	beq.n	80167da <RadioSetRxConfig+0x5e>
 80167c6:	2b04      	cmp	r3, #4
 80167c8:	f300 81da 	bgt.w	8016b80 <RadioSetRxConfig+0x404>
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	f000 80bf 	beq.w	8016950 <RadioSetRxConfig+0x1d4>
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	f000 812c 	beq.w	8016a30 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80167d8:	e1d2      	b.n	8016b80 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80167da:	2001      	movs	r0, #1
 80167dc:	f001 ffe0 	bl	80187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80167e0:	4ba9      	ldr	r3, [pc, #676]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80167e8:	4aa7      	ldr	r2, [pc, #668]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80167ee:	4ba6      	ldr	r3, [pc, #664]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80167f0:	2209      	movs	r2, #9
 80167f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80167f6:	4ba4      	ldr	r3, [pc, #656]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80167f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80167fc:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80167fe:	68b8      	ldr	r0, [r7, #8]
 8016800:	f002 fe1a 	bl	8019438 <SUBGRF_GetFskBandwidthRegValue>
 8016804:	4603      	mov	r3, r0
 8016806:	461a      	mov	r2, r3
 8016808:	4b9f      	ldr	r3, [pc, #636]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801680a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801680e:	4b9e      	ldr	r3, [pc, #632]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016810:	2200      	movs	r2, #0
 8016812:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016814:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016816:	00db      	lsls	r3, r3, #3
 8016818:	b29a      	uxth	r2, r3
 801681a:	4b9b      	ldr	r3, [pc, #620]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801681c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801681e:	4b9a      	ldr	r3, [pc, #616]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016820:	2200      	movs	r2, #0
 8016822:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016824:	4b98      	ldr	r3, [pc, #608]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016826:	2210      	movs	r2, #16
 8016828:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801682a:	4b97      	ldr	r3, [pc, #604]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801682c:	2200      	movs	r2, #0
 801682e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016830:	4b95      	ldr	r3, [pc, #596]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016832:	2200      	movs	r2, #0
 8016834:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016836:	4b95      	ldr	r3, [pc, #596]	; (8016a8c <RadioSetRxConfig+0x310>)
 8016838:	781a      	ldrb	r2, [r3, #0]
 801683a:	4b93      	ldr	r3, [pc, #588]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801683c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801683e:	4b92      	ldr	r3, [pc, #584]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016840:	2201      	movs	r2, #1
 8016842:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016844:	4b90      	ldr	r3, [pc, #576]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016846:	2200      	movs	r2, #0
 8016848:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801684a:	2004      	movs	r0, #4
 801684c:	f7ff fec8 	bl	80165e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016850:	488f      	ldr	r0, [pc, #572]	; (8016a90 <RadioSetRxConfig+0x314>)
 8016852:	f002 f9d3 	bl	8018bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016856:	488f      	ldr	r0, [pc, #572]	; (8016a94 <RadioSetRxConfig+0x318>)
 8016858:	f002 fa9c 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801685c:	4a8e      	ldr	r2, [pc, #568]	; (8016a98 <RadioSetRxConfig+0x31c>)
 801685e:	f107 031c 	add.w	r3, r7, #28
 8016862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016866:	e883 0003 	stmia.w	r3, {r0, r1}
 801686a:	f107 031c 	add.w	r3, r7, #28
 801686e:	4618      	mov	r0, r3
 8016870:	f001 fdcf 	bl	8018412 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016874:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016878:	f001 fe1a 	bl	80184b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 801687c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016880:	f000 fe1d 	bl	80174be <RadioRead>
 8016884:	4603      	mov	r3, r0
 8016886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801688a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801688e:	f023 0310 	bic.w	r3, r3, #16
 8016892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8016896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801689a:	4619      	mov	r1, r3
 801689c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80168a0:	f000 fdfb 	bl	801749a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80168a4:	2104      	movs	r1, #4
 80168a6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80168aa:	f000 fdf6 	bl	801749a <RadioWrite>
            modReg= RadioRead(0x89b);
 80168ae:	f640 009b 	movw	r0, #2203	; 0x89b
 80168b2:	f000 fe04 	bl	80174be <RadioRead>
 80168b6:	4603      	mov	r3, r0
 80168b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80168bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168c0:	f023 031c 	bic.w	r3, r3, #28
 80168c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80168c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168cc:	f043 0308 	orr.w	r3, r3, #8
 80168d0:	b2db      	uxtb	r3, r3
 80168d2:	4619      	mov	r1, r3
 80168d4:	f640 009b 	movw	r0, #2203	; 0x89b
 80168d8:	f000 fddf 	bl	801749a <RadioWrite>
            modReg= RadioRead(0x6d1);
 80168dc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80168e0:	f000 fded 	bl	80174be <RadioRead>
 80168e4:	4603      	mov	r3, r0
 80168e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80168ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168ee:	f023 0318 	bic.w	r3, r3, #24
 80168f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80168f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168fa:	f043 0318 	orr.w	r3, r3, #24
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	4619      	mov	r1, r3
 8016902:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016906:	f000 fdc8 	bl	801749a <RadioWrite>
            modReg= RadioRead(0x6ac);
 801690a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801690e:	f000 fdd6 	bl	80174be <RadioRead>
 8016912:	4603      	mov	r3, r0
 8016914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8016924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016928:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801692c:	b2db      	uxtb	r3, r3
 801692e:	4619      	mov	r1, r3
 8016930:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016934:	f000 fdb1 	bl	801749a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016938:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801693a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801693e:	fb02 f303 	mul.w	r3, r2, r3
 8016942:	461a      	mov	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	fbb2 f3f3 	udiv	r3, r2, r3
 801694a:	4a4f      	ldr	r2, [pc, #316]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801694c:	6093      	str	r3, [r2, #8]
            break;
 801694e:	e118      	b.n	8016b82 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016950:	2000      	movs	r0, #0
 8016952:	f001 ff25 	bl	80187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016956:	4b4c      	ldr	r3, [pc, #304]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016958:	2200      	movs	r2, #0
 801695a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801695e:	4a4a      	ldr	r2, [pc, #296]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016964:	4b48      	ldr	r3, [pc, #288]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016966:	220b      	movs	r2, #11
 8016968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801696c:	68b8      	ldr	r0, [r7, #8]
 801696e:	f002 fd63 	bl	8019438 <SUBGRF_GetFskBandwidthRegValue>
 8016972:	4603      	mov	r3, r0
 8016974:	461a      	mov	r2, r3
 8016976:	4b44      	ldr	r3, [pc, #272]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801697c:	4b42      	ldr	r3, [pc, #264]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801697e:	2200      	movs	r2, #0
 8016980:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016982:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	b29a      	uxth	r2, r3
 8016988:	4b3f      	ldr	r3, [pc, #252]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801698a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801698c:	4b3e      	ldr	r3, [pc, #248]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801698e:	2204      	movs	r2, #4
 8016990:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016992:	4b3d      	ldr	r3, [pc, #244]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016994:	2218      	movs	r2, #24
 8016996:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016998:	4b3b      	ldr	r3, [pc, #236]	; (8016a88 <RadioSetRxConfig+0x30c>)
 801699a:	2200      	movs	r2, #0
 801699c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801699e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80169a2:	f083 0301 	eor.w	r3, r3, #1
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	461a      	mov	r2, r3
 80169aa:	4b37      	ldr	r3, [pc, #220]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169ac:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80169ae:	4b37      	ldr	r3, [pc, #220]	; (8016a8c <RadioSetRxConfig+0x310>)
 80169b0:	781a      	ldrb	r2, [r3, #0]
 80169b2:	4b35      	ldr	r3, [pc, #212]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169b4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80169b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d003      	beq.n	80169c6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80169be:	4b32      	ldr	r3, [pc, #200]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169c0:	22f2      	movs	r2, #242	; 0xf2
 80169c2:	75da      	strb	r2, [r3, #23]
 80169c4:	e002      	b.n	80169cc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80169c6:	4b30      	ldr	r3, [pc, #192]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169c8:	2201      	movs	r2, #1
 80169ca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80169cc:	4b2e      	ldr	r3, [pc, #184]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169ce:	2201      	movs	r2, #1
 80169d0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80169d2:	f000 fc76 	bl	80172c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80169d6:	4b2c      	ldr	r3, [pc, #176]	; (8016a88 <RadioSetRxConfig+0x30c>)
 80169d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80169dc:	2b00      	cmp	r3, #0
 80169de:	bf14      	ite	ne
 80169e0:	2301      	movne	r3, #1
 80169e2:	2300      	moveq	r3, #0
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7ff fdfa 	bl	80165e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80169ec:	4828      	ldr	r0, [pc, #160]	; (8016a90 <RadioSetRxConfig+0x314>)
 80169ee:	f002 f905 	bl	8018bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80169f2:	4828      	ldr	r0, [pc, #160]	; (8016a94 <RadioSetRxConfig+0x318>)
 80169f4:	f002 f9ce 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80169f8:	4a28      	ldr	r2, [pc, #160]	; (8016a9c <RadioSetRxConfig+0x320>)
 80169fa:	f107 0314 	add.w	r3, r7, #20
 80169fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016a02:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a06:	f107 0314 	add.w	r3, r7, #20
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f001 fd01 	bl	8018412 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016a10:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016a14:	f001 fd4c 	bl	80184b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016a18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a1a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016a1e:	fb02 f303 	mul.w	r3, r2, r3
 8016a22:	461a      	mov	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a2a:	4a17      	ldr	r2, [pc, #92]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a2c:	6093      	str	r3, [r2, #8]
            break;
 8016a2e:	e0a8      	b.n	8016b82 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a30:	2000      	movs	r0, #0
 8016a32:	f001 feb5 	bl	80187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016a36:	4b14      	ldr	r3, [pc, #80]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a38:	2201      	movs	r2, #1
 8016a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	b2da      	uxtb	r2, r3
 8016a42:	4b11      	ldr	r3, [pc, #68]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016a48:	4a15      	ldr	r2, [pc, #84]	; (8016aa0 <RadioSetRxConfig+0x324>)
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	4413      	add	r3, r2
 8016a4e:	781a      	ldrb	r2, [r3, #0]
 8016a50:	4b0d      	ldr	r3, [pc, #52]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016a56:	4a0c      	ldr	r2, [pc, #48]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a58:	7bbb      	ldrb	r3, [r7, #14]
 8016a5a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d105      	bne.n	8016a70 <RadioSetRxConfig+0x2f4>
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b0b      	cmp	r3, #11
 8016a68:	d008      	beq.n	8016a7c <RadioSetRxConfig+0x300>
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2b0c      	cmp	r3, #12
 8016a6e:	d005      	beq.n	8016a7c <RadioSetRxConfig+0x300>
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d116      	bne.n	8016aa4 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2b0c      	cmp	r3, #12
 8016a7a:	d113      	bne.n	8016aa4 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016a7c:	4b02      	ldr	r3, [pc, #8]	; (8016a88 <RadioSetRxConfig+0x30c>)
 8016a7e:	2201      	movs	r2, #1
 8016a80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016a84:	e012      	b.n	8016aac <RadioSetRxConfig+0x330>
 8016a86:	bf00      	nop
 8016a88:	200018b4 	.word	0x200018b4
 8016a8c:	20000120 	.word	0x20000120
 8016a90:	200018ec 	.word	0x200018ec
 8016a94:	200018c2 	.word	0x200018c2
 8016a98:	0801b644 	.word	0x0801b644
 8016a9c:	0801b64c 	.word	0x0801b64c
 8016aa0:	0801bc48 	.word	0x0801bc48
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016aa4:	4b39      	ldr	r3, [pc, #228]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016aac:	4b37      	ldr	r3, [pc, #220]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016aae:	2201      	movs	r2, #1
 8016ab0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016ab2:	4b36      	ldr	r3, [pc, #216]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016ab4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016ab8:	2b05      	cmp	r3, #5
 8016aba:	d004      	beq.n	8016ac6 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016abc:	4b33      	ldr	r3, [pc, #204]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016ac2:	2b06      	cmp	r3, #6
 8016ac4:	d10a      	bne.n	8016adc <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016ac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ac8:	2b0b      	cmp	r3, #11
 8016aca:	d803      	bhi.n	8016ad4 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016acc:	4b2f      	ldr	r3, [pc, #188]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016ace:	220c      	movs	r2, #12
 8016ad0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016ad2:	e006      	b.n	8016ae2 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016ad4:	4a2d      	ldr	r2, [pc, #180]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016ad6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ad8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016ada:	e002      	b.n	8016ae2 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016adc:	4a2b      	ldr	r2, [pc, #172]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016ade:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ae0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016ae2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016ae6:	4b29      	ldr	r3, [pc, #164]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016ae8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016aea:	4b29      	ldr	r3, [pc, #164]	; (8016b90 <RadioSetRxConfig+0x414>)
 8016aec:	781a      	ldrb	r2, [r3, #0]
 8016aee:	4b27      	ldr	r3, [pc, #156]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016af0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016af2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016af6:	4b25      	ldr	r3, [pc, #148]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016af8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016afc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016b00:	4b22      	ldr	r3, [pc, #136]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016b06:	f000 fbdc 	bl	80172c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016b0a:	4b20      	ldr	r3, [pc, #128]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	bf14      	ite	ne
 8016b14:	2301      	movne	r3, #1
 8016b16:	2300      	moveq	r3, #0
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ff fd60 	bl	80165e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016b20:	481c      	ldr	r0, [pc, #112]	; (8016b94 <RadioSetRxConfig+0x418>)
 8016b22:	f002 f86b 	bl	8018bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016b26:	481c      	ldr	r0, [pc, #112]	; (8016b98 <RadioSetRxConfig+0x41c>)
 8016b28:	f002 f934 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016b2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	4618      	mov	r0, r3
 8016b32:	f001 fe44 	bl	80187be <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016b36:	4b15      	ldr	r3, [pc, #84]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016b3c:	2b01      	cmp	r3, #1
 8016b3e:	d10d      	bne.n	8016b5c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016b40:	f240 7036 	movw	r0, #1846	; 0x736
 8016b44:	f002 fa82 	bl	801904c <SUBGRF_ReadRegister>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	f023 0304 	bic.w	r3, r3, #4
 8016b4e:	b2db      	uxtb	r3, r3
 8016b50:	4619      	mov	r1, r3
 8016b52:	f240 7036 	movw	r0, #1846	; 0x736
 8016b56:	f002 fa65 	bl	8019024 <SUBGRF_WriteRegister>
 8016b5a:	e00c      	b.n	8016b76 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016b5c:	f240 7036 	movw	r0, #1846	; 0x736
 8016b60:	f002 fa74 	bl	801904c <SUBGRF_ReadRegister>
 8016b64:	4603      	mov	r3, r0
 8016b66:	f043 0304 	orr.w	r3, r3, #4
 8016b6a:	b2db      	uxtb	r3, r3
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	f240 7036 	movw	r0, #1846	; 0x736
 8016b72:	f002 fa57 	bl	8019024 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016b76:	4b05      	ldr	r3, [pc, #20]	; (8016b8c <RadioSetRxConfig+0x410>)
 8016b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b7c:	609a      	str	r2, [r3, #8]
            break;
 8016b7e:	e000      	b.n	8016b82 <RadioSetRxConfig+0x406>
            break;
 8016b80:	bf00      	nop
    }
}
 8016b82:	bf00      	nop
 8016b84:	3728      	adds	r7, #40	; 0x28
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
 8016b8a:	bf00      	nop
 8016b8c:	200018b4 	.word	0x200018b4
 8016b90:	20000120 	.word	0x20000120
 8016b94:	200018ec 	.word	0x200018ec
 8016b98:	200018c2 	.word	0x200018c2

08016b9c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b086      	sub	sp, #24
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	60ba      	str	r2, [r7, #8]
 8016ba4:	607b      	str	r3, [r7, #4]
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	73fb      	strb	r3, [r7, #15]
 8016baa:	460b      	mov	r3, r1
 8016bac:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016bae:	f002 fd12 	bl	80195d6 <RFW_DeInit>
    switch( modem )
 8016bb2:	7bfb      	ldrb	r3, [r7, #15]
 8016bb4:	2b03      	cmp	r3, #3
 8016bb6:	f000 80d7 	beq.w	8016d68 <RadioSetTxConfig+0x1cc>
 8016bba:	2b03      	cmp	r3, #3
 8016bbc:	f300 80e6 	bgt.w	8016d8c <RadioSetTxConfig+0x1f0>
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d002      	beq.n	8016bca <RadioSetTxConfig+0x2e>
 8016bc4:	2b01      	cmp	r3, #1
 8016bc6:	d061      	beq.n	8016c8c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016bc8:	e0e0      	b.n	8016d8c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016bca:	4b7c      	ldr	r3, [pc, #496]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bcc:	2200      	movs	r2, #0
 8016bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016bd2:	4a7a      	ldr	r2, [pc, #488]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bd4:	6a3b      	ldr	r3, [r7, #32]
 8016bd6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016bd8:	4b78      	ldr	r3, [pc, #480]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bda:	220b      	movs	r2, #11
 8016bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016be0:	6878      	ldr	r0, [r7, #4]
 8016be2:	f002 fc29 	bl	8019438 <SUBGRF_GetFskBandwidthRegValue>
 8016be6:	4603      	mov	r3, r0
 8016be8:	461a      	mov	r2, r3
 8016bea:	4b74      	ldr	r3, [pc, #464]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016bf0:	4a72      	ldr	r2, [pc, #456]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016bf6:	4b71      	ldr	r3, [pc, #452]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016bfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016bfe:	00db      	lsls	r3, r3, #3
 8016c00:	b29a      	uxth	r2, r3
 8016c02:	4b6e      	ldr	r3, [pc, #440]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c04:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016c06:	4b6d      	ldr	r3, [pc, #436]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c08:	2204      	movs	r2, #4
 8016c0a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016c0c:	4b6b      	ldr	r3, [pc, #428]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c0e:	2218      	movs	r2, #24
 8016c10:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016c12:	4b6a      	ldr	r3, [pc, #424]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c14:	2200      	movs	r2, #0
 8016c16:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016c18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016c1c:	f083 0301 	eor.w	r3, r3, #1
 8016c20:	b2db      	uxtb	r3, r3
 8016c22:	461a      	mov	r2, r3
 8016c24:	4b65      	ldr	r3, [pc, #404]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c26:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016c28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d003      	beq.n	8016c38 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016c30:	4b62      	ldr	r3, [pc, #392]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c32:	22f2      	movs	r2, #242	; 0xf2
 8016c34:	75da      	strb	r2, [r3, #23]
 8016c36:	e002      	b.n	8016c3e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016c38:	4b60      	ldr	r3, [pc, #384]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016c3e:	4b5f      	ldr	r3, [pc, #380]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c40:	2201      	movs	r2, #1
 8016c42:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016c44:	f000 fb3d 	bl	80172c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016c48:	4b5c      	ldr	r3, [pc, #368]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	bf14      	ite	ne
 8016c52:	2301      	movne	r3, #1
 8016c54:	2300      	moveq	r3, #0
 8016c56:	b2db      	uxtb	r3, r3
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7ff fcc1 	bl	80165e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c5e:	4858      	ldr	r0, [pc, #352]	; (8016dc0 <RadioSetTxConfig+0x224>)
 8016c60:	f001 ffcc 	bl	8018bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c64:	4857      	ldr	r0, [pc, #348]	; (8016dc4 <RadioSetTxConfig+0x228>)
 8016c66:	f002 f895 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c6a:	4a57      	ldr	r2, [pc, #348]	; (8016dc8 <RadioSetTxConfig+0x22c>)
 8016c6c:	f107 0310 	add.w	r3, r7, #16
 8016c70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c74:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c78:	f107 0310 	add.w	r3, r7, #16
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f001 fbc8 	bl	8018412 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016c86:	f001 fc13 	bl	80184b0 <SUBGRF_SetWhiteningSeed>
            break;
 8016c8a:	e080      	b.n	8016d8e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016c8c:	4b4b      	ldr	r3, [pc, #300]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c8e:	2201      	movs	r2, #1
 8016c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	b2da      	uxtb	r2, r3
 8016c98:	4b48      	ldr	r3, [pc, #288]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016c9e:	4a4b      	ldr	r2, [pc, #300]	; (8016dcc <RadioSetTxConfig+0x230>)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	781a      	ldrb	r2, [r3, #0]
 8016ca6:	4b45      	ldr	r3, [pc, #276]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016cac:	4a43      	ldr	r2, [pc, #268]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016cae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016cb2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d105      	bne.n	8016cc8 <RadioSetTxConfig+0x12c>
 8016cbc:	6a3b      	ldr	r3, [r7, #32]
 8016cbe:	2b0b      	cmp	r3, #11
 8016cc0:	d008      	beq.n	8016cd4 <RadioSetTxConfig+0x138>
 8016cc2:	6a3b      	ldr	r3, [r7, #32]
 8016cc4:	2b0c      	cmp	r3, #12
 8016cc6:	d005      	beq.n	8016cd4 <RadioSetTxConfig+0x138>
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	2b01      	cmp	r3, #1
 8016ccc:	d107      	bne.n	8016cde <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016cce:	6a3b      	ldr	r3, [r7, #32]
 8016cd0:	2b0c      	cmp	r3, #12
 8016cd2:	d104      	bne.n	8016cde <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016cd4:	4b39      	ldr	r3, [pc, #228]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016cd6:	2201      	movs	r2, #1
 8016cd8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016cdc:	e003      	b.n	8016ce6 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016cde:	4b37      	ldr	r3, [pc, #220]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016ce6:	4b35      	ldr	r3, [pc, #212]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016ce8:	2201      	movs	r2, #1
 8016cea:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016cec:	4b33      	ldr	r3, [pc, #204]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016cf2:	2b05      	cmp	r3, #5
 8016cf4:	d004      	beq.n	8016d00 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016cf6:	4b31      	ldr	r3, [pc, #196]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016cfc:	2b06      	cmp	r3, #6
 8016cfe:	d10a      	bne.n	8016d16 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016d00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d02:	2b0b      	cmp	r3, #11
 8016d04:	d803      	bhi.n	8016d0e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016d06:	4b2d      	ldr	r3, [pc, #180]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d08:	220c      	movs	r2, #12
 8016d0a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016d0c:	e006      	b.n	8016d1c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d0e:	4a2b      	ldr	r2, [pc, #172]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d12:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016d14:	e002      	b.n	8016d1c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d16:	4a29      	ldr	r2, [pc, #164]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016d1a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016d1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016d20:	4b26      	ldr	r3, [pc, #152]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d22:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016d24:	4b2a      	ldr	r3, [pc, #168]	; (8016dd0 <RadioSetTxConfig+0x234>)
 8016d26:	781a      	ldrb	r2, [r3, #0]
 8016d28:	4b24      	ldr	r3, [pc, #144]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d2a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016d2c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016d30:	4b22      	ldr	r3, [pc, #136]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d32:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016d36:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016d3a:	4b20      	ldr	r3, [pc, #128]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016d40:	f000 fabf 	bl	80172c2 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d44:	4b1d      	ldr	r3, [pc, #116]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	bf14      	ite	ne
 8016d4e:	2301      	movne	r3, #1
 8016d50:	2300      	moveq	r3, #0
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	4618      	mov	r0, r3
 8016d56:	f7ff fc43 	bl	80165e0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d5a:	4819      	ldr	r0, [pc, #100]	; (8016dc0 <RadioSetTxConfig+0x224>)
 8016d5c:	f001 ff4e 	bl	8018bfc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d60:	4818      	ldr	r0, [pc, #96]	; (8016dc4 <RadioSetTxConfig+0x228>)
 8016d62:	f002 f817 	bl	8018d94 <SUBGRF_SetPacketParams>
            break;
 8016d66:	e012      	b.n	8016d8e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016d68:	2003      	movs	r0, #3
 8016d6a:	f7ff fc39 	bl	80165e0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016d6e:	4b13      	ldr	r3, [pc, #76]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d70:	2202      	movs	r2, #2
 8016d72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016d76:	4a11      	ldr	r2, [pc, #68]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d78:	6a3b      	ldr	r3, [r7, #32]
 8016d7a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016d7c:	4b0f      	ldr	r3, [pc, #60]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d7e:	2216      	movs	r2, #22
 8016d80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d84:	480e      	ldr	r0, [pc, #56]	; (8016dc0 <RadioSetTxConfig+0x224>)
 8016d86:	f001 ff39 	bl	8018bfc <SUBGRF_SetModulationParams>
            break;
 8016d8a:	e000      	b.n	8016d8e <RadioSetTxConfig+0x1f2>
            break;
 8016d8c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016d92:	4618      	mov	r0, r3
 8016d94:	f002 fa62 	bl	801925c <SUBGRF_SetRfTxPower>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	4b07      	ldr	r3, [pc, #28]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016d9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016da2:	4b06      	ldr	r3, [pc, #24]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016da4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016da8:	4618      	mov	r0, r3
 8016daa:	f002 fc28 	bl	80195fe <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016dae:	4a03      	ldr	r2, [pc, #12]	; (8016dbc <RadioSetTxConfig+0x220>)
 8016db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016db2:	6053      	str	r3, [r2, #4]
}
 8016db4:	bf00      	nop
 8016db6:	3718      	adds	r7, #24
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	200018b4 	.word	0x200018b4
 8016dc0:	200018ec 	.word	0x200018ec
 8016dc4:	200018c2 	.word	0x200018c2
 8016dc8:	0801b64c 	.word	0x0801b64c
 8016dcc:	0801bc48 	.word	0x0801bc48
 8016dd0:	20000120 	.word	0x20000120

08016dd4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	b083      	sub	sp, #12
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
    return true;
 8016ddc:	2301      	movs	r3, #1
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	370c      	adds	r7, #12
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bc80      	pop	{r7}
 8016de6:	4770      	bx	lr

08016de8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016de8:	b480      	push	{r7}
 8016dea:	b085      	sub	sp, #20
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	4603      	mov	r3, r0
 8016df0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016df6:	79fb      	ldrb	r3, [r7, #7]
 8016df8:	2b0a      	cmp	r3, #10
 8016dfa:	d83e      	bhi.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
 8016dfc:	a201      	add	r2, pc, #4	; (adr r2, 8016e04 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e02:	bf00      	nop
 8016e04:	08016e31 	.word	0x08016e31
 8016e08:	08016e41 	.word	0x08016e41
 8016e0c:	08016e51 	.word	0x08016e51
 8016e10:	08016e61 	.word	0x08016e61
 8016e14:	08016e69 	.word	0x08016e69
 8016e18:	08016e6f 	.word	0x08016e6f
 8016e1c:	08016e75 	.word	0x08016e75
 8016e20:	08016e7b 	.word	0x08016e7b
 8016e24:	08016e39 	.word	0x08016e39
 8016e28:	08016e49 	.word	0x08016e49
 8016e2c:	08016e59 	.word	0x08016e59
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016e30:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016e34:	60fb      	str	r3, [r7, #12]
        break;
 8016e36:	e020      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016e38:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016e3c:	60fb      	str	r3, [r7, #12]
        break;
 8016e3e:	e01c      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016e40:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016e44:	60fb      	str	r3, [r7, #12]
        break;
 8016e46:	e018      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016e48:	f245 1361 	movw	r3, #20833	; 0x5161
 8016e4c:	60fb      	str	r3, [r7, #12]
        break;
 8016e4e:	e014      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016e50:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016e54:	60fb      	str	r3, [r7, #12]
        break;
 8016e56:	e010      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016e58:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016e5c:	60fb      	str	r3, [r7, #12]
        break;
 8016e5e:	e00c      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016e60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016e64:	60fb      	str	r3, [r7, #12]
        break;
 8016e66:	e008      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016e68:	4b07      	ldr	r3, [pc, #28]	; (8016e88 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016e6a:	60fb      	str	r3, [r7, #12]
        break;
 8016e6c:	e005      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016e6e:	4b07      	ldr	r3, [pc, #28]	; (8016e8c <RadioGetLoRaBandwidthInHz+0xa4>)
 8016e70:	60fb      	str	r3, [r7, #12]
        break;
 8016e72:	e002      	b.n	8016e7a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016e74:	4b06      	ldr	r3, [pc, #24]	; (8016e90 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016e76:	60fb      	str	r3, [r7, #12]
        break;
 8016e78:	bf00      	nop
    }

    return bandwidthInHz;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3714      	adds	r7, #20
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bc80      	pop	{r7}
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop
 8016e88:	0001e848 	.word	0x0001e848
 8016e8c:	0003d090 	.word	0x0003d090
 8016e90:	0007a120 	.word	0x0007a120

08016e94 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016e94:	b480      	push	{r7}
 8016e96:	b083      	sub	sp, #12
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	4608      	mov	r0, r1
 8016e9e:	4611      	mov	r1, r2
 8016ea0:	461a      	mov	r2, r3
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	70fb      	strb	r3, [r7, #3]
 8016ea6:	460b      	mov	r3, r1
 8016ea8:	803b      	strh	r3, [r7, #0]
 8016eaa:	4613      	mov	r3, r2
 8016eac:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016eae:	883b      	ldrh	r3, [r7, #0]
 8016eb0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016eb2:	78ba      	ldrb	r2, [r7, #2]
 8016eb4:	f082 0201 	eor.w	r2, r2, #1
 8016eb8:	b2d2      	uxtb	r2, r2
 8016eba:	2a00      	cmp	r2, #0
 8016ebc:	d001      	beq.n	8016ec2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016ebe:	2208      	movs	r2, #8
 8016ec0:	e000      	b.n	8016ec4 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016ec2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016ec4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016ec6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016eca:	7c3b      	ldrb	r3, [r7, #16]
 8016ecc:	7d39      	ldrb	r1, [r7, #20]
 8016ece:	2900      	cmp	r1, #0
 8016ed0:	d001      	beq.n	8016ed6 <RadioGetGfskTimeOnAirNumerator+0x42>
 8016ed2:	2102      	movs	r1, #2
 8016ed4:	e000      	b.n	8016ed8 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016ed6:	2100      	movs	r1, #0
 8016ed8:	440b      	add	r3, r1
 8016eda:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016edc:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	370c      	adds	r7, #12
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bc80      	pop	{r7}
 8016ee6:	4770      	bx	lr

08016ee8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016ee8:	b480      	push	{r7}
 8016eea:	b08b      	sub	sp, #44	; 0x2c
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	60b9      	str	r1, [r7, #8]
 8016ef2:	4611      	mov	r1, r2
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	71fb      	strb	r3, [r7, #7]
 8016efa:	4613      	mov	r3, r2
 8016efc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016efe:	79fb      	ldrb	r3, [r7, #7]
 8016f00:	3304      	adds	r3, #4
 8016f02:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016f04:	2300      	movs	r3, #0
 8016f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	2b05      	cmp	r3, #5
 8016f0e:	d002      	beq.n	8016f16 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	2b06      	cmp	r3, #6
 8016f14:	d104      	bne.n	8016f20 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016f16:	88bb      	ldrh	r3, [r7, #4]
 8016f18:	2b0b      	cmp	r3, #11
 8016f1a:	d801      	bhi.n	8016f20 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016f1c:	230c      	movs	r3, #12
 8016f1e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d105      	bne.n	8016f32 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016f26:	68bb      	ldr	r3, [r7, #8]
 8016f28:	2b0b      	cmp	r3, #11
 8016f2a:	d008      	beq.n	8016f3e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	2b0c      	cmp	r3, #12
 8016f30:	d005      	beq.n	8016f3e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d105      	bne.n	8016f44 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	2b0c      	cmp	r3, #12
 8016f3c:	d102      	bne.n	8016f44 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016f3e:	2301      	movs	r3, #1
 8016f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016f48:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8016f4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016f4e:	2a00      	cmp	r2, #0
 8016f50:	d001      	beq.n	8016f56 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8016f52:	2210      	movs	r2, #16
 8016f54:	e000      	b.n	8016f58 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8016f56:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f58:	4413      	add	r3, r2
 8016f5a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8016f60:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8016f62:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016f66:	2a00      	cmp	r2, #0
 8016f68:	d001      	beq.n	8016f6e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8016f6a:	2200      	movs	r2, #0
 8016f6c:	e000      	b.n	8016f70 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8016f6e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8016f70:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016f72:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	2b06      	cmp	r3, #6
 8016f78:	d803      	bhi.n	8016f82 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	009b      	lsls	r3, r3, #2
 8016f7e:	623b      	str	r3, [r7, #32]
 8016f80:	e00e      	b.n	8016fa0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8016f82:	69fb      	ldr	r3, [r7, #28]
 8016f84:	3308      	adds	r3, #8
 8016f86:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8016f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d004      	beq.n	8016f9a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	3b02      	subs	r3, #2
 8016f94:	009b      	lsls	r3, r3, #2
 8016f96:	623b      	str	r3, [r7, #32]
 8016f98:	e002      	b.n	8016fa0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8016f9a:	68bb      	ldr	r3, [r7, #8]
 8016f9c:	009b      	lsls	r3, r3, #2
 8016f9e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	da01      	bge.n	8016faa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8016faa:	69fa      	ldr	r2, [r7, #28]
 8016fac:	6a3b      	ldr	r3, [r7, #32]
 8016fae:	4413      	add	r3, r2
 8016fb0:	1e5a      	subs	r2, r3, #1
 8016fb2:	6a3b      	ldr	r3, [r7, #32]
 8016fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fb8:	697a      	ldr	r2, [r7, #20]
 8016fba:	fb02 f203 	mul.w	r2, r2, r3
 8016fbe:	88bb      	ldrh	r3, [r7, #4]
 8016fc0:	4413      	add	r3, r2
    int32_t intermediate =
 8016fc2:	330c      	adds	r3, #12
 8016fc4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	2b06      	cmp	r3, #6
 8016fca:	d802      	bhi.n	8016fd2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8016fcc:	69bb      	ldr	r3, [r7, #24]
 8016fce:	3302      	adds	r3, #2
 8016fd0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8016fd2:	69bb      	ldr	r3, [r7, #24]
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	1c5a      	adds	r2, r3, #1
 8016fd8:	68bb      	ldr	r3, [r7, #8]
 8016fda:	3b02      	subs	r3, #2
 8016fdc:	fa02 f303 	lsl.w	r3, r2, r3
}
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	372c      	adds	r7, #44	; 0x2c
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bc80      	pop	{r7}
 8016fe8:	4770      	bx	lr
	...

08016fec <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b08a      	sub	sp, #40	; 0x28
 8016ff0:	af04      	add	r7, sp, #16
 8016ff2:	60b9      	str	r1, [r7, #8]
 8016ff4:	607a      	str	r2, [r7, #4]
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	73fb      	strb	r3, [r7, #15]
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017000:	2300      	movs	r3, #0
 8017002:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017004:	2301      	movs	r3, #1
 8017006:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017008:	7bfb      	ldrb	r3, [r7, #15]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d002      	beq.n	8017014 <RadioTimeOnAir+0x28>
 801700e:	2b01      	cmp	r3, #1
 8017010:	d017      	beq.n	8017042 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017012:	e035      	b.n	8017080 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017014:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8017018:	8c3a      	ldrh	r2, [r7, #32]
 801701a:	7bb9      	ldrb	r1, [r7, #14]
 801701c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017020:	9301      	str	r3, [sp, #4]
 8017022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	4603      	mov	r3, r0
 801702a:	6878      	ldr	r0, [r7, #4]
 801702c:	f7ff ff32 	bl	8016e94 <RadioGetGfskTimeOnAirNumerator>
 8017030:	4603      	mov	r3, r0
 8017032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017036:	fb02 f303 	mul.w	r3, r2, r3
 801703a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	613b      	str	r3, [r7, #16]
        break;
 8017040:	e01e      	b.n	8017080 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017042:	8c39      	ldrh	r1, [r7, #32]
 8017044:	7bba      	ldrb	r2, [r7, #14]
 8017046:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801704a:	9302      	str	r3, [sp, #8]
 801704c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017050:	9301      	str	r3, [sp, #4]
 8017052:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017056:	9300      	str	r3, [sp, #0]
 8017058:	460b      	mov	r3, r1
 801705a:	6879      	ldr	r1, [r7, #4]
 801705c:	68b8      	ldr	r0, [r7, #8]
 801705e:	f7ff ff43 	bl	8016ee8 <RadioGetLoRaTimeOnAirNumerator>
 8017062:	4603      	mov	r3, r0
 8017064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017068:	fb02 f303 	mul.w	r3, r2, r3
 801706c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801706e:	4a0a      	ldr	r2, [pc, #40]	; (8017098 <RadioTimeOnAir+0xac>)
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	4413      	add	r3, r2
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	4618      	mov	r0, r3
 8017078:	f7ff feb6 	bl	8016de8 <RadioGetLoRaBandwidthInHz>
 801707c:	6138      	str	r0, [r7, #16]
        break;
 801707e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017080:	697a      	ldr	r2, [r7, #20]
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	4413      	add	r3, r2
 8017086:	1e5a      	subs	r2, r3, #1
 8017088:	693b      	ldr	r3, [r7, #16]
 801708a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801708e:	4618      	mov	r0, r3
 8017090:	3718      	adds	r7, #24
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}
 8017096:	bf00      	nop
 8017098:	0801bc48 	.word	0x0801bc48

0801709c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	460b      	mov	r3, r1
 80170a6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80170a8:	2300      	movs	r3, #0
 80170aa:	2200      	movs	r2, #0
 80170ac:	f240 2101 	movw	r1, #513	; 0x201
 80170b0:	f240 2001 	movw	r0, #513	; 0x201
 80170b4:	f001 fc78 	bl	80189a8 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 80170b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80170bc:	4871      	ldr	r0, [pc, #452]	; (8017284 <RadioSend+0x1e8>)
 80170be:	f7ff fa07 	bl	80164d0 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 80170c2:	4b71      	ldr	r3, [pc, #452]	; (8017288 <RadioSend+0x1ec>)
 80170c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80170c8:	2101      	movs	r1, #1
 80170ca:	4618      	mov	r0, r3
 80170cc:	f002 f89e 	bl	801920c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80170d0:	4b6d      	ldr	r3, [pc, #436]	; (8017288 <RadioSend+0x1ec>)
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	2b01      	cmp	r3, #1
 80170d6:	d112      	bne.n	80170fe <RadioSend+0x62>
 80170d8:	4b6b      	ldr	r3, [pc, #428]	; (8017288 <RadioSend+0x1ec>)
 80170da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80170de:	2b06      	cmp	r3, #6
 80170e0:	d10d      	bne.n	80170fe <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80170e2:	f640 0089 	movw	r0, #2185	; 0x889
 80170e6:	f001 ffb1 	bl	801904c <SUBGRF_ReadRegister>
 80170ea:	4603      	mov	r3, r0
 80170ec:	f023 0304 	bic.w	r3, r3, #4
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	4619      	mov	r1, r3
 80170f4:	f640 0089 	movw	r0, #2185	; 0x889
 80170f8:	f001 ff94 	bl	8019024 <SUBGRF_WriteRegister>
 80170fc:	e00c      	b.n	8017118 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80170fe:	f640 0089 	movw	r0, #2185	; 0x889
 8017102:	f001 ffa3 	bl	801904c <SUBGRF_ReadRegister>
 8017106:	4603      	mov	r3, r0
 8017108:	f043 0304 	orr.w	r3, r3, #4
 801710c:	b2db      	uxtb	r3, r3
 801710e:	4619      	mov	r1, r3
 8017110:	f640 0089 	movw	r0, #2185	; 0x889
 8017114:	f001 ff86 	bl	8019024 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8017118:	4b5b      	ldr	r3, [pc, #364]	; (8017288 <RadioSend+0x1ec>)
 801711a:	781b      	ldrb	r3, [r3, #0]
 801711c:	2b03      	cmp	r3, #3
 801711e:	f200 80a4 	bhi.w	801726a <RadioSend+0x1ce>
 8017122:	a201      	add	r2, pc, #4	; (adr r2, 8017128 <RadioSend+0x8c>)
 8017124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017128:	08017153 	.word	0x08017153
 801712c:	08017139 	.word	0x08017139
 8017130:	080171b3 	.word	0x080171b3
 8017134:	080171d3 	.word	0x080171d3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017138:	4a53      	ldr	r2, [pc, #332]	; (8017288 <RadioSend+0x1ec>)
 801713a:	78fb      	ldrb	r3, [r7, #3]
 801713c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801713e:	4853      	ldr	r0, [pc, #332]	; (801728c <RadioSend+0x1f0>)
 8017140:	f001 fe28 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017144:	78fb      	ldrb	r3, [r7, #3]
 8017146:	2200      	movs	r2, #0
 8017148:	4619      	mov	r1, r3
 801714a:	6878      	ldr	r0, [r7, #4]
 801714c:	f001 f94e 	bl	80183ec <SUBGRF_SendPayload>
            break;
 8017150:	e08c      	b.n	801726c <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017152:	f002 fa46 	bl	80195e2 <RFW_Is_Init>
 8017156:	4603      	mov	r3, r0
 8017158:	2b01      	cmp	r3, #1
 801715a:	d11d      	bne.n	8017198 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801715c:	f107 020d 	add.w	r2, r7, #13
 8017160:	78fb      	ldrb	r3, [r7, #3]
 8017162:	4619      	mov	r1, r3
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f002 fa54 	bl	8019612 <RFW_TransmitInit>
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d10c      	bne.n	801718a <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017170:	7b7a      	ldrb	r2, [r7, #13]
 8017172:	4b45      	ldr	r3, [pc, #276]	; (8017288 <RadioSend+0x1ec>)
 8017174:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017176:	4845      	ldr	r0, [pc, #276]	; (801728c <RadioSend+0x1f0>)
 8017178:	f001 fe0c 	bl	8018d94 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801717c:	7b7b      	ldrb	r3, [r7, #13]
 801717e:	2200      	movs	r2, #0
 8017180:	4619      	mov	r1, r3
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f001 f932 	bl	80183ec <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017188:	e070      	b.n	801726c <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801718a:	4b41      	ldr	r3, [pc, #260]	; (8017290 <RadioSend+0x1f4>)
 801718c:	2201      	movs	r2, #1
 801718e:	2100      	movs	r1, #0
 8017190:	2002      	movs	r0, #2
 8017192:	f003 fb4b 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
 8017196:	e072      	b.n	801727e <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017198:	4a3b      	ldr	r2, [pc, #236]	; (8017288 <RadioSend+0x1ec>)
 801719a:	78fb      	ldrb	r3, [r7, #3]
 801719c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801719e:	483b      	ldr	r0, [pc, #236]	; (801728c <RadioSend+0x1f0>)
 80171a0:	f001 fdf8 	bl	8018d94 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80171a4:	78fb      	ldrb	r3, [r7, #3]
 80171a6:	2200      	movs	r2, #0
 80171a8:	4619      	mov	r1, r3
 80171aa:	6878      	ldr	r0, [r7, #4]
 80171ac:	f001 f91e 	bl	80183ec <SUBGRF_SendPayload>
            break;
 80171b0:	e05c      	b.n	801726c <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80171b2:	4b35      	ldr	r3, [pc, #212]	; (8017288 <RadioSend+0x1ec>)
 80171b4:	2202      	movs	r2, #2
 80171b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80171b8:	4a33      	ldr	r2, [pc, #204]	; (8017288 <RadioSend+0x1ec>)
 80171ba:	78fb      	ldrb	r3, [r7, #3]
 80171bc:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171be:	4833      	ldr	r0, [pc, #204]	; (801728c <RadioSend+0x1f0>)
 80171c0:	f001 fde8 	bl	8018d94 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80171c4:	78fb      	ldrb	r3, [r7, #3]
 80171c6:	2200      	movs	r2, #0
 80171c8:	4619      	mov	r1, r3
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f001 f90e 	bl	80183ec <SUBGRF_SendPayload>
            break;
 80171d0:	e04c      	b.n	801726c <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80171d2:	78fb      	ldrb	r3, [r7, #3]
 80171d4:	461a      	mov	r2, r3
 80171d6:	6879      	ldr	r1, [r7, #4]
 80171d8:	482e      	ldr	r0, [pc, #184]	; (8017294 <RadioSend+0x1f8>)
 80171da:	f000 fc8e 	bl	8017afa <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80171de:	4b2a      	ldr	r3, [pc, #168]	; (8017288 <RadioSend+0x1ec>)
 80171e0:	2202      	movs	r2, #2
 80171e2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80171e4:	78fb      	ldrb	r3, [r7, #3]
 80171e6:	3301      	adds	r3, #1
 80171e8:	b2da      	uxtb	r2, r3
 80171ea:	4b27      	ldr	r3, [pc, #156]	; (8017288 <RadioSend+0x1ec>)
 80171ec:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171ee:	4827      	ldr	r0, [pc, #156]	; (801728c <RadioSend+0x1f0>)
 80171f0:	f001 fdd0 	bl	8018d94 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80171f4:	2100      	movs	r1, #0
 80171f6:	20f1      	movs	r0, #241	; 0xf1
 80171f8:	f000 f94f 	bl	801749a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80171fc:	2100      	movs	r1, #0
 80171fe:	20f0      	movs	r0, #240	; 0xf0
 8017200:	f000 f94b 	bl	801749a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017204:	4b20      	ldr	r3, [pc, #128]	; (8017288 <RadioSend+0x1ec>)
 8017206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017208:	2b64      	cmp	r3, #100	; 0x64
 801720a:	d108      	bne.n	801721e <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 801720c:	2170      	movs	r1, #112	; 0x70
 801720e:	20f3      	movs	r0, #243	; 0xf3
 8017210:	f000 f943 	bl	801749a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8017214:	211d      	movs	r1, #29
 8017216:	20f2      	movs	r0, #242	; 0xf2
 8017218:	f000 f93f 	bl	801749a <RadioWrite>
 801721c:	e007      	b.n	801722e <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 801721e:	21e1      	movs	r1, #225	; 0xe1
 8017220:	20f3      	movs	r0, #243	; 0xf3
 8017222:	f000 f93a 	bl	801749a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8017226:	2104      	movs	r1, #4
 8017228:	20f2      	movs	r0, #242	; 0xf2
 801722a:	f000 f936 	bl	801749a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801722e:	78fb      	ldrb	r3, [r7, #3]
 8017230:	b29b      	uxth	r3, r3
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	b29b      	uxth	r3, r3
 8017236:	3302      	adds	r3, #2
 8017238:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801723a:	89fb      	ldrh	r3, [r7, #14]
 801723c:	0a1b      	lsrs	r3, r3, #8
 801723e:	b29b      	uxth	r3, r3
 8017240:	b2db      	uxtb	r3, r3
 8017242:	4619      	mov	r1, r3
 8017244:	20f4      	movs	r0, #244	; 0xf4
 8017246:	f000 f928 	bl	801749a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801724a:	89fb      	ldrh	r3, [r7, #14]
 801724c:	b2db      	uxtb	r3, r3
 801724e:	4619      	mov	r1, r3
 8017250:	20f5      	movs	r0, #245	; 0xf5
 8017252:	f000 f922 	bl	801749a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8017256:	78fb      	ldrb	r3, [r7, #3]
 8017258:	3301      	adds	r3, #1
 801725a:	b2db      	uxtb	r3, r3
 801725c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017260:	4619      	mov	r1, r3
 8017262:	480c      	ldr	r0, [pc, #48]	; (8017294 <RadioSend+0x1f8>)
 8017264:	f001 f8c2 	bl	80183ec <SUBGRF_SendPayload>
            break;
 8017268:	e000      	b.n	801726c <RadioSend+0x1d0>
        }
        default:
            break;
 801726a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801726c:	4b06      	ldr	r3, [pc, #24]	; (8017288 <RadioSend+0x1ec>)
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	4619      	mov	r1, r3
 8017272:	4809      	ldr	r0, [pc, #36]	; (8017298 <RadioSend+0x1fc>)
 8017274:	f003 f940 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017278:	4807      	ldr	r0, [pc, #28]	; (8017298 <RadioSend+0x1fc>)
 801727a:	f003 f85f 	bl	801a33c <UTIL_TIMER_Start>
}
 801727e:	3710      	adds	r7, #16
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	48000400 	.word	0x48000400
 8017288:	200018b4 	.word	0x200018b4
 801728c:	200018c2 	.word	0x200018c2
 8017290:	0801b654 	.word	0x0801b654
 8017294:	20000ec8 	.word	0x20000ec8
 8017298:	2000190c 	.word	0x2000190c

0801729c <RadioSleep>:

static void RadioSleep( void )
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80172a2:	2300      	movs	r3, #0
 80172a4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80172a6:	793b      	ldrb	r3, [r7, #4]
 80172a8:	f043 0304 	orr.w	r3, r3, #4
 80172ac:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80172ae:	7938      	ldrb	r0, [r7, #4]
 80172b0:	f001 f978 	bl	80185a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80172b4:	2002      	movs	r0, #2
 80172b6:	f7ea fc84 	bl	8001bc2 <HAL_Delay>
}
 80172ba:	bf00      	nop
 80172bc:	3708      	adds	r7, #8
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}

080172c2 <RadioStandby>:

static void RadioStandby( void )
{
 80172c2:	b580      	push	{r7, lr}
 80172c4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80172c6:	2000      	movs	r0, #0
 80172c8:	f001 f99e 	bl	8018608 <SUBGRF_SetStandby>
}
 80172cc:	bf00      	nop
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80172d8:	f002 f983 	bl	80195e2 <RFW_Is_Init>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d102      	bne.n	80172e8 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80172e2:	f002 f9a6 	bl	8019632 <RFW_ReceiveInit>
 80172e6:	e007      	b.n	80172f8 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80172e8:	2300      	movs	r3, #0
 80172ea:	2200      	movs	r2, #0
 80172ec:	f240 2162 	movw	r1, #610	; 0x262
 80172f0:	f240 2062 	movw	r0, #610	; 0x262
 80172f4:	f001 fb58 	bl	80189a8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d006      	beq.n	801730c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80172fe:	6879      	ldr	r1, [r7, #4]
 8017300:	4812      	ldr	r0, [pc, #72]	; (801734c <RadioRx+0x7c>)
 8017302:	f003 f8f9 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017306:	4811      	ldr	r0, [pc, #68]	; (801734c <RadioRx+0x7c>)
 8017308:	f003 f818 	bl	801a33c <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 801730c:	2101      	movs	r1, #1
 801730e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017312:	f7ff f8dd 	bl	80164d0 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017316:	4b0e      	ldr	r3, [pc, #56]	; (8017350 <RadioRx+0x80>)
 8017318:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801731c:	2100      	movs	r1, #0
 801731e:	4618      	mov	r0, r3
 8017320:	f001 ff74 	bl	801920c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8017324:	4b0a      	ldr	r3, [pc, #40]	; (8017350 <RadioRx+0x80>)
 8017326:	785b      	ldrb	r3, [r3, #1]
 8017328:	2b00      	cmp	r3, #0
 801732a:	d004      	beq.n	8017336 <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801732c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017330:	f001 f9a6 	bl	8018680 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017334:	e005      	b.n	8017342 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017336:	4b06      	ldr	r3, [pc, #24]	; (8017350 <RadioRx+0x80>)
 8017338:	689b      	ldr	r3, [r3, #8]
 801733a:	019b      	lsls	r3, r3, #6
 801733c:	4618      	mov	r0, r3
 801733e:	f001 f99f 	bl	8018680 <SUBGRF_SetRx>
}
 8017342:	bf00      	nop
 8017344:	3708      	adds	r7, #8
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	20001924 	.word	0x20001924
 8017350:	200018b4 	.word	0x200018b4

08017354 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801735c:	f002 f941 	bl	80195e2 <RFW_Is_Init>
 8017360:	4603      	mov	r3, r0
 8017362:	2b01      	cmp	r3, #1
 8017364:	d102      	bne.n	801736c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8017366:	f002 f964 	bl	8019632 <RFW_ReceiveInit>
 801736a:	e007      	b.n	801737c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801736c:	2300      	movs	r3, #0
 801736e:	2200      	movs	r2, #0
 8017370:	f240 2162 	movw	r1, #610	; 0x262
 8017374:	f240 2062 	movw	r0, #610	; 0x262
 8017378:	f001 fb16 	bl	80189a8 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d006      	beq.n	8017390 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017382:	6879      	ldr	r1, [r7, #4]
 8017384:	480f      	ldr	r0, [pc, #60]	; (80173c4 <RadioRxBoosted+0x70>)
 8017386:	f003 f8b7 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801738a:	480e      	ldr	r0, [pc, #56]	; (80173c4 <RadioRxBoosted+0x70>)
 801738c:	f002 ffd6 	bl	801a33c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017390:	4b0d      	ldr	r3, [pc, #52]	; (80173c8 <RadioRxBoosted+0x74>)
 8017392:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017396:	2100      	movs	r1, #0
 8017398:	4618      	mov	r0, r3
 801739a:	f001 ff37 	bl	801920c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801739e:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <RadioRxBoosted+0x74>)
 80173a0:	785b      	ldrb	r3, [r3, #1]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d004      	beq.n	80173b0 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80173a6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80173aa:	f001 f989 	bl	80186c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80173ae:	e005      	b.n	80173bc <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80173b0:	4b05      	ldr	r3, [pc, #20]	; (80173c8 <RadioRxBoosted+0x74>)
 80173b2:	689b      	ldr	r3, [r3, #8]
 80173b4:	019b      	lsls	r3, r3, #6
 80173b6:	4618      	mov	r0, r3
 80173b8:	f001 f982 	bl	80186c0 <SUBGRF_SetRxBoosted>
}
 80173bc:	bf00      	nop
 80173be:	3708      	adds	r7, #8
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	20001924 	.word	0x20001924
 80173c8:	200018b4 	.word	0x200018b4

080173cc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173d6:	4b07      	ldr	r3, [pc, #28]	; (80173f4 <RadioSetRxDutyCycle+0x28>)
 80173d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173dc:	2100      	movs	r1, #0
 80173de:	4618      	mov	r0, r3
 80173e0:	f001 ff14 	bl	801920c <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80173e4:	6839      	ldr	r1, [r7, #0]
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f001 f98e 	bl	8018708 <SUBGRF_SetRxDutyCycle>
}
 80173ec:	bf00      	nop
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	200018b4 	.word	0x200018b4

080173f8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173fc:	4b09      	ldr	r3, [pc, #36]	; (8017424 <RadioStartCad+0x2c>)
 80173fe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017402:	2100      	movs	r1, #0
 8017404:	4618      	mov	r0, r3
 8017406:	f001 ff01 	bl	801920c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801740a:	2300      	movs	r3, #0
 801740c:	2200      	movs	r2, #0
 801740e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8017412:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8017416:	f001 fac7 	bl	80189a8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801741a:	f001 f9a1 	bl	8018760 <SUBGRF_SetCad>
}
 801741e:	bf00      	nop
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	200018b4 	.word	0x200018b4

08017428 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b084      	sub	sp, #16
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
 8017430:	460b      	mov	r3, r1
 8017432:	70fb      	strb	r3, [r7, #3]
 8017434:	4613      	mov	r3, r2
 8017436:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017438:	883b      	ldrh	r3, [r7, #0]
 801743a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801743e:	fb02 f303 	mul.w	r3, r2, r3
 8017442:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f001 fb0b 	bl	8018a60 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801744a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801744e:	4618      	mov	r0, r3
 8017450:	f001 ff04 	bl	801925c <SUBGRF_SetRfTxPower>
 8017454:	4603      	mov	r3, r0
 8017456:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017458:	7afb      	ldrb	r3, [r7, #11]
 801745a:	2101      	movs	r1, #1
 801745c:	4618      	mov	r0, r3
 801745e:	f001 fed5 	bl	801920c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017462:	f001 f98b 	bl	801877c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017466:	68f9      	ldr	r1, [r7, #12]
 8017468:	4804      	ldr	r0, [pc, #16]	; (801747c <RadioSetTxContinuousWave+0x54>)
 801746a:	f003 f845 	bl	801a4f8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801746e:	4803      	ldr	r0, [pc, #12]	; (801747c <RadioSetTxContinuousWave+0x54>)
 8017470:	f002 ff64 	bl	801a33c <UTIL_TIMER_Start>
}
 8017474:	bf00      	nop
 8017476:	3710      	adds	r7, #16
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}
 801747c:	2000190c 	.word	0x2000190c

08017480 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
 8017486:	4603      	mov	r3, r0
 8017488:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801748a:	f001 fd38 	bl	8018efe <SUBGRF_GetRssiInst>
 801748e:	4603      	mov	r3, r0
 8017490:	b21b      	sxth	r3, r3
}
 8017492:	4618      	mov	r0, r3
 8017494:	3708      	adds	r7, #8
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}

0801749a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801749a:	b580      	push	{r7, lr}
 801749c:	b082      	sub	sp, #8
 801749e:	af00      	add	r7, sp, #0
 80174a0:	4603      	mov	r3, r0
 80174a2:	460a      	mov	r2, r1
 80174a4:	80fb      	strh	r3, [r7, #6]
 80174a6:	4613      	mov	r3, r2
 80174a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 80174aa:	797a      	ldrb	r2, [r7, #5]
 80174ac:	88fb      	ldrh	r3, [r7, #6]
 80174ae:	4611      	mov	r1, r2
 80174b0:	4618      	mov	r0, r3
 80174b2:	f001 fdb7 	bl	8019024 <SUBGRF_WriteRegister>
}
 80174b6:	bf00      	nop
 80174b8:	3708      	adds	r7, #8
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}

080174be <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80174be:	b580      	push	{r7, lr}
 80174c0:	b082      	sub	sp, #8
 80174c2:	af00      	add	r7, sp, #0
 80174c4:	4603      	mov	r3, r0
 80174c6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 80174c8:	88fb      	ldrh	r3, [r7, #6]
 80174ca:	4618      	mov	r0, r3
 80174cc:	f001 fdbe 	bl	801904c <SUBGRF_ReadRegister>
 80174d0:	4603      	mov	r3, r0
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3708      	adds	r7, #8
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}

080174da <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80174da:	b580      	push	{r7, lr}
 80174dc:	b082      	sub	sp, #8
 80174de:	af00      	add	r7, sp, #0
 80174e0:	4603      	mov	r3, r0
 80174e2:	6039      	str	r1, [r7, #0]
 80174e4:	80fb      	strh	r3, [r7, #6]
 80174e6:	4613      	mov	r3, r2
 80174e8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80174ea:	797b      	ldrb	r3, [r7, #5]
 80174ec:	b29a      	uxth	r2, r3
 80174ee:	88fb      	ldrh	r3, [r7, #6]
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	4618      	mov	r0, r3
 80174f4:	f001 fdbe 	bl	8019074 <SUBGRF_WriteRegisters>
}
 80174f8:	bf00      	nop
 80174fa:	3708      	adds	r7, #8
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b082      	sub	sp, #8
 8017504:	af00      	add	r7, sp, #0
 8017506:	4603      	mov	r3, r0
 8017508:	6039      	str	r1, [r7, #0]
 801750a:	80fb      	strh	r3, [r7, #6]
 801750c:	4613      	mov	r3, r2
 801750e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017510:	797b      	ldrb	r3, [r7, #5]
 8017512:	b29a      	uxth	r2, r3
 8017514:	88fb      	ldrh	r3, [r7, #6]
 8017516:	6839      	ldr	r1, [r7, #0]
 8017518:	4618      	mov	r0, r3
 801751a:	f001 fdcd 	bl	80190b8 <SUBGRF_ReadRegisters>
}
 801751e:	bf00      	nop
 8017520:	3708      	adds	r7, #8
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
	...

08017528 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b082      	sub	sp, #8
 801752c:	af00      	add	r7, sp, #0
 801752e:	4603      	mov	r3, r0
 8017530:	460a      	mov	r2, r1
 8017532:	71fb      	strb	r3, [r7, #7]
 8017534:	4613      	mov	r3, r2
 8017536:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017538:	79fb      	ldrb	r3, [r7, #7]
 801753a:	2b01      	cmp	r3, #1
 801753c:	d10a      	bne.n	8017554 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801753e:	4a0e      	ldr	r2, [pc, #56]	; (8017578 <RadioSetMaxPayloadLength+0x50>)
 8017540:	79bb      	ldrb	r3, [r7, #6]
 8017542:	7013      	strb	r3, [r2, #0]
 8017544:	4b0c      	ldr	r3, [pc, #48]	; (8017578 <RadioSetMaxPayloadLength+0x50>)
 8017546:	781a      	ldrb	r2, [r3, #0]
 8017548:	4b0c      	ldr	r3, [pc, #48]	; (801757c <RadioSetMaxPayloadLength+0x54>)
 801754a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801754c:	480c      	ldr	r0, [pc, #48]	; (8017580 <RadioSetMaxPayloadLength+0x58>)
 801754e:	f001 fc21 	bl	8018d94 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017552:	e00d      	b.n	8017570 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017554:	4b09      	ldr	r3, [pc, #36]	; (801757c <RadioSetMaxPayloadLength+0x54>)
 8017556:	7d5b      	ldrb	r3, [r3, #21]
 8017558:	2b01      	cmp	r3, #1
 801755a:	d109      	bne.n	8017570 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801755c:	4a06      	ldr	r2, [pc, #24]	; (8017578 <RadioSetMaxPayloadLength+0x50>)
 801755e:	79bb      	ldrb	r3, [r7, #6]
 8017560:	7013      	strb	r3, [r2, #0]
 8017562:	4b05      	ldr	r3, [pc, #20]	; (8017578 <RadioSetMaxPayloadLength+0x50>)
 8017564:	781a      	ldrb	r2, [r3, #0]
 8017566:	4b05      	ldr	r3, [pc, #20]	; (801757c <RadioSetMaxPayloadLength+0x54>)
 8017568:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801756a:	4805      	ldr	r0, [pc, #20]	; (8017580 <RadioSetMaxPayloadLength+0x58>)
 801756c:	f001 fc12 	bl	8018d94 <SUBGRF_SetPacketParams>
}
 8017570:	bf00      	nop
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}
 8017578:	20000120 	.word	0x20000120
 801757c:	200018b4 	.word	0x200018b4
 8017580:	200018c2 	.word	0x200018c2

08017584 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	4603      	mov	r3, r0
 801758c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801758e:	4a13      	ldr	r2, [pc, #76]	; (80175dc <RadioSetPublicNetwork+0x58>)
 8017590:	79fb      	ldrb	r3, [r7, #7]
 8017592:	7313      	strb	r3, [r2, #12]
 8017594:	4b11      	ldr	r3, [pc, #68]	; (80175dc <RadioSetPublicNetwork+0x58>)
 8017596:	7b1a      	ldrb	r2, [r3, #12]
 8017598:	4b10      	ldr	r3, [pc, #64]	; (80175dc <RadioSetPublicNetwork+0x58>)
 801759a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801759c:	2001      	movs	r0, #1
 801759e:	f7ff f81f 	bl	80165e0 <RadioSetModem>
    if( enable == true )
 80175a2:	79fb      	ldrb	r3, [r7, #7]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d00a      	beq.n	80175be <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80175a8:	2134      	movs	r1, #52	; 0x34
 80175aa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80175ae:	f001 fd39 	bl	8019024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80175b2:	2144      	movs	r1, #68	; 0x44
 80175b4:	f240 7041 	movw	r0, #1857	; 0x741
 80175b8:	f001 fd34 	bl	8019024 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80175bc:	e009      	b.n	80175d2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80175be:	2114      	movs	r1, #20
 80175c0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80175c4:	f001 fd2e 	bl	8019024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80175c8:	2124      	movs	r1, #36	; 0x24
 80175ca:	f240 7041 	movw	r0, #1857	; 0x741
 80175ce:	f001 fd29 	bl	8019024 <SUBGRF_WriteRegister>
}
 80175d2:	bf00      	nop
 80175d4:	3708      	adds	r7, #8
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	200018b4 	.word	0x200018b4

080175e0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80175e4:	f001 fe6e 	bl	80192c4 <SUBGRF_GetRadioWakeUpTime>
 80175e8:	4603      	mov	r3, r0
 80175ea:	3303      	adds	r3, #3
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80175f8:	f000 f80e 	bl	8017618 <RadioOnTxTimeoutProcess>
}
 80175fc:	bf00      	nop
 80175fe:	3708      	adds	r7, #8
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}

08017604 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801760c:	f000 f81e 	bl	801764c <RadioOnRxTimeoutProcess>
}
 8017610:	bf00      	nop
 8017612:	3708      	adds	r7, #8
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}

08017618 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017618:	b580      	push	{r7, lr}
 801761a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 801761c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017620:	4808      	ldr	r0, [pc, #32]	; (8017644 <RadioOnTxTimeoutProcess+0x2c>)
 8017622:	f7fe ff62 	bl	80164ea <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017626:	4b08      	ldr	r3, [pc, #32]	; (8017648 <RadioOnTxTimeoutProcess+0x30>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d008      	beq.n	8017640 <RadioOnTxTimeoutProcess+0x28>
 801762e:	4b06      	ldr	r3, [pc, #24]	; (8017648 <RadioOnTxTimeoutProcess+0x30>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	685b      	ldr	r3, [r3, #4]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d003      	beq.n	8017640 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017638:	4b03      	ldr	r3, [pc, #12]	; (8017648 <RadioOnTxTimeoutProcess+0x30>)
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	4798      	blx	r3
    }
}
 8017640:	bf00      	nop
 8017642:	bd80      	pop	{r7, pc}
 8017644:	48000400 	.word	0x48000400
 8017648:	20000fc8 	.word	0x20000fc8

0801764c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801764c:	b580      	push	{r7, lr}
 801764e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017650:	2101      	movs	r1, #1
 8017652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017656:	f7fe ff48 	bl	80164ea <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801765a:	4b07      	ldr	r3, [pc, #28]	; (8017678 <RadioOnRxTimeoutProcess+0x2c>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d008      	beq.n	8017674 <RadioOnRxTimeoutProcess+0x28>
 8017662:	4b05      	ldr	r3, [pc, #20]	; (8017678 <RadioOnRxTimeoutProcess+0x2c>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	68db      	ldr	r3, [r3, #12]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d003      	beq.n	8017674 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 801766c:	4b02      	ldr	r3, [pc, #8]	; (8017678 <RadioOnRxTimeoutProcess+0x2c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	68db      	ldr	r3, [r3, #12]
 8017672:	4798      	blx	r3
    }
}
 8017674:	bf00      	nop
 8017676:	bd80      	pop	{r7, pc}
 8017678:	20000fc8 	.word	0x20000fc8

0801767c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	4603      	mov	r3, r0
 8017684:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017686:	4a05      	ldr	r2, [pc, #20]	; (801769c <RadioOnDioIrq+0x20>)
 8017688:	88fb      	ldrh	r3, [r7, #6]
 801768a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801768e:	f000 f807 	bl	80176a0 <RadioIrqProcess>
}
 8017692:	bf00      	nop
 8017694:	3708      	adds	r7, #8
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
 801769a:	bf00      	nop
 801769c:	200018b4 	.word	0x200018b4

080176a0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80176a0:	b590      	push	{r4, r7, lr}
 80176a2:	b083      	sub	sp, #12
 80176a4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80176a6:	2300      	movs	r3, #0
 80176a8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80176ae:	4bbf      	ldr	r3, [pc, #764]	; (80179ac <RadioIrqProcess+0x30c>)
 80176b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80176b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80176b8:	f000 8116 	beq.w	80178e8 <RadioIrqProcess+0x248>
 80176bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80176c0:	f300 81cb 	bgt.w	8017a5a <RadioIrqProcess+0x3ba>
 80176c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176c8:	f000 80fa 	beq.w	80178c0 <RadioIrqProcess+0x220>
 80176cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80176d0:	f300 81c3 	bgt.w	8017a5a <RadioIrqProcess+0x3ba>
 80176d4:	2b80      	cmp	r3, #128	; 0x80
 80176d6:	f000 80df 	beq.w	8017898 <RadioIrqProcess+0x1f8>
 80176da:	2b80      	cmp	r3, #128	; 0x80
 80176dc:	f300 81bd 	bgt.w	8017a5a <RadioIrqProcess+0x3ba>
 80176e0:	2b20      	cmp	r3, #32
 80176e2:	dc49      	bgt.n	8017778 <RadioIrqProcess+0xd8>
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	f340 81b8 	ble.w	8017a5a <RadioIrqProcess+0x3ba>
 80176ea:	3b01      	subs	r3, #1
 80176ec:	2b1f      	cmp	r3, #31
 80176ee:	f200 81b4 	bhi.w	8017a5a <RadioIrqProcess+0x3ba>
 80176f2:	a201      	add	r2, pc, #4	; (adr r2, 80176f8 <RadioIrqProcess+0x58>)
 80176f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176f8:	08017781 	.word	0x08017781
 80176fc:	080177c5 	.word	0x080177c5
 8017700:	08017a5b 	.word	0x08017a5b
 8017704:	08017975 	.word	0x08017975
 8017708:	08017a5b 	.word	0x08017a5b
 801770c:	08017a5b 	.word	0x08017a5b
 8017710:	08017a5b 	.word	0x08017a5b
 8017714:	08017983 	.word	0x08017983
 8017718:	08017a5b 	.word	0x08017a5b
 801771c:	08017a5b 	.word	0x08017a5b
 8017720:	08017a5b 	.word	0x08017a5b
 8017724:	08017a5b 	.word	0x08017a5b
 8017728:	08017a5b 	.word	0x08017a5b
 801772c:	08017a5b 	.word	0x08017a5b
 8017730:	08017a5b 	.word	0x08017a5b
 8017734:	0801799f 	.word	0x0801799f
 8017738:	08017a5b 	.word	0x08017a5b
 801773c:	08017a5b 	.word	0x08017a5b
 8017740:	08017a5b 	.word	0x08017a5b
 8017744:	08017a5b 	.word	0x08017a5b
 8017748:	08017a5b 	.word	0x08017a5b
 801774c:	08017a5b 	.word	0x08017a5b
 8017750:	08017a5b 	.word	0x08017a5b
 8017754:	08017a5b 	.word	0x08017a5b
 8017758:	08017a5b 	.word	0x08017a5b
 801775c:	08017a5b 	.word	0x08017a5b
 8017760:	08017a5b 	.word	0x08017a5b
 8017764:	08017a5b 	.word	0x08017a5b
 8017768:	08017a5b 	.word	0x08017a5b
 801776c:	08017a5b 	.word	0x08017a5b
 8017770:	08017a5b 	.word	0x08017a5b
 8017774:	080179dd 	.word	0x080179dd
 8017778:	2b40      	cmp	r3, #64	; 0x40
 801777a:	f000 8150 	beq.w	8017a1e <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801777e:	e16c      	b.n	8017a5a <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017784:	488a      	ldr	r0, [pc, #552]	; (80179b0 <RadioIrqProcess+0x310>)
 8017786:	f7fe feb0 	bl	80164ea <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 801778a:	488a      	ldr	r0, [pc, #552]	; (80179b4 <RadioIrqProcess+0x314>)
 801778c:	f002 fe44 	bl	801a418 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017790:	2000      	movs	r0, #0
 8017792:	f000 ff39 	bl	8018608 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8017796:	f001 ff2b 	bl	80195f0 <RFW_Is_LongPacketModeEnabled>
 801779a:	4603      	mov	r3, r0
 801779c:	2b01      	cmp	r3, #1
 801779e:	d101      	bne.n	80177a4 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 80177a0:	f001 ff4f 	bl	8019642 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80177a4:	4b84      	ldr	r3, [pc, #528]	; (80179b8 <RadioIrqProcess+0x318>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f000 8158 	beq.w	8017a5e <RadioIrqProcess+0x3be>
 80177ae:	4b82      	ldr	r3, [pc, #520]	; (80179b8 <RadioIrqProcess+0x318>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	f000 8152 	beq.w	8017a5e <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 80177ba:	4b7f      	ldr	r3, [pc, #508]	; (80179b8 <RadioIrqProcess+0x318>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	4798      	blx	r3
        break;
 80177c2:	e14c      	b.n	8017a5e <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 80177c4:	2101      	movs	r1, #1
 80177c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80177ca:	f7fe fe8e 	bl	80164ea <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80177ce:	487b      	ldr	r0, [pc, #492]	; (80179bc <RadioIrqProcess+0x31c>)
 80177d0:	f002 fe22 	bl	801a418 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80177d4:	4b75      	ldr	r3, [pc, #468]	; (80179ac <RadioIrqProcess+0x30c>)
 80177d6:	785b      	ldrb	r3, [r3, #1]
 80177d8:	f083 0301 	eor.w	r3, r3, #1
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d014      	beq.n	801780c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80177e2:	2000      	movs	r0, #0
 80177e4:	f000 ff10 	bl	8018608 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80177e8:	2100      	movs	r1, #0
 80177ea:	f640 1002 	movw	r0, #2306	; 0x902
 80177ee:	f001 fc19 	bl	8019024 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80177f2:	f640 1044 	movw	r0, #2372	; 0x944
 80177f6:	f001 fc29 	bl	801904c <SUBGRF_ReadRegister>
 80177fa:	4603      	mov	r3, r0
 80177fc:	f043 0302 	orr.w	r3, r3, #2
 8017800:	b2db      	uxtb	r3, r3
 8017802:	4619      	mov	r1, r3
 8017804:	f640 1044 	movw	r0, #2372	; 0x944
 8017808:	f001 fc0c 	bl	8019024 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801780c:	1dfb      	adds	r3, r7, #7
 801780e:	22ff      	movs	r2, #255	; 0xff
 8017810:	4619      	mov	r1, r3
 8017812:	486b      	ldr	r0, [pc, #428]	; (80179c0 <RadioIrqProcess+0x320>)
 8017814:	f000 fdc8 	bl	80183a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8017818:	486a      	ldr	r0, [pc, #424]	; (80179c4 <RadioIrqProcess+0x324>)
 801781a:	f001 fbb1 	bl	8018f80 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801781e:	4b66      	ldr	r3, [pc, #408]	; (80179b8 <RadioIrqProcess+0x318>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d036      	beq.n	8017894 <RadioIrqProcess+0x1f4>
 8017826:	4b64      	ldr	r3, [pc, #400]	; (80179b8 <RadioIrqProcess+0x318>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	689b      	ldr	r3, [r3, #8]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d031      	beq.n	8017894 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017830:	4b5e      	ldr	r3, [pc, #376]	; (80179ac <RadioIrqProcess+0x30c>)
 8017832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017836:	2b01      	cmp	r3, #1
 8017838:	d10e      	bne.n	8017858 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801783a:	4b5f      	ldr	r3, [pc, #380]	; (80179b8 <RadioIrqProcess+0x318>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	689c      	ldr	r4, [r3, #8]
 8017840:	79fb      	ldrb	r3, [r7, #7]
 8017842:	b299      	uxth	r1, r3
 8017844:	4b59      	ldr	r3, [pc, #356]	; (80179ac <RadioIrqProcess+0x30c>)
 8017846:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801784a:	b21a      	sxth	r2, r3
 801784c:	4b57      	ldr	r3, [pc, #348]	; (80179ac <RadioIrqProcess+0x30c>)
 801784e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017852:	485b      	ldr	r0, [pc, #364]	; (80179c0 <RadioIrqProcess+0x320>)
 8017854:	47a0      	blx	r4
                break;
 8017856:	e01e      	b.n	8017896 <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017858:	4b54      	ldr	r3, [pc, #336]	; (80179ac <RadioIrqProcess+0x30c>)
 801785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801785c:	463a      	mov	r2, r7
 801785e:	4611      	mov	r1, r2
 8017860:	4618      	mov	r0, r3
 8017862:	f001 fe11 	bl	8019488 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017866:	4b54      	ldr	r3, [pc, #336]	; (80179b8 <RadioIrqProcess+0x318>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	689c      	ldr	r4, [r3, #8]
 801786c:	79fb      	ldrb	r3, [r7, #7]
 801786e:	b299      	uxth	r1, r3
 8017870:	4b4e      	ldr	r3, [pc, #312]	; (80179ac <RadioIrqProcess+0x30c>)
 8017872:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8017876:	b218      	sxth	r0, r3
 8017878:	683b      	ldr	r3, [r7, #0]
 801787a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801787e:	4a52      	ldr	r2, [pc, #328]	; (80179c8 <RadioIrqProcess+0x328>)
 8017880:	fb82 c203 	smull	ip, r2, r2, r3
 8017884:	1192      	asrs	r2, r2, #6
 8017886:	17db      	asrs	r3, r3, #31
 8017888:	1ad3      	subs	r3, r2, r3
 801788a:	b25b      	sxtb	r3, r3
 801788c:	4602      	mov	r2, r0
 801788e:	484c      	ldr	r0, [pc, #304]	; (80179c0 <RadioIrqProcess+0x320>)
 8017890:	47a0      	blx	r4
                break;
 8017892:	e000      	b.n	8017896 <RadioIrqProcess+0x1f6>
        }
 8017894:	bf00      	nop
        break;
 8017896:	e0ef      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017898:	2000      	movs	r0, #0
 801789a:	f000 feb5 	bl	8018608 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801789e:	4b46      	ldr	r3, [pc, #280]	; (80179b8 <RadioIrqProcess+0x318>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f000 80dd 	beq.w	8017a62 <RadioIrqProcess+0x3c2>
 80178a8:	4b43      	ldr	r3, [pc, #268]	; (80179b8 <RadioIrqProcess+0x318>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	699b      	ldr	r3, [r3, #24]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f000 80d7 	beq.w	8017a62 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 80178b4:	4b40      	ldr	r3, [pc, #256]	; (80179b8 <RadioIrqProcess+0x318>)
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	699b      	ldr	r3, [r3, #24]
 80178ba:	2000      	movs	r0, #0
 80178bc:	4798      	blx	r3
        break;
 80178be:	e0d0      	b.n	8017a62 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 80178c0:	2000      	movs	r0, #0
 80178c2:	f000 fea1 	bl	8018608 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80178c6:	4b3c      	ldr	r3, [pc, #240]	; (80179b8 <RadioIrqProcess+0x318>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f000 80cb 	beq.w	8017a66 <RadioIrqProcess+0x3c6>
 80178d0:	4b39      	ldr	r3, [pc, #228]	; (80179b8 <RadioIrqProcess+0x318>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	699b      	ldr	r3, [r3, #24]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 80c5 	beq.w	8017a66 <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 80178dc:	4b36      	ldr	r3, [pc, #216]	; (80179b8 <RadioIrqProcess+0x318>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	699b      	ldr	r3, [r3, #24]
 80178e2:	2001      	movs	r0, #1
 80178e4:	4798      	blx	r3
        break;
 80178e6:	e0be      	b.n	8017a66 <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80178e8:	4b38      	ldr	r3, [pc, #224]	; (80179cc <RadioIrqProcess+0x32c>)
 80178ea:	2201      	movs	r2, #1
 80178ec:	2100      	movs	r1, #0
 80178ee:	2002      	movs	r0, #2
 80178f0:	f002 ff9c 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80178f4:	f000 fd3e 	bl	8018374 <SUBGRF_GetOperatingMode>
 80178f8:	4603      	mov	r3, r0
 80178fa:	2b04      	cmp	r3, #4
 80178fc:	d11a      	bne.n	8017934 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 80178fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017902:	482b      	ldr	r0, [pc, #172]	; (80179b0 <RadioIrqProcess+0x310>)
 8017904:	f7fe fdf1 	bl	80164ea <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017908:	482a      	ldr	r0, [pc, #168]	; (80179b4 <RadioIrqProcess+0x314>)
 801790a:	f002 fd85 	bl	801a418 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801790e:	2000      	movs	r0, #0
 8017910:	f000 fe7a 	bl	8018608 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017914:	4b28      	ldr	r3, [pc, #160]	; (80179b8 <RadioIrqProcess+0x318>)
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	2b00      	cmp	r3, #0
 801791a:	f000 80a6 	beq.w	8017a6a <RadioIrqProcess+0x3ca>
 801791e:	4b26      	ldr	r3, [pc, #152]	; (80179b8 <RadioIrqProcess+0x318>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	f000 80a0 	beq.w	8017a6a <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 801792a:	4b23      	ldr	r3, [pc, #140]	; (80179b8 <RadioIrqProcess+0x318>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	4798      	blx	r3
        break;
 8017932:	e09a      	b.n	8017a6a <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017934:	f000 fd1e 	bl	8018374 <SUBGRF_GetOperatingMode>
 8017938:	4603      	mov	r3, r0
 801793a:	2b05      	cmp	r3, #5
 801793c:	f040 8095 	bne.w	8017a6a <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017940:	2101      	movs	r1, #1
 8017942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017946:	f7fe fdd0 	bl	80164ea <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 801794a:	481c      	ldr	r0, [pc, #112]	; (80179bc <RadioIrqProcess+0x31c>)
 801794c:	f002 fd64 	bl	801a418 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017950:	2000      	movs	r0, #0
 8017952:	f000 fe59 	bl	8018608 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017956:	4b18      	ldr	r3, [pc, #96]	; (80179b8 <RadioIrqProcess+0x318>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	f000 8085 	beq.w	8017a6a <RadioIrqProcess+0x3ca>
 8017960:	4b15      	ldr	r3, [pc, #84]	; (80179b8 <RadioIrqProcess+0x318>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d07f      	beq.n	8017a6a <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 801796a:	4b13      	ldr	r3, [pc, #76]	; (80179b8 <RadioIrqProcess+0x318>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	68db      	ldr	r3, [r3, #12]
 8017970:	4798      	blx	r3
        break;
 8017972:	e07a      	b.n	8017a6a <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017974:	4b16      	ldr	r3, [pc, #88]	; (80179d0 <RadioIrqProcess+0x330>)
 8017976:	2201      	movs	r2, #1
 8017978:	2100      	movs	r1, #0
 801797a:	2002      	movs	r0, #2
 801797c:	f002 ff56 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017980:	e07a      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017982:	4b14      	ldr	r3, [pc, #80]	; (80179d4 <RadioIrqProcess+0x334>)
 8017984:	2201      	movs	r2, #1
 8017986:	2100      	movs	r1, #0
 8017988:	2002      	movs	r0, #2
 801798a:	f002 ff4f 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801798e:	f001 fe28 	bl	80195e2 <RFW_Is_Init>
 8017992:	4603      	mov	r3, r0
 8017994:	2b01      	cmp	r3, #1
 8017996:	d16a      	bne.n	8017a6e <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017998:	f001 fe59 	bl	801964e <RFW_ReceivePayload>
        break;
 801799c:	e067      	b.n	8017a6e <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801799e:	4b0e      	ldr	r3, [pc, #56]	; (80179d8 <RadioIrqProcess+0x338>)
 80179a0:	2201      	movs	r2, #1
 80179a2:	2100      	movs	r1, #0
 80179a4:	2002      	movs	r0, #2
 80179a6:	f002 ff41 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80179aa:	e065      	b.n	8017a78 <RadioIrqProcess+0x3d8>
 80179ac:	200018b4 	.word	0x200018b4
 80179b0:	48000400 	.word	0x48000400
 80179b4:	2000190c 	.word	0x2000190c
 80179b8:	20000fc8 	.word	0x20000fc8
 80179bc:	20001924 	.word	0x20001924
 80179c0:	20000ec8 	.word	0x20000ec8
 80179c4:	200018d8 	.word	0x200018d8
 80179c8:	10624dd3 	.word	0x10624dd3
 80179cc:	0801b66c 	.word	0x0801b66c
 80179d0:	0801b680 	.word	0x0801b680
 80179d4:	0801b68c 	.word	0x0801b68c
 80179d8:	0801b698 	.word	0x0801b698
        TimerStop( &RxTimeoutTimer );
 80179dc:	4828      	ldr	r0, [pc, #160]	; (8017a80 <RadioIrqProcess+0x3e0>)
 80179de:	f002 fd1b 	bl	801a418 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80179e2:	4b28      	ldr	r3, [pc, #160]	; (8017a84 <RadioIrqProcess+0x3e4>)
 80179e4:	785b      	ldrb	r3, [r3, #1]
 80179e6:	f083 0301 	eor.w	r3, r3, #1
 80179ea:	b2db      	uxtb	r3, r3
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d002      	beq.n	80179f6 <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 80179f0:	2000      	movs	r0, #0
 80179f2:	f000 fe09 	bl	8018608 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80179f6:	4b24      	ldr	r3, [pc, #144]	; (8017a88 <RadioIrqProcess+0x3e8>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d039      	beq.n	8017a72 <RadioIrqProcess+0x3d2>
 80179fe:	4b22      	ldr	r3, [pc, #136]	; (8017a88 <RadioIrqProcess+0x3e8>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d034      	beq.n	8017a72 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017a08:	4b1f      	ldr	r3, [pc, #124]	; (8017a88 <RadioIrqProcess+0x3e8>)
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	68db      	ldr	r3, [r3, #12]
 8017a0e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017a10:	4b1e      	ldr	r3, [pc, #120]	; (8017a8c <RadioIrqProcess+0x3ec>)
 8017a12:	2201      	movs	r2, #1
 8017a14:	2100      	movs	r1, #0
 8017a16:	2002      	movs	r0, #2
 8017a18:	f002 ff08 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a1c:	e029      	b.n	8017a72 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017a1e:	4b1c      	ldr	r3, [pc, #112]	; (8017a90 <RadioIrqProcess+0x3f0>)
 8017a20:	2201      	movs	r2, #1
 8017a22:	2100      	movs	r1, #0
 8017a24:	2002      	movs	r0, #2
 8017a26:	f002 ff01 	bl	801a82c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017a2a:	4b16      	ldr	r3, [pc, #88]	; (8017a84 <RadioIrqProcess+0x3e4>)
 8017a2c:	785b      	ldrb	r3, [r3, #1]
 8017a2e:	f083 0301 	eor.w	r3, r3, #1
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d002      	beq.n	8017a3e <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017a38:	2000      	movs	r0, #0
 8017a3a:	f000 fde5 	bl	8018608 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017a3e:	4b12      	ldr	r3, [pc, #72]	; (8017a88 <RadioIrqProcess+0x3e8>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d017      	beq.n	8017a76 <RadioIrqProcess+0x3d6>
 8017a46:	4b10      	ldr	r3, [pc, #64]	; (8017a88 <RadioIrqProcess+0x3e8>)
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	691b      	ldr	r3, [r3, #16]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d012      	beq.n	8017a76 <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017a50:	4b0d      	ldr	r3, [pc, #52]	; (8017a88 <RadioIrqProcess+0x3e8>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	691b      	ldr	r3, [r3, #16]
 8017a56:	4798      	blx	r3
        break;
 8017a58:	e00d      	b.n	8017a76 <RadioIrqProcess+0x3d6>
        break;
 8017a5a:	bf00      	nop
 8017a5c:	e00c      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a5e:	bf00      	nop
 8017a60:	e00a      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a62:	bf00      	nop
 8017a64:	e008      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a66:	bf00      	nop
 8017a68:	e006      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a6a:	bf00      	nop
 8017a6c:	e004      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a6e:	bf00      	nop
 8017a70:	e002      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a72:	bf00      	nop
 8017a74:	e000      	b.n	8017a78 <RadioIrqProcess+0x3d8>
        break;
 8017a76:	bf00      	nop
  }
}
 8017a78:	bf00      	nop
 8017a7a:	370c      	adds	r7, #12
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd90      	pop	{r4, r7, pc}
 8017a80:	20001924 	.word	0x20001924
 8017a84:	200018b4 	.word	0x200018b4
 8017a88:	20000fc8 	.word	0x20000fc8
 8017a8c:	0801b6a4 	.word	0x0801b6a4
 8017a90:	0801b6b0 	.word	0x0801b6b0

08017a94 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017a98:	4b09      	ldr	r3, [pc, #36]	; (8017ac0 <RadioTxPrbs+0x2c>)
 8017a9a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017a9e:	2101      	movs	r1, #1
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f001 fbb3 	bl	801920c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017aa6:	4b07      	ldr	r3, [pc, #28]	; (8017ac4 <RadioTxPrbs+0x30>)
 8017aa8:	212d      	movs	r1, #45	; 0x2d
 8017aaa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017aae:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017ab0:	f000 fe6d 	bl	801878e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017ab4:	4804      	ldr	r0, [pc, #16]	; (8017ac8 <RadioTxPrbs+0x34>)
 8017ab6:	f000 fdc3 	bl	8018640 <SUBGRF_SetTx>
}
 8017aba:	bf00      	nop
 8017abc:	bd80      	pop	{r7, pc}
 8017abe:	bf00      	nop
 8017ac0:	200018b4 	.word	0x200018b4
 8017ac4:	0801749b 	.word	0x0801749b
 8017ac8:	000fffff 	.word	0x000fffff

08017acc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b084      	sub	sp, #16
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ada:	4618      	mov	r0, r3
 8017adc:	f001 fbbe 	bl	801925c <SUBGRF_SetRfTxPower>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017ae4:	7bfb      	ldrb	r3, [r7, #15]
 8017ae6:	2101      	movs	r1, #1
 8017ae8:	4618      	mov	r0, r3
 8017aea:	f001 fb8f 	bl	801920c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017aee:	f000 fe45 	bl	801877c <SUBGRF_SetTxContinuousWave>
}
 8017af2:	bf00      	nop
 8017af4:	3710      	adds	r7, #16
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}

08017afa <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017afa:	b480      	push	{r7}
 8017afc:	b089      	sub	sp, #36	; 0x24
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	60f8      	str	r0, [r7, #12]
 8017b02:	60b9      	str	r1, [r7, #8]
 8017b04:	4613      	mov	r3, r2
 8017b06:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017b10:	2300      	movs	r3, #0
 8017b12:	61bb      	str	r3, [r7, #24]
 8017b14:	e011      	b.n	8017b3a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	68ba      	ldr	r2, [r7, #8]
 8017b1a:	4413      	add	r3, r2
 8017b1c:	781a      	ldrb	r2, [r3, #0]
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	68b9      	ldr	r1, [r7, #8]
 8017b22:	440b      	add	r3, r1
 8017b24:	43d2      	mvns	r2, r2
 8017b26:	b2d2      	uxtb	r2, r2
 8017b28:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017b2a:	69bb      	ldr	r3, [r7, #24]
 8017b2c:	68fa      	ldr	r2, [r7, #12]
 8017b2e:	4413      	add	r3, r2
 8017b30:	2200      	movs	r2, #0
 8017b32:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017b34:	69bb      	ldr	r3, [r7, #24]
 8017b36:	3301      	adds	r3, #1
 8017b38:	61bb      	str	r3, [r7, #24]
 8017b3a:	79fb      	ldrb	r3, [r7, #7]
 8017b3c:	69ba      	ldr	r2, [r7, #24]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	dbe9      	blt.n	8017b16 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017b42:	2300      	movs	r3, #0
 8017b44:	61bb      	str	r3, [r7, #24]
 8017b46:	e049      	b.n	8017bdc <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017b48:	69bb      	ldr	r3, [r7, #24]
 8017b4a:	425a      	negs	r2, r3
 8017b4c:	f003 0307 	and.w	r3, r3, #7
 8017b50:	f002 0207 	and.w	r2, r2, #7
 8017b54:	bf58      	it	pl
 8017b56:	4253      	negpl	r3, r2
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	f1c3 0307 	rsb	r3, r3, #7
 8017b5e:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017b60:	69bb      	ldr	r3, [r7, #24]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	da00      	bge.n	8017b68 <payload_integration+0x6e>
 8017b66:	3307      	adds	r3, #7
 8017b68:	10db      	asrs	r3, r3, #3
 8017b6a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017b6c:	69bb      	ldr	r3, [r7, #24]
 8017b6e:	3301      	adds	r3, #1
 8017b70:	425a      	negs	r2, r3
 8017b72:	f003 0307 	and.w	r3, r3, #7
 8017b76:	f002 0207 	and.w	r2, r2, #7
 8017b7a:	bf58      	it	pl
 8017b7c:	4253      	negpl	r3, r2
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	f1c3 0307 	rsb	r3, r3, #7
 8017b84:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017b86:	69bb      	ldr	r3, [r7, #24]
 8017b88:	3301      	adds	r3, #1
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	da00      	bge.n	8017b90 <payload_integration+0x96>
 8017b8e:	3307      	adds	r3, #7
 8017b90:	10db      	asrs	r3, r3, #3
 8017b92:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017b94:	7dbb      	ldrb	r3, [r7, #22]
 8017b96:	68ba      	ldr	r2, [r7, #8]
 8017b98:	4413      	add	r3, r2
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	461a      	mov	r2, r3
 8017b9e:	7dfb      	ldrb	r3, [r7, #23]
 8017ba0:	fa42 f303 	asr.w	r3, r2, r3
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	f003 0301 	and.w	r3, r3, #1
 8017baa:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017bac:	7ffa      	ldrb	r2, [r7, #31]
 8017bae:	7cfb      	ldrb	r3, [r7, #19]
 8017bb0:	4053      	eors	r3, r2
 8017bb2:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017bb4:	7d3b      	ldrb	r3, [r7, #20]
 8017bb6:	68fa      	ldr	r2, [r7, #12]
 8017bb8:	4413      	add	r3, r2
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	b25a      	sxtb	r2, r3
 8017bbe:	7ff9      	ldrb	r1, [r7, #31]
 8017bc0:	7d7b      	ldrb	r3, [r7, #21]
 8017bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8017bc6:	b25b      	sxtb	r3, r3
 8017bc8:	4313      	orrs	r3, r2
 8017bca:	b259      	sxtb	r1, r3
 8017bcc:	7d3b      	ldrb	r3, [r7, #20]
 8017bce:	68fa      	ldr	r2, [r7, #12]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	b2ca      	uxtb	r2, r1
 8017bd4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	3301      	adds	r3, #1
 8017bda:	61bb      	str	r3, [r7, #24]
 8017bdc:	79fb      	ldrb	r3, [r7, #7]
 8017bde:	00db      	lsls	r3, r3, #3
 8017be0:	69ba      	ldr	r2, [r7, #24]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	dbb0      	blt.n	8017b48 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017be6:	7ffb      	ldrb	r3, [r7, #31]
 8017be8:	01db      	lsls	r3, r3, #7
 8017bea:	b25a      	sxtb	r2, r3
 8017bec:	7ffb      	ldrb	r3, [r7, #31]
 8017bee:	019b      	lsls	r3, r3, #6
 8017bf0:	b25b      	sxtb	r3, r3
 8017bf2:	4313      	orrs	r3, r2
 8017bf4:	b25b      	sxtb	r3, r3
 8017bf6:	7ffa      	ldrb	r2, [r7, #31]
 8017bf8:	2a00      	cmp	r2, #0
 8017bfa:	d101      	bne.n	8017c00 <payload_integration+0x106>
 8017bfc:	2220      	movs	r2, #32
 8017bfe:	e000      	b.n	8017c02 <payload_integration+0x108>
 8017c00:	2200      	movs	r2, #0
 8017c02:	4313      	orrs	r3, r2
 8017c04:	b259      	sxtb	r1, r3
 8017c06:	79fb      	ldrb	r3, [r7, #7]
 8017c08:	68fa      	ldr	r2, [r7, #12]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	b2ca      	uxtb	r2, r1
 8017c0e:	701a      	strb	r2, [r3, #0]
}
 8017c10:	bf00      	nop
 8017c12:	3724      	adds	r7, #36	; 0x24
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bc80      	pop	{r7}
 8017c18:	4770      	bx	lr
	...

08017c1c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b08c      	sub	sp, #48	; 0x30
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	60b9      	str	r1, [r7, #8]
 8017c24:	607a      	str	r2, [r7, #4]
 8017c26:	603b      	str	r3, [r7, #0]
 8017c28:	4603      	mov	r3, r0
 8017c2a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017c30:	2300      	movs	r3, #0
 8017c32:	61fb      	str	r3, [r7, #28]
 8017c34:	2300      	movs	r3, #0
 8017c36:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017c38:	f001 fccd 	bl	80195d6 <RFW_DeInit>

    if( rxContinuous != 0 )
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d001      	beq.n	8017c46 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017c42:	2300      	movs	r3, #0
 8017c44:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	bf14      	ite	ne
 8017c4c:	2301      	movne	r3, #1
 8017c4e:	2300      	moveq	r3, #0
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	4ba9      	ldr	r3, [pc, #676]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017c54:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017c56:	7bfb      	ldrb	r3, [r7, #15]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d003      	beq.n	8017c64 <RadioSetRxGenericConfig+0x48>
 8017c5c:	2b01      	cmp	r3, #1
 8017c5e:	f000 80e8 	beq.w	8017e32 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017c62:	e1a0      	b.n	8017fa6 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	68db      	ldr	r3, [r3, #12]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d003      	beq.n	8017c74 <RadioSetRxGenericConfig+0x58>
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	691b      	ldr	r3, [r3, #16]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d102      	bne.n	8017c7a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017c74:	f04f 33ff 	mov.w	r3, #4294967295
 8017c78:	e196      	b.n	8017fa8 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017c7a:	68bb      	ldr	r3, [r7, #8]
 8017c7c:	7d5b      	ldrb	r3, [r3, #21]
 8017c7e:	2b08      	cmp	r3, #8
 8017c80:	d902      	bls.n	8017c88 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017c82:	f04f 33ff 	mov.w	r3, #4294967295
 8017c86:	e18f      	b.n	8017fa8 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017c88:	2300      	movs	r3, #0
 8017c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c8c:	e00d      	b.n	8017caa <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	699a      	ldr	r2, [r3, #24]
 8017c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c94:	4413      	add	r3, r2
 8017c96:	7819      	ldrb	r1, [r3, #0]
 8017c98:	f107 021c 	add.w	r2, r7, #28
 8017c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c9e:	4413      	add	r3, r2
 8017ca0:	460a      	mov	r2, r1
 8017ca2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	7d5b      	ldrb	r3, [r3, #21]
 8017cae:	461a      	mov	r2, r3
 8017cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	dbeb      	blt.n	8017c8e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	bf14      	ite	ne
 8017cbe:	2301      	movne	r3, #1
 8017cc0:	2300      	moveq	r3, #0
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f000 fd6b 	bl	80187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017cca:	4b8b      	ldr	r3, [pc, #556]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ccc:	2200      	movs	r2, #0
 8017cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	68db      	ldr	r3, [r3, #12]
 8017cd6:	4a88      	ldr	r2, [pc, #544]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017cd8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	791a      	ldrb	r2, [r3, #4]
 8017cde:	4b86      	ldr	r3, [pc, #536]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017ce4:	68bb      	ldr	r3, [r7, #8]
 8017ce6:	689b      	ldr	r3, [r3, #8]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f001 fba5 	bl	8019438 <SUBGRF_GetFskBandwidthRegValue>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	4b81      	ldr	r3, [pc, #516]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017cf8:	4b7f      	ldr	r3, [pc, #508]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	691b      	ldr	r3, [r3, #16]
 8017d02:	b29b      	uxth	r3, r3
 8017d04:	00db      	lsls	r3, r3, #3
 8017d06:	b29a      	uxth	r2, r3
 8017d08:	4b7b      	ldr	r3, [pc, #492]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d0a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	7d1a      	ldrb	r2, [r3, #20]
 8017d10:	4b79      	ldr	r3, [pc, #484]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d12:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017d14:	68bb      	ldr	r3, [r7, #8]
 8017d16:	7d5b      	ldrb	r3, [r3, #21]
 8017d18:	00db      	lsls	r3, r3, #3
 8017d1a:	b2da      	uxtb	r2, r3
 8017d1c:	4b76      	ldr	r3, [pc, #472]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d1e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017d26:	4b74      	ldr	r3, [pc, #464]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d28:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d105      	bne.n	8017d40 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	69db      	ldr	r3, [r3, #28]
 8017d38:	b2da      	uxtb	r2, r3
 8017d3a:	4b6f      	ldr	r3, [pc, #444]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d3c:	759a      	strb	r2, [r3, #22]
 8017d3e:	e00b      	b.n	8017d58 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d46:	2b02      	cmp	r3, #2
 8017d48:	d103      	bne.n	8017d52 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017d4a:	4b6b      	ldr	r3, [pc, #428]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d4c:	22ff      	movs	r2, #255	; 0xff
 8017d4e:	759a      	strb	r2, [r3, #22]
 8017d50:	e002      	b.n	8017d58 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017d52:	4b69      	ldr	r3, [pc, #420]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017d54:	22ff      	movs	r2, #255	; 0xff
 8017d56:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017d5e:	2b02      	cmp	r3, #2
 8017d60:	d004      	beq.n	8017d6c <RadioSetRxGenericConfig+0x150>
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017d68:	2b02      	cmp	r3, #2
 8017d6a:	d12d      	bne.n	8017dc8 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017d6c:	68bb      	ldr	r3, [r7, #8]
 8017d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d72:	2bf1      	cmp	r3, #241	; 0xf1
 8017d74:	d00c      	beq.n	8017d90 <RadioSetRxGenericConfig+0x174>
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d7c:	2bf2      	cmp	r3, #242	; 0xf2
 8017d7e:	d007      	beq.n	8017d90 <RadioSetRxGenericConfig+0x174>
 8017d80:	68bb      	ldr	r3, [r7, #8]
 8017d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017d86:	2b01      	cmp	r3, #1
 8017d88:	d002      	beq.n	8017d90 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d8e:	e10b      	b.n	8017fa8 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017d90:	2300      	movs	r3, #0
 8017d92:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017d98:	4b58      	ldr	r3, [pc, #352]	; (8017efc <RadioSetRxGenericConfig+0x2e0>)
 8017d9a:	6819      	ldr	r1, [r3, #0]
 8017d9c:	f107 0310 	add.w	r3, r7, #16
 8017da0:	4a57      	ldr	r2, [pc, #348]	; (8017f00 <RadioSetRxGenericConfig+0x2e4>)
 8017da2:	4618      	mov	r0, r3
 8017da4:	f001 fc0a 	bl	80195bc <RFW_Init>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d002      	beq.n	8017db4 <RadioSetRxGenericConfig+0x198>
            return -1;
 8017dae:	f04f 33ff 	mov.w	r3, #4294967295
 8017db2:	e0f9      	b.n	8017fa8 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017db4:	4b50      	ldr	r3, [pc, #320]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017db6:	2200      	movs	r2, #0
 8017db8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017dba:	4b4f      	ldr	r3, [pc, #316]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017dbc:	2201      	movs	r2, #1
 8017dbe:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017dc0:	4b4d      	ldr	r3, [pc, #308]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	755a      	strb	r2, [r3, #21]
        {
 8017dc6:	e00e      	b.n	8017de6 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017dce:	4b4a      	ldr	r3, [pc, #296]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017dd0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017dd8:	4b47      	ldr	r3, [pc, #284]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017dda:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017de2:	4b45      	ldr	r3, [pc, #276]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017de4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017de6:	f7ff fa6c 	bl	80172c2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017dea:	2000      	movs	r0, #0
 8017dec:	f7fe fbf8 	bl	80165e0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017df0:	4844      	ldr	r0, [pc, #272]	; (8017f04 <RadioSetRxGenericConfig+0x2e8>)
 8017df2:	f000 ff03 	bl	8018bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017df6:	4844      	ldr	r0, [pc, #272]	; (8017f08 <RadioSetRxGenericConfig+0x2ec>)
 8017df8:	f000 ffcc 	bl	8018d94 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017dfc:	f107 031c 	add.w	r3, r7, #28
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 fb06 	bl	8018412 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	8c1b      	ldrh	r3, [r3, #32]
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f000 fb50 	bl	80184b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017e10:	68bb      	ldr	r3, [r7, #8]
 8017e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017e14:	4618      	mov	r0, r3
 8017e16:	f000 fb2b 	bl	8018470 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017e1a:	683b      	ldr	r3, [r7, #0]
 8017e1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e20:	fb02 f203 	mul.w	r2, r2, r3
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	68db      	ldr	r3, [r3, #12]
 8017e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e2c:	4a32      	ldr	r2, [pc, #200]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017e2e:	6093      	str	r3, [r2, #8]
        break;
 8017e30:	e0b9      	b.n	8017fa6 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d102      	bne.n	8017e40 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e3e:	e0b3      	b.n	8017fa8 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017e46:	2b01      	cmp	r3, #1
 8017e48:	d104      	bne.n	8017e54 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	69db      	ldr	r3, [r3, #28]
 8017e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017e52:	e002      	b.n	8017e5a <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017e54:	23ff      	movs	r3, #255	; 0xff
 8017e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017e5a:	68bb      	ldr	r3, [r7, #8]
 8017e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	bf14      	ite	ne
 8017e62:	2301      	movne	r3, #1
 8017e64:	2300      	moveq	r3, #0
 8017e66:	b2db      	uxtb	r3, r3
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f000 fc99 	bl	80187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	b2db      	uxtb	r3, r3
 8017e72:	4618      	mov	r0, r3
 8017e74:	f000 fca3 	bl	80187be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017e78:	4b1f      	ldr	r3, [pc, #124]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017e7a:	2201      	movs	r2, #1
 8017e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017e86:	4b1c      	ldr	r3, [pc, #112]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017e92:	4b19      	ldr	r3, [pc, #100]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017e9e:	4b16      	ldr	r3, [pc, #88]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ea0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017eaa:	2b02      	cmp	r3, #2
 8017eac:	d010      	beq.n	8017ed0 <RadioSetRxGenericConfig+0x2b4>
 8017eae:	2b02      	cmp	r3, #2
 8017eb0:	dc2c      	bgt.n	8017f0c <RadioSetRxGenericConfig+0x2f0>
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d002      	beq.n	8017ebc <RadioSetRxGenericConfig+0x2a0>
 8017eb6:	2b01      	cmp	r3, #1
 8017eb8:	d005      	beq.n	8017ec6 <RadioSetRxGenericConfig+0x2aa>
            break;
 8017eba:	e027      	b.n	8017f0c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017ebc:	4b0e      	ldr	r3, [pc, #56]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017ec4:	e023      	b.n	8017f0e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017ec6:	4b0c      	ldr	r3, [pc, #48]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ec8:	2201      	movs	r2, #1
 8017eca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017ece:	e01e      	b.n	8017f0e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ed6:	2b0b      	cmp	r3, #11
 8017ed8:	d004      	beq.n	8017ee4 <RadioSetRxGenericConfig+0x2c8>
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ee0:	2b0c      	cmp	r3, #12
 8017ee2:	d104      	bne.n	8017eee <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017ee4:	4b04      	ldr	r3, [pc, #16]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017eec:	e00f      	b.n	8017f0e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017eee:	4b02      	ldr	r3, [pc, #8]	; (8017ef8 <RadioSetRxGenericConfig+0x2dc>)
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017ef6:	e00a      	b.n	8017f0e <RadioSetRxGenericConfig+0x2f2>
 8017ef8:	200018b4 	.word	0x200018b4
 8017efc:	20000fc8 	.word	0x20000fc8
 8017f00:	20001924 	.word	0x20001924
 8017f04:	200018ec 	.word	0x200018ec
 8017f08:	200018c2 	.word	0x200018c2
            break;
 8017f0c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017f0e:	4b28      	ldr	r3, [pc, #160]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f10:	2201      	movs	r2, #1
 8017f12:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017f18:	4b25      	ldr	r3, [pc, #148]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f1a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017f22:	4b23      	ldr	r3, [pc, #140]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f24:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017f26:	4a22      	ldr	r2, [pc, #136]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017f2c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017f34:	4b1e      	ldr	r3, [pc, #120]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f36:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017f40:	4b1b      	ldr	r3, [pc, #108]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017f46:	f7ff f9bc 	bl	80172c2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8017f4a:	2001      	movs	r0, #1
 8017f4c:	f7fe fb48 	bl	80165e0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f50:	4818      	ldr	r0, [pc, #96]	; (8017fb4 <RadioSetRxGenericConfig+0x398>)
 8017f52:	f000 fe53 	bl	8018bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f56:	4818      	ldr	r0, [pc, #96]	; (8017fb8 <RadioSetRxGenericConfig+0x39c>)
 8017f58:	f000 ff1c 	bl	8018d94 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017f5c:	4b14      	ldr	r3, [pc, #80]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8017f62:	2b01      	cmp	r3, #1
 8017f64:	d10d      	bne.n	8017f82 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8017f66:	f240 7036 	movw	r0, #1846	; 0x736
 8017f6a:	f001 f86f 	bl	801904c <SUBGRF_ReadRegister>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	f023 0304 	bic.w	r3, r3, #4
 8017f74:	b2db      	uxtb	r3, r3
 8017f76:	4619      	mov	r1, r3
 8017f78:	f240 7036 	movw	r0, #1846	; 0x736
 8017f7c:	f001 f852 	bl	8019024 <SUBGRF_WriteRegister>
 8017f80:	e00c      	b.n	8017f9c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8017f82:	f240 7036 	movw	r0, #1846	; 0x736
 8017f86:	f001 f861 	bl	801904c <SUBGRF_ReadRegister>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	f043 0304 	orr.w	r3, r3, #4
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	4619      	mov	r1, r3
 8017f94:	f240 7036 	movw	r0, #1846	; 0x736
 8017f98:	f001 f844 	bl	8019024 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8017f9c:	4b04      	ldr	r3, [pc, #16]	; (8017fb0 <RadioSetRxGenericConfig+0x394>)
 8017f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fa2:	609a      	str	r2, [r3, #8]
        break;
 8017fa4:	bf00      	nop
    }
    return status;
 8017fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3730      	adds	r7, #48	; 0x30
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	200018b4 	.word	0x200018b4
 8017fb4:	200018ec 	.word	0x200018ec
 8017fb8:	200018c2 	.word	0x200018c2

08017fbc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b08a      	sub	sp, #40	; 0x28
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	60b9      	str	r1, [r7, #8]
 8017fc4:	607b      	str	r3, [r7, #4]
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	73fb      	strb	r3, [r7, #15]
 8017fca:	4613      	mov	r3, r2
 8017fcc:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8017fce:	2300      	movs	r3, #0
 8017fd0:	61fb      	str	r3, [r7, #28]
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017fd6:	f001 fafe 	bl	80195d6 <RFW_DeInit>
    switch( modem )
 8017fda:	7bfb      	ldrb	r3, [r7, #15]
 8017fdc:	2b02      	cmp	r3, #2
 8017fde:	f000 8144 	beq.w	801826a <RadioSetTxGenericConfig+0x2ae>
 8017fe2:	2b02      	cmp	r3, #2
 8017fe4:	f300 8160 	bgt.w	80182a8 <RadioSetTxGenericConfig+0x2ec>
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d003      	beq.n	8017ff4 <RadioSetTxGenericConfig+0x38>
 8017fec:	2b01      	cmp	r3, #1
 8017fee:	f000 80b7 	beq.w	8018160 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8017ff2:	e159      	b.n	80182a8 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017ff4:	68bb      	ldr	r3, [r7, #8]
 8017ff6:	689b      	ldr	r3, [r3, #8]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d003      	beq.n	8018004 <RadioSetTxGenericConfig+0x48>
 8017ffc:	68bb      	ldr	r3, [r7, #8]
 8017ffe:	691b      	ldr	r3, [r3, #16]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d102      	bne.n	801800a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8018004:	f04f 33ff 	mov.w	r3, #4294967295
 8018008:	e163      	b.n	80182d2 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	7d1b      	ldrb	r3, [r3, #20]
 801800e:	2b08      	cmp	r3, #8
 8018010:	d902      	bls.n	8018018 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8018012:	f04f 33ff 	mov.w	r3, #4294967295
 8018016:	e15c      	b.n	80182d2 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018018:	2300      	movs	r3, #0
 801801a:	627b      	str	r3, [r7, #36]	; 0x24
 801801c:	e00d      	b.n	801803a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	699a      	ldr	r2, [r3, #24]
 8018022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018024:	4413      	add	r3, r2
 8018026:	7819      	ldrb	r1, [r3, #0]
 8018028:	f107 021c 	add.w	r2, r7, #28
 801802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802e:	4413      	add	r3, r2
 8018030:	460a      	mov	r2, r1
 8018032:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	3301      	adds	r3, #1
 8018038:	627b      	str	r3, [r7, #36]	; 0x24
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	7d1b      	ldrb	r3, [r3, #20]
 801803e:	461a      	mov	r2, r3
 8018040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018042:	4293      	cmp	r3, r2
 8018044:	dbeb      	blt.n	801801e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018046:	4ba5      	ldr	r3, [pc, #660]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018048:	2200      	movs	r2, #0
 801804a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801804e:	68bb      	ldr	r3, [r7, #8]
 8018050:	689b      	ldr	r3, [r3, #8]
 8018052:	4aa2      	ldr	r2, [pc, #648]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018054:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	781a      	ldrb	r2, [r3, #0]
 801805a:	4ba0      	ldr	r3, [pc, #640]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801805c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018060:	68bb      	ldr	r3, [r7, #8]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	4618      	mov	r0, r3
 8018066:	f001 f9e7 	bl	8019438 <SUBGRF_GetFskBandwidthRegValue>
 801806a:	4603      	mov	r3, r0
 801806c:	461a      	mov	r2, r3
 801806e:	4b9b      	ldr	r3, [pc, #620]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	4a98      	ldr	r2, [pc, #608]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801807a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801807c:	4b97      	ldr	r3, [pc, #604]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801807e:	2200      	movs	r2, #0
 8018080:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	691b      	ldr	r3, [r3, #16]
 8018086:	b29b      	uxth	r3, r3
 8018088:	00db      	lsls	r3, r3, #3
 801808a:	b29a      	uxth	r2, r3
 801808c:	4b93      	ldr	r3, [pc, #588]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801808e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018090:	4b92      	ldr	r3, [pc, #584]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018092:	2204      	movs	r2, #4
 8018094:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	7d1b      	ldrb	r3, [r3, #20]
 801809a:	00db      	lsls	r3, r3, #3
 801809c:	b2da      	uxtb	r2, r3
 801809e:	4b8f      	ldr	r3, [pc, #572]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80180a0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80180a2:	4b8e      	ldr	r3, [pc, #568]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80180ae:	2b02      	cmp	r3, #2
 80180b0:	d003      	beq.n	80180ba <RadioSetTxGenericConfig+0xfe>
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	7f9b      	ldrb	r3, [r3, #30]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	d12a      	bne.n	8018110 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	7fdb      	ldrb	r3, [r3, #31]
 80180be:	2bf1      	cmp	r3, #241	; 0xf1
 80180c0:	d00a      	beq.n	80180d8 <RadioSetTxGenericConfig+0x11c>
 80180c2:	68bb      	ldr	r3, [r7, #8]
 80180c4:	7fdb      	ldrb	r3, [r3, #31]
 80180c6:	2bf2      	cmp	r3, #242	; 0xf2
 80180c8:	d006      	beq.n	80180d8 <RadioSetTxGenericConfig+0x11c>
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	7fdb      	ldrb	r3, [r3, #31]
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d002      	beq.n	80180d8 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80180d2:	f04f 33ff 	mov.w	r3, #4294967295
 80180d6:	e0fc      	b.n	80182d2 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80180d8:	2301      	movs	r3, #1
 80180da:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80180e0:	4b7f      	ldr	r3, [pc, #508]	; (80182e0 <RadioSetTxGenericConfig+0x324>)
 80180e2:	6819      	ldr	r1, [r3, #0]
 80180e4:	f107 0310 	add.w	r3, r7, #16
 80180e8:	4a7e      	ldr	r2, [pc, #504]	; (80182e4 <RadioSetTxGenericConfig+0x328>)
 80180ea:	4618      	mov	r0, r3
 80180ec:	f001 fa66 	bl	80195bc <RFW_Init>
 80180f0:	4603      	mov	r3, r0
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d002      	beq.n	80180fc <RadioSetTxGenericConfig+0x140>
              return -1;
 80180f6:	f04f 33ff 	mov.w	r3, #4294967295
 80180fa:	e0ea      	b.n	80182d2 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80180fc:	4b77      	ldr	r3, [pc, #476]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80180fe:	2200      	movs	r2, #0
 8018100:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8018102:	4b76      	ldr	r3, [pc, #472]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018104:	2201      	movs	r2, #1
 8018106:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018108:	4b74      	ldr	r3, [pc, #464]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801810a:	2200      	movs	r2, #0
 801810c:	755a      	strb	r2, [r3, #21]
        {
 801810e:	e00c      	b.n	801812a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	7fda      	ldrb	r2, [r3, #31]
 8018114:	4b71      	ldr	r3, [pc, #452]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018116:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801811e:	4b6f      	ldr	r3, [pc, #444]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018120:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	7f9a      	ldrb	r2, [r3, #30]
 8018126:	4b6d      	ldr	r3, [pc, #436]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018128:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801812a:	f7ff f8ca 	bl	80172c2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801812e:	2000      	movs	r0, #0
 8018130:	f7fe fa56 	bl	80165e0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018134:	486c      	ldr	r0, [pc, #432]	; (80182e8 <RadioSetTxGenericConfig+0x32c>)
 8018136:	f000 fd61 	bl	8018bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801813a:	486c      	ldr	r0, [pc, #432]	; (80182ec <RadioSetTxGenericConfig+0x330>)
 801813c:	f000 fe2a 	bl	8018d94 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018140:	f107 031c 	add.w	r3, r7, #28
 8018144:	4618      	mov	r0, r3
 8018146:	f000 f964 	bl	8018412 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	8b9b      	ldrh	r3, [r3, #28]
 801814e:	4618      	mov	r0, r3
 8018150:	f000 f9ae 	bl	80184b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	8c1b      	ldrh	r3, [r3, #32]
 8018158:	4618      	mov	r0, r3
 801815a:	f000 f989 	bl	8018470 <SUBGRF_SetCrcPolynomial>
        break;
 801815e:	e0a4      	b.n	80182aa <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018160:	4b5e      	ldr	r3, [pc, #376]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018162:	2201      	movs	r2, #1
 8018164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801816e:	4b5b      	ldr	r3, [pc, #364]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801817a:	4b58      	ldr	r3, [pc, #352]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801817c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018186:	4b55      	ldr	r3, [pc, #340]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018188:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018192:	2b02      	cmp	r3, #2
 8018194:	d010      	beq.n	80181b8 <RadioSetTxGenericConfig+0x1fc>
 8018196:	2b02      	cmp	r3, #2
 8018198:	dc22      	bgt.n	80181e0 <RadioSetTxGenericConfig+0x224>
 801819a:	2b00      	cmp	r3, #0
 801819c:	d002      	beq.n	80181a4 <RadioSetTxGenericConfig+0x1e8>
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d005      	beq.n	80181ae <RadioSetTxGenericConfig+0x1f2>
            break;
 80181a2:	e01d      	b.n	80181e0 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181a4:	4b4d      	ldr	r3, [pc, #308]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181a6:	2200      	movs	r2, #0
 80181a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181ac:	e019      	b.n	80181e2 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80181ae:	4b4b      	ldr	r3, [pc, #300]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181b0:	2201      	movs	r2, #1
 80181b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181b6:	e014      	b.n	80181e2 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80181b8:	68bb      	ldr	r3, [r7, #8]
 80181ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181be:	2b0b      	cmp	r3, #11
 80181c0:	d004      	beq.n	80181cc <RadioSetTxGenericConfig+0x210>
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181c8:	2b0c      	cmp	r3, #12
 80181ca:	d104      	bne.n	80181d6 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80181cc:	4b43      	ldr	r3, [pc, #268]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181ce:	2201      	movs	r2, #1
 80181d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181d4:	e005      	b.n	80181e2 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181d6:	4b41      	ldr	r3, [pc, #260]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181d8:	2200      	movs	r2, #0
 80181da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80181de:	e000      	b.n	80181e2 <RadioSetTxGenericConfig+0x226>
            break;
 80181e0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80181e2:	4b3e      	ldr	r3, [pc, #248]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181e4:	2201      	movs	r2, #1
 80181e6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80181ec:	4b3b      	ldr	r3, [pc, #236]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181ee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80181f6:	4b39      	ldr	r3, [pc, #228]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80181f8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80181fa:	68bb      	ldr	r3, [r7, #8]
 80181fc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018200:	4b36      	ldr	r3, [pc, #216]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018202:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801820c:	4b33      	ldr	r3, [pc, #204]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801820e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8018212:	f7ff f856 	bl	80172c2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018216:	2001      	movs	r0, #1
 8018218:	f7fe f9e2 	bl	80165e0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801821c:	4832      	ldr	r0, [pc, #200]	; (80182e8 <RadioSetTxGenericConfig+0x32c>)
 801821e:	f000 fced 	bl	8018bfc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018222:	4832      	ldr	r0, [pc, #200]	; (80182ec <RadioSetTxGenericConfig+0x330>)
 8018224:	f000 fdb6 	bl	8018d94 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8018228:	4b2c      	ldr	r3, [pc, #176]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801822a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801822e:	2b06      	cmp	r3, #6
 8018230:	d10d      	bne.n	801824e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018232:	f640 0089 	movw	r0, #2185	; 0x889
 8018236:	f000 ff09 	bl	801904c <SUBGRF_ReadRegister>
 801823a:	4603      	mov	r3, r0
 801823c:	f023 0304 	bic.w	r3, r3, #4
 8018240:	b2db      	uxtb	r3, r3
 8018242:	4619      	mov	r1, r3
 8018244:	f640 0089 	movw	r0, #2185	; 0x889
 8018248:	f000 feec 	bl	8019024 <SUBGRF_WriteRegister>
        break;
 801824c:	e02d      	b.n	80182aa <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801824e:	f640 0089 	movw	r0, #2185	; 0x889
 8018252:	f000 fefb 	bl	801904c <SUBGRF_ReadRegister>
 8018256:	4603      	mov	r3, r0
 8018258:	f043 0304 	orr.w	r3, r3, #4
 801825c:	b2db      	uxtb	r3, r3
 801825e:	4619      	mov	r1, r3
 8018260:	f640 0089 	movw	r0, #2185	; 0x889
 8018264:	f000 fede 	bl	8019024 <SUBGRF_WriteRegister>
        break;
 8018268:	e01f      	b.n	80182aa <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801826e:	2b00      	cmp	r3, #0
 8018270:	d004      	beq.n	801827c <RadioSetTxGenericConfig+0x2c0>
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801827a:	d902      	bls.n	8018282 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801827c:	f04f 33ff 	mov.w	r3, #4294967295
 8018280:	e027      	b.n	80182d2 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8018282:	2002      	movs	r0, #2
 8018284:	f7fe f9ac 	bl	80165e0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018288:	4b14      	ldr	r3, [pc, #80]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801828a:	2202      	movs	r2, #2
 801828c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018294:	4a11      	ldr	r2, [pc, #68]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 8018296:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018298:	4b10      	ldr	r3, [pc, #64]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 801829a:	2216      	movs	r2, #22
 801829c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182a0:	4811      	ldr	r0, [pc, #68]	; (80182e8 <RadioSetTxGenericConfig+0x32c>)
 80182a2:	f000 fcab 	bl	8018bfc <SUBGRF_SetModulationParams>
        break;
 80182a6:	e000      	b.n	80182aa <RadioSetTxGenericConfig+0x2ee>
        break;
 80182a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80182aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f000 ffd4 	bl	801925c <SUBGRF_SetRfTxPower>
 80182b4:	4603      	mov	r3, r0
 80182b6:	461a      	mov	r2, r3
 80182b8:	4b08      	ldr	r3, [pc, #32]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80182ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80182be:	4b07      	ldr	r3, [pc, #28]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80182c0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80182c4:	4618      	mov	r0, r3
 80182c6:	f001 f99a 	bl	80195fe <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80182ca:	4a04      	ldr	r2, [pc, #16]	; (80182dc <RadioSetTxGenericConfig+0x320>)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6053      	str	r3, [r2, #4]
    return 0;
 80182d0:	2300      	movs	r3, #0
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3728      	adds	r7, #40	; 0x28
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	200018b4 	.word	0x200018b4
 80182e0:	20000fc8 	.word	0x20000fc8
 80182e4:	2000190c 	.word	0x2000190c
 80182e8:	200018ec 	.word	0x200018ec
 80182ec:	200018c2 	.word	0x200018c2

080182f0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b084      	sub	sp, #16
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d002      	beq.n	8018304 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80182fe:	4a1a      	ldr	r2, [pc, #104]	; (8018368 <SUBGRF_Init+0x78>)
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018304:	f7e9 fa9c 	bl	8001840 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018308:	2002      	movs	r0, #2
 801830a:	f001 f873 	bl	80193f4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801830e:	4b17      	ldr	r3, [pc, #92]	; (801836c <SUBGRF_Init+0x7c>)
 8018310:	2200      	movs	r2, #0
 8018312:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018314:	2000      	movs	r0, #0
 8018316:	f000 f977 	bl	8018608 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801831a:	f7f2 fb25 	bl	800a968 <RBI_IsTCXO>
 801831e:	4603      	mov	r3, r0
 8018320:	2b01      	cmp	r3, #1
 8018322:	d10e      	bne.n	8018342 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018324:	2140      	movs	r1, #64	; 0x40
 8018326:	2001      	movs	r0, #1
 8018328:	f000 fb78 	bl	8018a1c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801832c:	2100      	movs	r1, #0
 801832e:	f640 1011 	movw	r0, #2321	; 0x911
 8018332:	f000 fe77 	bl	8019024 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018336:	237f      	movs	r3, #127	; 0x7f
 8018338:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801833a:	7b38      	ldrb	r0, [r7, #12]
 801833c:	f000 fa85 	bl	801884a <SUBGRF_Calibrate>
 8018340:	e009      	b.n	8018356 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018342:	2120      	movs	r1, #32
 8018344:	f640 1011 	movw	r0, #2321	; 0x911
 8018348:	f000 fe6c 	bl	8019024 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801834c:	2120      	movs	r1, #32
 801834e:	f640 1012 	movw	r0, #2322	; 0x912
 8018352:	f000 fe67 	bl	8019024 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018356:	f7f2 faeb 	bl	800a930 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801835a:	4b05      	ldr	r3, [pc, #20]	; (8018370 <SUBGRF_Init+0x80>)
 801835c:	2201      	movs	r2, #1
 801835e:	701a      	strb	r2, [r3, #0]
}
 8018360:	bf00      	nop
 8018362:	3710      	adds	r7, #16
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	20000fd8 	.word	0x20000fd8
 801836c:	20000fd4 	.word	0x20000fd4
 8018370:	20000fcc 	.word	0x20000fcc

08018374 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018374:	b480      	push	{r7}
 8018376:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018378:	4b02      	ldr	r3, [pc, #8]	; (8018384 <SUBGRF_GetOperatingMode+0x10>)
 801837a:	781b      	ldrb	r3, [r3, #0]
}
 801837c:	4618      	mov	r0, r3
 801837e:	46bd      	mov	sp, r7
 8018380:	bc80      	pop	{r7}
 8018382:	4770      	bx	lr
 8018384:	20000fcc 	.word	0x20000fcc

08018388 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b082      	sub	sp, #8
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	460b      	mov	r3, r1
 8018392:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018394:	78fb      	ldrb	r3, [r7, #3]
 8018396:	461a      	mov	r2, r3
 8018398:	6879      	ldr	r1, [r7, #4]
 801839a:	2000      	movs	r0, #0
 801839c:	f000 feae 	bl	80190fc <SUBGRF_WriteBuffer>
}
 80183a0:	bf00      	nop
 80183a2:	3708      	adds	r7, #8
 80183a4:	46bd      	mov	sp, r7
 80183a6:	bd80      	pop	{r7, pc}

080183a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b086      	sub	sp, #24
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	60f8      	str	r0, [r7, #12]
 80183b0:	60b9      	str	r1, [r7, #8]
 80183b2:	4613      	mov	r3, r2
 80183b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80183ba:	f107 0317 	add.w	r3, r7, #23
 80183be:	4619      	mov	r1, r3
 80183c0:	68b8      	ldr	r0, [r7, #8]
 80183c2:	f000 fdb1 	bl	8018f28 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	781b      	ldrb	r3, [r3, #0]
 80183ca:	79fa      	ldrb	r2, [r7, #7]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d201      	bcs.n	80183d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80183d0:	2301      	movs	r3, #1
 80183d2:	e007      	b.n	80183e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80183d4:	7df8      	ldrb	r0, [r7, #23]
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	461a      	mov	r2, r3
 80183dc:	68f9      	ldr	r1, [r7, #12]
 80183de:	f000 feaf 	bl	8019140 <SUBGRF_ReadBuffer>

    return 0;
 80183e2:	2300      	movs	r3, #0
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}

080183ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b084      	sub	sp, #16
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	60f8      	str	r0, [r7, #12]
 80183f4:	460b      	mov	r3, r1
 80183f6:	607a      	str	r2, [r7, #4]
 80183f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80183fa:	7afb      	ldrb	r3, [r7, #11]
 80183fc:	4619      	mov	r1, r3
 80183fe:	68f8      	ldr	r0, [r7, #12]
 8018400:	f7ff ffc2 	bl	8018388 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f000 f91b 	bl	8018640 <SUBGRF_SetTx>
}
 801840a:	bf00      	nop
 801840c:	3710      	adds	r7, #16
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}

08018412 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018412:	b580      	push	{r7, lr}
 8018414:	b082      	sub	sp, #8
 8018416:	af00      	add	r7, sp, #0
 8018418:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801841a:	2208      	movs	r2, #8
 801841c:	6879      	ldr	r1, [r7, #4]
 801841e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8018422:	f000 fe27 	bl	8019074 <SUBGRF_WriteRegisters>
    return 0;
 8018426:	2300      	movs	r3, #0
}
 8018428:	4618      	mov	r0, r3
 801842a:	3708      	adds	r7, #8
 801842c:	46bd      	mov	sp, r7
 801842e:	bd80      	pop	{r7, pc}

08018430 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b084      	sub	sp, #16
 8018434:	af00      	add	r7, sp, #0
 8018436:	4603      	mov	r3, r0
 8018438:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801843a:	88fb      	ldrh	r3, [r7, #6]
 801843c:	0a1b      	lsrs	r3, r3, #8
 801843e:	b29b      	uxth	r3, r3
 8018440:	b2db      	uxtb	r3, r3
 8018442:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018444:	88fb      	ldrh	r3, [r7, #6]
 8018446:	b2db      	uxtb	r3, r3
 8018448:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801844a:	f000 fb67 	bl	8018b1c <SUBGRF_GetPacketType>
 801844e:	4603      	mov	r3, r0
 8018450:	2b00      	cmp	r3, #0
 8018452:	d108      	bne.n	8018466 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018454:	f107 030c 	add.w	r3, r7, #12
 8018458:	2202      	movs	r2, #2
 801845a:	4619      	mov	r1, r3
 801845c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018460:	f000 fe08 	bl	8019074 <SUBGRF_WriteRegisters>
            break;
 8018464:	e000      	b.n	8018468 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018466:	bf00      	nop
    }
}
 8018468:	bf00      	nop
 801846a:	3710      	adds	r7, #16
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}

08018470 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b084      	sub	sp, #16
 8018474:	af00      	add	r7, sp, #0
 8018476:	4603      	mov	r3, r0
 8018478:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801847a:	88fb      	ldrh	r3, [r7, #6]
 801847c:	0a1b      	lsrs	r3, r3, #8
 801847e:	b29b      	uxth	r3, r3
 8018480:	b2db      	uxtb	r3, r3
 8018482:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018484:	88fb      	ldrh	r3, [r7, #6]
 8018486:	b2db      	uxtb	r3, r3
 8018488:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801848a:	f000 fb47 	bl	8018b1c <SUBGRF_GetPacketType>
 801848e:	4603      	mov	r3, r0
 8018490:	2b00      	cmp	r3, #0
 8018492:	d108      	bne.n	80184a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018494:	f107 030c 	add.w	r3, r7, #12
 8018498:	2202      	movs	r2, #2
 801849a:	4619      	mov	r1, r3
 801849c:	f240 60be 	movw	r0, #1726	; 0x6be
 80184a0:	f000 fde8 	bl	8019074 <SUBGRF_WriteRegisters>
            break;
 80184a4:	e000      	b.n	80184a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80184a6:	bf00      	nop
    }
}
 80184a8:	bf00      	nop
 80184aa:	3710      	adds	r7, #16
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	4603      	mov	r3, r0
 80184b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80184ba:	2300      	movs	r3, #0
 80184bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80184be:	f000 fb2d 	bl	8018b1c <SUBGRF_GetPacketType>
 80184c2:	4603      	mov	r3, r0
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d121      	bne.n	801850c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80184c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80184cc:	f000 fdbe 	bl	801904c <SUBGRF_ReadRegister>
 80184d0:	4603      	mov	r3, r0
 80184d2:	f023 0301 	bic.w	r3, r3, #1
 80184d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80184d8:	88fb      	ldrh	r3, [r7, #6]
 80184da:	0a1b      	lsrs	r3, r3, #8
 80184dc:	b29b      	uxth	r3, r3
 80184de:	b25b      	sxtb	r3, r3
 80184e0:	f003 0301 	and.w	r3, r3, #1
 80184e4:	b25a      	sxtb	r2, r3
 80184e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184ea:	4313      	orrs	r3, r2
 80184ec:	b25b      	sxtb	r3, r3
 80184ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80184f0:	7bfb      	ldrb	r3, [r7, #15]
 80184f2:	4619      	mov	r1, r3
 80184f4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80184f8:	f000 fd94 	bl	8019024 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80184fc:	88fb      	ldrh	r3, [r7, #6]
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	4619      	mov	r1, r3
 8018502:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8018506:	f000 fd8d 	bl	8019024 <SUBGRF_WriteRegister>
            break;
 801850a:	e000      	b.n	801850e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801850c:	bf00      	nop
    }
}
 801850e:	bf00      	nop
 8018510:	3710      	adds	r7, #16
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}

08018516 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018516:	b580      	push	{r7, lr}
 8018518:	b082      	sub	sp, #8
 801851a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801851c:	2300      	movs	r3, #0
 801851e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018520:	2300      	movs	r3, #0
 8018522:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018524:	2300      	movs	r3, #0
 8018526:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018528:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801852c:	f000 fd8e 	bl	801904c <SUBGRF_ReadRegister>
 8018530:	4603      	mov	r3, r0
 8018532:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018534:	79fb      	ldrb	r3, [r7, #7]
 8018536:	f023 0301 	bic.w	r3, r3, #1
 801853a:	b2db      	uxtb	r3, r3
 801853c:	4619      	mov	r1, r3
 801853e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018542:	f000 fd6f 	bl	8019024 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018546:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801854a:	f000 fd7f 	bl	801904c <SUBGRF_ReadRegister>
 801854e:	4603      	mov	r3, r0
 8018550:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018552:	79bb      	ldrb	r3, [r7, #6]
 8018554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018558:	b2db      	uxtb	r3, r3
 801855a:	4619      	mov	r1, r3
 801855c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018560:	f000 fd60 	bl	8019024 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018564:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018568:	f000 f88a 	bl	8018680 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801856c:	463b      	mov	r3, r7
 801856e:	2204      	movs	r2, #4
 8018570:	4619      	mov	r1, r3
 8018572:	f640 0019 	movw	r0, #2073	; 0x819
 8018576:	f000 fd9f 	bl	80190b8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801857a:	2000      	movs	r0, #0
 801857c:	f000 f844 	bl	8018608 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018580:	79fb      	ldrb	r3, [r7, #7]
 8018582:	4619      	mov	r1, r3
 8018584:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018588:	f000 fd4c 	bl	8019024 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801858c:	79bb      	ldrb	r3, [r7, #6]
 801858e:	4619      	mov	r1, r3
 8018590:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018594:	f000 fd46 	bl	8019024 <SUBGRF_WriteRegister>

    return number;
 8018598:	683b      	ldr	r3, [r7, #0]
}
 801859a:	4618      	mov	r0, r3
 801859c:	3708      	adds	r7, #8
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
	...

080185a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80185a4:	b580      	push	{r7, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80185ac:	2000      	movs	r0, #0
 80185ae:	f7f2 f9c6 	bl	800a93e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80185b2:	2002      	movs	r0, #2
 80185b4:	f000 ff1e 	bl	80193f4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80185b8:	793b      	ldrb	r3, [r7, #4]
 80185ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	009b      	lsls	r3, r3, #2
 80185c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80185c4:	793b      	ldrb	r3, [r7, #4]
 80185c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80185ce:	b25b      	sxtb	r3, r3
 80185d0:	4313      	orrs	r3, r2
 80185d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80185d4:	793b      	ldrb	r3, [r7, #4]
 80185d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80185de:	4313      	orrs	r3, r2
 80185e0:	b25b      	sxtb	r3, r3
 80185e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80185e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80185e6:	f107 030f 	add.w	r3, r7, #15
 80185ea:	2201      	movs	r2, #1
 80185ec:	4619      	mov	r1, r3
 80185ee:	2084      	movs	r0, #132	; 0x84
 80185f0:	f000 fdc8 	bl	8019184 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80185f4:	4b03      	ldr	r3, [pc, #12]	; (8018604 <SUBGRF_SetSleep+0x60>)
 80185f6:	2200      	movs	r2, #0
 80185f8:	701a      	strb	r2, [r3, #0]
}
 80185fa:	bf00      	nop
 80185fc:	3710      	adds	r7, #16
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	20000fcc 	.word	0x20000fcc

08018608 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	4603      	mov	r3, r0
 8018610:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018612:	1dfb      	adds	r3, r7, #7
 8018614:	2201      	movs	r2, #1
 8018616:	4619      	mov	r1, r3
 8018618:	2080      	movs	r0, #128	; 0x80
 801861a:	f000 fdb3 	bl	8019184 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801861e:	79fb      	ldrb	r3, [r7, #7]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d103      	bne.n	801862c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018624:	4b05      	ldr	r3, [pc, #20]	; (801863c <SUBGRF_SetStandby+0x34>)
 8018626:	2201      	movs	r2, #1
 8018628:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801862a:	e002      	b.n	8018632 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801862c:	4b03      	ldr	r3, [pc, #12]	; (801863c <SUBGRF_SetStandby+0x34>)
 801862e:	2202      	movs	r2, #2
 8018630:	701a      	strb	r2, [r3, #0]
}
 8018632:	bf00      	nop
 8018634:	3708      	adds	r7, #8
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	20000fcc 	.word	0x20000fcc

08018640 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018648:	4b0c      	ldr	r3, [pc, #48]	; (801867c <SUBGRF_SetTx+0x3c>)
 801864a:	2204      	movs	r2, #4
 801864c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	0c1b      	lsrs	r3, r3, #16
 8018652:	b2db      	uxtb	r3, r3
 8018654:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	0a1b      	lsrs	r3, r3, #8
 801865a:	b2db      	uxtb	r3, r3
 801865c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	b2db      	uxtb	r3, r3
 8018662:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018664:	f107 030c 	add.w	r3, r7, #12
 8018668:	2203      	movs	r2, #3
 801866a:	4619      	mov	r1, r3
 801866c:	2083      	movs	r0, #131	; 0x83
 801866e:	f000 fd89 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018672:	bf00      	nop
 8018674:	3710      	adds	r7, #16
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}
 801867a:	bf00      	nop
 801867c:	20000fcc 	.word	0x20000fcc

08018680 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b084      	sub	sp, #16
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018688:	4b0c      	ldr	r3, [pc, #48]	; (80186bc <SUBGRF_SetRx+0x3c>)
 801868a:	2205      	movs	r2, #5
 801868c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	0c1b      	lsrs	r3, r3, #16
 8018692:	b2db      	uxtb	r3, r3
 8018694:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	0a1b      	lsrs	r3, r3, #8
 801869a:	b2db      	uxtb	r3, r3
 801869c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80186a4:	f107 030c 	add.w	r3, r7, #12
 80186a8:	2203      	movs	r2, #3
 80186aa:	4619      	mov	r1, r3
 80186ac:	2082      	movs	r0, #130	; 0x82
 80186ae:	f000 fd69 	bl	8019184 <SUBGRF_WriteCommand>
}
 80186b2:	bf00      	nop
 80186b4:	3710      	adds	r7, #16
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	20000fcc 	.word	0x20000fcc

080186c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b084      	sub	sp, #16
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80186c8:	4b0e      	ldr	r3, [pc, #56]	; (8018704 <SUBGRF_SetRxBoosted+0x44>)
 80186ca:	2205      	movs	r2, #5
 80186cc:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80186ce:	2197      	movs	r1, #151	; 0x97
 80186d0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80186d4:	f000 fca6 	bl	8019024 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	0c1b      	lsrs	r3, r3, #16
 80186dc:	b2db      	uxtb	r3, r3
 80186de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	0a1b      	lsrs	r3, r3, #8
 80186e4:	b2db      	uxtb	r3, r3
 80186e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80186ee:	f107 030c 	add.w	r3, r7, #12
 80186f2:	2203      	movs	r2, #3
 80186f4:	4619      	mov	r1, r3
 80186f6:	2082      	movs	r0, #130	; 0x82
 80186f8:	f000 fd44 	bl	8019184 <SUBGRF_WriteCommand>
}
 80186fc:	bf00      	nop
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}
 8018704:	20000fcc 	.word	0x20000fcc

08018708 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b084      	sub	sp, #16
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
 8018710:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	0c1b      	lsrs	r3, r3, #16
 8018716:	b2db      	uxtb	r3, r3
 8018718:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	0a1b      	lsrs	r3, r3, #8
 801871e:	b2db      	uxtb	r3, r3
 8018720:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	b2db      	uxtb	r3, r3
 8018726:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	0c1b      	lsrs	r3, r3, #16
 801872c:	b2db      	uxtb	r3, r3
 801872e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018730:	683b      	ldr	r3, [r7, #0]
 8018732:	0a1b      	lsrs	r3, r3, #8
 8018734:	b2db      	uxtb	r3, r3
 8018736:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	b2db      	uxtb	r3, r3
 801873c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801873e:	f107 0308 	add.w	r3, r7, #8
 8018742:	2206      	movs	r2, #6
 8018744:	4619      	mov	r1, r3
 8018746:	2094      	movs	r0, #148	; 0x94
 8018748:	f000 fd1c 	bl	8019184 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801874c:	4b03      	ldr	r3, [pc, #12]	; (801875c <SUBGRF_SetRxDutyCycle+0x54>)
 801874e:	2206      	movs	r2, #6
 8018750:	701a      	strb	r2, [r3, #0]
}
 8018752:	bf00      	nop
 8018754:	3710      	adds	r7, #16
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	20000fcc 	.word	0x20000fcc

08018760 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018764:	2200      	movs	r2, #0
 8018766:	2100      	movs	r1, #0
 8018768:	20c5      	movs	r0, #197	; 0xc5
 801876a:	f000 fd0b 	bl	8019184 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801876e:	4b02      	ldr	r3, [pc, #8]	; (8018778 <SUBGRF_SetCad+0x18>)
 8018770:	2207      	movs	r2, #7
 8018772:	701a      	strb	r2, [r3, #0]
}
 8018774:	bf00      	nop
 8018776:	bd80      	pop	{r7, pc}
 8018778:	20000fcc 	.word	0x20000fcc

0801877c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801877c:	b580      	push	{r7, lr}
 801877e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018780:	2200      	movs	r2, #0
 8018782:	2100      	movs	r1, #0
 8018784:	20d1      	movs	r0, #209	; 0xd1
 8018786:	f000 fcfd 	bl	8019184 <SUBGRF_WriteCommand>
}
 801878a:	bf00      	nop
 801878c:	bd80      	pop	{r7, pc}

0801878e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801878e:	b580      	push	{r7, lr}
 8018790:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018792:	2200      	movs	r2, #0
 8018794:	2100      	movs	r1, #0
 8018796:	20d2      	movs	r0, #210	; 0xd2
 8018798:	f000 fcf4 	bl	8019184 <SUBGRF_WriteCommand>
}
 801879c:	bf00      	nop
 801879e:	bd80      	pop	{r7, pc}

080187a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b082      	sub	sp, #8
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	4603      	mov	r3, r0
 80187a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80187aa:	1dfb      	adds	r3, r7, #7
 80187ac:	2201      	movs	r2, #1
 80187ae:	4619      	mov	r1, r3
 80187b0:	209f      	movs	r0, #159	; 0x9f
 80187b2:	f000 fce7 	bl	8019184 <SUBGRF_WriteCommand>
}
 80187b6:	bf00      	nop
 80187b8:	3708      	adds	r7, #8
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}

080187be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80187be:	b580      	push	{r7, lr}
 80187c0:	b084      	sub	sp, #16
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	4603      	mov	r3, r0
 80187c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80187c8:	1dfb      	adds	r3, r7, #7
 80187ca:	2201      	movs	r2, #1
 80187cc:	4619      	mov	r1, r3
 80187ce:	20a0      	movs	r0, #160	; 0xa0
 80187d0:	f000 fcd8 	bl	8019184 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80187d4:	79fb      	ldrb	r3, [r7, #7]
 80187d6:	2b3f      	cmp	r3, #63	; 0x3f
 80187d8:	d91c      	bls.n	8018814 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80187da:	79fb      	ldrb	r3, [r7, #7]
 80187dc:	085b      	lsrs	r3, r3, #1
 80187de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80187e0:	2300      	movs	r3, #0
 80187e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80187e4:	2300      	movs	r3, #0
 80187e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80187e8:	e005      	b.n	80187f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80187ea:	7bfb      	ldrb	r3, [r7, #15]
 80187ec:	089b      	lsrs	r3, r3, #2
 80187ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 80187f0:	7bbb      	ldrb	r3, [r7, #14]
 80187f2:	3301      	adds	r3, #1
 80187f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80187f6:	7bfb      	ldrb	r3, [r7, #15]
 80187f8:	2b1f      	cmp	r3, #31
 80187fa:	d8f6      	bhi.n	80187ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80187fc:	7bfb      	ldrb	r3, [r7, #15]
 80187fe:	00db      	lsls	r3, r3, #3
 8018800:	b2da      	uxtb	r2, r3
 8018802:	7bbb      	ldrb	r3, [r7, #14]
 8018804:	4413      	add	r3, r2
 8018806:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018808:	7b7b      	ldrb	r3, [r7, #13]
 801880a:	4619      	mov	r1, r3
 801880c:	f240 7006 	movw	r0, #1798	; 0x706
 8018810:	f000 fc08 	bl	8019024 <SUBGRF_WriteRegister>
    }
}
 8018814:	bf00      	nop
 8018816:	3710      	adds	r7, #16
 8018818:	46bd      	mov	sp, r7
 801881a:	bd80      	pop	{r7, pc}

0801881c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018822:	f7f2 f8a8 	bl	800a976 <RBI_IsDCDC>
 8018826:	4603      	mov	r3, r0
 8018828:	2b01      	cmp	r3, #1
 801882a:	d102      	bne.n	8018832 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801882c:	2301      	movs	r3, #1
 801882e:	71fb      	strb	r3, [r7, #7]
 8018830:	e001      	b.n	8018836 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018832:	2300      	movs	r3, #0
 8018834:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018836:	1dfb      	adds	r3, r7, #7
 8018838:	2201      	movs	r2, #1
 801883a:	4619      	mov	r1, r3
 801883c:	2096      	movs	r0, #150	; 0x96
 801883e:	f000 fca1 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018842:	bf00      	nop
 8018844:	3708      	adds	r7, #8
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}

0801884a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801884a:	b580      	push	{r7, lr}
 801884c:	b084      	sub	sp, #16
 801884e:	af00      	add	r7, sp, #0
 8018850:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018852:	793b      	ldrb	r3, [r7, #4]
 8018854:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018858:	b2db      	uxtb	r3, r3
 801885a:	019b      	lsls	r3, r3, #6
 801885c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801885e:	793b      	ldrb	r3, [r7, #4]
 8018860:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018864:	b2db      	uxtb	r3, r3
 8018866:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018868:	b25b      	sxtb	r3, r3
 801886a:	4313      	orrs	r3, r2
 801886c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801886e:	793b      	ldrb	r3, [r7, #4]
 8018870:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018874:	b2db      	uxtb	r3, r3
 8018876:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018878:	b25b      	sxtb	r3, r3
 801887a:	4313      	orrs	r3, r2
 801887c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801887e:	793b      	ldrb	r3, [r7, #4]
 8018880:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018884:	b2db      	uxtb	r3, r3
 8018886:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018888:	b25b      	sxtb	r3, r3
 801888a:	4313      	orrs	r3, r2
 801888c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801888e:	793b      	ldrb	r3, [r7, #4]
 8018890:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018894:	b2db      	uxtb	r3, r3
 8018896:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018898:	b25b      	sxtb	r3, r3
 801889a:	4313      	orrs	r3, r2
 801889c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801889e:	793b      	ldrb	r3, [r7, #4]
 80188a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80188a4:	b2db      	uxtb	r3, r3
 80188a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80188a8:	b25b      	sxtb	r3, r3
 80188aa:	4313      	orrs	r3, r2
 80188ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80188ae:	793b      	ldrb	r3, [r7, #4]
 80188b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80188b4:	b2db      	uxtb	r3, r3
 80188b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80188b8:	4313      	orrs	r3, r2
 80188ba:	b25b      	sxtb	r3, r3
 80188bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80188be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80188c0:	f107 030f 	add.w	r3, r7, #15
 80188c4:	2201      	movs	r2, #1
 80188c6:	4619      	mov	r1, r3
 80188c8:	2089      	movs	r0, #137	; 0x89
 80188ca:	f000 fc5b 	bl	8019184 <SUBGRF_WriteCommand>
}
 80188ce:	bf00      	nop
 80188d0:	3710      	adds	r7, #16
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
	...

080188d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b084      	sub	sp, #16
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	4a1b      	ldr	r2, [pc, #108]	; (8018950 <SUBGRF_CalibrateImage+0x78>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d904      	bls.n	80188f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80188e8:	23e1      	movs	r3, #225	; 0xe1
 80188ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80188ec:	23e9      	movs	r3, #233	; 0xe9
 80188ee:	737b      	strb	r3, [r7, #13]
 80188f0:	e022      	b.n	8018938 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	4a17      	ldr	r2, [pc, #92]	; (8018954 <SUBGRF_CalibrateImage+0x7c>)
 80188f6:	4293      	cmp	r3, r2
 80188f8:	d904      	bls.n	8018904 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80188fa:	23d7      	movs	r3, #215	; 0xd7
 80188fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80188fe:	23db      	movs	r3, #219	; 0xdb
 8018900:	737b      	strb	r3, [r7, #13]
 8018902:	e019      	b.n	8018938 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	4a14      	ldr	r2, [pc, #80]	; (8018958 <SUBGRF_CalibrateImage+0x80>)
 8018908:	4293      	cmp	r3, r2
 801890a:	d904      	bls.n	8018916 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801890c:	23c1      	movs	r3, #193	; 0xc1
 801890e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018910:	23c5      	movs	r3, #197	; 0xc5
 8018912:	737b      	strb	r3, [r7, #13]
 8018914:	e010      	b.n	8018938 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	4a10      	ldr	r2, [pc, #64]	; (801895c <SUBGRF_CalibrateImage+0x84>)
 801891a:	4293      	cmp	r3, r2
 801891c:	d904      	bls.n	8018928 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801891e:	2375      	movs	r3, #117	; 0x75
 8018920:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018922:	2381      	movs	r3, #129	; 0x81
 8018924:	737b      	strb	r3, [r7, #13]
 8018926:	e007      	b.n	8018938 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	4a0d      	ldr	r2, [pc, #52]	; (8018960 <SUBGRF_CalibrateImage+0x88>)
 801892c:	4293      	cmp	r3, r2
 801892e:	d903      	bls.n	8018938 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018930:	236b      	movs	r3, #107	; 0x6b
 8018932:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018934:	236f      	movs	r3, #111	; 0x6f
 8018936:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018938:	f107 030c 	add.w	r3, r7, #12
 801893c:	2202      	movs	r2, #2
 801893e:	4619      	mov	r1, r3
 8018940:	2098      	movs	r0, #152	; 0x98
 8018942:	f000 fc1f 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018946:	bf00      	nop
 8018948:	3710      	adds	r7, #16
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}
 801894e:	bf00      	nop
 8018950:	35a4e900 	.word	0x35a4e900
 8018954:	32a9f880 	.word	0x32a9f880
 8018958:	2de54480 	.word	0x2de54480
 801895c:	1b6b0b00 	.word	0x1b6b0b00
 8018960:	1954fc40 	.word	0x1954fc40

08018964 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018964:	b590      	push	{r4, r7, lr}
 8018966:	b085      	sub	sp, #20
 8018968:	af00      	add	r7, sp, #0
 801896a:	4604      	mov	r4, r0
 801896c:	4608      	mov	r0, r1
 801896e:	4611      	mov	r1, r2
 8018970:	461a      	mov	r2, r3
 8018972:	4623      	mov	r3, r4
 8018974:	71fb      	strb	r3, [r7, #7]
 8018976:	4603      	mov	r3, r0
 8018978:	71bb      	strb	r3, [r7, #6]
 801897a:	460b      	mov	r3, r1
 801897c:	717b      	strb	r3, [r7, #5]
 801897e:	4613      	mov	r3, r2
 8018980:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018982:	79fb      	ldrb	r3, [r7, #7]
 8018984:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018986:	79bb      	ldrb	r3, [r7, #6]
 8018988:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801898a:	797b      	ldrb	r3, [r7, #5]
 801898c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801898e:	793b      	ldrb	r3, [r7, #4]
 8018990:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018992:	f107 030c 	add.w	r3, r7, #12
 8018996:	2204      	movs	r2, #4
 8018998:	4619      	mov	r1, r3
 801899a:	2095      	movs	r0, #149	; 0x95
 801899c:	f000 fbf2 	bl	8019184 <SUBGRF_WriteCommand>
}
 80189a0:	bf00      	nop
 80189a2:	3714      	adds	r7, #20
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd90      	pop	{r4, r7, pc}

080189a8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80189a8:	b590      	push	{r4, r7, lr}
 80189aa:	b085      	sub	sp, #20
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	4604      	mov	r4, r0
 80189b0:	4608      	mov	r0, r1
 80189b2:	4611      	mov	r1, r2
 80189b4:	461a      	mov	r2, r3
 80189b6:	4623      	mov	r3, r4
 80189b8:	80fb      	strh	r3, [r7, #6]
 80189ba:	4603      	mov	r3, r0
 80189bc:	80bb      	strh	r3, [r7, #4]
 80189be:	460b      	mov	r3, r1
 80189c0:	807b      	strh	r3, [r7, #2]
 80189c2:	4613      	mov	r3, r2
 80189c4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80189c6:	88fb      	ldrh	r3, [r7, #6]
 80189c8:	0a1b      	lsrs	r3, r3, #8
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80189d0:	88fb      	ldrh	r3, [r7, #6]
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80189d6:	88bb      	ldrh	r3, [r7, #4]
 80189d8:	0a1b      	lsrs	r3, r3, #8
 80189da:	b29b      	uxth	r3, r3
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80189e0:	88bb      	ldrh	r3, [r7, #4]
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80189e6:	887b      	ldrh	r3, [r7, #2]
 80189e8:	0a1b      	lsrs	r3, r3, #8
 80189ea:	b29b      	uxth	r3, r3
 80189ec:	b2db      	uxtb	r3, r3
 80189ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80189f0:	887b      	ldrh	r3, [r7, #2]
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80189f6:	883b      	ldrh	r3, [r7, #0]
 80189f8:	0a1b      	lsrs	r3, r3, #8
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018a00:	883b      	ldrh	r3, [r7, #0]
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018a06:	f107 0308 	add.w	r3, r7, #8
 8018a0a:	2208      	movs	r2, #8
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	2008      	movs	r0, #8
 8018a10:	f000 fbb8 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018a14:	bf00      	nop
 8018a16:	3714      	adds	r7, #20
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	bd90      	pop	{r4, r7, pc}

08018a1c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b084      	sub	sp, #16
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	4603      	mov	r3, r0
 8018a24:	6039      	str	r1, [r7, #0]
 8018a26:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018a28:	79fb      	ldrb	r3, [r7, #7]
 8018a2a:	f003 0307 	and.w	r3, r3, #7
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	0c1b      	lsrs	r3, r3, #16
 8018a36:	b2db      	uxtb	r3, r3
 8018a38:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	0a1b      	lsrs	r3, r3, #8
 8018a3e:	b2db      	uxtb	r3, r3
 8018a40:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	b2db      	uxtb	r3, r3
 8018a46:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018a48:	f107 030c 	add.w	r3, r7, #12
 8018a4c:	2204      	movs	r2, #4
 8018a4e:	4619      	mov	r1, r3
 8018a50:	2097      	movs	r0, #151	; 0x97
 8018a52:	f000 fb97 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018a56:	bf00      	nop
 8018a58:	3710      	adds	r7, #16
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd80      	pop	{r7, pc}
	...

08018a60 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018a60:	b5b0      	push	{r4, r5, r7, lr}
 8018a62:	b084      	sub	sp, #16
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018a6c:	4b1b      	ldr	r3, [pc, #108]	; (8018adc <SUBGRF_SetRfFrequency+0x7c>)
 8018a6e:	781b      	ldrb	r3, [r3, #0]
 8018a70:	f083 0301 	eor.w	r3, r3, #1
 8018a74:	b2db      	uxtb	r3, r3
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d005      	beq.n	8018a86 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f7ff ff2c 	bl	80188d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018a80:	4b16      	ldr	r3, [pc, #88]	; (8018adc <SUBGRF_SetRfFrequency+0x7c>)
 8018a82:	2201      	movs	r2, #1
 8018a84:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	461a      	mov	r2, r3
 8018a8a:	f04f 0300 	mov.w	r3, #0
 8018a8e:	09d5      	lsrs	r5, r2, #7
 8018a90:	0654      	lsls	r4, r2, #25
 8018a92:	4a13      	ldr	r2, [pc, #76]	; (8018ae0 <SUBGRF_SetRfFrequency+0x80>)
 8018a94:	f04f 0300 	mov.w	r3, #0
 8018a98:	4620      	mov	r0, r4
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	f7e8 f85e 	bl	8000b5c <__aeabi_uldivmod>
 8018aa0:	4602      	mov	r2, r0
 8018aa2:	460b      	mov	r3, r1
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	0e1b      	lsrs	r3, r3, #24
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	0c1b      	lsrs	r3, r3, #16
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	0a1b      	lsrs	r3, r3, #8
 8018abc:	b2db      	uxtb	r3, r3
 8018abe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018ac6:	f107 0308 	add.w	r3, r7, #8
 8018aca:	2204      	movs	r2, #4
 8018acc:	4619      	mov	r1, r3
 8018ace:	2086      	movs	r0, #134	; 0x86
 8018ad0:	f000 fb58 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018ad4:	bf00      	nop
 8018ad6:	3710      	adds	r7, #16
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bdb0      	pop	{r4, r5, r7, pc}
 8018adc:	20000fd4 	.word	0x20000fd4
 8018ae0:	01e84800 	.word	0x01e84800

08018ae4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	4603      	mov	r3, r0
 8018aec:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018aee:	79fa      	ldrb	r2, [r7, #7]
 8018af0:	4b09      	ldr	r3, [pc, #36]	; (8018b18 <SUBGRF_SetPacketType+0x34>)
 8018af2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018af4:	79fb      	ldrb	r3, [r7, #7]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d104      	bne.n	8018b04 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018afa:	2100      	movs	r1, #0
 8018afc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018b00:	f000 fa90 	bl	8019024 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018b04:	1dfb      	adds	r3, r7, #7
 8018b06:	2201      	movs	r2, #1
 8018b08:	4619      	mov	r1, r3
 8018b0a:	208a      	movs	r0, #138	; 0x8a
 8018b0c:	f000 fb3a 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018b10:	bf00      	nop
 8018b12:	3708      	adds	r7, #8
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bd80      	pop	{r7, pc}
 8018b18:	20000fcd 	.word	0x20000fcd

08018b1c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	af00      	add	r7, sp, #0
    return PacketType;
 8018b20:	4b02      	ldr	r3, [pc, #8]	; (8018b2c <SUBGRF_GetPacketType+0x10>)
 8018b22:	781b      	ldrb	r3, [r3, #0]
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	46bd      	mov	sp, r7
 8018b28:	bc80      	pop	{r7}
 8018b2a:	4770      	bx	lr
 8018b2c:	20000fcd 	.word	0x20000fcd

08018b30 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	4603      	mov	r3, r0
 8018b38:	71fb      	strb	r3, [r7, #7]
 8018b3a:	460b      	mov	r3, r1
 8018b3c:	71bb      	strb	r3, [r7, #6]
 8018b3e:	4613      	mov	r3, r2
 8018b40:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018b42:	79fb      	ldrb	r3, [r7, #7]
 8018b44:	2b01      	cmp	r3, #1
 8018b46:	d124      	bne.n	8018b92 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018b48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018b4c:	2b0f      	cmp	r3, #15
 8018b4e:	d106      	bne.n	8018b5e <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018b50:	2301      	movs	r3, #1
 8018b52:	2201      	movs	r2, #1
 8018b54:	2100      	movs	r1, #0
 8018b56:	2006      	movs	r0, #6
 8018b58:	f7ff ff04 	bl	8018964 <SUBGRF_SetPaConfig>
 8018b5c:	e005      	b.n	8018b6a <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018b5e:	2301      	movs	r3, #1
 8018b60:	2201      	movs	r2, #1
 8018b62:	2100      	movs	r1, #0
 8018b64:	2004      	movs	r0, #4
 8018b66:	f7ff fefd 	bl	8018964 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018b6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018b6e:	2b0d      	cmp	r3, #13
 8018b70:	dd02      	ble.n	8018b78 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018b72:	230e      	movs	r3, #14
 8018b74:	71bb      	strb	r3, [r7, #6]
 8018b76:	e006      	b.n	8018b86 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018b78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018b7c:	f113 0f11 	cmn.w	r3, #17
 8018b80:	da01      	bge.n	8018b86 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018b82:	23ef      	movs	r3, #239	; 0xef
 8018b84:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018b86:	2118      	movs	r1, #24
 8018b88:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018b8c:	f000 fa4a 	bl	8019024 <SUBGRF_WriteRegister>
 8018b90:	e025      	b.n	8018bde <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018b92:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018b96:	f000 fa59 	bl	801904c <SUBGRF_ReadRegister>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	f043 031e 	orr.w	r3, r3, #30
 8018ba0:	b2db      	uxtb	r3, r3
 8018ba2:	4619      	mov	r1, r3
 8018ba4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018ba8:	f000 fa3c 	bl	8019024 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018bac:	2301      	movs	r3, #1
 8018bae:	2200      	movs	r2, #0
 8018bb0:	2107      	movs	r1, #7
 8018bb2:	2004      	movs	r0, #4
 8018bb4:	f7ff fed6 	bl	8018964 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018bb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bbc:	2b16      	cmp	r3, #22
 8018bbe:	dd02      	ble.n	8018bc6 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018bc0:	2316      	movs	r3, #22
 8018bc2:	71bb      	strb	r3, [r7, #6]
 8018bc4:	e006      	b.n	8018bd4 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018bc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018bca:	f113 0f09 	cmn.w	r3, #9
 8018bce:	da01      	bge.n	8018bd4 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018bd0:	23f7      	movs	r3, #247	; 0xf7
 8018bd2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018bd4:	2138      	movs	r1, #56	; 0x38
 8018bd6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018bda:	f000 fa23 	bl	8019024 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018bde:	79bb      	ldrb	r3, [r7, #6]
 8018be0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018be2:	797b      	ldrb	r3, [r7, #5]
 8018be4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018be6:	f107 030c 	add.w	r3, r7, #12
 8018bea:	2202      	movs	r2, #2
 8018bec:	4619      	mov	r1, r3
 8018bee:	208e      	movs	r0, #142	; 0x8e
 8018bf0:	f000 fac8 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018bf4:	bf00      	nop
 8018bf6:	3710      	adds	r7, #16
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018bfc:	b5b0      	push	{r4, r5, r7, lr}
 8018bfe:	b086      	sub	sp, #24
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018c04:	2300      	movs	r3, #0
 8018c06:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018c08:	4a5e      	ldr	r2, [pc, #376]	; (8018d84 <SUBGRF_SetModulationParams+0x188>)
 8018c0a:	f107 0308 	add.w	r3, r7, #8
 8018c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c12:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	781a      	ldrb	r2, [r3, #0]
 8018c1a:	4b5b      	ldr	r3, [pc, #364]	; (8018d88 <SUBGRF_SetModulationParams+0x18c>)
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d004      	beq.n	8018c2c <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7ff ff5c 	bl	8018ae4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	781b      	ldrb	r3, [r3, #0]
 8018c30:	2b03      	cmp	r3, #3
 8018c32:	f200 80a2 	bhi.w	8018d7a <SUBGRF_SetModulationParams+0x17e>
 8018c36:	a201      	add	r2, pc, #4	; (adr r2, 8018c3c <SUBGRF_SetModulationParams+0x40>)
 8018c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c3c:	08018c4d 	.word	0x08018c4d
 8018c40:	08018d09 	.word	0x08018d09
 8018c44:	08018ccb 	.word	0x08018ccb
 8018c48:	08018d37 	.word	0x08018d37
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018c4c:	2308      	movs	r3, #8
 8018c4e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	4a4d      	ldr	r2, [pc, #308]	; (8018d8c <SUBGRF_SetModulationParams+0x190>)
 8018c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c5a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018c5c:	697b      	ldr	r3, [r7, #20]
 8018c5e:	0c1b      	lsrs	r3, r3, #16
 8018c60:	b2db      	uxtb	r3, r3
 8018c62:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018c64:	697b      	ldr	r3, [r7, #20]
 8018c66:	0a1b      	lsrs	r3, r3, #8
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018c6c:	697b      	ldr	r3, [r7, #20]
 8018c6e:	b2db      	uxtb	r3, r3
 8018c70:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	7b1b      	ldrb	r3, [r3, #12]
 8018c76:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	7b5b      	ldrb	r3, [r3, #13]
 8018c7c:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	689b      	ldr	r3, [r3, #8]
 8018c82:	461a      	mov	r2, r3
 8018c84:	f04f 0300 	mov.w	r3, #0
 8018c88:	09d5      	lsrs	r5, r2, #7
 8018c8a:	0654      	lsls	r4, r2, #25
 8018c8c:	4a40      	ldr	r2, [pc, #256]	; (8018d90 <SUBGRF_SetModulationParams+0x194>)
 8018c8e:	f04f 0300 	mov.w	r3, #0
 8018c92:	4620      	mov	r0, r4
 8018c94:	4629      	mov	r1, r5
 8018c96:	f7e7 ff61 	bl	8000b5c <__aeabi_uldivmod>
 8018c9a:	4602      	mov	r2, r0
 8018c9c:	460b      	mov	r3, r1
 8018c9e:	4613      	mov	r3, r2
 8018ca0:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018ca2:	697b      	ldr	r3, [r7, #20]
 8018ca4:	0c1b      	lsrs	r3, r3, #16
 8018ca6:	b2db      	uxtb	r3, r3
 8018ca8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	0a1b      	lsrs	r3, r3, #8
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018cb2:	697b      	ldr	r3, [r7, #20]
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018cb8:	7cfb      	ldrb	r3, [r7, #19]
 8018cba:	b29a      	uxth	r2, r3
 8018cbc:	f107 0308 	add.w	r3, r7, #8
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	208b      	movs	r0, #139	; 0x8b
 8018cc4:	f000 fa5e 	bl	8019184 <SUBGRF_WriteCommand>
        break;
 8018cc8:	e058      	b.n	8018d7c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018cca:	2304      	movs	r3, #4
 8018ccc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	691b      	ldr	r3, [r3, #16]
 8018cd2:	4a2e      	ldr	r2, [pc, #184]	; (8018d8c <SUBGRF_SetModulationParams+0x190>)
 8018cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cd8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	0c1b      	lsrs	r3, r3, #16
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ce2:	697b      	ldr	r3, [r7, #20]
 8018ce4:	0a1b      	lsrs	r3, r3, #8
 8018ce6:	b2db      	uxtb	r3, r3
 8018ce8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018cea:	697b      	ldr	r3, [r7, #20]
 8018cec:	b2db      	uxtb	r3, r3
 8018cee:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	7d1b      	ldrb	r3, [r3, #20]
 8018cf4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018cf6:	7cfb      	ldrb	r3, [r7, #19]
 8018cf8:	b29a      	uxth	r2, r3
 8018cfa:	f107 0308 	add.w	r3, r7, #8
 8018cfe:	4619      	mov	r1, r3
 8018d00:	208b      	movs	r0, #139	; 0x8b
 8018d02:	f000 fa3f 	bl	8019184 <SUBGRF_WriteCommand>
        break;
 8018d06:	e039      	b.n	8018d7c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018d08:	2304      	movs	r3, #4
 8018d0a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	7e1b      	ldrb	r3, [r3, #24]
 8018d10:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	7e5b      	ldrb	r3, [r3, #25]
 8018d16:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	7e9b      	ldrb	r3, [r3, #26]
 8018d1c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	7edb      	ldrb	r3, [r3, #27]
 8018d22:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d24:	7cfb      	ldrb	r3, [r7, #19]
 8018d26:	b29a      	uxth	r2, r3
 8018d28:	f107 0308 	add.w	r3, r7, #8
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	208b      	movs	r0, #139	; 0x8b
 8018d30:	f000 fa28 	bl	8019184 <SUBGRF_WriteCommand>

        break;
 8018d34:	e022      	b.n	8018d7c <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018d36:	2305      	movs	r3, #5
 8018d38:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	685b      	ldr	r3, [r3, #4]
 8018d3e:	4a13      	ldr	r2, [pc, #76]	; (8018d8c <SUBGRF_SetModulationParams+0x190>)
 8018d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d44:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d46:	697b      	ldr	r3, [r7, #20]
 8018d48:	0c1b      	lsrs	r3, r3, #16
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	0a1b      	lsrs	r3, r3, #8
 8018d52:	b2db      	uxtb	r3, r3
 8018d54:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018d56:	697b      	ldr	r3, [r7, #20]
 8018d58:	b2db      	uxtb	r3, r3
 8018d5a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	7b1b      	ldrb	r3, [r3, #12]
 8018d60:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	7b5b      	ldrb	r3, [r3, #13]
 8018d66:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d68:	7cfb      	ldrb	r3, [r7, #19]
 8018d6a:	b29a      	uxth	r2, r3
 8018d6c:	f107 0308 	add.w	r3, r7, #8
 8018d70:	4619      	mov	r1, r3
 8018d72:	208b      	movs	r0, #139	; 0x8b
 8018d74:	f000 fa06 	bl	8019184 <SUBGRF_WriteCommand>
        break;
 8018d78:	e000      	b.n	8018d7c <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018d7a:	bf00      	nop
    }
}
 8018d7c:	bf00      	nop
 8018d7e:	3718      	adds	r7, #24
 8018d80:	46bd      	mov	sp, r7
 8018d82:	bdb0      	pop	{r4, r5, r7, pc}
 8018d84:	0801b6c0 	.word	0x0801b6c0
 8018d88:	20000fcd 	.word	0x20000fcd
 8018d8c:	3d090000 	.word	0x3d090000
 8018d90:	01e84800 	.word	0x01e84800

08018d94 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b086      	sub	sp, #24
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018da0:	4a48      	ldr	r2, [pc, #288]	; (8018ec4 <SUBGRF_SetPacketParams+0x130>)
 8018da2:	f107 030c 	add.w	r3, r7, #12
 8018da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8018da8:	c303      	stmia	r3!, {r0, r1}
 8018daa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	781a      	ldrb	r2, [r3, #0]
 8018db0:	4b45      	ldr	r3, [pc, #276]	; (8018ec8 <SUBGRF_SetPacketParams+0x134>)
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d004      	beq.n	8018dc2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7ff fe91 	bl	8018ae4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	781b      	ldrb	r3, [r3, #0]
 8018dc6:	2b03      	cmp	r3, #3
 8018dc8:	d878      	bhi.n	8018ebc <SUBGRF_SetPacketParams+0x128>
 8018dca:	a201      	add	r2, pc, #4	; (adr r2, 8018dd0 <SUBGRF_SetPacketParams+0x3c>)
 8018dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dd0:	08018de1 	.word	0x08018de1
 8018dd4:	08018e71 	.word	0x08018e71
 8018dd8:	08018e65 	.word	0x08018e65
 8018ddc:	08018de1 	.word	0x08018de1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	7a5b      	ldrb	r3, [r3, #9]
 8018de4:	2bf1      	cmp	r3, #241	; 0xf1
 8018de6:	d10a      	bne.n	8018dfe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018de8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018dec:	f7ff fb20 	bl	8018430 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018df0:	f248 0005 	movw	r0, #32773	; 0x8005
 8018df4:	f7ff fb3c 	bl	8018470 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018df8:	2302      	movs	r3, #2
 8018dfa:	75bb      	strb	r3, [r7, #22]
 8018dfc:	e011      	b.n	8018e22 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	7a5b      	ldrb	r3, [r3, #9]
 8018e02:	2bf2      	cmp	r3, #242	; 0xf2
 8018e04:	d10a      	bne.n	8018e1c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018e06:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018e0a:	f7ff fb11 	bl	8018430 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018e0e:	f241 0021 	movw	r0, #4129	; 0x1021
 8018e12:	f7ff fb2d 	bl	8018470 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018e16:	2306      	movs	r3, #6
 8018e18:	75bb      	strb	r3, [r7, #22]
 8018e1a:	e002      	b.n	8018e22 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	7a5b      	ldrb	r3, [r3, #9]
 8018e20:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018e22:	2309      	movs	r3, #9
 8018e24:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	885b      	ldrh	r3, [r3, #2]
 8018e2a:	0a1b      	lsrs	r3, r3, #8
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	b2db      	uxtb	r3, r3
 8018e30:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	885b      	ldrh	r3, [r3, #2]
 8018e36:	b2db      	uxtb	r3, r3
 8018e38:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	791b      	ldrb	r3, [r3, #4]
 8018e3e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	795b      	ldrb	r3, [r3, #5]
 8018e44:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	799b      	ldrb	r3, [r3, #6]
 8018e4a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	79db      	ldrb	r3, [r3, #7]
 8018e50:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	7a1b      	ldrb	r3, [r3, #8]
 8018e56:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018e58:	7dbb      	ldrb	r3, [r7, #22]
 8018e5a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	7a9b      	ldrb	r3, [r3, #10]
 8018e60:	753b      	strb	r3, [r7, #20]
        break;
 8018e62:	e022      	b.n	8018eaa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018e64:	2301      	movs	r3, #1
 8018e66:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	7b1b      	ldrb	r3, [r3, #12]
 8018e6c:	733b      	strb	r3, [r7, #12]
        break;
 8018e6e:	e01c      	b.n	8018eaa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018e70:	2306      	movs	r3, #6
 8018e72:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	89db      	ldrh	r3, [r3, #14]
 8018e78:	0a1b      	lsrs	r3, r3, #8
 8018e7a:	b29b      	uxth	r3, r3
 8018e7c:	b2db      	uxtb	r3, r3
 8018e7e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	89db      	ldrh	r3, [r3, #14]
 8018e84:	b2db      	uxtb	r3, r3
 8018e86:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	7c1a      	ldrb	r2, [r3, #16]
 8018e8c:	4b0f      	ldr	r3, [pc, #60]	; (8018ecc <SUBGRF_SetPacketParams+0x138>)
 8018e8e:	4611      	mov	r1, r2
 8018e90:	7019      	strb	r1, [r3, #0]
 8018e92:	4613      	mov	r3, r2
 8018e94:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	7c5b      	ldrb	r3, [r3, #17]
 8018e9a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	7c9b      	ldrb	r3, [r3, #18]
 8018ea0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	7cdb      	ldrb	r3, [r3, #19]
 8018ea6:	747b      	strb	r3, [r7, #17]
        break;
 8018ea8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018eaa:	7dfb      	ldrb	r3, [r7, #23]
 8018eac:	b29a      	uxth	r2, r3
 8018eae:	f107 030c 	add.w	r3, r7, #12
 8018eb2:	4619      	mov	r1, r3
 8018eb4:	208c      	movs	r0, #140	; 0x8c
 8018eb6:	f000 f965 	bl	8019184 <SUBGRF_WriteCommand>
 8018eba:	e000      	b.n	8018ebe <SUBGRF_SetPacketParams+0x12a>
        return;
 8018ebc:	bf00      	nop
}
 8018ebe:	3718      	adds	r7, #24
 8018ec0:	46bd      	mov	sp, r7
 8018ec2:	bd80      	pop	{r7, pc}
 8018ec4:	0801b6c8 	.word	0x0801b6c8
 8018ec8:	20000fcd 	.word	0x20000fcd
 8018ecc:	20000fce 	.word	0x20000fce

08018ed0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b084      	sub	sp, #16
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	460a      	mov	r2, r1
 8018eda:	71fb      	strb	r3, [r7, #7]
 8018edc:	4613      	mov	r3, r2
 8018ede:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018ee0:	79fb      	ldrb	r3, [r7, #7]
 8018ee2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018ee4:	79bb      	ldrb	r3, [r7, #6]
 8018ee6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018ee8:	f107 030c 	add.w	r3, r7, #12
 8018eec:	2202      	movs	r2, #2
 8018eee:	4619      	mov	r1, r3
 8018ef0:	208f      	movs	r0, #143	; 0x8f
 8018ef2:	f000 f947 	bl	8019184 <SUBGRF_WriteCommand>
}
 8018ef6:	bf00      	nop
 8018ef8:	3710      	adds	r7, #16
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}

08018efe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018efe:	b580      	push	{r7, lr}
 8018f00:	b082      	sub	sp, #8
 8018f02:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018f04:	2300      	movs	r3, #0
 8018f06:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018f08:	1d3b      	adds	r3, r7, #4
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	2015      	movs	r0, #21
 8018f10:	f000 f95a 	bl	80191c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018f14:	793b      	ldrb	r3, [r7, #4]
 8018f16:	425b      	negs	r3, r3
 8018f18:	105b      	asrs	r3, r3, #1
 8018f1a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018f20:	4618      	mov	r0, r3
 8018f22:	3708      	adds	r7, #8
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}

08018f28 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b084      	sub	sp, #16
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018f32:	f107 030c 	add.w	r3, r7, #12
 8018f36:	2202      	movs	r2, #2
 8018f38:	4619      	mov	r1, r3
 8018f3a:	2013      	movs	r0, #19
 8018f3c:	f000 f944 	bl	80191c8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018f40:	f7ff fdec 	bl	8018b1c <SUBGRF_GetPacketType>
 8018f44:	4603      	mov	r3, r0
 8018f46:	2b01      	cmp	r3, #1
 8018f48:	d10d      	bne.n	8018f66 <SUBGRF_GetRxBufferStatus+0x3e>
 8018f4a:	4b0c      	ldr	r3, [pc, #48]	; (8018f7c <SUBGRF_GetRxBufferStatus+0x54>)
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	b2db      	uxtb	r3, r3
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	d108      	bne.n	8018f66 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018f54:	f240 7002 	movw	r0, #1794	; 0x702
 8018f58:	f000 f878 	bl	801904c <SUBGRF_ReadRegister>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	461a      	mov	r2, r3
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	701a      	strb	r2, [r3, #0]
 8018f64:	e002      	b.n	8018f6c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018f66:	7b3a      	ldrb	r2, [r7, #12]
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018f6c:	7b7a      	ldrb	r2, [r7, #13]
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	701a      	strb	r2, [r3, #0]
}
 8018f72:	bf00      	nop
 8018f74:	3710      	adds	r7, #16
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	20000fce 	.word	0x20000fce

08018f80 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b084      	sub	sp, #16
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018f88:	f107 030c 	add.w	r3, r7, #12
 8018f8c:	2203      	movs	r2, #3
 8018f8e:	4619      	mov	r1, r3
 8018f90:	2014      	movs	r0, #20
 8018f92:	f000 f919 	bl	80191c8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018f96:	f7ff fdc1 	bl	8018b1c <SUBGRF_GetPacketType>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d002      	beq.n	8018fb0 <SUBGRF_GetPacketStatus+0x30>
 8018faa:	2b01      	cmp	r3, #1
 8018fac:	d013      	beq.n	8018fd6 <SUBGRF_GetPacketStatus+0x56>
 8018fae:	e02a      	b.n	8019006 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8018fb0:	7b3a      	ldrb	r2, [r7, #12]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8018fb6:	7b7b      	ldrb	r3, [r7, #13]
 8018fb8:	425b      	negs	r3, r3
 8018fba:	105b      	asrs	r3, r3, #1
 8018fbc:	b25a      	sxtb	r2, r3
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8018fc2:	7bbb      	ldrb	r3, [r7, #14]
 8018fc4:	425b      	negs	r3, r3
 8018fc6:	105b      	asrs	r3, r3, #1
 8018fc8:	b25a      	sxtb	r2, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	609a      	str	r2, [r3, #8]
            break;
 8018fd4:	e020      	b.n	8019018 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018fd6:	7b3b      	ldrb	r3, [r7, #12]
 8018fd8:	425b      	negs	r3, r3
 8018fda:	105b      	asrs	r3, r3, #1
 8018fdc:	b25a      	sxtb	r2, r3
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018fe2:	7b7b      	ldrb	r3, [r7, #13]
 8018fe4:	b25b      	sxtb	r3, r3
 8018fe6:	3302      	adds	r3, #2
 8018fe8:	109b      	asrs	r3, r3, #2
 8018fea:	b25a      	sxtb	r2, r3
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018ff0:	7bbb      	ldrb	r3, [r7, #14]
 8018ff2:	425b      	negs	r3, r3
 8018ff4:	105b      	asrs	r3, r3, #1
 8018ff6:	b25a      	sxtb	r2, r3
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8018ffc:	4b08      	ldr	r3, [pc, #32]	; (8019020 <SUBGRF_GetPacketStatus+0xa0>)
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	611a      	str	r2, [r3, #16]
            break;
 8019004:	e008      	b.n	8019018 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8019006:	2214      	movs	r2, #20
 8019008:	2100      	movs	r1, #0
 801900a:	6878      	ldr	r0, [r7, #4]
 801900c:	f000 fbf5 	bl	80197fa <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	220f      	movs	r2, #15
 8019014:	701a      	strb	r2, [r3, #0]
            break;
 8019016:	bf00      	nop
    }
}
 8019018:	bf00      	nop
 801901a:	3710      	adds	r7, #16
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}
 8019020:	20000fd0 	.word	0x20000fd0

08019024 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	4603      	mov	r3, r0
 801902c:	460a      	mov	r2, r1
 801902e:	80fb      	strh	r3, [r7, #6]
 8019030:	4613      	mov	r3, r2
 8019032:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019034:	1d7a      	adds	r2, r7, #5
 8019036:	88f9      	ldrh	r1, [r7, #6]
 8019038:	2301      	movs	r3, #1
 801903a:	4803      	ldr	r0, [pc, #12]	; (8019048 <SUBGRF_WriteRegister+0x24>)
 801903c:	f7ee fab4 	bl	80075a8 <HAL_SUBGHZ_WriteRegisters>
}
 8019040:	bf00      	nop
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}
 8019048:	20001788 	.word	0x20001788

0801904c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b084      	sub	sp, #16
 8019050:	af00      	add	r7, sp, #0
 8019052:	4603      	mov	r3, r0
 8019054:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019056:	f107 020f 	add.w	r2, r7, #15
 801905a:	88f9      	ldrh	r1, [r7, #6]
 801905c:	2301      	movs	r3, #1
 801905e:	4804      	ldr	r0, [pc, #16]	; (8019070 <SUBGRF_ReadRegister+0x24>)
 8019060:	f7ee fb01 	bl	8007666 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019064:	7bfb      	ldrb	r3, [r7, #15]
}
 8019066:	4618      	mov	r0, r3
 8019068:	3710      	adds	r7, #16
 801906a:	46bd      	mov	sp, r7
 801906c:	bd80      	pop	{r7, pc}
 801906e:	bf00      	nop
 8019070:	20001788 	.word	0x20001788

08019074 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b086      	sub	sp, #24
 8019078:	af00      	add	r7, sp, #0
 801907a:	4603      	mov	r3, r0
 801907c:	6039      	str	r1, [r7, #0]
 801907e:	80fb      	strh	r3, [r7, #6]
 8019080:	4613      	mov	r3, r2
 8019082:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019084:	f3ef 8310 	mrs	r3, PRIMASK
 8019088:	60fb      	str	r3, [r7, #12]
  return(result);
 801908a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801908c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801908e:	b672      	cpsid	i
}
 8019090:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019092:	88bb      	ldrh	r3, [r7, #4]
 8019094:	88f9      	ldrh	r1, [r7, #6]
 8019096:	683a      	ldr	r2, [r7, #0]
 8019098:	4806      	ldr	r0, [pc, #24]	; (80190b4 <SUBGRF_WriteRegisters+0x40>)
 801909a:	f7ee fa85 	bl	80075a8 <HAL_SUBGHZ_WriteRegisters>
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	f383 8810 	msr	PRIMASK, r3
}
 80190a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190aa:	bf00      	nop
 80190ac:	3718      	adds	r7, #24
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}
 80190b2:	bf00      	nop
 80190b4:	20001788 	.word	0x20001788

080190b8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b086      	sub	sp, #24
 80190bc:	af00      	add	r7, sp, #0
 80190be:	4603      	mov	r3, r0
 80190c0:	6039      	str	r1, [r7, #0]
 80190c2:	80fb      	strh	r3, [r7, #6]
 80190c4:	4613      	mov	r3, r2
 80190c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190c8:	f3ef 8310 	mrs	r3, PRIMASK
 80190cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80190ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80190d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190d2:	b672      	cpsid	i
}
 80190d4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80190d6:	88bb      	ldrh	r3, [r7, #4]
 80190d8:	88f9      	ldrh	r1, [r7, #6]
 80190da:	683a      	ldr	r2, [r7, #0]
 80190dc:	4806      	ldr	r0, [pc, #24]	; (80190f8 <SUBGRF_ReadRegisters+0x40>)
 80190de:	f7ee fac2 	bl	8007666 <HAL_SUBGHZ_ReadRegisters>
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190e6:	693b      	ldr	r3, [r7, #16]
 80190e8:	f383 8810 	msr	PRIMASK, r3
}
 80190ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80190ee:	bf00      	nop
 80190f0:	3718      	adds	r7, #24
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}
 80190f6:	bf00      	nop
 80190f8:	20001788 	.word	0x20001788

080190fc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b086      	sub	sp, #24
 8019100:	af00      	add	r7, sp, #0
 8019102:	4603      	mov	r3, r0
 8019104:	6039      	str	r1, [r7, #0]
 8019106:	71fb      	strb	r3, [r7, #7]
 8019108:	4613      	mov	r3, r2
 801910a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801910c:	f3ef 8310 	mrs	r3, PRIMASK
 8019110:	60fb      	str	r3, [r7, #12]
  return(result);
 8019112:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019116:	b672      	cpsid	i
}
 8019118:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801911a:	79bb      	ldrb	r3, [r7, #6]
 801911c:	b29b      	uxth	r3, r3
 801911e:	79f9      	ldrb	r1, [r7, #7]
 8019120:	683a      	ldr	r2, [r7, #0]
 8019122:	4806      	ldr	r0, [pc, #24]	; (801913c <SUBGRF_WriteBuffer+0x40>)
 8019124:	f7ee fbb3 	bl	800788e <HAL_SUBGHZ_WriteBuffer>
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801912c:	693b      	ldr	r3, [r7, #16]
 801912e:	f383 8810 	msr	PRIMASK, r3
}
 8019132:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019134:	bf00      	nop
 8019136:	3718      	adds	r7, #24
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}
 801913c:	20001788 	.word	0x20001788

08019140 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b086      	sub	sp, #24
 8019144:	af00      	add	r7, sp, #0
 8019146:	4603      	mov	r3, r0
 8019148:	6039      	str	r1, [r7, #0]
 801914a:	71fb      	strb	r3, [r7, #7]
 801914c:	4613      	mov	r3, r2
 801914e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019150:	f3ef 8310 	mrs	r3, PRIMASK
 8019154:	60fb      	str	r3, [r7, #12]
  return(result);
 8019156:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801915a:	b672      	cpsid	i
}
 801915c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801915e:	79bb      	ldrb	r3, [r7, #6]
 8019160:	b29b      	uxth	r3, r3
 8019162:	79f9      	ldrb	r1, [r7, #7]
 8019164:	683a      	ldr	r2, [r7, #0]
 8019166:	4806      	ldr	r0, [pc, #24]	; (8019180 <SUBGRF_ReadBuffer+0x40>)
 8019168:	f7ee fbe4 	bl	8007934 <HAL_SUBGHZ_ReadBuffer>
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	f383 8810 	msr	PRIMASK, r3
}
 8019176:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019178:	bf00      	nop
 801917a:	3718      	adds	r7, #24
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	20001788 	.word	0x20001788

08019184 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b086      	sub	sp, #24
 8019188:	af00      	add	r7, sp, #0
 801918a:	4603      	mov	r3, r0
 801918c:	6039      	str	r1, [r7, #0]
 801918e:	71fb      	strb	r3, [r7, #7]
 8019190:	4613      	mov	r3, r2
 8019192:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019194:	f3ef 8310 	mrs	r3, PRIMASK
 8019198:	60fb      	str	r3, [r7, #12]
  return(result);
 801919a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801919c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801919e:	b672      	cpsid	i
}
 80191a0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80191a2:	88bb      	ldrh	r3, [r7, #4]
 80191a4:	79f9      	ldrb	r1, [r7, #7]
 80191a6:	683a      	ldr	r2, [r7, #0]
 80191a8:	4806      	ldr	r0, [pc, #24]	; (80191c4 <SUBGRF_WriteCommand+0x40>)
 80191aa:	f7ee fabd 	bl	8007728 <HAL_SUBGHZ_ExecSetCmd>
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	f383 8810 	msr	PRIMASK, r3
}
 80191b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191ba:	bf00      	nop
 80191bc:	3718      	adds	r7, #24
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}
 80191c2:	bf00      	nop
 80191c4:	20001788 	.word	0x20001788

080191c8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b086      	sub	sp, #24
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	4603      	mov	r3, r0
 80191d0:	6039      	str	r1, [r7, #0]
 80191d2:	71fb      	strb	r3, [r7, #7]
 80191d4:	4613      	mov	r3, r2
 80191d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191d8:	f3ef 8310 	mrs	r3, PRIMASK
 80191dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80191de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191e2:	b672      	cpsid	i
}
 80191e4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80191e6:	88bb      	ldrh	r3, [r7, #4]
 80191e8:	79f9      	ldrb	r1, [r7, #7]
 80191ea:	683a      	ldr	r2, [r7, #0]
 80191ec:	4806      	ldr	r0, [pc, #24]	; (8019208 <SUBGRF_ReadCommand+0x40>)
 80191ee:	f7ee fafa 	bl	80077e6 <HAL_SUBGHZ_ExecGetCmd>
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191f6:	693b      	ldr	r3, [r7, #16]
 80191f8:	f383 8810 	msr	PRIMASK, r3
}
 80191fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191fe:	bf00      	nop
 8019200:	3718      	adds	r7, #24
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	20001788 	.word	0x20001788

0801920c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b084      	sub	sp, #16
 8019210:	af00      	add	r7, sp, #0
 8019212:	4603      	mov	r3, r0
 8019214:	460a      	mov	r2, r1
 8019216:	71fb      	strb	r3, [r7, #7]
 8019218:	4613      	mov	r3, r2
 801921a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801921c:	2301      	movs	r3, #1
 801921e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019220:	79bb      	ldrb	r3, [r7, #6]
 8019222:	2b01      	cmp	r3, #1
 8019224:	d10d      	bne.n	8019242 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019226:	79fb      	ldrb	r3, [r7, #7]
 8019228:	2b01      	cmp	r3, #1
 801922a:	d104      	bne.n	8019236 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801922c:	2302      	movs	r3, #2
 801922e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019230:	2004      	movs	r0, #4
 8019232:	f000 f8df 	bl	80193f4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019236:	79fb      	ldrb	r3, [r7, #7]
 8019238:	2b02      	cmp	r3, #2
 801923a:	d107      	bne.n	801924c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801923c:	2303      	movs	r3, #3
 801923e:	73fb      	strb	r3, [r7, #15]
 8019240:	e004      	b.n	801924c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019242:	79bb      	ldrb	r3, [r7, #6]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d101      	bne.n	801924c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019248:	2301      	movs	r3, #1
 801924a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801924c:	7bfb      	ldrb	r3, [r7, #15]
 801924e:	4618      	mov	r0, r3
 8019250:	f7f1 fb75 	bl	800a93e <RBI_ConfigRFSwitch>
}
 8019254:	bf00      	nop
 8019256:	3710      	adds	r7, #16
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}

0801925c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b084      	sub	sp, #16
 8019260:	af00      	add	r7, sp, #0
 8019262:	4603      	mov	r3, r0
 8019264:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019266:	2301      	movs	r3, #1
 8019268:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801926a:	f7f1 fb76 	bl	800a95a <RBI_GetTxConfig>
 801926e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	2b02      	cmp	r3, #2
 8019274:	d016      	beq.n	80192a4 <SUBGRF_SetRfTxPower+0x48>
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	2b02      	cmp	r3, #2
 801927a:	dc16      	bgt.n	80192aa <SUBGRF_SetRfTxPower+0x4e>
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d003      	beq.n	801928a <SUBGRF_SetRfTxPower+0x2e>
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	2b01      	cmp	r3, #1
 8019286:	d00a      	beq.n	801929e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019288:	e00f      	b.n	80192aa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801928a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801928e:	2b0f      	cmp	r3, #15
 8019290:	dd02      	ble.n	8019298 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019292:	2302      	movs	r3, #2
 8019294:	73fb      	strb	r3, [r7, #15]
            break;
 8019296:	e009      	b.n	80192ac <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019298:	2301      	movs	r3, #1
 801929a:	73fb      	strb	r3, [r7, #15]
            break;
 801929c:	e006      	b.n	80192ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801929e:	2301      	movs	r3, #1
 80192a0:	73fb      	strb	r3, [r7, #15]
            break;
 80192a2:	e003      	b.n	80192ac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80192a4:	2302      	movs	r3, #2
 80192a6:	73fb      	strb	r3, [r7, #15]
            break;
 80192a8:	e000      	b.n	80192ac <SUBGRF_SetRfTxPower+0x50>
            break;
 80192aa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80192ac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80192b0:	7bfb      	ldrb	r3, [r7, #15]
 80192b2:	2202      	movs	r2, #2
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7ff fc3b 	bl	8018b30 <SUBGRF_SetTxParams>

    return paSelect;
 80192ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80192bc:	4618      	mov	r0, r3
 80192be:	3710      	adds	r7, #16
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}

080192c4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80192c4:	b480      	push	{r7}
 80192c6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80192c8:	2301      	movs	r3, #1
}
 80192ca:	4618      	mov	r0, r3
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bc80      	pop	{r7}
 80192d0:	4770      	bx	lr
	...

080192d4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b082      	sub	sp, #8
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80192dc:	4b03      	ldr	r3, [pc, #12]	; (80192ec <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	2001      	movs	r0, #1
 80192e2:	4798      	blx	r3
}
 80192e4:	bf00      	nop
 80192e6:	3708      	adds	r7, #8
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	20000fd8 	.word	0x20000fd8

080192f0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b082      	sub	sp, #8
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80192f8:	4b03      	ldr	r3, [pc, #12]	; (8019308 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2002      	movs	r0, #2
 80192fe:	4798      	blx	r3
}
 8019300:	bf00      	nop
 8019302:	3708      	adds	r7, #8
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}
 8019308:	20000fd8 	.word	0x20000fd8

0801930c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019314:	4b03      	ldr	r3, [pc, #12]	; (8019324 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	2040      	movs	r0, #64	; 0x40
 801931a:	4798      	blx	r3
}
 801931c:	bf00      	nop
 801931e:	3708      	adds	r7, #8
 8019320:	46bd      	mov	sp, r7
 8019322:	bd80      	pop	{r7, pc}
 8019324:	20000fd8 	.word	0x20000fd8

08019328 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
 8019330:	460b      	mov	r3, r1
 8019332:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019334:	78fb      	ldrb	r3, [r7, #3]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d002      	beq.n	8019340 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801933a:	2b01      	cmp	r3, #1
 801933c:	d005      	beq.n	801934a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801933e:	e00a      	b.n	8019356 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019340:	4b07      	ldr	r3, [pc, #28]	; (8019360 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	2080      	movs	r0, #128	; 0x80
 8019346:	4798      	blx	r3
            break;
 8019348:	e005      	b.n	8019356 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801934a:	4b05      	ldr	r3, [pc, #20]	; (8019360 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019352:	4798      	blx	r3
            break;
 8019354:	bf00      	nop
    }
}
 8019356:	bf00      	nop
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
 801935e:	bf00      	nop
 8019360:	20000fd8 	.word	0x20000fd8

08019364 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801936c:	4b04      	ldr	r3, [pc, #16]	; (8019380 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019374:	4798      	blx	r3
}
 8019376:	bf00      	nop
 8019378:	3708      	adds	r7, #8
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	20000fd8 	.word	0x20000fd8

08019384 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b082      	sub	sp, #8
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801938c:	4b03      	ldr	r3, [pc, #12]	; (801939c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	2020      	movs	r0, #32
 8019392:	4798      	blx	r3
}
 8019394:	bf00      	nop
 8019396:	3708      	adds	r7, #8
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}
 801939c:	20000fd8 	.word	0x20000fd8

080193a0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80193a8:	4b03      	ldr	r3, [pc, #12]	; (80193b8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2004      	movs	r0, #4
 80193ae:	4798      	blx	r3
}
 80193b0:	bf00      	nop
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	20000fd8 	.word	0x20000fd8

080193bc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80193c4:	4b03      	ldr	r3, [pc, #12]	; (80193d4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	2008      	movs	r0, #8
 80193ca:	4798      	blx	r3
}
 80193cc:	bf00      	nop
 80193ce:	3708      	adds	r7, #8
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	20000fd8 	.word	0x20000fd8

080193d8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80193e0:	4b03      	ldr	r3, [pc, #12]	; (80193f0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2010      	movs	r0, #16
 80193e6:	4798      	blx	r3
}
 80193e8:	bf00      	nop
 80193ea:	3708      	adds	r7, #8
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	20000fd8 	.word	0x20000fd8

080193f4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b084      	sub	sp, #16
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	4603      	mov	r3, r0
 80193fc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80193fe:	f7f1 faba 	bl	800a976 <RBI_IsDCDC>
 8019402:	4603      	mov	r3, r0
 8019404:	2b01      	cmp	r3, #1
 8019406:	d112      	bne.n	801942e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019408:	f640 1023 	movw	r0, #2339	; 0x923
 801940c:	f7ff fe1e 	bl	801904c <SUBGRF_ReadRegister>
 8019410:	4603      	mov	r3, r0
 8019412:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019414:	7bfb      	ldrb	r3, [r7, #15]
 8019416:	f023 0306 	bic.w	r3, r3, #6
 801941a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801941c:	7bfa      	ldrb	r2, [r7, #15]
 801941e:	79fb      	ldrb	r3, [r7, #7]
 8019420:	4313      	orrs	r3, r2
 8019422:	b2db      	uxtb	r3, r3
 8019424:	4619      	mov	r1, r3
 8019426:	f640 1023 	movw	r0, #2339	; 0x923
 801942a:	f7ff fdfb 	bl	8019024 <SUBGRF_WriteRegister>
  }
}
 801942e:	bf00      	nop
 8019430:	3710      	adds	r7, #16
 8019432:	46bd      	mov	sp, r7
 8019434:	bd80      	pop	{r7, pc}
	...

08019438 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019438:	b480      	push	{r7}
 801943a:	b085      	sub	sp, #20
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d101      	bne.n	801944a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019446:	231f      	movs	r3, #31
 8019448:	e016      	b.n	8019478 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801944a:	2300      	movs	r3, #0
 801944c:	73fb      	strb	r3, [r7, #15]
 801944e:	e00f      	b.n	8019470 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019450:	7bfb      	ldrb	r3, [r7, #15]
 8019452:	4a0c      	ldr	r2, [pc, #48]	; (8019484 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019458:	687a      	ldr	r2, [r7, #4]
 801945a:	429a      	cmp	r2, r3
 801945c:	d205      	bcs.n	801946a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801945e:	7bfb      	ldrb	r3, [r7, #15]
 8019460:	4a08      	ldr	r2, [pc, #32]	; (8019484 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	4413      	add	r3, r2
 8019466:	791b      	ldrb	r3, [r3, #4]
 8019468:	e006      	b.n	8019478 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801946a:	7bfb      	ldrb	r3, [r7, #15]
 801946c:	3301      	adds	r3, #1
 801946e:	73fb      	strb	r3, [r7, #15]
 8019470:	7bfb      	ldrb	r3, [r7, #15]
 8019472:	2b15      	cmp	r3, #21
 8019474:	d9ec      	bls.n	8019450 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019476:	e7fe      	b.n	8019476 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019478:	4618      	mov	r0, r3
 801947a:	3714      	adds	r7, #20
 801947c:	46bd      	mov	sp, r7
 801947e:	bc80      	pop	{r7}
 8019480:	4770      	bx	lr
 8019482:	bf00      	nop
 8019484:	0801bc4c 	.word	0x0801bc4c

08019488 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b08a      	sub	sp, #40	; 0x28
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019492:	4b36      	ldr	r3, [pc, #216]	; (801956c <SUBGRF_GetCFO+0xe4>)
 8019494:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8019496:	f640 0007 	movw	r0, #2055	; 0x807
 801949a:	f7ff fdd7 	bl	801904c <SUBGRF_ReadRegister>
 801949e:	4603      	mov	r3, r0
 80194a0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80194a2:	7ffb      	ldrb	r3, [r7, #31]
 80194a4:	08db      	lsrs	r3, r3, #3
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	f003 0303 	and.w	r3, r3, #3
 80194ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80194b0:	4413      	add	r3, r2
 80194b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80194b6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80194b8:	7ffb      	ldrb	r3, [r7, #31]
 80194ba:	f003 0307 	and.w	r3, r3, #7
 80194be:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 80194c0:	7fba      	ldrb	r2, [r7, #30]
 80194c2:	7f7b      	ldrb	r3, [r7, #29]
 80194c4:	3b01      	subs	r3, #1
 80194c6:	fa02 f303 	lsl.w	r3, r2, r3
 80194ca:	461a      	mov	r2, r3
 80194cc:	4b28      	ldr	r3, [pc, #160]	; (8019570 <SUBGRF_GetCFO+0xe8>)
 80194ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80194d2:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80194d4:	69ba      	ldr	r2, [r7, #24]
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80194dc:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80194de:	2301      	movs	r3, #1
 80194e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80194e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194e8:	697a      	ldr	r2, [r7, #20]
 80194ea:	fb02 f303 	mul.w	r3, r2, r3
 80194ee:	2b07      	cmp	r3, #7
 80194f0:	d802      	bhi.n	80194f8 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80194f2:	2302      	movs	r3, #2
 80194f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80194f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194fc:	697a      	ldr	r2, [r7, #20]
 80194fe:	fb02 f303 	mul.w	r3, r2, r3
 8019502:	2b03      	cmp	r3, #3
 8019504:	d802      	bhi.n	801950c <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8019506:	2304      	movs	r3, #4
 8019508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801950c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8019510:	69bb      	ldr	r3, [r7, #24]
 8019512:	fb02 f303 	mul.w	r3, r2, r3
 8019516:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8019518:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801951c:	f7ff fd96 	bl	801904c <SUBGRF_ReadRegister>
 8019520:	4603      	mov	r3, r0
 8019522:	021b      	lsls	r3, r3, #8
 8019524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019528:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801952a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801952e:	f7ff fd8d 	bl	801904c <SUBGRF_ReadRegister>
 8019532:	4603      	mov	r3, r0
 8019534:	461a      	mov	r2, r3
 8019536:	6a3b      	ldr	r3, [r7, #32]
 8019538:	4313      	orrs	r3, r2
 801953a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801953c:	6a3b      	ldr	r3, [r7, #32]
 801953e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019542:	2b00      	cmp	r3, #0
 8019544:	d005      	beq.n	8019552 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8019546:	6a3b      	ldr	r3, [r7, #32]
 8019548:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801954c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019550:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019552:	693b      	ldr	r3, [r7, #16]
 8019554:	095b      	lsrs	r3, r3, #5
 8019556:	6a3a      	ldr	r2, [r7, #32]
 8019558:	fb02 f303 	mul.w	r3, r2, r3
 801955c:	11da      	asrs	r2, r3, #7
 801955e:	683b      	ldr	r3, [r7, #0]
 8019560:	601a      	str	r2, [r3, #0]
}
 8019562:	bf00      	nop
 8019564:	3728      	adds	r7, #40	; 0x28
 8019566:	46bd      	mov	sp, r7
 8019568:	bd80      	pop	{r7, pc}
 801956a:	bf00      	nop
 801956c:	0c0a0804 	.word	0x0c0a0804
 8019570:	01e84800 	.word	0x01e84800

08019574 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019574:	b480      	push	{r7}
 8019576:	b087      	sub	sp, #28
 8019578:	af00      	add	r7, sp, #0
 801957a:	4603      	mov	r3, r0
 801957c:	60b9      	str	r1, [r7, #8]
 801957e:	607a      	str	r2, [r7, #4]
 8019580:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019582:	2300      	movs	r3, #0
 8019584:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019586:	f04f 33ff 	mov.w	r3, #4294967295
 801958a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801958c:	697b      	ldr	r3, [r7, #20]
}
 801958e:	4618      	mov	r0, r3
 8019590:	371c      	adds	r7, #28
 8019592:	46bd      	mov	sp, r7
 8019594:	bc80      	pop	{r7}
 8019596:	4770      	bx	lr

08019598 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019598:	b480      	push	{r7}
 801959a:	b087      	sub	sp, #28
 801959c:	af00      	add	r7, sp, #0
 801959e:	4603      	mov	r3, r0
 80195a0:	60b9      	str	r1, [r7, #8]
 80195a2:	607a      	str	r2, [r7, #4]
 80195a4:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 80195aa:	f04f 33ff 	mov.w	r3, #4294967295
 80195ae:	617b      	str	r3, [r7, #20]
#endif
  return status;
 80195b0:	697b      	ldr	r3, [r7, #20]
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	371c      	adds	r7, #28
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bc80      	pop	{r7}
 80195ba:	4770      	bx	lr

080195bc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 80195bc:	b480      	push	{r7}
 80195be:	b085      	sub	sp, #20
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	60f8      	str	r0, [r7, #12]
 80195c4:	60b9      	str	r1, [r7, #8]
 80195c6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 80195c8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80195cc:	4618      	mov	r0, r3
 80195ce:	3714      	adds	r7, #20
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bc80      	pop	{r7}
 80195d4:	4770      	bx	lr

080195d6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 80195d6:	b480      	push	{r7}
 80195d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80195da:	bf00      	nop
 80195dc:	46bd      	mov	sp, r7
 80195de:	bc80      	pop	{r7}
 80195e0:	4770      	bx	lr

080195e2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80195e2:	b480      	push	{r7}
 80195e4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80195e6:	2300      	movs	r3, #0
#endif
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bc80      	pop	{r7}
 80195ee:	4770      	bx	lr

080195f0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80195f0:	b480      	push	{r7}
 80195f2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80195f4:	2300      	movs	r3, #0
#endif
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bc80      	pop	{r7}
 80195fc:	4770      	bx	lr

080195fe <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80195fe:	b480      	push	{r7}
 8019600:	b083      	sub	sp, #12
 8019602:	af00      	add	r7, sp, #0
 8019604:	4603      	mov	r3, r0
 8019606:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019608:	bf00      	nop
 801960a:	370c      	adds	r7, #12
 801960c:	46bd      	mov	sp, r7
 801960e:	bc80      	pop	{r7}
 8019610:	4770      	bx	lr

08019612 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019612:	b480      	push	{r7}
 8019614:	b087      	sub	sp, #28
 8019616:	af00      	add	r7, sp, #0
 8019618:	60f8      	str	r0, [r7, #12]
 801961a:	460b      	mov	r3, r1
 801961c:	607a      	str	r2, [r7, #4]
 801961e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019620:	f04f 33ff 	mov.w	r3, #4294967295
 8019624:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8019626:	697b      	ldr	r3, [r7, #20]
}
 8019628:	4618      	mov	r0, r3
 801962a:	371c      	adds	r7, #28
 801962c:	46bd      	mov	sp, r7
 801962e:	bc80      	pop	{r7}
 8019630:	4770      	bx	lr

08019632 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019632:	b480      	push	{r7}
 8019634:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019636:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801963a:	4618      	mov	r0, r3
 801963c:	46bd      	mov	sp, r7
 801963e:	bc80      	pop	{r7}
 8019640:	4770      	bx	lr

08019642 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019642:	b480      	push	{r7}
 8019644:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019646:	bf00      	nop
 8019648:	46bd      	mov	sp, r7
 801964a:	bc80      	pop	{r7}
 801964c:	4770      	bx	lr

0801964e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801964e:	b480      	push	{r7}
 8019650:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019652:	bf00      	nop
 8019654:	46bd      	mov	sp, r7
 8019656:	bc80      	pop	{r7}
 8019658:	4770      	bx	lr

0801965a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801965a:	b480      	push	{r7}
 801965c:	b083      	sub	sp, #12
 801965e:	af00      	add	r7, sp, #0
 8019660:	4603      	mov	r3, r0
 8019662:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019664:	bf00      	nop
 8019666:	370c      	adds	r7, #12
 8019668:	46bd      	mov	sp, r7
 801966a:	bc80      	pop	{r7}
 801966c:	4770      	bx	lr
	...

08019670 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019670:	b480      	push	{r7}
 8019672:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019674:	4b04      	ldr	r3, [pc, #16]	; (8019688 <UTIL_LPM_Init+0x18>)
 8019676:	2200      	movs	r2, #0
 8019678:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801967a:	4b04      	ldr	r3, [pc, #16]	; (801968c <UTIL_LPM_Init+0x1c>)
 801967c:	2200      	movs	r2, #0
 801967e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019680:	bf00      	nop
 8019682:	46bd      	mov	sp, r7
 8019684:	bc80      	pop	{r7}
 8019686:	4770      	bx	lr
 8019688:	20000fdc 	.word	0x20000fdc
 801968c:	20000fe0 	.word	0x20000fe0

08019690 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019690:	b480      	push	{r7}
 8019692:	b087      	sub	sp, #28
 8019694:	af00      	add	r7, sp, #0
 8019696:	6078      	str	r0, [r7, #4]
 8019698:	460b      	mov	r3, r1
 801969a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801969c:	f3ef 8310 	mrs	r3, PRIMASK
 80196a0:	613b      	str	r3, [r7, #16]
  return(result);
 80196a2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80196a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196a6:	b672      	cpsid	i
}
 80196a8:	bf00      	nop
  
  switch( state )
 80196aa:	78fb      	ldrb	r3, [r7, #3]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d008      	beq.n	80196c2 <UTIL_LPM_SetStopMode+0x32>
 80196b0:	2b01      	cmp	r3, #1
 80196b2:	d10e      	bne.n	80196d2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80196b4:	4b0d      	ldr	r3, [pc, #52]	; (80196ec <UTIL_LPM_SetStopMode+0x5c>)
 80196b6:	681a      	ldr	r2, [r3, #0]
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	4313      	orrs	r3, r2
 80196bc:	4a0b      	ldr	r2, [pc, #44]	; (80196ec <UTIL_LPM_SetStopMode+0x5c>)
 80196be:	6013      	str	r3, [r2, #0]
      break;
 80196c0:	e008      	b.n	80196d4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	43da      	mvns	r2, r3
 80196c6:	4b09      	ldr	r3, [pc, #36]	; (80196ec <UTIL_LPM_SetStopMode+0x5c>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	4013      	ands	r3, r2
 80196cc:	4a07      	ldr	r2, [pc, #28]	; (80196ec <UTIL_LPM_SetStopMode+0x5c>)
 80196ce:	6013      	str	r3, [r2, #0]
      break;
 80196d0:	e000      	b.n	80196d4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80196d2:	bf00      	nop
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	f383 8810 	msr	PRIMASK, r3
}
 80196de:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80196e0:	bf00      	nop
 80196e2:	371c      	adds	r7, #28
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bc80      	pop	{r7}
 80196e8:	4770      	bx	lr
 80196ea:	bf00      	nop
 80196ec:	20000fdc 	.word	0x20000fdc

080196f0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80196f0:	b480      	push	{r7}
 80196f2:	b087      	sub	sp, #28
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
 80196f8:	460b      	mov	r3, r1
 80196fa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196fc:	f3ef 8310 	mrs	r3, PRIMASK
 8019700:	613b      	str	r3, [r7, #16]
  return(result);
 8019702:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019706:	b672      	cpsid	i
}
 8019708:	bf00      	nop
  
  switch(state)
 801970a:	78fb      	ldrb	r3, [r7, #3]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d008      	beq.n	8019722 <UTIL_LPM_SetOffMode+0x32>
 8019710:	2b01      	cmp	r3, #1
 8019712:	d10e      	bne.n	8019732 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019714:	4b0d      	ldr	r3, [pc, #52]	; (801974c <UTIL_LPM_SetOffMode+0x5c>)
 8019716:	681a      	ldr	r2, [r3, #0]
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	4313      	orrs	r3, r2
 801971c:	4a0b      	ldr	r2, [pc, #44]	; (801974c <UTIL_LPM_SetOffMode+0x5c>)
 801971e:	6013      	str	r3, [r2, #0]
      break;
 8019720:	e008      	b.n	8019734 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	43da      	mvns	r2, r3
 8019726:	4b09      	ldr	r3, [pc, #36]	; (801974c <UTIL_LPM_SetOffMode+0x5c>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	4013      	ands	r3, r2
 801972c:	4a07      	ldr	r2, [pc, #28]	; (801974c <UTIL_LPM_SetOffMode+0x5c>)
 801972e:	6013      	str	r3, [r2, #0]
      break;
 8019730:	e000      	b.n	8019734 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019732:	bf00      	nop
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	f383 8810 	msr	PRIMASK, r3
}
 801973e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019740:	bf00      	nop
 8019742:	371c      	adds	r7, #28
 8019744:	46bd      	mov	sp, r7
 8019746:	bc80      	pop	{r7}
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop
 801974c:	20000fe0 	.word	0x20000fe0

08019750 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019756:	f3ef 8310 	mrs	r3, PRIMASK
 801975a:	60bb      	str	r3, [r7, #8]
  return(result);
 801975c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801975e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019760:	b672      	cpsid	i
}
 8019762:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019764:	4b12      	ldr	r3, [pc, #72]	; (80197b0 <UTIL_LPM_EnterLowPower+0x60>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d006      	beq.n	801977a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801976c:	4b11      	ldr	r3, [pc, #68]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019772:	4b10      	ldr	r3, [pc, #64]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 8019774:	685b      	ldr	r3, [r3, #4]
 8019776:	4798      	blx	r3
 8019778:	e010      	b.n	801979c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801977a:	4b0f      	ldr	r3, [pc, #60]	; (80197b8 <UTIL_LPM_EnterLowPower+0x68>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d006      	beq.n	8019790 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019782:	4b0c      	ldr	r3, [pc, #48]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 8019784:	689b      	ldr	r3, [r3, #8]
 8019786:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019788:	4b0a      	ldr	r3, [pc, #40]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 801978a:	68db      	ldr	r3, [r3, #12]
 801978c:	4798      	blx	r3
 801978e:	e005      	b.n	801979c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019790:	4b08      	ldr	r3, [pc, #32]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 8019792:	691b      	ldr	r3, [r3, #16]
 8019794:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019796:	4b07      	ldr	r3, [pc, #28]	; (80197b4 <UTIL_LPM_EnterLowPower+0x64>)
 8019798:	695b      	ldr	r3, [r3, #20]
 801979a:	4798      	blx	r3
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f383 8810 	msr	PRIMASK, r3
}
 80197a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80197a8:	bf00      	nop
 80197aa:	3710      	adds	r7, #16
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	20000fdc 	.word	0x20000fdc
 80197b4:	0801b72c 	.word	0x0801b72c
 80197b8:	20000fe0 	.word	0x20000fe0

080197bc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80197bc:	b480      	push	{r7}
 80197be:	b087      	sub	sp, #28
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	60f8      	str	r0, [r7, #12]
 80197c4:	60b9      	str	r1, [r7, #8]
 80197c6:	4613      	mov	r3, r2
 80197c8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80197ce:	68bb      	ldr	r3, [r7, #8]
 80197d0:	613b      	str	r3, [r7, #16]

  while( size-- )
 80197d2:	e007      	b.n	80197e4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80197d4:	693a      	ldr	r2, [r7, #16]
 80197d6:	1c53      	adds	r3, r2, #1
 80197d8:	613b      	str	r3, [r7, #16]
 80197da:	697b      	ldr	r3, [r7, #20]
 80197dc:	1c59      	adds	r1, r3, #1
 80197de:	6179      	str	r1, [r7, #20]
 80197e0:	7812      	ldrb	r2, [r2, #0]
 80197e2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80197e4:	88fb      	ldrh	r3, [r7, #6]
 80197e6:	1e5a      	subs	r2, r3, #1
 80197e8:	80fa      	strh	r2, [r7, #6]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d1f2      	bne.n	80197d4 <UTIL_MEM_cpy_8+0x18>
    }
}
 80197ee:	bf00      	nop
 80197f0:	bf00      	nop
 80197f2:	371c      	adds	r7, #28
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bc80      	pop	{r7}
 80197f8:	4770      	bx	lr

080197fa <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80197fa:	b480      	push	{r7}
 80197fc:	b085      	sub	sp, #20
 80197fe:	af00      	add	r7, sp, #0
 8019800:	6078      	str	r0, [r7, #4]
 8019802:	460b      	mov	r3, r1
 8019804:	70fb      	strb	r3, [r7, #3]
 8019806:	4613      	mov	r3, r2
 8019808:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801980e:	e004      	b.n	801981a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	1c5a      	adds	r2, r3, #1
 8019814:	60fa      	str	r2, [r7, #12]
 8019816:	78fa      	ldrb	r2, [r7, #3]
 8019818:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801981a:	883b      	ldrh	r3, [r7, #0]
 801981c:	1e5a      	subs	r2, r3, #1
 801981e:	803a      	strh	r2, [r7, #0]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1f5      	bne.n	8019810 <UTIL_MEM_set_8+0x16>
  }
}
 8019824:	bf00      	nop
 8019826:	bf00      	nop
 8019828:	3714      	adds	r7, #20
 801982a:	46bd      	mov	sp, r7
 801982c:	bc80      	pop	{r7}
 801982e:	4770      	bx	lr

08019830 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019830:	b082      	sub	sp, #8
 8019832:	b480      	push	{r7}
 8019834:	b087      	sub	sp, #28
 8019836:	af00      	add	r7, sp, #0
 8019838:	60f8      	str	r0, [r7, #12]
 801983a:	1d38      	adds	r0, r7, #4
 801983c:	e880 0006 	stmia.w	r0, {r1, r2}
 8019840:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019842:	2300      	movs	r3, #0
 8019844:	613b      	str	r3, [r7, #16]
 8019846:	2300      	movs	r3, #0
 8019848:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984e:	4413      	add	r3, r2
 8019850:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019852:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019856:	b29a      	uxth	r2, r3
 8019858:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801985c:	b29b      	uxth	r3, r3
 801985e:	4413      	add	r3, r2
 8019860:	b29b      	uxth	r3, r3
 8019862:	b21b      	sxth	r3, r3
 8019864:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801986a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801986e:	db0a      	blt.n	8019886 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019870:	693b      	ldr	r3, [r7, #16]
 8019872:	3301      	adds	r3, #1
 8019874:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019876:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801987a:	b29b      	uxth	r3, r3
 801987c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8019880:	b29b      	uxth	r3, r3
 8019882:	b21b      	sxth	r3, r3
 8019884:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	461a      	mov	r2, r3
 801988a:	f107 0310 	add.w	r3, r7, #16
 801988e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019892:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019896:	68f8      	ldr	r0, [r7, #12]
 8019898:	371c      	adds	r7, #28
 801989a:	46bd      	mov	sp, r7
 801989c:	bc80      	pop	{r7}
 801989e:	b002      	add	sp, #8
 80198a0:	4770      	bx	lr

080198a2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80198a2:	b082      	sub	sp, #8
 80198a4:	b480      	push	{r7}
 80198a6:	b087      	sub	sp, #28
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	1d38      	adds	r0, r7, #4
 80198ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80198b2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80198b4:	2300      	movs	r3, #0
 80198b6:	613b      	str	r3, [r7, #16]
 80198b8:	2300      	movs	r3, #0
 80198ba:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 80198bc:	687a      	ldr	r2, [r7, #4]
 80198be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c0:	1ad3      	subs	r3, r2, r3
 80198c2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80198c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	1ad3      	subs	r3, r2, r3
 80198d2:	b29b      	uxth	r3, r3
 80198d4:	b21b      	sxth	r3, r3
 80198d6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 80198d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	da0a      	bge.n	80198f6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 80198e0:	693b      	ldr	r3, [r7, #16]
 80198e2:	3b01      	subs	r3, #1
 80198e4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 80198e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	b21b      	sxth	r3, r3
 80198f4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	461a      	mov	r2, r3
 80198fa:	f107 0310 	add.w	r3, r7, #16
 80198fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019902:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019906:	68f8      	ldr	r0, [r7, #12]
 8019908:	371c      	adds	r7, #28
 801990a:	46bd      	mov	sp, r7
 801990c:	bc80      	pop	{r7}
 801990e:	b002      	add	sp, #8
 8019910:	4770      	bx	lr
	...

08019914 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019914:	b580      	push	{r7, lr}
 8019916:	b088      	sub	sp, #32
 8019918:	af02      	add	r7, sp, #8
 801991a:	463b      	mov	r3, r7
 801991c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019920:	2300      	movs	r3, #0
 8019922:	60bb      	str	r3, [r7, #8]
 8019924:	2300      	movs	r3, #0
 8019926:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019928:	4b10      	ldr	r3, [pc, #64]	; (801996c <SysTimeSet+0x58>)
 801992a:	691b      	ldr	r3, [r3, #16]
 801992c:	f107 0208 	add.w	r2, r7, #8
 8019930:	3204      	adds	r2, #4
 8019932:	4610      	mov	r0, r2
 8019934:	4798      	blx	r3
 8019936:	4603      	mov	r3, r0
 8019938:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801993a:	f107 0010 	add.w	r0, r7, #16
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	9300      	str	r3, [sp, #0]
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	463a      	mov	r2, r7
 8019946:	ca06      	ldmia	r2, {r1, r2}
 8019948:	f7ff ffab 	bl	80198a2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801994c:	4b07      	ldr	r3, [pc, #28]	; (801996c <SysTimeSet+0x58>)
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	693a      	ldr	r2, [r7, #16]
 8019952:	4610      	mov	r0, r2
 8019954:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019956:	4b05      	ldr	r3, [pc, #20]	; (801996c <SysTimeSet+0x58>)
 8019958:	689b      	ldr	r3, [r3, #8]
 801995a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801995e:	4610      	mov	r0, r2
 8019960:	4798      	blx	r3
}
 8019962:	bf00      	nop
 8019964:	3718      	adds	r7, #24
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}
 801996a:	bf00      	nop
 801996c:	0801b810 	.word	0x0801b810

08019970 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b08a      	sub	sp, #40	; 0x28
 8019974:	af02      	add	r7, sp, #8
 8019976:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019978:	2300      	movs	r3, #0
 801997a:	61bb      	str	r3, [r7, #24]
 801997c:	2300      	movs	r3, #0
 801997e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019980:	2300      	movs	r3, #0
 8019982:	613b      	str	r3, [r7, #16]
 8019984:	2300      	movs	r3, #0
 8019986:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019988:	4b14      	ldr	r3, [pc, #80]	; (80199dc <SysTimeGet+0x6c>)
 801998a:	691b      	ldr	r3, [r3, #16]
 801998c:	f107 0218 	add.w	r2, r7, #24
 8019990:	3204      	adds	r2, #4
 8019992:	4610      	mov	r0, r2
 8019994:	4798      	blx	r3
 8019996:	4603      	mov	r3, r0
 8019998:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801999a:	4b10      	ldr	r3, [pc, #64]	; (80199dc <SysTimeGet+0x6c>)
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	4798      	blx	r3
 80199a0:	4603      	mov	r3, r0
 80199a2:	b21b      	sxth	r3, r3
 80199a4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80199a6:	4b0d      	ldr	r3, [pc, #52]	; (80199dc <SysTimeGet+0x6c>)
 80199a8:	685b      	ldr	r3, [r3, #4]
 80199aa:	4798      	blx	r3
 80199ac:	4603      	mov	r3, r0
 80199ae:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80199b0:	f107 0010 	add.w	r0, r7, #16
 80199b4:	69fb      	ldr	r3, [r7, #28]
 80199b6:	9300      	str	r3, [sp, #0]
 80199b8:	69bb      	ldr	r3, [r7, #24]
 80199ba:	f107 0208 	add.w	r2, r7, #8
 80199be:	ca06      	ldmia	r2, {r1, r2}
 80199c0:	f7ff ff36 	bl	8019830 <SysTimeAdd>

  return sysTime;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	461a      	mov	r2, r3
 80199c8:	f107 0310 	add.w	r3, r7, #16
 80199cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80199d4:	6878      	ldr	r0, [r7, #4]
 80199d6:	3720      	adds	r7, #32
 80199d8:	46bd      	mov	sp, r7
 80199da:	bd80      	pop	{r7, pc}
 80199dc:	0801b810 	.word	0x0801b810

080199e0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80199e8:	2300      	movs	r3, #0
 80199ea:	60bb      	str	r3, [r7, #8]
 80199ec:	2300      	movs	r3, #0
 80199ee:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80199f0:	4b0a      	ldr	r3, [pc, #40]	; (8019a1c <SysTimeGetMcuTime+0x3c>)
 80199f2:	691b      	ldr	r3, [r3, #16]
 80199f4:	f107 0208 	add.w	r2, r7, #8
 80199f8:	3204      	adds	r2, #4
 80199fa:	4610      	mov	r0, r2
 80199fc:	4798      	blx	r3
 80199fe:	4603      	mov	r3, r0
 8019a00:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	461a      	mov	r2, r3
 8019a06:	f107 0308 	add.w	r3, r7, #8
 8019a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a0e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a12:	6878      	ldr	r0, [r7, #4]
 8019a14:	3710      	adds	r7, #16
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
 8019a1a:	bf00      	nop
 8019a1c:	0801b810 	.word	0x0801b810

08019a20 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b088      	sub	sp, #32
 8019a24:	af02      	add	r7, sp, #8
 8019a26:	463b      	mov	r3, r7
 8019a28:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a2c:	4b0f      	ldr	r3, [pc, #60]	; (8019a6c <SysTimeToMs+0x4c>)
 8019a2e:	68db      	ldr	r3, [r3, #12]
 8019a30:	4798      	blx	r3
 8019a32:	4603      	mov	r3, r0
 8019a34:	b21b      	sxth	r3, r3
 8019a36:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019a38:	4b0c      	ldr	r3, [pc, #48]	; (8019a6c <SysTimeToMs+0x4c>)
 8019a3a:	685b      	ldr	r3, [r3, #4]
 8019a3c:	4798      	blx	r3
 8019a3e:	4603      	mov	r3, r0
 8019a40:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019a42:	f107 0008 	add.w	r0, r7, #8
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	9300      	str	r3, [sp, #0]
 8019a4a:	693b      	ldr	r3, [r7, #16]
 8019a4c:	463a      	mov	r2, r7
 8019a4e:	ca06      	ldmia	r2, {r1, r2}
 8019a50:	f7ff ff27 	bl	80198a2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a5a:	fb02 f303 	mul.w	r3, r2, r3
 8019a5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019a62:	4413      	add	r3, r2
}
 8019a64:	4618      	mov	r0, r3
 8019a66:	3718      	adds	r7, #24
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	0801b810 	.word	0x0801b810

08019a70 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b08a      	sub	sp, #40	; 0x28
 8019a74:	af02      	add	r7, sp, #8
 8019a76:	6078      	str	r0, [r7, #4]
 8019a78:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019a7a:	683b      	ldr	r3, [r7, #0]
 8019a7c:	4a19      	ldr	r2, [pc, #100]	; (8019ae4 <SysTimeFromMs+0x74>)
 8019a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8019a82:	099b      	lsrs	r3, r3, #6
 8019a84:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019a86:	69fb      	ldr	r3, [r7, #28]
 8019a88:	617b      	str	r3, [r7, #20]
 8019a8a:	683b      	ldr	r3, [r7, #0]
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	69fb      	ldr	r3, [r7, #28]
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	4619      	mov	r1, r3
 8019a94:	0149      	lsls	r1, r1, #5
 8019a96:	1ac9      	subs	r1, r1, r3
 8019a98:	0089      	lsls	r1, r1, #2
 8019a9a:	440b      	add	r3, r1
 8019a9c:	00db      	lsls	r3, r3, #3
 8019a9e:	b29b      	uxth	r3, r3
 8019aa0:	1ad3      	subs	r3, r2, r3
 8019aa2:	b29b      	uxth	r3, r3
 8019aa4:	b21b      	sxth	r3, r3
 8019aa6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019aa8:	f107 030c 	add.w	r3, r7, #12
 8019aac:	2200      	movs	r2, #0
 8019aae:	601a      	str	r2, [r3, #0]
 8019ab0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019ab2:	4b0d      	ldr	r3, [pc, #52]	; (8019ae8 <SysTimeFromMs+0x78>)
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	4798      	blx	r3
 8019ab8:	4603      	mov	r3, r0
 8019aba:	b21b      	sxth	r3, r3
 8019abc:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019abe:	4b0a      	ldr	r3, [pc, #40]	; (8019ae8 <SysTimeFromMs+0x78>)
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	4798      	blx	r3
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	693b      	ldr	r3, [r7, #16]
 8019acc:	9300      	str	r3, [sp, #0]
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	f107 0214 	add.w	r2, r7, #20
 8019ad4:	ca06      	ldmia	r2, {r1, r2}
 8019ad6:	f7ff feab 	bl	8019830 <SysTimeAdd>
}
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	3720      	adds	r7, #32
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	10624dd3 	.word	0x10624dd3
 8019ae8:	0801b810 	.word	0x0801b810

08019aec <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019aec:	b480      	push	{r7}
 8019aee:	b085      	sub	sp, #20
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019af4:	2300      	movs	r3, #0
 8019af6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019af8:	e00e      	b.n	8019b18 <ee_skip_atoi+0x2c>
 8019afa:	68fa      	ldr	r2, [r7, #12]
 8019afc:	4613      	mov	r3, r2
 8019afe:	009b      	lsls	r3, r3, #2
 8019b00:	4413      	add	r3, r2
 8019b02:	005b      	lsls	r3, r3, #1
 8019b04:	4618      	mov	r0, r3
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	1c59      	adds	r1, r3, #1
 8019b0c:	687a      	ldr	r2, [r7, #4]
 8019b0e:	6011      	str	r1, [r2, #0]
 8019b10:	781b      	ldrb	r3, [r3, #0]
 8019b12:	4403      	add	r3, r0
 8019b14:	3b30      	subs	r3, #48	; 0x30
 8019b16:	60fb      	str	r3, [r7, #12]
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	2b2f      	cmp	r3, #47	; 0x2f
 8019b20:	d904      	bls.n	8019b2c <ee_skip_atoi+0x40>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	2b39      	cmp	r3, #57	; 0x39
 8019b2a:	d9e6      	bls.n	8019afa <ee_skip_atoi+0xe>
  return i;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
}
 8019b2e:	4618      	mov	r0, r3
 8019b30:	3714      	adds	r7, #20
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bc80      	pop	{r7}
 8019b36:	4770      	bx	lr

08019b38 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019b38:	b480      	push	{r7}
 8019b3a:	b099      	sub	sp, #100	; 0x64
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	60f8      	str	r0, [r7, #12]
 8019b40:	60b9      	str	r1, [r7, #8]
 8019b42:	607a      	str	r2, [r7, #4]
 8019b44:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019b46:	4b72      	ldr	r3, [pc, #456]	; (8019d10 <ee_number+0x1d8>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d002      	beq.n	8019b5c <ee_number+0x24>
 8019b56:	4b6f      	ldr	r3, [pc, #444]	; (8019d14 <ee_number+0x1dc>)
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	2b01      	cmp	r3, #1
 8019b60:	dd02      	ble.n	8019b68 <ee_number+0x30>
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	2b24      	cmp	r3, #36	; 0x24
 8019b66:	dd01      	ble.n	8019b6c <ee_number+0x34>
 8019b68:	2300      	movs	r3, #0
 8019b6a:	e0cc      	b.n	8019d06 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b6e:	f003 0301 	and.w	r3, r3, #1
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d001      	beq.n	8019b7a <ee_number+0x42>
 8019b76:	2330      	movs	r3, #48	; 0x30
 8019b78:	e000      	b.n	8019b7c <ee_number+0x44>
 8019b7a:	2320      	movs	r3, #32
 8019b7c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019b80:	2300      	movs	r3, #0
 8019b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b88:	f003 0302 	and.w	r3, r3, #2
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d00b      	beq.n	8019ba8 <ee_number+0x70>
  {
    if (num < 0)
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	da08      	bge.n	8019ba8 <ee_number+0x70>
    {
      sign = '-';
 8019b96:	232d      	movs	r3, #45	; 0x2d
 8019b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	425b      	negs	r3, r3
 8019ba0:	607b      	str	r3, [r7, #4]
      size--;
 8019ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ba4:	3b01      	subs	r3, #1
 8019ba6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d120      	bne.n	8019bf4 <ee_number+0xbc>
    tmp[i++] = '0';
 8019bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bb4:	1c5a      	adds	r2, r3, #1
 8019bb6:	657a      	str	r2, [r7, #84]	; 0x54
 8019bb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019bbc:	4413      	add	r3, r2
 8019bbe:	2230      	movs	r2, #48	; 0x30
 8019bc0:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019bc4:	e019      	b.n	8019bfa <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	683a      	ldr	r2, [r7, #0]
 8019bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8019bce:	fb02 f201 	mul.w	r2, r2, r1
 8019bd2:	1a9b      	subs	r3, r3, r2
 8019bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019bd6:	441a      	add	r2, r3
 8019bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019bda:	1c59      	adds	r1, r3, #1
 8019bdc:	6579      	str	r1, [r7, #84]	; 0x54
 8019bde:	7812      	ldrb	r2, [r2, #0]
 8019be0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019be4:	440b      	add	r3, r1
 8019be6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bf2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d1e5      	bne.n	8019bc6 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bfe:	429a      	cmp	r2, r3
 8019c00:	dd01      	ble.n	8019c06 <ee_number+0xce>
 8019c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c04:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c0a:	1ad3      	subs	r3, r2, r3
 8019c0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c10:	f003 0301 	and.w	r3, r3, #1
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d112      	bne.n	8019c3e <ee_number+0x106>
 8019c18:	e00c      	b.n	8019c34 <ee_number+0xfc>
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	1c5a      	adds	r2, r3, #1
 8019c1e:	60fa      	str	r2, [r7, #12]
 8019c20:	2220      	movs	r2, #32
 8019c22:	701a      	strb	r2, [r3, #0]
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	3b01      	subs	r3, #1
 8019c28:	60bb      	str	r3, [r7, #8]
 8019c2a:	68bb      	ldr	r3, [r7, #8]
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d101      	bne.n	8019c34 <ee_number+0xfc>
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	e068      	b.n	8019d06 <ee_number+0x1ce>
 8019c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c36:	1e5a      	subs	r2, r3, #1
 8019c38:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	dced      	bgt.n	8019c1a <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d01b      	beq.n	8019c7e <ee_number+0x146>
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	1c5a      	adds	r2, r3, #1
 8019c4a:	60fa      	str	r2, [r7, #12]
 8019c4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019c50:	701a      	strb	r2, [r3, #0]
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	3b01      	subs	r3, #1
 8019c56:	60bb      	str	r3, [r7, #8]
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d10f      	bne.n	8019c7e <ee_number+0x146>
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	e051      	b.n	8019d06 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	1c5a      	adds	r2, r3, #1
 8019c66:	60fa      	str	r2, [r7, #12]
 8019c68:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019c6c:	701a      	strb	r2, [r3, #0]
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	3b01      	subs	r3, #1
 8019c72:	60bb      	str	r3, [r7, #8]
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d101      	bne.n	8019c7e <ee_number+0x146>
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	e043      	b.n	8019d06 <ee_number+0x1ce>
 8019c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c80:	1e5a      	subs	r2, r3, #1
 8019c82:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dcec      	bgt.n	8019c62 <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019c88:	e00c      	b.n	8019ca4 <ee_number+0x16c>
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	1c5a      	adds	r2, r3, #1
 8019c8e:	60fa      	str	r2, [r7, #12]
 8019c90:	2230      	movs	r2, #48	; 0x30
 8019c92:	701a      	strb	r2, [r3, #0]
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	3b01      	subs	r3, #1
 8019c98:	60bb      	str	r3, [r7, #8]
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d101      	bne.n	8019ca4 <ee_number+0x16c>
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	e030      	b.n	8019d06 <ee_number+0x1ce>
 8019ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ca6:	1e5a      	subs	r2, r3, #1
 8019ca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019caa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019cac:	429a      	cmp	r2, r3
 8019cae:	dbec      	blt.n	8019c8a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019cb0:	e010      	b.n	8019cd4 <ee_number+0x19c>
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	1c5a      	adds	r2, r3, #1
 8019cb6:	60fa      	str	r2, [r7, #12]
 8019cb8:	f107 0110 	add.w	r1, r7, #16
 8019cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019cbe:	440a      	add	r2, r1
 8019cc0:	7812      	ldrb	r2, [r2, #0]
 8019cc2:	701a      	strb	r2, [r3, #0]
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	3b01      	subs	r3, #1
 8019cc8:	60bb      	str	r3, [r7, #8]
 8019cca:	68bb      	ldr	r3, [r7, #8]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d101      	bne.n	8019cd4 <ee_number+0x19c>
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	e018      	b.n	8019d06 <ee_number+0x1ce>
 8019cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019cd6:	1e5a      	subs	r2, r3, #1
 8019cd8:	657a      	str	r2, [r7, #84]	; 0x54
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	dce9      	bgt.n	8019cb2 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019cde:	e00c      	b.n	8019cfa <ee_number+0x1c2>
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	1c5a      	adds	r2, r3, #1
 8019ce4:	60fa      	str	r2, [r7, #12]
 8019ce6:	2220      	movs	r2, #32
 8019ce8:	701a      	strb	r2, [r3, #0]
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	3b01      	subs	r3, #1
 8019cee:	60bb      	str	r3, [r7, #8]
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d101      	bne.n	8019cfa <ee_number+0x1c2>
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	e005      	b.n	8019d06 <ee_number+0x1ce>
 8019cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019cfc:	1e5a      	subs	r2, r3, #1
 8019cfe:	66ba      	str	r2, [r7, #104]	; 0x68
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	dced      	bgt.n	8019ce0 <ee_number+0x1a8>

  return str;
 8019d04:	68fb      	ldr	r3, [r7, #12]
}
 8019d06:	4618      	mov	r0, r3
 8019d08:	3764      	adds	r7, #100	; 0x64
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bc80      	pop	{r7}
 8019d0e:	4770      	bx	lr
 8019d10:	20000124 	.word	0x20000124
 8019d14:	20000128 	.word	0x20000128

08019d18 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b092      	sub	sp, #72	; 0x48
 8019d1c:	af04      	add	r7, sp, #16
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	60b9      	str	r1, [r7, #8]
 8019d22:	607a      	str	r2, [r7, #4]
 8019d24:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	dc01      	bgt.n	8019d30 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	e142      	b.n	8019fb6 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d34:	e12a      	b.n	8019f8c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	1ad2      	subs	r2, r2, r3
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	3b01      	subs	r3, #1
 8019d40:	429a      	cmp	r2, r3
 8019d42:	f280 8131 	bge.w	8019fa8 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	2b25      	cmp	r3, #37	; 0x25
 8019d4c:	d006      	beq.n	8019d5c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019d4e:	687a      	ldr	r2, [r7, #4]
 8019d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d52:	1c59      	adds	r1, r3, #1
 8019d54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d56:	7812      	ldrb	r2, [r2, #0]
 8019d58:	701a      	strb	r2, [r3, #0]
      continue;
 8019d5a:	e114      	b.n	8019f86 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	3301      	adds	r3, #1
 8019d64:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	2b30      	cmp	r3, #48	; 0x30
 8019d6c:	d103      	bne.n	8019d76 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019d6e:	6a3b      	ldr	r3, [r7, #32]
 8019d70:	f043 0301 	orr.w	r3, r3, #1
 8019d74:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019d76:	f04f 33ff 	mov.w	r3, #4294967295
 8019d7a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	2b2f      	cmp	r3, #47	; 0x2f
 8019d82:	d908      	bls.n	8019d96 <tiny_vsnprintf_like+0x7e>
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	781b      	ldrb	r3, [r3, #0]
 8019d88:	2b39      	cmp	r3, #57	; 0x39
 8019d8a:	d804      	bhi.n	8019d96 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019d8c:	1d3b      	adds	r3, r7, #4
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f7ff feac 	bl	8019aec <ee_skip_atoi>
 8019d94:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019d96:	f04f 33ff 	mov.w	r3, #4294967295
 8019d9a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019da0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019da2:	230a      	movs	r3, #10
 8019da4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	3b58      	subs	r3, #88	; 0x58
 8019dac:	2b20      	cmp	r3, #32
 8019dae:	f200 8094 	bhi.w	8019eda <tiny_vsnprintf_like+0x1c2>
 8019db2:	a201      	add	r2, pc, #4	; (adr r2, 8019db8 <tiny_vsnprintf_like+0xa0>)
 8019db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019db8:	08019ec3 	.word	0x08019ec3
 8019dbc:	08019edb 	.word	0x08019edb
 8019dc0:	08019edb 	.word	0x08019edb
 8019dc4:	08019edb 	.word	0x08019edb
 8019dc8:	08019edb 	.word	0x08019edb
 8019dcc:	08019edb 	.word	0x08019edb
 8019dd0:	08019edb 	.word	0x08019edb
 8019dd4:	08019edb 	.word	0x08019edb
 8019dd8:	08019edb 	.word	0x08019edb
 8019ddc:	08019edb 	.word	0x08019edb
 8019de0:	08019edb 	.word	0x08019edb
 8019de4:	08019e47 	.word	0x08019e47
 8019de8:	08019ed1 	.word	0x08019ed1
 8019dec:	08019edb 	.word	0x08019edb
 8019df0:	08019edb 	.word	0x08019edb
 8019df4:	08019edb 	.word	0x08019edb
 8019df8:	08019edb 	.word	0x08019edb
 8019dfc:	08019ed1 	.word	0x08019ed1
 8019e00:	08019edb 	.word	0x08019edb
 8019e04:	08019edb 	.word	0x08019edb
 8019e08:	08019edb 	.word	0x08019edb
 8019e0c:	08019edb 	.word	0x08019edb
 8019e10:	08019edb 	.word	0x08019edb
 8019e14:	08019edb 	.word	0x08019edb
 8019e18:	08019edb 	.word	0x08019edb
 8019e1c:	08019edb 	.word	0x08019edb
 8019e20:	08019edb 	.word	0x08019edb
 8019e24:	08019e67 	.word	0x08019e67
 8019e28:	08019edb 	.word	0x08019edb
 8019e2c:	08019f27 	.word	0x08019f27
 8019e30:	08019edb 	.word	0x08019edb
 8019e34:	08019edb 	.word	0x08019edb
 8019e38:	08019ecb 	.word	0x08019ecb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e3e:	1c5a      	adds	r2, r3, #1
 8019e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e42:	2220      	movs	r2, #32
 8019e44:	701a      	strb	r2, [r3, #0]
 8019e46:	69fb      	ldr	r3, [r7, #28]
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	61fb      	str	r3, [r7, #28]
 8019e4c:	69fb      	ldr	r3, [r7, #28]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	dcf4      	bgt.n	8019e3c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	1d1a      	adds	r2, r3, #4
 8019e56:	603a      	str	r2, [r7, #0]
 8019e58:	6819      	ldr	r1, [r3, #0]
 8019e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5c:	1c5a      	adds	r2, r3, #1
 8019e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e60:	b2ca      	uxtb	r2, r1
 8019e62:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019e64:	e08f      	b.n	8019f86 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	1d1a      	adds	r2, r3, #4
 8019e6a:	603a      	str	r2, [r7, #0]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d101      	bne.n	8019e7a <tiny_vsnprintf_like+0x162>
 8019e76:	4b52      	ldr	r3, [pc, #328]	; (8019fc0 <tiny_vsnprintf_like+0x2a8>)
 8019e78:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e7c:	f7e6 f97c 	bl	8000178 <strlen>
 8019e80:	4603      	mov	r3, r0
 8019e82:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019e84:	e004      	b.n	8019e90 <tiny_vsnprintf_like+0x178>
 8019e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e88:	1c5a      	adds	r2, r3, #1
 8019e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e8c:	2220      	movs	r2, #32
 8019e8e:	701a      	strb	r2, [r3, #0]
 8019e90:	69fb      	ldr	r3, [r7, #28]
 8019e92:	1e5a      	subs	r2, r3, #1
 8019e94:	61fa      	str	r2, [r7, #28]
 8019e96:	693a      	ldr	r2, [r7, #16]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	dbf4      	blt.n	8019e86 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ea0:	e00a      	b.n	8019eb8 <tiny_vsnprintf_like+0x1a0>
 8019ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ea4:	1c53      	adds	r3, r2, #1
 8019ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8019ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eaa:	1c59      	adds	r1, r3, #1
 8019eac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019eae:	7812      	ldrb	r2, [r2, #0]
 8019eb0:	701a      	strb	r2, [r3, #0]
 8019eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb4:	3301      	adds	r3, #1
 8019eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8019eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019eba:	693b      	ldr	r3, [r7, #16]
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	dbf0      	blt.n	8019ea2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019ec0:	e061      	b.n	8019f86 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019ec2:	6a3b      	ldr	r3, [r7, #32]
 8019ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ec8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019eca:	2310      	movs	r3, #16
 8019ecc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019ece:	e02d      	b.n	8019f2c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019ed0:	6a3b      	ldr	r3, [r7, #32]
 8019ed2:	f043 0302 	orr.w	r3, r3, #2
 8019ed6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019ed8:	e025      	b.n	8019f26 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	781b      	ldrb	r3, [r3, #0]
 8019ede:	2b25      	cmp	r3, #37	; 0x25
 8019ee0:	d004      	beq.n	8019eec <tiny_vsnprintf_like+0x1d4>
 8019ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ee4:	1c5a      	adds	r2, r3, #1
 8019ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019ee8:	2225      	movs	r2, #37	; 0x25
 8019eea:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	1ad2      	subs	r2, r2, r3
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	3b01      	subs	r3, #1
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	da17      	bge.n	8019f2a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	781b      	ldrb	r3, [r3, #0]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d006      	beq.n	8019f10 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f06:	1c59      	adds	r1, r3, #1
 8019f08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f0a:	7812      	ldrb	r2, [r2, #0]
 8019f0c:	701a      	strb	r2, [r3, #0]
 8019f0e:	e002      	b.n	8019f16 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	3b01      	subs	r3, #1
 8019f14:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	1ad2      	subs	r2, r2, r3
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	429a      	cmp	r2, r3
 8019f22:	db2f      	blt.n	8019f84 <tiny_vsnprintf_like+0x26c>
 8019f24:	e002      	b.n	8019f2c <tiny_vsnprintf_like+0x214>
        break;
 8019f26:	bf00      	nop
 8019f28:	e000      	b.n	8019f2c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019f2a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	2b6c      	cmp	r3, #108	; 0x6c
 8019f30:	d105      	bne.n	8019f3e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	1d1a      	adds	r2, r3, #4
 8019f36:	603a      	str	r2, [r7, #0]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8019f3c:	e00f      	b.n	8019f5e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019f3e:	6a3b      	ldr	r3, [r7, #32]
 8019f40:	f003 0302 	and.w	r3, r3, #2
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d005      	beq.n	8019f54 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	1d1a      	adds	r2, r3, #4
 8019f4c:	603a      	str	r2, [r7, #0]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	637b      	str	r3, [r7, #52]	; 0x34
 8019f52:	e004      	b.n	8019f5e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	1d1a      	adds	r2, r3, #4
 8019f58:	603a      	str	r2, [r7, #0]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019f5e:	68bb      	ldr	r3, [r7, #8]
 8019f60:	1e5a      	subs	r2, r3, #1
 8019f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	1acb      	subs	r3, r1, r3
 8019f68:	1ad1      	subs	r1, r2, r3
 8019f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019f6c:	6a3b      	ldr	r3, [r7, #32]
 8019f6e:	9302      	str	r3, [sp, #8]
 8019f70:	69bb      	ldr	r3, [r7, #24]
 8019f72:	9301      	str	r3, [sp, #4]
 8019f74:	69fb      	ldr	r3, [r7, #28]
 8019f76:	9300      	str	r3, [sp, #0]
 8019f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f7c:	f7ff fddc 	bl	8019b38 <ee_number>
 8019f80:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019f82:	e000      	b.n	8019f86 <tiny_vsnprintf_like+0x26e>
        continue;
 8019f84:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	3301      	adds	r3, #1
 8019f8a:	607b      	str	r3, [r7, #4]
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	f47f aed0 	bne.w	8019d36 <tiny_vsnprintf_like+0x1e>
 8019f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	1ad2      	subs	r2, r2, r3
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	3b01      	subs	r3, #1
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	f6bf aec8 	bge.w	8019d36 <tiny_vsnprintf_like+0x1e>
 8019fa6:	e000      	b.n	8019faa <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019fa8:	bf00      	nop
  }

  *str = '\0';
 8019faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fac:	2200      	movs	r2, #0
 8019fae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	1ad3      	subs	r3, r2, r3
}
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	3738      	adds	r7, #56	; 0x38
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	0801b724 	.word	0x0801b724

08019fc4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b08c      	sub	sp, #48	; 0x30
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019fcc:	4b67      	ldr	r3, [pc, #412]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8019fd2:	4b66      	ldr	r3, [pc, #408]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 8019fd4:	681a      	ldr	r2, [r3, #0]
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	4013      	ands	r3, r2
 8019fda:	4a64      	ldr	r2, [pc, #400]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 8019fdc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8019fde:	e083      	b.n	801a0e8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8019fe4:	e002      	b.n	8019fec <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8019fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe8:	3301      	adds	r3, #1
 8019fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8019fec:	4a60      	ldr	r2, [pc, #384]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 8019fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019ff4:	4b5f      	ldr	r3, [pc, #380]	; (801a174 <UTIL_SEQ_Run+0x1b0>)
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	401a      	ands	r2, r3
 8019ffa:	4b5c      	ldr	r3, [pc, #368]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	4013      	ands	r3, r2
 801a000:	2b00      	cmp	r3, #0
 801a002:	d0f0      	beq.n	8019fe6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801a004:	4a5a      	ldr	r2, [pc, #360]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a008:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a00c:	4b59      	ldr	r3, [pc, #356]	; (801a174 <UTIL_SEQ_Run+0x1b0>)
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	401a      	ands	r2, r3
 801a012:	4b56      	ldr	r3, [pc, #344]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	4013      	ands	r3, r2
 801a018:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a01a:	4a55      	ldr	r2, [pc, #340]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01e:	00db      	lsls	r3, r3, #3
 801a020:	4413      	add	r3, r2
 801a022:	685a      	ldr	r2, [r3, #4]
 801a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a026:	4013      	ands	r3, r2
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d106      	bne.n	801a03a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a02c:	4a50      	ldr	r2, [pc, #320]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a030:	00db      	lsls	r3, r3, #3
 801a032:	4413      	add	r3, r2
 801a034:	f04f 32ff 	mov.w	r2, #4294967295
 801a038:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a03a:	4a4d      	ldr	r2, [pc, #308]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a03e:	00db      	lsls	r3, r3, #3
 801a040:	4413      	add	r3, r2
 801a042:	685a      	ldr	r2, [r3, #4]
 801a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a046:	4013      	ands	r3, r2
 801a048:	4618      	mov	r0, r3
 801a04a:	f000 f8f9 	bl	801a240 <SEQ_BitPosition>
 801a04e:	4603      	mov	r3, r0
 801a050:	461a      	mov	r2, r3
 801a052:	4b49      	ldr	r3, [pc, #292]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a054:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a056:	4a46      	ldr	r2, [pc, #280]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05a:	00db      	lsls	r3, r3, #3
 801a05c:	4413      	add	r3, r2
 801a05e:	685a      	ldr	r2, [r3, #4]
 801a060:	4b45      	ldr	r3, [pc, #276]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2101      	movs	r1, #1
 801a066:	fa01 f303 	lsl.w	r3, r1, r3
 801a06a:	43db      	mvns	r3, r3
 801a06c:	401a      	ands	r2, r3
 801a06e:	4940      	ldr	r1, [pc, #256]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a072:	00db      	lsls	r3, r3, #3
 801a074:	440b      	add	r3, r1
 801a076:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a078:	f3ef 8310 	mrs	r3, PRIMASK
 801a07c:	61bb      	str	r3, [r7, #24]
  return(result);
 801a07e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a080:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a082:	b672      	cpsid	i
}
 801a084:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a086:	4b3c      	ldr	r3, [pc, #240]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2201      	movs	r2, #1
 801a08c:	fa02 f303 	lsl.w	r3, r2, r3
 801a090:	43da      	mvns	r2, r3
 801a092:	4b3a      	ldr	r3, [pc, #232]	; (801a17c <UTIL_SEQ_Run+0x1b8>)
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4013      	ands	r3, r2
 801a098:	4a38      	ldr	r2, [pc, #224]	; (801a17c <UTIL_SEQ_Run+0x1b8>)
 801a09a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a09c:	2302      	movs	r3, #2
 801a09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0a0:	e013      	b.n	801a0ca <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a4:	3b01      	subs	r3, #1
 801a0a6:	4a32      	ldr	r2, [pc, #200]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a0a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a0ac:	4b32      	ldr	r3, [pc, #200]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	2201      	movs	r2, #1
 801a0b2:	fa02 f303 	lsl.w	r3, r2, r3
 801a0b6:	43da      	mvns	r2, r3
 801a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ba:	3b01      	subs	r3, #1
 801a0bc:	400a      	ands	r2, r1
 801a0be:	492c      	ldr	r1, [pc, #176]	; (801a170 <UTIL_SEQ_Run+0x1ac>)
 801a0c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c6:	3b01      	subs	r3, #1
 801a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d1e8      	bne.n	801a0a2 <UTIL_SEQ_Run+0xde>
 801a0d0:	6a3b      	ldr	r3, [r7, #32]
 801a0d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0d4:	697b      	ldr	r3, [r7, #20]
 801a0d6:	f383 8810 	msr	PRIMASK, r3
}
 801a0da:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a0dc:	4b26      	ldr	r3, [pc, #152]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	4a27      	ldr	r2, [pc, #156]	; (801a180 <UTIL_SEQ_Run+0x1bc>)
 801a0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a0e6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801a0e8:	4b24      	ldr	r3, [pc, #144]	; (801a17c <UTIL_SEQ_Run+0x1b8>)
 801a0ea:	681a      	ldr	r2, [r3, #0]
 801a0ec:	4b21      	ldr	r3, [pc, #132]	; (801a174 <UTIL_SEQ_Run+0x1b0>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	401a      	ands	r2, r3
 801a0f2:	4b1e      	ldr	r3, [pc, #120]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	4013      	ands	r3, r2
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d007      	beq.n	801a10c <UTIL_SEQ_Run+0x148>
 801a0fc:	4b21      	ldr	r3, [pc, #132]	; (801a184 <UTIL_SEQ_Run+0x1c0>)
 801a0fe:	681a      	ldr	r2, [r3, #0]
 801a100:	4b21      	ldr	r3, [pc, #132]	; (801a188 <UTIL_SEQ_Run+0x1c4>)
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	4013      	ands	r3, r2
 801a106:	2b00      	cmp	r3, #0
 801a108:	f43f af6a 	beq.w	8019fe0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a10c:	4b1a      	ldr	r3, [pc, #104]	; (801a178 <UTIL_SEQ_Run+0x1b4>)
 801a10e:	f04f 32ff 	mov.w	r2, #4294967295
 801a112:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a114:	f000 f888 	bl	801a228 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a118:	f3ef 8310 	mrs	r3, PRIMASK
 801a11c:	613b      	str	r3, [r7, #16]
  return(result);
 801a11e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a122:	b672      	cpsid	i
}
 801a124:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801a126:	4b15      	ldr	r3, [pc, #84]	; (801a17c <UTIL_SEQ_Run+0x1b8>)
 801a128:	681a      	ldr	r2, [r3, #0]
 801a12a:	4b12      	ldr	r3, [pc, #72]	; (801a174 <UTIL_SEQ_Run+0x1b0>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	401a      	ands	r2, r3
 801a130:	4b0e      	ldr	r3, [pc, #56]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	4013      	ands	r3, r2
 801a136:	2b00      	cmp	r3, #0
 801a138:	d108      	bne.n	801a14c <UTIL_SEQ_Run+0x188>
 801a13a:	4b12      	ldr	r3, [pc, #72]	; (801a184 <UTIL_SEQ_Run+0x1c0>)
 801a13c:	681a      	ldr	r2, [r3, #0]
 801a13e:	4b12      	ldr	r3, [pc, #72]	; (801a188 <UTIL_SEQ_Run+0x1c4>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	4013      	ands	r3, r2
 801a144:	2b00      	cmp	r3, #0
 801a146:	d101      	bne.n	801a14c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801a148:	f7e7 fbfa 	bl	8001940 <UTIL_SEQ_Idle>
 801a14c:	69fb      	ldr	r3, [r7, #28]
 801a14e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	f383 8810 	msr	PRIMASK, r3
}
 801a156:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801a158:	f000 f86c 	bl	801a234 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a15c:	4a03      	ldr	r2, [pc, #12]	; (801a16c <UTIL_SEQ_Run+0x1a8>)
 801a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a160:	6013      	str	r3, [r2, #0]

  return;
 801a162:	bf00      	nop
}
 801a164:	3730      	adds	r7, #48	; 0x30
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	20000130 	.word	0x20000130
 801a170:	20001074 	.word	0x20001074
 801a174:	2000012c 	.word	0x2000012c
 801a178:	20000ff0 	.word	0x20000ff0
 801a17c:	20000fe4 	.word	0x20000fe4
 801a180:	20000ff4 	.word	0x20000ff4
 801a184:	20000fe8 	.word	0x20000fe8
 801a188:	20000fec 	.word	0x20000fec

0801a18c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b088      	sub	sp, #32
 801a190:	af00      	add	r7, sp, #0
 801a192:	60f8      	str	r0, [r7, #12]
 801a194:	60b9      	str	r1, [r7, #8]
 801a196:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a198:	f3ef 8310 	mrs	r3, PRIMASK
 801a19c:	617b      	str	r3, [r7, #20]
  return(result);
 801a19e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a1a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1a2:	b672      	cpsid	i
}
 801a1a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a1a6:	68f8      	ldr	r0, [r7, #12]
 801a1a8:	f000 f84a 	bl	801a240 <SEQ_BitPosition>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4a06      	ldr	r2, [pc, #24]	; (801a1cc <UTIL_SEQ_RegTask+0x40>)
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a1b8:	69fb      	ldr	r3, [r7, #28]
 801a1ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1bc:	69bb      	ldr	r3, [r7, #24]
 801a1be:	f383 8810 	msr	PRIMASK, r3
}
 801a1c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a1c4:	bf00      	nop
}
 801a1c6:	3720      	adds	r7, #32
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	20000ff4 	.word	0x20000ff4

0801a1d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b087      	sub	sp, #28
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
 801a1d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1da:	f3ef 8310 	mrs	r3, PRIMASK
 801a1de:	60fb      	str	r3, [r7, #12]
  return(result);
 801a1e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a1e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1e4:	b672      	cpsid	i
}
 801a1e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a1e8:	4b0d      	ldr	r3, [pc, #52]	; (801a220 <UTIL_SEQ_SetTask+0x50>)
 801a1ea:	681a      	ldr	r2, [r3, #0]
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	4313      	orrs	r3, r2
 801a1f0:	4a0b      	ldr	r2, [pc, #44]	; (801a220 <UTIL_SEQ_SetTask+0x50>)
 801a1f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a1f4:	4a0b      	ldr	r2, [pc, #44]	; (801a224 <UTIL_SEQ_SetTask+0x54>)
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	431a      	orrs	r2, r3
 801a200:	4908      	ldr	r1, [pc, #32]	; (801a224 <UTIL_SEQ_SetTask+0x54>)
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a208:	697b      	ldr	r3, [r7, #20]
 801a20a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a20c:	693b      	ldr	r3, [r7, #16]
 801a20e:	f383 8810 	msr	PRIMASK, r3
}
 801a212:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a214:	bf00      	nop
}
 801a216:	371c      	adds	r7, #28
 801a218:	46bd      	mov	sp, r7
 801a21a:	bc80      	pop	{r7}
 801a21c:	4770      	bx	lr
 801a21e:	bf00      	nop
 801a220:	20000fe4 	.word	0x20000fe4
 801a224:	20001074 	.word	0x20001074

0801a228 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a228:	b480      	push	{r7}
 801a22a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a22c:	bf00      	nop
}
 801a22e:	46bd      	mov	sp, r7
 801a230:	bc80      	pop	{r7}
 801a232:	4770      	bx	lr

0801a234 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a234:	b480      	push	{r7}
 801a236:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a238:	bf00      	nop
}
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bc80      	pop	{r7}
 801a23e:	4770      	bx	lr

0801a240 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a240:	b480      	push	{r7}
 801a242:	b085      	sub	sp, #20
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a248:	2300      	movs	r3, #0
 801a24a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	0c1b      	lsrs	r3, r3, #16
 801a250:	041b      	lsls	r3, r3, #16
 801a252:	2b00      	cmp	r3, #0
 801a254:	d104      	bne.n	801a260 <SEQ_BitPosition+0x20>
 801a256:	2310      	movs	r3, #16
 801a258:	73fb      	strb	r3, [r7, #15]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	041b      	lsls	r3, r3, #16
 801a25e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a266:	2b00      	cmp	r3, #0
 801a268:	d105      	bne.n	801a276 <SEQ_BitPosition+0x36>
 801a26a:	7bfb      	ldrb	r3, [r7, #15]
 801a26c:	3308      	adds	r3, #8
 801a26e:	73fb      	strb	r3, [r7, #15]
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	021b      	lsls	r3, r3, #8
 801a274:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d105      	bne.n	801a28c <SEQ_BitPosition+0x4c>
 801a280:	7bfb      	ldrb	r3, [r7, #15]
 801a282:	3304      	adds	r3, #4
 801a284:	73fb      	strb	r3, [r7, #15]
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	011b      	lsls	r3, r3, #4
 801a28a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	0f1b      	lsrs	r3, r3, #28
 801a290:	4a06      	ldr	r2, [pc, #24]	; (801a2ac <SEQ_BitPosition+0x6c>)
 801a292:	5cd2      	ldrb	r2, [r2, r3]
 801a294:	7bfb      	ldrb	r3, [r7, #15]
 801a296:	4413      	add	r3, r2
 801a298:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a29a:	7bfb      	ldrb	r3, [r7, #15]
 801a29c:	f1c3 031f 	rsb	r3, r3, #31
 801a2a0:	b2db      	uxtb	r3, r3
}
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	3714      	adds	r7, #20
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bc80      	pop	{r7}
 801a2aa:	4770      	bx	lr
 801a2ac:	0801bcfc 	.word	0x0801bcfc

0801a2b0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a2b4:	4b04      	ldr	r3, [pc, #16]	; (801a2c8 <UTIL_TIMER_Init+0x18>)
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a2ba:	4b04      	ldr	r3, [pc, #16]	; (801a2cc <UTIL_TIMER_Init+0x1c>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4798      	blx	r3
 801a2c0:	4603      	mov	r3, r0
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	20001084 	.word	0x20001084
 801a2cc:	0801b7e4 	.word	0x0801b7e4

0801a2d0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	60f8      	str	r0, [r7, #12]
 801a2d8:	60b9      	str	r1, [r7, #8]
 801a2da:	603b      	str	r3, [r7, #0]
 801a2dc:	4613      	mov	r3, r2
 801a2de:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d023      	beq.n	801a32e <UTIL_TIMER_Create+0x5e>
 801a2e6:	683b      	ldr	r3, [r7, #0]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d020      	beq.n	801a32e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a2f2:	4b11      	ldr	r3, [pc, #68]	; (801a338 <UTIL_TIMER_Create+0x68>)
 801a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f6:	68b8      	ldr	r0, [r7, #8]
 801a2f8:	4798      	blx	r3
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	2200      	movs	r2, #0
 801a304:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	2200      	movs	r2, #0
 801a30a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	2200      	movs	r2, #0
 801a310:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	683a      	ldr	r2, [r7, #0]
 801a316:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	69ba      	ldr	r2, [r7, #24]
 801a31c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	79fa      	ldrb	r2, [r7, #7]
 801a322:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	2200      	movs	r2, #0
 801a328:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a32a:	2300      	movs	r3, #0
 801a32c:	e000      	b.n	801a330 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a32e:	2301      	movs	r3, #1
  }
}
 801a330:	4618      	mov	r0, r3
 801a332:	3710      	adds	r7, #16
 801a334:	46bd      	mov	sp, r7
 801a336:	bd80      	pop	{r7, pc}
 801a338:	0801b7e4 	.word	0x0801b7e4

0801a33c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b08a      	sub	sp, #40	; 0x28
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a344:	2300      	movs	r3, #0
 801a346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d056      	beq.n	801a3fe <UTIL_TIMER_Start+0xc2>
 801a350:	6878      	ldr	r0, [r7, #4]
 801a352:	f000 f9a9 	bl	801a6a8 <TimerExists>
 801a356:	4603      	mov	r3, r0
 801a358:	f083 0301 	eor.w	r3, r3, #1
 801a35c:	b2db      	uxtb	r3, r3
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d04d      	beq.n	801a3fe <UTIL_TIMER_Start+0xc2>
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	7a5b      	ldrb	r3, [r3, #9]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d149      	bne.n	801a3fe <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a36a:	f3ef 8310 	mrs	r3, PRIMASK
 801a36e:	613b      	str	r3, [r7, #16]
  return(result);
 801a370:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a374:	b672      	cpsid	i
}
 801a376:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	685b      	ldr	r3, [r3, #4]
 801a37c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a37e:	4b24      	ldr	r3, [pc, #144]	; (801a410 <UTIL_TIMER_Start+0xd4>)
 801a380:	6a1b      	ldr	r3, [r3, #32]
 801a382:	4798      	blx	r3
 801a384:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a386:	6a3a      	ldr	r2, [r7, #32]
 801a388:	69bb      	ldr	r3, [r7, #24]
 801a38a:	429a      	cmp	r2, r3
 801a38c:	d201      	bcs.n	801a392 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a38e:	69bb      	ldr	r3, [r7, #24]
 801a390:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6a3a      	ldr	r2, [r7, #32]
 801a396:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2200      	movs	r2, #0
 801a39c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a3aa:	4b1a      	ldr	r3, [pc, #104]	; (801a414 <UTIL_TIMER_Start+0xd8>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d106      	bne.n	801a3c0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a3b2:	4b17      	ldr	r3, [pc, #92]	; (801a410 <UTIL_TIMER_Start+0xd4>)
 801a3b4:	691b      	ldr	r3, [r3, #16]
 801a3b6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f000 f9eb 	bl	801a794 <TimerInsertNewHeadTimer>
 801a3be:	e017      	b.n	801a3f0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a3c0:	4b13      	ldr	r3, [pc, #76]	; (801a410 <UTIL_TIMER_Start+0xd4>)
 801a3c2:	699b      	ldr	r3, [r3, #24]
 801a3c4:	4798      	blx	r3
 801a3c6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	697b      	ldr	r3, [r7, #20]
 801a3ce:	441a      	add	r2, r3
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681a      	ldr	r2, [r3, #0]
 801a3d8:	4b0e      	ldr	r3, [pc, #56]	; (801a414 <UTIL_TIMER_Start+0xd8>)
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	429a      	cmp	r2, r3
 801a3e0:	d203      	bcs.n	801a3ea <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f000 f9d6 	bl	801a794 <TimerInsertNewHeadTimer>
 801a3e8:	e002      	b.n	801a3f0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f000 f9a2 	bl	801a734 <TimerInsertTimer>
 801a3f0:	69fb      	ldr	r3, [r7, #28]
 801a3f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	f383 8810 	msr	PRIMASK, r3
}
 801a3fa:	bf00      	nop
  {
 801a3fc:	e002      	b.n	801a404 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a3fe:	2301      	movs	r3, #1
 801a400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3728      	adds	r7, #40	; 0x28
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	0801b7e4 	.word	0x0801b7e4
 801a414:	20001084 	.word	0x20001084

0801a418 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a418:	b580      	push	{r7, lr}
 801a41a:	b088      	sub	sp, #32
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a420:	2300      	movs	r3, #0
 801a422:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d05b      	beq.n	801a4e2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a42a:	f3ef 8310 	mrs	r3, PRIMASK
 801a42e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a430:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a434:	b672      	cpsid	i
}
 801a436:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a438:	4b2d      	ldr	r3, [pc, #180]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a43e:	4b2c      	ldr	r3, [pc, #176]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	2201      	movs	r2, #1
 801a448:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a44a:	4b29      	ldr	r3, [pc, #164]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d041      	beq.n	801a4d6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2200      	movs	r2, #0
 801a456:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a458:	4b25      	ldr	r3, [pc, #148]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	429a      	cmp	r2, r3
 801a460:	d134      	bne.n	801a4cc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a462:	4b23      	ldr	r3, [pc, #140]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	2200      	movs	r2, #0
 801a468:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a46a:	4b21      	ldr	r3, [pc, #132]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	695b      	ldr	r3, [r3, #20]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d00a      	beq.n	801a48a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a474:	4b1e      	ldr	r3, [pc, #120]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	695b      	ldr	r3, [r3, #20]
 801a47a:	4a1d      	ldr	r2, [pc, #116]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a47c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a47e:	4b1c      	ldr	r3, [pc, #112]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	4618      	mov	r0, r3
 801a484:	f000 f92c 	bl	801a6e0 <TimerSetTimeout>
 801a488:	e023      	b.n	801a4d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a48a:	4b1a      	ldr	r3, [pc, #104]	; (801a4f4 <UTIL_TIMER_Stop+0xdc>)
 801a48c:	68db      	ldr	r3, [r3, #12]
 801a48e:	4798      	blx	r3
            TimerListHead = NULL;
 801a490:	4b17      	ldr	r3, [pc, #92]	; (801a4f0 <UTIL_TIMER_Stop+0xd8>)
 801a492:	2200      	movs	r2, #0
 801a494:	601a      	str	r2, [r3, #0]
 801a496:	e01c      	b.n	801a4d2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a498:	697a      	ldr	r2, [r7, #20]
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d110      	bne.n	801a4c2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a4a0:	697b      	ldr	r3, [r7, #20]
 801a4a2:	695b      	ldr	r3, [r3, #20]
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d006      	beq.n	801a4b6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a4a8:	697b      	ldr	r3, [r7, #20]
 801a4aa:	695b      	ldr	r3, [r3, #20]
 801a4ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	697a      	ldr	r2, [r7, #20]
 801a4b2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a4b4:	e00d      	b.n	801a4d2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a4ba:	69bb      	ldr	r3, [r7, #24]
 801a4bc:	697a      	ldr	r2, [r7, #20]
 801a4be:	615a      	str	r2, [r3, #20]
            break;
 801a4c0:	e007      	b.n	801a4d2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a4c2:	697b      	ldr	r3, [r7, #20]
 801a4c4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a4c6:	697b      	ldr	r3, [r7, #20]
 801a4c8:	695b      	ldr	r3, [r3, #20]
 801a4ca:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d1e2      	bne.n	801a498 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	77fb      	strb	r3, [r7, #31]
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4da:	68bb      	ldr	r3, [r7, #8]
 801a4dc:	f383 8810 	msr	PRIMASK, r3
}
 801a4e0:	e001      	b.n	801a4e6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a4e2:	2301      	movs	r3, #1
 801a4e4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a4e6:	7ffb      	ldrb	r3, [r7, #31]
}
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	3720      	adds	r7, #32
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd80      	pop	{r7, pc}
 801a4f0:	20001084 	.word	0x20001084
 801a4f4:	0801b7e4 	.word	0x0801b7e4

0801a4f8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b084      	sub	sp, #16
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
 801a500:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a502:	2300      	movs	r3, #0
 801a504:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d102      	bne.n	801a512 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a50c:	2301      	movs	r3, #1
 801a50e:	73fb      	strb	r3, [r7, #15]
 801a510:	e014      	b.n	801a53c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a512:	4b0d      	ldr	r3, [pc, #52]	; (801a548 <UTIL_TIMER_SetPeriod+0x50>)
 801a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a516:	6838      	ldr	r0, [r7, #0]
 801a518:	4798      	blx	r3
 801a51a:	4602      	mov	r2, r0
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a520:	6878      	ldr	r0, [r7, #4]
 801a522:	f000 f8c1 	bl	801a6a8 <TimerExists>
 801a526:	4603      	mov	r3, r0
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d007      	beq.n	801a53c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f7ff ff73 	bl	801a418 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a532:	6878      	ldr	r0, [r7, #4]
 801a534:	f7ff ff02 	bl	801a33c <UTIL_TIMER_Start>
 801a538:	4603      	mov	r3, r0
 801a53a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a53c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a53e:	4618      	mov	r0, r3
 801a540:	3710      	adds	r7, #16
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}
 801a546:	bf00      	nop
 801a548:	0801b7e4 	.word	0x0801b7e4

0801a54c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a54c:	b590      	push	{r4, r7, lr}
 801a54e:	b089      	sub	sp, #36	; 0x24
 801a550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a552:	f3ef 8310 	mrs	r3, PRIMASK
 801a556:	60bb      	str	r3, [r7, #8]
  return(result);
 801a558:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a55a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a55c:	b672      	cpsid	i
}
 801a55e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a560:	4b38      	ldr	r3, [pc, #224]	; (801a644 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a562:	695b      	ldr	r3, [r3, #20]
 801a564:	4798      	blx	r3
 801a566:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a568:	4b36      	ldr	r3, [pc, #216]	; (801a644 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a56a:	691b      	ldr	r3, [r3, #16]
 801a56c:	4798      	blx	r3
 801a56e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a570:	693a      	ldr	r2, [r7, #16]
 801a572:	697b      	ldr	r3, [r7, #20]
 801a574:	1ad3      	subs	r3, r2, r3
 801a576:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a578:	4b33      	ldr	r3, [pc, #204]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d037      	beq.n	801a5f0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a580:	4b31      	ldr	r3, [pc, #196]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a586:	69fb      	ldr	r3, [r7, #28]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	68fa      	ldr	r2, [r7, #12]
 801a58c:	429a      	cmp	r2, r3
 801a58e:	d206      	bcs.n	801a59e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	681a      	ldr	r2, [r3, #0]
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	1ad2      	subs	r2, r2, r3
 801a598:	69fb      	ldr	r3, [r7, #28]
 801a59a:	601a      	str	r2, [r3, #0]
 801a59c:	e002      	b.n	801a5a4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a59e:	69fb      	ldr	r3, [r7, #28]
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	695b      	ldr	r3, [r3, #20]
 801a5a8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a5aa:	69fb      	ldr	r3, [r7, #28]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d1ea      	bne.n	801a586 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a5b0:	e01e      	b.n	801a5f0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a5b2:	4b25      	ldr	r3, [pc, #148]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a5b8:	4b23      	ldr	r3, [pc, #140]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	695b      	ldr	r3, [r3, #20]
 801a5be:	4a22      	ldr	r2, [pc, #136]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a5c0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a5c2:	69fb      	ldr	r3, [r7, #28]
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a5ce:	69fb      	ldr	r3, [r7, #28]
 801a5d0:	68db      	ldr	r3, [r3, #12]
 801a5d2:	69fa      	ldr	r2, [r7, #28]
 801a5d4:	6912      	ldr	r2, [r2, #16]
 801a5d6:	4610      	mov	r0, r2
 801a5d8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a5da:	69fb      	ldr	r3, [r7, #28]
 801a5dc:	7adb      	ldrb	r3, [r3, #11]
 801a5de:	2b01      	cmp	r3, #1
 801a5e0:	d106      	bne.n	801a5f0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a5e2:	69fb      	ldr	r3, [r7, #28]
 801a5e4:	7a9b      	ldrb	r3, [r3, #10]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d102      	bne.n	801a5f0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a5ea:	69f8      	ldr	r0, [r7, #28]
 801a5ec:	f7ff fea6 	bl	801a33c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a5f0:	4b15      	ldr	r3, [pc, #84]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d00d      	beq.n	801a614 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a5f8:	4b13      	ldr	r3, [pc, #76]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	681b      	ldr	r3, [r3, #0]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d0d7      	beq.n	801a5b2 <UTIL_TIMER_IRQ_Handler+0x66>
 801a602:	4b11      	ldr	r3, [pc, #68]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	681c      	ldr	r4, [r3, #0]
 801a608:	4b0e      	ldr	r3, [pc, #56]	; (801a644 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a60a:	699b      	ldr	r3, [r3, #24]
 801a60c:	4798      	blx	r3
 801a60e:	4603      	mov	r3, r0
 801a610:	429c      	cmp	r4, r3
 801a612:	d3ce      	bcc.n	801a5b2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a614:	4b0c      	ldr	r3, [pc, #48]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d009      	beq.n	801a630 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a61c:	4b0a      	ldr	r3, [pc, #40]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	7a1b      	ldrb	r3, [r3, #8]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d104      	bne.n	801a630 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a626:	4b08      	ldr	r3, [pc, #32]	; (801a648 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	4618      	mov	r0, r3
 801a62c:	f000 f858 	bl	801a6e0 <TimerSetTimeout>
 801a630:	69bb      	ldr	r3, [r7, #24]
 801a632:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	f383 8810 	msr	PRIMASK, r3
}
 801a63a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a63c:	bf00      	nop
 801a63e:	3724      	adds	r7, #36	; 0x24
 801a640:	46bd      	mov	sp, r7
 801a642:	bd90      	pop	{r4, r7, pc}
 801a644:	0801b7e4 	.word	0x0801b7e4
 801a648:	20001084 	.word	0x20001084

0801a64c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b082      	sub	sp, #8
 801a650:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a652:	4b06      	ldr	r3, [pc, #24]	; (801a66c <UTIL_TIMER_GetCurrentTime+0x20>)
 801a654:	69db      	ldr	r3, [r3, #28]
 801a656:	4798      	blx	r3
 801a658:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a65a:	4b04      	ldr	r3, [pc, #16]	; (801a66c <UTIL_TIMER_GetCurrentTime+0x20>)
 801a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65e:	6878      	ldr	r0, [r7, #4]
 801a660:	4798      	blx	r3
 801a662:	4603      	mov	r3, r0
}
 801a664:	4618      	mov	r0, r3
 801a666:	3708      	adds	r7, #8
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd80      	pop	{r7, pc}
 801a66c:	0801b7e4 	.word	0x0801b7e4

0801a670 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b084      	sub	sp, #16
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a678:	4b0a      	ldr	r3, [pc, #40]	; (801a6a4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a67a:	69db      	ldr	r3, [r3, #28]
 801a67c:	4798      	blx	r3
 801a67e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a680:	4b08      	ldr	r3, [pc, #32]	; (801a6a4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a684:	6878      	ldr	r0, [r7, #4]
 801a686:	4798      	blx	r3
 801a688:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a68a:	4b06      	ldr	r3, [pc, #24]	; (801a6a4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a68e:	68f9      	ldr	r1, [r7, #12]
 801a690:	68ba      	ldr	r2, [r7, #8]
 801a692:	1a8a      	subs	r2, r1, r2
 801a694:	4610      	mov	r0, r2
 801a696:	4798      	blx	r3
 801a698:	4603      	mov	r3, r0
}
 801a69a:	4618      	mov	r0, r3
 801a69c:	3710      	adds	r7, #16
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	bd80      	pop	{r7, pc}
 801a6a2:	bf00      	nop
 801a6a4:	0801b7e4 	.word	0x0801b7e4

0801a6a8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b085      	sub	sp, #20
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a6b0:	4b0a      	ldr	r3, [pc, #40]	; (801a6dc <TimerExists+0x34>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a6b6:	e008      	b.n	801a6ca <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a6b8:	68fa      	ldr	r2, [r7, #12]
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d101      	bne.n	801a6c4 <TimerExists+0x1c>
    {
      return true;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	e006      	b.n	801a6d2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	695b      	ldr	r3, [r3, #20]
 801a6c8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d1f3      	bne.n	801a6b8 <TimerExists+0x10>
  }
  return false;
 801a6d0:	2300      	movs	r3, #0
}
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3714      	adds	r7, #20
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bc80      	pop	{r7}
 801a6da:	4770      	bx	lr
 801a6dc:	20001084 	.word	0x20001084

0801a6e0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a6e0:	b590      	push	{r4, r7, lr}
 801a6e2:	b085      	sub	sp, #20
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a6e8:	4b11      	ldr	r3, [pc, #68]	; (801a730 <TimerSetTimeout+0x50>)
 801a6ea:	6a1b      	ldr	r3, [r3, #32]
 801a6ec:	4798      	blx	r3
 801a6ee:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2201      	movs	r2, #1
 801a6f4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	681c      	ldr	r4, [r3, #0]
 801a6fa:	4b0d      	ldr	r3, [pc, #52]	; (801a730 <TimerSetTimeout+0x50>)
 801a6fc:	699b      	ldr	r3, [r3, #24]
 801a6fe:	4798      	blx	r3
 801a700:	4602      	mov	r2, r0
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	4413      	add	r3, r2
 801a706:	429c      	cmp	r4, r3
 801a708:	d207      	bcs.n	801a71a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a70a:	4b09      	ldr	r3, [pc, #36]	; (801a730 <TimerSetTimeout+0x50>)
 801a70c:	699b      	ldr	r3, [r3, #24]
 801a70e:	4798      	blx	r3
 801a710:	4602      	mov	r2, r0
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	441a      	add	r2, r3
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a71a:	4b05      	ldr	r3, [pc, #20]	; (801a730 <TimerSetTimeout+0x50>)
 801a71c:	689b      	ldr	r3, [r3, #8]
 801a71e:	687a      	ldr	r2, [r7, #4]
 801a720:	6812      	ldr	r2, [r2, #0]
 801a722:	4610      	mov	r0, r2
 801a724:	4798      	blx	r3
}
 801a726:	bf00      	nop
 801a728:	3714      	adds	r7, #20
 801a72a:	46bd      	mov	sp, r7
 801a72c:	bd90      	pop	{r4, r7, pc}
 801a72e:	bf00      	nop
 801a730:	0801b7e4 	.word	0x0801b7e4

0801a734 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a734:	b480      	push	{r7}
 801a736:	b085      	sub	sp, #20
 801a738:	af00      	add	r7, sp, #0
 801a73a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a73c:	4b14      	ldr	r3, [pc, #80]	; (801a790 <TimerInsertTimer+0x5c>)
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a742:	4b13      	ldr	r3, [pc, #76]	; (801a790 <TimerInsertTimer+0x5c>)
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	695b      	ldr	r3, [r3, #20]
 801a748:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a74a:	e012      	b.n	801a772 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681a      	ldr	r2, [r3, #0]
 801a750:	68bb      	ldr	r3, [r7, #8]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	429a      	cmp	r2, r3
 801a756:	d905      	bls.n	801a764 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	695b      	ldr	r3, [r3, #20]
 801a760:	60bb      	str	r3, [r7, #8]
 801a762:	e006      	b.n	801a772 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	687a      	ldr	r2, [r7, #4]
 801a768:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	68ba      	ldr	r2, [r7, #8]
 801a76e:	615a      	str	r2, [r3, #20]
        return;
 801a770:	e009      	b.n	801a786 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	695b      	ldr	r3, [r3, #20]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d1e8      	bne.n	801a74c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	2200      	movs	r2, #0
 801a784:	615a      	str	r2, [r3, #20]
}
 801a786:	3714      	adds	r7, #20
 801a788:	46bd      	mov	sp, r7
 801a78a:	bc80      	pop	{r7}
 801a78c:	4770      	bx	lr
 801a78e:	bf00      	nop
 801a790:	20001084 	.word	0x20001084

0801a794 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b084      	sub	sp, #16
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a79c:	4b0b      	ldr	r3, [pc, #44]	; (801a7cc <TimerInsertNewHeadTimer+0x38>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d002      	beq.n	801a7ae <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	68fa      	ldr	r2, [r7, #12]
 801a7b2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a7b4:	4a05      	ldr	r2, [pc, #20]	; (801a7cc <TimerInsertNewHeadTimer+0x38>)
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a7ba:	4b04      	ldr	r3, [pc, #16]	; (801a7cc <TimerInsertNewHeadTimer+0x38>)
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7ff ff8e 	bl	801a6e0 <TimerSetTimeout>
}
 801a7c4:	bf00      	nop
 801a7c6:	3710      	adds	r7, #16
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}
 801a7cc:	20001084 	.word	0x20001084

0801a7d0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a7d4:	2218      	movs	r2, #24
 801a7d6:	2100      	movs	r1, #0
 801a7d8:	4807      	ldr	r0, [pc, #28]	; (801a7f8 <UTIL_ADV_TRACE_Init+0x28>)
 801a7da:	f7ff f80e 	bl	80197fa <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a7de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a7e2:	2100      	movs	r1, #0
 801a7e4:	4805      	ldr	r0, [pc, #20]	; (801a7fc <UTIL_ADV_TRACE_Init+0x2c>)
 801a7e6:	f7ff f808 	bl	80197fa <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a7ea:	4b05      	ldr	r3, [pc, #20]	; (801a800 <UTIL_ADV_TRACE_Init+0x30>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4805      	ldr	r0, [pc, #20]	; (801a804 <UTIL_ADV_TRACE_Init+0x34>)
 801a7f0:	4798      	blx	r3
 801a7f2:	4603      	mov	r3, r0
}
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	20001088 	.word	0x20001088
 801a7fc:	200010a0 	.word	0x200010a0
 801a800:	0801b824 	.word	0x0801b824
 801a804:	0801aa75 	.word	0x0801aa75

0801a808 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a808:	b480      	push	{r7}
 801a80a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a80c:	4b06      	ldr	r3, [pc, #24]	; (801a828 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a80e:	8a5a      	ldrh	r2, [r3, #18]
 801a810:	4b05      	ldr	r3, [pc, #20]	; (801a828 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a812:	8a1b      	ldrh	r3, [r3, #16]
 801a814:	429a      	cmp	r2, r3
 801a816:	d101      	bne.n	801a81c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a818:	2301      	movs	r3, #1
 801a81a:	e000      	b.n	801a81e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a81c:	2300      	movs	r3, #0
}
 801a81e:	4618      	mov	r0, r3
 801a820:	46bd      	mov	sp, r7
 801a822:	bc80      	pop	{r7}
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop
 801a828:	20001088 	.word	0x20001088

0801a82c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a82c:	b408      	push	{r3}
 801a82e:	b580      	push	{r7, lr}
 801a830:	b08d      	sub	sp, #52	; 0x34
 801a832:	af00      	add	r7, sp, #0
 801a834:	60f8      	str	r0, [r7, #12]
 801a836:	60b9      	str	r1, [r7, #8]
 801a838:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a83a:	2300      	movs	r3, #0
 801a83c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a83e:	2300      	movs	r3, #0
 801a840:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a842:	4b38      	ldr	r3, [pc, #224]	; (801a924 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a844:	7a1b      	ldrb	r3, [r3, #8]
 801a846:	461a      	mov	r2, r3
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d902      	bls.n	801a854 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a84e:	f06f 0304 	mvn.w	r3, #4
 801a852:	e05f      	b.n	801a914 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a854:	4b33      	ldr	r3, [pc, #204]	; (801a924 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a856:	68da      	ldr	r2, [r3, #12]
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	4013      	ands	r3, r2
 801a85c:	68ba      	ldr	r2, [r7, #8]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d002      	beq.n	801a868 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a862:	f06f 0305 	mvn.w	r3, #5
 801a866:	e055      	b.n	801a914 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a868:	4b2e      	ldr	r3, [pc, #184]	; (801a924 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a86a:	685b      	ldr	r3, [r3, #4]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d00a      	beq.n	801a886 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d007      	beq.n	801a886 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a876:	4b2b      	ldr	r3, [pc, #172]	; (801a924 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a878:	685b      	ldr	r3, [r3, #4]
 801a87a:	f107 0116 	add.w	r1, r7, #22
 801a87e:	f107 0218 	add.w	r2, r7, #24
 801a882:	4610      	mov	r0, r2
 801a884:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a886:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a88a:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a88e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a890:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a894:	4824      	ldr	r0, [pc, #144]	; (801a928 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a896:	f7ff fa3f 	bl	8019d18 <tiny_vsnprintf_like>
 801a89a:	4603      	mov	r3, r0
 801a89c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a89e:	f000 f9f3 	bl	801ac88 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a8a2:	8afa      	ldrh	r2, [r7, #22]
 801a8a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a8a6:	4413      	add	r3, r2
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	f107 0214 	add.w	r2, r7, #20
 801a8ae:	4611      	mov	r1, r2
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f000 f96b 	bl	801ab8c <TRACE_AllocateBufer>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8bc:	d026      	beq.n	801a90c <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a8be:	2300      	movs	r3, #0
 801a8c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a8c2:	e00f      	b.n	801a8e4 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a8c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a8c6:	8aba      	ldrh	r2, [r7, #20]
 801a8c8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a8cc:	440b      	add	r3, r1
 801a8ce:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a8d2:	4b16      	ldr	r3, [pc, #88]	; (801a92c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a8d4:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a8d6:	8abb      	ldrh	r3, [r7, #20]
 801a8d8:	3301      	adds	r3, #1
 801a8da:	b29b      	uxth	r3, r3
 801a8dc:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a8de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a8e0:	3301      	adds	r3, #1
 801a8e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a8e4:	8afb      	ldrh	r3, [r7, #22]
 801a8e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d3eb      	bcc.n	801a8c4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a8ec:	8abb      	ldrh	r3, [r7, #20]
 801a8ee:	461a      	mov	r2, r3
 801a8f0:	4b0e      	ldr	r3, [pc, #56]	; (801a92c <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a8f2:	18d0      	adds	r0, r2, r3
 801a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a8f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a8fc:	f7ff fa0c 	bl	8019d18 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a900:	f000 f9e0 	bl	801acc4 <TRACE_UnLock>

    return TRACE_Send();
 801a904:	f000 f832 	bl	801a96c <TRACE_Send>
 801a908:	4603      	mov	r3, r0
 801a90a:	e003      	b.n	801a914 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a90c:	f000 f9da 	bl	801acc4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a910:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a914:	4618      	mov	r0, r3
 801a916:	3734      	adds	r7, #52	; 0x34
 801a918:	46bd      	mov	sp, r7
 801a91a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a91e:	b001      	add	sp, #4
 801a920:	4770      	bx	lr
 801a922:	bf00      	nop
 801a924:	20001088 	.word	0x20001088
 801a928:	200014a0 	.word	0x200014a0
 801a92c:	200010a0 	.word	0x200010a0

0801a930 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a930:	b480      	push	{r7}
 801a932:	b083      	sub	sp, #12
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a938:	4a03      	ldr	r2, [pc, #12]	; (801a948 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6053      	str	r3, [r2, #4]
}
 801a93e:	bf00      	nop
 801a940:	370c      	adds	r7, #12
 801a942:	46bd      	mov	sp, r7
 801a944:	bc80      	pop	{r7}
 801a946:	4770      	bx	lr
 801a948:	20001088 	.word	0x20001088

0801a94c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a94c:	b480      	push	{r7}
 801a94e:	b083      	sub	sp, #12
 801a950:	af00      	add	r7, sp, #0
 801a952:	4603      	mov	r3, r0
 801a954:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a956:	4a04      	ldr	r2, [pc, #16]	; (801a968 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a958:	79fb      	ldrb	r3, [r7, #7]
 801a95a:	7213      	strb	r3, [r2, #8]
}
 801a95c:	bf00      	nop
 801a95e:	370c      	adds	r7, #12
 801a960:	46bd      	mov	sp, r7
 801a962:	bc80      	pop	{r7}
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop
 801a968:	20001088 	.word	0x20001088

0801a96c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a96c:	b580      	push	{r7, lr}
 801a96e:	b088      	sub	sp, #32
 801a970:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a972:	2300      	movs	r3, #0
 801a974:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a976:	2300      	movs	r3, #0
 801a978:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a97a:	f3ef 8310 	mrs	r3, PRIMASK
 801a97e:	613b      	str	r3, [r7, #16]
  return(result);
 801a980:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a984:	b672      	cpsid	i
}
 801a986:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a988:	f000 f9ba 	bl	801ad00 <TRACE_IsLocked>
 801a98c:	4603      	mov	r3, r0
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d15d      	bne.n	801aa4e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a992:	f000 f979 	bl	801ac88 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a996:	4b34      	ldr	r3, [pc, #208]	; (801aa68 <TRACE_Send+0xfc>)
 801a998:	8a1a      	ldrh	r2, [r3, #16]
 801a99a:	4b33      	ldr	r3, [pc, #204]	; (801aa68 <TRACE_Send+0xfc>)
 801a99c:	8a5b      	ldrh	r3, [r3, #18]
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d04d      	beq.n	801aa3e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a9a2:	4b31      	ldr	r3, [pc, #196]	; (801aa68 <TRACE_Send+0xfc>)
 801a9a4:	789b      	ldrb	r3, [r3, #2]
 801a9a6:	2b01      	cmp	r3, #1
 801a9a8:	d117      	bne.n	801a9da <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a9aa:	4b2f      	ldr	r3, [pc, #188]	; (801aa68 <TRACE_Send+0xfc>)
 801a9ac:	881a      	ldrh	r2, [r3, #0]
 801a9ae:	4b2e      	ldr	r3, [pc, #184]	; (801aa68 <TRACE_Send+0xfc>)
 801a9b0:	8a1b      	ldrh	r3, [r3, #16]
 801a9b2:	1ad3      	subs	r3, r2, r3
 801a9b4:	b29a      	uxth	r2, r3
 801a9b6:	4b2c      	ldr	r3, [pc, #176]	; (801aa68 <TRACE_Send+0xfc>)
 801a9b8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a9ba:	4b2b      	ldr	r3, [pc, #172]	; (801aa68 <TRACE_Send+0xfc>)
 801a9bc:	2202      	movs	r2, #2
 801a9be:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a9c0:	4b29      	ldr	r3, [pc, #164]	; (801aa68 <TRACE_Send+0xfc>)
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a9c6:	4b28      	ldr	r3, [pc, #160]	; (801aa68 <TRACE_Send+0xfc>)
 801a9c8:	8a9b      	ldrh	r3, [r3, #20]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d105      	bne.n	801a9da <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a9ce:	4b26      	ldr	r3, [pc, #152]	; (801aa68 <TRACE_Send+0xfc>)
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a9d4:	4b24      	ldr	r3, [pc, #144]	; (801aa68 <TRACE_Send+0xfc>)
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a9da:	4b23      	ldr	r3, [pc, #140]	; (801aa68 <TRACE_Send+0xfc>)
 801a9dc:	789b      	ldrb	r3, [r3, #2]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d115      	bne.n	801aa0e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a9e2:	4b21      	ldr	r3, [pc, #132]	; (801aa68 <TRACE_Send+0xfc>)
 801a9e4:	8a5a      	ldrh	r2, [r3, #18]
 801a9e6:	4b20      	ldr	r3, [pc, #128]	; (801aa68 <TRACE_Send+0xfc>)
 801a9e8:	8a1b      	ldrh	r3, [r3, #16]
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d908      	bls.n	801aa00 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a9ee:	4b1e      	ldr	r3, [pc, #120]	; (801aa68 <TRACE_Send+0xfc>)
 801a9f0:	8a5a      	ldrh	r2, [r3, #18]
 801a9f2:	4b1d      	ldr	r3, [pc, #116]	; (801aa68 <TRACE_Send+0xfc>)
 801a9f4:	8a1b      	ldrh	r3, [r3, #16]
 801a9f6:	1ad3      	subs	r3, r2, r3
 801a9f8:	b29a      	uxth	r2, r3
 801a9fa:	4b1b      	ldr	r3, [pc, #108]	; (801aa68 <TRACE_Send+0xfc>)
 801a9fc:	829a      	strh	r2, [r3, #20]
 801a9fe:	e006      	b.n	801aa0e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801aa00:	4b19      	ldr	r3, [pc, #100]	; (801aa68 <TRACE_Send+0xfc>)
 801aa02:	8a1b      	ldrh	r3, [r3, #16]
 801aa04:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa08:	b29a      	uxth	r2, r3
 801aa0a:	4b17      	ldr	r3, [pc, #92]	; (801aa68 <TRACE_Send+0xfc>)
 801aa0c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801aa0e:	4b16      	ldr	r3, [pc, #88]	; (801aa68 <TRACE_Send+0xfc>)
 801aa10:	8a1b      	ldrh	r3, [r3, #16]
 801aa12:	461a      	mov	r2, r3
 801aa14:	4b15      	ldr	r3, [pc, #84]	; (801aa6c <TRACE_Send+0x100>)
 801aa16:	4413      	add	r3, r2
 801aa18:	61bb      	str	r3, [r7, #24]
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	f383 8810 	msr	PRIMASK, r3
}
 801aa24:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801aa26:	f7e7 f895 	bl	8001b54 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801aa2a:	4b11      	ldr	r3, [pc, #68]	; (801aa70 <TRACE_Send+0x104>)
 801aa2c:	68db      	ldr	r3, [r3, #12]
 801aa2e:	4a0e      	ldr	r2, [pc, #56]	; (801aa68 <TRACE_Send+0xfc>)
 801aa30:	8a92      	ldrh	r2, [r2, #20]
 801aa32:	4611      	mov	r1, r2
 801aa34:	69b8      	ldr	r0, [r7, #24]
 801aa36:	4798      	blx	r3
 801aa38:	4603      	mov	r3, r0
 801aa3a:	77fb      	strb	r3, [r7, #31]
 801aa3c:	e00d      	b.n	801aa5a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801aa3e:	f000 f941 	bl	801acc4 <TRACE_UnLock>
 801aa42:	697b      	ldr	r3, [r7, #20]
 801aa44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa46:	68bb      	ldr	r3, [r7, #8]
 801aa48:	f383 8810 	msr	PRIMASK, r3
}
 801aa4c:	e005      	b.n	801aa5a <TRACE_Send+0xee>
 801aa4e:	697b      	ldr	r3, [r7, #20]
 801aa50:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	f383 8810 	msr	PRIMASK, r3
}
 801aa58:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801aa5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aa5e:	4618      	mov	r0, r3
 801aa60:	3720      	adds	r7, #32
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	20001088 	.word	0x20001088
 801aa6c:	200010a0 	.word	0x200010a0
 801aa70:	0801b824 	.word	0x0801b824

0801aa74 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b088      	sub	sp, #32
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa80:	f3ef 8310 	mrs	r3, PRIMASK
 801aa84:	617b      	str	r3, [r7, #20]
  return(result);
 801aa86:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aa88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa8a:	b672      	cpsid	i
}
 801aa8c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801aa8e:	4b3c      	ldr	r3, [pc, #240]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aa90:	789b      	ldrb	r3, [r3, #2]
 801aa92:	2b02      	cmp	r3, #2
 801aa94:	d106      	bne.n	801aaa4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801aa96:	4b3a      	ldr	r3, [pc, #232]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aa98:	2200      	movs	r2, #0
 801aa9a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801aa9c:	4b38      	ldr	r3, [pc, #224]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	821a      	strh	r2, [r3, #16]
 801aaa2:	e00a      	b.n	801aaba <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aaa4:	4b36      	ldr	r3, [pc, #216]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aaa6:	8a1a      	ldrh	r2, [r3, #16]
 801aaa8:	4b35      	ldr	r3, [pc, #212]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aaaa:	8a9b      	ldrh	r3, [r3, #20]
 801aaac:	4413      	add	r3, r2
 801aaae:	b29b      	uxth	r3, r3
 801aab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aab4:	b29a      	uxth	r2, r3
 801aab6:	4b32      	ldr	r3, [pc, #200]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aab8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801aaba:	4b31      	ldr	r3, [pc, #196]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aabc:	8a1a      	ldrh	r2, [r3, #16]
 801aabe:	4b30      	ldr	r3, [pc, #192]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aac0:	8a5b      	ldrh	r3, [r3, #18]
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d04d      	beq.n	801ab62 <TRACE_TxCpltCallback+0xee>
 801aac6:	4b2e      	ldr	r3, [pc, #184]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aac8:	8adb      	ldrh	r3, [r3, #22]
 801aaca:	2b01      	cmp	r3, #1
 801aacc:	d149      	bne.n	801ab62 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801aace:	4b2c      	ldr	r3, [pc, #176]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aad0:	789b      	ldrb	r3, [r3, #2]
 801aad2:	2b01      	cmp	r3, #1
 801aad4:	d117      	bne.n	801ab06 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801aad6:	4b2a      	ldr	r3, [pc, #168]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aad8:	881a      	ldrh	r2, [r3, #0]
 801aada:	4b29      	ldr	r3, [pc, #164]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aadc:	8a1b      	ldrh	r3, [r3, #16]
 801aade:	1ad3      	subs	r3, r2, r3
 801aae0:	b29a      	uxth	r2, r3
 801aae2:	4b27      	ldr	r3, [pc, #156]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aae4:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801aae6:	4b26      	ldr	r3, [pc, #152]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aae8:	2202      	movs	r2, #2
 801aaea:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801aaec:	4b24      	ldr	r3, [pc, #144]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aaee:	2200      	movs	r2, #0
 801aaf0:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801aaf2:	4b23      	ldr	r3, [pc, #140]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aaf4:	8a9b      	ldrh	r3, [r3, #20]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d105      	bne.n	801ab06 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801aafa:	4b21      	ldr	r3, [pc, #132]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801aafc:	2200      	movs	r2, #0
 801aafe:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ab00:	4b1f      	ldr	r3, [pc, #124]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab02:	2200      	movs	r2, #0
 801ab04:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ab06:	4b1e      	ldr	r3, [pc, #120]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab08:	789b      	ldrb	r3, [r3, #2]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d115      	bne.n	801ab3a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ab0e:	4b1c      	ldr	r3, [pc, #112]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab10:	8a5a      	ldrh	r2, [r3, #18]
 801ab12:	4b1b      	ldr	r3, [pc, #108]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab14:	8a1b      	ldrh	r3, [r3, #16]
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d908      	bls.n	801ab2c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ab1a:	4b19      	ldr	r3, [pc, #100]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab1c:	8a5a      	ldrh	r2, [r3, #18]
 801ab1e:	4b18      	ldr	r3, [pc, #96]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab20:	8a1b      	ldrh	r3, [r3, #16]
 801ab22:	1ad3      	subs	r3, r2, r3
 801ab24:	b29a      	uxth	r2, r3
 801ab26:	4b16      	ldr	r3, [pc, #88]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab28:	829a      	strh	r2, [r3, #20]
 801ab2a:	e006      	b.n	801ab3a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ab2c:	4b14      	ldr	r3, [pc, #80]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab2e:	8a1b      	ldrh	r3, [r3, #16]
 801ab30:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ab34:	b29a      	uxth	r2, r3
 801ab36:	4b12      	ldr	r3, [pc, #72]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab38:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ab3a:	4b11      	ldr	r3, [pc, #68]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab3c:	8a1b      	ldrh	r3, [r3, #16]
 801ab3e:	461a      	mov	r2, r3
 801ab40:	4b10      	ldr	r3, [pc, #64]	; (801ab84 <TRACE_TxCpltCallback+0x110>)
 801ab42:	4413      	add	r3, r2
 801ab44:	61fb      	str	r3, [r7, #28]
 801ab46:	69bb      	ldr	r3, [r7, #24]
 801ab48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	f383 8810 	msr	PRIMASK, r3
}
 801ab50:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ab52:	4b0d      	ldr	r3, [pc, #52]	; (801ab88 <TRACE_TxCpltCallback+0x114>)
 801ab54:	68db      	ldr	r3, [r3, #12]
 801ab56:	4a0a      	ldr	r2, [pc, #40]	; (801ab80 <TRACE_TxCpltCallback+0x10c>)
 801ab58:	8a92      	ldrh	r2, [r2, #20]
 801ab5a:	4611      	mov	r1, r2
 801ab5c:	69f8      	ldr	r0, [r7, #28]
 801ab5e:	4798      	blx	r3
 801ab60:	e00a      	b.n	801ab78 <TRACE_TxCpltCallback+0x104>
 801ab62:	69bb      	ldr	r3, [r7, #24]
 801ab64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	f383 8810 	msr	PRIMASK, r3
}
 801ab6c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ab6e:	f7e6 fff9 	bl	8001b64 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ab72:	f000 f8a7 	bl	801acc4 <TRACE_UnLock>
  }
}
 801ab76:	bf00      	nop
 801ab78:	bf00      	nop
 801ab7a:	3720      	adds	r7, #32
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	bd80      	pop	{r7, pc}
 801ab80:	20001088 	.word	0x20001088
 801ab84:	200010a0 	.word	0x200010a0
 801ab88:	0801b824 	.word	0x0801b824

0801ab8c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b087      	sub	sp, #28
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	4603      	mov	r3, r0
 801ab94:	6039      	str	r1, [r7, #0]
 801ab96:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ab98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab9c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab9e:	f3ef 8310 	mrs	r3, PRIMASK
 801aba2:	60fb      	str	r3, [r7, #12]
  return(result);
 801aba4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aba8:	b672      	cpsid	i
}
 801abaa:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801abac:	4b35      	ldr	r3, [pc, #212]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abae:	8a5a      	ldrh	r2, [r3, #18]
 801abb0:	4b34      	ldr	r3, [pc, #208]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abb2:	8a1b      	ldrh	r3, [r3, #16]
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d11b      	bne.n	801abf0 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801abb8:	4b32      	ldr	r3, [pc, #200]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abba:	8a5b      	ldrh	r3, [r3, #18]
 801abbc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801abc0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801abc2:	88fa      	ldrh	r2, [r7, #6]
 801abc4:	8afb      	ldrh	r3, [r7, #22]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d33a      	bcc.n	801ac40 <TRACE_AllocateBufer+0xb4>
 801abca:	4b2e      	ldr	r3, [pc, #184]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abcc:	8a1b      	ldrh	r3, [r3, #16]
 801abce:	88fa      	ldrh	r2, [r7, #6]
 801abd0:	429a      	cmp	r2, r3
 801abd2:	d235      	bcs.n	801ac40 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801abd4:	4b2b      	ldr	r3, [pc, #172]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abd6:	2201      	movs	r2, #1
 801abd8:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801abda:	4b2a      	ldr	r3, [pc, #168]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abdc:	8a5a      	ldrh	r2, [r3, #18]
 801abde:	4b29      	ldr	r3, [pc, #164]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abe0:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801abe2:	4b28      	ldr	r3, [pc, #160]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abe4:	8a1b      	ldrh	r3, [r3, #16]
 801abe6:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801abe8:	4b26      	ldr	r3, [pc, #152]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abea:	2200      	movs	r2, #0
 801abec:	825a      	strh	r2, [r3, #18]
 801abee:	e027      	b.n	801ac40 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801abf0:	4b24      	ldr	r3, [pc, #144]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abf2:	8a5a      	ldrh	r2, [r3, #18]
 801abf4:	4b23      	ldr	r3, [pc, #140]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abf6:	8a1b      	ldrh	r3, [r3, #16]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d91b      	bls.n	801ac34 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801abfc:	4b21      	ldr	r3, [pc, #132]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801abfe:	8a5b      	ldrh	r3, [r3, #18]
 801ac00:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ac04:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ac06:	88fa      	ldrh	r2, [r7, #6]
 801ac08:	8afb      	ldrh	r3, [r7, #22]
 801ac0a:	429a      	cmp	r2, r3
 801ac0c:	d318      	bcc.n	801ac40 <TRACE_AllocateBufer+0xb4>
 801ac0e:	4b1d      	ldr	r3, [pc, #116]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac10:	8a1b      	ldrh	r3, [r3, #16]
 801ac12:	88fa      	ldrh	r2, [r7, #6]
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d213      	bcs.n	801ac40 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ac18:	4b1a      	ldr	r3, [pc, #104]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac1a:	2201      	movs	r2, #1
 801ac1c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ac1e:	4b19      	ldr	r3, [pc, #100]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac20:	8a5a      	ldrh	r2, [r3, #18]
 801ac22:	4b18      	ldr	r3, [pc, #96]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac24:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ac26:	4b17      	ldr	r3, [pc, #92]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac28:	8a1b      	ldrh	r3, [r3, #16]
 801ac2a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ac2c:	4b15      	ldr	r3, [pc, #84]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac2e:	2200      	movs	r2, #0
 801ac30:	825a      	strh	r2, [r3, #18]
 801ac32:	e005      	b.n	801ac40 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ac34:	4b13      	ldr	r3, [pc, #76]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac36:	8a1a      	ldrh	r2, [r3, #16]
 801ac38:	4b12      	ldr	r3, [pc, #72]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac3a:	8a5b      	ldrh	r3, [r3, #18]
 801ac3c:	1ad3      	subs	r3, r2, r3
 801ac3e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ac40:	8afa      	ldrh	r2, [r7, #22]
 801ac42:	88fb      	ldrh	r3, [r7, #6]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d90f      	bls.n	801ac68 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ac48:	4b0e      	ldr	r3, [pc, #56]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac4a:	8a5a      	ldrh	r2, [r3, #18]
 801ac4c:	683b      	ldr	r3, [r7, #0]
 801ac4e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ac50:	4b0c      	ldr	r3, [pc, #48]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac52:	8a5a      	ldrh	r2, [r3, #18]
 801ac54:	88fb      	ldrh	r3, [r7, #6]
 801ac56:	4413      	add	r3, r2
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	4b08      	ldr	r3, [pc, #32]	; (801ac84 <TRACE_AllocateBufer+0xf8>)
 801ac62:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ac64:	2300      	movs	r3, #0
 801ac66:	82bb      	strh	r3, [r7, #20]
 801ac68:	693b      	ldr	r3, [r7, #16]
 801ac6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	f383 8810 	msr	PRIMASK, r3
}
 801ac72:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ac74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ac78:	4618      	mov	r0, r3
 801ac7a:	371c      	adds	r7, #28
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	bc80      	pop	{r7}
 801ac80:	4770      	bx	lr
 801ac82:	bf00      	nop
 801ac84:	20001088 	.word	0x20001088

0801ac88 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ac88:	b480      	push	{r7}
 801ac8a:	b085      	sub	sp, #20
 801ac8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac8e:	f3ef 8310 	mrs	r3, PRIMASK
 801ac92:	607b      	str	r3, [r7, #4]
  return(result);
 801ac94:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ac96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac98:	b672      	cpsid	i
}
 801ac9a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ac9c:	4b08      	ldr	r3, [pc, #32]	; (801acc0 <TRACE_Lock+0x38>)
 801ac9e:	8adb      	ldrh	r3, [r3, #22]
 801aca0:	3301      	adds	r3, #1
 801aca2:	b29a      	uxth	r2, r3
 801aca4:	4b06      	ldr	r3, [pc, #24]	; (801acc0 <TRACE_Lock+0x38>)
 801aca6:	82da      	strh	r2, [r3, #22]
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	f383 8810 	msr	PRIMASK, r3
}
 801acb2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801acb4:	bf00      	nop
 801acb6:	3714      	adds	r7, #20
 801acb8:	46bd      	mov	sp, r7
 801acba:	bc80      	pop	{r7}
 801acbc:	4770      	bx	lr
 801acbe:	bf00      	nop
 801acc0:	20001088 	.word	0x20001088

0801acc4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801acc4:	b480      	push	{r7}
 801acc6:	b085      	sub	sp, #20
 801acc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acca:	f3ef 8310 	mrs	r3, PRIMASK
 801acce:	607b      	str	r3, [r7, #4]
  return(result);
 801acd0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801acd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801acd4:	b672      	cpsid	i
}
 801acd6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801acd8:	4b08      	ldr	r3, [pc, #32]	; (801acfc <TRACE_UnLock+0x38>)
 801acda:	8adb      	ldrh	r3, [r3, #22]
 801acdc:	3b01      	subs	r3, #1
 801acde:	b29a      	uxth	r2, r3
 801ace0:	4b06      	ldr	r3, [pc, #24]	; (801acfc <TRACE_UnLock+0x38>)
 801ace2:	82da      	strh	r2, [r3, #22]
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	f383 8810 	msr	PRIMASK, r3
}
 801acee:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801acf0:	bf00      	nop
 801acf2:	3714      	adds	r7, #20
 801acf4:	46bd      	mov	sp, r7
 801acf6:	bc80      	pop	{r7}
 801acf8:	4770      	bx	lr
 801acfa:	bf00      	nop
 801acfc:	20001088 	.word	0x20001088

0801ad00 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ad00:	b480      	push	{r7}
 801ad02:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ad04:	4b05      	ldr	r3, [pc, #20]	; (801ad1c <TRACE_IsLocked+0x1c>)
 801ad06:	8adb      	ldrh	r3, [r3, #22]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	bf14      	ite	ne
 801ad0c:	2301      	movne	r3, #1
 801ad0e:	2300      	moveq	r3, #0
 801ad10:	b2db      	uxtb	r3, r3
}
 801ad12:	4618      	mov	r0, r3
 801ad14:	46bd      	mov	sp, r7
 801ad16:	bc80      	pop	{r7}
 801ad18:	4770      	bx	lr
 801ad1a:	bf00      	nop
 801ad1c:	20001088 	.word	0x20001088

0801ad20 <__libc_init_array>:
 801ad20:	b570      	push	{r4, r5, r6, lr}
 801ad22:	4d0d      	ldr	r5, [pc, #52]	; (801ad58 <__libc_init_array+0x38>)
 801ad24:	4c0d      	ldr	r4, [pc, #52]	; (801ad5c <__libc_init_array+0x3c>)
 801ad26:	1b64      	subs	r4, r4, r5
 801ad28:	10a4      	asrs	r4, r4, #2
 801ad2a:	2600      	movs	r6, #0
 801ad2c:	42a6      	cmp	r6, r4
 801ad2e:	d109      	bne.n	801ad44 <__libc_init_array+0x24>
 801ad30:	4d0b      	ldr	r5, [pc, #44]	; (801ad60 <__libc_init_array+0x40>)
 801ad32:	4c0c      	ldr	r4, [pc, #48]	; (801ad64 <__libc_init_array+0x44>)
 801ad34:	f000 f8a0 	bl	801ae78 <_init>
 801ad38:	1b64      	subs	r4, r4, r5
 801ad3a:	10a4      	asrs	r4, r4, #2
 801ad3c:	2600      	movs	r6, #0
 801ad3e:	42a6      	cmp	r6, r4
 801ad40:	d105      	bne.n	801ad4e <__libc_init_array+0x2e>
 801ad42:	bd70      	pop	{r4, r5, r6, pc}
 801ad44:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad48:	4798      	blx	r3
 801ad4a:	3601      	adds	r6, #1
 801ad4c:	e7ee      	b.n	801ad2c <__libc_init_array+0xc>
 801ad4e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ad52:	4798      	blx	r3
 801ad54:	3601      	adds	r6, #1
 801ad56:	e7f2      	b.n	801ad3e <__libc_init_array+0x1e>
 801ad58:	0801bd14 	.word	0x0801bd14
 801ad5c:	0801bd14 	.word	0x0801bd14
 801ad60:	0801bd14 	.word	0x0801bd14
 801ad64:	0801bd18 	.word	0x0801bd18

0801ad68 <memset>:
 801ad68:	4402      	add	r2, r0
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	4293      	cmp	r3, r2
 801ad6e:	d100      	bne.n	801ad72 <memset+0xa>
 801ad70:	4770      	bx	lr
 801ad72:	f803 1b01 	strb.w	r1, [r3], #1
 801ad76:	e7f9      	b.n	801ad6c <memset+0x4>

0801ad78 <floor>:
 801ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ad80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ad84:	2e13      	cmp	r6, #19
 801ad86:	4602      	mov	r2, r0
 801ad88:	460b      	mov	r3, r1
 801ad8a:	4607      	mov	r7, r0
 801ad8c:	460c      	mov	r4, r1
 801ad8e:	4605      	mov	r5, r0
 801ad90:	dc34      	bgt.n	801adfc <floor+0x84>
 801ad92:	2e00      	cmp	r6, #0
 801ad94:	da15      	bge.n	801adc2 <floor+0x4a>
 801ad96:	a334      	add	r3, pc, #208	; (adr r3, 801ae68 <floor+0xf0>)
 801ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad9c:	f7e5 f9fa 	bl	8000194 <__adddf3>
 801ada0:	2200      	movs	r2, #0
 801ada2:	2300      	movs	r3, #0
 801ada4:	f7e5 fc2a 	bl	80005fc <__aeabi_dcmpgt>
 801ada8:	b140      	cbz	r0, 801adbc <floor+0x44>
 801adaa:	2c00      	cmp	r4, #0
 801adac:	da59      	bge.n	801ae62 <floor+0xea>
 801adae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801adb2:	ea57 0503 	orrs.w	r5, r7, r3
 801adb6:	d001      	beq.n	801adbc <floor+0x44>
 801adb8:	4c2d      	ldr	r4, [pc, #180]	; (801ae70 <floor+0xf8>)
 801adba:	2500      	movs	r5, #0
 801adbc:	4623      	mov	r3, r4
 801adbe:	462f      	mov	r7, r5
 801adc0:	e025      	b.n	801ae0e <floor+0x96>
 801adc2:	4a2c      	ldr	r2, [pc, #176]	; (801ae74 <floor+0xfc>)
 801adc4:	fa42 f806 	asr.w	r8, r2, r6
 801adc8:	ea01 0208 	and.w	r2, r1, r8
 801adcc:	4302      	orrs	r2, r0
 801adce:	d01e      	beq.n	801ae0e <floor+0x96>
 801add0:	a325      	add	r3, pc, #148	; (adr r3, 801ae68 <floor+0xf0>)
 801add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add6:	f7e5 f9dd 	bl	8000194 <__adddf3>
 801adda:	2200      	movs	r2, #0
 801addc:	2300      	movs	r3, #0
 801adde:	f7e5 fc0d 	bl	80005fc <__aeabi_dcmpgt>
 801ade2:	2800      	cmp	r0, #0
 801ade4:	d0ea      	beq.n	801adbc <floor+0x44>
 801ade6:	2c00      	cmp	r4, #0
 801ade8:	bfbe      	ittt	lt
 801adea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801adee:	fa43 f606 	asrlt.w	r6, r3, r6
 801adf2:	19a4      	addlt	r4, r4, r6
 801adf4:	ea24 0408 	bic.w	r4, r4, r8
 801adf8:	2500      	movs	r5, #0
 801adfa:	e7df      	b.n	801adbc <floor+0x44>
 801adfc:	2e33      	cmp	r6, #51	; 0x33
 801adfe:	dd0a      	ble.n	801ae16 <floor+0x9e>
 801ae00:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ae04:	d103      	bne.n	801ae0e <floor+0x96>
 801ae06:	f7e5 f9c5 	bl	8000194 <__adddf3>
 801ae0a:	4607      	mov	r7, r0
 801ae0c:	460b      	mov	r3, r1
 801ae0e:	4638      	mov	r0, r7
 801ae10:	4619      	mov	r1, r3
 801ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae16:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 801ae1e:	fa22 f808 	lsr.w	r8, r2, r8
 801ae22:	ea18 0f00 	tst.w	r8, r0
 801ae26:	d0f2      	beq.n	801ae0e <floor+0x96>
 801ae28:	a30f      	add	r3, pc, #60	; (adr r3, 801ae68 <floor+0xf0>)
 801ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae2e:	f7e5 f9b1 	bl	8000194 <__adddf3>
 801ae32:	2200      	movs	r2, #0
 801ae34:	2300      	movs	r3, #0
 801ae36:	f7e5 fbe1 	bl	80005fc <__aeabi_dcmpgt>
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	d0be      	beq.n	801adbc <floor+0x44>
 801ae3e:	2c00      	cmp	r4, #0
 801ae40:	da02      	bge.n	801ae48 <floor+0xd0>
 801ae42:	2e14      	cmp	r6, #20
 801ae44:	d103      	bne.n	801ae4e <floor+0xd6>
 801ae46:	3401      	adds	r4, #1
 801ae48:	ea25 0508 	bic.w	r5, r5, r8
 801ae4c:	e7b6      	b.n	801adbc <floor+0x44>
 801ae4e:	2301      	movs	r3, #1
 801ae50:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ae54:	fa03 f606 	lsl.w	r6, r3, r6
 801ae58:	4435      	add	r5, r6
 801ae5a:	42bd      	cmp	r5, r7
 801ae5c:	bf38      	it	cc
 801ae5e:	18e4      	addcc	r4, r4, r3
 801ae60:	e7f2      	b.n	801ae48 <floor+0xd0>
 801ae62:	2500      	movs	r5, #0
 801ae64:	462c      	mov	r4, r5
 801ae66:	e7a9      	b.n	801adbc <floor+0x44>
 801ae68:	8800759c 	.word	0x8800759c
 801ae6c:	7e37e43c 	.word	0x7e37e43c
 801ae70:	bff00000 	.word	0xbff00000
 801ae74:	000fffff 	.word	0x000fffff

0801ae78 <_init>:
 801ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae7a:	bf00      	nop
 801ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae7e:	bc08      	pop	{r3}
 801ae80:	469e      	mov	lr, r3
 801ae82:	4770      	bx	lr

0801ae84 <_fini>:
 801ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae86:	bf00      	nop
 801ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae8a:	bc08      	pop	{r3}
 801ae8c:	469e      	mov	lr, r3
 801ae8e:	4770      	bx	lr
