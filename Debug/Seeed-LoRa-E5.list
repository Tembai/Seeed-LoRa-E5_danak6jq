
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abc8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  0801ad00  0801ad00  0002ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bb9c  0801bb9c  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bb9c  0801bb9c  0002bb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bba4  0801bba4  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bba4  0801bba4  0002bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bba8  0801bba8  0002bba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0801bbac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001714  2000012c  0801bcd8  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001840  0801bcd8  00031840  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061c30  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b529  00000000  00000000  00091d86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035d0  00000000  00000000  0009d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c8  00000000  00000000  000a0880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002837f  00000000  00000000  000a3a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e855  00000000  00000000  000cbdc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf63  00000000  00000000  0010a61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d757f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000de6c  00000000  00000000  001d75d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000012c 	.word	0x2000012c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ace8 	.word	0x0801ace8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000130 	.word	0x20000130
 8000174:	0801ace8 	.word	0x0801ace8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <Sensor_Init+0x14>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fc1c 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
	  }
	  */



	return;
 8000e60:	bf00      	nop
}
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0801ad00 	.word	0x0801ad00

08000e68 <Sensor_Data>:


void Sensor_Data(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8

	Sensor_Init();
 8000e6e:	f7ff ffef 	bl	8000e50 <Sensor_Init>

	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <Sensor_Data+0xdc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fc0d 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f001 f8a9 	bl	8001fd6 <HAL_Delay>


	stmdev_ctx_t dev_ctx;

    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <Sensor_Data+0xe0>)
 8000e86:	607b      	str	r3, [r7, #4]
    dev_ctx.read_reg = platform_read;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <Sensor_Data+0xe4>)
 8000e8a:	60bb      	str	r3, [r7, #8]
    dev_ctx.handle = &hi2c2;
 8000e8c:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <Sensor_Data+0xe8>)
 8000e8e:	60fb      	str	r3, [r7, #12]

	uint8_t reg[3];
	reg[0]=0x1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	703b      	strb	r3, [r7, #0]
	reg[1]=0x1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	707b      	strb	r3, [r7, #1]
	reg[2]=0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	70bb      	strb	r3, [r7, #2]
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);


	I2C_id();
 8000e9c:	f000 f88e 	bl	8000fbc <I2C_id>


	lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fa45 	bl	8001334 <lps22hh_reset_set>
	do {
	lps22hh_reset_get(&dev_ctx, &rst);									// software reset
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4929      	ldr	r1, [pc, #164]	; (8000f54 <Sensor_Data+0xec>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fa66 	bl	8001380 <lps22hh_reset_get>
	} while (rst);
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <Sensor_Data+0xec>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f6      	bne.n	8000eaa <Sensor_Data+0x42>





	HAL_Delay(50);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f001 f88a 	bl	8001fd6 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <Sensor_Data+0xf0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4923      	ldr	r1, [pc, #140]	; (8000f58 <Sensor_Data+0xf0>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fa20 	bl	8001312 <lps22hh_device_id_get>
	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);
 8000ed2:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <Sensor_Data+0xf0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <Sensor_Data+0xf4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f019 fbda 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>


	/* Enable Block Data Update */
	  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f975 	bl	80011d8 <lps22hh_block_data_update_set>
	  /* Set Output Data Rate */
	  lps22hh_data_rate_set(&dev_ctx, LPS22HH_POWER_DOWN);				// one-shot mode enabled
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f996 	bl	8001224 <lps22hh_data_rate_set>




	    do {
	    	HAL_Delay(1000);
 8000ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efc:	f001 f86b 	bl	8001fd6 <HAL_Delay>
//	    	lps22hh_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
	    	one_shot_trigger();
 8000f00:	f000 f834 	bl	8000f6c <one_shot_trigger>
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <Sensor_Data+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

//	    	ret =  platform_read(&hi2c2, LPS22HH_PRESS_OUT_XL, reg, 3);


			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4914      	ldr	r1, [pc, #80]	; (8000f60 <Sensor_Data+0xf8>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f9d6 	bl	80012c0 <lps22hh_pressure_raw_get>
//			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
//			APP_LOG(TS_OFF, VLEVEL_M, "raw als decimaal:%d\r\n", data_raw_pressure);
			pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <Sensor_Data+0xf8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f94b 	bl	80011b4 <lps22hh_from_lsb_to_hpa>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <Sensor_Data+0xfc>)
 8000f22:	6013      	str	r3, [r2, #0]
//			APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%d\r\n", pressure_hPa);
	      APP_LOG(TS_OFF, VLEVEL_M, "pressure [hPa]:%f\r\n", (float)(pressure_hPa));
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <Sensor_Data+0xfc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fa91 	bl	8000450 <__aeabi_f2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9cd 2300 	strd	r2, r3, [sp]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <Sensor_Data+0x100>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f019 fbab 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
	    	HAL_Delay(1000);
 8000f42:	e7d9      	b.n	8000ef8 <Sensor_Data+0x90>
 8000f44:	0801ad28 	.word	0x0801ad28
 8000f48:	08001001 	.word	0x08001001
 8000f4c:	080010d9 	.word	0x080010d9
 8000f50:	20001608 	.word	0x20001608
 8000f54:	20000151 	.word	0x20000151
 8000f58:	20000150 	.word	0x20000150
 8000f5c:	0801ad50 	.word	0x0801ad50
 8000f60:	20000148 	.word	0x20000148
 8000f64:	2000014c 	.word	0x2000014c
 8000f68:	0801ad6c 	.word	0x0801ad6c

08000f6c <one_shot_trigger>:
    var[0]=0x14;
    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    return;
}

void one_shot_trigger(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef ret;
    uint8_t var[1];
  	static const uint8_t CTRL_REG2 = 0x11;				// register
    var[0]=0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	713b      	strb	r3, [r7, #4]

    ret=platform_read(&hi2c2, CTRL_REG2, var, 1);
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <one_shot_trigger+0x48>)
 8000f78:	7819      	ldrb	r1, [r3, #0]
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <one_shot_trigger+0x4c>)
 8000f80:	f000 f8aa 	bl	80010d8 <platform_read>
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10e      	bne.n	8000fac <one_shot_trigger+0x40>
    {
    	var[0]=var[0] | (uint8_t) 1;
 8000f8e:	793b      	ldrb	r3, [r7, #4]
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	713b      	strb	r3, [r7, #4]
		ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <one_shot_trigger+0x48>)
 8000f9a:	7819      	ldrb	r1, [r3, #0]
 8000f9c:	1d3a      	adds	r2, r7, #4
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <one_shot_trigger+0x4c>)
 8000fa2:	f000 f82d 	bl	8001000 <platform_write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    }


    return;
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0801b5cf 	.word	0x0801b5cf
 8000fb8:	20001608 	.word	0x20001608

08000fbc <I2C_id>:


void I2C_id(void){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <I2C_id+0x38>)
 8000fcc:	7819      	ldrb	r1, [r3, #0]
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <I2C_id+0x3c>)
 8000fd4:	f000 f880 	bl	80010d8 <platform_read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000fdc:	793b      	ldrb	r3, [r7, #4]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <I2C_id+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f019 fb56 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return;
 8000fec:	bf00      	nop
}
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0801b5d0 	.word	0x0801b5d0
 8000ff8:	20001608 	.word	0x20001608
 8000ffc:	0801adac 	.word	0x0801adac

08001000 <platform_write>:


static int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	461a      	mov	r2, r3
 800100c:	460b      	mov	r3, r1
 800100e:	72fb      	strb	r3, [r7, #11]
 8001010:	4613      	mov	r3, r2
 8001012:	813b      	strh	r3, [r7, #8]
 8001014:	466b      	mov	r3, sp
 8001016:	461d      	mov	r5, r3
//    if (len>0){
//		for (int i=0; i<len; i++){
//			message[i]=Bufp[i];
//		}
//    }
    uint8_t buffer[len+1];
 8001018:	893b      	ldrh	r3, [r7, #8]
 800101a:	1c5c      	adds	r4, r3, #1
 800101c:	1e63      	subs	r3, r4, #1
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	4623      	mov	r3, r4
 8001022:	4618      	mov	r0, r3
 8001024:	f04f 0100 	mov.w	r1, #0
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	00cb      	lsls	r3, r1, #3
 8001032:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001036:	00c2      	lsls	r2, r0, #3
 8001038:	4623      	mov	r3, r4
 800103a:	4618      	mov	r0, r3
 800103c:	f04f 0100 	mov.w	r1, #0
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	00cb      	lsls	r3, r1, #3
 800104a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800104e:	00c2      	lsls	r2, r0, #3
 8001050:	4623      	mov	r3, r4
 8001052:	3307      	adds	r3, #7
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	ebad 0d03 	sub.w	sp, sp, r3
 800105c:	ab02      	add	r3, sp, #8
 800105e:	3300      	adds	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    if (len>0){
 8001062:	893b      	ldrh	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <platform_write+0x90>
		for (int i=1;i<(len+1);i++){
 8001068:	2301      	movs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	e00c      	b.n	8001088 <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b01      	subs	r3, #1
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	7819      	ldrb	r1, [r3, #0]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	460a      	mov	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	893b      	ldrh	r3, [r7, #8]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	429a      	cmp	r2, r3
 800108e:	ddee      	ble.n	800106e <platform_write+0x6e>
			}}
	buffer[0]=Reg;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	7afa      	ldrb	r2, [r7, #11]
 8001094:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 8001096:	23ba      	movs	r3, #186	; 0xba
 8001098:	b299      	uxth	r1, r3
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	893b      	ldrh	r3, [r7, #8]
 800109e:	3301      	adds	r3, #1
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	9000      	str	r0, [sp, #0]
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <platform_write+0xd0>)
 80010aa:	f003 ffc3 	bl	8005034 <HAL_I2C_Master_Transmit>
 80010ae:	4603      	mov	r3, r0
 80010b0:	74fb      	strb	r3, [r7, #19]

	if (ret){
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <platform_write+0xd4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2002      	movs	r0, #2
 80010c0:	f019 faea 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	46ad      	mov	sp, r5
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	20001608 	.word	0x20001608
 80010d4:	0801adc0 	.word	0x0801adc0

080010d8 <platform_read>:



static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af02      	add	r7, sp, #8
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	813b      	strh	r3, [r7, #8]
//int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){

    HAL_StatusTypeDef ret;
    uint8_t reg[1];
    reg[0]=Reg;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	753b      	strb	r3, [r7, #20]

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 80010f0:	23ba      	movs	r3, #186	; 0xba
 80010f2:	b299      	uxth	r1, r3
 80010f4:	f107 0214 	add.w	r2, r7, #20
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <platform_read+0x74>)
 8001102:	f003 ff97 	bl	8005034 <HAL_I2C_Master_Transmit>
 8001106:	4603      	mov	r3, r0
 8001108:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 800110a:	893b      	ldrh	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00f      	beq.n	8001130 <platform_read+0x58>
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 8001116:	23bb      	movs	r3, #187	; 0xbb
 8001118:	b299      	uxth	r1, r3
 800111a:	893b      	ldrh	r3, [r7, #8]
 800111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001120:	9200      	str	r2, [sp, #0]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <platform_read+0x74>)
 8001126:	f004 f879 	bl	800521c <HAL_I2C_Master_Receive>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	e008      	b.n	8001142 <platform_read+0x6a>
	}
	else if(ret){
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <platform_read+0x78>)
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2002      	movs	r0, #2
 800113e:	f019 faab 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20001608 	.word	0x20001608
 8001150:	0801addc 	.word	0x0801addc

08001154 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	461a      	mov	r2, r3
 8001160:	460b      	mov	r3, r1
 8001162:	72fb      	strb	r3, [r7, #11]
 8001164:	4613      	mov	r3, r2
 8001166:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685c      	ldr	r4, [r3, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6898      	ldr	r0, [r3, #8]
 8001170:	893b      	ldrh	r3, [r7, #8]
 8001172:	7af9      	ldrb	r1, [r7, #11]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	47a0      	blx	r4
 8001178:	6178      	str	r0, [r7, #20]

  return ret;
 800117a:	697b      	ldr	r3, [r7, #20]
}
 800117c:	4618      	mov	r0, r3
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	461a      	mov	r2, r3
 8001190:	460b      	mov	r3, r1
 8001192:	72fb      	strb	r3, [r7, #11]
 8001194:	4613      	mov	r3, r2
 8001196:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6898      	ldr	r0, [r3, #8]
 80011a0:	893b      	ldrh	r3, [r7, #8]
 80011a2:	7af9      	ldrb	r1, [r7, #11]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	47a0      	blx	r4
 80011a8:	6178      	str	r0, [r7, #20]

  return ret;
 80011aa:	697b      	ldr	r3, [r7, #20]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff fb05 	bl	80007cc <__aeabi_ui2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f04f 4193 	mov.w	r1, #1233125376	; 0x49800000
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fc0b 	bl	80009e4 <__aeabi_fdiv>
 80011ce:	4603      	mov	r3, r0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	2301      	movs	r3, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffb1 	bl	8001154 <lps22hh_read_reg>
 80011f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	7a3b      	ldrb	r3, [r7, #8]
 8001204:	f362 0341 	bfi	r3, r2, #1, #1
 8001208:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800120a:	f107 0208 	add.w	r2, r7, #8
 800120e:	2301      	movs	r3, #1
 8001210:	2110      	movs	r1, #16
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb6 	bl	8001184 <lps22hh_write_reg>
 8001218:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800121a:	68fb      	ldr	r3, [r7, #12]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001230:	f107 0210 	add.w	r2, r7, #16
 8001234:	2301      	movs	r3, #1
 8001236:	2110      	movs	r1, #16
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff8b 	bl	8001154 <lps22hh_read_reg>
 800123e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	2301      	movs	r3, #1
 800124c:	2111      	movs	r1, #17
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff80 	bl	8001154 <lps22hh_read_reg>
 8001254:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10f      	bne.n	800127c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2da      	uxtb	r2, r3
 8001264:	7c3b      	ldrb	r3, [r7, #16]
 8001266:	f362 1306 	bfi	r3, r2, #4, #3
 800126a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800126c:	f107 0210 	add.w	r2, r7, #16
 8001270:	2301      	movs	r3, #1
 8001272:	2110      	movs	r1, #16
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff85 	bl	8001184 <lps22hh_write_reg>
 800127a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d119      	bne.n	80012b6 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	7b3b      	ldrb	r3, [r7, #12]
 800128e:	f362 0341 	bfi	r3, r2, #1, #1
 8001292:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	08db      	lsrs	r3, r3, #3
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7b3b      	ldrb	r3, [r7, #12]
 80012a0:	f362 0300 	bfi	r3, r2, #0, #1
 80012a4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	2301      	movs	r3, #1
 80012ac:	2111      	movs	r1, #17
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff68 	bl	8001184 <lps22hh_write_reg>
 80012b4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012b6:	697b      	ldr	r3, [r7, #20]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	2303      	movs	r3, #3
 80012d0:	2128      	movs	r1, #40	; 0x28
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff3e 	bl	8001154 <lps22hh_read_reg>
 80012d8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012da:	7abb      	ldrb	r3, [r7, #10]
 80012dc:	461a      	mov	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	7a7a      	ldrb	r2, [r7, #9]
 80012ea:	441a      	add	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	7a3a      	ldrb	r2, [r7, #8]
 80012f8:	441a      	add	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	021a      	lsls	r2, r3, #8
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]

  return ret;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800131c:	2301      	movs	r3, #1
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	210f      	movs	r1, #15
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff16 	bl	8001154 <lps22hh_read_reg>
 8001328:	60f8      	str	r0, [r7, #12]

  return ret;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001340:	f107 0208 	add.w	r2, r7, #8
 8001344:	2301      	movs	r3, #1
 8001346:	2111      	movs	r1, #17
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff03 	bl	8001154 <lps22hh_read_reg>
 800134e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10f      	bne.n	8001376 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	7a3b      	ldrb	r3, [r7, #8]
 8001360:	f362 0382 	bfi	r3, r2, #2, #1
 8001364:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001366:	f107 0208 	add.w	r2, r7, #8
 800136a:	2301      	movs	r3, #1
 800136c:	2111      	movs	r1, #17
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff08 	bl	8001184 <lps22hh_write_reg>
 8001374:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	2301      	movs	r3, #1
 8001390:	2111      	movs	r1, #17
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fede 	bl	8001154 <lps22hh_read_reg>
 8001398:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800139a:	7a3b      	ldrb	r3, [r7, #8]
 800139c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	701a      	strb	r2, [r3, #0]

  return ret;
 80013a8:	68fb      	ldr	r3, [r7, #12]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f8:	4013      	ands	r3, r2
 80013fa:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <MX_ADC_Init+0x94>)
 800140e:	4a24      	ldr	r2, [pc, #144]	; (80014a0 <MX_ADC_Init+0x98>)
 8001410:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <MX_ADC_Init+0x94>)
 8001414:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001418:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <MX_ADC_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_ADC_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <MX_ADC_Init+0x94>)
 800142e:	2204      	movs	r2, #4
 8001430:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_ADC_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_ADC_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_ADC_Init+0x94>)
 8001440:	2200      	movs	r2, #0
 8001442:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_ADC_Init+0x94>)
 8001446:	2201      	movs	r2, #1
 8001448:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <MX_ADC_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <MX_ADC_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_ADC_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <MX_ADC_Init+0x94>)
 8001468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_ADC_Init+0x94>)
 8001470:	2207      	movs	r2, #7
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_ADC_Init+0x94>)
 8001476:	2207      	movs	r2, #7
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_ADC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_ADC_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_ADC_Init+0x94>)
 800148a:	f001 ff47 	bl	800331c <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 faa8 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200015a4 	.word	0x200015a4
 80014a0:	40012400 	.word	0x40012400

080014a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_ADC_MspInit+0x24>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d103      	bne.n	80014be <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ba:	f7ff ff7a 	bl	80013b2 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012400 	.word	0x40012400

080014cc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_ADC_MspDeInit+0x24>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d103      	bne.n	80014e6 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014e2:	f7ff ff7e 	bl	80013e2 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012400 	.word	0x40012400

080014f4 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <SYS_InitMeasurement+0x14>)
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <SYS_InitMeasurement+0x18>)
 80014fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200015a4 	.word	0x200015a4
 800150c:	40012400 	.word	0x40012400

08001510 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800151e:	f000 f871 	bl	8001604 <SYS_GetBatteryLevel>
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001526:	4830      	ldr	r0, [pc, #192]	; (80015e8 <SYS_GetTemperatureLevel+0xd8>)
 8001528:	f000 f8a0 	bl	800166c <ADC_ReadChannels>
 800152c:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <SYS_GetTemperatureLevel+0xdc>)
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <SYS_GetTemperatureLevel+0xe0>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d026      	beq.n	8001588 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <SYS_GetTemperatureLevel+0xdc>)
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <SYS_GetTemperatureLevel+0xe0>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d01c      	beq.n	8001580 <SYS_GetTemperatureLevel+0x70>
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <SYS_GetTemperatureLevel+0xe4>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	461a      	mov	r2, r3
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <SYS_GetTemperatureLevel+0xe0>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2264      	movs	r2, #100	; 0x64
 8001562:	fb02 f203 	mul.w	r2, r2, r3
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <SYS_GetTemperatureLevel+0xdc>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <SYS_GetTemperatureLevel+0xe0>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	1acb      	subs	r3, r1, r3
 8001572:	fb92 f3f3 	sdiv	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	331e      	adds	r3, #30
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21b      	sxth	r3, r3
 800157e:	e001      	b.n	8001584 <SYS_GetTemperatureLevel+0x74>
 8001580:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001584:	81fb      	strh	r3, [r7, #14]
 8001586:	e01c      	b.n	80015c2 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	fb02 f203 	mul.w	r2, r2, r3
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <SYS_GetTemperatureLevel+0xe8>)
 8001592:	fba3 1302 	umull	r1, r3, r3, r2
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	0852      	lsrs	r2, r2, #1
 800159a:	4413      	add	r3, r2
 800159c:	0adb      	lsrs	r3, r3, #11
 800159e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 80015aa:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <SYS_GetTemperatureLevel+0xec>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1292      	asrs	r2, r2, #10
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	331e      	adds	r3, #30
 80015be:	b29b      	uxth	r3, r3
 80015c0:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80015c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <SYS_GetTemperatureLevel+0xf0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	2100      	movs	r1, #0
 80015ce:	2001      	movs	r0, #1
 80015d0:	f019 f862 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80015d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	b0001000 	.word	0xb0001000
 80015ec:	1fff75c8 	.word	0x1fff75c8
 80015f0:	1fff75a8 	.word	0x1fff75a8
 80015f4:	09ee009f 	.word	0x09ee009f
 80015f8:	00100101 	.word	0x00100101
 80015fc:	68db8bad 	.word	0x68db8bad
 8001600:	0801ae10 	.word	0x0801ae10

08001604 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001612:	4813      	ldr	r0, [pc, #76]	; (8001660 <SYS_GetBatteryLevel+0x5c>)
 8001614:	f000 f82a 	bl	800166c <ADC_ReadChannels>
 8001618:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	e016      	b.n	8001654 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <SYS_GetBatteryLevel+0x60>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162e:	4293      	cmp	r3, r2
 8001630:	d00b      	beq.n	800164a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <SYS_GetBatteryLevel+0x60>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	f640 43e4 	movw	r3, #3300	; 0xce4
 800163c:	fb03 f202 	mul.w	r2, r3, r2
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	e004      	b.n	8001654 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <SYS_GetBatteryLevel+0x64>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001654:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	b4002000 	.word	0xb4002000
 8001664:	1fff75aa 	.word	0x1fff75aa
 8001668:	004c08d8 	.word	0x004c08d8

0800166c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001684:	f7ff fec0 	bl	8001408 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001688:	481a      	ldr	r0, [pc, #104]	; (80016f4 <ADC_ReadChannels+0x88>)
 800168a:	f002 fc2d 	bl	8003ee8 <HAL_ADCEx_Calibration_Start>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001694:	f000 f9a8 	bl	80019e8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016ac:	f002 f994 	bl	80039d8 <HAL_ADC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80016b6:	f000 f997 	bl	80019e8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016bc:	f002 f870 	bl	80037a0 <HAL_ADC_Start>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016c6:	f000 f98f 	bl	80019e8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016ca:	f04f 31ff 	mov.w	r1, #4294967295
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016d0:	f002 f8de 	bl	8003890 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016d6:	f002 f8a9 	bl	800382c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016dc:	f002 f96f 	bl	80039be <HAL_ADC_GetValue>
 80016e0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016e2:	4804      	ldr	r0, [pc, #16]	; (80016f4 <ADC_ReadChannels+0x88>)
 80016e4:	f001 ffe0 	bl	80036a8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200015a4 	.word	0x200015a4

080016f8 <LL_AHB1_GRP1_EnableClock>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4313      	orrs	r3, r2
 800170e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171c:	68fb      	ldr	r3, [r7, #12]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800172c:	2004      	movs	r0, #4
 800172e:	f7ff ffe3 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff ffe0 	bl	80016f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2102      	movs	r1, #2
 800173c:	200b      	movs	r0, #11
 800173e:	f002 fd26 	bl	800418e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001742:	200b      	movs	r0, #11
 8001744:	f002 fd3d 	bl	80041c2 <HAL_NVIC_EnableIRQ>

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <LL_AHB2_GRP1_EnableClock>:
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001770:	68fb      	ldr	r3, [r7, #12]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <LL_APB1_GRP1_EnableClock>:
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800178a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_I2C2_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_I2C2_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_I2C2_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <MX_I2C2_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_I2C2_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_I2C2_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_I2C2_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_I2C2_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C2_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C2_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_I2C2_Init+0x74>)
 80017e8:	f003 fb94 	bl	8004f14 <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 f8f9 	bl	80019e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_I2C2_Init+0x74>)
 80017fa:	f003 fff3 	bl	80057e4 <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 f8f0 	bl	80019e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C2_Init+0x74>)
 800180c:	f004 f834 	bl	8005878 <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 f8e7 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001608 	.word	0x20001608
 8001824:	40005800 	.word	0x40005800
 8001828:	20303e5d 	.word	0x20303e5d

0800182c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b096      	sub	sp, #88	; 0x58
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2238      	movs	r2, #56	; 0x38
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f019 f9c1 	bl	801abd4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a21      	ldr	r2, [pc, #132]	; (80018dc <HAL_I2C_MspInit+0xb0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d13b      	bne.n	80018d4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001860:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fa3a 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001876:	f000 f8b7 	bl	80019e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff ff66 	bl	800174c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff ff63 	bl	800174c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188c:	2312      	movs	r3, #18
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001898:	2304      	movs	r3, #4
 800189a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a0:	4619      	mov	r1, r3
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a6:	f003 f8bf 	bl	8004a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b0:	2312      	movs	r3, #18
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018bc:	2304      	movs	r3, #4
 80018be:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <HAL_I2C_MspInit+0xb4>)
 80018c8:	f003 f8ae 	bl	8004a28 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018d0:	f7ff ff54 	bl	800177c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018d4:	bf00      	nop
 80018d6:	3758      	adds	r7, #88	; 0x58
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40005800 	.word	0x40005800
 80018e0:	48000400 	.word	0x48000400

080018e4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	f023 0218 	bic.w	r2, r3, #24
 80018f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4313      	orrs	r3, r2
 8001900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001914:	f001 fb36 	bl	8002f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f80c 	bl	8001934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 800191c:	f008 fc76 	bl	800a20c <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001920:	f7ff ff44 	bl	80017ac <MX_I2C2_Init>
    /* USER CODE END WHILE */
//    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	  Sensor_Data();
 8001924:	f7ff faa0 	bl	8000e68 <Sensor_Data>

	  HAL_Delay(2000);
 8001928:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800192c:	f000 fb53 	bl	8001fd6 <HAL_Delay>
  {
 8001930:	e7f8      	b.n	8001924 <main+0x16>
	...

08001934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09a      	sub	sp, #104	; 0x68
 8001938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	2248      	movs	r2, #72	; 0x48
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f019 f946 	bl	801abd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800195a:	f003 ffd9 	bl	8005910 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff ffc0 	bl	80018e4 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <SystemClock_Config+0xb0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <SystemClock_Config+0xb0>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <SystemClock_Config+0xb0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001980:	2324      	movs	r3, #36	; 0x24
 8001982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001984:	2381      	movs	r3, #129	; 0x81
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001990:	23b0      	movs	r3, #176	; 0xb0
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001998:	f107 0320 	add.w	r3, r7, #32
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fa61 	bl	8005e64 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019a8:	f000 f81e 	bl	80019e8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019ac:	234f      	movs	r3, #79	; 0x4f
 80019ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c4:	f107 0308 	add.w	r3, r7, #8
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fde4 	bl	8006598 <HAL_RCC_ClockConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019d6:	f000 f807 	bl	80019e8 <Error_Handler>
  }
}
 80019da:	bf00      	nop
 80019dc:	3768      	adds	r7, #104	; 0x68
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	58000400 	.word	0x58000400

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>

080019f2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <LL_APB1_GRP1_EnableClock>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4013      	ands	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	222c      	movs	r2, #44	; 0x2c
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f019 f8bf 	bl	801abd4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a58:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <MX_RTC_Init+0xa0>)
 8001a5a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a5e:	221f      	movs	r2, #31
 8001a60:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a8a:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a8c:	f005 fa44 	bl	8006f18 <HAL_RTC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001a96:	f7ff ffa7 	bl	80019e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001a9a:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001a9c:	f005 fd32 	bl	8007504 <HAL_RTCEx_SetSSRU_IT>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001aa6:	f7ff ff9f 	bl	80019e8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ab6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001aba:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_RTC_Init+0x9c>)
 8001aca:	f005 fa9f 	bl	800700c <HAL_RTC_SetAlarm_IT>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001ad4:	f7ff ff88 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20001654 	.word	0x20001654
 8001ae4:	40002800 	.word	0x40002800

08001ae8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b090      	sub	sp, #64	; 0x40
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2238      	movs	r2, #56	; 0x38
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f019 f86b 	bl	801abd4 <memset>
  if(rtcHandle->Instance==RTC)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_RTC_MspInit+0x74>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d125      	bne.n	8001b54 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 f8e3 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b24:	f7ff ff60 	bl	80019e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b28:	f7ff ff63 	bl	80019f2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b30:	f7ff ff6f 	bl	8001a12 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f002 fb28 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f002 fb3f 	bl	80041c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	202a      	movs	r0, #42	; 0x2a
 8001b4a:	f002 fb20 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b4e:	202a      	movs	r0, #42	; 0x2a
 8001b50:	f002 fb37 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3740      	adds	r7, #64	; 0x40
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40002800 	.word	0x40002800

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <NMI_Handler+0x4>

08001b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <HardFault_Handler+0x4>

08001b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <MemManage_Handler+0x4>

08001b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
	...

08001bbc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001bc2:	f005 fcdb 	bl	800757c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20001654 	.word	0x20001654

08001bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bd6:	f002 fd8b 	bl	80046f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20001698 	.word	0x20001698

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f006 fb27 	bl	800823c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200016f8 	.word	0x200016f8

08001bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c00:	f003 f970 	bl	8004ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <RTC_Alarm_IRQHandler+0x10>)
 8001c0e:	f005 fb65 	bl	80072dc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20001654 	.word	0x20001654

08001c1c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c22:	f006 f813 	bl	8007c4c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000168c 	.word	0x2000168c

08001c30 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_SUBGHZ_Init+0x20>)
 8001c66:	2208      	movs	r2, #8
 8001c68:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_SUBGHZ_Init+0x20>)
 8001c6c:	f005 fd72 	bl	8007754 <HAL_SUBGHZ_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c76:	f7ff feb7 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000168c 	.word	0x2000168c

08001c84 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ffcf 	bl	8001c30 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2032      	movs	r0, #50	; 0x32
 8001c98:	f002 fa79 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c9c:	2032      	movs	r0, #50	; 0x32
 8001c9e:	f002 fa90 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <LL_FLASH_GetUDN+0x10>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	1fff7580 	.word	0x1fff7580

08001ce4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <LL_FLASH_GetDeviceID+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	1fff7584 	.word	0x1fff7584

08001cfc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <LL_FLASH_GetSTCompanyID+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	0a1b      	lsrs	r3, r3, #8
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	1fff7584 	.word	0x1fff7584

08001d14 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ffc6 	bl	8001caa <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d1e:	f018 f9fd 	bl	801a11c <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d22:	f000 f991 	bl	8002048 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d26:	f000 f9b1 	bl	800208c <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d2a:	f018 fc87 	bl	801a63c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <SystemApp_Init+0x48>)
 8001d30:	f018 fd34 	bl	801a79c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f018 fd3f 	bl	801a7b8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d3a:	f7ff fbdb 	bl	80014f4 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d3e:	f000 fa6f 	bl	8002220 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d42:	f017 fcf1 	bl	8019728 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d46:	2101      	movs	r1, #1
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f017 fd2d 	bl	80197a8 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2001      	movs	r0, #1
 8001d52:	f017 fcf9 	bl	8019748 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	08001f29 	.word	0x08001f29

08001d60 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d6a:	f7ff fc4b 	bl	8001604 <SYS_GetBatteryLevel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d902      	bls.n	8001d82 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d7c:	23fe      	movs	r3, #254	; 0xfe
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	e014      	b.n	8001dac <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001d88:	d202      	bcs.n	8001d90 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	e00d      	b.n	8001dac <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001d90:	88bb      	ldrh	r3, [r7, #4]
 8001d92:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001d96:	461a      	mov	r2, r3
 8001d98:	4613      	mov	r3, r2
 8001d9a:	01db      	lsls	r3, r3, #7
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <GetBatteryLevel+0x68>)
 8001da4:	fba3 2302 	umull	r2, r3, r3, r2
 8001da8:	09db      	lsrs	r3, r3, #7
 8001daa:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <GetBatteryLevel+0x6c>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	2100      	movs	r1, #0
 8001db6:	2002      	movs	r0, #2
 8001db8:	f018 fc6e 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	1b4e81b5 	.word	0x1b4e81b5
 8001dcc:	0801ae1c 	.word	0x0801ae1c

08001dd0 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001dda:	f7ff fb99 	bl	8001510 <SYS_GetTemperatureLevel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da00      	bge.n	8001de6 <GetTemperatureLevel+0x16>
 8001de4:	33ff      	adds	r3, #255	; 0xff
 8001de6:	121b      	asrs	r3, r3, #8
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001dec:	88fb      	ldrh	r3, [r7, #6]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e02:	f7ff ff65 	bl	8001cd0 <LL_FLASH_GetUDN>
 8001e06:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d138      	bne.n	8001e82 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e10:	f001 f8d8 	bl	8002fc4 <HAL_GetUIDw0>
 8001e14:	4604      	mov	r4, r0
 8001e16:	f001 f8e9 	bl	8002fec <HAL_GetUIDw2>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4423      	add	r3, r4
 8001e1e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e20:	f001 f8da 	bl	8002fd8 <HAL_GetUIDw1>
 8001e24:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	0e1a      	lsrs	r2, r3, #24
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3307      	adds	r3, #7
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	0c1a      	lsrs	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	0a1a      	lsrs	r2, r3, #8
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3305      	adds	r3, #5
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	0e1a      	lsrs	r2, r3, #24
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	0c1a      	lsrs	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3302      	adds	r3, #2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	0a1a      	lsrs	r2, r3, #8
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e80:	e031      	b.n	8001ee6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3307      	adds	r3, #7
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	0a1a      	lsrs	r2, r3, #8
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3306      	adds	r3, #6
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	0c1a      	lsrs	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	0e1a      	lsrs	r2, r3, #24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001eb0:	f7ff ff18 	bl	8001ce4 <LL_FLASH_GetDeviceID>
 8001eb4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3303      	adds	r3, #3
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001ec0:	f7ff ff1c 	bl	8001cfc <LL_FLASH_GetSTCompanyID>
 8001ec4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	0a1a      	lsrs	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	0c1b      	lsrs	r3, r3, #16
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	701a      	strb	r2, [r3, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}

08001eee <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001ef8:	f7ff feea 	bl	8001cd0 <LL_FLASH_GetUDN>
 8001efc:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d10b      	bne.n	8001f1e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f06:	f001 f85d 	bl	8002fc4 <HAL_GetUIDw0>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	f001 f864 	bl	8002fd8 <HAL_GetUIDw1>
 8001f10:	4603      	mov	r3, r0
 8001f12:	405c      	eors	r4, r3
 8001f14:	f001 f86a 	bl	8002fec <HAL_GetUIDw2>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4063      	eors	r3, r4
 8001f1c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f1e:	687b      	ldr	r3, [r7, #4]

}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4618      	mov	r0, r3
 8001f38:	f017 fd40 	bl	80199bc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f42:	9200      	str	r2, [sp, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <TimestampNow+0x3c>)
 8001f46:	2110      	movs	r1, #16
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f81d 	bl	8001f88 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe f912 	bl	8000178 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0801ae28 	.word	0x0801ae28

08001f68 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f017 fbea 	bl	8019748 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f017 fbe2 	bl	8019748 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001f88:	b40c      	push	{r2, r3}
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f017 fedf 	bl	8019d64 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fb0:	b002      	add	sp, #8
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001fcc:	f000 f9f0 	bl	80023b0 <TIMER_IF_GetTimerValue>
 8001fd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fa65 	bl	80024b0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <LL_AHB2_GRP1_EnableClock>:
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
	...

08002020 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <LL_EXTI_EnableIT_32_63+0x24>)
 800202a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800202e:	4905      	ldr	r1, [pc, #20]	; (8002044 <LL_EXTI_EnableIT_32_63+0x24>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	58000800 	.word	0x58000800

08002048 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f802 	bl	8002056 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}

08002056 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d106      	bne.n	8002078 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 800206a:	f000 ffc9 	bl	8003000 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800206e:	f000 ffd3 	bl	8003018 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8002072:	f000 ffdd 	bl	8003030 <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002076:	e005      	b.n	8002084 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8002078:	f000 ffc8 	bl	800300c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800207c:	f000 ffd2 	bl	8003024 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8002080:	f000 ffdc 	bl	800303c <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ff9e 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7ff ff9b 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7ff ff98 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80020be:	2002      	movs	r0, #2
 80020c0:	f7ff ff95 	bl	8001fee <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80020c4:	2301      	movs	r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d0:	f002 fcaa 	bl	8004a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	483a      	ldr	r0, [pc, #232]	; (80021c8 <DBG_ProbesInit+0x13c>)
 80020e0:	f002 fca2 	bl	8004a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80020e4:	2308      	movs	r3, #8
 80020e6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4836      	ldr	r0, [pc, #216]	; (80021c8 <DBG_ProbesInit+0x13c>)
 80020ee:	f002 fc9b 	bl	8004a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80020f2:	2310      	movs	r3, #16
 80020f4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4833      	ldr	r0, [pc, #204]	; (80021c8 <DBG_ProbesInit+0x13c>)
 80020fc:	f002 fc94 	bl	8004a28 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002100:	2200      	movs	r2, #0
 8002102:	2101      	movs	r1, #1
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f002 febc 	bl	8004e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002112:	482d      	ldr	r0, [pc, #180]	; (80021c8 <DBG_ProbesInit+0x13c>)
 8002114:	f002 feb6 	bl	8004e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2108      	movs	r1, #8
 800211c:	482a      	ldr	r0, [pc, #168]	; (80021c8 <DBG_ProbesInit+0x13c>)
 800211e:	f002 feb1 	bl	8004e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2110      	movs	r1, #16
 8002126:	4828      	ldr	r0, [pc, #160]	; (80021c8 <DBG_ProbesInit+0x13c>)
 8002128:	f002 feac 	bl	8004e84 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8002138:	23f0      	movs	r3, #240	; 0xf0
 800213a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 800213c:	230d      	movs	r3, #13
 800213e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002140:	2001      	movs	r0, #1
 8002142:	f7ff ff54 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214e:	f002 fc6b 	bl	8004a28 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 800215a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800215e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 8002160:	2306      	movs	r3, #6
 8002162:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002164:	2001      	movs	r0, #1
 8002166:	f7ff ff42 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4619      	mov	r1, r3
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002172:	f002 fc59 	bl	8004a28 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 800217e:	2304      	movs	r3, #4
 8002180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 8002182:	230d      	movs	r3, #13
 8002184:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2002      	movs	r0, #2
 8002188:	f7ff ff31 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <DBG_ProbesInit+0x13c>)
 8002192:	f002 fc49 	bl	8004a28 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 800219e:	2310      	movs	r3, #16
 80021a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 80021a2:	230d      	movs	r3, #13
 80021a4:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff ff21 	bl	8001fee <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <DBG_ProbesInit+0x13c>)
 80021b2:	f002 fc39 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80021b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021ba:	f7ff ff31 	bl	8002020 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	48000400 	.word	0x48000400

080021cc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <EnvSensors_Read+0x40>)
 80021d6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <EnvSensors_Read+0x44>)
 80021da:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <EnvSensors_Read+0x48>)
 80021de:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a08      	ldr	r2, [pc, #32]	; (8002218 <EnvSensors_Read+0x4c>)
 80021f6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <EnvSensors_Read+0x50>)
 80021fc:	611a      	str	r2, [r3, #16]

  return 0;
 80021fe:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	42480000 	.word	0x42480000
 8002210:	41900000 	.word	0x41900000
 8002214:	447a0000 	.word	0x447a0000
 8002218:	003e090d 	.word	0x003e090d
 800221c:	000503ab 	.word	0x000503ab

08002220 <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002224:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <TIMER_IF_Init+0x5c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <TIMER_IF_Init+0x60>)
 800226a:	f04f 32ff 	mov.w	r2, #4294967295
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002270:	f7ff fbe8 	bl	8001a44 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002274:	f000 f856 	bl	8002324 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800227c:	480c      	ldr	r0, [pc, #48]	; (80022b0 <TIMER_IF_Init+0x60>)
 800227e:	f004 ffd1 	bl	8007224 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <TIMER_IF_Init+0x60>)
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <TIMER_IF_Init+0x60>)
 800228c:	f005 f908 	bl	80074a0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002290:	2000      	movs	r0, #0
 8002292:	f000 f9cf 	bl	8002634 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002296:	f000 f85f 	bl	8002358 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <TIMER_IF_Init+0x5c>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000152 	.word	0x20000152
 80022b0:	20001654 	.word	0x20001654

080022b4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	222c      	movs	r2, #44	; 0x2c
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f018 fc82 	bl	801abd4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80022d0:	f000 f828 	bl	8002324 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <TIMER_IF_StartTimer+0x68>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022f0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80022f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	2201      	movs	r2, #1
 80022fe:	4619      	mov	r1, r3
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <TIMER_IF_StartTimer+0x6c>)
 8002302:	f004 fe83 	bl	800700c <HAL_RTC_SetAlarm_IT>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800230c:	f7ff fb6c 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002314:	4618      	mov	r0, r3
 8002316:	3738      	adds	r7, #56	; 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000154 	.word	0x20000154
 8002320:	20001654 	.word	0x20001654

08002324 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <TIMER_IF_StopTimer+0x2c>)
 8002330:	2201      	movs	r2, #1
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002338:	4806      	ldr	r0, [pc, #24]	; (8002354 <TIMER_IF_StopTimer+0x30>)
 800233a:	f004 ff73 	bl	8007224 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <TIMER_IF_StopTimer+0x30>)
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002346:	79fb      	ldrb	r3, [r7, #7]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40002800 	.word	0x40002800
 8002354:	20001654 	.word	0x20001654

08002358 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800235c:	f000 f98a 	bl	8002674 <GetTimerTicks>
 8002360:	4603      	mov	r3, r0
 8002362:	4a03      	ldr	r2, [pc, #12]	; (8002370 <TIMER_IF_SetTimerContext+0x18>)
 8002364:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002366:	4b02      	ldr	r3, [pc, #8]	; (8002370 <TIMER_IF_SetTimerContext+0x18>)
 8002368:	681b      	ldr	r3, [r3, #0]
}
 800236a:	4618      	mov	r0, r3
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000154 	.word	0x20000154

08002374 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <TIMER_IF_GetTimerContext+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000154 	.word	0x20000154

08002388 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002392:	f000 f96f 	bl	8002674 <GetTimerTicks>
 8002396:	4602      	mov	r2, r0
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <TIMER_IF_GetTimerElapsedTime+0x24>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000154 	.word	0x20000154

080023b0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <TIMER_IF_GetTimerValue+0x24>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80023c2:	f000 f957 	bl	8002674 <GetTimerTicks>
 80023c6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80023c8:	687b      	ldr	r3, [r7, #4]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000152 	.word	0x20000152

080023d8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80023e2:	2303      	movs	r3, #3
 80023e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80023f2:	b5b0      	push	{r4, r5, r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	461a      	mov	r2, r3
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	0d95      	lsrs	r5, r2, #22
 8002408:	0294      	lsls	r4, r2, #10
 800240a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f7fe fba1 	bl	8000b5c <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4613      	mov	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bdb0      	pop	{r4, r5, r7, pc}

0800242c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800242c:	b4b0      	push	{r4, r5, r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	f04f 0400 	mov.w	r4, #0
 8002448:	f04f 0500 	mov.w	r5, #0
 800244c:	015d      	lsls	r5, r3, #5
 800244e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002452:	0154      	lsls	r4, r2, #5
 8002454:	4622      	mov	r2, r4
 8002456:	462b      	mov	r3, r5
 8002458:	1a12      	subs	r2, r2, r0
 800245a:	eb63 0301 	sbc.w	r3, r3, r1
 800245e:	f04f 0400 	mov.w	r4, #0
 8002462:	f04f 0500 	mov.w	r5, #0
 8002466:	009d      	lsls	r5, r3, #2
 8002468:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800246c:	0094      	lsls	r4, r2, #2
 800246e:	4622      	mov	r2, r4
 8002470:	462b      	mov	r3, r5
 8002472:	1812      	adds	r2, r2, r0
 8002474:	eb41 0303 	adc.w	r3, r1, r3
 8002478:	f04f 0000 	mov.w	r0, #0
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	00d9      	lsls	r1, r3, #3
 8002482:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002486:	00d0      	lsls	r0, r2, #3
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	0a82      	lsrs	r2, r0, #10
 800249a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800249e:	0a8b      	lsrs	r3, r1, #10
 80024a0:	4613      	mov	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bcb0      	pop	{r4, r5, r7}
 80024ae:	4770      	bx	lr

080024b0 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff9a 	bl	80023f2 <TIMER_IF_Convert_ms2Tick>
 80024be:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80024c0:	f000 f8d8 	bl	8002674 <GetTimerTicks>
 80024c4:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024c6:	e000      	b.n	80024ca <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80024c8:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024ca:	f000 f8d3 	bl	8002674 <GetTimerTicks>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d8f6      	bhi.n	80024c8 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80024ec:	f017 ff64 	bl	801a3b8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002500:	f000 f8a8 	bl	8002654 <TIMER_IF_BkUp_Read_MSBticks>
 8002504:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3301      	adds	r3, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f892 	bl	8002634 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b088      	sub	sp, #32
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002526:	f000 f8a5 	bl	8002674 <GetTimerTicks>
 800252a:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800252c:	f000 f892 	bl	8002654 <TIMER_IF_BkUp_Read_MSBticks>
 8002530:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4618      	mov	r0, r3
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	0003      	movs	r3, r0
 8002544:	2200      	movs	r2, #0
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	4608      	mov	r0, r1
 800254a:	f04f 0100 	mov.w	r1, #0
 800254e:	eb12 0800 	adds.w	r8, r2, r0
 8002552:	eb43 0901 	adc.w	r9, r3, r1
 8002556:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800255a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0a82      	lsrs	r2, r0, #10
 8002568:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800256c:	0a8b      	lsrs	r3, r1, #10
 800256e:	4613      	mov	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	461a      	mov	r2, r3
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	ea02 0400 	and.w	r4, r2, r0
 8002586:	ea03 0501 	and.w	r5, r3, r1
 800258a:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff4b 	bl	800242c <TIMER_IF_Convert_Tick2ms>
 8002596:	4603      	mov	r3, r0
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 800259e:	69fb      	ldr	r3, [r7, #28]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080025ac <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80025ba:	f005 f803 	bl	80075c4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20001654 	.word	0x20001654

080025cc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	2101      	movs	r1, #1
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80025da:	f004 fff3 	bl	80075c4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20001654 	.word	0x20001654

080025ec <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80025f6:	2100      	movs	r1, #0
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80025fa:	f004 fffb 	bl	80075f4 <HAL_RTCEx_BKUPRead>
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002600:	687b      	ldr	r3, [r7, #4]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20001654 	.word	0x20001654

08002610 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800261a:	2101      	movs	r1, #1
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800261e:	f004 ffe9 	bl	80075f4 <HAL_RTCEx_BKUPRead>
 8002622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20001654 	.word	0x20001654

08002634 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	2102      	movs	r1, #2
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002642:	f004 ffbf 	bl	80075c4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20001654 	.word	0x20001654

08002654 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800265a:	2102      	movs	r1, #2
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800265e:	f004 ffc9 	bl	80075f4 <HAL_RTCEx_BKUPRead>
 8002662:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002664:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20001654 	.word	0x20001654

08002674 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <GetTimerTicks+0x14>)
 800267a:	f7ff fdde 	bl	800223a <LL_RTC_TIME_GetSubSecond>
 800267e:	4603      	mov	r3, r0
 8002680:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40002800 	.word	0x40002800

0800268c <LL_AHB2_GRP1_EnableClock>:
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800269a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4013      	ands	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <LL_APB2_GRP1_EnableClock>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026e0:	68fb      	ldr	r3, [r7, #12]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <LL_APB2_GRP1_DisableClock>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002702:	4013      	ands	r3, r2
 8002704:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <MX_USART1_UART_Init+0x94>)
 8002718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002758:	4811      	ldr	r0, [pc, #68]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800275a:	f005 fc36 	bl	8007fca <HAL_UART_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002764:	f7ff f940 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002768:	2100      	movs	r1, #0
 800276a:	480d      	ldr	r0, [pc, #52]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800276c:	f007 fc63 	bl	800a036 <HAL_UARTEx_SetTxFifoThreshold>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002776:	f7ff f937 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800277a:	2100      	movs	r1, #0
 800277c:	4808      	ldr	r0, [pc, #32]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800277e:	f007 fc98 	bl	800a0b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002788:	f7ff f92e 	bl	80019e8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_USART1_UART_Init+0x90>)
 800278e:	f007 fc17 	bl	8009fc0 <HAL_UARTEx_EnableFifoMode>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002798:	f7ff f926 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200016f8 	.word	0x200016f8
 80027a4:	40013800 	.word	0x40013800

080027a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b096      	sub	sp, #88	; 0x58
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	2238      	movs	r2, #56	; 0x38
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f018 fa03 	bl	801abd4 <memset>
  if(uartHandle->Instance==USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_UART_MspInit+0xe8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d156      	bne.n	8002886 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027d8:	2301      	movs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027dc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027e0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fa7c 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027f2:	f7ff f8f9 	bl	80019e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027fa:	f7ff ff5f 	bl	80026bc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	2002      	movs	r0, #2
 8002800:	f7ff ff44 	bl	800268c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002814:	2307      	movs	r3, #7
 8002816:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002818:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800281c:	4619      	mov	r1, r3
 800281e:	481d      	ldr	r0, [pc, #116]	; (8002894 <HAL_UART_MspInit+0xec>)
 8002820:	f002 f902 	bl	8004a28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_UART_MspInit+0xf4>)
 8002828:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_UART_MspInit+0xf0>)
 800282c:	2212      	movs	r2, #18
 800282e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002832:	2210      	movs	r2, #16
 8002834:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <HAL_UART_MspInit+0xf0>)
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_UART_MspInit+0xf0>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800285a:	480f      	ldr	r0, [pc, #60]	; (8002898 <HAL_UART_MspInit+0xf0>)
 800285c:	f001 fcce 	bl	80041fc <HAL_DMA_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002866:	f7ff f8bf 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_UART_MspInit+0xf0>)
 800286e:	679a      	str	r2, [r3, #120]	; 0x78
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_UART_MspInit+0xf0>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2102      	movs	r1, #2
 800287a:	2024      	movs	r0, #36	; 0x24
 800287c:	f001 fc87 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002880:	2024      	movs	r0, #36	; 0x24
 8002882:	f001 fc9e 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002886:	bf00      	nop
 8002888:	3758      	adds	r7, #88	; 0x58
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40013800 	.word	0x40013800
 8002894:	48000400 	.word	0x48000400
 8002898:	20001698 	.word	0x20001698
 800289c:	40020008 	.word	0x40020008

080028a0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <HAL_UART_MspDeInit+0x3c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10f      	bne.n	80028d2 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028b6:	f7ff ff19 	bl	80026ec <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80028ba:	21c0      	movs	r1, #192	; 0xc0
 80028bc:	4808      	ldr	r0, [pc, #32]	; (80028e0 <HAL_UART_MspDeInit+0x40>)
 80028be:	f002 fa13 	bl	8004ce8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c6:	4618      	mov	r0, r3
 80028c8:	f001 fd40 	bl	800434c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028cc:	2024      	movs	r0, #36	; 0x24
 80028ce:	f001 fc86 	bl	80041de <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40013800 	.word	0x40013800
 80028e0:	48000400 	.word	0x48000400

080028e4 <LL_APB2_GRP1_ForceReset>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <LL_APB2_GRP1_ReleaseReset>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	43db      	mvns	r3, r3
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291c:	4013      	ands	r3, r2
 800291e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <LL_EXTI_EnableIT_0_31>:
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <LL_EXTI_EnableIT_0_31+0x24>)
 8002936:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800293a:	4905      	ldr	r1, [pc, #20]	; (8002950 <LL_EXTI_EnableIT_0_31+0x24>)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	58000800 	.word	0x58000800

08002954 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <vcom_Init+0x28>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002962:	f7fe fee1 	bl	8001728 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002966:	f7ff fed3 	bl	8002710 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800296a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800296e:	f7ff ffdd 	bl	800292c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002972:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000158 	.word	0x20000158

08002980 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002984:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002988:	f7ff ffac 	bl	80028e4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800298c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002990:	f7ff ffb9 	bl	8002906 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <vcom_DeInit+0x28>)
 8002996:	f7ff ff83 	bl	80028a0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800299a:	200f      	movs	r0, #15
 800299c:	f001 fc1f 	bl	80041de <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80029a0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200016f8 	.word	0x200016f8

080029ac <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	461a      	mov	r2, r3
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4804      	ldr	r0, [pc, #16]	; (80029d0 <vcom_Trace_DMA+0x24>)
 80029c0:	f005 fbaa 	bl	8008118 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80029c4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200016f8 	.word	0x200016f8

080029d4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <vcom_ReceiveInit+0x70>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80029e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029e6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029f0:	4815      	ldr	r0, [pc, #84]	; (8002a48 <vcom_ReceiveInit+0x74>)
 80029f2:	f007 fa58 	bl	8009ea6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80029f6:	bf00      	nop
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <vcom_ReceiveInit+0x74>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a06:	d0f7      	beq.n	80029f8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a08:	bf00      	nop
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <vcom_ReceiveInit+0x74>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a18:	d1f7      	bne.n	8002a0a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <vcom_ReceiveInit+0x74>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <vcom_ReceiveInit+0x74>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a28:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002a2a:	4807      	ldr	r0, [pc, #28]	; (8002a48 <vcom_ReceiveInit+0x74>)
 8002a2c:	f007 fa96 	bl	8009f5c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a30:	2201      	movs	r2, #1
 8002a32:	4906      	ldr	r1, [pc, #24]	; (8002a4c <vcom_ReceiveInit+0x78>)
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <vcom_ReceiveInit+0x74>)
 8002a36:	f005 fb19 	bl	800806c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002a3a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000015c 	.word	0x2000015c
 8002a48:	200016f8 	.word	0x200016f8
 8002a4c:	20001788 	.word	0x20001788

08002a50 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_UART_TxCpltCallback+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000158 	.word	0x20000158

08002a6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_UART_RxCpltCallback+0x38>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_UART_RxCpltCallback+0x26>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <HAL_UART_RxCpltCallback+0x38>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8002a90:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002a92:	2201      	movs	r2, #1
 8002a94:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f005 fae8 	bl	800806c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000015c 	.word	0x2000015c
 8002aa8:	20001788 	.word	0x20001788

08002aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ab0:	f7ff fbbd 	bl	800222e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab4:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <LoopForever+0xe>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002abc:	e002      	b.n	8002ac4 <LoopCopyDataInit>

08002abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac2:	3304      	adds	r3, #4

08002ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac8:	d3f9      	bcc.n	8002abe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002acc:	4c0a      	ldr	r4, [pc, #40]	; (8002af8 <LoopForever+0x16>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad0:	e001      	b.n	8002ad6 <LoopFillZerobss>

08002ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad4:	3204      	adds	r2, #4

08002ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad8:	d3fb      	bcc.n	8002ad2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ada:	f018 f857 	bl	801ab8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ade:	f7fe ff16 	bl	800190e <main>

08002ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ae2:	e7fe      	b.n	8002ae2 <LoopForever>
  ldr   r0, =_estack
 8002ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002af0:	0801bbac 	.word	0x0801bbac
  ldr r2, =_sbss
 8002af4:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002af8:	20001840 	.word	0x20001840

08002afc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC_IRQHandler>

08002afe <LL_AHB2_GRP1_EnableClock>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b22:	68fb      	ldr	r3, [r7, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
	...

08002b30 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <BSP_LED_Init+0x80>)
 8002b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e024      	b.n	8002ba8 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002b5e:	2002      	movs	r0, #2
 8002b60:	f7ff ffcd 	bl	8002afe <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <BSP_LED_Init+0x80>)
 8002b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <BSP_LED_Init+0x84>)
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 ff4d 	bl	8004a28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <BSP_LED_Init+0x84>)
 8002b92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <BSP_LED_Init+0x80>)
 8002b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f002 f96f 	bl	8004e84 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0801b6c4 	.word	0x0801b6c4
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <BSP_LED_On+0x40>)
 8002bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e00c      	b.n	8002bf0 <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <BSP_LED_On+0x44>)
 8002bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <BSP_LED_On+0x40>)
 8002be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	f002 f94b 	bl	8004e84 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	0801b6c4 	.word	0x0801b6c4
 8002bfc:	20000004 	.word	0x20000004

08002c00 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <BSP_LED_Off+0x40>)
 8002c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e00c      	b.n	8002c38 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <BSP_LED_Off+0x44>)
 8002c22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <BSP_LED_Off+0x40>)
 8002c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4619      	mov	r1, r3
 8002c32:	f002 f927 	bl	8004e84 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	0801b6c4 	.word	0x0801b6c4
 8002c44:	20000004 	.word	0x20000004

08002c48 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <BSP_LED_Toggle+0x40>)
 8002c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e00c      	b.n	8002c80 <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <BSP_LED_Toggle+0x44>)
 8002c6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4905      	ldr	r1, [pc, #20]	; (8002c88 <BSP_LED_Toggle+0x40>)
 8002c72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f002 f91a 	bl	8004eb2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	0801b6c4 	.word	0x0801b6c4
 8002c8c:	20000004 	.word	0x20000004

08002c90 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	460a      	mov	r2, r1
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <BSP_PB_Init+0xe4>)
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e055      	b.n	8002d6c <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <BSP_PB_Init+0x3c>
 8002cc6:	2002      	movs	r0, #2
 8002cc8:	f7ff ff19 	bl	8002afe <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <BSP_PB_Init+0xe8>)
 8002cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10c      	bne.n	8002cfe <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <BSP_PB_Init+0xec>)
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	f107 020c 	add.w	r2, r7, #12
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fe96 	bl	8004a28 <HAL_GPIO_Init>
 8002cfc:	e035      	b.n	8002d6a <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002cfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d02:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <BSP_PB_Init+0xec>)
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	f107 020c 	add.w	r2, r7, #12
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fe88 	bl	8004a28 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <BSP_PB_Init+0xf0>)
 8002d1e:	441a      	add	r2, r3
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	4918      	ldr	r1, [pc, #96]	; (8002d84 <BSP_PB_Init+0xf4>)
 8002d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f001 fe69 	bl	8004a02 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <BSP_PB_Init+0xf0>)
 8002d36:	1898      	adds	r0, r3, r2
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <BSP_PB_Init+0xe4>)
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	461a      	mov	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f001 fe44 	bl	80049d0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <BSP_PB_Init+0xf8>)
 8002d4c:	56d0      	ldrsb	r0, [r2, r3]
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <BSP_PB_Init+0xfc>)
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	2200      	movs	r2, #0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f001 fa18 	bl	800418e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <BSP_PB_Init+0xf8>)
 8002d62:	56d3      	ldrsb	r3, [r2, r3]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 fa2c 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000001c 	.word	0x2000001c
 8002d78:	0801b6cc 	.word	0x0801b6cc
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	2000178c 	.word	0x2000178c
 8002d84:	0801b6d8 	.word	0x0801b6d8
 8002d88:	0801b6d4 	.word	0x0801b6d4
 8002d8c:	20000028 	.word	0x20000028

08002d90 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7ff fff1 	bl	8002d90 <BSP_PB_Callback>
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dde:	f001 fe23 	bl	8004a28 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002de2:	2320      	movs	r3, #32
 8002de4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dee:	f001 fe1b 	bl	8004a28 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002df2:	2200      	movs	r2, #0
 8002df4:	2120      	movs	r1, #32
 8002df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfa:	f002 f843 	bl	8004e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2110      	movs	r1, #16
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f002 f83d 	bl	8004e84 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d83f      	bhi.n	8002ea4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e3d 	.word	0x08002e3d
 8002e30:	08002e57 	.word	0x08002e57
 8002e34:	08002e71 	.word	0x08002e71
 8002e38:	08002e8b 	.word	0x08002e8b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2110      	movs	r1, #16
 8002e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e44:	f002 f81e 	bl	8004e84 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2120      	movs	r1, #32
 8002e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e50:	f002 f818 	bl	8004e84 <HAL_GPIO_WritePin>
      break;      
 8002e54:	e027      	b.n	8002ea6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e56:	2201      	movs	r2, #1
 8002e58:	2110      	movs	r1, #16
 8002e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5e:	f002 f811 	bl	8004e84 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e62:	2200      	movs	r2, #0
 8002e64:	2120      	movs	r1, #32
 8002e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6a:	f002 f80b 	bl	8004e84 <HAL_GPIO_WritePin>
      break;
 8002e6e:	e01a      	b.n	8002ea6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e70:	2201      	movs	r2, #1
 8002e72:	2110      	movs	r1, #16
 8002e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e78:	f002 f804 	bl	8004e84 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2120      	movs	r1, #32
 8002e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e84:	f001 fffe 	bl	8004e84 <HAL_GPIO_WritePin>
      break;
 8002e88:	e00d      	b.n	8002ea6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e92:	f001 fff7 	bl	8004e84 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e96:	2201      	movs	r2, #1
 8002e98:	2120      	movs	r1, #32
 8002e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9e:	f001 fff1 	bl	8004e84 <HAL_GPIO_WritePin>
      break;
 8002ea2:	e000      	b.n	8002ea6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ea4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002eb4:	2302      	movs	r3, #2
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6053      	str	r3, [r2, #4]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	e0042000 	.word	0xe0042000

08002ef8 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6053      	str	r3, [r2, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	e0042000 	.word	0xe0042000

08002f14 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f1e:	f043 0302 	orr.w	r3, r3, #2
 8002f22:	6053      	str	r3, [r2, #4]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	e0042000 	.word	0xe0042000

08002f30 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f3a:	f023 0302 	bic.w	r3, r3, #2
 8002f3e:	6053      	str	r3, [r2, #4]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	e0042000 	.word	0xe0042000

08002f4c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6053      	str	r3, [r2, #4]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	e0042000 	.word	0xe0042000

08002f68 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	6053      	str	r3, [r2, #4]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	e0042000 	.word	0xe0042000

08002f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8e:	2003      	movs	r0, #3
 8002f90:	f001 f8f2 	bl	8004178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f94:	f003 fcc4 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_Init+0x3c>)
 8002f9c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f9e:	200f      	movs	r0, #15
 8002fa0:	f7ff f808 	bl	8001fb4 <HAL_InitTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	71fb      	strb	r3, [r7, #7]
 8002fae:	e001      	b.n	8002fb4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fb0:	f7fe fdd6 	bl	8001b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000

08002fc4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <HAL_GetUIDw0+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	1fff7590 	.word	0x1fff7590

08002fd8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <HAL_GetUIDw1+0x10>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	1fff7594 	.word	0x1fff7594

08002fec <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <HAL_GetUIDw2+0x10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	1fff7598 	.word	0x1fff7598

08003000 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003004:	f7ff ff6a 	bl	8002edc <LL_DBGMCU_EnableDBGSleepMode>
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003010:	f7ff ff72 	bl	8002ef8 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800301c:	f7ff ff7a 	bl	8002f14 <LL_DBGMCU_EnableDBGStopMode>
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003028:	f7ff ff82 	bl	8002f30 <LL_DBGMCU_DisableDBGStopMode>
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003034:	f7ff ff8a 	bl	8002f4c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003040:	f7ff ff92 	bl	8002f68 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}

08003048 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr

0800306c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2107      	movs	r1, #7
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	431a      	orrs	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	210f      	movs	r1, #15
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	401a      	ands	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0e9b      	lsrs	r3, r3, #26
 800310a:	f003 010f 	and.w	r1, r3, #15
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003160:	43db      	mvns	r3, r3
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0219      	lsls	r1, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	400b      	ands	r3, r1
 8003192:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319a:	431a      	orrs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031ba:	f023 0317 	bic.w	r3, r3, #23
 80031be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031e0:	f023 0317 	bic.w	r3, r3, #23
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6093      	str	r3, [r2, #8]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003206:	d101      	bne.n	800320c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003228:	f023 0317 	bic.w	r3, r3, #23
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800324e:	f023 0317 	bic.w	r3, r3, #23
 8003252:	f043 0202 	orr.w	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr

08003264 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <LL_ADC_IsEnabled+0x18>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <LL_ADC_IsEnabled+0x1a>
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d101      	bne.n	80032a0 <LL_ADC_IsDisableOngoing+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_IsDisableOngoing+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032bc:	f023 0317 	bic.w	r3, r3, #23
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e2:	f023 0317 	bic.w	r3, r3, #23
 80032e6:	f043 0210 	orr.w	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b04      	cmp	r3, #4
 800330a:	d101      	bne.n	8003310 <LL_ADC_REG_IsConversionOngoing+0x18>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1ae      	b.n	800369c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fe f8a9 	bl	80014a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff44 	bl	80031f2 <LL_ADC_IsInternalRegulatorEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d115      	bne.n	800339c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff18 	bl	80031aa <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800337a:	4b9b      	ldr	r3, [pc, #620]	; (80035e8 <HAL_ADC_Init+0x2cc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	4a9a      	ldr	r2, [pc, #616]	; (80035ec <HAL_ADC_Init+0x2d0>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	3301      	adds	r3, #1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800338e:	e002      	b.n	8003396 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f9      	bne.n	8003390 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff26 	bl	80031f2 <LL_ADC_IsInternalRegulatorEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f043 0210 	orr.w	r2, r3, #16
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff93 	bl	80032f8 <LL_ADC_REG_IsConversionOngoing>
 80033d2:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8154 	bne.w	800368a <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 8150 	bne.w	800368a <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff30 	bl	8003264 <LL_ADC_IsEnabled>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d14f      	bne.n	80034aa <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f023 0118 	bic.w	r1, r3, #24
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800342c:	4313      	orrs	r3, r2
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d111      	bne.n	8003462 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800344a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003450:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003456:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_ADC_Init+0x2d4>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	430b      	orrs	r3, r1
 8003474:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800347e:	d014      	beq.n	80034aa <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d00f      	beq.n	80034aa <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800348e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003492:	d00a      	beq.n	80034aa <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003494:	4b57      	ldr	r3, [pc, #348]	; (80035f4 <HAL_ADC_Init+0x2d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034a4:	4953      	ldr	r1, [pc, #332]	; (80035f4 <HAL_ADC_Init+0x2d8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7e1b      	ldrb	r3, [r3, #24]
 80034ae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e5b      	ldrb	r3, [r3, #25]
 80034b4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7e9b      	ldrb	r3, [r3, #26]
 80034bc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034be:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	d002      	beq.n	80034ce <HAL_ADC_Init+0x1b2>
 80034c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034cc:	e000      	b.n	80034d0 <HAL_ADC_Init+0x1b4>
 80034ce:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034d0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034d6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	da04      	bge.n	80034ea <HAL_ADC_Init+0x1ce>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034e8:	e001      	b.n	80034ee <HAL_ADC_Init+0x1d2>
 80034ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80034ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034f6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034f8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d114      	bne.n	8003534 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7e9b      	ldrb	r3, [r3, #26]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e00b      	b.n	8003534 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003548:	4313      	orrs	r3, r2
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800355a:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	430b      	orrs	r3, r1
 8003566:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_ADC_Init+0x2dc>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	430b      	orrs	r3, r1
 800357a:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	461a      	mov	r2, r3
 8003586:	2100      	movs	r1, #0
 8003588:	f7ff fd7d 	bl	8003086 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	461a      	mov	r2, r3
 8003596:	4919      	ldr	r1, [pc, #100]	; (80035fc <HAL_ADC_Init+0x2e0>)
 8003598:	f7ff fd75 	bl	8003086 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d108      	bne.n	80035b6 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f062 020f 	orn	r2, r2, #15
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
 80035b4:	e044      	b.n	8003640 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035be:	d13f      	bne.n	8003640 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e00c      	b.n	80035e0 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d012      	beq.n	8003600 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3301      	adds	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b07      	cmp	r3, #7
 80035e4:	d9ef      	bls.n	80035c6 <HAL_ADC_Init+0x2aa>
 80035e6:	e00c      	b.n	8003602 <HAL_ADC_Init+0x2e6>
 80035e8:	20000000 	.word	0x20000000
 80035ec:	053e2d63 	.word	0x053e2d63
 80035f0:	1ffffc02 	.word	0x1ffffc02
 80035f4:	40012708 	.word	0x40012708
 80035f8:	dffffc02 	.word	0xdffffc02
 80035fc:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8003600:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f062 020f 	orn	r2, r2, #15
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
 8003618:	e012      	b.n	8003640 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	3b01      	subs	r3, #1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f003 031c 	and.w	r3, r3, #28
 800362c:	f06f 020f 	mvn.w	r2, #15
 8003630:	fa02 f103 	lsl.w	r1, r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_ADC_Init+0x388>)
 8003648:	4013      	ands	r3, r2
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	d10b      	bne.n	8003668 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	f043 0201 	orr.w	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003666:	e018      	b.n	800369a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f023 0312 	bic.w	r3, r3, #18
 8003670:	f043 0210 	orr.w	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003688:	e007      	b.n	800369a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800369a:	7ffb      	ldrb	r3, [r7, #31]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	833fffe7 	.word	0x833fffe7

080036a8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06a      	b.n	8003790 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fabe 	bl	8003c48 <ADC_ConversionStop>
 80036cc:	4603      	mov	r3, r0
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb82 	bl	8003de0 <ADC_Disable>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fd6d 	bl	80031d0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003704:	f023 0303 	bic.w	r3, r3, #3
 8003708:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f240 329f 	movw	r2, #927	; 0x39f
 8003712:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_ADC_DeInit+0xf0>)
 8003720:	400b      	ands	r3, r1
 8003722:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003732:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0207 	bic.w	r2, r2, #7
 8003742:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a1a      	ldr	r2, [r3, #32]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003752:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_ADC_DeInit+0xf4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_ADC_DeInit+0xf4>)
 8003768:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800376c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd feac 	bl	80014cc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	833e0200 	.word	0x833e0200
 800379c:	40012708 	.word	0x40012708

080037a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fda3 	bl	80032f8 <LL_ADC_REG_IsConversionOngoing>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d132      	bne.n	800381e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_Start+0x26>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e02e      	b.n	8003824 <HAL_ADC_Start+0x84>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fa80 	bl	8003cd4 <ADC_Enable>
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11a      	bne.n	8003814 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	221c      	movs	r2, #28
 80037fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fd4d 	bl	80032ac <LL_ADC_REG_StartConversion>
 8003812:	e006      	b.n	8003822 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800381c:	e001      	b.n	8003822 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADC_Stop+0x16>
 800383e:	2302      	movs	r3, #2
 8003840:	e022      	b.n	8003888 <HAL_ADC_Stop+0x5c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9fc 	bl	8003c48 <ADC_ConversionStop>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d111      	bne.n	800387e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fac0 	bl	8003de0 <ADC_Disable>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003886:	7bfb      	ldrb	r3, [r7, #15]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d102      	bne.n	80038a8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80038a2:	2308      	movs	r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e010      	b.n	80038ca <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e077      	b.n	80039b6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80038c6:	2304      	movs	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038ca:	f7fe fb7d 	bl	8001fc8 <HAL_GetTick>
 80038ce:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038d0:	e021      	b.n	8003916 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d01d      	beq.n	8003916 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038da:	f7fe fb75 	bl	8001fc8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <HAL_ADC_PollForConversion+0x60>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d112      	bne.n	8003916 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10b      	bne.n	8003916 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0d6      	beq.n	80038d2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fbc4 	bl	80030c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d031      	beq.n	80039a4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7e9b      	ldrb	r3, [r3, #26]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d12d      	bne.n	80039a4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d126      	bne.n	80039a4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fccc 	bl	80032f8 <LL_ADC_REG_IsConversionOngoing>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d112      	bne.n	800398c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020c 	bic.w	r2, r2, #12
 8003974:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	659a      	str	r2, [r3, #88]	; 0x58
 800398a:	e00b      	b.n	80039a4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7e1b      	ldrb	r3, [r3, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	220c      	movs	r2, #12
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x28>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e110      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x24a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fc73 	bl	80032f8 <LL_ADC_REG_IsConversionOngoing>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 80f7 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f000 80b1 	beq.w	8003b86 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a2c:	d004      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a32:	4a7e      	ldr	r2, [pc, #504]	; (8003c2c <HAL_ADC_ConfigChannel+0x254>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d108      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7ff fb70 	bl	8003128 <LL_ADC_REG_SetSequencerChAdd>
 8003a48:	e041      	b.n	8003ace <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	210f      	movs	r1, #15
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0xa0>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	e011      	b.n	8003a9c <HAL_ADC_ConfigChannel+0xc4>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	6849      	ldr	r1, [r1, #4]
 8003aa0:	f001 011f 	and.w	r1, r1, #31
 8003aa4:	408b      	lsls	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d808      	bhi.n	8003ace <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f7ff fb0c 	bl	80030e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7ff fb49 	bl	8003172 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f280 8097 	bge.w	8003c18 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aea:	4851      	ldr	r0, [pc, #324]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003aec:	f7ff fabe 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 8003af0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4f      	ldr	r2, [pc, #316]	; (8003c34 <HAL_ADC_ConfigChannel+0x25c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d120      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11b      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4848      	ldr	r0, [pc, #288]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003b10:	f7ff fa9a 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b14:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <HAL_ADC_ConfigChannel+0x260>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	099b      	lsrs	r3, r3, #6
 8003b1a:	4a48      	ldr	r2, [pc, #288]	; (8003c3c <HAL_ADC_ConfigChannel+0x264>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b2e:	e002      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f9      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b3c:	e06c      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_ADC_ConfigChannel+0x268>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10c      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x18a>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4835      	ldr	r0, [pc, #212]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003b5c:	f7ff fa74 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
 8003b60:	e05a      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a37      	ldr	r2, [pc, #220]	; (8003c44 <HAL_ADC_ConfigChannel+0x26c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d155      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d150      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	482c      	ldr	r0, [pc, #176]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003b80:	f7ff fa62 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
 8003b84:	e048      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_ADC_ConfigChannel+0x254>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d107      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f7ff fad1 	bl	800314c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da32      	bge.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb2:	481f      	ldr	r0, [pc, #124]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003bb4:	f7ff fa5a 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 8003bb8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_ADC_ConfigChannel+0x25c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d107      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4818      	ldr	r0, [pc, #96]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003bce:	f7ff fa3b 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
 8003bd2:	e021      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_ADC_ConfigChannel+0x268>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d107      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be4:	4619      	mov	r1, r3
 8003be6:	4812      	ldr	r0, [pc, #72]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003be8:	f7ff fa2e 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
 8003bec:	e014      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <HAL_ADC_ConfigChannel+0x26c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10f      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bfe:	4619      	mov	r1, r3
 8003c00:	480b      	ldr	r0, [pc, #44]	; (8003c30 <HAL_ADC_ConfigChannel+0x258>)
 8003c02:	f7ff fa21 	bl	8003048 <LL_ADC_SetCommonPathInternalCh>
 8003c06:	e007      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	80000004 	.word	0x80000004
 8003c30:	40012708 	.word	0x40012708
 8003c34:	b0001000 	.word	0xb0001000
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	053e2d63 	.word	0x053e2d63
 8003c40:	b8004000 	.word	0xb8004000
 8003c44:	b4002000 	.word	0xb4002000

08003c48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fb4f 	bl	80032f8 <LL_ADC_REG_IsConversionOngoing>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d033      	beq.n	8003cc8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fb0f 	bl	8003288 <LL_ADC_IsDisableOngoing>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fb2c 	bl	80032d2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c7a:	f7fe f9a5 	bl	8001fc8 <HAL_GetTick>
 8003c7e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c80:	e01b      	b.n	8003cba <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c82:	f7fe f9a1 	bl	8001fc8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d914      	bls.n	8003cba <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e007      	b.n	8003cca <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1dc      	bne.n	8003c82 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fabd 	bl	8003264 <LL_ADC_IsEnabled>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d169      	bne.n	8003dc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <ADC_Enable+0xfc>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e055      	b.n	8003dc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fa7a 	bl	8003218 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d24:	482b      	ldr	r0, [pc, #172]	; (8003dd4 <ADC_Enable+0x100>)
 8003d26:	f7ff f9a1 	bl	800306c <LL_ADC_GetCommonPathInternalCh>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00f      	beq.n	8003d54 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <ADC_Enable+0x104>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <ADC_Enable+0x108>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	3301      	adds	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d46:	e002      	b.n	8003d4e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f9      	bne.n	8003d48 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e5b      	ldrb	r3, [r3, #25]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d033      	beq.n	8003dc4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe f934 	bl	8001fc8 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d62:	e028      	b.n	8003db6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fa7b 	bl	8003264 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fa4d 	bl	8003218 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d7e:	f7fe f923 	bl	8001fc8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d914      	bls.n	8003db6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d00d      	beq.n	8003db6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e007      	b.n	8003dc6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d1cf      	bne.n	8003d64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	80000017 	.word	0x80000017
 8003dd4:	40012708 	.word	0x40012708
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	053e2d63 	.word	0x053e2d63

08003de0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fa4b 	bl	8003288 <LL_ADC_IsDisableOngoing>
 8003df2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fa33 	bl	8003264 <LL_ADC_IsEnabled>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d047      	beq.n	8003e94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d144      	bne.n	8003e94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0305 	and.w	r3, r3, #5
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10c      	bne.n	8003e32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fa0e 	bl	800323e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2203      	movs	r2, #3
 8003e28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e2a:	f7fe f8cd 	bl	8001fc8 <HAL_GetTick>
 8003e2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e30:	e029      	b.n	8003e86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f043 0210 	orr.w	r2, r3, #16
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	f043 0201 	orr.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e023      	b.n	8003e96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e4e:	f7fe f8bb 	bl	8001fc8 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d914      	bls.n	8003e86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f043 0210 	orr.w	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e007      	b.n	8003e96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1dc      	bne.n	8003e4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <LL_ADC_IsEnabled>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <LL_ADC_IsEnabled+0x18>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_ADC_IsEnabled+0x1a>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_ADCEx_Calibration_Start+0x1a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e068      	b.n	8003fd4 <HAL_ADCEx_Calibration_Start+0xec>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff68 	bl	8003de0 <ADC_Disable>
 8003f10:	4603      	mov	r3, r0
 8003f12:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ffc0 	bl	8003e9e <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d14c      	bne.n	8003fbe <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f2c:	f043 0202 	orr.w	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0203 	bic.w	r2, r2, #3
 8003f4e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f5e:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f60:	e014      	b.n	8003f8c <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f6e:	d30d      	bcc.n	8003f8c <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	f023 0312 	bic.w	r3, r3, #18
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e023      	b.n	8003fd4 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff96 	bl	8003ec2 <LL_ADC_IsCalibrationOnGoing>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e2      	bne.n	8003f62 <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	659a      	str	r2, [r3, #88]	; 0x58
 8003fbc:	e005      	b.n	8003fca <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc2:	f043 0210 	orr.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <__NVIC_SetPriorityGrouping+0x44>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800400e:	4a04      	ldr	r2, [pc, #16]	; (8004020 <__NVIC_SetPriorityGrouping+0x44>)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	60d3      	str	r3, [r2, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <__NVIC_GetPriorityGrouping+0x18>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 0307 	and.w	r3, r3, #7
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	2b00      	cmp	r3, #0
 8004050:	db0b      	blt.n	800406a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	f003 021f 	and.w	r2, r3, #31
 8004058:	4906      	ldr	r1, [pc, #24]	; (8004074 <__NVIC_EnableIRQ+0x34>)
 800405a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2001      	movs	r0, #1
 8004062:	fa00 f202 	lsl.w	r2, r0, r2
 8004066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	e000e100 	.word	0xe000e100

08004078 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db12      	blt.n	80040b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	490a      	ldr	r1, [pc, #40]	; (80040bc <__NVIC_DisableIRQ+0x44>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	3320      	adds	r3, #32
 80040a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040a4:	f3bf 8f4f 	dsb	sy
}
 80040a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040aa:	f3bf 8f6f 	isb	sy
}
 80040ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000e100 	.word	0xe000e100

080040c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	db0a      	blt.n	80040ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	490c      	ldr	r1, [pc, #48]	; (800410c <__NVIC_SetPriority+0x4c>)
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	0112      	lsls	r2, r2, #4
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040e8:	e00a      	b.n	8004100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4908      	ldr	r1, [pc, #32]	; (8004110 <__NVIC_SetPriority+0x50>)
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	3b04      	subs	r3, #4
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	440b      	add	r3, r1
 80040fe:	761a      	strb	r2, [r3, #24]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000e100 	.word	0xe000e100
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004114:	b480      	push	{r7}
 8004116:	b089      	sub	sp, #36	; 0x24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f1c3 0307 	rsb	r3, r3, #7
 800412e:	2b04      	cmp	r3, #4
 8004130:	bf28      	it	cs
 8004132:	2304      	movcs	r3, #4
 8004134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3304      	adds	r3, #4
 800413a:	2b06      	cmp	r3, #6
 800413c:	d902      	bls.n	8004144 <NVIC_EncodePriority+0x30>
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3b03      	subs	r3, #3
 8004142:	e000      	b.n	8004146 <NVIC_EncodePriority+0x32>
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	401a      	ands	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	43d9      	mvns	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	4313      	orrs	r3, r2
         );
}
 800416e:	4618      	mov	r0, r3
 8004170:	3724      	adds	r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff2b 	bl	8003fdc <__NVIC_SetPriorityGrouping>
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800419c:	f7ff ff42 	bl	8004024 <__NVIC_GetPriorityGrouping>
 80041a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ffb4 	bl	8004114 <NVIC_EncodePriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff83 	bl	80040c0 <__NVIC_SetPriority>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff35 	bl	8004040 <__NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff43 	bl	8004078 <__NVIC_DisableIRQ>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e08e      	b.n	800432c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_DMA_Init+0x138>)
 8004216:	429a      	cmp	r2, r3
 8004218:	d80f      	bhi.n	800423a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b45      	ldr	r3, [pc, #276]	; (8004338 <HAL_DMA_Init+0x13c>)
 8004222:	4413      	add	r3, r2
 8004224:	4a45      	ldr	r2, [pc, #276]	; (800433c <HAL_DMA_Init+0x140>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a42      	ldr	r2, [pc, #264]	; (8004340 <HAL_DMA_Init+0x144>)
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
 8004238:	e00e      	b.n	8004258 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	4b40      	ldr	r3, [pc, #256]	; (8004344 <HAL_DMA_Init+0x148>)
 8004242:	4413      	add	r3, r2
 8004244:	4a3d      	ldr	r2, [pc, #244]	; (800433c <HAL_DMA_Init+0x140>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	091b      	lsrs	r3, r3, #4
 800424c:	009a      	lsls	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a3c      	ldr	r2, [pc, #240]	; (8004348 <HAL_DMA_Init+0x14c>)
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fb24 	bl	80048f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d102      	bne.n	80042c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_DMA_Init+0x106>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d80c      	bhi.n	8004302 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fb4d 	bl	8004988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	e008      	b.n	8004314 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40020407 	.word	0x40020407
 8004338:	bffdfff8 	.word	0xbffdfff8
 800433c:	cccccccd 	.word	0xcccccccd
 8004340:	40020000 	.word	0x40020000
 8004344:	bffdfbf8 	.word	0xbffdfbf8
 8004348:	40020400 	.word	0x40020400

0800434c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07b      	b.n	8004456 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_DMA_DeInit+0x114>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d80f      	bhi.n	800439a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b38      	ldr	r3, [pc, #224]	; (8004464 <HAL_DMA_DeInit+0x118>)
 8004382:	4413      	add	r3, r2
 8004384:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_DMA_DeInit+0x11c>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a35      	ldr	r2, [pc, #212]	; (800446c <HAL_DMA_DeInit+0x120>)
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
 8004398:	e00e      	b.n	80043b8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b33      	ldr	r3, [pc, #204]	; (8004470 <HAL_DMA_DeInit+0x124>)
 80043a2:	4413      	add	r3, r2
 80043a4:	4a30      	ldr	r2, [pc, #192]	; (8004468 <HAL_DMA_DeInit+0x11c>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2f      	ldr	r2, [pc, #188]	; (8004474 <HAL_DMA_DeInit+0x128>)
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f003 021c 	and.w	r2, r3, #28
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fa8f 	bl	80048f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043ea:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00f      	beq.n	8004414 <HAL_DMA_DeInit+0xc8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d80b      	bhi.n	8004414 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fac3 	bl	8004988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004412:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40020407 	.word	0x40020407
 8004464:	bffdfff8 	.word	0xbffdfff8
 8004468:	cccccccd 	.word	0xcccccccd
 800446c:	40020000 	.word	0x40020000
 8004470:	bffdfbf8 	.word	0xbffdfbf8
 8004474:	40020400 	.word	0x40020400

08004478 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_DMA_Start_IT+0x20>
 8004494:	2302      	movs	r3, #2
 8004496:	e069      	b.n	800456c <HAL_DMA_Start_IT+0xf4>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d155      	bne.n	8004558 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9d3 	bl	800487c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 020e 	orr.w	r2, r2, #14
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e00f      	b.n	8004510 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 020a 	orr.w	r2, r2, #10
 800450e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004544:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e008      	b.n	800456a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e04f      	b.n	8004626 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d008      	beq.n	80045a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e040      	b.n	8004626 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 020e 	bic.w	r2, r2, #14
 80045b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f003 021c 	and.w	r2, r3, #28
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2101      	movs	r1, #1
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004612:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d005      	beq.n	8004654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2204      	movs	r2, #4
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e047      	b.n	80046e4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020e 	bic.w	r2, r2, #14
 8004662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004682:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	f003 021c 	and.w	r2, r3, #28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2101      	movs	r1, #1
 8004692:	fa01 f202 	lsl.w	r2, r1, r2
 8004696:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00c      	beq.n	80046c4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
    }
  }
  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470c:	f003 031c 	and.w	r3, r3, #28
 8004710:	2204      	movs	r2, #4
 8004712:	409a      	lsls	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d027      	beq.n	800476c <HAL_DMA_IRQHandler+0x7c>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d022      	beq.n	800476c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	f003 021c 	and.w	r2, r3, #28
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2104      	movs	r1, #4
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8081 	beq.w	8004864 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800476a:	e07b      	b.n	8004864 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	f003 031c 	and.w	r3, r3, #28
 8004774:	2202      	movs	r2, #2
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d03d      	beq.n	80047fc <HAL_DMA_IRQHandler+0x10c>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d038      	beq.n	80047fc <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 020a 	bic.w	r2, r2, #10
 80047a6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <HAL_DMA_IRQHandler+0x180>)
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d909      	bls.n	80047d0 <HAL_DMA_IRQHandler+0xe0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f003 031c 	and.w	r3, r3, #28
 80047c4:	4a2b      	ldr	r2, [pc, #172]	; (8004874 <HAL_DMA_IRQHandler+0x184>)
 80047c6:	2102      	movs	r1, #2
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	6053      	str	r3, [r2, #4]
 80047ce:	e008      	b.n	80047e2 <HAL_DMA_IRQHandler+0xf2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	f003 031c 	and.w	r3, r3, #28
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <HAL_DMA_IRQHandler+0x188>)
 80047da:	2102      	movs	r1, #2
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d038      	beq.n	8004864 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80047fa:	e033      	b.n	8004864 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	f003 031c 	and.w	r3, r3, #28
 8004804:	2208      	movs	r2, #8
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02a      	beq.n	8004866 <HAL_DMA_IRQHandler+0x176>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d025      	beq.n	8004866 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 020e 	bic.w	r2, r2, #14
 8004828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f003 021c 	and.w	r2, r3, #28
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f202 	lsl.w	r2, r1, r2
 800483c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004864:	bf00      	nop
 8004866:	bf00      	nop
}
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40020080 	.word	0x40020080
 8004874:	40020400 	.word	0x40020400
 8004878:	40020000 	.word	0x40020000

0800487c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f003 021c 	and.w	r2, r3, #28
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d108      	bne.n	80048dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048da:	e007      	b.n	80048ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
	...

080048f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004908:	429a      	cmp	r2, r3
 800490a:	d813      	bhi.n	8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004918:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	3b08      	subs	r3, #8
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e011      	b.n	8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	009a      	lsls	r2, r3, #2
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800493e:	4413      	add	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3b08      	subs	r3, #8
 800494c:	4a0b      	ldr	r2, [pc, #44]	; (800497c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	3307      	adds	r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800495c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2201      	movs	r2, #1
 8004966:	409a      	lsls	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40020407 	.word	0x40020407
 800497c:	cccccccd 	.word	0xcccccccd
 8004980:	4002081c 	.word	0x4002081c
 8004984:	40020880 	.word	0x40020880

08004988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004998:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	461a      	mov	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2201      	movs	r2, #1
 80049b8:	409a      	lsls	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	1000823f 	.word	0x1000823f
 80049cc:	40020940 	.word	0x40020940

080049d0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	460b      	mov	r3, r1
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d103      	bne.n	80049f0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	605a      	str	r2, [r3, #4]
      break;
 80049ee:	e002      	b.n	80049f6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      break;
 80049f4:	bf00      	nop
  }

  return status;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e003      	b.n	8004a1e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a36:	e140      	b.n	8004cba <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8132 	beq.w	8004cb4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d005      	beq.n	8004a68 <HAL_GPIO_Init+0x40>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d130      	bne.n	8004aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0201 	and.w	r2, r3, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d017      	beq.n	8004b06 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d123      	bne.n	8004b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	08da      	lsrs	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3208      	adds	r2, #8
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	08da      	lsrs	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3208      	adds	r2, #8
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 808c 	beq.w	8004cb4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b9c:	4a4e      	ldr	r2, [pc, #312]	; (8004cd8 <HAL_GPIO_Init+0x2b0>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	2207      	movs	r2, #7
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bc6:	d00d      	beq.n	8004be4 <HAL_GPIO_Init+0x1bc>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a44      	ldr	r2, [pc, #272]	; (8004cdc <HAL_GPIO_Init+0x2b4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <HAL_GPIO_Init+0x1b8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <HAL_GPIO_Init+0x2b8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_GPIO_Init+0x1b4>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e004      	b.n	8004be6 <HAL_GPIO_Init+0x1be>
 8004bdc:	2307      	movs	r3, #7
 8004bde:	e002      	b.n	8004be6 <HAL_GPIO_Init+0x1be>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_GPIO_Init+0x1be>
 8004be4:	2300      	movs	r3, #0
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	f002 0203 	and.w	r2, r2, #3
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	4093      	lsls	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bf6:	4938      	ldr	r1, [pc, #224]	; (8004cd8 <HAL_GPIO_Init+0x2b0>)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c38:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_GPIO_Init+0x2bc>)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f aeb7 	bne.w	8004a38 <HAL_GPIO_Init+0x10>
  }
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	48000400 	.word	0x48000400
 8004ce0:	48000800 	.word	0x48000800
 8004ce4:	58000800 	.word	0x58000800

08004ce8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cf6:	e0af      	b.n	8004e58 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a2 	beq.w	8004e52 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d0e:	4a59      	ldr	r2, [pc, #356]	; (8004e74 <HAL_GPIO_DeInit+0x18c>)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	2207      	movs	r2, #7
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d36:	d00d      	beq.n	8004d54 <HAL_GPIO_DeInit+0x6c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a4f      	ldr	r2, [pc, #316]	; (8004e78 <HAL_GPIO_DeInit+0x190>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <HAL_GPIO_DeInit+0x68>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a4e      	ldr	r2, [pc, #312]	; (8004e7c <HAL_GPIO_DeInit+0x194>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <HAL_GPIO_DeInit+0x64>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e004      	b.n	8004d56 <HAL_GPIO_DeInit+0x6e>
 8004d4c:	2307      	movs	r3, #7
 8004d4e:	e002      	b.n	8004d56 <HAL_GPIO_DeInit+0x6e>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_GPIO_DeInit+0x6e>
 8004d54:	2300      	movs	r3, #0
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	f002 0203 	and.w	r2, r2, #3
 8004d5c:	0092      	lsls	r2, r2, #2
 8004d5e:	4093      	lsls	r3, r2
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d136      	bne.n	8004dd4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d66:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	4943      	ldr	r1, [pc, #268]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d78:	4b41      	ldr	r3, [pc, #260]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	493f      	ldr	r1, [pc, #252]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d8a:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	493b      	ldr	r1, [pc, #236]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	4937      	ldr	r1, [pc, #220]	; (8004e80 <HAL_GPIO_DeInit+0x198>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	2207      	movs	r2, #7
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004db6:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <HAL_GPIO_DeInit+0x18c>)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43da      	mvns	r2, r3
 8004dc6:	482b      	ldr	r0, [pc, #172]	; (8004e74 <HAL_GPIO_DeInit+0x18c>)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	400a      	ands	r2, r1
 8004dce:	3302      	adds	r3, #2
 8004dd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	2103      	movs	r1, #3
 8004dde:	fa01 f303 	lsl.w	r3, r1, r3
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	08da      	lsrs	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3208      	adds	r2, #8
 8004df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	08d2      	lsrs	r2, r2, #3
 8004e08:	4019      	ands	r1, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3208      	adds	r2, #8
 8004e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2103      	movs	r1, #3
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	401a      	ands	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2103      	movs	r1, #3
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f af49 	bne.w	8004cf8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	48000400 	.word	0x48000400
 8004e7c:	48000800 	.word	0x48000800
 8004e80:	58000800 	.word	0x58000800

08004e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	807b      	strh	r3, [r7, #2]
 8004e90:	4613      	mov	r3, r2
 8004e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e94:	787b      	ldrb	r3, [r7, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ea0:	e002      	b.n	8004ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ea2:	887a      	ldrh	r2, [r7, #2]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ec4:	887a      	ldrh	r2, [r7, #2]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	041a      	lsls	r2, r3, #16
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	887b      	ldrh	r3, [r7, #2]
 8004ed2:	400b      	ands	r3, r1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	619a      	str	r2, [r3, #24]
}
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004eee:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	88fb      	ldrh	r3, [r7, #6]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004efa:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f005 fa54 	bl	800a3b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	58000800 	.word	0x58000800

08004f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e081      	b.n	800502a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fc76 	bl	800182c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2224      	movs	r2, #36	; 0x24
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e006      	b.n	8004f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d104      	bne.n	8004fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69d9      	ldr	r1, [r3, #28]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	461a      	mov	r2, r3
 8005040:	460b      	mov	r3, r1
 8005042:	817b      	strh	r3, [r7, #10]
 8005044:	4613      	mov	r3, r2
 8005046:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b20      	cmp	r3, #32
 8005052:	f040 80da 	bne.w	800520a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_I2C_Master_Transmit+0x30>
 8005060:	2302      	movs	r3, #2
 8005062:	e0d3      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800506c:	f7fc ffac 	bl	8001fc8 <HAL_GetTick>
 8005070:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2319      	movs	r3, #25
 8005078:	2201      	movs	r2, #1
 800507a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f9e5 	bl	800544e <I2C_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0be      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2221      	movs	r2, #33	; 0x21
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2210      	movs	r2, #16
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	893a      	ldrh	r2, [r7, #8]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2bff      	cmp	r3, #255	; 0xff
 80050be:	d90e      	bls.n	80050de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	22ff      	movs	r2, #255	; 0xff
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	8979      	ldrh	r1, [r7, #10]
 80050ce:	4b51      	ldr	r3, [pc, #324]	; (8005214 <HAL_I2C_Master_Transmit+0x1e0>)
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fb58 	bl	800578c <I2C_TransferConfig>
 80050dc:	e06c      	b.n	80051b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	8979      	ldrh	r1, [r7, #10]
 80050f0:	4b48      	ldr	r3, [pc, #288]	; (8005214 <HAL_I2C_Master_Transmit+0x1e0>)
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fb47 	bl	800578c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050fe:	e05b      	b.n	80051b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	6a39      	ldr	r1, [r7, #32]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f9e2 	bl	80054ce <I2C_WaitOnTXISFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e07b      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d034      	beq.n	80051b8 <HAL_I2C_Master_Transmit+0x184>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d130      	bne.n	80051b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2200      	movs	r2, #0
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f974 	bl	800544e <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e04d      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2bff      	cmp	r3, #255	; 0xff
 8005178:	d90e      	bls.n	8005198 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	22ff      	movs	r2, #255	; 0xff
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	b2da      	uxtb	r2, r3
 8005186:	8979      	ldrh	r1, [r7, #10]
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fafb 	bl	800578c <I2C_TransferConfig>
 8005196:	e00f      	b.n	80051b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	8979      	ldrh	r1, [r7, #10]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 faea 	bl	800578c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d19e      	bne.n	8005100 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	6a39      	ldr	r1, [r7, #32]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f9c1 	bl	800554e <I2C_WaitOnSTOPFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e01a      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2220      	movs	r2, #32
 80051dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6859      	ldr	r1, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <HAL_I2C_Master_Transmit+0x1e4>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	80002000 	.word	0x80002000
 8005218:	fe00e800 	.word	0xfe00e800

0800521c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	461a      	mov	r2, r3
 8005228:	460b      	mov	r3, r1
 800522a:	817b      	strh	r3, [r7, #10]
 800522c:	4613      	mov	r3, r2
 800522e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b20      	cmp	r3, #32
 800523a:	f040 80db 	bne.w	80053f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_I2C_Master_Receive+0x30>
 8005248:	2302      	movs	r3, #2
 800524a:	e0d4      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005254:	f7fc feb8 	bl	8001fc8 <HAL_GetTick>
 8005258:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	2319      	movs	r3, #25
 8005260:	2201      	movs	r2, #1
 8005262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f8f1 	bl	800544e <I2C_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e0bf      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2210      	movs	r2, #16
 8005282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	893a      	ldrh	r2, [r7, #8]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	d90e      	bls.n	80052c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	8979      	ldrh	r1, [r7, #10]
 80052b6:	4b52      	ldr	r3, [pc, #328]	; (8005400 <HAL_I2C_Master_Receive+0x1e4>)
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa64 	bl	800578c <I2C_TransferConfig>
 80052c4:	e06d      	b.n	80053a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	8979      	ldrh	r1, [r7, #10]
 80052d8:	4b49      	ldr	r3, [pc, #292]	; (8005400 <HAL_I2C_Master_Receive+0x1e4>)
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fa53 	bl	800578c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052e6:	e05c      	b.n	80053a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	6a39      	ldr	r1, [r7, #32]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f96b 	bl	80055c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e07c      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d034      	beq.n	80053a2 <HAL_I2C_Master_Receive+0x186>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d130      	bne.n	80053a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2200      	movs	r2, #0
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f87f 	bl	800544e <I2C_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e04d      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2bff      	cmp	r3, #255	; 0xff
 8005362:	d90e      	bls.n	8005382 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	22ff      	movs	r2, #255	; 0xff
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	8979      	ldrh	r1, [r7, #10]
 8005372:	2300      	movs	r3, #0
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa06 	bl	800578c <I2C_TransferConfig>
 8005380:	e00f      	b.n	80053a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005390:	b2da      	uxtb	r2, r3
 8005392:	8979      	ldrh	r1, [r7, #10]
 8005394:	2300      	movs	r3, #0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f9f5 	bl	800578c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d19d      	bne.n	80052e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	6a39      	ldr	r1, [r7, #32]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f8cc 	bl	800554e <I2C_WaitOnSTOPFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e01a      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2220      	movs	r2, #32
 80053c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <HAL_I2C_Master_Receive+0x1e8>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e000      	b.n	80053f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80053f4:	2302      	movs	r3, #2
  }
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	80002400 	.word	0x80002400
 8005404:	fe00e800 	.word	0xfe00e800

08005408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d007      	beq.n	8005444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	619a      	str	r2, [r3, #24]
  }
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800545e:	e022      	b.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005466:	d01e      	beq.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005468:	f7fc fdae 	bl	8001fc8 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d113      	bne.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00f      	b.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d0cd      	beq.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054da:	e02c      	b.n	8005536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f8dd 	bl	80056a0 <I2C_IsAcknowledgeFailed>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e02a      	b.n	8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f6:	d01e      	beq.n	8005536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f8:	f7fc fd66 	bl	8001fc8 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d113      	bne.n	8005536 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e007      	b.n	8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b02      	cmp	r3, #2
 8005542:	d1cb      	bne.n	80054dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800555a:	e028      	b.n	80055ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f89d 	bl	80056a0 <I2C_IsAcknowledgeFailed>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e026      	b.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fc fd2a 	bl	8001fc8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d113      	bne.n	80055ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e007      	b.n	80055be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d1cf      	bne.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d4:	e055      	b.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f860 	bl	80056a0 <I2C_IsAcknowledgeFailed>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e053      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d129      	bne.n	800564c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	2b04      	cmp	r3, #4
 8005604:	d105      	bne.n	8005612 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e03f      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2220      	movs	r2, #32
 8005618:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b1d      	ldr	r3, [pc, #116]	; (800569c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005626:	400b      	ands	r3, r1
 8005628:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e022      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fc fcbc 	bl	8001fc8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b04      	cmp	r3, #4
 800568e:	d1a2      	bne.n	80055d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	fe00e800 	.word	0xfe00e800

080056a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d161      	bne.n	800577e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c8:	d02b      	beq.n	8005722 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056d8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056da:	e022      	b.n	8005722 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d01e      	beq.n	8005722 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e4:	f7fc fc70 	bl	8001fc8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d302      	bcc.n	80056fa <I2C_IsAcknowledgeFailed+0x5a>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d113      	bne.n	8005722 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e02e      	b.n	8005780 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d1d5      	bne.n	80056dc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2220      	movs	r2, #32
 800573e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff fe61 	bl	8005408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <I2C_IsAcknowledgeFailed+0xe8>)
 8005752:	400b      	ands	r3, r1
 8005754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f043 0204 	orr.w	r2, r3, #4
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	fe00e800 	.word	0xfe00e800

0800578c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	817b      	strh	r3, [r7, #10]
 800579a:	4613      	mov	r3, r2
 800579c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	0d5b      	lsrs	r3, r3, #21
 80057a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057ac:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <I2C_TransferConfig+0x54>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	43db      	mvns	r3, r3
 80057b2:	ea02 0103 	and.w	r1, r2, r3
 80057b6:	897b      	ldrh	r3, [r7, #10]
 80057b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057bc:	7a7b      	ldrb	r3, [r7, #9]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	03ff63ff 	.word	0x03ff63ff

080057e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d138      	bne.n	800586c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005804:	2302      	movs	r3, #2
 8005806:	e032      	b.n	800586e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b20      	cmp	r3, #32
 800588c:	d139      	bne.n	8005902 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005898:	2302      	movs	r3, #2
 800589a:	e033      	b.n	8005904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
	...

08005910 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a03      	ldr	r2, [pc, #12]	; (8005928 <HAL_PWR_EnableBkUpAccess+0x18>)
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	58000400 	.word	0x58000400

0800592c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005930:	4b03      	ldr	r3, [pc, #12]	; (8005940 <HAL_PWREx_GetVoltageRange+0x14>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005938:	4618      	mov	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	58000400 	.word	0x58000400

08005944 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005954:	d101      	bne.n	800595a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr
 8005964:	58000400 	.word	0x58000400

08005968 <LL_RCC_HSE_EnableTcxo>:
{
 8005968:	b480      	push	{r7}
 800596a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800597a:	6013      	str	r3, [r2, #0]
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <LL_RCC_HSE_DisableTcxo>:
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b2:	d101      	bne.n	80059b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e000      	b.n	80059ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <LL_RCC_HSE_Enable>:
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	6013      	str	r3, [r2, #0]
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <LL_RCC_HSE_Disable>:
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_HSE_IsReady>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0c:	d101      	bne.n	8005a12 <LL_RCC_HSE_IsReady+0x18>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <LL_RCC_HSE_IsReady+0x1a>
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <LL_RCC_HSI_Enable>:
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <LL_RCC_HSI_Disable>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_HSI_IsReady>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d101      	bne.n	8005a6c <LL_RCC_HSI_IsReady+0x18>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <LL_RCC_HSI_IsReady+0x1a>
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr

08005a9e <LL_RCC_LSE_IsReady>:
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d101      	bne.n	8005ab6 <LL_RCC_LSE_IsReady+0x18>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <LL_RCC_LSE_IsReady+0x1a>
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <LL_RCC_LSI_Enable>:
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005ad8:	bf00      	nop
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr

08005ae0 <LL_RCC_LSI_Disable>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <LL_RCC_LSI_IsReady>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d101      	bne.n	8005b18 <LL_RCC_LSI_IsReady+0x18>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <LL_RCC_LSI_IsReady+0x1a>
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr

08005b22 <LL_RCC_MSI_Enable>:
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	6013      	str	r3, [r2, #0]
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_MSI_Disable>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	6013      	str	r3, [r2, #0]
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_MSI_IsReady>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d101      	bne.n	8005b70 <LL_RCC_MSI_IsReady+0x16>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <LL_RCC_MSI_IsReady+0x18>
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr

08005b7a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d101      	bne.n	8005b90 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <LL_RCC_MSI_GetRange>:
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	4313      	orrs	r3, r2
 8005be4:	604b      	str	r3, [r1, #4]
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_SetSysClkSource>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 0203 	bic.w	r2, r3, #3
 8005c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <LL_RCC_GetSysClkSource>:
{
 8005c16:	b480      	push	{r7}
 8005c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_SetAHBPrescaler>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_SetAHB3Prescaler>:
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c62:	f023 020f 	bic.w	r2, r3, #15
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_SetAPB1Prescaler>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_SetAPB2Prescaler>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	608b      	str	r3, [r1, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <LL_RCC_GetAHBPrescaler>:
{
 8005cca:	b480      	push	{r7}
 8005ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bc80      	pop	{r7}
 8005cde:	4770      	bx	lr

08005ce0 <LL_RCC_GetAHB3Prescaler>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <LL_RCC_GetAPB1Prescaler>:
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <LL_RCC_GetAPB2Prescaler>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr

08005d26 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005d26:	b480      	push	{r7}
 8005d28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d38:	6013      	str	r3, [r2, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d54:	6013      	str	r3, [r2, #0]
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d70:	d101      	bne.n	8005d76 <LL_RCC_PLL_IsReady+0x18>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <LL_RCC_PLL_IsReady+0x1a>
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bc80      	pop	{r7}
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bc80      	pop	{r7}
 8005d96:	4770      	bx	lr

08005d98 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0303 	and.w	r3, r3, #3
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr

08005dda <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dec:	d101      	bne.n	8005df2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e10:	d101      	bne.n	8005e16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e32:	d101      	bne.n	8005e38 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e42:	b480      	push	{r7}
 8005e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e54:	d101      	bne.n	8005e5a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e38a      	b.n	800658c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e76:	f7ff fece 	bl	8005c16 <LL_RCC_GetSysClkSource>
 8005e7a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e7c:	f7ff ffa2 	bl	8005dc4 <LL_RCC_PLL_GetMainSource>
 8005e80:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80c9 	beq.w	8006022 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x3e>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d17b      	bne.n	8005f94 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d178      	bne.n	8005f94 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ea2:	f7ff fe5a 	bl	8005b5a <LL_RCC_MSI_IsReady>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x54>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e369      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x72>
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCC_OscConfig+0x80>
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d222      	bcs.n	8005f2e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fd4f 	bl	8006990 <RCC_SetFlashLatencyFromMSIRange>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e347      	b.n	800658c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f06:	f043 0308 	orr.w	r3, r3, #8
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fe4e 	bl	8005bc8 <LL_RCC_MSI_SetCalibTrimming>
 8005f2c:	e021      	b.n	8005f72 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f38:	f043 0308 	orr.w	r3, r3, #8
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f50:	4313      	orrs	r3, r2
 8005f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fe35 	bl	8005bc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fd14 	bl	8006990 <RCC_SetFlashLatencyFromMSIRange>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e30c      	b.n	800658c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f72:	f000 fcd5 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4ab4      	ldr	r2, [pc, #720]	; (800624c <HAL_RCC_OscConfig+0x3e8>)
 8005f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f7c:	4bb4      	ldr	r3, [pc, #720]	; (8006250 <HAL_RCC_OscConfig+0x3ec>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fc f817 	bl	8001fb4 <HAL_InitTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005f8a:	7cfb      	ldrb	r3, [r7, #19]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d047      	beq.n	8006020 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005f90:	7cfb      	ldrb	r3, [r7, #19]
 8005f92:	e2fb      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02c      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f9c:	f7ff fdc1 	bl	8005b22 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fa0:	f7fc f812 	bl	8001fc8 <HAL_GetTick>
 8005fa4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fa8:	f7fc f80e 	bl	8001fc8 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e2e8      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fba:	f7ff fdce 	bl	8005b5a <LL_RCC_MSI_IsReady>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f1      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fce:	f043 0308 	orr.w	r3, r3, #8
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff fdea 	bl	8005bc8 <LL_RCC_MSI_SetCalibTrimming>
 8005ff4:	e015      	b.n	8006022 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ff6:	f7ff fda2 	bl	8005b3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ffa:	f7fb ffe5 	bl	8001fc8 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006002:	f7fb ffe1 	bl	8001fc8 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e2bb      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006014:	f7ff fda1 	bl	8005b5a <LL_RCC_MSI_IsReady>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f1      	bne.n	8006002 <HAL_RCC_OscConfig+0x19e>
 800601e:	e000      	b.n	8006022 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006020:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d05f      	beq.n	80060ee <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d005      	beq.n	8006040 <HAL_RCC_OscConfig+0x1dc>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	2b0c      	cmp	r3, #12
 8006038:	d10d      	bne.n	8006056 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d10a      	bne.n	8006056 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006040:	f7ff fcdb 	bl	80059fa <LL_RCC_HSE_IsReady>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d050      	beq.n	80060ec <HAL_RCC_OscConfig+0x288>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d14c      	bne.n	80060ec <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e29a      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d102      	bne.n	800607c <HAL_RCC_OscConfig+0x218>
 8006076:	f7ff fca4 	bl	80059c2 <LL_RCC_HSE_Enable>
 800607a:	e00d      	b.n	8006098 <HAL_RCC_OscConfig+0x234>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006084:	d104      	bne.n	8006090 <HAL_RCC_OscConfig+0x22c>
 8006086:	f7ff fc6f 	bl	8005968 <LL_RCC_HSE_EnableTcxo>
 800608a:	f7ff fc9a 	bl	80059c2 <LL_RCC_HSE_Enable>
 800608e:	e003      	b.n	8006098 <HAL_RCC_OscConfig+0x234>
 8006090:	f7ff fca5 	bl	80059de <LL_RCC_HSE_Disable>
 8006094:	f7ff fc76 	bl	8005984 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d012      	beq.n	80060c6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fb ff92 	bl	8001fc8 <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a8:	f7fb ff8e 	bl	8001fc8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b64      	cmp	r3, #100	; 0x64
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e268      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80060ba:	f7ff fc9e 	bl	80059fa <LL_RCC_HSE_IsReady>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f1      	beq.n	80060a8 <HAL_RCC_OscConfig+0x244>
 80060c4:	e013      	b.n	80060ee <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fb ff7f 	bl	8001fc8 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ce:	f7fb ff7b 	bl	8001fc8 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b64      	cmp	r3, #100	; 0x64
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e255      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80060e0:	f7ff fc8b 	bl	80059fa <LL_RCC_HSE_IsReady>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f1      	bne.n	80060ce <HAL_RCC_OscConfig+0x26a>
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ec:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d04b      	beq.n	8006192 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d005      	beq.n	800610c <HAL_RCC_OscConfig+0x2a8>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d113      	bne.n	800612e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d110      	bne.n	800612e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610c:	f7ff fca2 	bl	8005a54 <LL_RCC_HSI_IsReady>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_RCC_OscConfig+0x2be>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e234      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fca5 	bl	8005a76 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800612c:	e031      	b.n	8006192 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d019      	beq.n	800616a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006136:	f7ff fc71 	bl	8005a1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb ff45 	bl	8001fc8 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006142:	f7fb ff41 	bl	8001fc8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e21b      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006154:	f7ff fc7e 	bl	8005a54 <LL_RCC_HSI_IsReady>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f1      	beq.n	8006142 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fc87 	bl	8005a76 <LL_RCC_HSI_SetCalibTrimming>
 8006168:	e013      	b.n	8006192 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800616a:	f7ff fc65 	bl	8005a38 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fb ff2b 	bl	8001fc8 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006176:	f7fb ff27 	bl	8001fc8 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e201      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006188:	f7ff fc64 	bl	8005a54 <LL_RCC_HSI_IsReady>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f1      	bne.n	8006176 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d06e      	beq.n	800627c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d056      	beq.n	8006254 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ae:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d031      	beq.n	8006222 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d006      	beq.n	80061d6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e1da      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d013      	beq.n	8006208 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80061e0:	f7ff fc7e 	bl	8005ae0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061e4:	f7fb fef0 	bl	8001fc8 <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ec:	f7fb feec 	bl	8001fc8 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b11      	cmp	r3, #17
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e1c6      	b.n	800658c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80061fe:	f7ff fc7f 	bl	8005b00 <LL_RCC_LSI_IsReady>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f1      	bne.n	80061ec <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006210:	f023 0210 	bic.w	r2, r3, #16
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006222:	f7ff fc4d 	bl	8005ac0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006226:	f7fb fecf 	bl	8001fc8 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800622e:	f7fb fecb 	bl	8001fc8 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b11      	cmp	r3, #17
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e1a5      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006240:	f7ff fc5e 	bl	8005b00 <LL_RCC_LSI_IsReady>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f1      	beq.n	800622e <HAL_RCC_OscConfig+0x3ca>
 800624a:	e017      	b.n	800627c <HAL_RCC_OscConfig+0x418>
 800624c:	20000000 	.word	0x20000000
 8006250:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006254:	f7ff fc44 	bl	8005ae0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006258:	f7fb feb6 	bl	8001fc8 <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006260:	f7fb feb2 	bl	8001fc8 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b11      	cmp	r3, #17
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e18c      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006272:	f7ff fc45 	bl	8005b00 <LL_RCC_LSI_IsReady>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80d8 	beq.w	800643a <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800628a:	f7ff fb5b 	bl	8005944 <LL_PWR_IsEnabledBkUpAccess>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d113      	bne.n	80062bc <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006294:	f7ff fb3c 	bl	8005910 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006298:	f7fb fe96 	bl	8001fc8 <HAL_GetTick>
 800629c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800629e:	e008      	b.n	80062b2 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a0:	f7fb fe92 	bl	8001fc8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e16c      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80062b2:	f7ff fb47 	bl	8005944 <LL_PWR_IsEnabledBkUpAccess>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f1      	beq.n	80062a0 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d07b      	beq.n	80063bc <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b85      	cmp	r3, #133	; 0x85
 80062ca:	d003      	beq.n	80062d4 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d109      	bne.n	80062e8 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e0:	f043 0304 	orr.w	r3, r3, #4
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e8:	f7fb fe6e 	bl	8001fc8 <HAL_GetTick>
 80062ec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006302:	e00a      	b.n	800631a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fb fe60 	bl	8001fc8 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e138      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800631a:	f7ff fbc0 	bl	8005a9e <LL_RCC_LSE_IsReady>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ef      	beq.n	8006304 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b81      	cmp	r3, #129	; 0x81
 800632a:	d003      	beq.n	8006334 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b85      	cmp	r3, #133	; 0x85
 8006332:	d121      	bne.n	8006378 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fb fe48 	bl	8001fc8 <HAL_GetTick>
 8006338:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800634e:	e00a      	b.n	8006366 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006350:	f7fb fe3a 	bl	8001fc8 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	; 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e112      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0ec      	beq.n	8006350 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006376:	e060      	b.n	800643a <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fe26 	bl	8001fc8 <HAL_GetTick>
 800637c:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800637e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800638a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006392:	e00a      	b.n	80063aa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fb fe18 	bl	8001fc8 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	f241 3288 	movw	r2, #5000	; 0x1388
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e0f0      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1ec      	bne.n	8006394 <HAL_RCC_OscConfig+0x530>
 80063ba:	e03e      	b.n	800643a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fb fe04 	bl	8001fc8 <HAL_GetTick>
 80063c0:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fb fdf6 	bl	8001fc8 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0ce      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1ec      	bne.n	80063d8 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fe:	f7fb fde3 	bl	8001fc8 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006418:	e00a      	b.n	8006430 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800641a:	f7fb fdd5 	bl	8001fc8 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	f241 3288 	movw	r2, #5000	; 0x1388
 8006428:	4293      	cmp	r3, r2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0ad      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006430:	f7ff fb35 	bl	8005a9e <LL_RCC_LSE_IsReady>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ef      	bne.n	800641a <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80a3 	beq.w	800658a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2b0c      	cmp	r3, #12
 8006448:	d076      	beq.n	8006538 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	2b02      	cmp	r3, #2
 8006450:	d14b      	bne.n	80064ea <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	f7ff fc76 	bl	8005d42 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fb fdb7 	bl	8001fc8 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645e:	f7fb fdb3 	bl	8001fc8 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b0a      	cmp	r3, #10
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e08d      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006470:	f7ff fc75 	bl	8005d5e <LL_RCC_PLL_IsReady>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f1      	bne.n	800645e <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	4b44      	ldr	r3, [pc, #272]	; (8006594 <HAL_RCC_OscConfig+0x730>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800648c:	4311      	orrs	r1, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006492:	0212      	lsls	r2, r2, #8
 8006494:	4311      	orrs	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800649a:	4311      	orrs	r1, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064a0:	4311      	orrs	r1, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064a6:	430a      	orrs	r2, r1
 80064a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064b0:	f7ff fc39 	bl	8005d26 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fb fd80 	bl	8001fc8 <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064cc:	f7fb fd7c 	bl	8001fc8 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b0a      	cmp	r3, #10
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e056      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80064de:	f7ff fc3e 	bl	8005d5e <LL_RCC_PLL_IsReady>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0f1      	beq.n	80064cc <HAL_RCC_OscConfig+0x668>
 80064e8:	e04f      	b.n	800658a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ea:	f7ff fc2a 	bl	8005d42 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064f8:	f023 0303 	bic.w	r3, r3, #3
 80064fc:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006508:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800650c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006510:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006512:	f7fb fd59 	bl	8001fc8 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651a:	f7fb fd55 	bl	8001fc8 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b0a      	cmp	r3, #10
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e02f      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800652c:	f7ff fc17 	bl	8005d5e <LL_RCC_PLL_IsReady>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f1      	bne.n	800651a <HAL_RCC_OscConfig+0x6b6>
 8006536:	e028      	b.n	800658a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e023      	b.n	800658c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0203 	and.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	429a      	cmp	r2, r3
 8006558:	d115      	bne.n	8006586 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	429a      	cmp	r2, r3
 8006566:	d10e      	bne.n	8006586 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	429a      	cmp	r2, r3
 8006576:	d106      	bne.n	8006586 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	429a      	cmp	r2, r3
 8006584:	d001      	beq.n	800658a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	11c1808c 	.word	0x11c1808c

08006598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e10f      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065ac:	4b89      	ldr	r3, [pc, #548]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d91b      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ba:	4b86      	ldr	r3, [pc, #536]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f023 0207 	bic.w	r2, r3, #7
 80065c2:	4984      	ldr	r1, [pc, #528]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ca:	f7fb fcfd 	bl	8001fc8 <HAL_GetTick>
 80065ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065d2:	f7fb fcf9 	bl	8001fc8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0f3      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e4:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d1ef      	bne.n	80065d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d016      	beq.n	800662c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fb12 	bl	8005c2c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006608:	f7fb fcde 	bl	8001fc8 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006610:	f7fb fcda 	bl	8001fc8 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d901      	bls.n	8006622 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e0d4      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006622:	f7ff fbda 	bl	8005dda <LL_RCC_IsActiveFlag_HPRE>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f1      	beq.n	8006610 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d016      	beq.n	8006666 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fb08 	bl	8005c52 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006642:	f7fb fcc1 	bl	8001fc8 <HAL_GetTick>
 8006646:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006648:	e008      	b.n	800665c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800664a:	f7fb fcbd 	bl	8001fc8 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e0b7      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800665c:	f7ff fbce 	bl	8005dfc <LL_RCC_IsActiveFlag_SHDHPRE>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d0f1      	beq.n	800664a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fb01 	bl	8005c7e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800667c:	f7fb fca4 	bl	8001fc8 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006684:	f7fb fca0 	bl	8001fc8 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e09a      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006696:	f7ff fbc3 	bl	8005e20 <LL_RCC_IsActiveFlag_PPRE1>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f1      	beq.n	8006684 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d017      	beq.n	80066dc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff faf6 	bl	8005ca4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066b8:	f7fb fc86 	bl	8001fc8 <HAL_GetTick>
 80066bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066c0:	f7fb fc82 	bl	8001fc8 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e07c      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066d2:	f7ff fbb6 	bl	8005e42 <LL_RCC_IsActiveFlag_PPRE2>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f1      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d043      	beq.n	8006770 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d106      	bne.n	80066fe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80066f0:	f7ff f983 	bl	80059fa <LL_RCC_HSE_IsReady>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11e      	bne.n	8006738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e066      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d106      	bne.n	8006714 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006706:	f7ff fb2a 	bl	8005d5e <LL_RCC_PLL_IsReady>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d113      	bne.n	8006738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e05b      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800671c:	f7ff fa1d 	bl	8005b5a <LL_RCC_MSI_IsReady>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d108      	bne.n	8006738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e050      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800672a:	f7ff f993 	bl	8005a54 <LL_RCC_HSI_IsReady>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e049      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fa57 	bl	8005bf0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006742:	f7fb fc41 	bl	8001fc8 <HAL_GetTick>
 8006746:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006748:	e00a      	b.n	8006760 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674a:	f7fb fc3d 	bl	8001fc8 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	f241 3288 	movw	r2, #5000	; 0x1388
 8006758:	4293      	cmp	r3, r2
 800675a:	d901      	bls.n	8006760 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e035      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006760:	f7ff fa59 	bl	8005c16 <LL_RCC_GetSysClkSource>
 8006764:	4602      	mov	r2, r0
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	429a      	cmp	r2, r3
 800676e:	d1ec      	bne.n	800674a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006770:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d21b      	bcs.n	80067b6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f023 0207 	bic.w	r2, r3, #7
 8006786:	4913      	ldr	r1, [pc, #76]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	4313      	orrs	r3, r2
 800678c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678e:	f7fb fc1b 	bl	8001fc8 <HAL_GetTick>
 8006792:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006796:	f7fb fc17 	bl	8001fc8 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e011      	b.n	80067cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_RCC_ClockConfig+0x23c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d1ef      	bne.n	8006796 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067b6:	f000 f8b3 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4a06      	ldr	r2, [pc, #24]	; (80067d8 <HAL_RCC_ClockConfig+0x240>)
 80067be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_RCC_ClockConfig+0x244>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fb fbf5 	bl	8001fb4 <HAL_InitTick>
 80067ca:	4603      	mov	r3, r0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	58004000 	.word	0x58004000
 80067d8:	20000000 	.word	0x20000000
 80067dc:	20000034 	.word	0x20000034

080067e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ee:	f7ff fa12 	bl	8005c16 <LL_RCC_GetSysClkSource>
 80067f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067f4:	f7ff fae6 	bl	8005dc4 <LL_RCC_PLL_GetMainSource>
 80067f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_RCC_GetSysClockFreq+0x2c>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b0c      	cmp	r3, #12
 8006804:	d139      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d136      	bne.n	800687a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800680c:	f7ff f9b5 	bl	8005b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d115      	bne.n	8006842 <HAL_RCC_GetSysClockFreq+0x62>
 8006816:	f7ff f9b0 	bl	8005b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <HAL_RCC_GetSysClockFreq+0x4e>
 8006820:	f7ff f9bb 	bl	8005b9a <LL_RCC_MSI_GetRange>
 8006824:	4603      	mov	r3, r0
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	e005      	b.n	800683a <HAL_RCC_GetSysClockFreq+0x5a>
 800682e:	f7ff f9bf 	bl	8005bb0 <LL_RCC_MSI_GetRangeAfterStandby>
 8006832:	4603      	mov	r3, r0
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	4a36      	ldr	r2, [pc, #216]	; (8006914 <HAL_RCC_GetSysClockFreq+0x134>)
 800683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006840:	e014      	b.n	800686c <HAL_RCC_GetSysClockFreq+0x8c>
 8006842:	f7ff f99a 	bl	8005b7a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006846:	4603      	mov	r3, r0
 8006848:	2b01      	cmp	r3, #1
 800684a:	d106      	bne.n	800685a <HAL_RCC_GetSysClockFreq+0x7a>
 800684c:	f7ff f9a5 	bl	8005b9a <LL_RCC_MSI_GetRange>
 8006850:	4603      	mov	r3, r0
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	e005      	b.n	8006866 <HAL_RCC_GetSysClockFreq+0x86>
 800685a:	f7ff f9a9 	bl	8005bb0 <LL_RCC_MSI_GetRangeAfterStandby>
 800685e:	4603      	mov	r3, r0
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	4a2b      	ldr	r2, [pc, #172]	; (8006914 <HAL_RCC_GetSysClockFreq+0x134>)
 8006868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d115      	bne.n	80068a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006878:	e012      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d102      	bne.n	8006886 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <HAL_RCC_GetSysClockFreq+0x138>)
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e00c      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d109      	bne.n	80068a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800688c:	f7ff f888 	bl	80059a0 <LL_RCC_HSE_IsEnabledDiv2>
 8006890:	4603      	mov	r3, r0
 8006892:	2b01      	cmp	r3, #1
 8006894:	d102      	bne.n	800689c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006896:	4b20      	ldr	r3, [pc, #128]	; (8006918 <HAL_RCC_GetSysClockFreq+0x138>)
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e001      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800689c:	4b1f      	ldr	r3, [pc, #124]	; (800691c <HAL_RCC_GetSysClockFreq+0x13c>)
 800689e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a0:	f7ff f9b9 	bl	8005c16 <LL_RCC_GetSysClkSource>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b0c      	cmp	r3, #12
 80068a8:	d12f      	bne.n	800690a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80068aa:	f7ff fa8b 	bl	8005dc4 <LL_RCC_PLL_GetMainSource>
 80068ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d003      	beq.n	80068be <HAL_RCC_GetSysClockFreq+0xde>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d003      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80068bc:	e00d      	b.n	80068da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80068be:	4b16      	ldr	r3, [pc, #88]	; (8006918 <HAL_RCC_GetSysClockFreq+0x138>)
 80068c0:	60fb      	str	r3, [r7, #12]
        break;
 80068c2:	e00d      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068c4:	f7ff f86c 	bl	80059a0 <LL_RCC_HSE_IsEnabledDiv2>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d102      	bne.n	80068d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80068ce:	4b12      	ldr	r3, [pc, #72]	; (8006918 <HAL_RCC_GetSysClockFreq+0x138>)
 80068d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80068d2:	e005      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80068d4:	4b11      	ldr	r3, [pc, #68]	; (800691c <HAL_RCC_GetSysClockFreq+0x13c>)
 80068d6:	60fb      	str	r3, [r7, #12]
        break;
 80068d8:	e002      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	60fb      	str	r3, [r7, #12]
        break;
 80068de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80068e0:	f7ff fa4e 	bl	8005d80 <LL_RCC_PLL_GetN>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	fb03 f402 	mul.w	r4, r3, r2
 80068ec:	f7ff fa5f 	bl	8005dae <LL_RCC_PLL_GetDivider>
 80068f0:	4603      	mov	r3, r0
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	3301      	adds	r3, #1
 80068f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80068fa:	f7ff fa4d 	bl	8005d98 <LL_RCC_PLL_GetR>
 80068fe:	4603      	mov	r3, r0
 8006900:	0f5b      	lsrs	r3, r3, #29
 8006902:	3301      	adds	r3, #1
 8006904:	fbb4 f3f3 	udiv	r3, r4, r3
 8006908:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800690a:	697b      	ldr	r3, [r7, #20]
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd90      	pop	{r4, r7, pc}
 8006914:	0801b634 	.word	0x0801b634
 8006918:	00f42400 	.word	0x00f42400
 800691c:	01e84800 	.word	0x01e84800

08006920 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b598      	push	{r3, r4, r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006924:	f7ff ff5c 	bl	80067e0 <HAL_RCC_GetSysClockFreq>
 8006928:	4604      	mov	r4, r0
 800692a:	f7ff f9ce 	bl	8005cca <LL_RCC_GetAHBPrescaler>
 800692e:	4603      	mov	r3, r0
 8006930:	091b      	lsrs	r3, r3, #4
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	4a03      	ldr	r2, [pc, #12]	; (8006944 <HAL_RCC_GetHCLKFreq+0x24>)
 8006938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd98      	pop	{r3, r4, r7, pc}
 8006944:	0801b5d4 	.word	0x0801b5d4

08006948 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006948:	b598      	push	{r3, r4, r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800694c:	f7ff ffe8 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006950:	4604      	mov	r4, r0
 8006952:	f7ff f9d2 	bl	8005cfa <LL_RCC_GetAPB1Prescaler>
 8006956:	4603      	mov	r3, r0
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	4a03      	ldr	r2, [pc, #12]	; (8006968 <HAL_RCC_GetPCLK1Freq+0x20>)
 800695c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006960:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd98      	pop	{r3, r4, r7, pc}
 8006968:	0801b614 	.word	0x0801b614

0800696c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800696c:	b598      	push	{r3, r4, r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006970:	f7ff ffd6 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006974:	4604      	mov	r4, r0
 8006976:	f7ff f9cb 	bl	8005d10 <LL_RCC_GetAPB2Prescaler>
 800697a:	4603      	mov	r3, r0
 800697c:	0adb      	lsrs	r3, r3, #11
 800697e:	4a03      	ldr	r2, [pc, #12]	; (800698c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006984:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd98      	pop	{r3, r4, r7, pc}
 800698c:	0801b614 	.word	0x0801b614

08006990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80069a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80069a8:	f7ff f99a 	bl	8005ce0 <LL_RCC_GetAHB3Prescaler>
 80069ac:	4603      	mov	r3, r0
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0c9c      	lsrs	r4, r3, #18
 80069cc:	f7fe ffae 	bl	800592c <HAL_PWREx_GetVoltageRange>
 80069d0:	4603      	mov	r3, r0
 80069d2:	4619      	mov	r1, r3
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 f80b 	bl	80069f0 <RCC_SetFlashLatency>
 80069da:	4603      	mov	r3, r0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd90      	pop	{r4, r7, pc}
 80069e4:	0801b634 	.word	0x0801b634
 80069e8:	0801b5d4 	.word	0x0801b5d4
 80069ec:	431bde83 	.word	0x431bde83

080069f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	; 0x38
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80069fa:	4a3c      	ldr	r2, [pc, #240]	; (8006aec <RCC_SetFlashLatency+0xfc>)
 80069fc:	f107 0320 	add.w	r3, r7, #32
 8006a00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a04:	6018      	str	r0, [r3, #0]
 8006a06:	3304      	adds	r3, #4
 8006a08:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006a0a:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <RCC_SetFlashLatency+0x100>)
 8006a0c:	f107 0318 	add.w	r3, r7, #24
 8006a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	3304      	adds	r3, #4
 8006a18:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006a1a:	4a36      	ldr	r2, [pc, #216]	; (8006af4 <RCC_SetFlashLatency+0x104>)
 8006a1c:	f107 030c 	add.w	r3, r7, #12
 8006a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d11d      	bne.n	8006a6e <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	e016      	b.n	8006a66 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a40:	4413      	add	r3, r2
 8006a42:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006a46:	461a      	mov	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d808      	bhi.n	8006a60 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a56:	4413      	add	r3, r2
 8006a58:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a5e:	e023      	b.n	8006aa8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	3301      	adds	r3, #1
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d9e5      	bls.n	8006a38 <RCC_SetFlashLatency+0x48>
 8006a6c:	e01c      	b.n	8006aa8 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a72:	e016      	b.n	8006aa2 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d808      	bhi.n	8006a9c <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a92:	4413      	add	r3, r2
 8006a94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9a:	e005      	b.n	8006aa8 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d9e5      	bls.n	8006a74 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006aa8:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <RCC_SetFlashLatency+0x108>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 0207 	bic.w	r2, r3, #7
 8006ab0:	4911      	ldr	r1, [pc, #68]	; (8006af8 <RCC_SetFlashLatency+0x108>)
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ab8:	f7fb fa86 	bl	8001fc8 <HAL_GetTick>
 8006abc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006abe:	e008      	b.n	8006ad2 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ac0:	f7fb fa82 	bl	8001fc8 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e007      	b.n	8006ae2 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ad2:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <RCC_SetFlashLatency+0x108>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d1ef      	bne.n	8006ac0 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3738      	adds	r7, #56	; 0x38
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	0801ae34 	.word	0x0801ae34
 8006af0:	0801ae3c 	.word	0x0801ae3c
 8006af4:	0801ae44 	.word	0x0801ae44
 8006af8:	58004000 	.word	0x58004000

08006afc <LL_RCC_LSE_IsReady>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d101      	bne.n	8006b14 <LL_RCC_LSE_IsReady+0x18>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e000      	b.n	8006b16 <LL_RCC_LSE_IsReady+0x1a>
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_SetUSARTClockSource>:
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0c1b      	lsrs	r3, r3, #16
 8006b32:	43db      	mvns	r3, r3
 8006b34:	401a      	ands	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_SetI2SClockSource>:
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <LL_RCC_SetLPUARTClockSource>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <LL_RCC_SetI2CClockSource>:
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	091b      	lsrs	r3, r3, #4
 8006bb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	401a      	ands	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr

08006bda <LL_RCC_SetLPTIMClockSource>:
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <LL_RCC_SetRNGClockSource>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <LL_RCC_SetADCClockSource>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <LL_RCC_SetRTCClockSource>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bc80      	pop	{r7}
 8006c88:	4770      	bx	lr

08006c8a <LL_RCC_GetRTCClockSource>:
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_ForceBackupDomainReset>:
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cba:	bf00      	nop
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr

08006cc2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cda:	bf00      	nop
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
	...

08006ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d058      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006d04:	f7fe fe04 	bl	8005910 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d08:	f7fb f95e 	bl	8001fc8 <HAL_GetTick>
 8006d0c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006d0e:	e009      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d10:	f7fb f95a 	bl	8001fc8 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d902      	bls.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	74fb      	strb	r3, [r7, #19]
        break;
 8006d22:	e006      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006d24:	4b7b      	ldr	r3, [pc, #492]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d30:	d1ee      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006d32:	7cfb      	ldrb	r3, [r7, #19]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d13c      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006d38:	f7ff ffa7 	bl	8006c8a <LL_RCC_GetRTCClockSource>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d00f      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d54:	f7ff ffa5 	bl	8006ca2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d58:	f7ff ffb3 	bl	8006cc2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d014      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fb f92a 	bl	8001fc8 <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d76:	e00b      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d78:	f7fb f926 	bl	8001fc8 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d902      	bls.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006d8e:	e004      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d90:	f7ff feb4 	bl	8006afc <LL_RCC_LSE_IsReady>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d1ee      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006d9a:	7cfb      	ldrb	r3, [r7, #19]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d105      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff ff5b 	bl	8006c60 <LL_RCC_SetRTCClockSource>
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	74bb      	strb	r3, [r7, #18]
 8006db0:	e001      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fea9 	bl	8006b1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fe9e 	bl	8006b1e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fec0 	bl	8006b78 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fee6 	bl	8006bda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fedb 	bl	8006bda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7ff fed0 	bl	8006bda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fea9 	bl	8006ba2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fe9e 	bl	8006ba2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fe93 	bl	8006ba2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fe5e 	bl	8006b4e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9a:	d107      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7ff fea5 	bl	8006c0c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ed8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fea3 	bl	8006c36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006f0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	58000400 	.word	0x58000400

08006f18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d068      	beq.n	8006ffc <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fa fdd2 	bl	8001ae8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4c:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f4e:	22ca      	movs	r2, #202	; 0xca
 8006f50:	625a      	str	r2, [r3, #36]	; 0x24
 8006f52:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f54:	2253      	movs	r2, #83	; 0x53
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa0f 	bl	800737c <RTC_EnterInitMode>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d13f      	bne.n	8006fe8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f6e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	4319      	orrs	r1, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	491e      	ldr	r1, [pc, #120]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	491a      	ldr	r1, [pc, #104]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006fa2:	4b19      	ldr	r3, [pc, #100]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	4914      	ldr	r1, [pc, #80]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa12 	bl	80073e4 <RTC_ExitInitMode>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a19      	ldr	r1, [r3, #32]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4319      	orrs	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	4909      	ldr	r1, [pc, #36]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <HAL_RTC_Init+0xf0>)
 8006fea:	22ff      	movs	r2, #255	; 0xff
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40002800 	.word	0x40002800

0800700c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_RTC_SetAlarm_IT+0x1e>
 8007026:	2302      	movs	r3, #2
 8007028:	e0f3      	b.n	8007212 <HAL_RTC_SetAlarm_IT+0x206>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800703a:	4b78      	ldr	r3, [pc, #480]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007042:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704a:	d06a      	beq.n	8007122 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d13a      	bne.n	80070c8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007052:	4b72      	ldr	r3, [pc, #456]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2200      	movs	r2, #0
 8007062:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f9f5 	bl	8007460 <RTC_ByteToBcd2>
 8007076:	4603      	mov	r3, r0
 8007078:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f9ee 	bl	8007460 <RTC_ByteToBcd2>
 8007084:	4603      	mov	r3, r0
 8007086:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007088:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	789b      	ldrb	r3, [r3, #2]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f9e6 	bl	8007460 <RTC_ByteToBcd2>
 8007094:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007096:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070a0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f9d8 	bl	8007460 <RTC_ByteToBcd2>
 80070b0:	4603      	mov	r3, r0
 80070b2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070b4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	e02c      	b.n	8007122 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80070d0:	d00d      	beq.n	80070ee <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070da:	d008      	beq.n	80070ee <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070dc:	4b4f      	ldr	r3, [pc, #316]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070fa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007100:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007108:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007110:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007112:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007118:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007122:	4b3e      	ldr	r3, [pc, #248]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007124:	22ca      	movs	r2, #202	; 0xca
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
 8007128:	4b3c      	ldr	r3, [pc, #240]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800712a:	2253      	movs	r2, #83	; 0x53
 800712c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007136:	d12c      	bne.n	8007192 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007138:	4b38      	ldr	r3, [pc, #224]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	4a37      	ldr	r2, [pc, #220]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800713e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007142:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007144:	4b35      	ldr	r3, [pc, #212]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007146:	2201      	movs	r2, #1
 8007148:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007150:	d107      	bne.n	8007162 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	4930      	ldr	r1, [pc, #192]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800715c:	4313      	orrs	r3, r2
 800715e:	644b      	str	r3, [r1, #68]	; 0x44
 8007160:	e006      	b.n	8007170 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007162:	4a2e      	ldr	r2, [pc, #184]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007168:	4a2c      	ldr	r2, [pc, #176]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007170:	4a2a      	ldr	r2, [pc, #168]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717c:	f043 0201 	orr.w	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007184:	4b25      	ldr	r3, [pc, #148]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4a24      	ldr	r2, [pc, #144]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 800718a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800718e:	6193      	str	r3, [r2, #24]
 8007190:	e02b      	b.n	80071ea <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	4a21      	ldr	r2, [pc, #132]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 8007198:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800719c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800719e:	4b1f      	ldr	r3, [pc, #124]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071a0:	2202      	movs	r2, #2
 80071a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071aa:	d107      	bne.n	80071bc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	699a      	ldr	r2, [r3, #24]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	4919      	ldr	r1, [pc, #100]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071ba:	e006      	b.n	80071ca <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80071bc:	4a17      	ldr	r2, [pc, #92]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f043 0202 	orr.w	r2, r3, #2
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	4a0e      	ldr	r2, [pc, #56]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071e4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80071e8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <HAL_RTC_SetAlarm_IT+0x214>)
 80071ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f0:	4a0b      	ldr	r2, [pc, #44]	; (8007220 <HAL_RTC_SetAlarm_IT+0x214>)
 80071f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071fa:	4b08      	ldr	r3, [pc, #32]	; (800721c <HAL_RTC_SetAlarm_IT+0x210>)
 80071fc:	22ff      	movs	r2, #255	; 0xff
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	bd90      	pop	{r4, r7, pc}
 800721a:	bf00      	nop
 800721c:	40002800 	.word	0x40002800
 8007220:	58000800 	.word	0x58000800

08007224 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <HAL_RTC_DeactivateAlarm+0x18>
 8007238:	2302      	movs	r3, #2
 800723a:	e048      	b.n	80072ce <HAL_RTC_DeactivateAlarm+0xaa>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800724c:	4b22      	ldr	r3, [pc, #136]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800724e:	22ca      	movs	r2, #202	; 0xca
 8007250:	625a      	str	r2, [r3, #36]	; 0x24
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007254:	2253      	movs	r2, #83	; 0x53
 8007256:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	d115      	bne.n	800728c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007260:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	4a1c      	ldr	r2, [pc, #112]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007266:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800726a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800726e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007276:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	f023 0201 	bic.w	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007284:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007286:	2201      	movs	r2, #1
 8007288:	65da      	str	r2, [r3, #92]	; 0x5c
 800728a:	e014      	b.n	80072b6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800728c:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007292:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007296:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800729e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a8:	f023 0202 	bic.w	r2, r3, #2
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80072b0:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072b2:	2202      	movs	r2, #2
 80072b4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b6:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072b8:	22ff      	movs	r2, #255	; 0xff
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bc80      	pop	{r7}
 80072d6:	4770      	bx	lr
 80072d8:	40002800 	.word	0x40002800

080072dc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <HAL_RTC_AlarmIRQHandler+0x50>)
 80072e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RTC_AlarmIRQHandler+0x50>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fb f8ef 	bl	80024e4 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_RTC_AlarmIRQHandler+0x50>)
 8007312:	2202      	movs	r2, #2
 8007314:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f94a 	bl	80075b0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40002800 	.word	0x40002800

08007330 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007338:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <HAL_RTC_WaitForSynchro+0x48>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4a0e      	ldr	r2, [pc, #56]	; (8007378 <HAL_RTC_WaitForSynchro+0x48>)
 800733e:	f023 0320 	bic.w	r3, r3, #32
 8007342:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007344:	f7fa fe40 	bl	8001fc8 <HAL_GetTick>
 8007348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800734a:	e009      	b.n	8007360 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800734c:	f7fa fe3c 	bl	8001fc8 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800735a:	d901      	bls.n	8007360 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e006      	b.n	800736e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_RTC_WaitForSynchro+0x48>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d0ef      	beq.n	800734c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40002800 	.word	0x40002800

0800737c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <RTC_EnterInitMode+0x64>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d120      	bne.n	80073d6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007394:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <RTC_EnterInitMode+0x64>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <RTC_EnterInitMode+0x64>)
 800739a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800739e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80073a0:	f7fa fe12 	bl	8001fc8 <HAL_GetTick>
 80073a4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073a6:	e00d      	b.n	80073c4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80073a8:	f7fa fe0e 	bl	8001fc8 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b6:	d905      	bls.n	80073c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2203      	movs	r2, #3
 80073c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <RTC_EnterInitMode+0x64>)
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <RTC_EnterInitMode+0x5a>
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d1e8      	bne.n	80073a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40002800 	.word	0x40002800

080073e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80073f0:	4b1a      	ldr	r3, [pc, #104]	; (800745c <RTC_ExitInitMode+0x78>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <RTC_ExitInitMode+0x78>)
 80073f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073fa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80073fc:	4b17      	ldr	r3, [pc, #92]	; (800745c <RTC_ExitInitMode+0x78>)
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10c      	bne.n	8007422 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff91 	bl	8007330 <HAL_RTC_WaitForSynchro>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01e      	beq.n	8007452 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2203      	movs	r2, #3
 8007418:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e017      	b.n	8007452 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <RTC_ExitInitMode+0x78>)
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	4a0d      	ldr	r2, [pc, #52]	; (800745c <RTC_ExitInitMode+0x78>)
 8007428:	f023 0320 	bic.w	r3, r3, #32
 800742c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff ff7e 	bl	8007330 <HAL_RTC_WaitForSynchro>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2203      	movs	r2, #3
 800743e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007446:	4b05      	ldr	r3, [pc, #20]	; (800745c <RTC_ExitInitMode+0x78>)
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	4a04      	ldr	r2, [pc, #16]	; (800745c <RTC_ExitInitMode+0x78>)
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40002800 	.word	0x40002800

08007460 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007472:	e005      	b.n	8007480 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3b0a      	subs	r3, #10
 800747e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	2b09      	cmp	r3, #9
 8007484:	d8f6      	bhi.n	8007474 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	011b      	lsls	r3, r3, #4
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	4313      	orrs	r3, r2
 8007492:	b2db      	uxtb	r3, r3
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr
	...

080074a0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e01f      	b.n	80074f6 <HAL_RTCEx_EnableBypassShadow+0x56>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074c8:	22ca      	movs	r2, #202	; 0xca
 80074ca:	625a      	str	r2, [r3, #36]	; 0x24
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074ce:	2253      	movs	r2, #83	; 0x53
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074d8:	f043 0320 	orr.w	r3, r3, #32
 80074dc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074de:	4b08      	ldr	r3, [pc, #32]	; (8007500 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074e0:	22ff      	movs	r2, #255	; 0xff
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr
 8007500:	40002800 	.word	0x40002800

08007504 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_RTCEx_SetSSRU_IT+0x16>
 8007516:	2302      	movs	r3, #2
 8007518:	e027      	b.n	800756a <HAL_RTCEx_SetSSRU_IT+0x66>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800752c:	22ca      	movs	r2, #202	; 0xca
 800752e:	625a      	str	r2, [r3, #36]	; 0x24
 8007530:	4b10      	ldr	r3, [pc, #64]	; (8007574 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007532:	2253      	movs	r2, #83	; 0x53
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007536:	4b0f      	ldr	r3, [pc, #60]	; (8007574 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	4a0e      	ldr	r2, [pc, #56]	; (8007574 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007548:	4a0b      	ldr	r2, [pc, #44]	; (8007578 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800754a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800754e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007552:	4b08      	ldr	r3, [pc, #32]	; (8007574 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	40002800 	.word	0x40002800
 8007578:	58000800 	.word	0x58000800

0800757c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007584:	4b09      	ldr	r3, [pc, #36]	; (80075ac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fa ffae 	bl	80024f8 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40002800 	.word	0x40002800

080075b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
	...

080075c4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80075d2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4413      	add	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	4000b100 	.word	0x4000b100

080075f4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80075fe:	4b07      	ldr	r3, [pc, #28]	; (800761c <HAL_RTCEx_BKUPRead+0x28>)
 8007600:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	4000b100 	.word	0x4000b100

08007620 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4313      	orrs	r3, r2
 8007636:	608b      	str	r3, [r1, #8]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	58000400 	.word	0x58000400

08007648 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	4a04      	ldr	r2, [pc, #16]	; (8007664 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800765c:	bf00      	nop
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	58000400 	.word	0x58000400

08007668 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	4a04      	ldr	r2, [pc, #16]	; (8007684 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800767c:	bf00      	nop
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr
 8007684:	58000400 	.word	0x58000400

08007688 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800768e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007692:	619a      	str	r2, [r3, #24]
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr
 800769c:	58000400 	.word	0x58000400

080076a0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d101      	bne.n	80076b4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	58000400 	.word	0x58000400

080076c4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d101      	bne.n	80076d8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e000      	b.n	80076da <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	58000400 	.word	0x58000400

080076e8 <LL_RCC_RF_DisableReset>:
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80076ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007700:	bf00      	nop
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr

08007708 <LL_RCC_IsRFUnderReset>:
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800770c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800771c:	d101      	bne.n	8007722 <LL_RCC_IsRFUnderReset+0x1a>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <LL_RCC_IsRFUnderReset+0x1c>
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr

0800772c <LL_EXTI_EnableIT_32_63>:
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <LL_EXTI_EnableIT_32_63+0x24>)
 8007736:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800773a:	4905      	ldr	r1, [pc, #20]	; (8007750 <LL_EXTI_EnableIT_32_63+0x24>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	58000800 	.word	0x58000800

08007754 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
    return status;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	e04b      	b.n	8007802 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fa fa80 	bl	8001c84 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800778a:	f7ff ffad 	bl	80076e8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800778e:	4b1f      	ldr	r3, [pc, #124]	; (800780c <HAL_SUBGHZ_Init+0xb8>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	0cdb      	lsrs	r3, r3, #19
 800779c:	2264      	movs	r2, #100	; 0x64
 800779e:	fb02 f303 	mul.w	r3, r2, r3
 80077a2:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	609a      	str	r2, [r3, #8]
      break;
 80077b4:	e007      	b.n	80077c6 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80077bc:	f7ff ffa4 	bl	8007708 <LL_RCC_IsRFUnderReset>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1ee      	bne.n	80077a4 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80077c6:	f7ff ff3f 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80077ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80077ce:	f7ff ffad 	bl	800772c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80077d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077d6:	f7ff ff23 	bl	8007620 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80077da:	f7ff ff55 	bl	8007688 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 faad 	bl	8007d48 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	719a      	strb	r2, [r3, #6]

  return status;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000000 	.word	0x20000000

08007810 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	461a      	mov	r2, r3
 800781c:	460b      	mov	r3, r1
 800781e:	817b      	strh	r3, [r7, #10]
 8007820:	4613      	mov	r3, r2
 8007822:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	799b      	ldrb	r3, [r3, #6]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d14a      	bne.n	80078c4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	795b      	ldrb	r3, [r3, #5]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007836:	2302      	movs	r3, #2
 8007838:	e045      	b.n	80078c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2201      	movs	r2, #1
 800783e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2202      	movs	r2, #2
 8007844:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fb4c 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800784c:	f7ff ff0c 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007850:	210d      	movs	r1, #13
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fa98 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007858:	897b      	ldrh	r3, [r7, #10]
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	b29b      	uxth	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fa90 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007868:	897b      	ldrh	r3, [r7, #10]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fa8a 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007874:	2300      	movs	r3, #0
 8007876:	82bb      	strh	r3, [r7, #20]
 8007878:	e00a      	b.n	8007890 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800787a:	8abb      	ldrh	r3, [r7, #20]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	4413      	add	r3, r2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	4619      	mov	r1, r3
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fa7f 	bl	8007d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800788a:	8abb      	ldrh	r3, [r7, #20]
 800788c:	3301      	adds	r3, #1
 800788e:	82bb      	strh	r3, [r7, #20]
 8007890:	8aba      	ldrh	r2, [r7, #20]
 8007892:	893b      	ldrh	r3, [r7, #8]
 8007894:	429a      	cmp	r2, r3
 8007896:	d3f0      	bcc.n	800787a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007898:	f7ff fed6 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 fb45 	bl	8007f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	75fb      	strb	r3, [r7, #23]
 80078ae:	e001      	b.n	80078b4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	715a      	strb	r2, [r3, #5]

    return status;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	e000      	b.n	80078c6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
  }
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b088      	sub	sp, #32
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	461a      	mov	r2, r3
 80078da:	460b      	mov	r3, r1
 80078dc:	817b      	strh	r3, [r7, #10]
 80078de:	4613      	mov	r3, r2
 80078e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	799b      	ldrb	r3, [r3, #6]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d14a      	bne.n	8007986 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	795b      	ldrb	r3, [r3, #5]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e045      	b.n	8007988 <HAL_SUBGHZ_ReadRegisters+0xba>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 faee 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007908:	f7ff feae 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800790c:	211d      	movs	r1, #29
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fa3a 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007914:	897b      	ldrh	r3, [r7, #10]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	b29b      	uxth	r3, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa32 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007924:	897b      	ldrh	r3, [r7, #10]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa2c 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007930:	2100      	movs	r1, #0
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fa28 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007938:	2300      	movs	r3, #0
 800793a:	82fb      	strh	r3, [r7, #22]
 800793c:	e009      	b.n	8007952 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800793e:	69b9      	ldr	r1, [r7, #24]
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fa77 	bl	8007e34 <SUBGHZSPI_Receive>
      pData++;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	3301      	adds	r3, #1
 800794a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800794c:	8afb      	ldrh	r3, [r7, #22]
 800794e:	3301      	adds	r3, #1
 8007950:	82fb      	strh	r3, [r7, #22]
 8007952:	8afa      	ldrh	r2, [r7, #22]
 8007954:	893b      	ldrh	r3, [r7, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d3f1      	bcc.n	800793e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800795a:	f7ff fe75 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fae4 	bl	8007f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e001      	b.n	8007976 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	715a      	strb	r2, [r3, #5]

    return status;
 8007982:	7ffb      	ldrb	r3, [r7, #31]
 8007984:	e000      	b.n	8007988 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007986:	2302      	movs	r3, #2
  }
}
 8007988:	4618      	mov	r0, r3
 800798a:	3720      	adds	r7, #32
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	607a      	str	r2, [r7, #4]
 800799a:	461a      	mov	r2, r3
 800799c:	460b      	mov	r3, r1
 800799e:	72fb      	strb	r3, [r7, #11]
 80079a0:	4613      	mov	r3, r2
 80079a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	799b      	ldrb	r3, [r3, #6]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d14a      	bne.n	8007a44 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e045      	b.n	8007a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fa8f 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	2b84      	cmp	r3, #132	; 0x84
 80079ca:	d002      	beq.n	80079d2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	2b94      	cmp	r3, #148	; 0x94
 80079d0:	d103      	bne.n	80079da <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	711a      	strb	r2, [r3, #4]
 80079d8:	e002      	b.n	80079e0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079e0:	f7ff fe42 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f9cd 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	82bb      	strh	r3, [r7, #20]
 80079f2:	e00a      	b.n	8007a0a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80079f4:	8abb      	ldrh	r3, [r7, #20]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 f9c2 	bl	8007d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a04:	8abb      	ldrh	r3, [r7, #20]
 8007a06:	3301      	adds	r3, #1
 8007a08:	82bb      	strh	r3, [r7, #20]
 8007a0a:	8aba      	ldrh	r2, [r7, #20]
 8007a0c:	893b      	ldrh	r3, [r7, #8]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3f0      	bcc.n	80079f4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a12:	f7ff fe19 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007a16:	7afb      	ldrb	r3, [r7, #11]
 8007a18:	2b84      	cmp	r3, #132	; 0x84
 8007a1a:	d002      	beq.n	8007a22 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fa85 	bl	8007f2c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
 8007a2e:	e001      	b.n	8007a34 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	715a      	strb	r2, [r3, #5]

    return status;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	e000      	b.n	8007a46 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007a44:	2302      	movs	r3, #2
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b088      	sub	sp, #32
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	72fb      	strb	r3, [r7, #11]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	799b      	ldrb	r3, [r3, #6]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d13d      	bne.n	8007aec <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	795b      	ldrb	r3, [r3, #5]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e038      	b.n	8007aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fa2e 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a88:	f7ff fdee 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f979 	bl	8007d88 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a96:	2100      	movs	r1, #0
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f975 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	82fb      	strh	r3, [r7, #22]
 8007aa2:	e009      	b.n	8007ab8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 f9c4 	bl	8007e34 <SUBGHZSPI_Receive>
      pData++;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ab2:	8afb      	ldrh	r3, [r7, #22]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	82fb      	strh	r3, [r7, #22]
 8007ab8:	8afa      	ldrh	r2, [r7, #22]
 8007aba:	893b      	ldrh	r3, [r7, #8]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d3f1      	bcc.n	8007aa4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ac0:	f7ff fdc2 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 fa31 	bl	8007f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	77fb      	strb	r3, [r7, #31]
 8007ad6:	e001      	b.n	8007adc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	715a      	strb	r2, [r3, #5]

    return status;
 8007ae8:	7ffb      	ldrb	r3, [r7, #31]
 8007aea:	e000      	b.n	8007aee <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
  }
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	461a      	mov	r2, r3
 8007b02:	460b      	mov	r3, r1
 8007b04:	72fb      	strb	r3, [r7, #11]
 8007b06:	4613      	mov	r3, r2
 8007b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	799b      	ldrb	r3, [r3, #6]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d13e      	bne.n	8007b92 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	795b      	ldrb	r3, [r3, #5]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e039      	b.n	8007b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f9dc 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b2c:	f7ff fd9c 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007b30:	210e      	movs	r1, #14
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f928 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f923 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	82bb      	strh	r3, [r7, #20]
 8007b46:	e00a      	b.n	8007b5e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b48:	8abb      	ldrh	r3, [r7, #20]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f918 	bl	8007d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b58:	8abb      	ldrh	r3, [r7, #20]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	82bb      	strh	r3, [r7, #20]
 8007b5e:	8aba      	ldrh	r2, [r7, #20]
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d3f0      	bcc.n	8007b48 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b66:	f7ff fd6f 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f9de 	bl	8007f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
 8007b7c:	e001      	b.n	8007b82 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	715a      	strb	r2, [r3, #5]

    return status;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	e000      	b.n	8007b94 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
  }
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	460b      	mov	r3, r1
 8007baa:	72fb      	strb	r3, [r7, #11]
 8007bac:	4613      	mov	r3, r2
 8007bae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	799b      	ldrb	r3, [r3, #6]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d141      	bne.n	8007c42 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	795b      	ldrb	r3, [r3, #5]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e03c      	b.n	8007c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f987 	bl	8007ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bd6:	f7ff fd47 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007bda:	211e      	movs	r1, #30
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 f8d3 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	4619      	mov	r1, r3
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f8ce 	bl	8007d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007bec:	2100      	movs	r1, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 f8ca 	bl	8007d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	82fb      	strh	r3, [r7, #22]
 8007bf8:	e009      	b.n	8007c0e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f919 	bl	8007e34 <SUBGHZSPI_Receive>
      pData++;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	3301      	adds	r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007c08:	8afb      	ldrh	r3, [r7, #22]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	82fb      	strh	r3, [r7, #22]
 8007c0e:	8afa      	ldrh	r2, [r7, #22]
 8007c10:	893b      	ldrh	r3, [r7, #8]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d3f1      	bcc.n	8007bfa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c16:	f7ff fd17 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f986 	bl	8007f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e001      	b.n	8007c32 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2201      	movs	r2, #1
 8007c36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	715a      	strb	r2, [r3, #5]

    return status;
 8007c3e:	7ffb      	ldrb	r3, [r7, #31]
 8007c40:	e000      	b.n	8007c44 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007c42:	2302      	movs	r3, #2
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007c54:	2300      	movs	r3, #0
 8007c56:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007c58:	f107 020c 	add.w	r2, r7, #12
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	2112      	movs	r1, #18
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fef4 	bl	8007a4e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007c66:	7b3b      	ldrb	r3, [r7, #12]
 8007c68:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b21a      	sxth	r2, r3
 8007c70:	7b7b      	ldrb	r3, [r7, #13]
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	4313      	orrs	r3, r2
 8007c76:	b21b      	sxth	r3, r3
 8007c78:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c7a:	89fb      	ldrh	r3, [r7, #14]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f011 fb81 	bl	801938c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007c8a:	89fb      	ldrh	r3, [r7, #14]
 8007c8c:	085b      	lsrs	r3, r3, #1
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f011 fb86 	bl	80193a8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007c9c:	89fb      	ldrh	r3, [r7, #14]
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f011 fbd5 	bl	8019458 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007cae:	89fb      	ldrh	r3, [r7, #14]
 8007cb0:	08db      	lsrs	r3, r3, #3
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f011 fbda 	bl	8019474 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007cc0:	89fb      	ldrh	r3, [r7, #14]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f011 fbdf 	bl	8019490 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007cd2:	89fb      	ldrh	r3, [r7, #14]
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f011 fbac 	bl	801943c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007ce4:	89fb      	ldrh	r3, [r7, #14]
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f011 fb67 	bl	80193c4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007cf6:	89fb      	ldrh	r3, [r7, #14]
 8007cf8:	09db      	lsrs	r3, r3, #7
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00e      	beq.n	8007d20 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007d0e:	2101      	movs	r1, #1
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f011 fb65 	bl	80193e0 <HAL_SUBGHZ_CADStatusCallback>
 8007d16:	e003      	b.n	8007d20 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f011 fb60 	bl	80193e0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	0a5b      	lsrs	r3, r3, #9
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f011 fb75 	bl	801941c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007d32:	f107 020c 	add.w	r2, r7, #12
 8007d36:	2302      	movs	r3, #2
 8007d38:	2102      	movs	r1, #2
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7ff fe28 	bl	8007990 <HAL_SUBGHZ_ExecSetCmd>
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007d5c:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007d64:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d66:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d68:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007d6c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <SUBGHZSPI_Init+0x3c>)
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	6013      	str	r3, [r2, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr
 8007d84:	58010000 	.word	0x58010000

08007d88 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d98:	4b23      	ldr	r3, [pc, #140]	; (8007e28 <SUBGHZSPI_Transmit+0xa0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	0cdb      	lsrs	r3, r3, #19
 8007da6:	2264      	movs	r2, #100	; 0x64
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d105      	bne.n	8007dc0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	609a      	str	r2, [r3, #8]
      break;
 8007dbe:	e008      	b.n	8007dd2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <SUBGHZSPI_Transmit+0xa4>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d1ed      	bne.n	8007dae <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007dd2:	4b17      	ldr	r3, [pc, #92]	; (8007e30 <SUBGHZSPI_Transmit+0xa8>)
 8007dd4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	78fa      	ldrb	r2, [r7, #3]
 8007dda:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ddc:	4b12      	ldr	r3, [pc, #72]	; (8007e28 <SUBGHZSPI_Transmit+0xa0>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	0cdb      	lsrs	r3, r3, #19
 8007dea:	2264      	movs	r2, #100	; 0x64
 8007dec:	fb02 f303 	mul.w	r3, r2, r3
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	609a      	str	r2, [r3, #8]
      break;
 8007e02:	e008      	b.n	8007e16 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e0a:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <SUBGHZSPI_Transmit+0xa4>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d1ed      	bne.n	8007df2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <SUBGHZSPI_Transmit+0xa4>)
 8007e18:	68db      	ldr	r3, [r3, #12]

  return status;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000000 	.word	0x20000000
 8007e2c:	58010000 	.word	0x58010000
 8007e30:	5801000c 	.word	0x5801000c

08007e34 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e42:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <SUBGHZSPI_Receive+0xa4>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	1a9b      	subs	r3, r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	0cdb      	lsrs	r3, r3, #19
 8007e50:	2264      	movs	r2, #100	; 0x64
 8007e52:	fb02 f303 	mul.w	r3, r2, r3
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d105      	bne.n	8007e6a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	609a      	str	r2, [r3, #8]
      break;
 8007e68:	e008      	b.n	8007e7c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <SUBGHZSPI_Receive+0xa8>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d1ed      	bne.n	8007e58 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e7c:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <SUBGHZSPI_Receive+0xac>)
 8007e7e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	22ff      	movs	r2, #255	; 0xff
 8007e84:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <SUBGHZSPI_Receive+0xa4>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	0cdb      	lsrs	r3, r3, #19
 8007e94:	2264      	movs	r2, #100	; 0x64
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	609a      	str	r2, [r3, #8]
      break;
 8007eac:	e008      	b.n	8007ec0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007eb4:	4b09      	ldr	r3, [pc, #36]	; (8007edc <SUBGHZSPI_Receive+0xa8>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d1ed      	bne.n	8007e9c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <SUBGHZSPI_Receive+0xa8>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	701a      	strb	r2, [r3, #0]

  return status;
 8007eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20000000 	.word	0x20000000
 8007edc:	58010000 	.word	0x58010000
 8007ee0:	5801000c 	.word	0x5801000c

08007ee4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d111      	bne.n	8007f18 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007ef4:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <SUBGHZ_CheckDeviceReady+0x44>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	4413      	add	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007f04:	f7ff fbb0 	bl	8007668 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1f9      	bne.n	8007f08 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f14:	f7ff fb98 	bl	8007648 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f807 	bl	8007f2c <SUBGHZ_WaitOnBusy>
 8007f1e:	4603      	mov	r3, r0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000000 	.word	0x20000000

08007f2c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <SUBGHZ_WaitOnBusy+0x58>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	4413      	add	r3, r2
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	0d1b      	lsrs	r3, r3, #20
 8007f46:	2264      	movs	r2, #100	; 0x64
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007f4e:	f7ff fbb9 	bl	80076c4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007f52:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e009      	b.n	8007f7a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007f6c:	f7ff fb98 	bl	80076a0 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007f70:	4602      	mov	r2, r0
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	4013      	ands	r3, r2
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d0e9      	beq.n	8007f4e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20000000 	.word	0x20000000

08007f88 <LL_RCC_GetUSARTClockSource>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	401a      	ands	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	4313      	orrs	r3, r2
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bc80      	pop	{r7}
 8007faa:	4770      	bx	lr

08007fac <LL_RCC_GetLPUARTClockSource>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4013      	ands	r3, r2
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e042      	b.n	8008062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fa fbda 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2224      	movs	r2, #36	; 0x24
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc4b 	bl	80088a8 <UART_SetConfig>
 8008012:	4603      	mov	r3, r0
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e022      	b.n	8008062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fe8f 	bl	8008d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0201 	orr.w	r2, r2, #1
 8008058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 ff15 	bl	8008e8a <UART_CheckIdleState>
 8008060:	4603      	mov	r3, r0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008080:	2b20      	cmp	r3, #32
 8008082:	d142      	bne.n	800810a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <HAL_UART_Receive_IT+0x24>
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e03b      	b.n	800810c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_UART_Receive_IT+0x36>
 800809e:	2302      	movs	r3, #2
 80080a0:	e034      	b.n	800810c <HAL_UART_Receive_IT+0xa0>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a17      	ldr	r2, [pc, #92]	; (8008114 <HAL_UART_Receive_IT+0xa8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01f      	beq.n	80080fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d018      	beq.n	80080fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	613b      	str	r3, [r7, #16]
   return(result);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	623b      	str	r3, [r7, #32]
 80080e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	69f9      	ldr	r1, [r7, #28]
 80080ec:	6a3a      	ldr	r2, [r7, #32]
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	461a      	mov	r2, r3
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 ffd5 	bl	80090b0 <UART_Start_Receive_IT>
 8008106:	4603      	mov	r3, r0
 8008108:	e000      	b.n	800810c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800810a:	2302      	movs	r3, #2
  }
}
 800810c:	4618      	mov	r0, r3
 800810e:	3728      	adds	r7, #40	; 0x28
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40008000 	.word	0x40008000

08008118 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	; 0x28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812c:	2b20      	cmp	r3, #32
 800812e:	d17a      	bne.n	8008226 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_UART_Transmit_DMA+0x24>
 8008136:	88fb      	ldrh	r3, [r7, #6]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e073      	b.n	8008228 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_UART_Transmit_DMA+0x36>
 800814a:	2302      	movs	r3, #2
 800814c:	e06c      	b.n	8008228 <HAL_UART_Transmit_DMA+0x110>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2221      	movs	r2, #33	; 0x21
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008180:	2b00      	cmp	r3, #0
 8008182:	d02c      	beq.n	80081de <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008188:	4a29      	ldr	r2, [pc, #164]	; (8008230 <HAL_UART_Transmit_DMA+0x118>)
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008190:	4a28      	ldr	r2, [pc, #160]	; (8008234 <HAL_UART_Transmit_DMA+0x11c>)
 8008192:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008198:	4a27      	ldr	r2, [pc, #156]	; (8008238 <HAL_UART_Transmit_DMA+0x120>)
 800819a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081a0:	2200      	movs	r2, #0
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ac:	4619      	mov	r1, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3328      	adds	r3, #40	; 0x28
 80081b4:	461a      	mov	r2, r3
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	f7fc f95e 	bl	8004478 <HAL_DMA_Start_IT>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2210      	movs	r2, #16
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e024      	b.n	8008228 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2240      	movs	r2, #64	; 0x40
 80081e4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	613b      	str	r3, [r7, #16]
   return(result);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	623a      	str	r2, [r7, #32]
 8008210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	69f9      	ldr	r1, [r7, #28]
 8008214:	6a3a      	ldr	r2, [r7, #32]
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	61bb      	str	r3, [r7, #24]
   return(result);
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e5      	bne.n	80081ee <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	e000      	b.n	8008228 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008226:	2302      	movs	r3, #2
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	080093ff 	.word	0x080093ff
 8008234:	08009499 	.word	0x08009499
 8008238:	080094b5 	.word	0x080094b5

0800823c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b0ba      	sub	sp, #232	; 0xe8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008266:	f640 030f 	movw	r3, #2063	; 0x80f
 800826a:	4013      	ands	r3, r2
 800826c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11b      	bne.n	80082b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d015      	beq.n	80082b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d009      	beq.n	80082b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 82d6 	beq.w	8008852 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
      }
      return;
 80082ae:	e2d0      	b.n	8008852 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 811f 	beq.w	80084f8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082be:	4b8b      	ldr	r3, [pc, #556]	; (80084ec <HAL_UART_IRQHandler+0x2b0>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082ca:	4b89      	ldr	r3, [pc, #548]	; (80084f0 <HAL_UART_IRQHandler+0x2b4>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8112 	beq.w	80084f8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d011      	beq.n	8008304 <HAL_UART_IRQHandler+0xc8>
 80082e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2201      	movs	r2, #1
 80082f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fa:	f043 0201 	orr.w	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d011      	beq.n	8008334 <HAL_UART_IRQHandler+0xf8>
 8008310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2202      	movs	r2, #2
 8008322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832a:	f043 0204 	orr.w	r2, r3, #4
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d011      	beq.n	8008364 <HAL_UART_IRQHandler+0x128>
 8008340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2204      	movs	r2, #4
 8008352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835a:	f043 0202 	orr.w	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008368:	f003 0308 	and.w	r3, r3, #8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d017      	beq.n	80083a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008374:	f003 0320 	and.w	r3, r3, #32
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800837c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008380:	4b5a      	ldr	r3, [pc, #360]	; (80084ec <HAL_UART_IRQHandler+0x2b0>)
 8008382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2208      	movs	r2, #8
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	f043 0208 	orr.w	r2, r3, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d012      	beq.n	80083d2 <HAL_UART_IRQHandler+0x196>
 80083ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00c      	beq.n	80083d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c8:	f043 0220 	orr.w	r2, r3, #32
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 823c 	beq.w	8008856 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d013      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800842e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d04f      	beq.n	80084d6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 ff7c 	bl	8009334 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d141      	bne.n	80084ce <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800847a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800848e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1d9      	bne.n	800844a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800849a:	2b00      	cmp	r3, #0
 800849c:	d013      	beq.n	80084c6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084a2:	4a14      	ldr	r2, [pc, #80]	; (80084f4 <HAL_UART_IRQHandler+0x2b8>)
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fc f8c0 	bl	8004630 <HAL_DMA_Abort_IT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d017      	beq.n	80084e6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	e00f      	b.n	80084e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9d9 	bl	800887e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084cc:	e00b      	b.n	80084e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9d5 	bl	800887e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e007      	b.n	80084e6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9d1 	bl	800887e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80084e4:	e1b7      	b.n	8008856 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	bf00      	nop
    return;
 80084e8:	e1b5      	b.n	8008856 <HAL_UART_IRQHandler+0x61a>
 80084ea:	bf00      	nop
 80084ec:	10000001 	.word	0x10000001
 80084f0:	04000120 	.word	0x04000120
 80084f4:	08009535 	.word	0x08009535

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	f040 814a 	bne.w	8008796 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8143 	beq.w	8008796 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 813c 	beq.w	8008796 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2210      	movs	r2, #16
 8008524:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	f040 80b5 	bne.w	80086a0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008542:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8187 	beq.w	800885a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008556:	429a      	cmp	r2, r3
 8008558:	f080 817f 	bcs.w	800885a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 8086 	bne.w	8008684 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800858c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1da      	bne.n	8008578 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e1      	bne.n	80085c2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800860e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008666:	65bb      	str	r3, [r7, #88]	; 0x58
 8008668:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800866c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e4      	bne.n	8008644 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867e:	4618      	mov	r0, r3
 8008680:	f7fb ff78 	bl	8004574 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008690:	b29b      	uxth	r3, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	b29b      	uxth	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8f9 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800869e:	e0dc      	b.n	800885a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80ce 	beq.w	800885e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80086c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 80c9 	beq.w	800885e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086ee:	647b      	str	r3, [r7, #68]	; 0x44
 80086f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e4      	bne.n	80086cc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	623b      	str	r3, [r7, #32]
   return(result);
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3308      	adds	r3, #8
 8008726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800872a:	633a      	str	r2, [r7, #48]	; 0x30
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e1      	bne.n	8008702 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	617b      	str	r3, [r7, #20]
   return(result);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e4      	bne.n	8008752 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f87e 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008794:	e063      	b.n	800885e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800879a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00e      	beq.n	80087c0 <HAL_UART_IRQHandler+0x584>
 80087a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d008      	beq.n	80087c0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 fb59 	bl	8009e70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087be:	e051      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80087c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d014      	beq.n	80087f6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80087cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d105      	bne.n	80087e4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d03a      	beq.n	8008862 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
    }
    return;
 80087f4:	e035      	b.n	8008862 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <HAL_UART_IRQHandler+0x5da>
 8008802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fea6 	bl	8009560 <UART_EndTransmit_IT>
    return;
 8008814:	e026      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <HAL_UART_IRQHandler+0x5fa>
 8008822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fb30 	bl	8009e94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008834:	e016      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d010      	beq.n	8008864 <HAL_UART_IRQHandler+0x628>
 8008842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008846:	2b00      	cmp	r3, #0
 8008848:	da0c      	bge.n	8008864 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fb19 	bl	8009e82 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008850:	e008      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
      return;
 8008852:	bf00      	nop
 8008854:	e006      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
    return;
 8008856:	bf00      	nop
 8008858:	e004      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
      return;
 800885a:	bf00      	nop
 800885c:	e002      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
      return;
 800885e:	bf00      	nop
 8008860:	e000      	b.n	8008864 <HAL_UART_IRQHandler+0x628>
    return;
 8008862:	bf00      	nop
  }
}
 8008864:	37e8      	adds	r7, #232	; 0xe8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr

0800887e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr
	...

080088a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a8:	b5b0      	push	{r4, r5, r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4bab      	ldr	r3, [pc, #684]	; (8008b80 <UART_SetConfig+0x2d8>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	69f9      	ldr	r1, [r7, #28]
 80088dc:	430b      	orrs	r3, r1
 80088de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4aa0      	ldr	r2, [pc, #640]	; (8008b84 <UART_SetConfig+0x2dc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	4313      	orrs	r3, r2
 800890e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800891a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	69f9      	ldr	r1, [r7, #28]
 8008924:	430b      	orrs	r3, r1
 8008926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	f023 010f 	bic.w	r1, r3, #15
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a91      	ldr	r2, [pc, #580]	; (8008b88 <UART_SetConfig+0x2e0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d122      	bne.n	800898e <UART_SetConfig+0xe6>
 8008948:	2003      	movs	r0, #3
 800894a:	f7ff fb1d 	bl	8007f88 <LL_RCC_GetUSARTClockSource>
 800894e:	4603      	mov	r3, r0
 8008950:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008954:	2b03      	cmp	r3, #3
 8008956:	d817      	bhi.n	8008988 <UART_SetConfig+0xe0>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <UART_SetConfig+0xb8>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008971 	.word	0x08008971
 8008964:	0800897d 	.word	0x0800897d
 8008968:	08008977 	.word	0x08008977
 800896c:	08008983 	.word	0x08008983
 8008970:	2301      	movs	r3, #1
 8008972:	76fb      	strb	r3, [r7, #27]
 8008974:	e072      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008976:	2302      	movs	r3, #2
 8008978:	76fb      	strb	r3, [r7, #27]
 800897a:	e06f      	b.n	8008a5c <UART_SetConfig+0x1b4>
 800897c:	2304      	movs	r3, #4
 800897e:	76fb      	strb	r3, [r7, #27]
 8008980:	e06c      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008982:	2308      	movs	r3, #8
 8008984:	76fb      	strb	r3, [r7, #27]
 8008986:	e069      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008988:	2310      	movs	r3, #16
 800898a:	76fb      	strb	r3, [r7, #27]
 800898c:	e066      	b.n	8008a5c <UART_SetConfig+0x1b4>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a7e      	ldr	r2, [pc, #504]	; (8008b8c <UART_SetConfig+0x2e4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d134      	bne.n	8008a02 <UART_SetConfig+0x15a>
 8008998:	200c      	movs	r0, #12
 800899a:	f7ff faf5 	bl	8007f88 <LL_RCC_GetUSARTClockSource>
 800899e:	4603      	mov	r3, r0
 80089a0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80089a4:	2b0c      	cmp	r3, #12
 80089a6:	d829      	bhi.n	80089fc <UART_SetConfig+0x154>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <UART_SetConfig+0x108>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089e5 	.word	0x080089e5
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	080089fd 	.word	0x080089fd
 80089c0:	080089f1 	.word	0x080089f1
 80089c4:	080089fd 	.word	0x080089fd
 80089c8:	080089fd 	.word	0x080089fd
 80089cc:	080089fd 	.word	0x080089fd
 80089d0:	080089eb 	.word	0x080089eb
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	080089fd 	.word	0x080089fd
 80089dc:	080089fd 	.word	0x080089fd
 80089e0:	080089f7 	.word	0x080089f7
 80089e4:	2300      	movs	r3, #0
 80089e6:	76fb      	strb	r3, [r7, #27]
 80089e8:	e038      	b.n	8008a5c <UART_SetConfig+0x1b4>
 80089ea:	2302      	movs	r3, #2
 80089ec:	76fb      	strb	r3, [r7, #27]
 80089ee:	e035      	b.n	8008a5c <UART_SetConfig+0x1b4>
 80089f0:	2304      	movs	r3, #4
 80089f2:	76fb      	strb	r3, [r7, #27]
 80089f4:	e032      	b.n	8008a5c <UART_SetConfig+0x1b4>
 80089f6:	2308      	movs	r3, #8
 80089f8:	76fb      	strb	r3, [r7, #27]
 80089fa:	e02f      	b.n	8008a5c <UART_SetConfig+0x1b4>
 80089fc:	2310      	movs	r3, #16
 80089fe:	76fb      	strb	r3, [r7, #27]
 8008a00:	e02c      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a5f      	ldr	r2, [pc, #380]	; (8008b84 <UART_SetConfig+0x2dc>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d125      	bne.n	8008a58 <UART_SetConfig+0x1b0>
 8008a0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008a10:	f7ff facc 	bl	8007fac <LL_RCC_GetLPUARTClockSource>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a1a:	d017      	beq.n	8008a4c <UART_SetConfig+0x1a4>
 8008a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a20:	d817      	bhi.n	8008a52 <UART_SetConfig+0x1aa>
 8008a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a26:	d00b      	beq.n	8008a40 <UART_SetConfig+0x198>
 8008a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2c:	d811      	bhi.n	8008a52 <UART_SetConfig+0x1aa>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <UART_SetConfig+0x192>
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a36:	d006      	beq.n	8008a46 <UART_SetConfig+0x19e>
 8008a38:	e00b      	b.n	8008a52 <UART_SetConfig+0x1aa>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	76fb      	strb	r3, [r7, #27]
 8008a3e:	e00d      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a40:	2302      	movs	r3, #2
 8008a42:	76fb      	strb	r3, [r7, #27]
 8008a44:	e00a      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a46:	2304      	movs	r3, #4
 8008a48:	76fb      	strb	r3, [r7, #27]
 8008a4a:	e007      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	76fb      	strb	r3, [r7, #27]
 8008a50:	e004      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a52:	2310      	movs	r3, #16
 8008a54:	76fb      	strb	r3, [r7, #27]
 8008a56:	e001      	b.n	8008a5c <UART_SetConfig+0x1b4>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a48      	ldr	r2, [pc, #288]	; (8008b84 <UART_SetConfig+0x2dc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	f040 8098 	bne.w	8008b98 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a68:	7efb      	ldrb	r3, [r7, #27]
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d823      	bhi.n	8008ab6 <UART_SetConfig+0x20e>
 8008a6e:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <UART_SetConfig+0x1cc>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008ab7 	.word	0x08008ab7
 8008a7c:	08008aa1 	.word	0x08008aa1
 8008a80:	08008ab7 	.word	0x08008ab7
 8008a84:	08008aa7 	.word	0x08008aa7
 8008a88:	08008ab7 	.word	0x08008ab7
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008ab7 	.word	0x08008ab7
 8008a94:	08008aaf 	.word	0x08008aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a98:	f7fd ff56 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 8008a9c:	6178      	str	r0, [r7, #20]
        break;
 8008a9e:	e00f      	b.n	8008ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aa0:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <UART_SetConfig+0x2e8>)
 8008aa2:	617b      	str	r3, [r7, #20]
        break;
 8008aa4:	e00c      	b.n	8008ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aa6:	f7fd fe9b 	bl	80067e0 <HAL_RCC_GetSysClockFreq>
 8008aaa:	6178      	str	r0, [r7, #20]
        break;
 8008aac:	e008      	b.n	8008ac0 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab2:	617b      	str	r3, [r7, #20]
        break;
 8008ab4:	e004      	b.n	8008ac0 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	76bb      	strb	r3, [r7, #26]
        break;
 8008abe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 8128 	beq.w	8008d18 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	4a31      	ldr	r2, [pc, #196]	; (8008b94 <UART_SetConfig+0x2ec>)
 8008ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ada:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	4413      	add	r3, r2
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d305      	bcc.n	8008af8 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d902      	bls.n	8008afe <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	76bb      	strb	r3, [r7, #26]
 8008afc:	e10c      	b.n	8008d18 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f04f 0100 	mov.w	r1, #0
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	4a22      	ldr	r2, [pc, #136]	; (8008b94 <UART_SetConfig+0x2ec>)
 8008b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	f7f8 f821 	bl	8000b5c <__aeabi_uldivmod>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4610      	mov	r0, r2
 8008b20:	4619      	mov	r1, r3
 8008b22:	f04f 0200 	mov.w	r2, #0
 8008b26:	f04f 0300 	mov.w	r3, #0
 8008b2a:	020b      	lsls	r3, r1, #8
 8008b2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b30:	0202      	lsls	r2, r0, #8
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	6849      	ldr	r1, [r1, #4]
 8008b36:	0849      	lsrs	r1, r1, #1
 8008b38:	4608      	mov	r0, r1
 8008b3a:	f04f 0100 	mov.w	r1, #0
 8008b3e:	1814      	adds	r4, r2, r0
 8008b40:	eb43 0501 	adc.w	r5, r3, r1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f8 f803 	bl	8000b5c <__aeabi_uldivmod>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b64:	d308      	bcc.n	8008b78 <UART_SetConfig+0x2d0>
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b6c:	d204      	bcs.n	8008b78 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	60da      	str	r2, [r3, #12]
 8008b76:	e0cf      	b.n	8008d18 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	76bb      	strb	r3, [r7, #26]
 8008b7c:	e0cc      	b.n	8008d18 <UART_SetConfig+0x470>
 8008b7e:	bf00      	nop
 8008b80:	cfff69f3 	.word	0xcfff69f3
 8008b84:	40008000 	.word	0x40008000
 8008b88:	40013800 	.word	0x40013800
 8008b8c:	40004400 	.word	0x40004400
 8008b90:	00f42400 	.word	0x00f42400
 8008b94:	0801b6e4 	.word	0x0801b6e4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba0:	d165      	bne.n	8008c6e <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008ba2:	7efb      	ldrb	r3, [r7, #27]
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d828      	bhi.n	8008bfa <UART_SetConfig+0x352>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <UART_SetConfig+0x308>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bd5 	.word	0x08008bd5
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	08008bfb 	.word	0x08008bfb
 8008bc0:	08008beb 	.word	0x08008beb
 8008bc4:	08008bfb 	.word	0x08008bfb
 8008bc8:	08008bfb 	.word	0x08008bfb
 8008bcc:	08008bfb 	.word	0x08008bfb
 8008bd0:	08008bf3 	.word	0x08008bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd4:	f7fd feb8 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 8008bd8:	6178      	str	r0, [r7, #20]
        break;
 8008bda:	e013      	b.n	8008c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bdc:	f7fd fec6 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8008be0:	6178      	str	r0, [r7, #20]
        break;
 8008be2:	e00f      	b.n	8008c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008be4:	4b56      	ldr	r3, [pc, #344]	; (8008d40 <UART_SetConfig+0x498>)
 8008be6:	617b      	str	r3, [r7, #20]
        break;
 8008be8:	e00c      	b.n	8008c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bea:	f7fd fdf9 	bl	80067e0 <HAL_RCC_GetSysClockFreq>
 8008bee:	6178      	str	r0, [r7, #20]
        break;
 8008bf0:	e008      	b.n	8008c04 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf6:	617b      	str	r3, [r7, #20]
        break;
 8008bf8:	e004      	b.n	8008c04 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	76bb      	strb	r3, [r7, #26]
        break;
 8008c02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 8086 	beq.w	8008d18 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	4a4c      	ldr	r2, [pc, #304]	; (8008d44 <UART_SetConfig+0x49c>)
 8008c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c16:	461a      	mov	r2, r3
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c1e:	005a      	lsls	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	085b      	lsrs	r3, r3, #1
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2b0f      	cmp	r3, #15
 8008c38:	d916      	bls.n	8008c68 <UART_SetConfig+0x3c0>
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c40:	d212      	bcs.n	8008c68 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f023 030f 	bic.w	r3, r3, #15
 8008c4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	085b      	lsrs	r3, r3, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	89fb      	ldrh	r3, [r7, #14]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	89fa      	ldrh	r2, [r7, #14]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	e057      	b.n	8008d18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	76bb      	strb	r3, [r7, #26]
 8008c6c:	e054      	b.n	8008d18 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c6e:	7efb      	ldrb	r3, [r7, #27]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d828      	bhi.n	8008cc6 <UART_SetConfig+0x41e>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <UART_SetConfig+0x3d4>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ca1 	.word	0x08008ca1
 8008c80:	08008ca9 	.word	0x08008ca9
 8008c84:	08008cb1 	.word	0x08008cb1
 8008c88:	08008cc7 	.word	0x08008cc7
 8008c8c:	08008cb7 	.word	0x08008cb7
 8008c90:	08008cc7 	.word	0x08008cc7
 8008c94:	08008cc7 	.word	0x08008cc7
 8008c98:	08008cc7 	.word	0x08008cc7
 8008c9c:	08008cbf 	.word	0x08008cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca0:	f7fd fe52 	bl	8006948 <HAL_RCC_GetPCLK1Freq>
 8008ca4:	6178      	str	r0, [r7, #20]
        break;
 8008ca6:	e013      	b.n	8008cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca8:	f7fd fe60 	bl	800696c <HAL_RCC_GetPCLK2Freq>
 8008cac:	6178      	str	r0, [r7, #20]
        break;
 8008cae:	e00f      	b.n	8008cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cb0:	4b23      	ldr	r3, [pc, #140]	; (8008d40 <UART_SetConfig+0x498>)
 8008cb2:	617b      	str	r3, [r7, #20]
        break;
 8008cb4:	e00c      	b.n	8008cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb6:	f7fd fd93 	bl	80067e0 <HAL_RCC_GetSysClockFreq>
 8008cba:	6178      	str	r0, [r7, #20]
        break;
 8008cbc:	e008      	b.n	8008cd0 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cc2:	617b      	str	r3, [r7, #20]
        break;
 8008cc4:	e004      	b.n	8008cd0 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8008cce:	bf00      	nop
    }

    if (pclk != 0U)
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d020      	beq.n	8008d18 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	4a1a      	ldr	r2, [pc, #104]	; (8008d44 <UART_SetConfig+0x49c>)
 8008cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	441a      	add	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b0f      	cmp	r3, #15
 8008d00:	d908      	bls.n	8008d14 <UART_SetConfig+0x46c>
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d08:	d204      	bcs.n	8008d14 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	60da      	str	r2, [r3, #12]
 8008d12:	e001      	b.n	8008d18 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d34:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	00f42400 	.word	0x00f42400
 8008d44:	0801b6e4 	.word	0x0801b6e4

08008d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ddc:	f003 0310 	and.w	r3, r3, #16
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00a      	beq.n	8008dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00a      	beq.n	8008e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d01a      	beq.n	8008e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e46:	d10a      	bne.n	8008e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	605a      	str	r2, [r3, #4]
  }
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc80      	pop	{r7}
 8008e88:	4770      	bx	lr

08008e8a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af02      	add	r7, sp, #8
 8008e90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e9a:	f7f9 f895 	bl	8001fc8 <HAL_GetTick>
 8008e9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d10e      	bne.n	8008ecc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f82f 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e025      	b.n	8008f18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d10e      	bne.n	8008ef8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f819 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e00f      	b.n	8008f18 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b09c      	sub	sp, #112	; 0x70
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f30:	e0a9      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	f000 80a5 	beq.w	8009086 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3c:	f7f9 f844 	bl	8001fc8 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d140      	bne.n	8008fd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f66:	667b      	str	r3, [r7, #100]	; 0x64
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e6      	bne.n	8008f52 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3308      	adds	r3, #8
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f96:	f023 0301 	bic.w	r3, r3, #1
 8008f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fa4:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fa6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e5      	bne.n	8008f84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e069      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d051      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff0:	d149      	bne.n	8009086 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ffa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009010:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
 800901c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e6      	bne.n	8008ffc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	613b      	str	r3, [r7, #16]
   return(result);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f023 0301 	bic.w	r3, r3, #1
 8009044:	66bb      	str	r3, [r7, #104]	; 0x68
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800904e:	623a      	str	r2, [r7, #32]
 8009050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	69f9      	ldr	r1, [r7, #28]
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	61bb      	str	r3, [r7, #24]
   return(result);
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e5      	bne.n	800902e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e010      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	69da      	ldr	r2, [r3, #28]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4013      	ands	r3, r2
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	429a      	cmp	r2, r3
 8009094:	bf0c      	ite	eq
 8009096:	2301      	moveq	r3, #1
 8009098:	2300      	movne	r3, #0
 800909a:	b2db      	uxtb	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	f43f af46 	beq.w	8008f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3770      	adds	r7, #112	; 0x70
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b09d      	sub	sp, #116	; 0x74
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	88fa      	ldrh	r2, [r7, #6]
 80090c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e2:	d10e      	bne.n	8009102 <UART_Start_Receive_IT+0x52>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d105      	bne.n	80090f8 <UART_Start_Receive_IT+0x48>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80090f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80090f6:	e02d      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	22ff      	movs	r2, #255	; 0xff
 80090fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009100:	e028      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10d      	bne.n	8009126 <UART_Start_Receive_IT+0x76>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <UART_Start_Receive_IT+0x6c>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800911a:	e01b      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	227f      	movs	r2, #127	; 0x7f
 8009120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009124:	e016      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800912e:	d10d      	bne.n	800914c <UART_Start_Receive_IT+0x9c>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <UART_Start_Receive_IT+0x92>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	227f      	movs	r2, #127	; 0x7f
 800913c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009140:	e008      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	223f      	movs	r2, #63	; 0x3f
 8009146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800914a:	e003      	b.n	8009154 <UART_Start_Receive_IT+0xa4>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2222      	movs	r2, #34	; 0x22
 8009160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3308      	adds	r3, #8
 800916a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3308      	adds	r3, #8
 8009182:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009184:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009186:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800918a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800918c:	e841 2300 	strex	r3, r2, [r1]
 8009190:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1e5      	bne.n	8009164 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800919c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a0:	d14d      	bne.n	800923e <UART_Start_Receive_IT+0x18e>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091a8:	88fa      	ldrh	r2, [r7, #6]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d347      	bcc.n	800923e <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b6:	d107      	bne.n	80091c8 <UART_Start_Receive_IT+0x118>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4a38      	ldr	r2, [pc, #224]	; (80092a4 <UART_Start_Receive_IT+0x1f4>)
 80091c4:	671a      	str	r2, [r3, #112]	; 0x70
 80091c6:	e002      	b.n	80091ce <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4a37      	ldr	r2, [pc, #220]	; (80092a8 <UART_Start_Receive_IT+0x1f8>)
 80091cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800921e:	667b      	str	r3, [r7, #100]	; 0x64
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009228:	637a      	str	r2, [r7, #52]	; 0x34
 800922a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800922e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e5      	bne.n	8009208 <UART_Start_Receive_IT+0x158>
 800923c:	e02c      	b.n	8009298 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009246:	d107      	bne.n	8009258 <UART_Start_Receive_IT+0x1a8>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a16      	ldr	r2, [pc, #88]	; (80092ac <UART_Start_Receive_IT+0x1fc>)
 8009254:	671a      	str	r2, [r3, #112]	; 0x70
 8009256:	e002      	b.n	800925e <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a15      	ldr	r2, [pc, #84]	; (80092b0 <UART_Start_Receive_IT+0x200>)
 800925c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	613b      	str	r3, [r7, #16]
   return(result);
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800927a:	663b      	str	r3, [r7, #96]	; 0x60
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009284:	623b      	str	r3, [r7, #32]
 8009286:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	69f9      	ldr	r1, [r7, #28]
 800928a:	6a3a      	ldr	r2, [r7, #32]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	61bb      	str	r3, [r7, #24]
   return(result);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3774      	adds	r7, #116	; 0x74
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr
 80092a4:	08009b71 	.word	0x08009b71
 80092a8:	08009879 	.word	0x08009879
 80092ac:	08009717 	.word	0x08009717
 80092b0:	080095b7 	.word	0x080095b7

080092b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b08f      	sub	sp, #60	; 0x3c
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092dc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009304:	633b      	str	r3, [r7, #48]	; 0x30
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930e:	61ba      	str	r2, [r7, #24]
 8009310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6979      	ldr	r1, [r7, #20]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	613b      	str	r3, [r7, #16]
   return(result);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e5      	bne.n	80092ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800932a:	bf00      	nop
 800932c:	373c      	adds	r7, #60	; 0x3c
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b095      	sub	sp, #84	; 0x54
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	643b      	str	r3, [r7, #64]	; 0x40
 800935c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e6      	bne.n	800933c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3308      	adds	r3, #8
 8009374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	61fb      	str	r3, [r7, #28]
   return(result);
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009384:	f023 0301 	bic.w	r3, r3, #1
 8009388:	64bb      	str	r3, [r7, #72]	; 0x48
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e3      	bne.n	800936e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d118      	bne.n	80093e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f023 0310 	bic.w	r3, r3, #16
 80093c2:	647b      	str	r3, [r7, #68]	; 0x44
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6979      	ldr	r1, [r7, #20]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	613b      	str	r3, [r7, #16]
   return(result);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80093f4:	bf00      	nop
 80093f6:	3754      	adds	r7, #84	; 0x54
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr

080093fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b090      	sub	sp, #64	; 0x40
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d137      	bne.n	800948a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800941a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941c:	2200      	movs	r2, #0
 800941e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3308      	adds	r3, #8
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	623b      	str	r3, [r7, #32]
   return(result);
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009438:	63bb      	str	r3, [r7, #56]	; 0x38
 800943a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3308      	adds	r3, #8
 8009440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009442:	633a      	str	r2, [r7, #48]	; 0x30
 8009444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e5      	bne.n	8009422 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	e853 3f00 	ldrex	r3, [r3]
 8009462:	60fb      	str	r3, [r7, #12]
   return(result);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
 800946c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	61fb      	str	r3, [r7, #28]
 8009476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	69b9      	ldr	r1, [r7, #24]
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	e841 2300 	strex	r3, r2, [r1]
 8009480:	617b      	str	r3, [r7, #20]
   return(result);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e6      	bne.n	8009456 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009488:	e002      	b.n	8009490 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800948a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800948c:	f7f9 fae0 	bl	8002a50 <HAL_UART_TxCpltCallback>
}
 8009490:	bf00      	nop
 8009492:	3740      	adds	r7, #64	; 0x40
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff f9e0 	bl	800886c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094dc:	2b80      	cmp	r3, #128	; 0x80
 80094de:	d109      	bne.n	80094f4 <UART_DMAError+0x40>
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	2b21      	cmp	r3, #33	; 0x21
 80094e4:	d106      	bne.n	80094f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80094ee:	6978      	ldr	r0, [r7, #20]
 80094f0:	f7ff fee0 	bl	80092b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d109      	bne.n	8009516 <UART_DMAError+0x62>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b22      	cmp	r3, #34	; 0x22
 8009506:	d106      	bne.n	8009516 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009510:	6978      	ldr	r0, [r7, #20]
 8009512:	f7ff ff0f 	bl	8009334 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800951c:	f043 0210 	orr.w	r2, r3, #16
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009526:	6978      	ldr	r0, [r7, #20]
 8009528:	f7ff f9a9 	bl	800887e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952c:	bf00      	nop
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff f993 	bl	800887e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	e853 3f00 	ldrex	r3, [r3]
 8009574:	60bb      	str	r3, [r7, #8]
   return(result);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6979      	ldr	r1, [r7, #20]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	613b      	str	r3, [r7, #16]
   return(result);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e6      	bne.n	8009568 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2220      	movs	r2, #32
 800959e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7f9 fa51 	bl	8002a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ae:	bf00      	nop
 80095b0:	3720      	adds	r7, #32
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b096      	sub	sp, #88	; 0x58
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ce:	2b22      	cmp	r3, #34	; 0x22
 80095d0:	f040 8095 	bne.w	80096fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095e2:	b2d9      	uxtb	r1, r3
 80095e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ee:	400a      	ands	r2, r1
 80095f0:	b2d2      	uxtb	r2, r2
 80095f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	b29a      	uxth	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d178      	bne.n	800970e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800962a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009630:	653b      	str	r3, [r7, #80]	; 0x50
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800963a:	647b      	str	r3, [r7, #68]	; 0x44
 800963c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e6      	bne.n	800961c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	623b      	str	r3, [r7, #32]
   return(result);
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	f023 0301 	bic.w	r3, r3, #1
 8009664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800966e:	633a      	str	r2, [r7, #48]	; 0x30
 8009670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e5      	bne.n	800964e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009694:	2b01      	cmp	r3, #1
 8009696:	d12e      	bne.n	80096f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0310 	bic.w	r3, r3, #16
 80096b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096bc:	61fb      	str	r3, [r7, #28]
 80096be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	69b9      	ldr	r1, [r7, #24]
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	617b      	str	r3, [r7, #20]
   return(result);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e6      	bne.n	800969e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f003 0310 	and.w	r3, r3, #16
 80096da:	2b10      	cmp	r3, #16
 80096dc:	d103      	bne.n	80096e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2210      	movs	r2, #16
 80096e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff f8ce 	bl	8008890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096f4:	e00b      	b.n	800970e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7f9 f9b8 	bl	8002a6c <HAL_UART_RxCpltCallback>
}
 80096fc:	e007      	b.n	800970e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0208 	orr.w	r2, r2, #8
 800970c:	619a      	str	r2, [r3, #24]
}
 800970e:	bf00      	nop
 8009710:	3758      	adds	r7, #88	; 0x58
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b096      	sub	sp, #88	; 0x58
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009724:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	2b22      	cmp	r3, #34	; 0x22
 8009730:	f040 8095 	bne.w	800985e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009742:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009744:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009748:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800974c:	4013      	ands	r3, r2
 800974e:	b29a      	uxth	r2, r3
 8009750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009752:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d178      	bne.n	800986e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979a:	643b      	str	r3, [r7, #64]	; 0x40
 800979c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097a2:	e841 2300 	strex	r3, r2, [r1]
 80097a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1e6      	bne.n	800977c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f023 0301 	bic.w	r3, r3, #1
 80097c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3308      	adds	r3, #8
 80097cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e5      	bne.n	80097ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d12e      	bne.n	8009856 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	60bb      	str	r3, [r7, #8]
   return(result);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f023 0310 	bic.w	r3, r3, #16
 8009812:	647b      	str	r3, [r7, #68]	; 0x44
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6979      	ldr	r1, [r7, #20]
 8009822:	69ba      	ldr	r2, [r7, #24]
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	613b      	str	r3, [r7, #16]
   return(result);
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e6      	bne.n	80097fe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f003 0310 	and.w	r3, r3, #16
 800983a:	2b10      	cmp	r3, #16
 800983c:	d103      	bne.n	8009846 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2210      	movs	r2, #16
 8009844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff f81e 	bl	8008890 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009854:	e00b      	b.n	800986e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7f9 f908 	bl	8002a6c <HAL_UART_RxCpltCallback>
}
 800985c:	e007      	b.n	800986e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0208 	orr.w	r2, r2, #8
 800986c:	619a      	str	r2, [r3, #24]
}
 800986e:	bf00      	nop
 8009870:	3758      	adds	r7, #88	; 0x58
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
	...

08009878 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b0a6      	sub	sp, #152	; 0x98
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009886:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ae:	2b22      	cmp	r3, #34	; 0x22
 80098b0:	f040 814f 	bne.w	8009b52 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098be:	e0f6      	b.n	8009aae <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80098ce:	b2d9      	uxtb	r1, r3
 80098d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098da:	400a      	ands	r2, r1
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	3b01      	subs	r3, #1
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d053      	beq.n	80099ba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d011      	beq.n	8009942 <UART_RxISR_8BIT_FIFOEN+0xca>
 800991e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00b      	beq.n	8009942 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2201      	movs	r2, #1
 8009930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	f043 0201 	orr.w	r2, r3, #1
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d011      	beq.n	8009972 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800994e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2202      	movs	r2, #2
 8009960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009968:	f043 0204 	orr.w	r2, r3, #4
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009972:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b00      	cmp	r3, #0
 800997c:	d011      	beq.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800997e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00b      	beq.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2204      	movs	r2, #4
 8009990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009998:	f043 0202 	orr.w	r2, r3, #2
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fe ff66 	bl	800887e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d173      	bne.n	8009aae <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80099d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80099ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099f0:	e841 2300 	strex	r3, r2, [r1]
 80099f4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3308      	adds	r3, #8
 8009a02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a20:	657a      	str	r2, [r7, #84]	; 0x54
 8009a22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e3      	bne.n	80099fc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d12e      	bne.n	8009aa8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	f023 0310 	bic.w	r3, r3, #16
 8009a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e6      	bne.n	8009a50 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b10      	cmp	r3, #16
 8009a8e:	d103      	bne.n	8009a98 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2210      	movs	r2, #16
 8009a96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7fe fef5 	bl	8008890 <HAL_UARTEx_RxEventCallback>
 8009aa6:	e002      	b.n	8009aae <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7f8 ffdf 	bl	8002a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d006      	beq.n	8009ac4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f47f aefe 	bne.w	80098c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009aca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009ace:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d045      	beq.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009adc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d23e      	bcs.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009afa:	673b      	str	r3, [r7, #112]	; 0x70
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b0c:	e841 2300 	strex	r3, r2, [r1]
 8009b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e5      	bne.n	8009ae4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a14      	ldr	r2, [pc, #80]	; (8009b6c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009b1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f043 0320 	orr.w	r3, r3, #32
 8009b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3c:	61bb      	str	r3, [r7, #24]
 8009b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e6      	bne.n	8009b1e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b50:	e007      	b.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0208 	orr.w	r2, r2, #8
 8009b60:	619a      	str	r2, [r3, #24]
}
 8009b62:	bf00      	nop
 8009b64:	3798      	adds	r7, #152	; 0x98
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	080095b7 	.word	0x080095b7

08009b70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b0a8      	sub	sp, #160	; 0xa0
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b7e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba6:	2b22      	cmp	r3, #34	; 0x22
 8009ba8:	f040 8153 	bne.w	8009e52 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bb2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bb6:	e0fa      	b.n	8009dae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009bce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be0:	1c9a      	adds	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d053      	beq.n	8009cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d011      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00b      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c34:	f043 0201 	orr.w	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c64:	f043 0204 	orr.w	r2, r3, #4
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d011      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c94:	f043 0202 	orr.w	r2, r3, #2
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fe fde8 	bl	800887e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d175      	bne.n	8009dae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ce6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e4      	bne.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d20:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e1      	bne.n	8009cf8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d12e      	bne.n	8009da8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d60:	f023 0310 	bic.w	r3, r3, #16
 8009d64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e6      	bne.n	8009d50 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	f003 0310 	and.w	r3, r3, #16
 8009d8c:	2b10      	cmp	r3, #16
 8009d8e:	d103      	bne.n	8009d98 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2210      	movs	r2, #16
 8009d96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7fe fd75 	bl	8008890 <HAL_UARTEx_RxEventCallback>
 8009da6:	e002      	b.n	8009dae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7f8 fe5f 	bl	8002a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d006      	beq.n	8009dc4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f47f aefa 	bne.w	8009bb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d045      	beq.n	8009e62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ddc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d23e      	bcs.n	8009e62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3308      	adds	r3, #8
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	623b      	str	r3, [r7, #32]
   return(result);
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dfa:	677b      	str	r3, [r7, #116]	; 0x74
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3308      	adds	r3, #8
 8009e02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009e04:	633a      	str	r2, [r7, #48]	; 0x30
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e5      	bne.n	8009de4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a14      	ldr	r2, [pc, #80]	; (8009e6c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009e1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f043 0320 	orr.w	r3, r3, #32
 8009e32:	673b      	str	r3, [r7, #112]	; 0x70
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	69b9      	ldr	r1, [r7, #24]
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e6      	bne.n	8009e1e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e50:	e007      	b.n	8009e62 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0208 	orr.w	r2, r2, #8
 8009e60:	619a      	str	r2, [r3, #24]
}
 8009e62:	bf00      	nop
 8009e64:	37a0      	adds	r7, #160	; 0xa0
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	08009717 	.word	0x08009717

08009e70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr

08009e82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bc80      	pop	{r7}
 8009e92:	4770      	bx	lr

08009e94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b088      	sub	sp, #32
 8009eaa:	af02      	add	r7, sp, #8
 8009eac:	60f8      	str	r0, [r7, #12]
 8009eae:	1d3b      	adds	r3, r7, #4
 8009eb0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e046      	b.n	8009f54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2224      	movs	r2, #36	; 0x24
 8009ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d105      	bne.n	8009f0c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f00:	1d3b      	adds	r3, r7, #4
 8009f02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 f911 	bl	800a12e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f1c:	f7f8 f854 	bl	8001fc8 <HAL_GetTick>
 8009f20:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7fe fff5 	bl	8008f20 <UART_WaitOnFlagUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	75fb      	strb	r3, [r7, #23]
 8009f40:	e003      	b.n	8009f4a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b089      	sub	sp, #36	; 0x24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_UARTEx_EnableStopMode+0x16>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e021      	b.n	8009fb6 <HAL_UARTEx_EnableStopMode+0x5a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f043 0302 	orr.w	r3, r3, #2
 8009f8e:	61fb      	str	r3, [r7, #28]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9c:	6979      	ldr	r1, [r7, #20]
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	e841 2300 	strex	r3, r2, [r1]
 8009fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1e6      	bne.n	8009f7a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3724      	adds	r7, #36	; 0x24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bc80      	pop	{r7}
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_UARTEx_EnableFifoMode+0x16>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e02b      	b.n	800a02e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2224      	movs	r2, #36	; 0x24
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0201 	bic.w	r2, r2, #1
 8009ffc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a004:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a00c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f8ac 	bl	800a174 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2220      	movs	r2, #32
 800a020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a046:	2b01      	cmp	r3, #1
 800a048:	d101      	bne.n	800a04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a04a:	2302      	movs	r3, #2
 800a04c:	e02d      	b.n	800a0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	; 0x24
 800a05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0201 	bic.w	r2, r2, #1
 800a074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f872 	bl	800a174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e02d      	b.n	800a126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2224      	movs	r2, #36	; 0x24
 800a0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f834 	bl	800a174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	1d3b      	adds	r3, r7, #4
 800a138:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f023 0210 	bic.w	r2, r3, #16
 800a146:	893b      	ldrh	r3, [r7, #8]
 800a148:	4619      	mov	r1, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a15c:	7abb      	ldrb	r3, [r7, #10]
 800a15e:	061a      	lsls	r2, r3, #24
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	605a      	str	r2, [r3, #4]
}
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bc80      	pop	{r7}
 800a170:	4770      	bx	lr
	...

0800a174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a194:	e031      	b.n	800a1fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a196:	2308      	movs	r3, #8
 800a198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a19a:	2308      	movs	r3, #8
 800a19c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	0e5b      	lsrs	r3, r3, #25
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 0307 	and.w	r3, r3, #7
 800a1ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	0f5b      	lsrs	r3, r3, #29
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	7b3a      	ldrb	r2, [r7, #12]
 800a1c2:	4910      	ldr	r1, [pc, #64]	; (800a204 <UARTEx_SetNbDataToProcess+0x90>)
 800a1c4:	5c8a      	ldrb	r2, [r1, r2]
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1ca:	7b3a      	ldrb	r2, [r7, #12]
 800a1cc:	490e      	ldr	r1, [pc, #56]	; (800a208 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
 800a1de:	7b7a      	ldrb	r2, [r7, #13]
 800a1e0:	4908      	ldr	r1, [pc, #32]	; (800a204 <UARTEx_SetNbDataToProcess+0x90>)
 800a1e2:	5c8a      	ldrb	r2, [r1, r2]
 800a1e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1e8:	7b7a      	ldrb	r2, [r7, #13]
 800a1ea:	4907      	ldr	r1, [pc, #28]	; (800a208 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bc80      	pop	{r7}
 800a202:	4770      	bx	lr
 800a204:	0801b6fc 	.word	0x0801b6fc
 800a208:	0801b704 	.word	0x0801b704

0800a20c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a210:	f7f7 fd80 	bl	8001d14 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a214:	f000 f802 	bl	800a21c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a222:	2000      	movs	r0, #0
 800a224:	f7f8 fc84 	bl	8002b30 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a228:	2001      	movs	r0, #1
 800a22a:	f7f8 fc81 	bl	8002b30 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a22e:	2002      	movs	r0, #2
 800a230:	f7f8 fc7e 	bl	8002b30 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a234:	2101      	movs	r1, #1
 800a236:	2001      	movs	r0, #1
 800a238:	f7f8 fd2a 	bl	8002c90 <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a23c:	2300      	movs	r3, #0
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	2301      	movs	r3, #1
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	2301      	movs	r3, #1
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	4b46      	ldr	r3, [pc, #280]	; (800a364 <LoRaWAN_Init+0x148>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	2100      	movs	r1, #0
 800a24e:	2002      	movs	r0, #2
 800a250:	f010 fa22 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a254:	2300      	movs	r3, #0
 800a256:	9302      	str	r3, [sp, #8]
 800a258:	2303      	movs	r3, #3
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	2302      	movs	r3, #2
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4b41      	ldr	r3, [pc, #260]	; (800a368 <LoRaWAN_Init+0x14c>)
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	2002      	movs	r0, #2
 800a268:	f010 fa16 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a26c:	2300      	movs	r3, #0
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	2301      	movs	r3, #1
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	2301      	movs	r3, #1
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	4b3c      	ldr	r3, [pc, #240]	; (800a36c <LoRaWAN_Init+0x150>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	2002      	movs	r0, #2
 800a280:	f010 fa0a 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a284:	2300      	movs	r3, #0
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4b39      	ldr	r3, [pc, #228]	; (800a370 <LoRaWAN_Init+0x154>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f04f 31ff 	mov.w	r1, #4294967295
 800a290:	4838      	ldr	r0, [pc, #224]	; (800a374 <LoRaWAN_Init+0x158>)
 800a292:	f00f ff53 	bl	801a13c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a296:	2300      	movs	r3, #0
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b37      	ldr	r3, [pc, #220]	; (800a378 <LoRaWAN_Init+0x15c>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f04f 31ff 	mov.w	r1, #4294967295
 800a2a2:	4836      	ldr	r0, [pc, #216]	; (800a37c <LoRaWAN_Init+0x160>)
 800a2a4:	f00f ff4a 	bl	801a13c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4b34      	ldr	r3, [pc, #208]	; (800a380 <LoRaWAN_Init+0x164>)
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b4:	4833      	ldr	r0, [pc, #204]	; (800a384 <LoRaWAN_Init+0x168>)
 800a2b6:	f00f ff41 	bl	801a13c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a2ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2be:	482d      	ldr	r0, [pc, #180]	; (800a374 <LoRaWAN_Init+0x158>)
 800a2c0:	f010 f850 	bl	801a364 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a2c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2c8:	482c      	ldr	r0, [pc, #176]	; (800a37c <LoRaWAN_Init+0x160>)
 800a2ca:	f010 f84b 	bl	801a364 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a2ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2d2:	482c      	ldr	r0, [pc, #176]	; (800a384 <LoRaWAN_Init+0x168>)
 800a2d4:	f010 f846 	bl	801a364 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a2d8:	4a2b      	ldr	r2, [pc, #172]	; (800a388 <LoRaWAN_Init+0x16c>)
 800a2da:	2100      	movs	r1, #0
 800a2dc:	2004      	movs	r0, #4
 800a2de:	f00f fe97 	bl	801a010 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 800a2e2:	4a2a      	ldr	r2, [pc, #168]	; (800a38c <LoRaWAN_Init+0x170>)
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2008      	movs	r0, #8
 800a2e8:	f00f fe92 	bl	801a010 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2004      	movs	r0, #4
 800a2f0:	f00f feb0 	bl	801a054 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a2f4:	4a26      	ldr	r2, [pc, #152]	; (800a390 <LoRaWAN_Init+0x174>)
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	f00f fe89 	bl	801a010 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a2fe:	4a25      	ldr	r2, [pc, #148]	; (800a394 <LoRaWAN_Init+0x178>)
 800a300:	2100      	movs	r1, #0
 800a302:	2002      	movs	r0, #2
 800a304:	f00f fe84 	bl	801a010 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a308:	f000 fb1e 	bl	800a948 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a30c:	4822      	ldr	r0, [pc, #136]	; (800a398 <LoRaWAN_Init+0x17c>)
 800a30e:	f001 ff95 	bl	800c23c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a312:	4822      	ldr	r0, [pc, #136]	; (800a39c <LoRaWAN_Init+0x180>)
 800a314:	f001 ffde 	bl	800c2d4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a318:	481a      	ldr	r0, [pc, #104]	; (800a384 <LoRaWAN_Init+0x168>)
 800a31a:	f00f ff45 	bl	801a1a8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a31e:	4b20      	ldr	r3, [pc, #128]	; (800a3a0 <LoRaWAN_Init+0x184>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f002 f90c 	bl	800c540 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a328:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <LoRaWAN_Init+0x188>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d111      	bne.n	800a354 <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a330:	2300      	movs	r3, #0
 800a332:	9300      	str	r3, [sp, #0]
 800a334:	4b1c      	ldr	r3, [pc, #112]	; (800a3a8 <LoRaWAN_Init+0x18c>)
 800a336:	2200      	movs	r2, #0
 800a338:	f04f 31ff 	mov.w	r1, #4294967295
 800a33c:	481b      	ldr	r0, [pc, #108]	; (800a3ac <LoRaWAN_Init+0x190>)
 800a33e:	f00f fefd 	bl	801a13c <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a342:	f247 5130 	movw	r1, #30000	; 0x7530
 800a346:	4819      	ldr	r0, [pc, #100]	; (800a3ac <LoRaWAN_Init+0x190>)
 800a348:	f010 f80c 	bl	801a364 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a34c:	4817      	ldr	r0, [pc, #92]	; (800a3ac <LoRaWAN_Init+0x190>)
 800a34e:	f00f ff2b 	bl	801a1a8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a352:	e003      	b.n	800a35c <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a354:	2101      	movs	r1, #1
 800a356:	2000      	movs	r0, #0
 800a358:	f7f8 fc9a 	bl	8002c90 <BSP_PB_Init>
}
 800a35c:	bf00      	nop
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	0801ae50 	.word	0x0801ae50
 800a368:	0801ae70 	.word	0x0801ae70
 800a36c:	0801ae90 	.word	0x0801ae90
 800a370:	0800a7b9 	.word	0x0800a7b9
 800a374:	20000270 	.word	0x20000270
 800a378:	0800a7cf 	.word	0x0800a7cf
 800a37c:	20000288 	.word	0x20000288
 800a380:	0800a7e5 	.word	0x0800a7e5
 800a384:	200002a0 	.word	0x200002a0
 800a388:	08000e51 	.word	0x08000e51
 800a38c:	08000e69 	.word	0x08000e69
 800a390:	0800c52d 	.word	0x0800c52d
 800a394:	0800a529 	.word	0x0800a529
 800a398:	2000003c 	.word	0x2000003c
 800a39c:	20000070 	.word	0x20000070
 800a3a0:	20000038 	.word	0x20000038
 800a3a4:	20000160 	.word	0x20000160
 800a3a8:	0800a795 	.word	0x0800a795
 800a3ac:	20000164 	.word	0x20000164

0800a3b0 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c0:	d007      	beq.n	800a3d2 <HAL_GPIO_EXTI_Callback+0x22>
 800a3c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c6:	dc09      	bgt.n	800a3dc <HAL_GPIO_EXTI_Callback+0x2c>
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d009      	beq.n	800a3e0 <HAL_GPIO_EXTI_Callback+0x30>
 800a3cc:	2b40      	cmp	r3, #64	; 0x40
 800a3ce:	d009      	beq.n	800a3e4 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a3d0:	e004      	b.n	800a3dc <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	2002      	movs	r0, #2
 800a3d6:	f00f fe3d 	bl	801a054 <UTIL_SEQ_SetTask>
      break;
 800a3da:	e004      	b.n	800a3e6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3dc:	bf00      	nop
 800a3de:	e002      	b.n	800a3e6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3e0:	bf00      	nop
 800a3e2:	e000      	b.n	800a3e6 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3e4:	bf00      	nop
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a3f0:	b5b0      	push	{r4, r5, r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af06      	add	r7, sp, #24
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <OnRxData+0x16>
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d078      	beq.n	800a4f8 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a406:	2000      	movs	r0, #0
 800a408:	f7f8 fbd6 	bl	8002bb8 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a40c:	483f      	ldr	r0, [pc, #252]	; (800a50c <OnRxData+0x11c>)
 800a40e:	f00f fecb 	bl	801a1a8 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a412:	4b3f      	ldr	r3, [pc, #252]	; (800a510 <OnRxData+0x120>)
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	2002      	movs	r0, #2
 800a41a:	f010 f93d 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a428:	4611      	mov	r1, r2
 800a42a:	4a3a      	ldr	r2, [pc, #232]	; (800a514 <OnRxData+0x124>)
 800a42c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a430:	6879      	ldr	r1, [r7, #4]
 800a432:	7809      	ldrb	r1, [r1, #0]
 800a434:	4608      	mov	r0, r1
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a43c:	460c      	mov	r4, r1
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a444:	460d      	mov	r5, r1
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a44c:	9105      	str	r1, [sp, #20]
 800a44e:	9504      	str	r5, [sp, #16]
 800a450:	9403      	str	r4, [sp, #12]
 800a452:	9002      	str	r0, [sp, #8]
 800a454:	9201      	str	r2, [sp, #4]
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	4b2f      	ldr	r3, [pc, #188]	; (800a518 <OnRxData+0x128>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	2003      	movs	r0, #3
 800a460:	f010 f91a 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d021      	beq.n	800a4b0 <OnRxData+0xc0>
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d145      	bne.n	800a4fc <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d117      	bne.n	800a4a8 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d00e      	beq.n	800a4a0 <OnRxData+0xb0>
 800a482:	2b02      	cmp	r3, #2
 800a484:	dc12      	bgt.n	800a4ac <OnRxData+0xbc>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <OnRxData+0xa0>
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d004      	beq.n	800a498 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a48e:	e00d      	b.n	800a4ac <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a490:	2000      	movs	r0, #0
 800a492:	f002 f9b7 	bl	800c804 <LmHandlerRequestClass>
              break;
 800a496:	e00a      	b.n	800a4ae <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a498:	2001      	movs	r0, #1
 800a49a:	f002 f9b3 	bl	800c804 <LmHandlerRequestClass>
              break;
 800a49e:	e006      	b.n	800a4ae <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a4a0:	2002      	movs	r0, #2
 800a4a2:	f002 f9af 	bl	800c804 <LmHandlerRequestClass>
              break;
 800a4a6:	e002      	b.n	800a4ae <OnRxData+0xbe>
          }
        }
 800a4a8:	bf00      	nop
 800a4aa:	e02a      	b.n	800a502 <OnRxData+0x112>
              break;
 800a4ac:	bf00      	nop
        break;
 800a4ae:	e028      	b.n	800a502 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	785b      	ldrb	r3, [r3, #1]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d123      	bne.n	800a500 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	4b15      	ldr	r3, [pc, #84]	; (800a51c <OnRxData+0x12c>)
 800a4c6:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a4c8:	4b14      	ldr	r3, [pc, #80]	; (800a51c <OnRxData+0x12c>)
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d109      	bne.n	800a4e4 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a4d0:	4b13      	ldr	r3, [pc, #76]	; (800a520 <OnRxData+0x130>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	2003      	movs	r0, #3
 800a4d8:	f010 f8de 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a4dc:	2002      	movs	r0, #2
 800a4de:	f7f8 fb8f 	bl	8002c00 <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a4e2:	e00d      	b.n	800a500 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a4e4:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <OnRxData+0x134>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	2003      	movs	r0, #3
 800a4ec:	f010 f8d4 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a4f0:	2002      	movs	r0, #2
 800a4f2:	f7f8 fb61 	bl	8002bb8 <BSP_LED_On>
        break;
 800a4f6:	e003      	b.n	800a500 <OnRxData+0x110>

      default:

        break;
    }
  }
 800a4f8:	bf00      	nop
 800a4fa:	e002      	b.n	800a502 <OnRxData+0x112>
        break;
 800a4fc:	bf00      	nop
 800a4fe:	e000      	b.n	800a502 <OnRxData+0x112>
        break;
 800a500:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bdb0      	pop	{r4, r5, r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000288 	.word	0x20000288
 800a510:	0801aeb0 	.word	0x0801aeb0
 800a514:	20000088 	.word	0x20000088
 800a518:	0801aee4 	.word	0x0801aee4
 800a51c:	2000026e 	.word	0x2000026e
 800a520:	0801af2c 	.word	0x0801af2c
 800a524:	0801af38 	.word	0x0801af38

0800a528 <SendTxData>:

static void SendTxData(void)
{
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b091      	sub	sp, #68	; 0x44
 800a52c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f7f7 fe3a 	bl	80021cc <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a558:	f7f6 ffda 	bl	8001510 <SYS_GetTemperatureLevel>
 800a55c:	4603      	mov	r3, r0
 800a55e:	121b      	asrs	r3, r3, #8
 800a560:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4983      	ldr	r1, [pc, #524]	; (800a774 <SendTxData+0x24c>)
 800a566:	4618      	mov	r0, r3
 800a568:	f7f6 f988 	bl	800087c <__aeabi_fmul>
 800a56c:	4603      	mov	r3, r0
 800a56e:	4982      	ldr	r1, [pc, #520]	; (800a778 <SendTxData+0x250>)
 800a570:	4618      	mov	r0, r3
 800a572:	f7f6 fa37 	bl	80009e4 <__aeabi_fdiv>
 800a576:	4603      	mov	r3, r0
 800a578:	4618      	mov	r0, r3
 800a57a:	f7f6 facf 	bl	8000b1c <__aeabi_f2uiz>
 800a57e:	4603      	mov	r3, r0
 800a580:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a582:	4b7e      	ldr	r3, [pc, #504]	; (800a77c <SendTxData+0x254>)
 800a584:	2202      	movs	r2, #2
 800a586:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	497b      	ldr	r1, [pc, #492]	; (800a778 <SendTxData+0x250>)
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f6 f975 	bl	800087c <__aeabi_fmul>
 800a592:	4603      	mov	r3, r0
 800a594:	4618      	mov	r0, r3
 800a596:	f7f6 fac1 	bl	8000b1c <__aeabi_f2uiz>
 800a59a:	4603      	mov	r3, r0
 800a59c:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a59e:	4b77      	ldr	r3, [pc, #476]	; (800a77c <SendTxData+0x254>)
 800a5a0:	685a      	ldr	r2, [r3, #4]
 800a5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	6379      	str	r1, [r7, #52]	; 0x34
 800a5a8:	4413      	add	r3, r2
 800a5aa:	4a75      	ldr	r2, [pc, #468]	; (800a780 <SendTxData+0x258>)
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a5b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5b2:	0a1b      	lsrs	r3, r3, #8
 800a5b4:	b298      	uxth	r0, r3
 800a5b6:	4b71      	ldr	r3, [pc, #452]	; (800a77c <SendTxData+0x254>)
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5bc:	1c59      	adds	r1, r3, #1
 800a5be:	6379      	str	r1, [r7, #52]	; 0x34
 800a5c0:	4413      	add	r3, r2
 800a5c2:	b2c2      	uxtb	r2, r0
 800a5c4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a5c6:	4b6d      	ldr	r3, [pc, #436]	; (800a77c <SendTxData+0x254>)
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5cc:	1c59      	adds	r1, r3, #1
 800a5ce:	6379      	str	r1, [r7, #52]	; 0x34
 800a5d0:	4413      	add	r3, r2
 800a5d2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a5d8:	4b68      	ldr	r3, [pc, #416]	; (800a77c <SendTxData+0x254>)
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	1c59      	adds	r1, r3, #1
 800a5e0:	6379      	str	r1, [r7, #52]	; 0x34
 800a5e2:	4413      	add	r3, r2
 800a5e4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a5ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	b298      	uxth	r0, r3
 800a5f0:	4b62      	ldr	r3, [pc, #392]	; (800a77c <SendTxData+0x254>)
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5f6:	1c59      	adds	r1, r3, #1
 800a5f8:	6379      	str	r1, [r7, #52]	; 0x34
 800a5fa:	4413      	add	r3, r2
 800a5fc:	b2c2      	uxtb	r2, r0
 800a5fe:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a600:	4b5e      	ldr	r3, [pc, #376]	; (800a77c <SendTxData+0x254>)
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	6379      	str	r1, [r7, #52]	; 0x34
 800a60a:	4413      	add	r3, r2
 800a60c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a60e:	b2d2      	uxtb	r2, r2
 800a610:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a612:	4b5c      	ldr	r3, [pc, #368]	; (800a784 <SendTxData+0x25c>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b08      	cmp	r3, #8
 800a618:	d007      	beq.n	800a62a <SendTxData+0x102>
 800a61a:	4b5a      	ldr	r3, [pc, #360]	; (800a784 <SendTxData+0x25c>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d003      	beq.n	800a62a <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a622:	4b58      	ldr	r3, [pc, #352]	; (800a784 <SendTxData+0x25c>)
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d120      	bne.n	800a66c <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a62a:	4b54      	ldr	r3, [pc, #336]	; (800a77c <SendTxData+0x254>)
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a630:	1c59      	adds	r1, r3, #1
 800a632:	6379      	str	r1, [r7, #52]	; 0x34
 800a634:	4413      	add	r3, r2
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a63a:	4b50      	ldr	r3, [pc, #320]	; (800a77c <SendTxData+0x254>)
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a640:	1c59      	adds	r1, r3, #1
 800a642:	6379      	str	r1, [r7, #52]	; 0x34
 800a644:	4413      	add	r3, r2
 800a646:	2200      	movs	r2, #0
 800a648:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a64a:	4b4c      	ldr	r3, [pc, #304]	; (800a77c <SendTxData+0x254>)
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	1c59      	adds	r1, r3, #1
 800a652:	6379      	str	r1, [r7, #52]	; 0x34
 800a654:	4413      	add	r3, r2
 800a656:	2200      	movs	r2, #0
 800a658:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a65a:	4b48      	ldr	r3, [pc, #288]	; (800a77c <SendTxData+0x254>)
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a660:	1c59      	adds	r1, r3, #1
 800a662:	6379      	str	r1, [r7, #52]	; 0x34
 800a664:	4413      	add	r3, r2
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
 800a66a:	e05b      	b.n	800a724 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a674:	4b41      	ldr	r3, [pc, #260]	; (800a77c <SendTxData+0x254>)
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67a:	1c59      	adds	r1, r3, #1
 800a67c:	6379      	str	r1, [r7, #52]	; 0x34
 800a67e:	18d4      	adds	r4, r2, r3
 800a680:	f7f7 fb6e 	bl	8001d60 <GetBatteryLevel>
 800a684:	4603      	mov	r3, r0
 800a686:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	1418      	asrs	r0, r3, #16
 800a68c:	4b3b      	ldr	r3, [pc, #236]	; (800a77c <SendTxData+0x254>)
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a692:	1c59      	adds	r1, r3, #1
 800a694:	6379      	str	r1, [r7, #52]	; 0x34
 800a696:	4413      	add	r3, r2
 800a698:	b2c2      	uxtb	r2, r0
 800a69a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	1218      	asrs	r0, r3, #8
 800a6a0:	4b36      	ldr	r3, [pc, #216]	; (800a77c <SendTxData+0x254>)
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a6:	1c59      	adds	r1, r3, #1
 800a6a8:	6379      	str	r1, [r7, #52]	; 0x34
 800a6aa:	4413      	add	r3, r2
 800a6ac:	b2c2      	uxtb	r2, r0
 800a6ae:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a6b0:	4b32      	ldr	r3, [pc, #200]	; (800a77c <SendTxData+0x254>)
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6b6:	1c59      	adds	r1, r3, #1
 800a6b8:	6379      	str	r1, [r7, #52]	; 0x34
 800a6ba:	4413      	add	r3, r2
 800a6bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	1418      	asrs	r0, r3, #16
 800a6c6:	4b2d      	ldr	r3, [pc, #180]	; (800a77c <SendTxData+0x254>)
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6cc:	1c59      	adds	r1, r3, #1
 800a6ce:	6379      	str	r1, [r7, #52]	; 0x34
 800a6d0:	4413      	add	r3, r2
 800a6d2:	b2c2      	uxtb	r2, r0
 800a6d4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	1218      	asrs	r0, r3, #8
 800a6da:	4b28      	ldr	r3, [pc, #160]	; (800a77c <SendTxData+0x254>)
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e0:	1c59      	adds	r1, r3, #1
 800a6e2:	6379      	str	r1, [r7, #52]	; 0x34
 800a6e4:	4413      	add	r3, r2
 800a6e6:	b2c2      	uxtb	r2, r0
 800a6e8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a6ea:	4b24      	ldr	r3, [pc, #144]	; (800a77c <SendTxData+0x254>)
 800a6ec:	685a      	ldr	r2, [r3, #4]
 800a6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f0:	1c59      	adds	r1, r3, #1
 800a6f2:	6379      	str	r1, [r7, #52]	; 0x34
 800a6f4:	4413      	add	r3, r2
 800a6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f8:	b2d2      	uxtb	r2, r2
 800a6fa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a6fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6fe:	0a1b      	lsrs	r3, r3, #8
 800a700:	b298      	uxth	r0, r3
 800a702:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <SendTxData+0x254>)
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a708:	1c59      	adds	r1, r3, #1
 800a70a:	6379      	str	r1, [r7, #52]	; 0x34
 800a70c:	4413      	add	r3, r2
 800a70e:	b2c2      	uxtb	r2, r0
 800a710:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a712:	4b1a      	ldr	r3, [pc, #104]	; (800a77c <SendTxData+0x254>)
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a718:	1c59      	adds	r1, r3, #1
 800a71a:	6379      	str	r1, [r7, #52]	; 0x34
 800a71c:	4413      	add	r3, r2
 800a71e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a726:	b2da      	uxtb	r2, r3
 800a728:	4b14      	ldr	r3, [pc, #80]	; (800a77c <SendTxData+0x254>)
 800a72a:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a72c:	1d3a      	adds	r2, r7, #4
 800a72e:	2300      	movs	r3, #0
 800a730:	2100      	movs	r1, #0
 800a732:	4812      	ldr	r0, [pc, #72]	; (800a77c <SendTxData+0x254>)
 800a734:	f001 ff7a 	bl	800c62c <LmHandlerSend>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a73e:	4b12      	ldr	r3, [pc, #72]	; (800a788 <SendTxData+0x260>)
 800a740:	2201      	movs	r2, #1
 800a742:	2100      	movs	r1, #0
 800a744:	2001      	movs	r0, #1
 800a746:	f00f ffa7 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a74a:	e00e      	b.n	800a76a <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <SendTxData+0x264>)
 800a756:	fba2 2303 	umull	r2, r3, r2, r3
 800a75a:	099b      	lsrs	r3, r3, #6
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4b0c      	ldr	r3, [pc, #48]	; (800a790 <SendTxData+0x268>)
 800a760:	2201      	movs	r2, #1
 800a762:	2100      	movs	r1, #0
 800a764:	2001      	movs	r0, #1
 800a766:	f00f ff97 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800a76a:	bf00      	nop
 800a76c:	373c      	adds	r7, #60	; 0x3c
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd90      	pop	{r4, r7, pc}
 800a772:	bf00      	nop
 800a774:	42c80000 	.word	0x42c80000
 800a778:	41200000 	.word	0x41200000
 800a77c:	20000080 	.word	0x20000080
 800a780:	2000026e 	.word	0x2000026e
 800a784:	20000070 	.word	0x20000070
 800a788:	0801af44 	.word	0x0801af44
 800a78c:	10624dd3 	.word	0x10624dd3
 800a790:	0801af54 	.word	0x0801af54

0800a794 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a79c:	2100      	movs	r1, #0
 800a79e:	2002      	movs	r0, #2
 800a7a0:	f00f fc58 	bl	801a054 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a7a4:	4803      	ldr	r0, [pc, #12]	; (800a7b4 <OnTxTimerEvent+0x20>)
 800a7a6:	f00f fcff 	bl	801a1a8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000164 	.word	0x20000164

0800a7b8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	f7f8 fa1d 	bl	8002c00 <BSP_LED_Off>
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7f8 fa12 	bl	8002c00 <BSP_LED_Off>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a7ec:	2002      	movs	r0, #2
 800a7ee:	f7f8 fa2b 	bl	8002c48 <BSP_LED_Toggle>
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af04      	add	r7, sp, #16
 800a802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d044      	beq.n	800a894 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d040      	beq.n	800a894 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a812:	2001      	movs	r0, #1
 800a814:	f7f8 f9d0 	bl	8002bb8 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a818:	4820      	ldr	r0, [pc, #128]	; (800a89c <OnTxData+0xa0>)
 800a81a:	f00f fcc5 	bl	801a1a8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a81e:	4b20      	ldr	r3, [pc, #128]	; (800a8a0 <OnTxData+0xa4>)
 800a820:	2200      	movs	r2, #0
 800a822:	2100      	movs	r1, #0
 800a824:	2002      	movs	r0, #2
 800a826:	f00f ff37 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	7b12      	ldrb	r2, [r2, #12]
 800a832:	4611      	mov	r1, r2
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a83a:	4610      	mov	r0, r2
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a842:	9203      	str	r2, [sp, #12]
 800a844:	9002      	str	r0, [sp, #8]
 800a846:	9101      	str	r1, [sp, #4]
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <OnTxData+0xa8>)
 800a84c:	2200      	movs	r2, #0
 800a84e:	2100      	movs	r1, #0
 800a850:	2003      	movs	r0, #3
 800a852:	f00f ff21 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <OnTxData+0xac>)
 800a858:	2200      	movs	r2, #0
 800a85a:	2100      	movs	r1, #0
 800a85c:	2003      	movs	r0, #3
 800a85e:	f00f ff1b 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	789b      	ldrb	r3, [r3, #2]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10e      	bne.n	800a888 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	78db      	ldrb	r3, [r3, #3]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <OnTxData+0x7a>
 800a872:	4b0e      	ldr	r3, [pc, #56]	; (800a8ac <OnTxData+0xb0>)
 800a874:	e000      	b.n	800a878 <OnTxData+0x7c>
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <OnTxData+0xb4>)
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <OnTxData+0xb8>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	2003      	movs	r0, #3
 800a882:	f00f ff09 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a886:	e005      	b.n	800a894 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a888:	4b0b      	ldr	r3, [pc, #44]	; (800a8b8 <OnTxData+0xbc>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	2100      	movs	r1, #0
 800a88e:	2003      	movs	r0, #3
 800a890:	f00f ff02 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000270 	.word	0x20000270
 800a8a0:	0801af74 	.word	0x0801af74
 800a8a4:	0801afa8 	.word	0x0801afa8
 800a8a8:	0801afdc 	.word	0x0801afdc
 800a8ac:	0801afec 	.word	0x0801afec
 800a8b0:	0801aff0 	.word	0x0801aff0
 800a8b4:	0801aff8 	.word	0x0801aff8
 800a8b8:	0801b00c 	.word	0x0801b00c

0800a8bc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d028      	beq.n	800a91c <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d11d      	bne.n	800a910 <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a8d4:	4813      	ldr	r0, [pc, #76]	; (800a924 <OnJoinRequest+0x68>)
 800a8d6:	f00f fcd5 	bl	801a284 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a8da:	2002      	movs	r0, #2
 800a8dc:	f7f8 f990 	bl	8002c00 <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <OnJoinRequest+0x6c>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2002      	movs	r0, #2
 800a8e8:	f00f fed6 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	789b      	ldrb	r3, [r3, #2]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d106      	bne.n	800a902 <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a8f4:	4b0d      	ldr	r3, [pc, #52]	; (800a92c <OnJoinRequest+0x70>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	2002      	movs	r0, #2
 800a8fc:	f00f fecc 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a900:	e00c      	b.n	800a91c <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <OnJoinRequest+0x74>)
 800a904:	2200      	movs	r2, #0
 800a906:	2100      	movs	r1, #0
 800a908:	2002      	movs	r0, #2
 800a90a:	f00f fec5 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800a90e:	e005      	b.n	800a91c <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <OnJoinRequest+0x78>)
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	2002      	movs	r0, #2
 800a918:	f00f febe 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800a91c:	bf00      	nop
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	200002a0 	.word	0x200002a0
 800a928:	0801b01c 	.word	0x0801b01c
 800a92c:	0801b034 	.word	0x0801b034
 800a930:	0801b054 	.word	0x0801b054
 800a934:	0801b074 	.word	0x0801b074

0800a938 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a93c:	2100      	movs	r1, #0
 800a93e:	2001      	movs	r0, #1
 800a940:	f00f fb88 	bl	801a054 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a944:	bf00      	nop
 800a946:	bd80      	pop	{r7, pc}

0800a948 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a94c:	4b15      	ldr	r3, [pc, #84]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a952:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a954:	2200      	movs	r2, #0
 800a956:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a958:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a960:	2200      	movs	r2, #0
 800a962:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a964:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f043 0320 	orr.w	r3, r3, #32
 800a96c:	4a0d      	ldr	r2, [pc, #52]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a96e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a970:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10c      	bne.n	800a992 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a978:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <LoraInfo_Init+0x60>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	2000      	movs	r0, #0
 800a980:	f00f fe8a 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a984:	bf00      	nop
 800a986:	f00f fe75 	bl	801a674 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d1fa      	bne.n	800a986 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a990:	e7fe      	b.n	800a990 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a992:	4b04      	ldr	r3, [pc, #16]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a994:	2200      	movs	r2, #0
 800a996:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a998:	4b02      	ldr	r3, [pc, #8]	; (800a9a4 <LoraInfo_Init+0x5c>)
 800a99a:	2203      	movs	r2, #3
 800a99c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	200002b8 	.word	0x200002b8
 800a9a8:	0801b0cc 	.word	0x0801b0cc

0800a9ac <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a9b0:	4b02      	ldr	r3, [pc, #8]	; (800a9bc <LoraInfo_GetPtr+0x10>)
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bc80      	pop	{r7}
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	200002b8 	.word	0x200002b8

0800a9c0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a9c4:	f7f8 f9f5 	bl	8002db2 <BSP_RADIO_Init>
 800a9c8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f8 fa1a 	bl	8002e14 <BSP_RADIO_ConfigRFSwitch>
 800a9e0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800a9ee:	f7f8 fa5f 	bl	8002eb0 <BSP_RADIO_GetTxConfig>
 800a9f2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800a9fc:	f7f8 fa5f 	bl	8002ebe <BSP_RADIO_IsTCXO>
 800aa00:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800aa0a:	f7f8 fa5f 	bl	8002ecc <BSP_RADIO_IsDCDC>
 800aa0e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	33f1      	adds	r3, #241	; 0xf1
 800aa20:	2210      	movs	r2, #16
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f00b fd57 	bl	80164d8 <memset1>
    ctx->M_n = 0;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	22f0      	movs	r2, #240	; 0xf0
 800aa36:	2100      	movs	r1, #0
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f00b fd4d 	bl	80164d8 <memset1>
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	461a      	mov	r2, r3
 800aa54:	2110      	movs	r1, #16
 800aa56:	6838      	ldr	r0, [r7, #0]
 800aa58:	f000 fe60 	bl	800b71c <lorawan_aes_set_key>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	; 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f000 80a1 	beq.w	800abbe <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa82:	f1c3 0310 	rsb	r3, r3, #16
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	bf28      	it	cs
 800aa8c:	4613      	movcs	r3, r2
 800aa8e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f203 1201 	addw	r2, r3, #257	; 0x101
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa9c:	4413      	add	r3, r2
 800aa9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa0:	b292      	uxth	r2, r2
 800aaa2:	68b9      	ldr	r1, [r7, #8]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f00b fcdc 	bl	8016462 <memcpy1>
        ctx->M_n += mlen;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	441a      	add	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aac0:	2b0f      	cmp	r3, #15
 800aac2:	f240 808d 	bls.w	800abe0 <AES_CMAC_Update+0x17c>
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	429a      	cmp	r2, r3
 800aacc:	f000 8088 	beq.w	800abe0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aad0:	2300      	movs	r3, #0
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aad4:	e015      	b.n	800ab02 <AES_CMAC_Update+0x9e>
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	4413      	add	r3, r2
 800aadc:	33f1      	adds	r3, #241	; 0xf1
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	68f9      	ldr	r1, [r7, #12]
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	440b      	add	r3, r1
 800aae6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	4053      	eors	r3, r2
 800aaee:	b2d9      	uxtb	r1, r3
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	4413      	add	r3, r2
 800aaf6:	33f1      	adds	r3, #241	; 0xf1
 800aaf8:	460a      	mov	r2, r1
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	3301      	adds	r3, #1
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	2b0f      	cmp	r3, #15
 800ab06:	dde6      	ble.n	800aad6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab0e:	f107 0314 	add.w	r3, r7, #20
 800ab12:	2210      	movs	r2, #16
 800ab14:	4618      	mov	r0, r3
 800ab16:	f00b fca4 	bl	8016462 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	f107 0114 	add.w	r1, r7, #20
 800ab20:	f107 0314 	add.w	r3, r7, #20
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fed7 	bl	800b8d8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	33f1      	adds	r3, #241	; 0xf1
 800ab2e:	f107 0114 	add.w	r1, r7, #20
 800ab32:	2210      	movs	r2, #16
 800ab34:	4618      	mov	r0, r3
 800ab36:	f00b fc94 	bl	8016462 <memcpy1>

        data += mlen;
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	4413      	add	r3, r2
 800ab40:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ab4a:	e038      	b.n	800abbe <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab50:	e013      	b.n	800ab7a <AES_CMAC_Update+0x116>
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	4413      	add	r3, r2
 800ab58:	33f1      	adds	r3, #241	; 0xf1
 800ab5a:	781a      	ldrb	r2, [r3, #0]
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	68b9      	ldr	r1, [r7, #8]
 800ab60:	440b      	add	r3, r1
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	4053      	eors	r3, r2
 800ab66:	b2d9      	uxtb	r1, r3
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6c:	4413      	add	r3, r2
 800ab6e:	33f1      	adds	r3, #241	; 0xf1
 800ab70:	460a      	mov	r2, r1
 800ab72:	701a      	strb	r2, [r3, #0]
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	3301      	adds	r3, #1
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	2b0f      	cmp	r3, #15
 800ab7e:	dde8      	ble.n	800ab52 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	2210      	movs	r2, #16
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f00b fc68 	bl	8016462 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	f107 0114 	add.w	r1, r7, #20
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fe9b 	bl	800b8d8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	33f1      	adds	r3, #241	; 0xf1
 800aba6:	f107 0114 	add.w	r1, r7, #20
 800abaa:	2210      	movs	r2, #16
 800abac:	4618      	mov	r0, r3
 800abae:	f00b fc58 	bl	8016462 <memcpy1>

        data += 16;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3310      	adds	r3, #16
 800abb6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	3b10      	subs	r3, #16
 800abbc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2b10      	cmp	r3, #16
 800abc2:	d8c3      	bhi.n	800ab4c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	b292      	uxth	r2, r2
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f00b fc46 	bl	8016462 <memcpy1>
    ctx->M_n = len;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800abde:	e000      	b.n	800abe2 <AES_CMAC_Update+0x17e>
            return;
 800abe0:	bf00      	nop
}
 800abe2:	3730      	adds	r7, #48	; 0x30
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b092      	sub	sp, #72	; 0x48
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800abf2:	f107 031c 	add.w	r3, r7, #28
 800abf6:	2210      	movs	r2, #16
 800abf8:	2100      	movs	r1, #0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f00b fc6c 	bl	80164d8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	f107 011c 	add.w	r1, r7, #28
 800ac06:	f107 031c 	add.w	r3, r7, #28
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fe64 	bl	800b8d8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ac10:	7f3b      	ldrb	r3, [r7, #28]
 800ac12:	b25b      	sxtb	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	da31      	bge.n	800ac7c <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ac18:	2300      	movs	r3, #0
 800ac1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac1c:	e01c      	b.n	800ac58 <AES_CMAC_Final+0x70>
 800ac1e:	f107 021c 	add.w	r2, r7, #28
 800ac22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	b25a      	sxtb	r2, r3
 800ac2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac2e:	3301      	adds	r3, #1
 800ac30:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac34:	440b      	add	r3, r1
 800ac36:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac3a:	09db      	lsrs	r3, r3, #7
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	b25b      	sxtb	r3, r3
 800ac40:	4313      	orrs	r3, r2
 800ac42:	b25b      	sxtb	r3, r3
 800ac44:	b2d9      	uxtb	r1, r3
 800ac46:	f107 021c 	add.w	r2, r7, #28
 800ac4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac4c:	4413      	add	r3, r2
 800ac4e:	460a      	mov	r2, r1
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac54:	3301      	adds	r3, #1
 800ac56:	647b      	str	r3, [r7, #68]	; 0x44
 800ac58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac5a:	2b0e      	cmp	r3, #14
 800ac5c:	dddf      	ble.n	800ac1e <AES_CMAC_Final+0x36>
 800ac5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ac6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac6e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ac72:	43db      	mvns	r3, r3
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7a:	e028      	b.n	800acce <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac80:	e01c      	b.n	800acbc <AES_CMAC_Final+0xd4>
 800ac82:	f107 021c 	add.w	r2, r7, #28
 800ac86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac88:	4413      	add	r3, r2
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	005b      	lsls	r3, r3, #1
 800ac8e:	b25a      	sxtb	r2, r3
 800ac90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac92:	3301      	adds	r3, #1
 800ac94:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac98:	440b      	add	r3, r1
 800ac9a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac9e:	09db      	lsrs	r3, r3, #7
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	4313      	orrs	r3, r2
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	b2d9      	uxtb	r1, r3
 800acaa:	f107 021c 	add.w	r2, r7, #28
 800acae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb0:	4413      	add	r3, r2
 800acb2:	460a      	mov	r2, r1
 800acb4:	701a      	strb	r2, [r3, #0]
 800acb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acb8:	3301      	adds	r3, #1
 800acba:	643b      	str	r3, [r7, #64]	; 0x40
 800acbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acbe:	2b0e      	cmp	r3, #14
 800acc0:	dddf      	ble.n	800ac82 <AES_CMAC_Final+0x9a>
 800acc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d11d      	bne.n	800ad14 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800acd8:	2300      	movs	r3, #0
 800acda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acdc:	e016      	b.n	800ad0c <AES_CMAC_Final+0x124>
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ace2:	4413      	add	r3, r2
 800ace4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ace8:	781a      	ldrb	r2, [r3, #0]
 800acea:	f107 011c 	add.w	r1, r7, #28
 800acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf0:	440b      	add	r3, r1
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	4053      	eors	r3, r2
 800acf6:	b2d9      	uxtb	r1, r3
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfc:	4413      	add	r3, r2
 800acfe:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad02:	460a      	mov	r2, r1
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad08:	3301      	adds	r3, #1
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0e:	2b0f      	cmp	r3, #15
 800ad10:	dde5      	ble.n	800acde <AES_CMAC_Final+0xf6>
 800ad12:	e098      	b.n	800ae46 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ad14:	7f3b      	ldrb	r3, [r7, #28]
 800ad16:	b25b      	sxtb	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	da31      	bge.n	800ad80 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad20:	e01c      	b.n	800ad5c <AES_CMAC_Final+0x174>
 800ad22:	f107 021c 	add.w	r2, r7, #28
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	4413      	add	r3, r2
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	005b      	lsls	r3, r3, #1
 800ad2e:	b25a      	sxtb	r2, r3
 800ad30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad32:	3301      	adds	r3, #1
 800ad34:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad38:	440b      	add	r3, r1
 800ad3a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad3e:	09db      	lsrs	r3, r3, #7
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	b25b      	sxtb	r3, r3
 800ad44:	4313      	orrs	r3, r2
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	b2d9      	uxtb	r1, r3
 800ad4a:	f107 021c 	add.w	r2, r7, #28
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad50:	4413      	add	r3, r2
 800ad52:	460a      	mov	r2, r1
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	3301      	adds	r3, #1
 800ad5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5e:	2b0e      	cmp	r3, #14
 800ad60:	dddf      	ble.n	800ad22 <AES_CMAC_Final+0x13a>
 800ad62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ad6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad72:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ad76:	43db      	mvns	r3, r3
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad7e:	e028      	b.n	800add2 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ad80:	2300      	movs	r3, #0
 800ad82:	637b      	str	r3, [r7, #52]	; 0x34
 800ad84:	e01c      	b.n	800adc0 <AES_CMAC_Final+0x1d8>
 800ad86:	f107 021c 	add.w	r2, r7, #28
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	4413      	add	r3, r2
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	b25a      	sxtb	r2, r3
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	3301      	adds	r3, #1
 800ad98:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ada2:	09db      	lsrs	r3, r3, #7
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	4313      	orrs	r3, r2
 800adaa:	b25b      	sxtb	r3, r3
 800adac:	b2d9      	uxtb	r1, r3
 800adae:	f107 021c 	add.w	r2, r7, #28
 800adb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb4:	4413      	add	r3, r2
 800adb6:	460a      	mov	r2, r1
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbc:	3301      	adds	r3, #1
 800adbe:	637b      	str	r3, [r7, #52]	; 0x34
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	2b0e      	cmp	r3, #14
 800adc4:	dddf      	ble.n	800ad86 <AES_CMAC_Final+0x19e>
 800adc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	4413      	add	r3, r2
 800addc:	2280      	movs	r2, #128	; 0x80
 800adde:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ade2:	e007      	b.n	800adf4 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	4413      	add	r3, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae08:	2b0f      	cmp	r3, #15
 800ae0a:	d9eb      	bls.n	800ade4 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae10:	e016      	b.n	800ae40 <AES_CMAC_Final+0x258>
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	4413      	add	r3, r2
 800ae18:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	f107 011c 	add.w	r1, r7, #28
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	440b      	add	r3, r1
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4053      	eors	r3, r2
 800ae2a:	b2d9      	uxtb	r1, r3
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	4413      	add	r3, r2
 800ae32:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae36:	460a      	mov	r2, r1
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae42:	2b0f      	cmp	r3, #15
 800ae44:	dde5      	ble.n	800ae12 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800ae46:	2300      	movs	r3, #0
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae4a:	e015      	b.n	800ae78 <AES_CMAC_Final+0x290>
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	4413      	add	r3, r2
 800ae52:	33f1      	adds	r3, #241	; 0xf1
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	440b      	add	r3, r1
 800ae5c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	4053      	eors	r3, r2
 800ae64:	b2d9      	uxtb	r1, r3
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	4413      	add	r3, r2
 800ae6c:	33f1      	adds	r3, #241	; 0xf1
 800ae6e:	460a      	mov	r2, r1
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	3301      	adds	r3, #1
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	2b0f      	cmp	r3, #15
 800ae7c:	dde6      	ble.n	800ae4c <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ae84:	f107 030c 	add.w	r3, r7, #12
 800ae88:	2210      	movs	r2, #16
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f00b fae9 	bl	8016462 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	f107 030c 	add.w	r3, r7, #12
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fd1d 	bl	800b8d8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ae9e:	f107 031c 	add.w	r3, r7, #28
 800aea2:	2210      	movs	r2, #16
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f00b fb16 	bl	80164d8 <memset1>
}
 800aeac:	bf00      	nop
 800aeae:	3748      	adds	r7, #72	; 0x48
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3301      	adds	r3, #1
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	7852      	ldrb	r2, [r2, #1]
 800aece:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3302      	adds	r3, #2
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	7892      	ldrb	r2, [r2, #2]
 800aed8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3303      	adds	r3, #3
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	78d2      	ldrb	r2, [r2, #3]
 800aee2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3304      	adds	r3, #4
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	7912      	ldrb	r2, [r2, #4]
 800aeec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	3305      	adds	r3, #5
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	7952      	ldrb	r2, [r2, #5]
 800aef6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3306      	adds	r3, #6
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	7992      	ldrb	r2, [r2, #6]
 800af00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3307      	adds	r3, #7
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	79d2      	ldrb	r2, [r2, #7]
 800af0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3308      	adds	r3, #8
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	7a12      	ldrb	r2, [r2, #8]
 800af14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3309      	adds	r3, #9
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	7a52      	ldrb	r2, [r2, #9]
 800af1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	330a      	adds	r3, #10
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	7a92      	ldrb	r2, [r2, #10]
 800af28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	330b      	adds	r3, #11
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	7ad2      	ldrb	r2, [r2, #11]
 800af32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	330c      	adds	r3, #12
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	7b12      	ldrb	r2, [r2, #12]
 800af3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	330d      	adds	r3, #13
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	7b52      	ldrb	r2, [r2, #13]
 800af46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	330e      	adds	r3, #14
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	7b92      	ldrb	r2, [r2, #14]
 800af50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	330f      	adds	r3, #15
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	7bd2      	ldrb	r2, [r2, #15]
 800af5a:	701a      	strb	r2, [r3, #0]
#endif
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	bc80      	pop	{r7}
 800af64:	4770      	bx	lr

0800af66 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	4613      	mov	r3, r2
 800af72:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800af74:	e007      	b.n	800af86 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	1c53      	adds	r3, r2, #1
 800af7a:	60bb      	str	r3, [r7, #8]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	1c59      	adds	r1, r3, #1
 800af80:	60f9      	str	r1, [r7, #12]
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	1e5a      	subs	r2, r3, #1
 800af8a:	71fa      	strb	r2, [r7, #7]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f2      	bne.n	800af76 <copy_block_nn+0x10>
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	bc80      	pop	{r7}
 800af9a:	4770      	bx	lr

0800af9c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	4053      	eors	r3, r2
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3301      	adds	r3, #1
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	3301      	adds	r3, #1
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3301      	adds	r3, #1
 800afc6:	404a      	eors	r2, r1
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3302      	adds	r3, #2
 800afd0:	7819      	ldrb	r1, [r3, #0]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	3302      	adds	r3, #2
 800afd6:	781a      	ldrb	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3302      	adds	r3, #2
 800afdc:	404a      	eors	r2, r1
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	3303      	adds	r3, #3
 800afe6:	7819      	ldrb	r1, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	3303      	adds	r3, #3
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3303      	adds	r3, #3
 800aff2:	404a      	eors	r2, r1
 800aff4:	b2d2      	uxtb	r2, r2
 800aff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3304      	adds	r3, #4
 800affc:	7819      	ldrb	r1, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	3304      	adds	r3, #4
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	3304      	adds	r3, #4
 800b008:	404a      	eors	r2, r1
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3305      	adds	r3, #5
 800b012:	7819      	ldrb	r1, [r3, #0]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	3305      	adds	r3, #5
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3305      	adds	r3, #5
 800b01e:	404a      	eors	r2, r1
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3306      	adds	r3, #6
 800b028:	7819      	ldrb	r1, [r3, #0]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	3306      	adds	r3, #6
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3306      	adds	r3, #6
 800b034:	404a      	eors	r2, r1
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3307      	adds	r3, #7
 800b03e:	7819      	ldrb	r1, [r3, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	3307      	adds	r3, #7
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3307      	adds	r3, #7
 800b04a:	404a      	eors	r2, r1
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3308      	adds	r3, #8
 800b054:	7819      	ldrb	r1, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	3308      	adds	r3, #8
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3308      	adds	r3, #8
 800b060:	404a      	eors	r2, r1
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	3309      	adds	r3, #9
 800b06a:	7819      	ldrb	r1, [r3, #0]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	3309      	adds	r3, #9
 800b070:	781a      	ldrb	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3309      	adds	r3, #9
 800b076:	404a      	eors	r2, r1
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	330a      	adds	r3, #10
 800b080:	7819      	ldrb	r1, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	330a      	adds	r3, #10
 800b086:	781a      	ldrb	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	330a      	adds	r3, #10
 800b08c:	404a      	eors	r2, r1
 800b08e:	b2d2      	uxtb	r2, r2
 800b090:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	330b      	adds	r3, #11
 800b096:	7819      	ldrb	r1, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	330b      	adds	r3, #11
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	330b      	adds	r3, #11
 800b0a2:	404a      	eors	r2, r1
 800b0a4:	b2d2      	uxtb	r2, r2
 800b0a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	330c      	adds	r3, #12
 800b0ac:	7819      	ldrb	r1, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	330c      	adds	r3, #12
 800b0b8:	404a      	eors	r2, r1
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	330d      	adds	r3, #13
 800b0c2:	7819      	ldrb	r1, [r3, #0]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	330d      	adds	r3, #13
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	330d      	adds	r3, #13
 800b0ce:	404a      	eors	r2, r1
 800b0d0:	b2d2      	uxtb	r2, r2
 800b0d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	330e      	adds	r3, #14
 800b0d8:	7819      	ldrb	r1, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	330e      	adds	r3, #14
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	330e      	adds	r3, #14
 800b0e4:	404a      	eors	r2, r1
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	330f      	adds	r3, #15
 800b0ee:	7819      	ldrb	r1, [r3, #0]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	330f      	adds	r3, #15
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	330f      	adds	r3, #15
 800b0fa:	404a      	eors	r2, r1
 800b0fc:	b2d2      	uxtb	r2, r2
 800b0fe:	701a      	strb	r2, [r3, #0]
#endif
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	bc80      	pop	{r7}
 800b108:	4770      	bx	lr

0800b10a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b10a:	b480      	push	{r7}
 800b10c:	b085      	sub	sp, #20
 800b10e:	af00      	add	r7, sp, #0
 800b110:	60f8      	str	r0, [r7, #12]
 800b112:	60b9      	str	r1, [r7, #8]
 800b114:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	781a      	ldrb	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	4053      	eors	r3, r2
 800b120:	b2da      	uxtb	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	3301      	adds	r3, #1
 800b12a:	7819      	ldrb	r1, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3301      	adds	r3, #1
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3301      	adds	r3, #1
 800b136:	404a      	eors	r2, r1
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3302      	adds	r3, #2
 800b140:	7819      	ldrb	r1, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3302      	adds	r3, #2
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3302      	adds	r3, #2
 800b14c:	404a      	eors	r2, r1
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	3303      	adds	r3, #3
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3303      	adds	r3, #3
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3303      	adds	r3, #3
 800b162:	404a      	eors	r2, r1
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	3304      	adds	r3, #4
 800b16c:	7819      	ldrb	r1, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3304      	adds	r3, #4
 800b172:	781a      	ldrb	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	3304      	adds	r3, #4
 800b178:	404a      	eors	r2, r1
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	3305      	adds	r3, #5
 800b182:	7819      	ldrb	r1, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3305      	adds	r3, #5
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3305      	adds	r3, #5
 800b18e:	404a      	eors	r2, r1
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	3306      	adds	r3, #6
 800b198:	7819      	ldrb	r1, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3306      	adds	r3, #6
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3306      	adds	r3, #6
 800b1a4:	404a      	eors	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	3307      	adds	r3, #7
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3307      	adds	r3, #7
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	404a      	eors	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	3308      	adds	r3, #8
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	404a      	eors	r2, r1
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	3309      	adds	r3, #9
 800b1da:	7819      	ldrb	r1, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3309      	adds	r3, #9
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3309      	adds	r3, #9
 800b1e6:	404a      	eors	r2, r1
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	330a      	adds	r3, #10
 800b1f0:	7819      	ldrb	r1, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	330a      	adds	r3, #10
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	330a      	adds	r3, #10
 800b1fc:	404a      	eors	r2, r1
 800b1fe:	b2d2      	uxtb	r2, r2
 800b200:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	330b      	adds	r3, #11
 800b206:	7819      	ldrb	r1, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	330b      	adds	r3, #11
 800b20c:	781a      	ldrb	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	330b      	adds	r3, #11
 800b212:	404a      	eors	r2, r1
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	330c      	adds	r3, #12
 800b21c:	7819      	ldrb	r1, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	330c      	adds	r3, #12
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	330c      	adds	r3, #12
 800b228:	404a      	eors	r2, r1
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	330d      	adds	r3, #13
 800b232:	7819      	ldrb	r1, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	330d      	adds	r3, #13
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	330d      	adds	r3, #13
 800b23e:	404a      	eors	r2, r1
 800b240:	b2d2      	uxtb	r2, r2
 800b242:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	330e      	adds	r3, #14
 800b248:	7819      	ldrb	r1, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	330e      	adds	r3, #14
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	330e      	adds	r3, #14
 800b254:	404a      	eors	r2, r1
 800b256:	b2d2      	uxtb	r2, r2
 800b258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	330f      	adds	r3, #15
 800b25e:	7819      	ldrb	r1, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	330f      	adds	r3, #15
 800b264:	781a      	ldrb	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	330f      	adds	r3, #15
 800b26a:	404a      	eors	r2, r1
 800b26c:	b2d2      	uxtb	r2, r2
 800b26e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b270:	bf00      	nop
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	bc80      	pop	{r7}
 800b278:	4770      	bx	lr

0800b27a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b082      	sub	sp, #8
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff fe88 	bl	800af9c <xor_block>
}
 800b28c:	bf00      	nop
 800b28e:	3708      	adds	r7, #8
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4b48      	ldr	r3, [pc, #288]	; (800b3c4 <shift_sub_rows+0x130>)
 800b2a4:	5c9a      	ldrb	r2, [r3, r2]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	701a      	strb	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4a43      	ldr	r2, [pc, #268]	; (800b3c4 <shift_sub_rows+0x130>)
 800b2b8:	5c52      	ldrb	r2, [r2, r1]
 800b2ba:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	4a3e      	ldr	r2, [pc, #248]	; (800b3c4 <shift_sub_rows+0x130>)
 800b2ca:	5c52      	ldrb	r2, [r2, r1]
 800b2cc:	701a      	strb	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	330c      	adds	r3, #12
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	330c      	adds	r3, #12
 800b2da:	4a3a      	ldr	r2, [pc, #232]	; (800b3c4 <shift_sub_rows+0x130>)
 800b2dc:	5c52      	ldrb	r2, [r2, r1]
 800b2de:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	785b      	ldrb	r3, [r3, #1]
 800b2e4:	73fb      	strb	r3, [r7, #15]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3305      	adds	r3, #5
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4a34      	ldr	r2, [pc, #208]	; (800b3c4 <shift_sub_rows+0x130>)
 800b2f4:	5c52      	ldrb	r2, [r2, r1]
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3309      	adds	r3, #9
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	4619      	mov	r1, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3305      	adds	r3, #5
 800b304:	4a2f      	ldr	r2, [pc, #188]	; (800b3c4 <shift_sub_rows+0x130>)
 800b306:	5c52      	ldrb	r2, [r2, r1]
 800b308:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	330d      	adds	r3, #13
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3309      	adds	r3, #9
 800b316:	4a2b      	ldr	r2, [pc, #172]	; (800b3c4 <shift_sub_rows+0x130>)
 800b318:	5c52      	ldrb	r2, [r2, r1]
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	7bfa      	ldrb	r2, [r7, #15]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	330d      	adds	r3, #13
 800b322:	4928      	ldr	r1, [pc, #160]	; (800b3c4 <shift_sub_rows+0x130>)
 800b324:	5c8a      	ldrb	r2, [r1, r2]
 800b326:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	789b      	ldrb	r3, [r3, #2]
 800b32c:	73fb      	strb	r3, [r7, #15]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	330a      	adds	r3, #10
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3302      	adds	r3, #2
 800b33a:	4a22      	ldr	r2, [pc, #136]	; (800b3c4 <shift_sub_rows+0x130>)
 800b33c:	5c52      	ldrb	r2, [r2, r1]
 800b33e:	701a      	strb	r2, [r3, #0]
 800b340:	7bfa      	ldrb	r2, [r7, #15]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	330a      	adds	r3, #10
 800b346:	491f      	ldr	r1, [pc, #124]	; (800b3c4 <shift_sub_rows+0x130>)
 800b348:	5c8a      	ldrb	r2, [r1, r2]
 800b34a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	799b      	ldrb	r3, [r3, #6]
 800b350:	73fb      	strb	r3, [r7, #15]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	330e      	adds	r3, #14
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	4619      	mov	r1, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	3306      	adds	r3, #6
 800b35e:	4a19      	ldr	r2, [pc, #100]	; (800b3c4 <shift_sub_rows+0x130>)
 800b360:	5c52      	ldrb	r2, [r2, r1]
 800b362:	701a      	strb	r2, [r3, #0]
 800b364:	7bfa      	ldrb	r2, [r7, #15]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	330e      	adds	r3, #14
 800b36a:	4916      	ldr	r1, [pc, #88]	; (800b3c4 <shift_sub_rows+0x130>)
 800b36c:	5c8a      	ldrb	r2, [r1, r2]
 800b36e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	7bdb      	ldrb	r3, [r3, #15]
 800b374:	73fb      	strb	r3, [r7, #15]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	330b      	adds	r3, #11
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	330f      	adds	r3, #15
 800b382:	4a10      	ldr	r2, [pc, #64]	; (800b3c4 <shift_sub_rows+0x130>)
 800b384:	5c52      	ldrb	r2, [r2, r1]
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	3307      	adds	r3, #7
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	330b      	adds	r3, #11
 800b394:	4a0b      	ldr	r2, [pc, #44]	; (800b3c4 <shift_sub_rows+0x130>)
 800b396:	5c52      	ldrb	r2, [r2, r1]
 800b398:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3303      	adds	r3, #3
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	3307      	adds	r3, #7
 800b3a6:	4a07      	ldr	r2, [pc, #28]	; (800b3c4 <shift_sub_rows+0x130>)
 800b3a8:	5c52      	ldrb	r2, [r2, r1]
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	7bfa      	ldrb	r2, [r7, #15]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3303      	adds	r3, #3
 800b3b2:	4904      	ldr	r1, [pc, #16]	; (800b3c4 <shift_sub_rows+0x130>)
 800b3b4:	5c8a      	ldrb	r2, [r1, r2]
 800b3b6:	701a      	strb	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	0801b70c 	.word	0x0801b70c

0800b3c8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b3d0:	f107 0308 	add.w	r3, r7, #8
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff fd6c 	bl	800aeb4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b3dc:	7a3b      	ldrb	r3, [r7, #8]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b9a      	ldr	r3, [pc, #616]	; (800b64c <mix_sub_columns+0x284>)
 800b3e2:	5c9a      	ldrb	r2, [r3, r2]
 800b3e4:	7b7b      	ldrb	r3, [r7, #13]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4b99      	ldr	r3, [pc, #612]	; (800b650 <mix_sub_columns+0x288>)
 800b3ea:	5c5b      	ldrb	r3, [r3, r1]
 800b3ec:	4053      	eors	r3, r2
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	7cbb      	ldrb	r3, [r7, #18]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4b97      	ldr	r3, [pc, #604]	; (800b654 <mix_sub_columns+0x28c>)
 800b3f6:	5c5b      	ldrb	r3, [r3, r1]
 800b3f8:	4053      	eors	r3, r2
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	7dfb      	ldrb	r3, [r7, #23]
 800b3fe:	4619      	mov	r1, r3
 800b400:	4b94      	ldr	r3, [pc, #592]	; (800b654 <mix_sub_columns+0x28c>)
 800b402:	5c5b      	ldrb	r3, [r3, r1]
 800b404:	4053      	eors	r3, r2
 800b406:	b2da      	uxtb	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b40c:	7a3b      	ldrb	r3, [r7, #8]
 800b40e:	461a      	mov	r2, r3
 800b410:	4b90      	ldr	r3, [pc, #576]	; (800b654 <mix_sub_columns+0x28c>)
 800b412:	5c9a      	ldrb	r2, [r3, r2]
 800b414:	7b7b      	ldrb	r3, [r7, #13]
 800b416:	4619      	mov	r1, r3
 800b418:	4b8c      	ldr	r3, [pc, #560]	; (800b64c <mix_sub_columns+0x284>)
 800b41a:	5c5b      	ldrb	r3, [r3, r1]
 800b41c:	4053      	eors	r3, r2
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	7cbb      	ldrb	r3, [r7, #18]
 800b422:	4619      	mov	r1, r3
 800b424:	4b8a      	ldr	r3, [pc, #552]	; (800b650 <mix_sub_columns+0x288>)
 800b426:	5c5b      	ldrb	r3, [r3, r1]
 800b428:	4053      	eors	r3, r2
 800b42a:	b2d9      	uxtb	r1, r3
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	461a      	mov	r2, r3
 800b430:	4b88      	ldr	r3, [pc, #544]	; (800b654 <mix_sub_columns+0x28c>)
 800b432:	5c9a      	ldrb	r2, [r3, r2]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3301      	adds	r3, #1
 800b438:	404a      	eors	r2, r1
 800b43a:	b2d2      	uxtb	r2, r2
 800b43c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b43e:	7a3b      	ldrb	r3, [r7, #8]
 800b440:	461a      	mov	r2, r3
 800b442:	4b84      	ldr	r3, [pc, #528]	; (800b654 <mix_sub_columns+0x28c>)
 800b444:	5c9a      	ldrb	r2, [r3, r2]
 800b446:	7b7b      	ldrb	r3, [r7, #13]
 800b448:	4619      	mov	r1, r3
 800b44a:	4b82      	ldr	r3, [pc, #520]	; (800b654 <mix_sub_columns+0x28c>)
 800b44c:	5c5b      	ldrb	r3, [r3, r1]
 800b44e:	4053      	eors	r3, r2
 800b450:	b2da      	uxtb	r2, r3
 800b452:	7cbb      	ldrb	r3, [r7, #18]
 800b454:	4619      	mov	r1, r3
 800b456:	4b7d      	ldr	r3, [pc, #500]	; (800b64c <mix_sub_columns+0x284>)
 800b458:	5c5b      	ldrb	r3, [r3, r1]
 800b45a:	4053      	eors	r3, r2
 800b45c:	b2d9      	uxtb	r1, r3
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	461a      	mov	r2, r3
 800b462:	4b7b      	ldr	r3, [pc, #492]	; (800b650 <mix_sub_columns+0x288>)
 800b464:	5c9a      	ldrb	r2, [r3, r2]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	3302      	adds	r3, #2
 800b46a:	404a      	eors	r2, r1
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b470:	7a3b      	ldrb	r3, [r7, #8]
 800b472:	461a      	mov	r2, r3
 800b474:	4b76      	ldr	r3, [pc, #472]	; (800b650 <mix_sub_columns+0x288>)
 800b476:	5c9a      	ldrb	r2, [r3, r2]
 800b478:	7b7b      	ldrb	r3, [r7, #13]
 800b47a:	4619      	mov	r1, r3
 800b47c:	4b75      	ldr	r3, [pc, #468]	; (800b654 <mix_sub_columns+0x28c>)
 800b47e:	5c5b      	ldrb	r3, [r3, r1]
 800b480:	4053      	eors	r3, r2
 800b482:	b2da      	uxtb	r2, r3
 800b484:	7cbb      	ldrb	r3, [r7, #18]
 800b486:	4619      	mov	r1, r3
 800b488:	4b72      	ldr	r3, [pc, #456]	; (800b654 <mix_sub_columns+0x28c>)
 800b48a:	5c5b      	ldrb	r3, [r3, r1]
 800b48c:	4053      	eors	r3, r2
 800b48e:	b2d9      	uxtb	r1, r3
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	461a      	mov	r2, r3
 800b494:	4b6d      	ldr	r3, [pc, #436]	; (800b64c <mix_sub_columns+0x284>)
 800b496:	5c9a      	ldrb	r2, [r3, r2]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3303      	adds	r3, #3
 800b49c:	404a      	eors	r2, r1
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b4a2:	7b3b      	ldrb	r3, [r7, #12]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	4b69      	ldr	r3, [pc, #420]	; (800b64c <mix_sub_columns+0x284>)
 800b4a8:	5c9a      	ldrb	r2, [r3, r2]
 800b4aa:	7c7b      	ldrb	r3, [r7, #17]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4b68      	ldr	r3, [pc, #416]	; (800b650 <mix_sub_columns+0x288>)
 800b4b0:	5c5b      	ldrb	r3, [r3, r1]
 800b4b2:	4053      	eors	r3, r2
 800b4b4:	b2da      	uxtb	r2, r3
 800b4b6:	7dbb      	ldrb	r3, [r7, #22]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	4b66      	ldr	r3, [pc, #408]	; (800b654 <mix_sub_columns+0x28c>)
 800b4bc:	5c5b      	ldrb	r3, [r3, r1]
 800b4be:	4053      	eors	r3, r2
 800b4c0:	b2d9      	uxtb	r1, r3
 800b4c2:	7afb      	ldrb	r3, [r7, #11]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4b63      	ldr	r3, [pc, #396]	; (800b654 <mix_sub_columns+0x28c>)
 800b4c8:	5c9a      	ldrb	r2, [r3, r2]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	404a      	eors	r2, r1
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b4d4:	7b3b      	ldrb	r3, [r7, #12]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4b5e      	ldr	r3, [pc, #376]	; (800b654 <mix_sub_columns+0x28c>)
 800b4da:	5c9a      	ldrb	r2, [r3, r2]
 800b4dc:	7c7b      	ldrb	r3, [r7, #17]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4b5a      	ldr	r3, [pc, #360]	; (800b64c <mix_sub_columns+0x284>)
 800b4e2:	5c5b      	ldrb	r3, [r3, r1]
 800b4e4:	4053      	eors	r3, r2
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4b58      	ldr	r3, [pc, #352]	; (800b650 <mix_sub_columns+0x288>)
 800b4ee:	5c5b      	ldrb	r3, [r3, r1]
 800b4f0:	4053      	eors	r3, r2
 800b4f2:	b2d9      	uxtb	r1, r3
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4b56      	ldr	r3, [pc, #344]	; (800b654 <mix_sub_columns+0x28c>)
 800b4fa:	5c9a      	ldrb	r2, [r3, r2]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3305      	adds	r3, #5
 800b500:	404a      	eors	r2, r1
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b506:	7b3b      	ldrb	r3, [r7, #12]
 800b508:	461a      	mov	r2, r3
 800b50a:	4b52      	ldr	r3, [pc, #328]	; (800b654 <mix_sub_columns+0x28c>)
 800b50c:	5c9a      	ldrb	r2, [r3, r2]
 800b50e:	7c7b      	ldrb	r3, [r7, #17]
 800b510:	4619      	mov	r1, r3
 800b512:	4b50      	ldr	r3, [pc, #320]	; (800b654 <mix_sub_columns+0x28c>)
 800b514:	5c5b      	ldrb	r3, [r3, r1]
 800b516:	4053      	eors	r3, r2
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	7dbb      	ldrb	r3, [r7, #22]
 800b51c:	4619      	mov	r1, r3
 800b51e:	4b4b      	ldr	r3, [pc, #300]	; (800b64c <mix_sub_columns+0x284>)
 800b520:	5c5b      	ldrb	r3, [r3, r1]
 800b522:	4053      	eors	r3, r2
 800b524:	b2d9      	uxtb	r1, r3
 800b526:	7afb      	ldrb	r3, [r7, #11]
 800b528:	461a      	mov	r2, r3
 800b52a:	4b49      	ldr	r3, [pc, #292]	; (800b650 <mix_sub_columns+0x288>)
 800b52c:	5c9a      	ldrb	r2, [r3, r2]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3306      	adds	r3, #6
 800b532:	404a      	eors	r2, r1
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b538:	7b3b      	ldrb	r3, [r7, #12]
 800b53a:	461a      	mov	r2, r3
 800b53c:	4b44      	ldr	r3, [pc, #272]	; (800b650 <mix_sub_columns+0x288>)
 800b53e:	5c9a      	ldrb	r2, [r3, r2]
 800b540:	7c7b      	ldrb	r3, [r7, #17]
 800b542:	4619      	mov	r1, r3
 800b544:	4b43      	ldr	r3, [pc, #268]	; (800b654 <mix_sub_columns+0x28c>)
 800b546:	5c5b      	ldrb	r3, [r3, r1]
 800b548:	4053      	eors	r3, r2
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	7dbb      	ldrb	r3, [r7, #22]
 800b54e:	4619      	mov	r1, r3
 800b550:	4b40      	ldr	r3, [pc, #256]	; (800b654 <mix_sub_columns+0x28c>)
 800b552:	5c5b      	ldrb	r3, [r3, r1]
 800b554:	4053      	eors	r3, r2
 800b556:	b2d9      	uxtb	r1, r3
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	461a      	mov	r2, r3
 800b55c:	4b3b      	ldr	r3, [pc, #236]	; (800b64c <mix_sub_columns+0x284>)
 800b55e:	5c9a      	ldrb	r2, [r3, r2]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3307      	adds	r3, #7
 800b564:	404a      	eors	r2, r1
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b56a:	7c3b      	ldrb	r3, [r7, #16]
 800b56c:	461a      	mov	r2, r3
 800b56e:	4b37      	ldr	r3, [pc, #220]	; (800b64c <mix_sub_columns+0x284>)
 800b570:	5c9a      	ldrb	r2, [r3, r2]
 800b572:	7d7b      	ldrb	r3, [r7, #21]
 800b574:	4619      	mov	r1, r3
 800b576:	4b36      	ldr	r3, [pc, #216]	; (800b650 <mix_sub_columns+0x288>)
 800b578:	5c5b      	ldrb	r3, [r3, r1]
 800b57a:	4053      	eors	r3, r2
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	7abb      	ldrb	r3, [r7, #10]
 800b580:	4619      	mov	r1, r3
 800b582:	4b34      	ldr	r3, [pc, #208]	; (800b654 <mix_sub_columns+0x28c>)
 800b584:	5c5b      	ldrb	r3, [r3, r1]
 800b586:	4053      	eors	r3, r2
 800b588:	b2d9      	uxtb	r1, r3
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b31      	ldr	r3, [pc, #196]	; (800b654 <mix_sub_columns+0x28c>)
 800b590:	5c9a      	ldrb	r2, [r3, r2]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	3308      	adds	r3, #8
 800b596:	404a      	eors	r2, r1
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b59c:	7c3b      	ldrb	r3, [r7, #16]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4b2c      	ldr	r3, [pc, #176]	; (800b654 <mix_sub_columns+0x28c>)
 800b5a2:	5c9a      	ldrb	r2, [r3, r2]
 800b5a4:	7d7b      	ldrb	r3, [r7, #21]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4b28      	ldr	r3, [pc, #160]	; (800b64c <mix_sub_columns+0x284>)
 800b5aa:	5c5b      	ldrb	r3, [r3, r1]
 800b5ac:	4053      	eors	r3, r2
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	7abb      	ldrb	r3, [r7, #10]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	4b26      	ldr	r3, [pc, #152]	; (800b650 <mix_sub_columns+0x288>)
 800b5b6:	5c5b      	ldrb	r3, [r3, r1]
 800b5b8:	4053      	eors	r3, r2
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4b24      	ldr	r3, [pc, #144]	; (800b654 <mix_sub_columns+0x28c>)
 800b5c2:	5c9a      	ldrb	r2, [r3, r2]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3309      	adds	r3, #9
 800b5c8:	404a      	eors	r2, r1
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b5ce:	7c3b      	ldrb	r3, [r7, #16]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4b20      	ldr	r3, [pc, #128]	; (800b654 <mix_sub_columns+0x28c>)
 800b5d4:	5c9a      	ldrb	r2, [r3, r2]
 800b5d6:	7d7b      	ldrb	r3, [r7, #21]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <mix_sub_columns+0x28c>)
 800b5dc:	5c5b      	ldrb	r3, [r3, r1]
 800b5de:	4053      	eors	r3, r2
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	7abb      	ldrb	r3, [r7, #10]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4b19      	ldr	r3, [pc, #100]	; (800b64c <mix_sub_columns+0x284>)
 800b5e8:	5c5b      	ldrb	r3, [r3, r1]
 800b5ea:	4053      	eors	r3, r2
 800b5ec:	b2d9      	uxtb	r1, r3
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <mix_sub_columns+0x288>)
 800b5f4:	5c9a      	ldrb	r2, [r3, r2]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	330a      	adds	r3, #10
 800b5fa:	404a      	eors	r2, r1
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b600:	7c3b      	ldrb	r3, [r7, #16]
 800b602:	461a      	mov	r2, r3
 800b604:	4b12      	ldr	r3, [pc, #72]	; (800b650 <mix_sub_columns+0x288>)
 800b606:	5c9a      	ldrb	r2, [r3, r2]
 800b608:	7d7b      	ldrb	r3, [r7, #21]
 800b60a:	4619      	mov	r1, r3
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <mix_sub_columns+0x28c>)
 800b60e:	5c5b      	ldrb	r3, [r3, r1]
 800b610:	4053      	eors	r3, r2
 800b612:	b2da      	uxtb	r2, r3
 800b614:	7abb      	ldrb	r3, [r7, #10]
 800b616:	4619      	mov	r1, r3
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <mix_sub_columns+0x28c>)
 800b61a:	5c5b      	ldrb	r3, [r3, r1]
 800b61c:	4053      	eors	r3, r2
 800b61e:	b2d9      	uxtb	r1, r3
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	461a      	mov	r2, r3
 800b624:	4b09      	ldr	r3, [pc, #36]	; (800b64c <mix_sub_columns+0x284>)
 800b626:	5c9a      	ldrb	r2, [r3, r2]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	330b      	adds	r3, #11
 800b62c:	404a      	eors	r2, r1
 800b62e:	b2d2      	uxtb	r2, r2
 800b630:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b632:	7d3b      	ldrb	r3, [r7, #20]
 800b634:	461a      	mov	r2, r3
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <mix_sub_columns+0x284>)
 800b638:	5c9a      	ldrb	r2, [r3, r2]
 800b63a:	7a7b      	ldrb	r3, [r7, #9]
 800b63c:	4619      	mov	r1, r3
 800b63e:	4b04      	ldr	r3, [pc, #16]	; (800b650 <mix_sub_columns+0x288>)
 800b640:	5c5b      	ldrb	r3, [r3, r1]
 800b642:	4053      	eors	r3, r2
 800b644:	b2da      	uxtb	r2, r3
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	4619      	mov	r1, r3
 800b64a:	e005      	b.n	800b658 <mix_sub_columns+0x290>
 800b64c:	0801b80c 	.word	0x0801b80c
 800b650:	0801b90c 	.word	0x0801b90c
 800b654:	0801b70c 	.word	0x0801b70c
 800b658:	4b2d      	ldr	r3, [pc, #180]	; (800b710 <mix_sub_columns+0x348>)
 800b65a:	5c5b      	ldrb	r3, [r3, r1]
 800b65c:	4053      	eors	r3, r2
 800b65e:	b2d9      	uxtb	r1, r3
 800b660:	7cfb      	ldrb	r3, [r7, #19]
 800b662:	461a      	mov	r2, r3
 800b664:	4b2a      	ldr	r3, [pc, #168]	; (800b710 <mix_sub_columns+0x348>)
 800b666:	5c9a      	ldrb	r2, [r3, r2]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	330c      	adds	r3, #12
 800b66c:	404a      	eors	r2, r1
 800b66e:	b2d2      	uxtb	r2, r2
 800b670:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b672:	7d3b      	ldrb	r3, [r7, #20]
 800b674:	461a      	mov	r2, r3
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <mix_sub_columns+0x348>)
 800b678:	5c9a      	ldrb	r2, [r3, r2]
 800b67a:	7a7b      	ldrb	r3, [r7, #9]
 800b67c:	4619      	mov	r1, r3
 800b67e:	4b25      	ldr	r3, [pc, #148]	; (800b714 <mix_sub_columns+0x34c>)
 800b680:	5c5b      	ldrb	r3, [r3, r1]
 800b682:	4053      	eors	r3, r2
 800b684:	b2da      	uxtb	r2, r3
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	4619      	mov	r1, r3
 800b68a:	4b23      	ldr	r3, [pc, #140]	; (800b718 <mix_sub_columns+0x350>)
 800b68c:	5c5b      	ldrb	r3, [r3, r1]
 800b68e:	4053      	eors	r3, r2
 800b690:	b2d9      	uxtb	r1, r3
 800b692:	7cfb      	ldrb	r3, [r7, #19]
 800b694:	461a      	mov	r2, r3
 800b696:	4b1e      	ldr	r3, [pc, #120]	; (800b710 <mix_sub_columns+0x348>)
 800b698:	5c9a      	ldrb	r2, [r3, r2]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	330d      	adds	r3, #13
 800b69e:	404a      	eors	r2, r1
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b6a4:	7d3b      	ldrb	r3, [r7, #20]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	4b19      	ldr	r3, [pc, #100]	; (800b710 <mix_sub_columns+0x348>)
 800b6aa:	5c9a      	ldrb	r2, [r3, r2]
 800b6ac:	7a7b      	ldrb	r3, [r7, #9]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4b17      	ldr	r3, [pc, #92]	; (800b710 <mix_sub_columns+0x348>)
 800b6b2:	5c5b      	ldrb	r3, [r3, r1]
 800b6b4:	4053      	eors	r3, r2
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4b15      	ldr	r3, [pc, #84]	; (800b714 <mix_sub_columns+0x34c>)
 800b6be:	5c5b      	ldrb	r3, [r3, r1]
 800b6c0:	4053      	eors	r3, r2
 800b6c2:	b2d9      	uxtb	r1, r3
 800b6c4:	7cfb      	ldrb	r3, [r7, #19]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4b13      	ldr	r3, [pc, #76]	; (800b718 <mix_sub_columns+0x350>)
 800b6ca:	5c9a      	ldrb	r2, [r3, r2]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	330e      	adds	r3, #14
 800b6d0:	404a      	eors	r2, r1
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b6d6:	7d3b      	ldrb	r3, [r7, #20]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <mix_sub_columns+0x350>)
 800b6dc:	5c9a      	ldrb	r2, [r3, r2]
 800b6de:	7a7b      	ldrb	r3, [r7, #9]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <mix_sub_columns+0x348>)
 800b6e4:	5c5b      	ldrb	r3, [r3, r1]
 800b6e6:	4053      	eors	r3, r2
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	7bbb      	ldrb	r3, [r7, #14]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4b08      	ldr	r3, [pc, #32]	; (800b710 <mix_sub_columns+0x348>)
 800b6f0:	5c5b      	ldrb	r3, [r3, r1]
 800b6f2:	4053      	eors	r3, r2
 800b6f4:	b2d9      	uxtb	r1, r3
 800b6f6:	7cfb      	ldrb	r3, [r7, #19]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	4b06      	ldr	r3, [pc, #24]	; (800b714 <mix_sub_columns+0x34c>)
 800b6fc:	5c9a      	ldrb	r2, [r3, r2]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	330f      	adds	r3, #15
 800b702:	404a      	eors	r2, r1
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	701a      	strb	r2, [r3, #0]
  }
 800b708:	bf00      	nop
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0801b70c 	.word	0x0801b70c
 800b714:	0801b80c 	.word	0x0801b80c
 800b718:	0801b90c 	.word	0x0801b90c

0800b71c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	460b      	mov	r3, r1
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b72a:	7afb      	ldrb	r3, [r7, #11]
 800b72c:	3b10      	subs	r3, #16
 800b72e:	2b10      	cmp	r3, #16
 800b730:	bf8c      	ite	hi
 800b732:	2201      	movhi	r2, #1
 800b734:	2200      	movls	r2, #0
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d10d      	bne.n	800b758 <lorawan_aes_set_key+0x3c>
 800b73c:	2201      	movs	r2, #1
 800b73e:	fa02 f303 	lsl.w	r3, r2, r3
 800b742:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bf14      	ite	ne
 800b74e:	2301      	movne	r3, #1
 800b750:	2300      	moveq	r3, #0
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b00      	cmp	r3, #0
 800b756:	d105      	bne.n	800b764 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b760:	23ff      	movs	r3, #255	; 0xff
 800b762:	e0b2      	b.n	800b8ca <lorawan_aes_set_key+0x1ae>
        break;
 800b764:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7afa      	ldrb	r2, [r7, #11]
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fbfa 	bl	800af66 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	331c      	adds	r3, #28
 800b776:	b2db      	uxtb	r3, r3
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b77c:	7c7b      	ldrb	r3, [r7, #17]
 800b77e:	091b      	lsrs	r3, r3, #4
 800b780:	b2db      	uxtb	r3, r3
 800b782:	3b01      	subs	r3, #1
 800b784:	b2da      	uxtb	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b78c:	7afb      	ldrb	r3, [r7, #11]
 800b78e:	75fb      	strb	r3, [r7, #23]
 800b790:	2301      	movs	r3, #1
 800b792:	75bb      	strb	r3, [r7, #22]
 800b794:	e093      	b.n	800b8be <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	3b04      	subs	r3, #4
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	5cd3      	ldrb	r3, [r2, r3]
 800b79e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	3b03      	subs	r3, #3
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	5cd3      	ldrb	r3, [r2, r3]
 800b7a8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b7aa:	7dfb      	ldrb	r3, [r7, #23]
 800b7ac:	3b02      	subs	r3, #2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	5cd3      	ldrb	r3, [r2, r3]
 800b7b2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	5cd3      	ldrb	r3, [r2, r3]
 800b7bc:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b7be:	7dfb      	ldrb	r3, [r7, #23]
 800b7c0:	7afa      	ldrb	r2, [r7, #11]
 800b7c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7c6:	fb02 f201 	mul.w	r2, r2, r1
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d127      	bne.n	800b822 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b7d2:	7d7b      	ldrb	r3, [r7, #21]
 800b7d4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b7d6:	7d3b      	ldrb	r3, [r7, #20]
 800b7d8:	4a3e      	ldr	r2, [pc, #248]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b7da:	5cd2      	ldrb	r2, [r2, r3]
 800b7dc:	7dbb      	ldrb	r3, [r7, #22]
 800b7de:	4053      	eors	r3, r2
 800b7e0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b7e2:	7cfb      	ldrb	r3, [r7, #19]
 800b7e4:	4a3b      	ldr	r2, [pc, #236]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b7e6:	5cd3      	ldrb	r3, [r2, r3]
 800b7e8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b7ea:	7cbb      	ldrb	r3, [r7, #18]
 800b7ec:	4a39      	ldr	r2, [pc, #228]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b7ee:	5cd3      	ldrb	r3, [r2, r3]
 800b7f0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b7f2:	7c3b      	ldrb	r3, [r7, #16]
 800b7f4:	4a37      	ldr	r2, [pc, #220]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b7f6:	5cd3      	ldrb	r3, [r2, r3]
 800b7f8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b7fa:	7dbb      	ldrb	r3, [r7, #22]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	b25a      	sxtb	r2, r3
 800b800:	7dbb      	ldrb	r3, [r7, #22]
 800b802:	09db      	lsrs	r3, r3, #7
 800b804:	b2db      	uxtb	r3, r3
 800b806:	4619      	mov	r1, r3
 800b808:	0049      	lsls	r1, r1, #1
 800b80a:	440b      	add	r3, r1
 800b80c:	4619      	mov	r1, r3
 800b80e:	00c8      	lsls	r0, r1, #3
 800b810:	4619      	mov	r1, r3
 800b812:	4603      	mov	r3, r0
 800b814:	440b      	add	r3, r1
 800b816:	b2db      	uxtb	r3, r3
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	4053      	eors	r3, r2
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	75bb      	strb	r3, [r7, #22]
 800b820:	e01c      	b.n	800b85c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b822:	7afb      	ldrb	r3, [r7, #11]
 800b824:	2b18      	cmp	r3, #24
 800b826:	d919      	bls.n	800b85c <lorawan_aes_set_key+0x140>
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	7afa      	ldrb	r2, [r7, #11]
 800b82c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b830:	fb02 f201 	mul.w	r2, r2, r1
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	2b10      	cmp	r3, #16
 800b83a:	d10f      	bne.n	800b85c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b83c:	7d7b      	ldrb	r3, [r7, #21]
 800b83e:	4a25      	ldr	r2, [pc, #148]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b844:	7d3b      	ldrb	r3, [r7, #20]
 800b846:	4a23      	ldr	r2, [pc, #140]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b848:	5cd3      	ldrb	r3, [r2, r3]
 800b84a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b84c:	7cfb      	ldrb	r3, [r7, #19]
 800b84e:	4a21      	ldr	r2, [pc, #132]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b850:	5cd3      	ldrb	r3, [r2, r3]
 800b852:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b854:	7cbb      	ldrb	r3, [r7, #18]
 800b856:	4a1f      	ldr	r2, [pc, #124]	; (800b8d4 <lorawan_aes_set_key+0x1b8>)
 800b858:	5cd3      	ldrb	r3, [r2, r3]
 800b85a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b85c:	7dfa      	ldrb	r2, [r7, #23]
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b864:	7c3b      	ldrb	r3, [r7, #16]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	5cd1      	ldrb	r1, [r2, r3]
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	7d7a      	ldrb	r2, [r7, #21]
 800b86e:	404a      	eors	r2, r1
 800b870:	b2d1      	uxtb	r1, r2
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b876:	7c3b      	ldrb	r3, [r7, #16]
 800b878:	3301      	adds	r3, #1
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	5cd1      	ldrb	r1, [r2, r3]
 800b87e:	7dfb      	ldrb	r3, [r7, #23]
 800b880:	3301      	adds	r3, #1
 800b882:	7d3a      	ldrb	r2, [r7, #20]
 800b884:	404a      	eors	r2, r1
 800b886:	b2d1      	uxtb	r1, r2
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b88c:	7c3b      	ldrb	r3, [r7, #16]
 800b88e:	3302      	adds	r3, #2
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	5cd1      	ldrb	r1, [r2, r3]
 800b894:	7dfb      	ldrb	r3, [r7, #23]
 800b896:	3302      	adds	r3, #2
 800b898:	7cfa      	ldrb	r2, [r7, #19]
 800b89a:	404a      	eors	r2, r1
 800b89c:	b2d1      	uxtb	r1, r2
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b8a2:	7c3b      	ldrb	r3, [r7, #16]
 800b8a4:	3303      	adds	r3, #3
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	5cd1      	ldrb	r1, [r2, r3]
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	3303      	adds	r3, #3
 800b8ae:	7cba      	ldrb	r2, [r7, #18]
 800b8b0:	404a      	eors	r2, r1
 800b8b2:	b2d1      	uxtb	r1, r2
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	75fb      	strb	r3, [r7, #23]
 800b8be:	7dfa      	ldrb	r2, [r7, #23]
 800b8c0:	7c7b      	ldrb	r3, [r7, #17]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	f4ff af67 	bcc.w	800b796 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0801b70c 	.word	0x0801b70c

0800b8d8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08a      	sub	sp, #40	; 0x28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d038      	beq.n	800b960 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	68f9      	ldr	r1, [r7, #12]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7ff fc07 	bl	800b10a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b902:	e014      	b.n	800b92e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b904:	f107 0314 	add.w	r3, r7, #20
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff fd5d 	bl	800b3c8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b914:	0112      	lsls	r2, r2, #4
 800b916:	441a      	add	r2, r3
 800b918:	f107 0314 	add.w	r3, r7, #20
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fcab 	bl	800b27a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b928:	3301      	adds	r3, #1
 800b92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b934:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b938:	429a      	cmp	r2, r3
 800b93a:	d3e3      	bcc.n	800b904 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b93c:	f107 0314 	add.w	r3, r7, #20
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fca7 	bl	800b294 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b94c:	0112      	lsls	r2, r2, #4
 800b94e:	441a      	add	r2, r3
 800b950:	f107 0314 	add.w	r3, r7, #20
 800b954:	4619      	mov	r1, r3
 800b956:	68b8      	ldr	r0, [r7, #8]
 800b958:	f7ff fbd7 	bl	800b10a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	e000      	b.n	800b962 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b960:	23ff      	movs	r3, #255	; 0xff
}
 800b962:	4618      	mov	r0, r3
 800b964:	3728      	adds	r7, #40	; 0x28
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96e:	b09d      	sub	sp, #116	; 0x74
 800b970:	af10      	add	r7, sp, #64	; 0x40
 800b972:	4603      	mov	r3, r0
 800b974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b978:	2306      	movs	r3, #6
 800b97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b97e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b986:	4611      	mov	r1, r2
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fa05 	bl	800bd98 <SecureElementGetKeyByID>
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 80b0 	bne.w	800bafe <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b9a6:	4b58      	ldr	r3, [pc, #352]	; (800bb08 <PrintKey+0x19c>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	2002      	movs	r0, #2
 800b9ae:	f00e fe73 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800b9b2:	e056      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d106      	bne.n	800b9ca <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b9bc:	4b53      	ldr	r3, [pc, #332]	; (800bb0c <PrintKey+0x1a0>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	2002      	movs	r0, #2
 800b9c4:	f00e fe68 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800b9c8:	e04b      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d106      	bne.n	800b9e0 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b9d2:	4b4f      	ldr	r3, [pc, #316]	; (800bb10 <PrintKey+0x1a4>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	2002      	movs	r0, #2
 800b9da:	f00e fe5d 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800b9de:	e040      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d106      	bne.n	800b9f6 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b9e8:	4b4a      	ldr	r3, [pc, #296]	; (800bb14 <PrintKey+0x1a8>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2002      	movs	r0, #2
 800b9f0:	f00e fe52 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800b9f4:	e035      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d106      	bne.n	800ba0c <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b9fe:	4b46      	ldr	r3, [pc, #280]	; (800bb18 <PrintKey+0x1ac>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	2100      	movs	r1, #0
 800ba04:	2002      	movs	r0, #2
 800ba06:	f00e fe47 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800ba0a:	e02a      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ba0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba10:	2b7f      	cmp	r3, #127	; 0x7f
 800ba12:	d106      	bne.n	800ba22 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ba14:	4b41      	ldr	r3, [pc, #260]	; (800bb1c <PrintKey+0x1b0>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2002      	movs	r0, #2
 800ba1c:	f00e fe3c 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800ba20:	e01f      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ba22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba26:	2b80      	cmp	r3, #128	; 0x80
 800ba28:	d106      	bne.n	800ba38 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ba2a:	4b3d      	ldr	r3, [pc, #244]	; (800bb20 <PrintKey+0x1b4>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2100      	movs	r1, #0
 800ba30:	2002      	movs	r0, #2
 800ba32:	f00e fe31 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800ba36:	e014      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ba38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba3c:	2b81      	cmp	r3, #129	; 0x81
 800ba3e:	d106      	bne.n	800ba4e <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ba40:	4b38      	ldr	r3, [pc, #224]	; (800bb24 <PrintKey+0x1b8>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	2100      	movs	r1, #0
 800ba46:	2002      	movs	r0, #2
 800ba48:	f00e fe26 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 800ba4c:	e009      	b.n	800ba62 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ba4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba52:	2b82      	cmp	r3, #130	; 0x82
 800ba54:	d105      	bne.n	800ba62 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ba56:	4b34      	ldr	r3, [pc, #208]	; (800bb28 <PrintKey+0x1bc>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	2002      	movs	r0, #2
 800ba5e:	f00e fe1b 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	785b      	ldrb	r3, [r3, #1]
 800ba66:	4618      	mov	r0, r3
 800ba68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6a:	789b      	ldrb	r3, [r3, #2]
 800ba6c:	461c      	mov	r4, r3
 800ba6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba70:	78db      	ldrb	r3, [r3, #3]
 800ba72:	461d      	mov	r5, r3
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	791b      	ldrb	r3, [r3, #4]
 800ba78:	461e      	mov	r6, r3
 800ba7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7c:	795b      	ldrb	r3, [r3, #5]
 800ba7e:	623b      	str	r3, [r7, #32]
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	799b      	ldrb	r3, [r3, #6]
 800ba84:	61fb      	str	r3, [r7, #28]
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	79db      	ldrb	r3, [r3, #7]
 800ba8a:	61bb      	str	r3, [r7, #24]
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	7a1b      	ldrb	r3, [r3, #8]
 800ba90:	617b      	str	r3, [r7, #20]
 800ba92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba94:	7a5b      	ldrb	r3, [r3, #9]
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9a:	7a9b      	ldrb	r3, [r3, #10]
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	7adb      	ldrb	r3, [r3, #11]
 800baa2:	60bb      	str	r3, [r7, #8]
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	7b1b      	ldrb	r3, [r3, #12]
 800baa8:	607b      	str	r3, [r7, #4]
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	7b5b      	ldrb	r3, [r3, #13]
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	7b9b      	ldrb	r3, [r3, #14]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	7bdb      	ldrb	r3, [r3, #15]
 800baba:	461a      	mov	r2, r3
 800babc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babe:	7c1b      	ldrb	r3, [r3, #16]
 800bac0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bac2:	920e      	str	r2, [sp, #56]	; 0x38
 800bac4:	910d      	str	r1, [sp, #52]	; 0x34
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	920c      	str	r2, [sp, #48]	; 0x30
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	920b      	str	r2, [sp, #44]	; 0x2c
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	920a      	str	r2, [sp, #40]	; 0x28
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	9209      	str	r2, [sp, #36]	; 0x24
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	9208      	str	r2, [sp, #32]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	9207      	str	r2, [sp, #28]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	9206      	str	r2, [sp, #24]
 800bae2:	69fa      	ldr	r2, [r7, #28]
 800bae4:	9205      	str	r2, [sp, #20]
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9603      	str	r6, [sp, #12]
 800baec:	9502      	str	r5, [sp, #8]
 800baee:	9401      	str	r4, [sp, #4]
 800baf0:	9000      	str	r0, [sp, #0]
 800baf2:	4b0e      	ldr	r3, [pc, #56]	; (800bb2c <PrintKey+0x1c0>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	2100      	movs	r1, #0
 800baf8:	2002      	movs	r0, #2
 800bafa:	f00e fdcd 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bafe:	bf00      	nop
 800bb00:	3734      	adds	r7, #52	; 0x34
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb06:	bf00      	nop
 800bb08:	0801b11c 	.word	0x0801b11c
 800bb0c:	0801b134 	.word	0x0801b134
 800bb10:	0801b14c 	.word	0x0801b14c
 800bb14:	0801b164 	.word	0x0801b164
 800bb18:	0801b17c 	.word	0x0801b17c
 800bb1c:	0801b194 	.word	0x0801b194
 800bb20:	0801b1ac 	.word	0x0801b1ac
 800bb24:	0801b1c4 	.word	0x0801b1c4
 800bb28:	0801b1dc 	.word	0x0801b1dc
 800bb2c:	0801b1f4 	.word	0x0801b1f4

0800bb30 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	4603      	mov	r3, r0
 800bb38:	6039      	str	r1, [r7, #0]
 800bb3a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73fb      	strb	r3, [r7, #15]
 800bb40:	e01a      	b.n	800bb78 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bb42:	4b12      	ldr	r3, [pc, #72]	; (800bb8c <GetKeyByID+0x5c>)
 800bb44:	6819      	ldr	r1, [r3, #0]
 800bb46:	7bfa      	ldrb	r2, [r7, #15]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	011b      	lsls	r3, r3, #4
 800bb4c:	4413      	add	r3, r2
 800bb4e:	440b      	add	r3, r1
 800bb50:	3310      	adds	r3, #16
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	79fa      	ldrb	r2, [r7, #7]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d10b      	bne.n	800bb72 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bb5a:	4b0c      	ldr	r3, [pc, #48]	; (800bb8c <GetKeyByID+0x5c>)
 800bb5c:	6819      	ldr	r1, [r3, #0]
 800bb5e:	7bfa      	ldrb	r2, [r7, #15]
 800bb60:	4613      	mov	r3, r2
 800bb62:	011b      	lsls	r3, r3, #4
 800bb64:	4413      	add	r3, r2
 800bb66:	3310      	adds	r3, #16
 800bb68:	18ca      	adds	r2, r1, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e006      	b.n	800bb80 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	3301      	adds	r3, #1
 800bb76:	73fb      	strb	r3, [r7, #15]
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	2b09      	cmp	r3, #9
 800bb7c:	d9e1      	bls.n	800bb42 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb7e:	2303      	movs	r3, #3
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bc80      	pop	{r7}
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	200002c8 	.word	0x200002c8

0800bb90 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bb90:	b590      	push	{r4, r7, lr}
 800bb92:	b0d1      	sub	sp, #324	; 0x144
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	f107 040c 	add.w	r4, r7, #12
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	f107 0008 	add.w	r0, r7, #8
 800bba0:	6001      	str	r1, [r0, #0]
 800bba2:	4619      	mov	r1, r3
 800bba4:	1dbb      	adds	r3, r7, #6
 800bba6:	801a      	strh	r2, [r3, #0]
 800bba8:	1d7b      	adds	r3, r7, #5
 800bbaa:	460a      	mov	r2, r1
 800bbac:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <ComputeCmac+0x30>
 800bbb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d101      	bne.n	800bbc4 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e04e      	b.n	800bc62 <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bbc4:	f107 0314 	add.w	r3, r7, #20
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe ff23 	bl	800aa14 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bbce:	f107 0210 	add.w	r2, r7, #16
 800bbd2:	1d7b      	adds	r3, r7, #5
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff ffa9 	bl	800bb30 <GetKeyByID>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bbe4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d138      	bne.n	800bc5e <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bbec:	f107 0310 	add.w	r3, r7, #16
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	f107 0314 	add.w	r3, r7, #20
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe ff23 	bl	800aa46 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bc00:	f107 030c 	add.w	r3, r7, #12
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d007      	beq.n	800bc1a <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	f107 0014 	add.w	r0, r7, #20
 800bc12:	2210      	movs	r2, #16
 800bc14:	6819      	ldr	r1, [r3, #0]
 800bc16:	f7fe ff25 	bl	800aa64 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bc1a:	1dbb      	adds	r3, r7, #6
 800bc1c:	881a      	ldrh	r2, [r3, #0]
 800bc1e:	f107 0308 	add.w	r3, r7, #8
 800bc22:	f107 0014 	add.w	r0, r7, #20
 800bc26:	6819      	ldr	r1, [r3, #0]
 800bc28:	f7fe ff1c 	bl	800aa64 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bc2c:	f107 0214 	add.w	r2, r7, #20
 800bc30:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe ffd6 	bl	800abe8 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bc40:	061a      	lsls	r2, r3, #24
 800bc42:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bc46:	041b      	lsls	r3, r3, #16
 800bc48:	431a      	orrs	r2, r3
 800bc4a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bc4e:	021b      	lsls	r3, r3, #8
 800bc50:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bc52:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc56:	431a      	orrs	r2, r3
 800bc58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bc5c:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bc5e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}

0800bc6c <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bc6c:	b5b0      	push	{r4, r5, r7, lr}
 800bc6e:	b0b2      	sub	sp, #200	; 0xc8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bc76:	f107 0308 	add.w	r3, r7, #8
 800bc7a:	22c0      	movs	r2, #192	; 0xc0
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f00e ffa8 	bl	801abd4 <memset>
 800bc84:	4a3b      	ldr	r2, [pc, #236]	; (800bd74 <SecureElementInit+0x108>)
 800bc86:	f107 0308 	add.w	r3, r7, #8
 800bc8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc92:	4a39      	ldr	r2, [pc, #228]	; (800bd78 <SecureElementInit+0x10c>)
 800bc94:	f107 0310 	add.w	r3, r7, #16
 800bc98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc9c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bca0:	4b36      	ldr	r3, [pc, #216]	; (800bd7c <SecureElementInit+0x110>)
 800bca2:	f107 0419 	add.w	r4, r7, #25
 800bca6:	461d      	mov	r5, r3
 800bca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	6061      	str	r1, [r4, #4]
 800bcae:	60a2      	str	r2, [r4, #8]
 800bcb0:	60e3      	str	r3, [r4, #12]
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bcb8:	4b31      	ldr	r3, [pc, #196]	; (800bd80 <SecureElementInit+0x114>)
 800bcba:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bcbe:	461d      	mov	r5, r3
 800bcc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcc2:	6020      	str	r0, [r4, #0]
 800bcc4:	6061      	str	r1, [r4, #4]
 800bcc6:	60a2      	str	r2, [r4, #8]
 800bcc8:	60e3      	str	r3, [r4, #12]
 800bcca:	2302      	movs	r3, #2
 800bccc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bcd0:	4b2c      	ldr	r3, [pc, #176]	; (800bd84 <SecureElementInit+0x118>)
 800bcd2:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800bcd6:	461d      	mov	r5, r3
 800bcd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcda:	6020      	str	r0, [r4, #0]
 800bcdc:	6061      	str	r1, [r4, #4]
 800bcde:	60a2      	str	r2, [r4, #8]
 800bce0:	60e3      	str	r3, [r4, #12]
 800bce2:	2303      	movs	r3, #3
 800bce4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bce8:	4b27      	ldr	r3, [pc, #156]	; (800bd88 <SecureElementInit+0x11c>)
 800bcea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bcee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bcfa:	237f      	movs	r3, #127	; 0x7f
 800bcfc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bd00:	2380      	movs	r3, #128	; 0x80
 800bd02:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bd06:	2381      	movs	r3, #129	; 0x81
 800bd08:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bd0c:	2382      	movs	r3, #130	; 0x82
 800bd0e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bd12:	2383      	movs	r3, #131	; 0x83
 800bd14:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d101      	bne.n	800bd22 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e023      	b.n	800bd6a <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bd22:	4a1a      	ldr	r2, [pc, #104]	; (800bd8c <SecureElementInit+0x120>)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bd28:	4b18      	ldr	r3, [pc, #96]	; (800bd8c <SecureElementInit+0x120>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f107 0108 	add.w	r1, r7, #8
 800bd30:	22c0      	movs	r2, #192	; 0xc0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f00a fb95 	bl	8016462 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <SecureElementInit+0x124>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	2002      	movs	r0, #2
 800bd40:	f00e fcaa 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bd44:	2000      	movs	r0, #0
 800bd46:	f7ff fe11 	bl	800b96c <PrintKey>
    PrintKey(NWK_KEY);
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	f7ff fe0e 	bl	800b96c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bd50:	4b10      	ldr	r3, [pc, #64]	; (800bd94 <SecureElementInit+0x128>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	2100      	movs	r1, #0
 800bd56:	2002      	movs	r0, #2
 800bd58:	f00e fc9e 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bd5c:	2003      	movs	r0, #3
 800bd5e:	f7ff fe05 	bl	800b96c <PrintKey>
    PrintKey(NWK_S_KEY);
 800bd62:	2002      	movs	r0, #2
 800bd64:	f7ff fe02 	bl	800b96c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	37c8      	adds	r7, #200	; 0xc8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bdb0      	pop	{r4, r5, r7, pc}
 800bd72:	bf00      	nop
 800bd74:	0801b278 	.word	0x0801b278
 800bd78:	0801b280 	.word	0x0801b280
 800bd7c:	0801b288 	.word	0x0801b288
 800bd80:	0801b298 	.word	0x0801b298
 800bd84:	0801b2a8 	.word	0x0801b2a8
 800bd88:	0801b2b8 	.word	0x0801b2b8
 800bd8c:	200002c8 	.word	0x200002c8
 800bd90:	0801b248 	.word	0x0801b248
 800bd94:	0801b260 	.word	0x0801b260

0800bd98 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	6039      	str	r1, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]
 800bda8:	e01a      	b.n	800bde0 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <SecureElementGetKeyByID+0x5c>)
 800bdac:	6819      	ldr	r1, [r3, #0]
 800bdae:	7bfa      	ldrb	r2, [r7, #15]
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	4413      	add	r3, r2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3310      	adds	r3, #16
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	79fa      	ldrb	r2, [r7, #7]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d10b      	bne.n	800bdda <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bdc2:	4b0c      	ldr	r3, [pc, #48]	; (800bdf4 <SecureElementGetKeyByID+0x5c>)
 800bdc4:	6819      	ldr	r1, [r3, #0]
 800bdc6:	7bfa      	ldrb	r2, [r7, #15]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	011b      	lsls	r3, r3, #4
 800bdcc:	4413      	add	r3, r2
 800bdce:	3310      	adds	r3, #16
 800bdd0:	18ca      	adds	r2, r1, r3
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e006      	b.n	800bde8 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	3301      	adds	r3, #1
 800bdde:	73fb      	strb	r3, [r7, #15]
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b09      	cmp	r3, #9
 800bde4:	d9e1      	bls.n	800bdaa <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bde6:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200002c8 	.word	0x200002c8

0800bdf8 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	4603      	mov	r3, r0
 800be00:	6039      	str	r1, [r7, #0]
 800be02:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d101      	bne.n	800be0e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be0a:	2302      	movs	r3, #2
 800be0c:	e04c      	b.n	800bea8 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be0e:	2300      	movs	r3, #0
 800be10:	77fb      	strb	r3, [r7, #31]
 800be12:	e045      	b.n	800bea0 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800be14:	4b26      	ldr	r3, [pc, #152]	; (800beb0 <SecureElementSetKey+0xb8>)
 800be16:	6819      	ldr	r1, [r3, #0]
 800be18:	7ffa      	ldrb	r2, [r7, #31]
 800be1a:	4613      	mov	r3, r2
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	4413      	add	r3, r2
 800be20:	440b      	add	r3, r1
 800be22:	3310      	adds	r3, #16
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	79fa      	ldrb	r2, [r7, #7]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d136      	bne.n	800be9a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	2b80      	cmp	r3, #128	; 0x80
 800be30:	d123      	bne.n	800be7a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800be32:	2306      	movs	r3, #6
 800be34:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800be36:	2300      	movs	r3, #0
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	f107 0310 	add.w	r3, r7, #16
 800be3e:	2200      	movs	r2, #0
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	605a      	str	r2, [r3, #4]
 800be44:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800be46:	f107 030c 	add.w	r3, r7, #12
 800be4a:	227f      	movs	r2, #127	; 0x7f
 800be4c:	2110      	movs	r1, #16
 800be4e:	6838      	ldr	r0, [r7, #0]
 800be50:	f000 f87d 	bl	800bf4e <SecureElementAesEncrypt>
 800be54:	4603      	mov	r3, r0
 800be56:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be58:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <SecureElementSetKey+0xb8>)
 800be5a:	6819      	ldr	r1, [r3, #0]
 800be5c:	7ffa      	ldrb	r2, [r7, #31]
 800be5e:	4613      	mov	r3, r2
 800be60:	011b      	lsls	r3, r3, #4
 800be62:	4413      	add	r3, r2
 800be64:	3310      	adds	r3, #16
 800be66:	440b      	add	r3, r1
 800be68:	3301      	adds	r3, #1
 800be6a:	f107 010c 	add.w	r1, r7, #12
 800be6e:	2210      	movs	r2, #16
 800be70:	4618      	mov	r0, r3
 800be72:	f00a faf6 	bl	8016462 <memcpy1>
                return retval;
 800be76:	7fbb      	ldrb	r3, [r7, #30]
 800be78:	e016      	b.n	800bea8 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be7a:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <SecureElementSetKey+0xb8>)
 800be7c:	6819      	ldr	r1, [r3, #0]
 800be7e:	7ffa      	ldrb	r2, [r7, #31]
 800be80:	4613      	mov	r3, r2
 800be82:	011b      	lsls	r3, r3, #4
 800be84:	4413      	add	r3, r2
 800be86:	3310      	adds	r3, #16
 800be88:	440b      	add	r3, r1
 800be8a:	3301      	adds	r3, #1
 800be8c:	2210      	movs	r2, #16
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	4618      	mov	r0, r3
 800be92:	f00a fae6 	bl	8016462 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be96:	2300      	movs	r3, #0
 800be98:	e006      	b.n	800bea8 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be9a:	7ffb      	ldrb	r3, [r7, #31]
 800be9c:	3301      	adds	r3, #1
 800be9e:	77fb      	strb	r3, [r7, #31]
 800bea0:	7ffb      	ldrb	r3, [r7, #31]
 800bea2:	2b09      	cmp	r3, #9
 800bea4:	d9b6      	bls.n	800be14 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bea6:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3720      	adds	r7, #32
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	200002c8 	.word	0x200002c8

0800beb4 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af02      	add	r7, sp, #8
 800beba:	60f8      	str	r0, [r7, #12]
 800bebc:	60b9      	str	r1, [r7, #8]
 800bebe:	4611      	mov	r1, r2
 800bec0:	461a      	mov	r2, r3
 800bec2:	460b      	mov	r3, r1
 800bec4:	80fb      	strh	r3, [r7, #6]
 800bec6:	4613      	mov	r3, r2
 800bec8:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800beca:	797b      	ldrb	r3, [r7, #5]
 800becc:	2b7e      	cmp	r3, #126	; 0x7e
 800bece:	d901      	bls.n	800bed4 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e009      	b.n	800bee8 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bed4:	7979      	ldrb	r1, [r7, #5]
 800bed6:	88fa      	ldrh	r2, [r7, #6]
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	460b      	mov	r3, r1
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f7ff fe55 	bl	800bb90 <ComputeCmac>
 800bee6:	4603      	mov	r3, r0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3710      	adds	r7, #16
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af02      	add	r7, sp, #8
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	461a      	mov	r2, r3
 800befc:	460b      	mov	r3, r1
 800befe:	817b      	strh	r3, [r7, #10]
 800bf00:	4613      	mov	r3, r2
 800bf02:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e01b      	b.n	800bf46 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bf0e:	2306      	movs	r3, #6
 800bf10:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bf16:	7a79      	ldrb	r1, [r7, #9]
 800bf18:	897a      	ldrh	r2, [r7, #10]
 800bf1a:	f107 0310 	add.w	r3, r7, #16
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	460b      	mov	r3, r1
 800bf22:	68f9      	ldr	r1, [r7, #12]
 800bf24:	2000      	movs	r0, #0
 800bf26:	f7ff fe33 	bl	800bb90 <ComputeCmac>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
 800bf36:	e006      	b.n	800bf46 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d001      	beq.n	800bf44 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bf40:	2301      	movs	r3, #1
 800bf42:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b0c2      	sub	sp, #264	; 0x108
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	4608      	mov	r0, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	1d3a      	adds	r2, r7, #4
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	4603      	mov	r3, r0
 800bf60:	817b      	strh	r3, [r7, #10]
 800bf62:	460b      	mov	r3, r1
 800bf64:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <SecureElementAesEncrypt+0x26>
 800bf6c:	1d3b      	adds	r3, r7, #4
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf74:	2302      	movs	r3, #2
 800bf76:	e043      	b.n	800c000 <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bf78:	897b      	ldrh	r3, [r7, #10]
 800bf7a:	f003 030f 	and.w	r3, r3, #15
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf84:	2305      	movs	r3, #5
 800bf86:	e03b      	b.n	800c000 <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf88:	f107 0314 	add.w	r3, r7, #20
 800bf8c:	22f0      	movs	r2, #240	; 0xf0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f00a faa1 	bl	80164d8 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf96:	f107 0210 	add.w	r2, r7, #16
 800bf9a:	7a7b      	ldrb	r3, [r7, #9]
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff fdc6 	bl	800bb30 <GetKeyByID>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bfaa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d124      	bne.n	800bffc <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	f107 0214 	add.w	r2, r7, #20
 800bfba:	2110      	movs	r1, #16
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff fbad 	bl	800b71c <lorawan_aes_set_key>

        uint8_t block = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bfc8:	e015      	b.n	800bff6 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bfca:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	18d0      	adds	r0, r2, r3
 800bfd2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfd6:	1d3a      	adds	r2, r7, #4
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	4413      	add	r3, r2
 800bfdc:	f107 0214 	add.w	r2, r7, #20
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f7ff fc79 	bl	800b8d8 <lorawan_aes_encrypt>
            block = block + 16;
 800bfe6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfea:	3310      	adds	r3, #16
 800bfec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bff0:	897b      	ldrh	r3, [r7, #10]
 800bff2:	3b10      	subs	r3, #16
 800bff4:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bff6:	897b      	ldrh	r3, [r7, #10]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bffc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c000:	4618      	mov	r0, r3
 800c002:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b088      	sub	sp, #32
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
 800c016:	4613      	mov	r3, r2
 800c018:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c020:	2302      	movs	r3, #2
 800c022:	e02e      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c024:	2306      	movs	r3, #6
 800c026:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c028:	78bb      	ldrb	r3, [r7, #2]
 800c02a:	2b7f      	cmp	r3, #127	; 0x7f
 800c02c:	d104      	bne.n	800c038 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c02e:	78fb      	ldrb	r3, [r7, #3]
 800c030:	2b04      	cmp	r3, #4
 800c032:	d001      	beq.n	800c038 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c034:	2303      	movs	r3, #3
 800c036:	e024      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c038:	2300      	movs	r3, #0
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	f107 0310 	add.w	r3, r7, #16
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	605a      	str	r2, [r3, #4]
 800c046:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	78fa      	ldrb	r2, [r7, #3]
 800c04e:	2110      	movs	r1, #16
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ff7c 	bl	800bf4e <SecureElementAesEncrypt>
 800c056:	4603      	mov	r3, r0
 800c058:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c05a:	7ffb      	ldrb	r3, [r7, #31]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d001      	beq.n	800c064 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c060:	7ffb      	ldrb	r3, [r7, #31]
 800c062:	e00e      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c064:	f107 020c 	add.w	r2, r7, #12
 800c068:	78bb      	ldrb	r3, [r7, #2]
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fec3 	bl	800bdf8 <SecureElementSetKey>
 800c072:	4603      	mov	r3, r0
 800c074:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c076:	7ffb      	ldrb	r3, [r7, #31]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	e000      	b.n	800c082 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c080:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c082:	4618      	mov	r0, r3
 800c084:	3720      	adds	r7, #32
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b086      	sub	sp, #24
 800c08e:	af00      	add	r7, sp, #0
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607b      	str	r3, [r7, #4]
 800c094:	4603      	mov	r3, r0
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	4613      	mov	r3, r2
 800c09a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d005      	beq.n	800c0ae <SecureElementProcessJoinAccept+0x24>
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <SecureElementProcessJoinAccept+0x24>
 800c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e064      	b.n	800c17c <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c0b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0b6:	2b21      	cmp	r3, #33	; 0x21
 800c0b8:	d901      	bls.n	800c0be <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c0ba:	2305      	movs	r3, #5
 800c0bc:	e05e      	b.n	800c17c <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c0c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0ce:	f00a f9c8 	bl	8016462 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	1c58      	adds	r0, r3, #1
 800c0d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b299      	uxth	r1, r3
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	7dfa      	ldrb	r2, [r7, #23]
 800c0e6:	f7ff ff32 	bl	800bf4e <SecureElementAesEncrypt>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c0f0:	2307      	movs	r3, #7
 800c0f2:	e043      	b.n	800c17c <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	330b      	adds	r3, #11
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	09db      	lsrs	r3, r3, #7
 800c0fc:	b2da      	uxtb	r2, r3
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c10a:	3b04      	subs	r3, #4
 800c10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c10e:	4413      	add	r3, r2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c114:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c118:	3b03      	subs	r3, #3
 800c11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c11c:	4413      	add	r3, r2
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	021b      	lsls	r3, r3, #8
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	4313      	orrs	r3, r2
 800c126:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c128:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c12c:	3b02      	subs	r3, #2
 800c12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c130:	4413      	add	r3, r2
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	041b      	lsls	r3, r3, #16
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	4313      	orrs	r3, r2
 800c13a:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c13c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c140:	3b01      	subs	r3, #1
 800c142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c144:	4413      	add	r3, r2
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	061b      	lsls	r3, r3, #24
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10e      	bne.n	800c176 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c158:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	3b04      	subs	r3, #4
 800c160:	b299      	uxth	r1, r3
 800c162:	2301      	movs	r3, #1
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c168:	f7ff fec2 	bl	800bef0 <SecureElementVerifyAesCmac>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c172:	2301      	movs	r3, #1
 800c174:	e002      	b.n	800c17c <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c176:	2304      	movs	r3, #4
 800c178:	e000      	b.n	800c17c <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c192:	2302      	movs	r3, #2
 800c194:	e006      	b.n	800c1a4 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c196:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <SecureElementRandomNumber+0x28>)
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	4798      	blx	r3
 800c19c:	4602      	mov	r2, r0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	0801ba54 	.word	0x0801ba54

0800c1b0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1be:	2302      	movs	r3, #2
 800c1c0:	e007      	b.n	800c1d2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c1c2:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <SecureElementSetDevEui+0x2c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2208      	movs	r2, #8
 800c1c8:	6879      	ldr	r1, [r7, #4]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f00a f949 	bl	8016462 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	200002c8 	.word	0x200002c8

0800c1e0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c1e4:	4b02      	ldr	r3, [pc, #8]	; (800c1f0 <SecureElementGetDevEui+0x10>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bc80      	pop	{r7}
 800c1ee:	4770      	bx	lr
 800c1f0:	200002c8 	.word	0x200002c8

0800c1f4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c202:	2302      	movs	r3, #2
 800c204:	e008      	b.n	800c218 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c206:	4b06      	ldr	r3, [pc, #24]	; (800c220 <SecureElementSetJoinEui+0x2c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3308      	adds	r3, #8
 800c20c:	2208      	movs	r2, #8
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	f00a f926 	bl	8016462 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	200002c8 	.word	0x200002c8

0800c224 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c228:	4b03      	ldr	r3, [pc, #12]	; (800c238 <SecureElementGetJoinEui+0x14>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	3308      	adds	r3, #8
}
 800c22e:	4618      	mov	r0, r3
 800c230:	46bd      	mov	sp, r7
 800c232:	bc80      	pop	{r7}
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	200002c8 	.word	0x200002c8

0800c23c <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c244:	4a1a      	ldr	r2, [pc, #104]	; (800c2b0 <LmHandlerInit+0x74>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c24a:	4b1a      	ldr	r3, [pc, #104]	; (800c2b4 <LmHandlerInit+0x78>)
 800c24c:	4a1a      	ldr	r2, [pc, #104]	; (800c2b8 <LmHandlerInit+0x7c>)
 800c24e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c250:	4b18      	ldr	r3, [pc, #96]	; (800c2b4 <LmHandlerInit+0x78>)
 800c252:	4a1a      	ldr	r2, [pc, #104]	; (800c2bc <LmHandlerInit+0x80>)
 800c254:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c256:	4b17      	ldr	r3, [pc, #92]	; (800c2b4 <LmHandlerInit+0x78>)
 800c258:	4a19      	ldr	r2, [pc, #100]	; (800c2c0 <LmHandlerInit+0x84>)
 800c25a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c25c:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <LmHandlerInit+0x78>)
 800c25e:	4a19      	ldr	r2, [pc, #100]	; (800c2c4 <LmHandlerInit+0x88>)
 800c260:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <LmHandlerInit+0x74>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <LmHandlerInit+0x8c>)
 800c26a:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c26c:	4b10      	ldr	r3, [pc, #64]	; (800c2b0 <LmHandlerInit+0x74>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <LmHandlerInit+0x8c>)
 800c274:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c276:	4b0e      	ldr	r3, [pc, #56]	; (800c2b0 <LmHandlerInit+0x74>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	4a12      	ldr	r2, [pc, #72]	; (800c2c8 <LmHandlerInit+0x8c>)
 800c27e:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c280:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <LmHandlerInit+0x8c>)
 800c282:	4a12      	ldr	r2, [pc, #72]	; (800c2cc <LmHandlerInit+0x90>)
 800c284:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c286:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <LmHandlerInit+0x74>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	4a0e      	ldr	r2, [pc, #56]	; (800c2c8 <LmHandlerInit+0x8c>)
 800c28e:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c290:	490f      	ldr	r1, [pc, #60]	; (800c2d0 <LmHandlerInit+0x94>)
 800c292:	2000      	movs	r0, #0
 800c294:	f000 fcfe 	bl	800cc94 <LmHandlerPackageRegister>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d002      	beq.n	800c2a4 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c29e:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a2:	e000      	b.n	800c2a6 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200002f0 	.word	0x200002f0
 800c2b4:	200002f4 	.word	0x200002f4
 800c2b8:	0800c9e9 	.word	0x0800c9e9
 800c2bc:	0800ca51 	.word	0x0800ca51
 800c2c0:	0800cb31 	.word	0x0800cb31
 800c2c4:	0800cbf5 	.word	0x0800cbf5
 800c2c8:	20000304 	.word	0x20000304
 800c2cc:	0800cf05 	.word	0x0800cf05
 800c2d0:	200000b8 	.word	0x200000b8

0800c2d4 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d6:	b099      	sub	sp, #100	; 0x64
 800c2d8:	af08      	add	r7, sp, #32
 800c2da:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c2e0:	2210      	movs	r2, #16
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	4882      	ldr	r0, [pc, #520]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c2e6:	f00d fa8f 	bl	8019808 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c2ea:	f7fe fb5f 	bl	800a9ac <LoraInfo_GetPtr>
 800c2ee:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c2f0:	4b7f      	ldr	r3, [pc, #508]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	4093      	lsls	r3, r2
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4013      	ands	r3, r2
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00c      	beq.n	800c320 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c306:	4b7a      	ldr	r3, [pc, #488]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	4979      	ldr	r1, [pc, #484]	; (800c4f4 <LmHandlerConfigure+0x220>)
 800c30e:	487a      	ldr	r0, [pc, #488]	; (800c4f8 <LmHandlerConfigure+0x224>)
 800c310:	f004 fb1a 	bl	8010948 <LoRaMacInitialization>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d009      	beq.n	800c32e <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e0e2      	b.n	800c4e6 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c320:	4b76      	ldr	r3, [pc, #472]	; (800c4fc <LmHandlerConfigure+0x228>)
 800c322:	2201      	movs	r2, #1
 800c324:	2100      	movs	r1, #0
 800c326:	2000      	movs	r0, #0
 800c328:	f00e f9b6 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c32c:	e7fe      	b.n	800c32c <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c32e:	f000 fdfa 	bl	800cf26 <NvmDataMgmtRestore>
 800c332:	4603      	mov	r3, r0
 800c334:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c336:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c33c:	4b70      	ldr	r3, [pc, #448]	; (800c500 <LmHandlerConfigure+0x22c>)
 800c33e:	2201      	movs	r2, #1
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e002      	b.n	800c34a <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c344:	4b6e      	ldr	r3, [pc, #440]	; (800c500 <LmHandlerConfigure+0x22c>)
 800c346:	2200      	movs	r2, #0
 800c348:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c34a:	2302      	movs	r3, #2
 800c34c:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c34e:	f107 0314 	add.w	r3, r7, #20
 800c352:	4618      	mov	r0, r3
 800c354:	f004 fe42 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	2208      	movs	r2, #8
 800c35c:	4619      	mov	r1, r3
 800c35e:	4869      	ldr	r0, [pc, #420]	; (800c504 <LmHandlerConfigure+0x230>)
 800c360:	f00a f87f 	bl	8016462 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c364:	2303      	movs	r3, #3
 800c366:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c368:	f107 0314 	add.w	r3, r7, #20
 800c36c:	4618      	mov	r0, r3
 800c36e:	f004 fe35 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2208      	movs	r2, #8
 800c376:	4619      	mov	r1, r3
 800c378:	4863      	ldr	r0, [pc, #396]	; (800c508 <LmHandlerConfigure+0x234>)
 800c37a:	f00a f872 	bl	8016462 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c37e:	4b63      	ldr	r3, [pc, #396]	; (800c50c <LmHandlerConfigure+0x238>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	4798      	blx	r3
 800c386:	4603      	mov	r3, r0
 800c388:	4a5e      	ldr	r2, [pc, #376]	; (800c504 <LmHandlerConfigure+0x230>)
 800c38a:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c38c:	2306      	movs	r3, #6
 800c38e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c390:	4b5c      	ldr	r3, [pc, #368]	; (800c504 <LmHandlerConfigure+0x230>)
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c396:	f107 0314 	add.w	r3, r7, #20
 800c39a:	4618      	mov	r0, r3
 800c39c:	f004 ff7c 	bl	8011298 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c3a0:	4b58      	ldr	r3, [pc, #352]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b57      	ldr	r3, [pc, #348]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3a8:	785b      	ldrb	r3, [r3, #1]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4b55      	ldr	r3, [pc, #340]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3ae:	789b      	ldrb	r3, [r3, #2]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	4b54      	ldr	r3, [pc, #336]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3b4:	78db      	ldrb	r3, [r3, #3]
 800c3b6:	461c      	mov	r4, r3
 800c3b8:	4b52      	ldr	r3, [pc, #328]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3ba:	791b      	ldrb	r3, [r3, #4]
 800c3bc:	461d      	mov	r5, r3
 800c3be:	4b51      	ldr	r3, [pc, #324]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3c0:	795b      	ldrb	r3, [r3, #5]
 800c3c2:	461e      	mov	r6, r3
 800c3c4:	4b4f      	ldr	r3, [pc, #316]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3c6:	799b      	ldrb	r3, [r3, #6]
 800c3c8:	603b      	str	r3, [r7, #0]
 800c3ca:	4b4e      	ldr	r3, [pc, #312]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3cc:	79db      	ldrb	r3, [r3, #7]
 800c3ce:	9307      	str	r3, [sp, #28]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	9306      	str	r3, [sp, #24]
 800c3d4:	9605      	str	r6, [sp, #20]
 800c3d6:	9504      	str	r5, [sp, #16]
 800c3d8:	9403      	str	r4, [sp, #12]
 800c3da:	9002      	str	r0, [sp, #8]
 800c3dc:	9101      	str	r1, [sp, #4]
 800c3de:	9200      	str	r2, [sp, #0]
 800c3e0:	4b4b      	ldr	r3, [pc, #300]	; (800c510 <LmHandlerConfigure+0x23c>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	2002      	movs	r0, #2
 800c3e8:	f00e f956 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c3ec:	4b45      	ldr	r3, [pc, #276]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3ee:	7a1b      	ldrb	r3, [r3, #8]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4b44      	ldr	r3, [pc, #272]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3f4:	7a5b      	ldrb	r3, [r3, #9]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4b42      	ldr	r3, [pc, #264]	; (800c504 <LmHandlerConfigure+0x230>)
 800c3fa:	7a9b      	ldrb	r3, [r3, #10]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	4b41      	ldr	r3, [pc, #260]	; (800c504 <LmHandlerConfigure+0x230>)
 800c400:	7adb      	ldrb	r3, [r3, #11]
 800c402:	461c      	mov	r4, r3
 800c404:	4b3f      	ldr	r3, [pc, #252]	; (800c504 <LmHandlerConfigure+0x230>)
 800c406:	7b1b      	ldrb	r3, [r3, #12]
 800c408:	461d      	mov	r5, r3
 800c40a:	4b3e      	ldr	r3, [pc, #248]	; (800c504 <LmHandlerConfigure+0x230>)
 800c40c:	7b5b      	ldrb	r3, [r3, #13]
 800c40e:	461e      	mov	r6, r3
 800c410:	4b3c      	ldr	r3, [pc, #240]	; (800c504 <LmHandlerConfigure+0x230>)
 800c412:	7b9b      	ldrb	r3, [r3, #14]
 800c414:	603b      	str	r3, [r7, #0]
 800c416:	4b3b      	ldr	r3, [pc, #236]	; (800c504 <LmHandlerConfigure+0x230>)
 800c418:	7bdb      	ldrb	r3, [r3, #15]
 800c41a:	9307      	str	r3, [sp, #28]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	9306      	str	r3, [sp, #24]
 800c420:	9605      	str	r6, [sp, #20]
 800c422:	9504      	str	r5, [sp, #16]
 800c424:	9403      	str	r4, [sp, #12]
 800c426:	9002      	str	r0, [sp, #8]
 800c428:	9101      	str	r1, [sp, #4]
 800c42a:	9200      	str	r2, [sp, #0]
 800c42c:	4b39      	ldr	r3, [pc, #228]	; (800c514 <LmHandlerConfigure+0x240>)
 800c42e:	2200      	movs	r2, #0
 800c430:	2100      	movs	r1, #0
 800c432:	2002      	movs	r0, #2
 800c434:	f00e f930 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c438:	4b37      	ldr	r3, [pc, #220]	; (800c518 <LmHandlerConfigure+0x244>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	461a      	mov	r2, r3
 800c43e:	4b37      	ldr	r3, [pc, #220]	; (800c51c <LmHandlerConfigure+0x248>)
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	4619      	mov	r1, r3
 800c444:	4b36      	ldr	r3, [pc, #216]	; (800c520 <LmHandlerConfigure+0x24c>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	4618      	mov	r0, r3
 800c44a:	4b36      	ldr	r3, [pc, #216]	; (800c524 <LmHandlerConfigure+0x250>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	9002      	str	r0, [sp, #8]
 800c452:	9101      	str	r1, [sp, #4]
 800c454:	9200      	str	r2, [sp, #0]
 800c456:	4b34      	ldr	r3, [pc, #208]	; (800c528 <LmHandlerConfigure+0x254>)
 800c458:	2200      	movs	r2, #0
 800c45a:	2100      	movs	r1, #0
 800c45c:	2002      	movs	r0, #2
 800c45e:	f00e f91b 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c462:	230f      	movs	r3, #15
 800c464:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c466:	2301      	movs	r3, #1
 800c468:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	4618      	mov	r0, r3
 800c470:	f004 ff12 	bl	8011298 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c474:	2305      	movs	r3, #5
 800c476:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c478:	2300      	movs	r3, #0
 800c47a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c47c:	f107 0314 	add.w	r3, r7, #20
 800c480:	4618      	mov	r0, r3
 800c482:	f004 ff09 	bl	8011298 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c486:	2310      	movs	r3, #16
 800c488:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c48a:	2300      	movs	r3, #0
 800c48c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c48e:	f107 0314 	add.w	r3, r7, #20
 800c492:	4618      	mov	r0, r3
 800c494:	f004 ff00 	bl	8011298 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c498:	2304      	movs	r3, #4
 800c49a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c49c:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c49e:	789b      	ldrb	r3, [r3, #2]
 800c4a0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4a2:	f107 0314 	add.w	r3, r7, #20
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f004 fef6 	bl	8011298 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c4ac:	230f      	movs	r3, #15
 800c4ae:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c4b0:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f107 020c 	add.w	r2, r7, #12
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f007 fcc6 	bl	8013e4c <RegionGetPhyParam>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bf14      	ite	ne
 800c4ca:	2301      	movne	r3, #1
 800c4cc:	2300      	moveq	r3, #0
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	4b07      	ldr	r3, [pc, #28]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c4d2:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c4d4:	2014      	movs	r0, #20
 800c4d6:	f000 fa6f 	bl	800c9b8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c4da:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <LmHandlerConfigure+0x21c>)
 800c4dc:	795b      	ldrb	r3, [r3, #5]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f005 fc4e 	bl	8011d80 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3744      	adds	r7, #68	; 0x44
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200002e0 	.word	0x200002e0
 800c4f4:	20000304 	.word	0x20000304
 800c4f8:	200002f4 	.word	0x200002f4
 800c4fc:	0801b2c8 	.word	0x0801b2c8
 800c500:	20000422 	.word	0x20000422
 800c504:	200000a0 	.word	0x200000a0
 800c508:	200000a8 	.word	0x200000a8
 800c50c:	200002f0 	.word	0x200002f0
 800c510:	0801b314 	.word	0x0801b314
 800c514:	0801b350 	.word	0x0801b350
 800c518:	200000b7 	.word	0x200000b7
 800c51c:	200000b6 	.word	0x200000b6
 800c520:	200000b5 	.word	0x200000b5
 800c524:	200000b4 	.word	0x200000b4
 800c528:	0801b38c 	.word	0x0801b38c

0800c52c <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c530:	f002 f9b8 	bl	800e8a4 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c534:	f000 fc9a 	bl	800ce6c <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c538:	f000 fcee 	bl	800cf18 <NvmDataMgmtStore>
}
 800c53c:	bf00      	nop
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b090      	sub	sp, #64	; 0x40
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d111      	bne.n	800c574 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c550:	4b23      	ldr	r3, [pc, #140]	; (800c5e0 <LmHandlerJoin+0xa0>)
 800c552:	2202      	movs	r2, #2
 800c554:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c556:	f004 fcab 	bl	8010eb0 <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c55a:	2301      	movs	r3, #1
 800c55c:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c55e:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <LmHandlerJoin+0xa4>)
 800c560:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c564:	b2db      	uxtb	r3, r3
 800c566:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	4618      	mov	r0, r3
 800c56e:	f005 f9d1 	bl	8011914 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c572:	e030      	b.n	800c5d6 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c574:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <LmHandlerJoin+0xa0>)
 800c576:	2201      	movs	r2, #1
 800c578:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c57a:	4b1a      	ldr	r3, [pc, #104]	; (800c5e4 <LmHandlerJoin+0xa4>)
 800c57c:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c580:	4b17      	ldr	r3, [pc, #92]	; (800c5e0 <LmHandlerJoin+0xa0>)
 800c582:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c584:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <LmHandlerJoin+0xa0>)
 800c586:	2200      	movs	r2, #0
 800c588:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c58a:	4b17      	ldr	r3, [pc, #92]	; (800c5e8 <LmHandlerJoin+0xa8>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f083 0301 	eor.w	r3, r3, #1
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d008      	beq.n	800c5aa <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c598:	2327      	movs	r3, #39	; 0x27
 800c59a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c59c:	4b13      	ldr	r3, [pc, #76]	; (800c5ec <LmHandlerJoin+0xac>)
 800c59e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c5a0:	f107 031c 	add.w	r3, r7, #28
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f004 fe77 	bl	8011298 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c5aa:	f004 fc81 	bl	8010eb0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c5b8:	f107 031c 	add.w	r3, r7, #28
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f004 fe6b 	bl	8011298 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c5c2:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <LmHandlerJoin+0xb0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <LmHandlerJoin+0xa0>)
 800c5ca:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <LmHandlerJoin+0xa4>)
 800c5ce:	785b      	ldrb	r3, [r3, #1]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 f917 	bl	800c804 <LmHandlerRequestClass>
}
 800c5d6:	bf00      	nop
 800c5d8:	3740      	adds	r7, #64	; 0x40
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	200000c4 	.word	0x200000c4
 800c5e4:	200002e0 	.word	0x200002e0
 800c5e8:	20000422 	.word	0x20000422
 800c5ec:	01000300 	.word	0x01000300
 800c5f0:	200002f0 	.word	0x200002f0

0800c5f4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08a      	sub	sp, #40	; 0x28
 800c5f8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c5fe:	463b      	mov	r3, r7
 800c600:	4618      	mov	r0, r3
 800c602:	f004 fceb 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
 800c606:	4603      	mov	r3, r0
 800c608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c614:	793b      	ldrb	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c61a:	2300      	movs	r3, #0
 800c61c:	e002      	b.n	800c624 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c61e:	2301      	movs	r3, #1
 800c620:	e000      	b.n	800c624 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c622:	2300      	movs	r3, #0
    }
}
 800c624:	4618      	mov	r0, r3
 800c626:	3728      	adds	r7, #40	; 0x28
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08c      	sub	sp, #48	; 0x30
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	607a      	str	r2, [r7, #4]
 800c636:	461a      	mov	r2, r3
 800c638:	460b      	mov	r3, r1
 800c63a:	72fb      	strb	r3, [r7, #11]
 800c63c:	4613      	mov	r3, r2
 800c63e:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c640:	23ff      	movs	r3, #255	; 0xff
 800c642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c646:	f001 fe97 	bl	800e378 <LoRaMacIsBusy>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c650:	f06f 0301 	mvn.w	r3, #1
 800c654:	e0b4      	b.n	800c7c0 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c656:	f7ff ffcd 	bl	800c5f4 <LmHandlerJoinStatus>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d007      	beq.n	800c670 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c660:	4b59      	ldr	r3, [pc, #356]	; (800c7c8 <LmHandlerSend+0x19c>)
 800c662:	789b      	ldrb	r3, [r3, #2]
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff ff6b 	bl	800c540 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c66a:	f06f 0302 	mvn.w	r3, #2
 800c66e:	e0a7      	b.n	800c7c0 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c670:	4b56      	ldr	r3, [pc, #344]	; (800c7cc <LmHandlerSend+0x1a0>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	4798      	blx	r3
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00d      	beq.n	800c69a <LmHandlerSend+0x6e>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	4b52      	ldr	r3, [pc, #328]	; (800c7cc <LmHandlerSend+0x1a0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d006      	beq.n	800c69a <LmHandlerSend+0x6e>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c694:	f06f 0303 	mvn.w	r3, #3
 800c698:	e092      	b.n	800c7c0 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c69a:	4b4d      	ldr	r3, [pc, #308]	; (800c7d0 <LmHandlerSend+0x1a4>)
 800c69c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c6a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	785b      	ldrb	r3, [r3, #1]
 800c6a8:	f107 0214 	add.w	r2, r7, #20
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f004 fc0c 	bl	8010ecc <LoRaMacQueryTxPossible>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c6ba:	4b46      	ldr	r3, [pc, #280]	; (800c7d4 <LmHandlerSend+0x1a8>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6cc:	e017      	b.n	800c6fe <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c6ce:	4a41      	ldr	r2, [pc, #260]	; (800c7d4 <LmHandlerSend+0x1a8>)
 800c6d0:	7afb      	ldrb	r3, [r7, #11]
 800c6d2:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d102      	bne.n	800c6f4 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	763b      	strb	r3, [r7, #24]
 800c6f2:	e004      	b.n	800c6fe <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c6f8:	2308      	movs	r3, #8
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c6fe:	4b35      	ldr	r3, [pc, #212]	; (800c7d4 <LmHandlerSend+0x1a8>)
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	330c      	adds	r3, #12
 800c704:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c708:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c70c:	4b30      	ldr	r3, [pc, #192]	; (800c7d0 <LmHandlerSend+0x1a4>)
 800c70e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c712:	4b30      	ldr	r3, [pc, #192]	; (800c7d4 <LmHandlerSend+0x1a8>)
 800c714:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c716:	7aba      	ldrb	r2, [r7, #10]
 800c718:	f107 0318 	add.w	r3, r7, #24
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f005 fa38 	bl	8011b94 <LoRaMacMcpsRequest>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c736:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c73a:	2b11      	cmp	r3, #17
 800c73c:	d83a      	bhi.n	800c7b4 <LmHandlerSend+0x188>
 800c73e:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <LmHandlerSend+0x118>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c78d 	.word	0x0800c78d
 800c748:	0800c795 	.word	0x0800c795
 800c74c:	0800c7b5 	.word	0x0800c7b5
 800c750:	0800c7b5 	.word	0x0800c7b5
 800c754:	0800c7b5 	.word	0x0800c7b5
 800c758:	0800c7b5 	.word	0x0800c7b5
 800c75c:	0800c7b5 	.word	0x0800c7b5
 800c760:	0800c79d 	.word	0x0800c79d
 800c764:	0800c7b5 	.word	0x0800c7b5
 800c768:	0800c7b5 	.word	0x0800c7b5
 800c76c:	0800c7b5 	.word	0x0800c7b5
 800c770:	0800c7ad 	.word	0x0800c7ad
 800c774:	0800c7b5 	.word	0x0800c7b5
 800c778:	0800c7b5 	.word	0x0800c7b5
 800c77c:	0800c795 	.word	0x0800c795
 800c780:	0800c795 	.word	0x0800c795
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c7a5 	.word	0x0800c7a5
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c78c:	2300      	movs	r3, #0
 800c78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c792:	e013      	b.n	800c7bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c794:	23fe      	movs	r3, #254	; 0xfe
 800c796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c79a:	e00f      	b.n	800c7bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c79c:	23fd      	movs	r3, #253	; 0xfd
 800c79e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7a2:	e00b      	b.n	800c7bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c7a4:	23fb      	movs	r3, #251	; 0xfb
 800c7a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7aa:	e007      	b.n	800c7bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c7ac:	23fa      	movs	r3, #250	; 0xfa
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7b2:	e003      	b.n	800c7bc <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c7b4:	23ff      	movs	r3, #255	; 0xff
 800c7b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7ba:	bf00      	nop
    }

    return lmhStatus;
 800c7bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3730      	adds	r7, #48	; 0x30
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	200000c4 	.word	0x200000c4
 800c7cc:	200002cc 	.word	0x200002cc
 800c7d0:	200002e0 	.word	0x200002e0
 800c7d4:	20000318 	.word	0x20000318

0800c7d8 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c7de:	230a      	movs	r3, #10
 800c7e0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c7e2:	463b      	mov	r3, r7
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f005 f895 	bl	8011914 <LoRaMacMlmeRequest>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e001      	b.n	800c7fc <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c7f8:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08c      	sub	sp, #48	; 0x30
 800c808:	af00      	add	r7, sp, #0
 800c80a:	4603      	mov	r3, r0
 800c80c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c80e:	2300      	movs	r3, #0
 800c810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c814:	f001 fdb0 	bl	800e378 <LoRaMacIsBusy>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c81e:	f06f 0301 	mvn.w	r3, #1
 800c822:	e07b      	b.n	800c91c <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c824:	f7ff fee6 	bl	800c5f4 <LmHandlerJoinStatus>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d002      	beq.n	800c834 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c82e:	f06f 0302 	mvn.w	r3, #2
 800c832:	e073      	b.n	800c91c <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c834:	2300      	movs	r3, #0
 800c836:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c838:	f107 0308 	add.w	r3, r7, #8
 800c83c:	4618      	mov	r0, r3
 800c83e:	f004 fbcd 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c848:	f04f 33ff 	mov.w	r3, #4294967295
 800c84c:	e066      	b.n	800c91c <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c84e:	7b3b      	ldrb	r3, [r7, #12]
 800c850:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c854:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d055      	beq.n	800c90a <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c85e:	79fb      	ldrb	r3, [r7, #7]
 800c860:	2b02      	cmp	r3, #2
 800c862:	d02c      	beq.n	800c8be <LmHandlerRequestClass+0xba>
 800c864:	2b02      	cmp	r3, #2
 800c866:	dc52      	bgt.n	800c90e <LmHandlerRequestClass+0x10a>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <LmHandlerRequestClass+0x6e>
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d022      	beq.n	800c8b6 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c870:	e04d      	b.n	800c90e <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c872:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c876:	2b00      	cmp	r3, #0
 800c878:	d04b      	beq.n	800c912 <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4618      	mov	r0, r3
 800c884:	f004 fd08 	bl	8011298 <LoRaMacMibSetRequestConfirm>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10f      	bne.n	800c8ae <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	4618      	mov	r0, r3
 800c892:	f000 fb1f 	bl	800ced4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <LmHandlerRequestClass+0x120>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d038      	beq.n	800c912 <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c8a0:	4b20      	ldr	r3, [pc, #128]	; (800c924 <LmHandlerRequestClass+0x120>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	79fa      	ldrb	r2, [r7, #7]
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
            break;
 800c8ac:	e031      	b.n	800c912 <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c8ae:	23ff      	movs	r3, #255	; 0xff
 800c8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8b4:	e02d      	b.n	800c912 <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c8b6:	23ff      	movs	r3, #255	; 0xff
 800c8b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8bc:	e02c      	b.n	800c918 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c8be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c8c6:	23ff      	movs	r3, #255	; 0xff
 800c8c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8cc:	e023      	b.n	800c916 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c8d2:	f107 0308 	add.w	r3, r7, #8
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f004 fcde 	bl	8011298 <LoRaMacMibSetRequestConfirm>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10f      	bne.n	800c902 <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 faf5 	bl	800ced4 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c8ea:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <LmHandlerRequestClass+0x120>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d010      	beq.n	800c916 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	; (800c924 <LmHandlerRequestClass+0x120>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	79fa      	ldrb	r2, [r7, #7]
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
            break;
 800c900:	e009      	b.n	800c916 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c902:	23ff      	movs	r3, #255	; 0xff
 800c904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c908:	e005      	b.n	800c916 <LmHandlerRequestClass+0x112>
        }
    }
 800c90a:	bf00      	nop
 800c90c:	e004      	b.n	800c918 <LmHandlerRequestClass+0x114>
            break;
 800c90e:	bf00      	nop
 800c910:	e002      	b.n	800c918 <LmHandlerRequestClass+0x114>
            break;
 800c912:	bf00      	nop
 800c914:	e000      	b.n	800c918 <LmHandlerRequestClass+0x114>
            break;
 800c916:	bf00      	nop
    return errorStatus;
 800c918:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3730      	adds	r7, #48	; 0x30
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	200002f0 	.word	0x200002f0

0800c928 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08c      	sub	sp, #48	; 0x30
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d102      	bne.n	800c93c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	e010      	b.n	800c95e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c93c:	2300      	movs	r3, #0
 800c93e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c940:	f107 030c 	add.w	r3, r7, #12
 800c944:	4618      	mov	r0, r3
 800c946:	f004 fb49 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c950:	f04f 33ff 	mov.w	r3, #4294967295
 800c954:	e003      	b.n	800c95e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c956:	7c3a      	ldrb	r2, [r7, #16]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3730      	adds	r7, #48	; 0x30
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
	...

0800c968 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b08c      	sub	sp, #48	; 0x30
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c976:	f04f 33ff 	mov.w	r3, #4294967295
 800c97a:	e016      	b.n	800c9aa <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c97c:	231f      	movs	r3, #31
 800c97e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c980:	f107 030c 	add.w	r3, r7, #12
 800c984:	4618      	mov	r0, r3
 800c986:	f004 fb29 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c990:	f04f 33ff 	mov.w	r3, #4294967295
 800c994:	e009      	b.n	800c9aa <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c996:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f993 2000 	ldrsb.w	r2, [r3]
 800c9a4:	4b03      	ldr	r3, [pc, #12]	; (800c9b4 <LmHandlerGetTxDatarate+0x4c>)
 800c9a6:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3730      	adds	r7, #48	; 0x30
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200002e0 	.word	0x200002e0

0800c9b8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08c      	sub	sp, #48	; 0x30
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c9c0:	2322      	movs	r3, #34	; 0x22
 800c9c2:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c9c8:	f107 030c 	add.w	r3, r7, #12
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f004 fc63 	bl	8011298 <LoRaMacMibSetRequestConfirm>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9dc:	e000      	b.n	800c9e0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3730      	adds	r7, #48	; 0x30
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c9f0:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <McpsConfirm+0x60>)
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	785a      	ldrb	r2, [r3, #1]
 800c9fa:	4b13      	ldr	r3, [pc, #76]	; (800ca48 <McpsConfirm+0x60>)
 800c9fc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	789b      	ldrb	r3, [r3, #2]
 800ca02:	b25a      	sxtb	r2, r3
 800ca04:	4b10      	ldr	r3, [pc, #64]	; (800ca48 <McpsConfirm+0x60>)
 800ca06:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4a0e      	ldr	r2, [pc, #56]	; (800ca48 <McpsConfirm+0x60>)
 800ca0e:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ca16:	4b0c      	ldr	r3, [pc, #48]	; (800ca48 <McpsConfirm+0x60>)
 800ca18:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <McpsConfirm+0x60>)
 800ca22:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	791b      	ldrb	r3, [r3, #4]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <McpsConfirm+0x60>)
 800ca2c:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ca2e:	4b07      	ldr	r3, [pc, #28]	; (800ca4c <McpsConfirm+0x64>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6a1b      	ldr	r3, [r3, #32]
 800ca34:	4804      	ldr	r0, [pc, #16]	; (800ca48 <McpsConfirm+0x60>)
 800ca36:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ca38:	6879      	ldr	r1, [r7, #4]
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	f000 f99a 	bl	800cd74 <LmHandlerPackagesNotify>
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	20000318 	.word	0x20000318
 800ca4c:	200002f0 	.word	0x200002f0

0800ca50 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b088      	sub	sp, #32
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ca5e:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <McpsIndication+0xd8>)
 800ca60:	2201      	movs	r2, #1
 800ca62:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	785a      	ldrb	r2, [r3, #1]
 800ca68:	4b2f      	ldr	r3, [pc, #188]	; (800cb28 <McpsIndication+0xd8>)
 800ca6a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ca6c:	4b2e      	ldr	r3, [pc, #184]	; (800cb28 <McpsIndication+0xd8>)
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d154      	bne.n	800cb1e <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	791b      	ldrb	r3, [r3, #4]
 800ca78:	b25a      	sxtb	r2, r3
 800ca7a:	4b2b      	ldr	r3, [pc, #172]	; (800cb28 <McpsIndication+0xd8>)
 800ca7c:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca84:	b25a      	sxtb	r2, r3
 800ca86:	4b28      	ldr	r3, [pc, #160]	; (800cb28 <McpsIndication+0xd8>)
 800ca88:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ca90:	4b25      	ldr	r3, [pc, #148]	; (800cb28 <McpsIndication+0xd8>)
 800ca92:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	78db      	ldrb	r3, [r3, #3]
 800ca98:	b25a      	sxtb	r2, r3
 800ca9a:	4b23      	ldr	r3, [pc, #140]	; (800cb28 <McpsIndication+0xd8>)
 800ca9c:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	4a21      	ldr	r2, [pc, #132]	; (800cb28 <McpsIndication+0xd8>)
 800caa4:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	78db      	ldrb	r3, [r3, #3]
 800caaa:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	7b1b      	ldrb	r3, [r3, #12]
 800cab0:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cab8:	4b1c      	ldr	r3, [pc, #112]	; (800cb2c <McpsIndication+0xdc>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabe:	f107 0218 	add.w	r2, r7, #24
 800cac2:	4919      	ldr	r1, [pc, #100]	; (800cb28 <McpsIndication+0xd8>)
 800cac4:	4610      	mov	r0, r2
 800cac6:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cac8:	4b18      	ldr	r3, [pc, #96]	; (800cb2c <McpsIndication+0xdc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d007      	beq.n	800cae2 <McpsIndication+0x92>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7e1b      	ldrb	r3, [r3, #24]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cada:	4b14      	ldr	r3, [pc, #80]	; (800cb2c <McpsIndication+0xdc>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	2001      	movs	r0, #1
 800cae6:	f000 f945 	bl	800cd74 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800caea:	f107 0317 	add.w	r3, r7, #23
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff ff1a 	bl	800c928 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	795b      	ldrb	r3, [r3, #5]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d111      	bne.n	800cb20 <McpsIndication+0xd0>
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10e      	bne.n	800cb20 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cb02:	2300      	movs	r3, #0
 800cb04:	733b      	strb	r3, [r7, #12]
 800cb06:	2300      	movs	r3, #0
 800cb08:	737b      	strb	r3, [r7, #13]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cb0e:	f107 000c 	add.w	r0, r7, #12
 800cb12:	2301      	movs	r3, #1
 800cb14:	2200      	movs	r2, #0
 800cb16:	2100      	movs	r1, #0
 800cb18:	f7ff fd88 	bl	800c62c <LmHandlerSend>
 800cb1c:	e000      	b.n	800cb20 <McpsIndication+0xd0>
        return;
 800cb1e:	bf00      	nop
    }
}
 800cb20:	3720      	adds	r7, #32
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	200000c8 	.word	0x200000c8
 800cb2c:	200002f0 	.word	0x200002f0

0800cb30 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08c      	sub	sp, #48	; 0x30
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cb38:	4b28      	ldr	r3, [pc, #160]	; (800cbdc <MlmeConfirm+0xac>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	785a      	ldrb	r2, [r3, #1]
 800cb42:	4b26      	ldr	r3, [pc, #152]	; (800cbdc <MlmeConfirm+0xac>)
 800cb44:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cb46:	4b26      	ldr	r3, [pc, #152]	; (800cbe0 <MlmeConfirm+0xb0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	6a1b      	ldr	r3, [r3, #32]
 800cb4c:	4823      	ldr	r0, [pc, #140]	; (800cbdc <MlmeConfirm+0xac>)
 800cb4e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	2002      	movs	r0, #2
 800cb54:	f000 f90e 	bl	800cd74 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b0a      	cmp	r3, #10
 800cb5e:	d035      	beq.n	800cbcc <MlmeConfirm+0x9c>
 800cb60:	2b0a      	cmp	r3, #10
 800cb62:	dc35      	bgt.n	800cbd0 <MlmeConfirm+0xa0>
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d002      	beq.n	800cb6e <MlmeConfirm+0x3e>
 800cb68:	2b04      	cmp	r3, #4
 800cb6a:	d023      	beq.n	800cbb4 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cb6c:	e030      	b.n	800cbd0 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cb6e:	2306      	movs	r3, #6
 800cb70:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	4618      	mov	r0, r3
 800cb78:	f004 fa30 	bl	8010fdc <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	4a19      	ldr	r2, [pc, #100]	; (800cbe4 <MlmeConfirm+0xb4>)
 800cb80:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cb82:	4819      	ldr	r0, [pc, #100]	; (800cbe8 <MlmeConfirm+0xb8>)
 800cb84:	f7ff fef0 	bl	800c968 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	785b      	ldrb	r3, [r3, #1]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d108      	bne.n	800cba2 <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cb90:	4b15      	ldr	r3, [pc, #84]	; (800cbe8 <MlmeConfirm+0xb8>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cb96:	4b15      	ldr	r3, [pc, #84]	; (800cbec <MlmeConfirm+0xbc>)
 800cb98:	785b      	ldrb	r3, [r3, #1]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fe32 	bl	800c804 <LmHandlerRequestClass>
 800cba0:	e002      	b.n	800cba8 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cba2:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <MlmeConfirm+0xb8>)
 800cba4:	22ff      	movs	r2, #255	; 0xff
 800cba6:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cba8:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <MlmeConfirm+0xb0>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	480e      	ldr	r0, [pc, #56]	; (800cbe8 <MlmeConfirm+0xb8>)
 800cbb0:	4798      	blx	r3
        break;
 800cbb2:	e00e      	b.n	800cbd2 <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cbb4:	4b0e      	ldr	r3, [pc, #56]	; (800cbf0 <MlmeConfirm+0xc0>)
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	7a1a      	ldrb	r2, [r3, #8]
 800cbbe:	4b0c      	ldr	r3, [pc, #48]	; (800cbf0 <MlmeConfirm+0xc0>)
 800cbc0:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	7a5a      	ldrb	r2, [r3, #9]
 800cbc6:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <MlmeConfirm+0xc0>)
 800cbc8:	73da      	strb	r2, [r3, #15]
        break;
 800cbca:	e002      	b.n	800cbd2 <MlmeConfirm+0xa2>
        break;
 800cbcc:	bf00      	nop
 800cbce:	e000      	b.n	800cbd2 <MlmeConfirm+0xa2>
        break;
 800cbd0:	bf00      	nop
    }
}
 800cbd2:	bf00      	nop
 800cbd4:	3730      	adds	r7, #48	; 0x30
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000318 	.word	0x20000318
 800cbe0:	200002f0 	.word	0x200002f0
 800cbe4:	200000a0 	.word	0x200000a0
 800cbe8:	200000c4 	.word	0x200000c4
 800cbec:	200002e0 	.word	0x200002e0
 800cbf0:	200000c8 	.word	0x200000c8

0800cbf4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cbfe:	4b22      	ldr	r3, [pc, #136]	; (800cc88 <MlmeIndication+0x94>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	785a      	ldrb	r2, [r3, #1]
 800cc08:	4b1f      	ldr	r3, [pc, #124]	; (800cc88 <MlmeIndication+0x94>)
 800cc0a:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc12:	b25a      	sxtb	r2, r3
 800cc14:	4b1c      	ldr	r3, [pc, #112]	; (800cc88 <MlmeIndication+0x94>)
 800cc16:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cc1e:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <MlmeIndication+0x94>)
 800cc20:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	78db      	ldrb	r3, [r3, #3]
 800cc26:	b25a      	sxtb	r2, r3
 800cc28:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <MlmeIndication+0x94>)
 800cc2a:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cc2c:	4b16      	ldr	r3, [pc, #88]	; (800cc88 <MlmeIndication+0x94>)
 800cc2e:	785b      	ldrb	r3, [r3, #1]
 800cc30:	2b0e      	cmp	r3, #14
 800cc32:	d005      	beq.n	800cc40 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cc34:	4b15      	ldr	r3, [pc, #84]	; (800cc8c <MlmeIndication+0x98>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3a:	4913      	ldr	r1, [pc, #76]	; (800cc88 <MlmeIndication+0x94>)
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b07      	cmp	r3, #7
 800cc46:	d117      	bne.n	800cc78 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cc48:	2300      	movs	r3, #0
 800cc4a:	723b      	strb	r3, [r7, #8]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	727b      	strb	r3, [r7, #9]
 800cc50:	2300      	movs	r3, #0
 800cc52:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cc54:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <MlmeIndication+0x9c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	4798      	blx	r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f083 0301 	eor.w	r3, r3, #1
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d009      	beq.n	800cc7c <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cc68:	f107 0008 	add.w	r0, r7, #8
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2100      	movs	r1, #0
 800cc72:	f7ff fcdb 	bl	800c62c <LmHandlerSend>
            }
        }
        break;
 800cc76:	e001      	b.n	800cc7c <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cc78:	bf00      	nop
 800cc7a:	e000      	b.n	800cc7e <MlmeIndication+0x8a>
        break;
 800cc7c:	bf00      	nop
    }
}
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200000c8 	.word	0x200000c8
 800cc8c:	200002f0 	.word	0x200002f0
 800cc90:	200002cc 	.word	0x200002cc

0800cc94 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	6039      	str	r1, [r7, #0]
 800cc9e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d103      	bne.n	800ccb2 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ccaa:	f000 f943 	bl	800cf34 <LmhpCompliancePackageFactory>
 800ccae:	60f8      	str	r0, [r7, #12]
            break;
 800ccb0:	e000      	b.n	800ccb4 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ccb2:	bf00      	nop
        }
    }
    if( package != NULL )
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d02b      	beq.n	800cd12 <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	4918      	ldr	r1, [pc, #96]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ccc4:	79fb      	ldrb	r3, [r7, #7]
 800ccc6:	4a16      	ldr	r2, [pc, #88]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cccc:	4a15      	ldr	r2, [pc, #84]	; (800cd24 <LmHandlerPackageRegister+0x90>)
 800ccce:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	4a13      	ldr	r2, [pc, #76]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800ccd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd8:	4a13      	ldr	r2, [pc, #76]	; (800cd28 <LmHandlerPackageRegister+0x94>)
 800ccda:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	4a10      	ldr	r2, [pc, #64]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800cce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce4:	4a11      	ldr	r2, [pc, #68]	; (800cd2c <LmHandlerPackageRegister+0x98>)
 800cce6:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cce8:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <LmHandlerPackageRegister+0x9c>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	490c      	ldr	r1, [pc, #48]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800ccf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ccf4:	6912      	ldr	r2, [r2, #16]
 800ccf6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <LmHandlerPackageRegister+0x8c>)
 800ccfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	4a0c      	ldr	r2, [pc, #48]	; (800cd34 <LmHandlerPackageRegister+0xa0>)
 800cd04:	6851      	ldr	r1, [r2, #4]
 800cd06:	4a0b      	ldr	r2, [pc, #44]	; (800cd34 <LmHandlerPackageRegister+0xa0>)
 800cd08:	7852      	ldrb	r2, [r2, #1]
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e001      	b.n	800cd16 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	200002cc 	.word	0x200002cc
 800cd24:	0800c541 	.word	0x0800c541
 800cd28:	0800c62d 	.word	0x0800c62d
 800cd2c:	0800c7d9 	.word	0x0800c7d9
 800cd30:	200002f0 	.word	0x200002f0
 800cd34:	200000d8 	.word	0x200000d8

0800cd38 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cd42:	79fb      	ldrb	r3, [r7, #7]
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	d80e      	bhi.n	800cd66 <LmHandlerPackageIsInitialized+0x2e>
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	4a09      	ldr	r2, [pc, #36]	; (800cd70 <LmHandlerPackageIsInitialized+0x38>)
 800cd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d007      	beq.n	800cd66 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	4a05      	ldr	r2, [pc, #20]	; (800cd70 <LmHandlerPackageIsInitialized+0x38>)
 800cd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	4798      	blx	r3
 800cd62:	4603      	mov	r3, r0
 800cd64:	e000      	b.n	800cd68 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cd66:	2300      	movs	r3, #0
    }
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200002cc 	.word	0x200002cc

0800cd74 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	6039      	str	r1, [r7, #0]
 800cd7e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd80:	2300      	movs	r3, #0
 800cd82:	73fb      	strb	r3, [r7, #15]
 800cd84:	e067      	b.n	800ce56 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8a:	4a37      	ldr	r2, [pc, #220]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d051      	beq.n	800ce38 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cd94:	79fb      	ldrb	r3, [r7, #7]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d03d      	beq.n	800ce16 <LmHandlerPackagesNotify+0xa2>
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	dc4e      	bgt.n	800ce3c <LmHandlerPackagesNotify+0xc8>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d002      	beq.n	800cda8 <LmHandlerPackagesNotify+0x34>
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d011      	beq.n	800cdca <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cda6:	e049      	b.n	800ce3c <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cda8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdac:	4a2e      	ldr	r2, [pc, #184]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cdae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d043      	beq.n	800ce40 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cdb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdbc:	4a2a      	ldr	r2, [pc, #168]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cdbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	6838      	ldr	r0, [r7, #0]
 800cdc6:	4798      	blx	r3
                    break;
 800cdc8:	e03a      	b.n	800ce40 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdce:	4a26      	ldr	r2, [pc, #152]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d034      	beq.n	800ce44 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cdda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdde:	4a22      	ldr	r2, [pc, #136]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde4:	781a      	ldrb	r2, [r3, #0]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d00a      	beq.n	800ce04 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cdee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d126      	bne.n	800ce44 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	4798      	blx	r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01f      	beq.n	800ce44 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ce04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce08:	4a17      	ldr	r2, [pc, #92]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800ce0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	6838      	ldr	r0, [r7, #0]
 800ce12:	4798      	blx	r3
                    break;
 800ce14:	e016      	b.n	800ce44 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ce16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce1a:	4a13      	ldr	r2, [pc, #76]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800ce1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d010      	beq.n	800ce48 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ce26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2a:	4a0f      	ldr	r2, [pc, #60]	; (800ce68 <LmHandlerPackagesNotify+0xf4>)
 800ce2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	6838      	ldr	r0, [r7, #0]
 800ce34:	4798      	blx	r3
                    break;
 800ce36:	e007      	b.n	800ce48 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800ce38:	bf00      	nop
 800ce3a:	e006      	b.n	800ce4a <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce3c:	bf00      	nop
 800ce3e:	e004      	b.n	800ce4a <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce40:	bf00      	nop
 800ce42:	e002      	b.n	800ce4a <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce44:	bf00      	nop
 800ce46:	e000      	b.n	800ce4a <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce48:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	3301      	adds	r3, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	73fb      	strb	r3, [r7, #15]
 800ce56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	dd93      	ble.n	800cd86 <LmHandlerPackagesNotify+0x12>
    }
}
 800ce5e:	bf00      	nop
 800ce60:	bf00      	nop
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	200002cc 	.word	0x200002cc

0800ce6c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce72:	2300      	movs	r3, #0
 800ce74:	71fb      	strb	r3, [r7, #7]
 800ce76:	e022      	b.n	800cebe <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7c:	4a14      	ldr	r2, [pc, #80]	; (800ced0 <LmHandlerPackagesProcess+0x64>)
 800ce7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d015      	beq.n	800ceb2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ce86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce8a:	4a11      	ldr	r2, [pc, #68]	; (800ced0 <LmHandlerPackagesProcess+0x64>)
 800ce8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce90:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00d      	beq.n	800ceb2 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff ff4d 	bl	800cd38 <LmHandlerPackageIsInitialized>
 800ce9e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d006      	beq.n	800ceb2 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <LmHandlerPackagesProcess+0x64>)
 800ceaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ceb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	3301      	adds	r3, #1
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	71fb      	strb	r3, [r7, #7]
 800cebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cec2:	2b04      	cmp	r3, #4
 800cec4:	ddd8      	ble.n	800ce78 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	200002cc 	.word	0x200002cc

0800ced4 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	4603      	mov	r3, r0
 800cedc:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800cede:	79fb      	ldrb	r3, [r7, #7]
 800cee0:	4a06      	ldr	r2, [pc, #24]	; (800cefc <DisplayClassUpdate+0x28>)
 800cee2:	5cd3      	ldrb	r3, [r2, r3]
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4b06      	ldr	r3, [pc, #24]	; (800cf00 <DisplayClassUpdate+0x2c>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	2100      	movs	r1, #0
 800ceec:	2002      	movs	r0, #2
 800ceee:	f00d fbd3 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	0801b3d0 	.word	0x0801b3d0
 800cf00:	0801b3b4 	.word	0x0801b3b4

0800cf04 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cf0e:	bf00      	nop
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bc80      	pop	{r7}
 800cf16:	4770      	bx	lr

0800cf18 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800cf1c:	2300      	movs	r3, #0
#endif
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bc80      	pop	{r7}
 800cf24:	4770      	bx	lr

0800cf26 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800cf26:	b480      	push	{r7}
 800cf28:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cf38:	4b02      	ldr	r3, [pc, #8]	; (800cf44 <LmhpCompliancePackageFactory+0x10>)
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bc80      	pop	{r7}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	200000e0 	.word	0x200000e0

0800cf48 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00f      	beq.n	800cf7c <LmhpComplianceInit+0x34>
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00c      	beq.n	800cf7c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cf62:	4a0c      	ldr	r2, [pc, #48]	; (800cf94 <LmhpComplianceInit+0x4c>)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cf68:	4a0b      	ldr	r2, [pc, #44]	; (800cf98 <LmhpComplianceInit+0x50>)
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cf6e:	4a0a      	ldr	r2, [pc, #40]	; (800cf98 <LmhpComplianceInit+0x50>)
 800cf70:	79fb      	ldrb	r3, [r7, #7]
 800cf72:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cf74:	4b08      	ldr	r3, [pc, #32]	; (800cf98 <LmhpComplianceInit+0x50>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	e006      	b.n	800cf8a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cf7c:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <LmhpComplianceInit+0x4c>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf82:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <LmhpComplianceInit+0x50>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
    }
}
 800cf88:	bf00      	nop
 800cf8a:	bf00      	nop
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bc80      	pop	{r7}
 800cf92:	4770      	bx	lr
 800cf94:	20000450 	.word	0x20000450
 800cf98:	2000043c 	.word	0x2000043c

0800cf9c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cfa0:	4b02      	ldr	r3, [pc, #8]	; (800cfac <LmhpComplianceIsInitialized+0x10>)
 800cfa2:	781b      	ldrb	r3, [r3, #0]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bc80      	pop	{r7}
 800cfaa:	4770      	bx	lr
 800cfac:	2000043c 	.word	0x2000043c

0800cfb0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cfb4:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <LmhpComplianceIsRunning+0x24>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	f083 0301 	eor.w	r3, r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e001      	b.n	800cfca <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cfc6:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <LmhpComplianceIsRunning+0x24>)
 800cfc8:	785b      	ldrb	r3, [r3, #1]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bc80      	pop	{r7}
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	2000043c 	.word	0x2000043c

0800cfd8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b083      	sub	sp, #12
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cfe0:	4b0f      	ldr	r3, [pc, #60]	; (800d020 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	f083 0301 	eor.w	r3, r3, #1
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d112      	bne.n	800d014 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800cfee:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <LmhpComplianceOnMcpsConfirm+0x48>)
 800cff0:	785b      	ldrb	r3, [r3, #1]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00f      	beq.n	800d016 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d10b      	bne.n	800d016 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d002:	2b00      	cmp	r3, #0
 800d004:	d007      	beq.n	800d016 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d006:	4b06      	ldr	r3, [pc, #24]	; (800d020 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d008:	899b      	ldrh	r3, [r3, #12]
 800d00a:	3301      	adds	r3, #1
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	4b04      	ldr	r3, [pc, #16]	; (800d020 <LmhpComplianceOnMcpsConfirm+0x48>)
 800d010:	819a      	strh	r2, [r3, #12]
 800d012:	e000      	b.n	800d016 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d014:	bf00      	nop
    }
}
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	bc80      	pop	{r7}
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	2000043c 	.word	0x2000043c

0800d024 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d02c:	4b12      	ldr	r3, [pc, #72]	; (800d078 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	f083 0301 	eor.w	r3, r3, #1
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d116      	bne.n	800d068 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d03a:	4b0f      	ldr	r3, [pc, #60]	; (800d078 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	f083 0301 	eor.w	r3, r3, #1
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d111      	bne.n	800d06c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b04      	cmp	r3, #4
 800d04e:	d10e      	bne.n	800d06e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d050:	4b09      	ldr	r3, [pc, #36]	; (800d078 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d052:	2201      	movs	r2, #1
 800d054:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	7a1a      	ldrb	r2, [r3, #8]
 800d05a:	4b07      	ldr	r3, [pc, #28]	; (800d078 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d05c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7a5a      	ldrb	r2, [r3, #9]
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d064:	741a      	strb	r2, [r3, #16]
 800d066:	e002      	b.n	800d06e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d068:	bf00      	nop
 800d06a:	e000      	b.n	800d06e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d06c:	bf00      	nop
    }
}
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	bc80      	pop	{r7}
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	2000043c 	.word	0x2000043c

0800d07c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d07c:	b590      	push	{r4, r7, lr}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d082:	4b33      	ldr	r3, [pc, #204]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f083 0301 	eor.w	r3, r3, #1
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d090:	f04f 33ff 	mov.w	r3, #4294967295
 800d094:	e058      	b.n	800d148 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d096:	4b2e      	ldr	r3, [pc, #184]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d098:	785b      	ldrb	r3, [r3, #1]
 800d09a:	f083 0301 	eor.w	r3, r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e04f      	b.n	800d148 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d0a8:	4b29      	ldr	r3, [pc, #164]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0aa:	7b9b      	ldrb	r3, [r3, #14]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d019      	beq.n	800d0e4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d0b0:	4b27      	ldr	r3, [pc, #156]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d0b6:	4b26      	ldr	r3, [pc, #152]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0b8:	2203      	movs	r2, #3
 800d0ba:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d0bc:	4b24      	ldr	r3, [pc, #144]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2205      	movs	r2, #5
 800d0c2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d0c4:	4b22      	ldr	r3, [pc, #136]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	4a21      	ldr	r2, [pc, #132]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0cc:	7bd2      	ldrb	r2, [r2, #15]
 800d0ce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d0d0:	4b1f      	ldr	r3, [pc, #124]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	3302      	adds	r3, #2
 800d0d6:	4a1e      	ldr	r2, [pc, #120]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0d8:	7c12      	ldrb	r2, [r2, #16]
 800d0da:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d0dc:	4b1c      	ldr	r3, [pc, #112]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0de:	2201      	movs	r2, #1
 800d0e0:	709a      	strb	r2, [r3, #2]
 800d0e2:	e01c      	b.n	800d11e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0e6:	789b      	ldrb	r3, [r3, #2]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d005      	beq.n	800d0f8 <LmhpComplianceTxProcess+0x7c>
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d116      	bne.n	800d11e <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d0f0:	4b17      	ldr	r3, [pc, #92]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	709a      	strb	r2, [r3, #2]
            break;
 800d0f6:	e012      	b.n	800d11e <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d0f8:	4b15      	ldr	r3, [pc, #84]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d0fe:	4b14      	ldr	r3, [pc, #80]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d100:	899b      	ldrh	r3, [r3, #12]
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	b29a      	uxth	r2, r3
 800d106:	4b12      	ldr	r3, [pc, #72]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d10e:	4b10      	ldr	r3, [pc, #64]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d110:	899a      	ldrh	r2, [r3, #12]
 800d112:	4b0f      	ldr	r3, [pc, #60]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	3301      	adds	r3, #1
 800d118:	b2d2      	uxtb	r2, r2
 800d11a:	701a      	strb	r2, [r3, #0]
            break;
 800d11c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d11e:	23e0      	movs	r3, #224	; 0xe0
 800d120:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d122:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d124:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d126:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d128:	4b09      	ldr	r3, [pc, #36]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d12a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d12c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d12e:	4809      	ldr	r0, [pc, #36]	; (800d154 <LmhpComplianceTxProcess+0xd8>)
 800d130:	f00d f83a 	bl	801a1a8 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d134:	4b08      	ldr	r3, [pc, #32]	; (800d158 <LmhpComplianceTxProcess+0xdc>)
 800d136:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <LmhpComplianceTxProcess+0xd4>)
 800d13a:	78db      	ldrb	r3, [r3, #3]
 800d13c:	4619      	mov	r1, r3
 800d13e:	4638      	mov	r0, r7
 800d140:	2301      	movs	r3, #1
 800d142:	2200      	movs	r2, #0
 800d144:	47a0      	blx	r4
 800d146:	4603      	mov	r3, r0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd90      	pop	{r4, r7, pc}
 800d150:	2000043c 	.word	0x2000043c
 800d154:	20000424 	.word	0x20000424
 800d158:	200000e0 	.word	0x200000e0

0800d15c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b0a2      	sub	sp, #136	; 0x88
 800d160:	af02      	add	r7, sp, #8
 800d162:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d164:	4bae      	ldr	r3, [pc, #696]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	f083 0301 	eor.w	r3, r3, #1
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 81c0 	bne.w	800d4f4 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7b5b      	ldrb	r3, [r3, #13]
 800d178:	f083 0301 	eor.w	r3, r3, #1
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f040 81ba 	bne.w	800d4f8 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d184:	4ba6      	ldr	r3, [pc, #664]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d186:	785b      	ldrb	r3, [r3, #1]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00c      	beq.n	800d1a6 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	7b9b      	ldrb	r3, [r3, #14]
 800d190:	f083 0301 	eor.w	r3, r3, #1
 800d194:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d196:	2b00      	cmp	r3, #0
 800d198:	d005      	beq.n	800d1a6 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d19a:	4ba1      	ldr	r3, [pc, #644]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d19c:	899b      	ldrh	r3, [r3, #12]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	4b9f      	ldr	r3, [pc, #636]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a4:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	78db      	ldrb	r3, [r3, #3]
 800d1aa:	2be0      	cmp	r3, #224	; 0xe0
 800d1ac:	f040 81a6 	bne.w	800d4fc <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d1b0:	4b9b      	ldr	r3, [pc, #620]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b2:	785b      	ldrb	r3, [r3, #1]
 800d1b4:	f083 0301 	eor.w	r3, r3, #1
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d060      	beq.n	800d280 <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7b1b      	ldrb	r3, [r3, #12]
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	f040 819f 	bne.w	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	f040 8199 	bne.w	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	f040 8192 	bne.w	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	3302      	adds	r3, #2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	f040 818b 	bne.w	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	3303      	adds	r3, #3
 800d1f6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	f040 8184 	bne.w	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d1fe:	4b88      	ldr	r3, [pc, #544]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d200:	2200      	movs	r2, #0
 800d202:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d204:	4b86      	ldr	r3, [pc, #536]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d206:	22e0      	movs	r2, #224	; 0xe0
 800d208:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d20a:	4b85      	ldr	r3, [pc, #532]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d20c:	2202      	movs	r2, #2
 800d20e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d210:	4b83      	ldr	r3, [pc, #524]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d212:	2200      	movs	r2, #0
 800d214:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d216:	4b82      	ldr	r3, [pc, #520]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d218:	2200      	movs	r2, #0
 800d21a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d21c:	4b80      	ldr	r3, [pc, #512]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d21e:	2200      	movs	r2, #0
 800d220:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d222:	4b7f      	ldr	r3, [pc, #508]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d224:	2200      	movs	r2, #0
 800d226:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d228:	4b7d      	ldr	r3, [pc, #500]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d22a:	2201      	movs	r2, #1
 800d22c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d22e:	4b7c      	ldr	r3, [pc, #496]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d230:	2201      	movs	r2, #1
 800d232:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d234:	2304      	movs	r3, #4
 800d236:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d238:	2301      	movs	r3, #1
 800d23a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d23c:	f107 0308 	add.w	r3, r7, #8
 800d240:	4618      	mov	r0, r3
 800d242:	f004 f829 	bl	8011298 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d246:	2000      	movs	r0, #0
 800d248:	f004 fd9a 	bl	8011d80 <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d24c:	4b75      	ldr	r3, [pc, #468]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d256:	4b73      	ldr	r3, [pc, #460]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d25e:	2300      	movs	r3, #0
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	4b71      	ldr	r3, [pc, #452]	; (800d428 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d264:	2200      	movs	r2, #0
 800d266:	f04f 31ff 	mov.w	r1, #4294967295
 800d26a:	4870      	ldr	r0, [pc, #448]	; (800d42c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d26c:	f00c ff66 	bl	801a13c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d270:	f241 3188 	movw	r1, #5000	; 0x1388
 800d274:	486d      	ldr	r0, [pc, #436]	; (800d42c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d276:	f00d f875 	bl	801a364 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d27a:	f7ff feff 	bl	800d07c <LmhpComplianceTxProcess>
 800d27e:	e142      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	781a      	ldrb	r2, [r3, #0]
 800d286:	4b66      	ldr	r3, [pc, #408]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d288:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d28a:	4b65      	ldr	r3, [pc, #404]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d28c:	789b      	ldrb	r3, [r3, #2]
 800d28e:	2b0a      	cmp	r3, #10
 800d290:	f200 8136 	bhi.w	800d500 <LmhpComplianceOnMcpsIndication+0x3a4>
 800d294:	a201      	add	r2, pc, #4	; (adr r2, 800d29c <LmhpComplianceOnMcpsIndication+0x140>)
 800d296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29a:	bf00      	nop
 800d29c:	0800d2c9 	.word	0x0800d2c9
 800d2a0:	0800d313 	.word	0x0800d313
 800d2a4:	0800d31b 	.word	0x0800d31b
 800d2a8:	0800d329 	.word	0x0800d329
 800d2ac:	0800d337 	.word	0x0800d337
 800d2b0:	0800d38f 	.word	0x0800d38f
 800d2b4:	0800d3a1 	.word	0x0800d3a1
 800d2b8:	0800d3f1 	.word	0x0800d3f1
 800d2bc:	0800d4ad 	.word	0x0800d4ad
 800d2c0:	0800d4bf 	.word	0x0800d4bf
 800d2c4:	0800d4d9 	.word	0x0800d4d9
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d2c8:	4858      	ldr	r0, [pc, #352]	; (800d42c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d2ca:	f00c ffdb 	bl	801a284 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d2ce:	4b54      	ldr	r3, [pc, #336]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d2d4:	4b52      	ldr	r3, [pc, #328]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d2da:	2304      	movs	r3, #4
 800d2dc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d2de:	4b51      	ldr	r3, [pc, #324]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d2e6:	f107 0308 	add.w	r3, r7, #8
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f003 ffd4 	bl	8011298 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d2f0:	4b4c      	ldr	r3, [pc, #304]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	785b      	ldrb	r3, [r3, #1]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f004 fd42 	bl	8011d80 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d2fc:	4b49      	ldr	r3, [pc, #292]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80fe 	beq.w	800d504 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d308:	4b46      	ldr	r3, [pc, #280]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	4798      	blx	r3
                }
            }
            break;
 800d310:	e0f8      	b.n	800d504 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d312:	4b43      	ldr	r3, [pc, #268]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d314:	2202      	movs	r2, #2
 800d316:	719a      	strb	r2, [r3, #6]
            break;
 800d318:	e0f5      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d31a:	4b41      	ldr	r3, [pc, #260]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d31c:	2201      	movs	r2, #1
 800d31e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d320:	4b3f      	ldr	r3, [pc, #252]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d322:	2201      	movs	r2, #1
 800d324:	709a      	strb	r2, [r3, #2]
            break;
 800d326:	e0ee      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d328:	4b3d      	ldr	r3, [pc, #244]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d32e:	4b3c      	ldr	r3, [pc, #240]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d330:	2201      	movs	r2, #1
 800d332:	709a      	strb	r2, [r3, #2]
            break;
 800d334:	e0e7      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7b1a      	ldrb	r2, [r3, #12]
 800d33a:	4b39      	ldr	r3, [pc, #228]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d33c:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d33e:	4b38      	ldr	r3, [pc, #224]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	2204      	movs	r2, #4
 800d344:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d346:	2301      	movs	r3, #1
 800d348:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d34c:	e012      	b.n	800d374 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	689a      	ldr	r2, [r3, #8]
 800d352:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d356:	4413      	add	r3, r2
 800d358:	781a      	ldrb	r2, [r3, #0]
 800d35a:	4b31      	ldr	r3, [pc, #196]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d35c:	6899      	ldr	r1, [r3, #8]
 800d35e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d362:	440b      	add	r3, r1
 800d364:	3201      	adds	r2, #1
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d36a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d36e:	3301      	adds	r3, #1
 800d370:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d374:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d376:	795a      	ldrb	r2, [r3, #5]
 800d378:	4b29      	ldr	r3, [pc, #164]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d37a:	799b      	ldrb	r3, [r3, #6]
 800d37c:	4293      	cmp	r3, r2
 800d37e:	bf28      	it	cs
 800d380:	4613      	movcs	r3, r2
 800d382:	b2db      	uxtb	r3, r3
 800d384:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d388:	429a      	cmp	r2, r3
 800d38a:	d3e0      	bcc.n	800d34e <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d38c:	e0bb      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d38e:	2304      	movs	r3, #4
 800d390:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d394:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d398:	4618      	mov	r0, r3
 800d39a:	f004 fabb 	bl	8011914 <LoRaMacMlmeRequest>
            }
            break;
 800d39e:	e0b2      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d3a0:	4822      	ldr	r0, [pc, #136]	; (800d42c <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d3a2:	f00c ff6f 	bl	801a284 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d3a6:	4b1e      	ldr	r3, [pc, #120]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d3ac:	4b1c      	ldr	r3, [pc, #112]	; (800d420 <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d3b2:	2304      	movs	r3, #4
 800d3b4:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d3b6:	4b1b      	ldr	r3, [pc, #108]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f003 ff68 	bl	8011298 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d3c8:	4b16      	ldr	r3, [pc, #88]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	785b      	ldrb	r3, [r3, #1]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f004 fcd6 	bl	8011d80 <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d3d4:	4b13      	ldr	r3, [pc, #76]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d3de:	4b11      	ldr	r3, [pc, #68]	; (800d424 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d3e6:	4b12      	ldr	r3, [pc, #72]	; (800d430 <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ea:	2002      	movs	r0, #2
 800d3ec:	4798      	blx	r3
            }
            break;
 800d3ee:	e08a      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7b1b      	ldrb	r3, [r3, #12]
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d11d      	bne.n	800d434 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d3f8:	2305      	movs	r3, #5
 800d3fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	3301      	adds	r3, #1
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	021b      	lsls	r3, r3, #8
 800d408:	b21a      	sxth	r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	3302      	adds	r3, #2
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	b21b      	sxth	r3, r3
 800d414:	4313      	orrs	r3, r2
 800d416:	b21b      	sxth	r3, r3
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d41e:	e03c      	b.n	800d49a <LmhpComplianceOnMcpsIndication+0x33e>
 800d420:	2000043c 	.word	0x2000043c
 800d424:	20000450 	.word	0x20000450
 800d428:	0800d51d 	.word	0x0800d51d
 800d42c:	20000424 	.word	0x20000424
 800d430:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7b1b      	ldrb	r3, [r3, #12]
 800d438:	2b07      	cmp	r3, #7
 800d43a:	d12e      	bne.n	800d49a <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d43c:	2306      	movs	r3, #6
 800d43e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	3301      	adds	r3, #1
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	b21a      	sxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	3302      	adds	r3, #2
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	b21b      	sxth	r3, r3
 800d458:	4313      	orrs	r3, r2
 800d45a:	b21b      	sxth	r3, r3
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	3303      	adds	r3, #3
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	041a      	lsls	r2, r3, #16
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	3304      	adds	r3, #4
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	021b      	lsls	r3, r3, #8
 800d476:	4313      	orrs	r3, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	6892      	ldr	r2, [r2, #8]
 800d47c:	3205      	adds	r2, #5
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	4313      	orrs	r3, r2
 800d482:	461a      	mov	r2, r3
 800d484:	2364      	movs	r3, #100	; 0x64
 800d486:	fb03 f302 	mul.w	r3, r3, r2
 800d48a:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	3306      	adds	r3, #6
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	b25b      	sxtb	r3, r3
 800d496:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d49a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f004 fa38 	bl	8011914 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d4a4:	4b19      	ldr	r3, [pc, #100]	; (800d50c <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d4aa:	e02c      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d4ac:	230a      	movs	r3, #10
 800d4ae:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d4b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f004 fa2c 	bl	8011914 <LoRaMacMlmeRequest>
            }
            break;
 800d4bc:	e023      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d4cc:	f107 0308 	add.w	r3, r7, #8
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f003 fee1 	bl	8011298 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d4d6:	e016      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d4d8:	230d      	movs	r3, #13
 800d4da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d4e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f004 fa11 	bl	8011914 <LoRaMacMlmeRequest>
            }
            break;
 800d4f2:	e008      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4f4:	bf00      	nop
 800d4f6:	e006      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4f8:	bf00      	nop
 800d4fa:	e004      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d4fc:	bf00      	nop
 800d4fe:	e002      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d500:	bf00      	nop
 800d502:	e000      	b.n	800d506 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d504:	bf00      	nop
        }
    }
}
 800d506:	3780      	adds	r7, #128	; 0x80
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}
 800d50c:	2000043c 	.word	0x2000043c

0800d510 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d510:	b480      	push	{r7}
 800d512:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d514:	bf00      	nop
 800d516:	46bd      	mov	sp, r7
 800d518:	bc80      	pop	{r7}
 800d51a:	4770      	bx	lr

0800d51c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d524:	f7ff fdaa 	bl	800d07c <LmhpComplianceTxProcess>
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d536:	f00c ffbf 	bl	801a4b8 <UTIL_TIMER_GetCurrentTime>
 800d53a:	4603      	mov	r3, r0
 800d53c:	4a16      	ldr	r2, [pc, #88]	; (800d598 <OnRadioTxDone+0x68>)
 800d53e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d540:	4c16      	ldr	r4, [pc, #88]	; (800d59c <OnRadioTxDone+0x6c>)
 800d542:	463b      	mov	r3, r7
 800d544:	4618      	mov	r0, r3
 800d546:	f00c fa39 	bl	80199bc <SysTimeGet>
 800d54a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d54e:	463a      	mov	r2, r7
 800d550:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d554:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d558:	4a11      	ldr	r2, [pc, #68]	; (800d5a0 <OnRadioTxDone+0x70>)
 800d55a:	7813      	ldrb	r3, [r2, #0]
 800d55c:	f043 0310 	orr.w	r3, r3, #16
 800d560:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d562:	4b0e      	ldr	r3, [pc, #56]	; (800d59c <OnRadioTxDone+0x6c>)
 800d564:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <OnRadioTxDone+0x52>
 800d56c:	4b0b      	ldr	r3, [pc, #44]	; (800d59c <OnRadioTxDone+0x6c>)
 800d56e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d004      	beq.n	800d582 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d578:	4b08      	ldr	r3, [pc, #32]	; (800d59c <OnRadioTxDone+0x6c>)
 800d57a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d582:	4b08      	ldr	r3, [pc, #32]	; (800d5a4 <OnRadioTxDone+0x74>)
 800d584:	2201      	movs	r2, #1
 800d586:	2100      	movs	r1, #0
 800d588:	2002      	movs	r0, #2
 800d58a:	f00d f885 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	bd90      	pop	{r4, r7, pc}
 800d596:	bf00      	nop
 800d598:	200017a4 	.word	0x200017a4
 800d59c:	20000454 	.word	0x20000454
 800d5a0:	20000ca8 	.word	0x20000ca8
 800d5a4:	0801b3d4 	.word	0x0801b3d4

0800d5a8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	817b      	strh	r3, [r7, #10]
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	813b      	strh	r3, [r7, #8]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d5c2:	f00c ff79 	bl	801a4b8 <UTIL_TIMER_GetCurrentTime>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	4a16      	ldr	r2, [pc, #88]	; (800d624 <OnRadioRxDone+0x7c>)
 800d5ca:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d5cc:	4a15      	ldr	r2, [pc, #84]	; (800d624 <OnRadioRxDone+0x7c>)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d5d2:	4a14      	ldr	r2, [pc, #80]	; (800d624 <OnRadioRxDone+0x7c>)
 800d5d4:	897b      	ldrh	r3, [r7, #10]
 800d5d6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d5d8:	4a12      	ldr	r2, [pc, #72]	; (800d624 <OnRadioRxDone+0x7c>)
 800d5da:	893b      	ldrh	r3, [r7, #8]
 800d5dc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d5de:	4a11      	ldr	r2, [pc, #68]	; (800d624 <OnRadioRxDone+0x7c>)
 800d5e0:	79fb      	ldrb	r3, [r7, #7]
 800d5e2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d5e4:	4a10      	ldr	r2, [pc, #64]	; (800d628 <OnRadioRxDone+0x80>)
 800d5e6:	7813      	ldrb	r3, [r2, #0]
 800d5e8:	f043 0308 	orr.w	r3, r3, #8
 800d5ec:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d5ee:	4b0f      	ldr	r3, [pc, #60]	; (800d62c <OnRadioRxDone+0x84>)
 800d5f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00a      	beq.n	800d60e <OnRadioRxDone+0x66>
 800d5f8:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <OnRadioRxDone+0x84>)
 800d5fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d004      	beq.n	800d60e <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d604:	4b09      	ldr	r3, [pc, #36]	; (800d62c <OnRadioRxDone+0x84>)
 800d606:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d60e:	4b08      	ldr	r3, [pc, #32]	; (800d630 <OnRadioRxDone+0x88>)
 800d610:	2201      	movs	r2, #1
 800d612:	2100      	movs	r1, #0
 800d614:	2002      	movs	r0, #2
 800d616:	f00d f83f 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d61a:	bf00      	nop
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	200017a8 	.word	0x200017a8
 800d628:	20000ca8 	.word	0x20000ca8
 800d62c:	20000454 	.word	0x20000454
 800d630:	0801b3e4 	.word	0x0801b3e4

0800d634 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d638:	4a0e      	ldr	r2, [pc, #56]	; (800d674 <OnRadioTxTimeout+0x40>)
 800d63a:	7813      	ldrb	r3, [r2, #0]
 800d63c:	f043 0304 	orr.w	r3, r3, #4
 800d640:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d642:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <OnRadioTxTimeout+0x44>)
 800d644:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00a      	beq.n	800d662 <OnRadioTxTimeout+0x2e>
 800d64c:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <OnRadioTxTimeout+0x44>)
 800d64e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d004      	beq.n	800d662 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d658:	4b07      	ldr	r3, [pc, #28]	; (800d678 <OnRadioTxTimeout+0x44>)
 800d65a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d662:	4b06      	ldr	r3, [pc, #24]	; (800d67c <OnRadioTxTimeout+0x48>)
 800d664:	2201      	movs	r2, #1
 800d666:	2100      	movs	r1, #0
 800d668:	2002      	movs	r0, #2
 800d66a:	f00d f815 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d66e:	bf00      	nop
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20000ca8 	.word	0x20000ca8
 800d678:	20000454 	.word	0x20000454
 800d67c:	0801b3f4 	.word	0x0801b3f4

0800d680 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d684:	4a0b      	ldr	r2, [pc, #44]	; (800d6b4 <OnRadioRxError+0x34>)
 800d686:	7813      	ldrb	r3, [r2, #0]
 800d688:	f043 0302 	orr.w	r3, r3, #2
 800d68c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d68e:	4b0a      	ldr	r3, [pc, #40]	; (800d6b8 <OnRadioRxError+0x38>)
 800d690:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00a      	beq.n	800d6ae <OnRadioRxError+0x2e>
 800d698:	4b07      	ldr	r3, [pc, #28]	; (800d6b8 <OnRadioRxError+0x38>)
 800d69a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d004      	beq.n	800d6ae <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6a4:	4b04      	ldr	r3, [pc, #16]	; (800d6b8 <OnRadioRxError+0x38>)
 800d6a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	4798      	blx	r3
    }
}
 800d6ae:	bf00      	nop
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000ca8 	.word	0x20000ca8
 800d6b8:	20000454 	.word	0x20000454

0800d6bc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d6c0:	4a0e      	ldr	r2, [pc, #56]	; (800d6fc <OnRadioRxTimeout+0x40>)
 800d6c2:	7813      	ldrb	r3, [r2, #0]
 800d6c4:	f043 0301 	orr.w	r3, r3, #1
 800d6c8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6ca:	4b0d      	ldr	r3, [pc, #52]	; (800d700 <OnRadioRxTimeout+0x44>)
 800d6cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00a      	beq.n	800d6ea <OnRadioRxTimeout+0x2e>
 800d6d4:	4b0a      	ldr	r3, [pc, #40]	; (800d700 <OnRadioRxTimeout+0x44>)
 800d6d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d004      	beq.n	800d6ea <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <OnRadioRxTimeout+0x44>)
 800d6e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d6ea:	4b06      	ldr	r3, [pc, #24]	; (800d704 <OnRadioRxTimeout+0x48>)
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	2002      	movs	r0, #2
 800d6f2:	f00c ffd1 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 800d6f6:	bf00      	nop
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20000ca8 	.word	0x20000ca8
 800d700:	20000454 	.word	0x20000454
 800d704:	0801b404 	.word	0x0801b404

0800d708 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d70c:	4b08      	ldr	r3, [pc, #32]	; (800d730 <UpdateRxSlotIdleState+0x28>)
 800d70e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d712:	2b02      	cmp	r3, #2
 800d714:	d004      	beq.n	800d720 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d716:	4b07      	ldr	r3, [pc, #28]	; (800d734 <UpdateRxSlotIdleState+0x2c>)
 800d718:	2206      	movs	r2, #6
 800d71a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d71e:	e003      	b.n	800d728 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d720:	4b04      	ldr	r3, [pc, #16]	; (800d734 <UpdateRxSlotIdleState+0x2c>)
 800d722:	2202      	movs	r2, #2
 800d724:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d728:	bf00      	nop
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bc80      	pop	{r7}
 800d72e:	4770      	bx	lr
 800d730:	2000095c 	.word	0x2000095c
 800d734:	20000454 	.word	0x20000454

0800d738 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08e      	sub	sp, #56	; 0x38
 800d73c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d73e:	4b44      	ldr	r3, [pc, #272]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d740:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d744:	2b02      	cmp	r3, #2
 800d746:	d002      	beq.n	800d74e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d748:	4b42      	ldr	r3, [pc, #264]	; (800d854 <ProcessRadioTxDone+0x11c>)
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d74e:	4b42      	ldr	r3, [pc, #264]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d750:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d754:	4619      	mov	r1, r3
 800d756:	4841      	ldr	r0, [pc, #260]	; (800d85c <ProcessRadioTxDone+0x124>)
 800d758:	f00c fe04 	bl	801a364 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d75c:	483f      	ldr	r0, [pc, #252]	; (800d85c <ProcessRadioTxDone+0x124>)
 800d75e:	f00c fd23 	bl	801a1a8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d762:	4b3d      	ldr	r3, [pc, #244]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d764:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d768:	4619      	mov	r1, r3
 800d76a:	483d      	ldr	r0, [pc, #244]	; (800d860 <ProcessRadioTxDone+0x128>)
 800d76c:	f00c fdfa 	bl	801a364 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d770:	483b      	ldr	r0, [pc, #236]	; (800d860 <ProcessRadioTxDone+0x128>)
 800d772:	f00c fd19 	bl	801a1a8 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d776:	4b36      	ldr	r3, [pc, #216]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d778:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d004      	beq.n	800d78a <ProcessRadioTxDone+0x52>
 800d780:	4b35      	ldr	r3, [pc, #212]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d782:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d786:	2b00      	cmp	r3, #0
 800d788:	d019      	beq.n	800d7be <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d78a:	2316      	movs	r3, #22
 800d78c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d790:	4b2f      	ldr	r3, [pc, #188]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d796:	f107 0220 	add.w	r2, r7, #32
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f006 fb55 	bl	8013e4c <RegionGetPhyParam>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d7a8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	482c      	ldr	r0, [pc, #176]	; (800d864 <ProcessRadioTxDone+0x12c>)
 800d7b4:	f00c fdd6 	bl	801a364 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d7b8:	482a      	ldr	r0, [pc, #168]	; (800d864 <ProcessRadioTxDone+0x12c>)
 800d7ba:	f00c fcf5 	bl	801a1a8 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d7be:	4b2a      	ldr	r3, [pc, #168]	; (800d868 <ProcessRadioTxDone+0x130>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a23      	ldr	r2, [pc, #140]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d7c6:	4b24      	ldr	r3, [pc, #144]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d7c8:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d7cc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d7ce:	4b26      	ldr	r3, [pc, #152]	; (800d868 <ProcessRadioTxDone+0x130>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d7d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f00c f927 	bl	8019a2c <SysTimeGetMcuTime>
 800d7de:	4638      	mov	r0, r7
 800d7e0:	4b1b      	ldr	r3, [pc, #108]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d7e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d7e6:	9200      	str	r2, [sp, #0]
 800d7e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d7ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d7f0:	ca06      	ldmia	r2, {r1, r2}
 800d7f2:	f00c f87c 	bl	80198ee <SysTimeSub>
 800d7f6:	f107 0314 	add.w	r3, r7, #20
 800d7fa:	463a      	mov	r2, r7
 800d7fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d800:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d804:	4b14      	ldr	r3, [pc, #80]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d806:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d80a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d80c:	2301      	movs	r3, #1
 800d80e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d810:	4b0f      	ldr	r3, [pc, #60]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d812:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d81a:	2300      	movs	r3, #0
 800d81c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d81e:	4b0c      	ldr	r3, [pc, #48]	; (800d850 <ProcessRadioTxDone+0x118>)
 800d820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d824:	f107 0208 	add.w	r2, r7, #8
 800d828:	4611      	mov	r1, r2
 800d82a:	4618      	mov	r0, r3
 800d82c:	f006 fb27 	bl	8013e7e <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d830:	4b09      	ldr	r3, [pc, #36]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d832:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d836:	f083 0301 	eor.w	r3, r3, #1
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d003      	beq.n	800d848 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <ProcessRadioTxDone+0x120>)
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d848:	bf00      	nop
 800d84a:	3730      	adds	r7, #48	; 0x30
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	2000095c 	.word	0x2000095c
 800d854:	0801ba54 	.word	0x0801ba54
 800d858:	20000454 	.word	0x20000454
 800d85c:	200007d4 	.word	0x200007d4
 800d860:	200007ec 	.word	0x200007ec
 800d864:	2000084c 	.word	0x2000084c
 800d868:	200017a4 	.word	0x200017a4

0800d86c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d870:	4b10      	ldr	r3, [pc, #64]	; (800d8b4 <PrepareRxDoneAbort+0x48>)
 800d872:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d87a:	4a0e      	ldr	r2, [pc, #56]	; (800d8b4 <PrepareRxDoneAbort+0x48>)
 800d87c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d880:	4b0c      	ldr	r3, [pc, #48]	; (800d8b4 <PrepareRxDoneAbort+0x48>)
 800d882:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d88a:	2000      	movs	r0, #0
 800d88c:	f001 f8f8 	bl	800ea80 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d890:	4a08      	ldr	r2, [pc, #32]	; (800d8b4 <PrepareRxDoneAbort+0x48>)
 800d892:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d896:	f043 0302 	orr.w	r3, r3, #2
 800d89a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d89e:	4a05      	ldr	r2, [pc, #20]	; (800d8b4 <PrepareRxDoneAbort+0x48>)
 800d8a0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d8a4:	f043 0320 	orr.w	r3, r3, #32
 800d8a8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d8ac:	f7ff ff2c 	bl	800d708 <UpdateRxSlotIdleState>
}
 800d8b0:	bf00      	nop
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	20000454 	.word	0x20000454

0800d8b8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d8b8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ba:	b0a6      	sub	sp, #152	; 0x98
 800d8bc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d8be:	2313      	movs	r3, #19
 800d8c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d8c4:	4bb9      	ldr	r3, [pc, #740]	; (800dbac <ProcessRadioRxDone+0x2f4>)
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d8ca:	4bb8      	ldr	r3, [pc, #736]	; (800dbac <ProcessRadioRxDone+0x2f4>)
 800d8cc:	891b      	ldrh	r3, [r3, #8]
 800d8ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d8d2:	4bb6      	ldr	r3, [pc, #728]	; (800dbac <ProcessRadioRxDone+0x2f4>)
 800d8d4:	895b      	ldrh	r3, [r3, #10]
 800d8d6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d8da:	4bb4      	ldr	r3, [pc, #720]	; (800dbac <ProcessRadioRxDone+0x2f4>)
 800d8dc:	7b1b      	ldrb	r3, [r3, #12]
 800d8de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d8ec:	4bb0      	ldr	r3, [pc, #704]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800d8ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d8f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d902:	4bac      	ldr	r3, [pc, #688]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d904:	2200      	movs	r2, #0
 800d906:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d90a:	4aaa      	ldr	r2, [pc, #680]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d90c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d910:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d914:	4aa7      	ldr	r2, [pc, #668]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d916:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d91a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d91e:	4ba5      	ldr	r3, [pc, #660]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d920:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d924:	4ba3      	ldr	r3, [pc, #652]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d926:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d92a:	4ba2      	ldr	r3, [pc, #648]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d932:	4ba0      	ldr	r3, [pc, #640]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d934:	2200      	movs	r2, #0
 800d936:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d93a:	4b9e      	ldr	r3, [pc, #632]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d942:	4b9c      	ldr	r3, [pc, #624]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d944:	2200      	movs	r2, #0
 800d946:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d94a:	4b9a      	ldr	r3, [pc, #616]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d952:	4b98      	ldr	r3, [pc, #608]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d95a:	4b96      	ldr	r3, [pc, #600]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d962:	4b94      	ldr	r3, [pc, #592]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d964:	2200      	movs	r2, #0
 800d966:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d96a:	4b92      	ldr	r3, [pc, #584]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d972:	4b90      	ldr	r3, [pc, #576]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d974:	2200      	movs	r2, #0
 800d976:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d97a:	4b8e      	ldr	r3, [pc, #568]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d982:	4b8d      	ldr	r3, [pc, #564]	; (800dbb8 <ProcessRadioRxDone+0x300>)
 800d984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d986:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d988:	488c      	ldr	r0, [pc, #560]	; (800dbbc <ProcessRadioRxDone+0x304>)
 800d98a:	f00c fc7b 	bl	801a284 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d98e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d992:	4619      	mov	r1, r3
 800d994:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d996:	f004 fb28 	bl	8011fea <LoRaMacClassBRxBeacon>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00a      	beq.n	800d9b6 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d9a0:	4a84      	ldr	r2, [pc, #528]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d9a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d9a6:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d9aa:	4a82      	ldr	r2, [pc, #520]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d9ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9b0:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d9b4:	e3bf      	b.n	800e136 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d9b6:	4b7e      	ldr	r3, [pc, #504]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800d9b8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d11e      	bne.n	800d9fe <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d9c0:	f004 fb26 	bl	8012010 <LoRaMacClassBIsPingExpected>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	f004 fad7 	bl	8011f7e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	f004 faf8 	bl	8011fc6 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d9d6:	4b77      	ldr	r3, [pc, #476]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d9d8:	2204      	movs	r2, #4
 800d9da:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d9de:	e00e      	b.n	800d9fe <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d9e0:	f004 fb1d 	bl	801201e <LoRaMacClassBIsMulticastExpected>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d009      	beq.n	800d9fe <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	f004 fad1 	bl	8011f92 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f004 faf1 	bl	8011fd8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d9f6:	4b6f      	ldr	r3, [pc, #444]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800d9f8:	2205      	movs	r2, #5
 800d9fa:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d9fe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800da02:	1c5a      	adds	r2, r3, #1
 800da04:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800da08:	461a      	mov	r2, r3
 800da0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da0c:	4413      	add	r3, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800da14:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800da18:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	3b01      	subs	r3, #1
 800da20:	2b06      	cmp	r3, #6
 800da22:	f200 8362 	bhi.w	800e0ea <ProcessRadioRxDone+0x832>
 800da26:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <ProcessRadioRxDone+0x174>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da49 	.word	0x0800da49
 800da30:	0800e0eb 	.word	0x0800e0eb
 800da34:	0800dbc9 	.word	0x0800dbc9
 800da38:	0800e0eb 	.word	0x0800e0eb
 800da3c:	0800dbc1 	.word	0x0800dbc1
 800da40:	0800e0eb 	.word	0x0800e0eb
 800da44:	0800e091 	.word	0x0800e091
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800da48:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da4c:	2b10      	cmp	r3, #16
 800da4e:	d806      	bhi.n	800da5e <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da50:	4b58      	ldr	r3, [pc, #352]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800da52:	2201      	movs	r2, #1
 800da54:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da58:	f7ff ff08 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800da5c:	e36b      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800da5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da60:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800da62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da66:	b2db      	uxtb	r3, r3
 800da68:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800da6a:	4b51      	ldr	r3, [pc, #324]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800da6c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da70:	2b00      	cmp	r3, #0
 800da72:	d006      	beq.n	800da82 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da74:	4b4f      	ldr	r3, [pc, #316]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800da76:	2201      	movs	r2, #1
 800da78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da7c:	f7ff fef6 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800da80:	e359      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800da82:	f7fe fbcf 	bl	800c224 <SecureElementGetJoinEui>
 800da86:	4601      	mov	r1, r0
 800da88:	f107 0308 	add.w	r3, r7, #8
 800da8c:	461a      	mov	r2, r3
 800da8e:	20ff      	movs	r0, #255	; 0xff
 800da90:	f005 fc60 	bl	8013354 <LoRaMacCryptoHandleJoinAccept>
 800da94:	4603      	mov	r3, r0
 800da96:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800da9a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d172      	bne.n	800db88 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800daa2:	7c7b      	ldrb	r3, [r7, #17]
 800daa4:	461a      	mov	r2, r3
 800daa6:	4b42      	ldr	r3, [pc, #264]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800daa8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800daac:	4b40      	ldr	r3, [pc, #256]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800daae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dab2:	7cbb      	ldrb	r3, [r7, #18]
 800dab4:	021b      	lsls	r3, r3, #8
 800dab6:	4313      	orrs	r3, r2
 800dab8:	4a3d      	ldr	r2, [pc, #244]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800daba:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dabe:	4b3c      	ldr	r3, [pc, #240]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800dac0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dac4:	7cfb      	ldrb	r3, [r7, #19]
 800dac6:	041b      	lsls	r3, r3, #16
 800dac8:	4313      	orrs	r3, r2
 800daca:	4a39      	ldr	r2, [pc, #228]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800dacc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	4a37      	ldr	r2, [pc, #220]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800dad4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dad8:	7e3b      	ldrb	r3, [r7, #24]
 800dada:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	461a      	mov	r2, r3
 800dae2:	4b33      	ldr	r3, [pc, #204]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800dae4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dae8:	7e3b      	ldrb	r3, [r7, #24]
 800daea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	461a      	mov	r2, r3
 800daf2:	4b2f      	ldr	r3, [pc, #188]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800daf4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800daf8:	7e3b      	ldrb	r3, [r7, #24]
 800dafa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	4b2b      	ldr	r3, [pc, #172]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800db08:	7e7b      	ldrb	r3, [r7, #25]
 800db0a:	461a      	mov	r2, r3
 800db0c:	4b28      	ldr	r3, [pc, #160]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db0e:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800db10:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db14:	2b00      	cmp	r3, #0
 800db16:	d102      	bne.n	800db1e <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800db18:	4b25      	ldr	r3, [pc, #148]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800db1e:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db26:	fb02 f303 	mul.w	r3, r2, r3
 800db2a:	4a21      	ldr	r2, [pc, #132]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db2c:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800db2e:	4b20      	ldr	r3, [pc, #128]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db32:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800db36:	4a1e      	ldr	r2, [pc, #120]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db38:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800db3a:	4b1d      	ldr	r3, [pc, #116]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800db42:	f107 0308 	add.w	r3, r7, #8
 800db46:	3312      	adds	r3, #18
 800db48:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800db4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	3b11      	subs	r3, #17
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800db58:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db5e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f006 f9c4 	bl	8013ef2 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800db6a:	4b11      	ldr	r3, [pc, #68]	; (800dbb0 <ProcessRadioRxDone+0x2f8>)
 800db6c:	2202      	movs	r2, #2
 800db6e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db72:	2001      	movs	r0, #1
 800db74:	f004 ff18 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00e      	beq.n	800db9c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800db7e:	2101      	movs	r1, #1
 800db80:	2000      	movs	r0, #0
 800db82:	f004 fe85 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
 800db86:	e009      	b.n	800db9c <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db88:	2001      	movs	r0, #1
 800db8a:	f004 ff0d 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800db94:	2101      	movs	r1, #1
 800db96:	2007      	movs	r0, #7
 800db98:	f004 fe7a 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800db9c:	4a05      	ldr	r2, [pc, #20]	; (800dbb4 <ProcessRadioRxDone+0x2fc>)
 800db9e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dba2:	f043 0308 	orr.w	r3, r3, #8
 800dba6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800dbaa:	e2a5      	b.n	800e0f8 <ProcessRadioRxDone+0x840>
 800dbac:	200017a8 	.word	0x200017a8
 800dbb0:	2000095c 	.word	0x2000095c
 800dbb4:	20000454 	.word	0x20000454
 800dbb8:	0801ba54 	.word	0x0801ba54
 800dbbc:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800dbc0:	4bae      	ldr	r3, [pc, #696]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dbc8:	4bad      	ldr	r3, [pc, #692]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dbca:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800dbce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800dbd2:	4baa      	ldr	r3, [pc, #680]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dbd4:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800dbd8:	b25b      	sxtb	r3, r3
 800dbda:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800dbde:	230d      	movs	r3, #13
 800dbe0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800dbe4:	4ba6      	ldr	r3, [pc, #664]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dbe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800dbee:	230e      	movs	r3, #14
 800dbf0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dbf4:	4ba2      	ldr	r3, [pc, #648]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dbf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbfa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dbfe:	4611      	mov	r1, r2
 800dc00:	4618      	mov	r0, r3
 800dc02:	f006 f923 	bl	8013e4c <RegionGetPhyParam>
 800dc06:	4603      	mov	r3, r0
 800dc08:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800dc0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc0e:	3b0d      	subs	r3, #13
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	b21b      	sxth	r3, r3
 800dc14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc18:	b21a      	sxth	r2, r3
 800dc1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	dc03      	bgt.n	800dc2a <ProcessRadioRxDone+0x372>
 800dc22:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc26:	2b0b      	cmp	r3, #11
 800dc28:	d806      	bhi.n	800dc38 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc2a:	4b94      	ldr	r3, [pc, #592]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc32:	f7ff fe1b 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800dc36:	e27e      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dc38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc3a:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dc3c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dc46:	4b8f      	ldr	r3, [pc, #572]	; (800de84 <ProcessRadioRxDone+0x5cc>)
 800dc48:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dc4a:	23ff      	movs	r3, #255	; 0xff
 800dc4c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dc50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc54:	4618      	mov	r0, r3
 800dc56:	f005 fe7c 	bl	8013952 <LoRaMacParserData>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d006      	beq.n	800dc6e <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc60:	4b86      	ldr	r3, [pc, #536]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc68:	f7ff fe00 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800dc6c:	e263      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc70:	4a82      	ldr	r2, [pc, #520]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dc72:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dc76:	1cba      	adds	r2, r7, #2
 800dc78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f002 fcde 	bl	8010640 <DetermineFrameType>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d006      	beq.n	800dc98 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc8a:	4b7c      	ldr	r3, [pc, #496]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc92:	f7ff fdeb 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800dc96:	e24e      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dca8:	e049      	b.n	800dd3e <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dcaa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcae:	4a74      	ldr	r2, [pc, #464]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dcb0:	212c      	movs	r1, #44	; 0x2c
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	33d4      	adds	r3, #212	; 0xd4
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d138      	bne.n	800dd34 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dcc2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcc6:	4a6e      	ldr	r2, [pc, #440]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dcc8:	212c      	movs	r1, #44	; 0x2c
 800dcca:	fb01 f303 	mul.w	r3, r1, r3
 800dcce:	4413      	add	r3, r2
 800dcd0:	33d2      	adds	r3, #210	; 0xd2
 800dcd2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d02d      	beq.n	800dd34 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dcde:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dce2:	4a67      	ldr	r2, [pc, #412]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dce4:	212c      	movs	r1, #44	; 0x2c
 800dce6:	fb01 f303 	mul.w	r3, r1, r3
 800dcea:	4413      	add	r3, r2
 800dcec:	33d3      	adds	r3, #211	; 0xd3
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dcf4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcf8:	4a61      	ldr	r2, [pc, #388]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dcfa:	212c      	movs	r1, #44	; 0x2c
 800dcfc:	fb01 f303 	mul.w	r3, r1, r3
 800dd00:	4413      	add	r3, r2
 800dd02:	33f0      	adds	r3, #240	; 0xf0
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dd0a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd0e:	4a5c      	ldr	r2, [pc, #368]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dd10:	212c      	movs	r1, #44	; 0x2c
 800dd12:	fb01 f303 	mul.w	r3, r1, r3
 800dd16:	4413      	add	r3, r2
 800dd18:	33d4      	adds	r3, #212	; 0xd4
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dd20:	4b57      	ldr	r3, [pc, #348]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dd22:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d10e      	bne.n	800dd48 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dd2a:	4b54      	ldr	r3, [pc, #336]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dd2c:	2203      	movs	r2, #3
 800dd2e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dd32:	e009      	b.n	800dd48 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd34:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd38:	3301      	adds	r3, #1
 800dd3a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dd3e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d0b1      	beq.n	800dcaa <ProcessRadioRxDone+0x3f2>
 800dd46:	e000      	b.n	800dd4a <ProcessRadioRxDone+0x492>
                    break;
 800dd48:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d117      	bne.n	800dd82 <ProcessRadioRxDone+0x4ca>
 800dd52:	78bb      	ldrb	r3, [r7, #2]
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	d10d      	bne.n	800dd74 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd5c:	f003 0320 	and.w	r3, r3, #32
 800dd60:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dd66:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd6e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d006      	beq.n	800dd82 <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd74:	4b41      	ldr	r3, [pc, #260]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dd7c:	f7ff fd76 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800dd80:	e1d9      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dd82:	2315      	movs	r3, #21
 800dd84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd88:	4b3d      	ldr	r3, [pc, #244]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dd8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd8e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dd92:	4611      	mov	r1, r2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f006 f859 	bl	8013e4c <RegionGetPhyParam>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dd9e:	78b9      	ldrb	r1, [r7, #2]
 800dda0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4d36      	ldr	r5, [pc, #216]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dda6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ddaa:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800ddae:	1d3a      	adds	r2, r7, #4
 800ddb0:	9202      	str	r2, [sp, #8]
 800ddb2:	1cfa      	adds	r2, r7, #3
 800ddb4:	9201      	str	r2, [sp, #4]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	f000 fe95 	bl	800eaec <GetFCntDown>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ddc8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d031      	beq.n	800de34 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ddd0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddd4:	2b07      	cmp	r3, #7
 800ddd6:	d119      	bne.n	800de0c <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ddd8:	4b28      	ldr	r3, [pc, #160]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800ddda:	2208      	movs	r2, #8
 800dddc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dde0:	4b27      	ldr	r3, [pc, #156]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800dde2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d11d      	bne.n	800de26 <ProcessRadioRxDone+0x56e>
 800ddea:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800ddee:	f023 031f 	bic.w	r3, r3, #31
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2ba0      	cmp	r3, #160	; 0xa0
 800ddf6:	d116      	bne.n	800de26 <ProcessRadioRxDone+0x56e>
 800ddf8:	4b21      	ldr	r3, [pc, #132]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800ddfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d111      	bne.n	800de26 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800de02:	4b1f      	ldr	r3, [pc, #124]	; (800de80 <ProcessRadioRxDone+0x5c8>)
 800de04:	2201      	movs	r2, #1
 800de06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800de0a:	e00c      	b.n	800de26 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800de0c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de10:	2b08      	cmp	r3, #8
 800de12:	d104      	bne.n	800de1e <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800de14:	4b19      	ldr	r3, [pc, #100]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800de16:	220a      	movs	r2, #10
 800de18:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de1c:	e003      	b.n	800de26 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de1e:	4b17      	ldr	r3, [pc, #92]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800de20:	2201      	movs	r2, #1
 800de22:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a14      	ldr	r2, [pc, #80]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800de2a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800de2e:	f7ff fd1d 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800de32:	e180      	b.n	800e136 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800de34:	78fa      	ldrb	r2, [r7, #3]
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800de3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	460b      	mov	r3, r1
 800de44:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800de48:	f005 fbd0 	bl	80135ec <LoRaMacCryptoUnsecureMessage>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800de52:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de56:	2b00      	cmp	r3, #0
 800de58:	d016      	beq.n	800de88 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800de5a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d104      	bne.n	800de6c <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800de62:	4b06      	ldr	r3, [pc, #24]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800de64:	220b      	movs	r2, #11
 800de66:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de6a:	e003      	b.n	800de74 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800de6c:	4b03      	ldr	r3, [pc, #12]	; (800de7c <ProcessRadioRxDone+0x5c4>)
 800de6e:	220c      	movs	r2, #12
 800de70:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800de74:	f7ff fcfa 	bl	800d86c <PrepareRxDoneAbort>
                return;
 800de78:	e15d      	b.n	800e136 <ProcessRadioRxDone+0x87e>
 800de7a:	bf00      	nop
 800de7c:	20000454 	.word	0x20000454
 800de80:	2000095c 	.word	0x2000095c
 800de84:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de88:	4bac      	ldr	r3, [pc, #688]	; (800e13c <ProcessRadioRxDone+0x884>)
 800de8a:	2200      	movs	r2, #0
 800de8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800de90:	4aaa      	ldr	r2, [pc, #680]	; (800e13c <ProcessRadioRxDone+0x884>)
 800de92:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de96:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800de9a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	461a      	mov	r2, r3
 800dea6:	4ba5      	ldr	r3, [pc, #660]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dea8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800deac:	4ba3      	ldr	r3, [pc, #652]	; (800e13c <ProcessRadioRxDone+0x884>)
 800deae:	2200      	movs	r2, #0
 800deb0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800deb4:	4ba1      	ldr	r3, [pc, #644]	; (800e13c <ProcessRadioRxDone+0x884>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	4a9f      	ldr	r2, [pc, #636]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dec0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dec4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800decc:	b2db      	uxtb	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	bf14      	ite	ne
 800ded2:	2301      	movne	r3, #1
 800ded4:	2300      	moveq	r3, #0
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	4b98      	ldr	r3, [pc, #608]	; (800e13c <ProcessRadioRxDone+0x884>)
 800deda:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dede:	4b97      	ldr	r3, [pc, #604]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dee6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800deea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	bf14      	ite	ne
 800def4:	2301      	movne	r3, #1
 800def6:	2300      	moveq	r3, #0
 800def8:	b2da      	uxtb	r2, r3
 800defa:	4b90      	ldr	r3, [pc, #576]	; (800e13c <ProcessRadioRxDone+0x884>)
 800defc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800df00:	4b8e      	ldr	r3, [pc, #568]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df02:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800df0a:	4b8c      	ldr	r3, [pc, #560]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df0c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800df10:	2b01      	cmp	r3, #1
 800df12:	d102      	bne.n	800df1a <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800df14:	4b8a      	ldr	r3, [pc, #552]	; (800e140 <ProcessRadioRxDone+0x888>)
 800df16:	2200      	movs	r2, #0
 800df18:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800df1a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d104      	bne.n	800df2c <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800df22:	4b86      	ldr	r3, [pc, #536]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df24:	2202      	movs	r2, #2
 800df26:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800df2a:	e01f      	b.n	800df6c <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800df2c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800df30:	f023 031f 	bic.w	r3, r3, #31
 800df34:	b2db      	uxtb	r3, r3
 800df36:	2ba0      	cmp	r3, #160	; 0xa0
 800df38:	d110      	bne.n	800df5c <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800df3a:	4b81      	ldr	r3, [pc, #516]	; (800e140 <ProcessRadioRxDone+0x888>)
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800df42:	4b7f      	ldr	r3, [pc, #508]	; (800e140 <ProcessRadioRxDone+0x888>)
 800df44:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d102      	bne.n	800df52 <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800df4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df4e:	4a7c      	ldr	r2, [pc, #496]	; (800e140 <ProcessRadioRxDone+0x888>)
 800df50:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800df52:	4b7a      	ldr	r3, [pc, #488]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df54:	2201      	movs	r2, #1
 800df56:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800df5a:	e007      	b.n	800df6c <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800df5c:	4b78      	ldr	r3, [pc, #480]	; (800e140 <ProcessRadioRxDone+0x888>)
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800df64:	4b75      	ldr	r3, [pc, #468]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df66:	2200      	movs	r2, #0
 800df68:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800df6c:	4b73      	ldr	r3, [pc, #460]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df6e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df72:	4a72      	ldr	r2, [pc, #456]	; (800e13c <ProcessRadioRxDone+0x884>)
 800df74:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800df78:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800df7c:	4618      	mov	r0, r3
 800df7e:	f001 ff0d 	bl	800fd9c <RemoveMacCommands>

            switch( fType )
 800df82:	78bb      	ldrb	r3, [r7, #2]
 800df84:	2b03      	cmp	r3, #3
 800df86:	d874      	bhi.n	800e072 <ProcessRadioRxDone+0x7ba>
 800df88:	a201      	add	r2, pc, #4	; (adr r2, 800df90 <ProcessRadioRxDone+0x6d8>)
 800df8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8e:	bf00      	nop
 800df90:	0800dfa1 	.word	0x0800dfa1
 800df94:	0800dff1 	.word	0x0800dff1
 800df98:	0800e027 	.word	0x0800e027
 800df9c:	0800e04d 	.word	0x0800e04d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dfa0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfa4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	461c      	mov	r4, r3
 800dfac:	4b63      	ldr	r3, [pc, #396]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dfae:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dfb2:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dfb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfba:	f102 0010 	add.w	r0, r2, #16
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	f000 ff03 	bl	800edd0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfca:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfce:	4b5b      	ldr	r3, [pc, #364]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dfd0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dfd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfd6:	4a59      	ldr	r2, [pc, #356]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dfd8:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800dfdc:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dfe0:	4b56      	ldr	r3, [pc, #344]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dfe2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800dfe6:	4b55      	ldr	r3, [pc, #340]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800dfee:	e047      	b.n	800e080 <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dff0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dff4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	461c      	mov	r4, r3
 800dffc:	4b4f      	ldr	r3, [pc, #316]	; (800e13c <ProcessRadioRxDone+0x884>)
 800dffe:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e002:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e006:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e00a:	f102 0010 	add.w	r0, r2, #16
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	460b      	mov	r3, r1
 800e012:	4622      	mov	r2, r4
 800e014:	2100      	movs	r1, #0
 800e016:	f000 fedb 	bl	800edd0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e01a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e01e:	4b47      	ldr	r3, [pc, #284]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e020:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e024:	e02c      	b.n	800e080 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e026:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e028:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e02c:	4b43      	ldr	r3, [pc, #268]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e02e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e032:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	460b      	mov	r3, r1
 800e03a:	2100      	movs	r1, #0
 800e03c:	f000 fec8 	bl	800edd0 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e040:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e044:	4b3d      	ldr	r3, [pc, #244]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e046:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e04a:	e019      	b.n	800e080 <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e04c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e050:	4b3a      	ldr	r3, [pc, #232]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e052:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e058:	4a38      	ldr	r2, [pc, #224]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e05a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e05e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e062:	4b36      	ldr	r3, [pc, #216]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e064:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e068:	4b34      	ldr	r3, [pc, #208]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e070:	e006      	b.n	800e080 <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e072:	4b32      	ldr	r3, [pc, #200]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e074:	2201      	movs	r2, #1
 800e076:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e07a:	f7ff fbf7 	bl	800d86c <PrepareRxDoneAbort>
                    break;
 800e07e:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e080:	4a2e      	ldr	r2, [pc, #184]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e082:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e086:	f043 0302 	orr.w	r3, r3, #2
 800e08a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e08e:	e033      	b.n	800e0f8 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e090:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e094:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e096:	18d1      	adds	r1, r2, r3
 800e098:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	4826      	ldr	r0, [pc, #152]	; (800e144 <ProcessRadioRxDone+0x88c>)
 800e0aa:	f008 f9da 	bl	8016462 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e0ae:	4b23      	ldr	r3, [pc, #140]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e0b6:	4b21      	ldr	r3, [pc, #132]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e0be:	4b1f      	ldr	r3, [pc, #124]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0c0:	4a20      	ldr	r2, [pc, #128]	; (800e144 <ProcessRadioRxDone+0x88c>)
 800e0c2:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e0c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	4b19      	ldr	r3, [pc, #100]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0d6:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e0da:	4a18      	ldr	r2, [pc, #96]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0e0:	f043 0302 	orr.w	r3, r3, #2
 800e0e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e0e8:	e006      	b.n	800e0f8 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0ea:	4b14      	ldr	r3, [pc, #80]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e0f2:	f7ff fbbb 	bl	800d86c <PrepareRxDoneAbort>
            break;
 800e0f6:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e0f8:	4b10      	ldr	r3, [pc, #64]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e0fa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d008      	beq.n	800e114 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e102:	4b0e      	ldr	r3, [pc, #56]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e104:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00b      	beq.n	800e124 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e10c:	2000      	movs	r0, #0
 800e10e:	f000 fcb7 	bl	800ea80 <OnAckTimeoutTimerEvent>
 800e112:	e007      	b.n	800e124 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e114:	4b0a      	ldr	r3, [pc, #40]	; (800e140 <ProcessRadioRxDone+0x888>)
 800e116:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d102      	bne.n	800e124 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e11e:	2000      	movs	r0, #0
 800e120:	f000 fcae 	bl	800ea80 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e124:	4a05      	ldr	r2, [pc, #20]	; (800e13c <ProcessRadioRxDone+0x884>)
 800e126:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e12a:	f043 0320 	orr.w	r3, r3, #32
 800e12e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e132:	f7ff fae9 	bl	800d708 <UpdateRxSlotIdleState>
}
 800e136:	3788      	adds	r7, #136	; 0x88
 800e138:	46bd      	mov	sp, r7
 800e13a:	bdb0      	pop	{r4, r5, r7, pc}
 800e13c:	20000454 	.word	0x20000454
 800e140:	2000095c 	.word	0x2000095c
 800e144:	2000068c 	.word	0x2000068c

0800e148 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e14c:	4b11      	ldr	r3, [pc, #68]	; (800e194 <ProcessRadioTxTimeout+0x4c>)
 800e14e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e152:	2b02      	cmp	r3, #2
 800e154:	d002      	beq.n	800e15c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e156:	4b10      	ldr	r3, [pc, #64]	; (800e198 <ProcessRadioTxTimeout+0x50>)
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e15c:	f7ff fad4 	bl	800d708 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e160:	4b0e      	ldr	r3, [pc, #56]	; (800e19c <ProcessRadioTxTimeout+0x54>)
 800e162:	2202      	movs	r2, #2
 800e164:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e168:	2002      	movs	r0, #2
 800e16a:	f004 fbe9 	bl	8012940 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e16e:	4b0b      	ldr	r3, [pc, #44]	; (800e19c <ProcessRadioTxTimeout+0x54>)
 800e170:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e174:	2b00      	cmp	r3, #0
 800e176:	d003      	beq.n	800e180 <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e178:	4b08      	ldr	r3, [pc, #32]	; (800e19c <ProcessRadioTxTimeout+0x54>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e180:	4a06      	ldr	r2, [pc, #24]	; (800e19c <ProcessRadioTxTimeout+0x54>)
 800e182:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e186:	f043 0320 	orr.w	r3, r3, #32
 800e18a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e18e:	bf00      	nop
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	2000095c 	.word	0x2000095c
 800e198:	0801ba54 	.word	0x0801ba54
 800e19c:	20000454 	.word	0x20000454

0800e1a0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	460a      	mov	r2, r1
 800e1aa:	71fb      	strb	r3, [r7, #7]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e1b4:	4b40      	ldr	r3, [pc, #256]	; (800e2b8 <HandleRadioRxErrorTimeout+0x118>)
 800e1b6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d002      	beq.n	800e1c4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e1be:	4b3f      	ldr	r3, [pc, #252]	; (800e2bc <HandleRadioRxErrorTimeout+0x11c>)
 800e1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e1c4:	f003 ff1d 	bl	8012002 <LoRaMacClassBIsBeaconExpected>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d007      	beq.n	800e1de <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e1ce:	2002      	movs	r0, #2
 800e1d0:	f003 fecb 	bl	8011f6a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	f003 feed 	bl	8011fb4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1de:	4b36      	ldr	r3, [pc, #216]	; (800e2b8 <HandleRadioRxErrorTimeout+0x118>)
 800e1e0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d119      	bne.n	800e21c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e1e8:	f003 ff12 	bl	8012010 <LoRaMacClassBIsPingExpected>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d007      	beq.n	800e202 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	f003 fec3 	bl	8011f7e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	f003 fee4 	bl	8011fc6 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e1fe:	2301      	movs	r3, #1
 800e200:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e202:	f003 ff0c 	bl	801201e <LoRaMacClassBIsMulticastExpected>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d007      	beq.n	800e21c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e20c:	2000      	movs	r0, #0
 800e20e:	f003 fec0 	bl	8011f92 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e212:	2000      	movs	r0, #0
 800e214:	f003 fee0 	bl	8011fd8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e218:	2301      	movs	r3, #1
 800e21a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e21c:	7bfb      	ldrb	r3, [r7, #15]
 800e21e:	f083 0301 	eor.w	r3, r3, #1
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d040      	beq.n	800e2aa <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e228:	4b25      	ldr	r3, [pc, #148]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e22a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d122      	bne.n	800e278 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e232:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e234:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d003      	beq.n	800e244 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e23c:	4a20      	ldr	r2, [pc, #128]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e244:	79fb      	ldrb	r3, [r7, #7]
 800e246:	4618      	mov	r0, r3
 800e248:	f004 fb7a 	bl	8012940 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e24c:	4b1a      	ldr	r3, [pc, #104]	; (800e2b8 <HandleRadioRxErrorTimeout+0x118>)
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	4618      	mov	r0, r3
 800e252:	f00c f943 	bl	801a4dc <UTIL_TIMER_GetElapsedTime>
 800e256:	4602      	mov	r2, r0
 800e258:	4b19      	ldr	r3, [pc, #100]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e25a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e25e:	429a      	cmp	r2, r3
 800e260:	d323      	bcc.n	800e2aa <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e262:	4818      	ldr	r0, [pc, #96]	; (800e2c4 <HandleRadioRxErrorTimeout+0x124>)
 800e264:	f00c f80e 	bl	801a284 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e268:	4a15      	ldr	r2, [pc, #84]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e26a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e26e:	f043 0320 	orr.w	r3, r3, #32
 800e272:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e276:	e018      	b.n	800e2aa <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e278:	4b11      	ldr	r3, [pc, #68]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e27a:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d003      	beq.n	800e28a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e282:	4a0f      	ldr	r2, [pc, #60]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e284:	79bb      	ldrb	r3, [r7, #6]
 800e286:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e28a:	79bb      	ldrb	r3, [r7, #6]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f004 fb57 	bl	8012940 <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e292:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <HandleRadioRxErrorTimeout+0x118>)
 800e294:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e298:	2b02      	cmp	r3, #2
 800e29a:	d006      	beq.n	800e2aa <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e29c:	4a08      	ldr	r2, [pc, #32]	; (800e2c0 <HandleRadioRxErrorTimeout+0x120>)
 800e29e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2a2:	f043 0320 	orr.w	r3, r3, #32
 800e2a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e2aa:	f7ff fa2d 	bl	800d708 <UpdateRxSlotIdleState>
}
 800e2ae:	bf00      	nop
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	2000095c 	.word	0x2000095c
 800e2bc:	0801ba54 	.word	0x0801ba54
 800e2c0:	20000454 	.word	0x20000454
 800e2c4:	200007ec 	.word	0x200007ec

0800e2c8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e2cc:	2106      	movs	r1, #6
 800e2ce:	2005      	movs	r0, #5
 800e2d0:	f7ff ff66 	bl	800e1a0 <HandleRadioRxErrorTimeout>
}
 800e2d4:	bf00      	nop
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e2dc:	2104      	movs	r1, #4
 800e2de:	2003      	movs	r0, #3
 800e2e0:	f7ff ff5e 	bl	800e1a0 <HandleRadioRxErrorTimeout>
}
 800e2e4:	bf00      	nop
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f2:	607b      	str	r3, [r7, #4]
  return(result);
 800e2f4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e2f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2f8:	b672      	cpsid	i
}
 800e2fa:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e2fc:	4b1d      	ldr	r3, [pc, #116]	; (800e374 <LoRaMacHandleIrqEvents+0x8c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e302:	4b1c      	ldr	r3, [pc, #112]	; (800e374 <LoRaMacHandleIrqEvents+0x8c>)
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	f383 8810 	msr	PRIMASK, r3
}
 800e312:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d027      	beq.n	800e36a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e31a:	783b      	ldrb	r3, [r7, #0]
 800e31c:	f003 0310 	and.w	r3, r3, #16
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b00      	cmp	r3, #0
 800e324:	d001      	beq.n	800e32a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e326:	f7ff fa07 	bl	800d738 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e32a:	783b      	ldrb	r3, [r7, #0]
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e336:	f7ff fabf 	bl	800d8b8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e33a:	783b      	ldrb	r3, [r7, #0]
 800e33c:	f003 0304 	and.w	r3, r3, #4
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e346:	f7ff feff 	bl	800e148 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e34a:	783b      	ldrb	r3, [r7, #0]
 800e34c:	f003 0302 	and.w	r3, r3, #2
 800e350:	b2db      	uxtb	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e356:	f7ff ffb7 	bl	800e2c8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e35a:	783b      	ldrb	r3, [r7, #0]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d001      	beq.n	800e36a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e366:	f7ff ffb7 	bl	800e2d8 <ProcessRadioRxTimeout>
        }
    }
}
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	20000ca8 	.word	0x20000ca8

0800e378 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e37c:	4b08      	ldr	r3, [pc, #32]	; (800e3a0 <LoRaMacIsBusy+0x28>)
 800e37e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e382:	2b00      	cmp	r3, #0
 800e384:	d106      	bne.n	800e394 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <LoRaMacIsBusy+0x28>)
 800e388:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d101      	bne.n	800e394 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e390:	2300      	movs	r3, #0
 800e392:	e000      	b.n	800e396 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e394:	2301      	movs	r3, #1
}
 800e396:	4618      	mov	r0, r3
 800e398:	46bd      	mov	sp, r7
 800e39a:	bc80      	pop	{r7}
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	20000454 	.word	0x20000454

0800e3a4 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e3ae:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <LoRaMacEnableRequests+0x1c>)
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e3b6:	bf00      	nop
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bc80      	pop	{r7}
 800e3be:	4770      	bx	lr
 800e3c0:	20000454 	.word	0x20000454

0800e3c4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e3ca:	4b2c      	ldr	r3, [pc, #176]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e3cc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3d0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e3d2:	4b2a      	ldr	r3, [pc, #168]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e3d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d14a      	bne.n	800e472 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e3dc:	4b27      	ldr	r3, [pc, #156]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e3de:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3e2:	f003 0301 	and.w	r3, r3, #1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d006      	beq.n	800e3fa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e3ec:	4a23      	ldr	r2, [pc, #140]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e3ee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e3f2:	f36f 0300 	bfc	r3, #0, #1
 800e3f6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e3fa:	4b20      	ldr	r3, [pc, #128]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e3fc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e40a:	4a1c      	ldr	r2, [pc, #112]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e40c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e410:	f36f 0382 	bfc	r3, #2, #1
 800e414:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e418:	2001      	movs	r0, #1
 800e41a:	f7ff ffc3 	bl	800e3a4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e41e:	793b      	ldrb	r3, [r7, #4]
 800e420:	f003 0301 	and.w	r3, r3, #1
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	d005      	beq.n	800e436 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e42a:	4b14      	ldr	r3, [pc, #80]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e42c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4813      	ldr	r0, [pc, #76]	; (800e480 <LoRaMacHandleRequestEvents+0xbc>)
 800e434:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e436:	793b      	ldrb	r3, [r7, #4]
 800e438:	f003 0304 	and.w	r3, r3, #4
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00e      	beq.n	800e460 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e442:	4810      	ldr	r0, [pc, #64]	; (800e484 <LoRaMacHandleRequestEvents+0xc0>)
 800e444:	f004 faca 	bl	80129dc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e448:	f004 fb14 	bl	8012a74 <LoRaMacConfirmQueueGetCnt>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d006      	beq.n	800e460 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e452:	4a0a      	ldr	r2, [pc, #40]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e454:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e458:	f043 0304 	orr.w	r3, r3, #4
 800e45c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e460:	f003 fdfb 	bl	801205a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e464:	4a05      	ldr	r2, [pc, #20]	; (800e47c <LoRaMacHandleRequestEvents+0xb8>)
 800e466:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e46a:	f36f 1345 	bfc	r3, #5, #1
 800e46e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e472:	bf00      	nop
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	20000454 	.word	0x20000454
 800e480:	2000088c 	.word	0x2000088c
 800e484:	200008a0 	.word	0x200008a0

0800e488 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e48e:	4b0a      	ldr	r3, [pc, #40]	; (800e4b8 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e490:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e498:	2300      	movs	r3, #0
 800e49a:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e49c:	1dfb      	adds	r3, r7, #7
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f004 f882 	bl	80125a8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e4a4:	79fb      	ldrb	r3, [r7, #7]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e4aa:	f000 fc81 	bl	800edb0 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e4ae:	bf00      	nop
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20000454 	.word	0x20000454

0800e4bc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e4c2:	4b25      	ldr	r3, [pc, #148]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4c4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4c8:	f003 0308 	and.w	r3, r3, #8
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00d      	beq.n	800e4ee <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e4d2:	4a21      	ldr	r2, [pc, #132]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4d4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4d8:	f36f 03c3 	bfc	r3, #3, #1
 800e4dc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e4e0:	4b1d      	ldr	r3, [pc, #116]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4e2:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	491c      	ldr	r1, [pc, #112]	; (800e55c <LoRaMacHandleIndicationEvents+0xa0>)
 800e4ea:	481d      	ldr	r0, [pc, #116]	; (800e560 <LoRaMacHandleIndicationEvents+0xa4>)
 800e4ec:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e4ee:	4b1a      	ldr	r3, [pc, #104]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4f0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4f4:	f003 0310 	and.w	r3, r3, #16
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d012      	beq.n	800e524 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e4fe:	2307      	movs	r3, #7
 800e500:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e502:	2300      	movs	r3, #0
 800e504:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e506:	4b14      	ldr	r3, [pc, #80]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e508:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	1d3a      	adds	r2, r7, #4
 800e510:	4912      	ldr	r1, [pc, #72]	; (800e55c <LoRaMacHandleIndicationEvents+0xa0>)
 800e512:	4610      	mov	r0, r2
 800e514:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e516:	4a10      	ldr	r2, [pc, #64]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e518:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e51c:	f36f 1304 	bfc	r3, #4, #1
 800e520:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e524:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e526:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e52a:	f003 0302 	and.w	r3, r3, #2
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00d      	beq.n	800e550 <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e534:	4a08      	ldr	r2, [pc, #32]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e536:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e53a:	f36f 0341 	bfc	r3, #1, #1
 800e53e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e542:	4b05      	ldr	r3, [pc, #20]	; (800e558 <LoRaMacHandleIndicationEvents+0x9c>)
 800e544:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	4904      	ldr	r1, [pc, #16]	; (800e55c <LoRaMacHandleIndicationEvents+0xa0>)
 800e54c:	4805      	ldr	r0, [pc, #20]	; (800e564 <LoRaMacHandleIndicationEvents+0xa8>)
 800e54e:	4798      	blx	r3
    }
}
 800e550:	bf00      	nop
 800e552:	3720      	adds	r7, #32
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20000454 	.word	0x20000454
 800e55c:	200008d0 	.word	0x200008d0
 800e560:	200008b4 	.word	0x200008b4
 800e564:	20000870 	.word	0x20000870

0800e568 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e56e:	4b32      	ldr	r3, [pc, #200]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e570:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e574:	f003 0301 	and.w	r3, r3, #1
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d058      	beq.n	800e630 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e57e:	2300      	movs	r3, #0
 800e580:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e582:	2300      	movs	r3, #0
 800e584:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e586:	4b2c      	ldr	r3, [pc, #176]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e588:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d004      	beq.n	800e59a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e590:	4b29      	ldr	r3, [pc, #164]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e592:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e596:	2b03      	cmp	r3, #3
 800e598:	d104      	bne.n	800e5a4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e59a:	f002 f89f 	bl	80106dc <CheckRetransUnconfirmedUplink>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	71fb      	strb	r3, [r7, #7]
 800e5a2:	e020      	b.n	800e5e6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e5a4:	4b24      	ldr	r3, [pc, #144]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5a6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d11b      	bne.n	800e5e6 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e5ae:	4b22      	ldr	r3, [pc, #136]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5b0:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d014      	beq.n	800e5e2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e5b8:	f002 f8bc 	bl	8010734 <CheckRetransConfirmedUplink>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e5c0:	4b1e      	ldr	r3, [pc, #120]	; (800e63c <LoRaMacHandleMcpsRequest+0xd4>)
 800e5c2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10d      	bne.n	800e5e6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	f083 0301 	eor.w	r3, r3, #1
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d002      	beq.n	800e5dc <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e5d6:	f002 f929 	bl	801082c <AckTimeoutRetriesProcess>
 800e5da:	e004      	b.n	800e5e6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e5dc:	f002 f964 	bl	80108a8 <AckTimeoutRetriesFinalize>
 800e5e0:	e001      	b.n	800e5e6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00d      	beq.n	800e608 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e5ec:	4814      	ldr	r0, [pc, #80]	; (800e640 <LoRaMacHandleMcpsRequest+0xd8>)
 800e5ee:	f00b fe49 	bl	801a284 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e5f2:	4b11      	ldr	r3, [pc, #68]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5f4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e5f8:	f023 0320 	bic.w	r3, r3, #32
 800e5fc:	4a0e      	ldr	r2, [pc, #56]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5fe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e602:	f002 f8b9 	bl	8010778 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e606:	e013      	b.n	800e630 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e608:	79bb      	ldrb	r3, [r7, #6]
 800e60a:	f083 0301 	eor.w	r3, r3, #1
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00d      	beq.n	800e630 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e614:	4a08      	ldr	r2, [pc, #32]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e616:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e61a:	f36f 1345 	bfc	r3, #5, #1
 800e61e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e622:	4b05      	ldr	r3, [pc, #20]	; (800e638 <LoRaMacHandleMcpsRequest+0xd0>)
 800e624:	2200      	movs	r2, #0
 800e626:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e62a:	2000      	movs	r0, #0
 800e62c:	f000 f97e 	bl	800e92c <OnTxDelayedTimerEvent>
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20000454 	.word	0x20000454
 800e63c:	2000095c 	.word	0x2000095c
 800e640:	200007bc 	.word	0x200007bc

0800e644 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e648:	4b1b      	ldr	r3, [pc, #108]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e64a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e64e:	f003 0304 	and.w	r3, r3, #4
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d02c      	beq.n	800e6b2 <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e658:	2001      	movs	r0, #1
 800e65a:	f004 f9a5 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d012      	beq.n	800e68a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e664:	2001      	movs	r0, #1
 800e666:	f004 f941 	bl	80128ec <LoRaMacConfirmQueueGetStatus>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d103      	bne.n	800e678 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e670:	4b11      	ldr	r3, [pc, #68]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e678:	4b0f      	ldr	r3, [pc, #60]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e67a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e67e:	f023 0302 	bic.w	r3, r3, #2
 800e682:	4a0d      	ldr	r2, [pc, #52]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e684:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e688:	e013      	b.n	800e6b2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e68a:	2005      	movs	r0, #5
 800e68c:	f004 f98c 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d105      	bne.n	800e6a2 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e696:	2006      	movs	r0, #6
 800e698:	f004 f986 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800e69c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d007      	beq.n	800e6b2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e6a2:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e6a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6a8:	f023 0302 	bic.w	r3, r3, #2
 800e6ac:	4a02      	ldr	r2, [pc, #8]	; (800e6b8 <LoRaMacHandleMlmeRequest+0x74>)
 800e6ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e6b2:	bf00      	nop
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000454 	.word	0x20000454

0800e6bc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e6c0:	200c      	movs	r0, #12
 800e6c2:	f004 f971 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d019      	beq.n	800e700 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e6cc:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6ce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d111      	bne.n	800e700 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e6dc:	4b0a      	ldr	r3, [pc, #40]	; (800e708 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6de:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6e2:	f003 0304 	and.w	r3, r3, #4
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d009      	beq.n	800e700 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e6ec:	4b06      	ldr	r3, [pc, #24]	; (800e708 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6f2:	f023 0302 	bic.w	r3, r3, #2
 800e6f6:	4a04      	ldr	r2, [pc, #16]	; (800e708 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6f8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e000      	b.n	800e702 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e700:	2300      	movs	r3, #0
}
 800e702:	4618      	mov	r0, r3
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20000454 	.word	0x20000454

0800e70c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e710:	4b0d      	ldr	r3, [pc, #52]	; (800e748 <LoRaMacCheckForRxAbort+0x3c>)
 800e712:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00f      	beq.n	800e73e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e71e:	4b0a      	ldr	r3, [pc, #40]	; (800e748 <LoRaMacCheckForRxAbort+0x3c>)
 800e720:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e728:	4a07      	ldr	r2, [pc, #28]	; (800e748 <LoRaMacCheckForRxAbort+0x3c>)
 800e72a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e72e:	4b06      	ldr	r3, [pc, #24]	; (800e748 <LoRaMacCheckForRxAbort+0x3c>)
 800e730:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e734:	f023 0302 	bic.w	r3, r3, #2
 800e738:	4a03      	ldr	r2, [pc, #12]	; (800e748 <LoRaMacCheckForRxAbort+0x3c>)
 800e73a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e73e:	bf00      	nop
 800e740:	46bd      	mov	sp, r7
 800e742:	bc80      	pop	{r7}
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	20000454 	.word	0x20000454

0800e74c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e758:	2300      	movs	r3, #0
 800e75a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e75c:	4b50      	ldr	r3, [pc, #320]	; (800e8a0 <LoRaMacHandleNvm+0x154>)
 800e75e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e762:	2b00      	cmp	r3, #0
 800e764:	f040 8097 	bne.w	800e896 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2124      	movs	r1, #36	; 0x24
 800e76c:	4618      	mov	r0, r3
 800e76e:	f007 fecd 	bl	801650c <Crc32>
 800e772:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d006      	beq.n	800e78c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	68ba      	ldr	r2, [r7, #8]
 800e782:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e784:	89fb      	ldrh	r3, [r7, #14]
 800e786:	f043 0301 	orr.w	r3, r3, #1
 800e78a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	3328      	adds	r3, #40	; 0x28
 800e790:	2114      	movs	r1, #20
 800e792:	4618      	mov	r0, r3
 800e794:	f007 feba 	bl	801650c <Crc32>
 800e798:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d006      	beq.n	800e7b2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68ba      	ldr	r2, [r7, #8]
 800e7a8:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e7aa:	89fb      	ldrh	r3, [r7, #14]
 800e7ac:	f043 0302 	orr.w	r3, r3, #2
 800e7b0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3340      	adds	r3, #64	; 0x40
 800e7b6:	21d4      	movs	r1, #212	; 0xd4
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f007 fea7 	bl	801650c <Crc32>
 800e7be:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d007      	beq.n	800e7dc <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e7d4:	89fb      	ldrh	r3, [r7, #14]
 800e7d6:	f043 0304 	orr.w	r3, r3, #4
 800e7da:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e7e2:	21bc      	movs	r1, #188	; 0xbc
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f007 fe91 	bl	801650c <Crc32>
 800e7ea:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d007      	beq.n	800e808 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e800:	89fb      	ldrh	r3, [r7, #14]
 800e802:	f043 0308 	orr.w	r3, r3, #8
 800e806:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e80e:	2190      	movs	r1, #144	; 0x90
 800e810:	4618      	mov	r0, r3
 800e812:	f007 fe7b 	bl	801650c <Crc32>
 800e816:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	429a      	cmp	r2, r3
 800e822:	d007      	beq.n	800e834 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68ba      	ldr	r2, [r7, #8]
 800e828:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e82c:	89fb      	ldrh	r3, [r7, #14]
 800e82e:	f043 0310 	orr.w	r3, r3, #16
 800e832:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e83a:	21c4      	movs	r1, #196	; 0xc4
 800e83c:	4618      	mov	r0, r3
 800e83e:	f007 fe65 	bl	801650c <Crc32>
 800e842:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d007      	beq.n	800e860 <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e858:	89fb      	ldrh	r3, [r7, #14]
 800e85a:	f043 0320 	orr.w	r3, r3, #32
 800e85e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e866:	2114      	movs	r1, #20
 800e868:	4618      	mov	r0, r3
 800e86a:	f007 fe4f 	bl	801650c <Crc32>
 800e86e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e876:	68ba      	ldr	r2, [r7, #8]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d007      	beq.n	800e88c <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e884:	89fb      	ldrh	r3, [r7, #14]
 800e886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e88c:	89fb      	ldrh	r3, [r7, #14]
 800e88e:	4618      	mov	r0, r3
 800e890:	f001 ffae 	bl	80107f0 <CallNvmDataChangeCallback>
 800e894:	e000      	b.n	800e898 <LoRaMacHandleNvm+0x14c>
        return;
 800e896:	bf00      	nop
}
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	20000454 	.word	0x20000454

0800e8a4 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e8ae:	f7ff fd1b 	bl	800e2e8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e8b2:	f003 fc36 	bl	8012122 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e8b6:	4b1b      	ldr	r3, [pc, #108]	; (800e924 <LoRaMacProcess+0x80>)
 800e8b8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8bc:	f003 0320 	and.w	r3, r3, #32
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d021      	beq.n	800e90a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	f7ff fd6c 	bl	800e3a4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e8cc:	f7ff ff1e 	bl	800e70c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e8d0:	f002 f81e 	bl	8010910 <IsRequestPending>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d006      	beq.n	800e8e8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e8da:	f7ff feef 	bl	800e6bc <LoRaMacCheckForBeaconAcquisition>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e8e8:	79fb      	ldrb	r3, [r7, #7]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d103      	bne.n	800e8f6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e8ee:	f7ff fea9 	bl	800e644 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e8f2:	f7ff fe39 	bl	800e568 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e8f6:	f7ff fd65 	bl	800e3c4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e8fa:	f7ff fdc5 	bl	800e488 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e8fe:	480a      	ldr	r0, [pc, #40]	; (800e928 <LoRaMacProcess+0x84>)
 800e900:	f7ff ff24 	bl	800e74c <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e904:	2001      	movs	r0, #1
 800e906:	f7ff fd4d 	bl	800e3a4 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e90a:	f7ff fdd7 	bl	800e4bc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e90e:	4b05      	ldr	r3, [pc, #20]	; (800e924 <LoRaMacProcess+0x80>)
 800e910:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e914:	2b02      	cmp	r3, #2
 800e916:	d101      	bne.n	800e91c <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e918:	f001 fb7c 	bl	8010014 <OpenContinuousRxCWindow>
    }
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}
 800e924:	20000454 	.word	0x20000454
 800e928:	2000095c 	.word	0x2000095c

0800e92c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e934:	4817      	ldr	r0, [pc, #92]	; (800e994 <OnTxDelayedTimerEvent+0x68>)
 800e936:	f00b fca5 	bl	801a284 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e93a:	4b17      	ldr	r3, [pc, #92]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e93c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e940:	f023 0320 	bic.w	r3, r3, #32
 800e944:	4a14      	ldr	r2, [pc, #80]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e946:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e94a:	2001      	movs	r0, #1
 800e94c:	f001 f8fc 	bl	800fb48 <ScheduleTx>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d018      	beq.n	800e988 <OnTxDelayedTimerEvent+0x5c>
 800e956:	2b0b      	cmp	r3, #11
 800e958:	d016      	beq.n	800e988 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e95a:	4b10      	ldr	r3, [pc, #64]	; (800e99c <OnTxDelayedTimerEvent+0x70>)
 800e95c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e960:	b2da      	uxtb	r2, r3
 800e962:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e964:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e968:	4b0b      	ldr	r3, [pc, #44]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e96a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e96e:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e970:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e974:	4b08      	ldr	r3, [pc, #32]	; (800e998 <OnTxDelayedTimerEvent+0x6c>)
 800e976:	2209      	movs	r2, #9
 800e978:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e97c:	2009      	movs	r0, #9
 800e97e:	f003 ffdf 	bl	8012940 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e982:	f001 fef9 	bl	8010778 <StopRetransmission>
            break;
 800e986:	e000      	b.n	800e98a <OnTxDelayedTimerEvent+0x5e>
            break;
 800e988:	bf00      	nop
        }
    }
}
 800e98a:	bf00      	nop
 800e98c:	3708      	adds	r7, #8
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	200007bc 	.word	0x200007bc
 800e998:	20000454 	.word	0x20000454
 800e99c:	2000095c 	.word	0x2000095c

0800e9a0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e9a8:	4b14      	ldr	r3, [pc, #80]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9aa:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9b0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e9b4:	4b12      	ldr	r3, [pc, #72]	; (800ea00 <OnRxWindow1TimerEvent+0x60>)
 800e9b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e9ba:	b25a      	sxtb	r2, r3
 800e9bc:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9be:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <OnRxWindow1TimerEvent+0x60>)
 800e9c4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e9c8:	4b0c      	ldr	r3, [pc, #48]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9ca:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <OnRxWindow1TimerEvent+0x60>)
 800e9d0:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e9d4:	4b09      	ldr	r3, [pc, #36]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9d6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e9da:	4b08      	ldr	r3, [pc, #32]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e9e2:	4b06      	ldr	r3, [pc, #24]	; (800e9fc <OnRxWindow1TimerEvent+0x5c>)
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e9ea:	4906      	ldr	r1, [pc, #24]	; (800ea04 <OnRxWindow1TimerEvent+0x64>)
 800e9ec:	4806      	ldr	r0, [pc, #24]	; (800ea08 <OnRxWindow1TimerEvent+0x68>)
 800e9ee:	f001 fae3 	bl	800ffb8 <RxWindowSetup>
}
 800e9f2:	bf00      	nop
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20000454 	.word	0x20000454
 800ea00:	2000095c 	.word	0x2000095c
 800ea04:	2000080c 	.word	0x2000080c
 800ea08:	200007d4 	.word	0x200007d4

0800ea0c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ea14:	4b16      	ldr	r3, [pc, #88]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea16:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d023      	beq.n	800ea66 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ea1e:	4b14      	ldr	r3, [pc, #80]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea20:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ea24:	4b12      	ldr	r3, [pc, #72]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea26:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ea2a:	4b12      	ldr	r3, [pc, #72]	; (800ea74 <OnRxWindow2TimerEvent+0x68>)
 800ea2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea2e:	4a10      	ldr	r2, [pc, #64]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea30:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea34:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <OnRxWindow2TimerEvent+0x68>)
 800ea36:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ea3a:	4b0d      	ldr	r3, [pc, #52]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea3c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ea40:	4b0c      	ldr	r3, [pc, #48]	; (800ea74 <OnRxWindow2TimerEvent+0x68>)
 800ea42:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ea46:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea48:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ea4c:	4b08      	ldr	r3, [pc, #32]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <OnRxWindow2TimerEvent+0x64>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ea5c:	4906      	ldr	r1, [pc, #24]	; (800ea78 <OnRxWindow2TimerEvent+0x6c>)
 800ea5e:	4807      	ldr	r0, [pc, #28]	; (800ea7c <OnRxWindow2TimerEvent+0x70>)
 800ea60:	f001 faaa 	bl	800ffb8 <RxWindowSetup>
 800ea64:	e000      	b.n	800ea68 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ea66:	bf00      	nop
}
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	20000454 	.word	0x20000454
 800ea74:	2000095c 	.word	0x2000095c
 800ea78:	20000820 	.word	0x20000820
 800ea7c:	200007ec 	.word	0x200007ec

0800ea80 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ea88:	4815      	ldr	r0, [pc, #84]	; (800eae0 <OnAckTimeoutTimerEvent+0x60>)
 800ea8a:	f00b fbfb 	bl	801a284 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ea8e:	4b15      	ldr	r3, [pc, #84]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800ea90:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d003      	beq.n	800eaa0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ea98:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800eaa0:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <OnAckTimeoutTimerEvent+0x68>)
 800eaa2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d106      	bne.n	800eab8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eaaa:	4a0e      	ldr	r2, [pc, #56]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800eaac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800eab0:	f043 0320 	orr.w	r3, r3, #32
 800eab4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eab8:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800eaba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00a      	beq.n	800ead8 <OnAckTimeoutTimerEvent+0x58>
 800eac2:	4b08      	ldr	r3, [pc, #32]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800eac4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d004      	beq.n	800ead8 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <OnAckTimeoutTimerEvent+0x64>)
 800ead0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ead4:	691b      	ldr	r3, [r3, #16]
 800ead6:	4798      	blx	r3
    }
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	2000084c 	.word	0x2000084c
 800eae4:	20000454 	.word	0x20000454
 800eae8:	2000095c 	.word	0x2000095c

0800eaec <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	60ba      	str	r2, [r7, #8]
 800eaf4:	607b      	str	r3, [r7, #4]
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	73fb      	strb	r3, [r7, #15]
 800eafa:	460b      	mov	r3, r1
 800eafc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d005      	beq.n	800eb10 <GetFCntDown+0x24>
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <GetFCntDown+0x24>
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb10:	230a      	movs	r3, #10
 800eb12:	e029      	b.n	800eb68 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d016      	beq.n	800eb48 <GetFCntDown+0x5c>
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d118      	bne.n	800eb50 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800eb1e:	79bb      	ldrb	r3, [r7, #6]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d10d      	bne.n	800eb40 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eb24:	7bbb      	ldrb	r3, [r7, #14]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <GetFCntDown+0x44>
 800eb2a:	7bbb      	ldrb	r3, [r7, #14]
 800eb2c:	2b03      	cmp	r3, #3
 800eb2e:	d103      	bne.n	800eb38 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	2202      	movs	r2, #2
 800eb34:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800eb36:	e00d      	b.n	800eb54 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	701a      	strb	r2, [r3, #0]
            break;
 800eb3e:	e009      	b.n	800eb54 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	2203      	movs	r2, #3
 800eb44:	701a      	strb	r2, [r3, #0]
            break;
 800eb46:	e005      	b.n	800eb54 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	2204      	movs	r2, #4
 800eb4c:	701a      	strb	r2, [r3, #0]
            break;
 800eb4e:	e001      	b.n	800eb54 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800eb50:	2305      	movs	r3, #5
 800eb52:	e009      	b.n	800eb68 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	7818      	ldrb	r0, [r3, #0]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	89db      	ldrh	r3, [r3, #14]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	8b39      	ldrh	r1, [r7, #24]
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	f004 faf1 	bl	8013148 <LoRaMacCryptoGetFCntDown>
 800eb66:	4603      	mov	r3, r0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eb70:	b5b0      	push	{r4, r5, r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eb7e:	4b61      	ldr	r3, [pc, #388]	; (800ed04 <SwitchClass+0x194>)
 800eb80:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	f000 80a5 	beq.w	800ecd4 <SwitchClass+0x164>
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	f300 80b4 	bgt.w	800ecf8 <SwitchClass+0x188>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d003      	beq.n	800eb9c <SwitchClass+0x2c>
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	f000 808f 	beq.w	800ecb8 <SwitchClass+0x148>
 800eb9a:	e0ad      	b.n	800ecf8 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d107      	bne.n	800ebb2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800eba2:	4b58      	ldr	r3, [pc, #352]	; (800ed04 <SwitchClass+0x194>)
 800eba4:	4a57      	ldr	r2, [pc, #348]	; (800ed04 <SwitchClass+0x194>)
 800eba6:	336c      	adds	r3, #108	; 0x6c
 800eba8:	3264      	adds	r2, #100	; 0x64
 800ebaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebae:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d10c      	bne.n	800ebd2 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f003 fa53 	bl	8012066 <LoRaMacClassBSwitchClass>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d103      	bne.n	800ebd2 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebca:	4a4e      	ldr	r2, [pc, #312]	; (800ed04 <SwitchClass+0x194>)
 800ebcc:	79fb      	ldrb	r3, [r7, #7]
 800ebce:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ebd2:	79fb      	ldrb	r3, [r7, #7]
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	f040 808a 	bne.w	800ecee <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebda:	4a4a      	ldr	r2, [pc, #296]	; (800ed04 <SwitchClass+0x194>)
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ebe2:	4a49      	ldr	r2, [pc, #292]	; (800ed08 <SwitchClass+0x198>)
 800ebe4:	4b48      	ldr	r3, [pc, #288]	; (800ed08 <SwitchClass+0x198>)
 800ebe6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ebea:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ebee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebf2:	682b      	ldr	r3, [r5, #0]
 800ebf4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ebf6:	4b44      	ldr	r3, [pc, #272]	; (800ed08 <SwitchClass+0x198>)
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebfe:	2300      	movs	r3, #0
 800ec00:	73bb      	strb	r3, [r7, #14]
 800ec02:	e049      	b.n	800ec98 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ec04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec08:	4a3e      	ldr	r2, [pc, #248]	; (800ed04 <SwitchClass+0x194>)
 800ec0a:	212c      	movs	r1, #44	; 0x2c
 800ec0c:	fb01 f303 	mul.w	r3, r1, r3
 800ec10:	4413      	add	r3, r2
 800ec12:	33d2      	adds	r3, #210	; 0xd2
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d038      	beq.n	800ec8c <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ec1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec1e:	4a39      	ldr	r2, [pc, #228]	; (800ed04 <SwitchClass+0x194>)
 800ec20:	212c      	movs	r1, #44	; 0x2c
 800ec22:	fb01 f303 	mul.w	r3, r1, r3
 800ec26:	4413      	add	r3, r2
 800ec28:	33e8      	adds	r3, #232	; 0xe8
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a35      	ldr	r2, [pc, #212]	; (800ed04 <SwitchClass+0x194>)
 800ec2e:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ec30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec34:	4a33      	ldr	r2, [pc, #204]	; (800ed04 <SwitchClass+0x194>)
 800ec36:	212c      	movs	r1, #44	; 0x2c
 800ec38:	fb01 f303 	mul.w	r3, r1, r3
 800ec3c:	4413      	add	r3, r2
 800ec3e:	33ec      	adds	r3, #236	; 0xec
 800ec40:	f993 3000 	ldrsb.w	r3, [r3]
 800ec44:	b2da      	uxtb	r2, r3
 800ec46:	4b2f      	ldr	r3, [pc, #188]	; (800ed04 <SwitchClass+0x194>)
 800ec48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ec4c:	4b2e      	ldr	r3, [pc, #184]	; (800ed08 <SwitchClass+0x198>)
 800ec4e:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec52:	4b2d      	ldr	r3, [pc, #180]	; (800ed08 <SwitchClass+0x198>)
 800ec54:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ec58:	4b2a      	ldr	r3, [pc, #168]	; (800ed04 <SwitchClass+0x194>)
 800ec5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec5c:	4a2a      	ldr	r2, [pc, #168]	; (800ed08 <SwitchClass+0x198>)
 800ec5e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec62:	4b28      	ldr	r3, [pc, #160]	; (800ed04 <SwitchClass+0x194>)
 800ec64:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec68:	4b27      	ldr	r3, [pc, #156]	; (800ed08 <SwitchClass+0x198>)
 800ec6a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec6e:	4b25      	ldr	r3, [pc, #148]	; (800ed04 <SwitchClass+0x194>)
 800ec70:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec74:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <SwitchClass+0x198>)
 800ec76:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ec7a:	4b23      	ldr	r3, [pc, #140]	; (800ed08 <SwitchClass+0x198>)
 800ec7c:	2203      	movs	r2, #3
 800ec7e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ec82:	4b21      	ldr	r3, [pc, #132]	; (800ed08 <SwitchClass+0x198>)
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800ec8a:	e009      	b.n	800eca0 <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	3301      	adds	r3, #1
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	73bb      	strb	r3, [r7, #14]
 800ec98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	ddb1      	ble.n	800ec04 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800eca0:	4b19      	ldr	r3, [pc, #100]	; (800ed08 <SwitchClass+0x198>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800eca8:	4b18      	ldr	r3, [pc, #96]	; (800ed0c <SwitchClass+0x19c>)
 800ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecac:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ecae:	f001 f9b1 	bl	8010014 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ecb6:	e01a      	b.n	800ecee <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ecb8:	79fb      	ldrb	r3, [r7, #7]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f003 f9d3 	bl	8012066 <LoRaMacClassBSwitchClass>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ecc4:	7bfb      	ldrb	r3, [r7, #15]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d113      	bne.n	800ecf2 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ecca:	4a0e      	ldr	r2, [pc, #56]	; (800ed04 <SwitchClass+0x194>)
 800eccc:	79fb      	ldrb	r3, [r7, #7]
 800ecce:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ecd2:	e00e      	b.n	800ecf2 <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d10d      	bne.n	800ecf6 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ecda:	4a0a      	ldr	r2, [pc, #40]	; (800ed04 <SwitchClass+0x194>)
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
 800ecde:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ece2:	4b0a      	ldr	r3, [pc, #40]	; (800ed0c <SwitchClass+0x19c>)
 800ece4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece6:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ecec:	e003      	b.n	800ecf6 <SwitchClass+0x186>
            break;
 800ecee:	bf00      	nop
 800ecf0:	e002      	b.n	800ecf8 <SwitchClass+0x188>
            break;
 800ecf2:	bf00      	nop
 800ecf4:	e000      	b.n	800ecf8 <SwitchClass+0x188>
            break;
 800ecf6:	bf00      	nop
        }
    }

    return status;
 800ecf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bdb0      	pop	{r4, r5, r7, pc}
 800ed02:	bf00      	nop
 800ed04:	2000095c 	.word	0x2000095c
 800ed08:	20000454 	.word	0x20000454
 800ed0c:	0801ba54 	.word	0x0801ba54

0800ed10 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ed1a:	4b10      	ldr	r3, [pc, #64]	; (800ed5c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ed20:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ed26:	230d      	movs	r3, #13
 800ed28:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ed34:	230e      	movs	r3, #14
 800ed36:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed38:	4b08      	ldr	r3, [pc, #32]	; (800ed5c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed3e:	f107 0210 	add.w	r2, r7, #16
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f005 f881 	bl	8013e4c <RegionGetPhyParam>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	b2db      	uxtb	r3, r3
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3718      	adds	r7, #24
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	2000095c 	.word	0x2000095c

0800ed60 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	71fb      	strb	r3, [r7, #7]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	71bb      	strb	r3, [r7, #6]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ed7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7ff ffc6 	bl	800ed10 <GetMaxAppPayloadWithoutFOptsLength>
 800ed84:	4603      	mov	r3, r0
 800ed86:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ed88:	79fb      	ldrb	r3, [r7, #7]
 800ed8a:	b29a      	uxth	r2, r3
 800ed8c:	797b      	ldrb	r3, [r7, #5]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	4413      	add	r3, r2
 800ed92:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ed94:	89ba      	ldrh	r2, [r7, #12]
 800ed96:	89fb      	ldrh	r3, [r7, #14]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d804      	bhi.n	800eda6 <ValidatePayloadLength+0x46>
 800ed9c:	89bb      	ldrh	r3, [r7, #12]
 800ed9e:	2bff      	cmp	r3, #255	; 0xff
 800eda0:	d801      	bhi.n	800eda6 <ValidatePayloadLength+0x46>
    {
        return true;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e000      	b.n	800eda8 <ValidatePayloadLength+0x48>
    }
    return false;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800edb0:	b480      	push	{r7}
 800edb2:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800edb4:	4a05      	ldr	r2, [pc, #20]	; (800edcc <SetMlmeScheduleUplinkIndication+0x1c>)
 800edb6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800edba:	f043 0310 	orr.w	r3, r3, #16
 800edbe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800edc2:	bf00      	nop
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bc80      	pop	{r7}
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	20000454 	.word	0x20000454

0800edd0 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800edd0:	b590      	push	{r4, r7, lr}
 800edd2:	b0a5      	sub	sp, #148	; 0x94
 800edd4:	af02      	add	r7, sp, #8
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	4608      	mov	r0, r1
 800edda:	4611      	mov	r1, r2
 800eddc:	461a      	mov	r2, r3
 800edde:	4603      	mov	r3, r0
 800ede0:	70fb      	strb	r3, [r7, #3]
 800ede2:	460b      	mov	r3, r1
 800ede4:	70bb      	strb	r3, [r7, #2]
 800ede6:	4613      	mov	r3, r2
 800ede8:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800edf0:	2300      	movs	r3, #0
 800edf2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800edf6:	2300      	movs	r3, #0
 800edf8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800edfc:	f000 bc73 	b.w	800f6e6 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ee00:	78fb      	ldrb	r3, [r7, #3]
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	4413      	add	r3, r2
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f003 fbf5 	bl	80125f8 <LoRaMacCommandsGetCmdSize>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	461a      	mov	r2, r3
 800ee12:	78fb      	ldrb	r3, [r7, #3]
 800ee14:	441a      	add	r2, r3
 800ee16:	78bb      	ldrb	r3, [r7, #2]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	f300 846a 	bgt.w	800f6f2 <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ee1e:	78fb      	ldrb	r3, [r7, #3]
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	70fa      	strb	r2, [r7, #3]
 800ee24:	461a      	mov	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4413      	add	r3, r2
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	3b02      	subs	r3, #2
 800ee2e:	2b11      	cmp	r3, #17
 800ee30:	f200 8461 	bhi.w	800f6f6 <ProcessMacCommands+0x926>
 800ee34:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <ProcessMacCommands+0x6c>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ee85 	.word	0x0800ee85
 800ee40:	0800eec7 	.word	0x0800eec7
 800ee44:	0800efe3 	.word	0x0800efe3
 800ee48:	0800f021 	.word	0x0800f021
 800ee4c:	0800f111 	.word	0x0800f111
 800ee50:	0800f16d 	.word	0x0800f16d
 800ee54:	0800f229 	.word	0x0800f229
 800ee58:	0800f283 	.word	0x0800f283
 800ee5c:	0800f367 	.word	0x0800f367
 800ee60:	0800f6f7 	.word	0x0800f6f7
 800ee64:	0800f6f7 	.word	0x0800f6f7
 800ee68:	0800f411 	.word	0x0800f411
 800ee6c:	0800f6f7 	.word	0x0800f6f7
 800ee70:	0800f6f7 	.word	0x0800f6f7
 800ee74:	0800f527 	.word	0x0800f527
 800ee78:	0800f55b 	.word	0x0800f55b
 800ee7c:	0800f5eb 	.word	0x0800f5eb
 800ee80:	0800f661 	.word	0x0800f661
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ee84:	2004      	movs	r0, #4
 800ee86:	f003 fd8f 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 842a 	beq.w	800f6e6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ee92:	2104      	movs	r1, #4
 800ee94:	2000      	movs	r0, #0
 800ee96:	f003 fcfb 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ee9a:	78fb      	ldrb	r3, [r7, #3]
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	70fa      	strb	r2, [r7, #3]
 800eea0:	461a      	mov	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4413      	add	r3, r2
 800eea6:	781a      	ldrb	r2, [r3, #0]
 800eea8:	4bad      	ldr	r3, [pc, #692]	; (800f160 <ProcessMacCommands+0x390>)
 800eeaa:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	1c5a      	adds	r2, r3, #1
 800eeb2:	70fa      	strb	r2, [r7, #3]
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4413      	add	r3, r2
 800eeba:	781a      	ldrb	r2, [r3, #0]
 800eebc:	4ba8      	ldr	r3, [pc, #672]	; (800f160 <ProcessMacCommands+0x390>)
 800eebe:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800eec2:	f000 bc10 	b.w	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800eecc:	2300      	movs	r3, #0
 800eece:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800eed2:	2300      	movs	r3, #0
 800eed4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800eede:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eee2:	f083 0301 	eor.w	r3, r3, #1
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d078      	beq.n	800efde <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800eeec:	2301      	movs	r3, #1
 800eeee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	4413      	add	r3, r2
 800eefa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800eefc:	78ba      	ldrb	r2, [r7, #2]
 800eefe:	78fb      	ldrb	r3, [r7, #3]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	3301      	adds	r3, #1
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ef0c:	4b95      	ldr	r3, [pc, #596]	; (800f164 <ProcessMacCommands+0x394>)
 800ef0e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ef12:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef16:	4b93      	ldr	r3, [pc, #588]	; (800f164 <ProcessMacCommands+0x394>)
 800ef18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ef1c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef20:	4b90      	ldr	r3, [pc, #576]	; (800f164 <ProcessMacCommands+0x394>)
 800ef22:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ef26:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ef2a:	4b8e      	ldr	r3, [pc, #568]	; (800f164 <ProcessMacCommands+0x394>)
 800ef2c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ef30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ef34:	4b8b      	ldr	r3, [pc, #556]	; (800f164 <ProcessMacCommands+0x394>)
 800ef36:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ef3a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ef3e:	4b89      	ldr	r3, [pc, #548]	; (800f164 <ProcessMacCommands+0x394>)
 800ef40:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ef44:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ef46:	4b87      	ldr	r3, [pc, #540]	; (800f164 <ProcessMacCommands+0x394>)
 800ef48:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef4c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ef50:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ef54:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	4623      	mov	r3, r4
 800ef66:	f005 f82f 	bl	8013fc8 <RegionLinkAdrReq>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ef70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef74:	f003 0307 	and.w	r3, r3, #7
 800ef78:	2b07      	cmp	r3, #7
 800ef7a:	d10e      	bne.n	800ef9a <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ef7c:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ef80:	4b78      	ldr	r3, [pc, #480]	; (800f164 <ProcessMacCommands+0x394>)
 800ef82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ef86:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800ef8a:	4b76      	ldr	r3, [pc, #472]	; (800f164 <ProcessMacCommands+0x394>)
 800ef8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ef90:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800ef94:	4b73      	ldr	r3, [pc, #460]	; (800f164 <ProcessMacCommands+0x394>)
 800ef96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800efa0:	e00b      	b.n	800efba <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800efa2:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800efa6:	2201      	movs	r2, #1
 800efa8:	4619      	mov	r1, r3
 800efaa:	2003      	movs	r0, #3
 800efac:	f003 f9d4 	bl	8012358 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800efb0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800efb4:	3301      	adds	r3, #1
 800efb6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800efba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800efbe:	4a6a      	ldr	r2, [pc, #424]	; (800f168 <ProcessMacCommands+0x398>)
 800efc0:	fba2 2303 	umull	r2, r3, r2, r3
 800efc4:	089b      	lsrs	r3, r3, #2
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800efcc:	429a      	cmp	r2, r3
 800efce:	d3e8      	bcc.n	800efa2 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800efd0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	4413      	add	r3, r2
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800efde:	bf00      	nop
 800efe0:	e381      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800efe2:	78fb      	ldrb	r3, [r7, #3]
 800efe4:	1c5a      	adds	r2, r3, #1
 800efe6:	70fa      	strb	r2, [r7, #3]
 800efe8:	461a      	mov	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4413      	add	r3, r2
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	f003 030f 	and.w	r3, r3, #15
 800eff4:	b2da      	uxtb	r2, r3
 800eff6:	4b5b      	ldr	r3, [pc, #364]	; (800f164 <ProcessMacCommands+0x394>)
 800eff8:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800effc:	4b59      	ldr	r3, [pc, #356]	; (800f164 <ProcessMacCommands+0x394>)
 800effe:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f002:	461a      	mov	r2, r3
 800f004:	2301      	movs	r3, #1
 800f006:	4093      	lsls	r3, r2
 800f008:	b29a      	uxth	r2, r3
 800f00a:	4b56      	ldr	r3, [pc, #344]	; (800f164 <ProcessMacCommands+0x394>)
 800f00c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f010:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f014:	2200      	movs	r2, #0
 800f016:	4619      	mov	r1, r3
 800f018:	2004      	movs	r0, #4
 800f01a:	f003 f99d 	bl	8012358 <LoRaMacCommandsAddCmd>
                break;
 800f01e:	e362      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f020:	2307      	movs	r3, #7
 800f022:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	4413      	add	r3, r2
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	091b      	lsrs	r3, r3, #4
 800f030:	b2db      	uxtb	r3, r3
 800f032:	b25b      	sxtb	r3, r3
 800f034:	f003 0307 	and.w	r3, r3, #7
 800f038:	b25b      	sxtb	r3, r3
 800f03a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f03e:	78fb      	ldrb	r3, [r7, #3]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	4413      	add	r3, r2
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b25b      	sxtb	r3, r3
 800f048:	f003 030f 	and.w	r3, r3, #15
 800f04c:	b25b      	sxtb	r3, r3
 800f04e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f052:	78fb      	ldrb	r3, [r7, #3]
 800f054:	3301      	adds	r3, #1
 800f056:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f058:	78fb      	ldrb	r3, [r7, #3]
 800f05a:	1c5a      	adds	r2, r3, #1
 800f05c:	70fa      	strb	r2, [r7, #3]
 800f05e:	461a      	mov	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4413      	add	r3, r2
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f068:	78fb      	ldrb	r3, [r7, #3]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	70fa      	strb	r2, [r7, #3]
 800f06e:	461a      	mov	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4413      	add	r3, r2
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	021a      	lsls	r2, r3, #8
 800f078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07a:	4313      	orrs	r3, r2
 800f07c:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f07e:	78fb      	ldrb	r3, [r7, #3]
 800f080:	1c5a      	adds	r2, r3, #1
 800f082:	70fa      	strb	r2, [r7, #3]
 800f084:	461a      	mov	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4413      	add	r3, r2
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	041a      	lsls	r2, r3, #16
 800f08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f090:	4313      	orrs	r3, r2
 800f092:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f096:	2264      	movs	r2, #100	; 0x64
 800f098:	fb02 f303 	mul.w	r3, r2, r3
 800f09c:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f09e:	4b31      	ldr	r3, [pc, #196]	; (800f164 <ProcessMacCommands+0x394>)
 800f0a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f004 ffa6 	bl	8013ffc <RegionRxParamSetupReq>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f0b6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f0ba:	f003 0307 	and.w	r3, r3, #7
 800f0be:	2b07      	cmp	r3, #7
 800f0c0:	d117      	bne.n	800f0f2 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f0c2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f0c6:	b2da      	uxtb	r2, r3
 800f0c8:	4b26      	ldr	r3, [pc, #152]	; (800f164 <ProcessMacCommands+0x394>)
 800f0ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f0ce:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	4b23      	ldr	r3, [pc, #140]	; (800f164 <ProcessMacCommands+0x394>)
 800f0d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0dc:	4a21      	ldr	r2, [pc, #132]	; (800f164 <ProcessMacCommands+0x394>)
 800f0de:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e2:	4a20      	ldr	r2, [pc, #128]	; (800f164 <ProcessMacCommands+0x394>)
 800f0e4:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f0e6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	4b1d      	ldr	r3, [pc, #116]	; (800f164 <ProcessMacCommands+0x394>)
 800f0ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f0f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f0f6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f0fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f0fe:	2201      	movs	r2, #1
 800f100:	4619      	mov	r1, r3
 800f102:	2005      	movs	r0, #5
 800f104:	f003 f928 	bl	8012358 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f108:	f7ff fe52 	bl	800edb0 <SetMlmeScheduleUplinkIndication>
                break;
 800f10c:	bf00      	nop
 800f10e:	e2ea      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f110:	23ff      	movs	r3, #255	; 0xff
 800f112:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f116:	4b12      	ldr	r3, [pc, #72]	; (800f160 <ProcessMacCommands+0x390>)
 800f118:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00d      	beq.n	800f13c <ProcessMacCommands+0x36c>
 800f120:	4b0f      	ldr	r3, [pc, #60]	; (800f160 <ProcessMacCommands+0x390>)
 800f122:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d007      	beq.n	800f13c <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f12c:	4b0c      	ldr	r3, [pc, #48]	; (800f160 <ProcessMacCommands+0x390>)
 800f12e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4798      	blx	r3
 800f136:	4603      	mov	r3, r0
 800f138:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f13c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f140:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f144:	787b      	ldrb	r3, [r7, #1]
 800f146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f14a:	b2db      	uxtb	r3, r3
 800f14c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f150:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f154:	2202      	movs	r2, #2
 800f156:	4619      	mov	r1, r3
 800f158:	2006      	movs	r0, #6
 800f15a:	f003 f8fd 	bl	8012358 <LoRaMacCommandsAddCmd>
                break;
 800f15e:	e2c2      	b.n	800f6e6 <ProcessMacCommands+0x916>
 800f160:	20000454 	.word	0x20000454
 800f164:	2000095c 	.word	0x2000095c
 800f168:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f16c:	2303      	movs	r3, #3
 800f16e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	1c5a      	adds	r2, r3, #1
 800f176:	70fa      	strb	r2, [r7, #3]
 800f178:	461a      	mov	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4413      	add	r3, r2
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	b25b      	sxtb	r3, r3
 800f182:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f18a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f18c:	78fb      	ldrb	r3, [r7, #3]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	70fa      	strb	r2, [r7, #3]
 800f192:	461a      	mov	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4413      	add	r3, r2
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f19c:	78fb      	ldrb	r3, [r7, #3]
 800f19e:	1c5a      	adds	r2, r3, #1
 800f1a0:	70fa      	strb	r2, [r7, #3]
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	021a      	lsls	r2, r3, #8
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f1b2:	78fb      	ldrb	r3, [r7, #3]
 800f1b4:	1c5a      	adds	r2, r3, #1
 800f1b6:	70fa      	strb	r2, [r7, #3]
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4413      	add	r3, r2
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	041a      	lsls	r2, r3, #16
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	2264      	movs	r2, #100	; 0x64
 800f1cc:	fb02 f303 	mul.w	r3, r2, r3
 800f1d0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f1d6:	78fb      	ldrb	r3, [r7, #3]
 800f1d8:	1c5a      	adds	r2, r3, #1
 800f1da:	70fa      	strb	r2, [r7, #3]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	b25b      	sxtb	r3, r3
 800f1e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f1ea:	4b87      	ldr	r3, [pc, #540]	; (800f408 <ProcessMacCommands+0x638>)
 800f1ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f1f0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f004 ff13 	bl	8014022 <RegionNewChannelReq>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f204:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	db0a      	blt.n	800f224 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f20e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f212:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f216:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f21a:	2201      	movs	r2, #1
 800f21c:	4619      	mov	r1, r3
 800f21e:	2007      	movs	r0, #7
 800f220:	f003 f89a 	bl	8012358 <LoRaMacCommandsAddCmd>
                }
                break;
 800f224:	bf00      	nop
 800f226:	e25e      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f228:	78fb      	ldrb	r3, [r7, #3]
 800f22a:	1c5a      	adds	r2, r3, #1
 800f22c:	70fa      	strb	r2, [r7, #3]
 800f22e:	461a      	mov	r2, r3
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4413      	add	r3, r2
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	f003 030f 	and.w	r3, r3, #15
 800f23a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f23e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f242:	2b00      	cmp	r3, #0
 800f244:	d104      	bne.n	800f250 <ProcessMacCommands+0x480>
                {
                    delay++;
 800f246:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f24a:	3301      	adds	r3, #1
 800f24c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f250:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f258:	fb02 f303 	mul.w	r3, r2, r3
 800f25c:	461a      	mov	r2, r3
 800f25e:	4b6a      	ldr	r3, [pc, #424]	; (800f408 <ProcessMacCommands+0x638>)
 800f260:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f262:	4b69      	ldr	r3, [pc, #420]	; (800f408 <ProcessMacCommands+0x638>)
 800f264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f266:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f26a:	4a67      	ldr	r2, [pc, #412]	; (800f408 <ProcessMacCommands+0x638>)
 800f26c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f26e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f272:	2200      	movs	r2, #0
 800f274:	4619      	mov	r1, r3
 800f276:	2008      	movs	r0, #8
 800f278:	f003 f86e 	bl	8012358 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f27c:	f7ff fd98 	bl	800edb0 <SetMlmeScheduleUplinkIndication>
                break;
 800f280:	e231      	b.n	800f6e6 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f282:	78fb      	ldrb	r3, [r7, #3]
 800f284:	1c5a      	adds	r2, r3, #1
 800f286:	70fa      	strb	r2, [r7, #3]
 800f288:	461a      	mov	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f29a:	2300      	movs	r3, #0
 800f29c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f2a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2a4:	f003 0320 	and.w	r3, r3, #32
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d002      	beq.n	800f2b2 <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f2b2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2b6:	f003 0310 	and.w	r3, r3, #16
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d002      	beq.n	800f2c4 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f2c4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2c8:	f003 030f 	and.w	r3, r3, #15
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f2d2:	4b4d      	ldr	r3, [pc, #308]	; (800f408 <ProcessMacCommands+0x638>)
 800f2d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2dc:	4611      	mov	r1, r2
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f004 feb2 	bl	8014048 <RegionTxParamSetupReq>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ea:	d03a      	beq.n	800f362 <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f2ec:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f2f0:	4b45      	ldr	r3, [pc, #276]	; (800f408 <ProcessMacCommands+0x638>)
 800f2f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f2f6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f2fa:	4b43      	ldr	r3, [pc, #268]	; (800f408 <ProcessMacCommands+0x638>)
 800f2fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f300:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f304:	461a      	mov	r2, r3
 800f306:	4b41      	ldr	r3, [pc, #260]	; (800f40c <ProcessMacCommands+0x63c>)
 800f308:	5c9b      	ldrb	r3, [r3, r2]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7f1 fa5e 	bl	80007cc <__aeabi_ui2f>
 800f310:	4603      	mov	r3, r0
 800f312:	4a3d      	ldr	r2, [pc, #244]	; (800f408 <ProcessMacCommands+0x638>)
 800f314:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f316:	2302      	movs	r3, #2
 800f318:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f31c:	4b3a      	ldr	r3, [pc, #232]	; (800f408 <ProcessMacCommands+0x638>)
 800f31e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f322:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f326:	4b38      	ldr	r3, [pc, #224]	; (800f408 <ProcessMacCommands+0x638>)
 800f328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f32c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f330:	4611      	mov	r1, r2
 800f332:	4618      	mov	r0, r3
 800f334:	f004 fd8a 	bl	8013e4c <RegionGetPhyParam>
 800f338:	4603      	mov	r3, r0
 800f33a:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	b25a      	sxtb	r2, r3
 800f340:	4b31      	ldr	r3, [pc, #196]	; (800f408 <ProcessMacCommands+0x638>)
 800f342:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f346:	4293      	cmp	r3, r2
 800f348:	bfb8      	it	lt
 800f34a:	4613      	movlt	r3, r2
 800f34c:	b25a      	sxtb	r2, r3
 800f34e:	4b2e      	ldr	r3, [pc, #184]	; (800f408 <ProcessMacCommands+0x638>)
 800f350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f354:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f358:	2200      	movs	r2, #0
 800f35a:	4619      	mov	r1, r3
 800f35c:	2009      	movs	r0, #9
 800f35e:	f002 fffb 	bl	8012358 <LoRaMacCommandsAddCmd>
                }
                break;
 800f362:	bf00      	nop
 800f364:	e1bf      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f366:	2303      	movs	r3, #3
 800f368:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	70fa      	strb	r2, [r7, #3]
 800f372:	461a      	mov	r2, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4413      	add	r3, r2
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f37e:	78fb      	ldrb	r3, [r7, #3]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	70fa      	strb	r2, [r7, #3]
 800f384:	461a      	mov	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f38e:	78fb      	ldrb	r3, [r7, #3]
 800f390:	1c5a      	adds	r2, r3, #1
 800f392:	70fa      	strb	r2, [r7, #3]
 800f394:	461a      	mov	r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4413      	add	r3, r2
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	021a      	lsls	r2, r3, #8
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f3a4:	78fb      	ldrb	r3, [r7, #3]
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	70fa      	strb	r2, [r7, #3]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	041a      	lsls	r2, r3, #16
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	2264      	movs	r2, #100	; 0x64
 800f3be:	fb02 f303 	mul.w	r3, r2, r3
 800f3c2:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f3c4:	4b10      	ldr	r3, [pc, #64]	; (800f408 <ProcessMacCommands+0x638>)
 800f3c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3ca:	f107 0220 	add.w	r2, r7, #32
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f004 fe4c 	bl	801406e <RegionDlChannelReq>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f3de:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3e2:	b25b      	sxtb	r3, r3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	db0c      	blt.n	800f402 <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f3e8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3ec:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f3f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	200a      	movs	r0, #10
 800f3fa:	f002 ffad 	bl	8012358 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f3fe:	f7ff fcd7 	bl	800edb0 <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f402:	bf00      	nop
 800f404:	e16f      	b.n	800f6e6 <ProcessMacCommands+0x916>
 800f406:	bf00      	nop
 800f408:	2000095c 	.word	0x2000095c
 800f40c:	0801ba0c 	.word	0x0801ba0c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f410:	200a      	movs	r0, #10
 800f412:	f003 fac9 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f000 8164 	beq.w	800f6e6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f41e:	210a      	movs	r1, #10
 800f420:	2000      	movs	r0, #0
 800f422:	f003 fa35 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f426:	f107 0318 	add.w	r3, r7, #24
 800f42a:	2200      	movs	r2, #0
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f430:	f107 0310 	add.w	r3, r7, #16
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]
 800f438:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f43a:	f107 0308 	add.w	r3, r7, #8
 800f43e:	2200      	movs	r2, #0
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f444:	78fb      	ldrb	r3, [r7, #3]
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	70fa      	strb	r2, [r7, #3]
 800f44a:	461a      	mov	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4413      	add	r3, r2
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f454:	78fb      	ldrb	r3, [r7, #3]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	70fa      	strb	r2, [r7, #3]
 800f45a:	461a      	mov	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4413      	add	r3, r2
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	021a      	lsls	r2, r3, #8
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	4313      	orrs	r3, r2
 800f468:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	70fa      	strb	r2, [r7, #3]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	041a      	lsls	r2, r3, #16
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	70fa      	strb	r2, [r7, #3]
 800f486:	461a      	mov	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4413      	add	r3, r2
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	061a      	lsls	r2, r3, #24
 800f490:	69bb      	ldr	r3, [r7, #24]
 800f492:	4313      	orrs	r3, r2
 800f494:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f496:	78fb      	ldrb	r3, [r7, #3]
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	70fa      	strb	r2, [r7, #3]
 800f49c:	461a      	mov	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	b21b      	sxth	r3, r3
 800f4a6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f4a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f4b2:	fb03 f302 	mul.w	r3, r3, r2
 800f4b6:	121b      	asrs	r3, r3, #8
 800f4b8:	b21b      	sxth	r3, r3
 800f4ba:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f4bc:	f107 0310 	add.w	r3, r7, #16
 800f4c0:	f107 0218 	add.w	r2, r7, #24
 800f4c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4c8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	4b8c      	ldr	r3, [pc, #560]	; (800f700 <ProcessMacCommands+0x930>)
 800f4d0:	4413      	add	r3, r2
 800f4d2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f4d4:	f107 0308 	add.w	r3, r7, #8
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f00a fa6f 	bl	80199bc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f4de:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f4e2:	4b88      	ldr	r3, [pc, #544]	; (800f704 <ProcessMacCommands+0x934>)
 800f4e4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f4e8:	9200      	str	r2, [sp, #0]
 800f4ea:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f4ee:	f107 0210 	add.w	r2, r7, #16
 800f4f2:	ca06      	ldmia	r2, {r1, r2}
 800f4f4:	f00a f9fb 	bl	80198ee <SysTimeSub>
 800f4f8:	f107 0010 	add.w	r0, r7, #16
 800f4fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f502:	f107 0208 	add.w	r2, r7, #8
 800f506:	ca06      	ldmia	r2, {r1, r2}
 800f508:	f00a f9b8 	bl	801987c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f50c:	f107 0310 	add.w	r3, r7, #16
 800f510:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f514:	f00a fa24 	bl	8019960 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f518:	f002 fde3 	bl	80120e2 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f51c:	4b79      	ldr	r3, [pc, #484]	; (800f704 <ProcessMacCommands+0x934>)
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f524:	e0df      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f526:	200d      	movs	r0, #13
 800f528:	f003 fa3e 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f000 80d9 	beq.w	800f6e6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f534:	210d      	movs	r1, #13
 800f536:	2000      	movs	r0, #0
 800f538:	f003 f9aa 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f53c:	4b71      	ldr	r3, [pc, #452]	; (800f704 <ProcessMacCommands+0x934>)
 800f53e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f542:	2b04      	cmp	r3, #4
 800f544:	f000 80cf 	beq.w	800f6e6 <ProcessMacCommands+0x916>
 800f548:	4b6e      	ldr	r3, [pc, #440]	; (800f704 <ProcessMacCommands+0x934>)
 800f54a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f54e:	2b05      	cmp	r3, #5
 800f550:	f000 80c9 	beq.w	800f6e6 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f554:	f002 fda6 	bl	80120a4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f558:	e0c5      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f55a:	2303      	movs	r3, #3
 800f55c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	70fa      	strb	r2, [r7, #3]
 800f56a:	461a      	mov	r2, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4413      	add	r3, r2
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f574:	78fb      	ldrb	r3, [r7, #3]
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	70fa      	strb	r2, [r7, #3]
 800f57a:	461a      	mov	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4413      	add	r3, r2
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f586:	4313      	orrs	r3, r2
 800f588:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f58a:	78fb      	ldrb	r3, [r7, #3]
 800f58c:	1c5a      	adds	r2, r3, #1
 800f58e:	70fa      	strb	r2, [r7, #3]
 800f590:	461a      	mov	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4413      	add	r3, r2
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	041b      	lsls	r3, r3, #16
 800f59a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f59c:	4313      	orrs	r3, r2
 800f59e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5a2:	2264      	movs	r2, #100	; 0x64
 800f5a4:	fb02 f303 	mul.w	r3, r2, r3
 800f5a8:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f5aa:	78fb      	ldrb	r3, [r7, #3]
 800f5ac:	1c5a      	adds	r2, r3, #1
 800f5ae:	70fa      	strb	r2, [r7, #3]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f003 030f 	and.w	r3, r3, #15
 800f5bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f5c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f5c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f002 fd72 	bl	80120b0 <LoRaMacClassBPingSlotChannelReq>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f5d2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f5d6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f5da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5de:	2201      	movs	r2, #1
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	2011      	movs	r0, #17
 800f5e4:	f002 feb8 	bl	8012358 <LoRaMacCommandsAddCmd>
                break;
 800f5e8:	e07d      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f5ea:	200e      	movs	r0, #14
 800f5ec:	f003 f9dc 	bl	80129a8 <LoRaMacConfirmQueueIsCmdActive>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d077      	beq.n	800f6e6 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f5f6:	210e      	movs	r1, #14
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	f003 f949 	bl	8012890 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f60a:	78fb      	ldrb	r3, [r7, #3]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	70fa      	strb	r2, [r7, #3]
 800f610:	461a      	mov	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f61c:	78fb      	ldrb	r3, [r7, #3]
 800f61e:	1c5a      	adds	r2, r3, #1
 800f620:	70fa      	strb	r2, [r7, #3]
 800f622:	461a      	mov	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4413      	add	r3, r2
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	021b      	lsls	r3, r3, #8
 800f62c:	b21a      	sxth	r2, r3
 800f62e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f632:	4313      	orrs	r3, r2
 800f634:	b21b      	sxth	r3, r3
 800f636:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	1c5a      	adds	r2, r3, #1
 800f63e:	70fa      	strb	r2, [r7, #3]
 800f640:	461a      	mov	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f64c:	4b2e      	ldr	r3, [pc, #184]	; (800f708 <ProcessMacCommands+0x938>)
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f654:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f658:	4618      	mov	r0, r3
 800f65a:	f002 fd35 	bl	80120c8 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f65e:	e042      	b.n	800f6e6 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f666:	78fb      	ldrb	r3, [r7, #3]
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	70fa      	strb	r2, [r7, #3]
 800f66c:	461a      	mov	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	70fa      	strb	r2, [r7, #3]
 800f67e:	461a      	mov	r2, r3
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4413      	add	r3, r2
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	021b      	lsls	r3, r3, #8
 800f688:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f68c:	4313      	orrs	r3, r2
 800f68e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f692:	78fb      	ldrb	r3, [r7, #3]
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	70fa      	strb	r2, [r7, #3]
 800f698:	461a      	mov	r2, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4413      	add	r3, r2
 800f69e:	781b      	ldrb	r3, [r3, #0]
 800f6a0:	041b      	lsls	r3, r3, #16
 800f6a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6a6:	4313      	orrs	r3, r2
 800f6a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f6ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6b0:	2264      	movs	r2, #100	; 0x64
 800f6b2:	fb02 f303 	mul.w	r3, r2, r3
 800f6b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f6ba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f6be:	f002 fd16 	bl	80120ee <LoRaMacClassBBeaconFreqReq>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d003      	beq.n	800f6d0 <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f6ce:	e002      	b.n	800f6d6 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f6d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6da:	2201      	movs	r2, #1
 800f6dc:	4619      	mov	r1, r3
 800f6de:	2013      	movs	r0, #19
 800f6e0:	f002 fe3a 	bl	8012358 <LoRaMacCommandsAddCmd>
                }
                break;
 800f6e4:	bf00      	nop
    while( macIndex < commandsSize )
 800f6e6:	78fa      	ldrb	r2, [r7, #3]
 800f6e8:	78bb      	ldrb	r3, [r7, #2]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	f4ff ab88 	bcc.w	800ee00 <ProcessMacCommands+0x30>
 800f6f0:	e002      	b.n	800f6f8 <ProcessMacCommands+0x928>
            return;
 800f6f2:	bf00      	nop
 800f6f4:	e000      	b.n	800f6f8 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f6f6:	bf00      	nop
        }
    }
}
 800f6f8:	378c      	adds	r7, #140	; 0x8c
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd90      	pop	{r4, r7, pc}
 800f6fe:	bf00      	nop
 800f700:	12d53d80 	.word	0x12d53d80
 800f704:	20000454 	.word	0x20000454
 800f708:	200017a8 	.word	0x200017a8

0800f70c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08e      	sub	sp, #56	; 0x38
 800f710:	af02      	add	r7, sp, #8
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	607a      	str	r2, [r7, #4]
 800f716:	461a      	mov	r2, r3
 800f718:	460b      	mov	r3, r1
 800f71a:	72fb      	strb	r3, [r7, #11]
 800f71c:	4613      	mov	r3, r2
 800f71e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f720:	2303      	movs	r3, #3
 800f722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f726:	4b65      	ldr	r3, [pc, #404]	; (800f8bc <Send+0x1b0>)
 800f728:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f72c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f730:	4b62      	ldr	r3, [pc, #392]	; (800f8bc <Send+0x1b0>)
 800f732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f736:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f73a:	4b60      	ldr	r3, [pc, #384]	; (800f8bc <Send+0x1b0>)
 800f73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f73e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f740:	4b5e      	ldr	r3, [pc, #376]	; (800f8bc <Send+0x1b0>)
 800f742:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f746:	2b00      	cmp	r3, #0
 800f748:	d101      	bne.n	800f74e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f74a:	2307      	movs	r3, #7
 800f74c:	e0b1      	b.n	800f8b2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f74e:	4b5b      	ldr	r3, [pc, #364]	; (800f8bc <Send+0x1b0>)
 800f750:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f758:	4b58      	ldr	r3, [pc, #352]	; (800f8bc <Send+0x1b0>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f764:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f768:	f36f 0303 	bfc	r3, #0, #4
 800f76c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f770:	4b52      	ldr	r3, [pc, #328]	; (800f8bc <Send+0x1b0>)
 800f772:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f776:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f77a:	f362 13c7 	bfi	r3, r2, #7, #1
 800f77e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f782:	4b4e      	ldr	r3, [pc, #312]	; (800f8bc <Send+0x1b0>)
 800f784:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d106      	bne.n	800f79a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f78c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f790:	f043 0310 	orr.w	r3, r3, #16
 800f794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f798:	e005      	b.n	800f7a6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f79a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f79e:	f36f 1304 	bfc	r3, #4, #1
 800f7a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f7a6:	4b45      	ldr	r3, [pc, #276]	; (800f8bc <Send+0x1b0>)
 800f7a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d005      	beq.n	800f7bc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f7b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7b4:	f043 0320 	orr.w	r3, r3, #32
 800f7b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f7bc:	4b3f      	ldr	r3, [pc, #252]	; (800f8bc <Send+0x1b0>)
 800f7be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f7c2:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f7c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	bf14      	ite	ne
 800f7d6:	2301      	movne	r3, #1
 800f7d8:	2300      	moveq	r3, #0
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f7de:	4b37      	ldr	r3, [pc, #220]	; (800f8bc <Send+0x1b0>)
 800f7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f7e4:	4b36      	ldr	r3, [pc, #216]	; (800f8c0 <Send+0x1b4>)
 800f7e6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f7ea:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f7ec:	4b34      	ldr	r3, [pc, #208]	; (800f8c0 <Send+0x1b4>)
 800f7ee:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f7f2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f7f4:	4b31      	ldr	r3, [pc, #196]	; (800f8bc <Send+0x1b0>)
 800f7f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f7fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f7fe:	4b2f      	ldr	r3, [pc, #188]	; (800f8bc <Send+0x1b0>)
 800f800:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f804:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f808:	4b2c      	ldr	r3, [pc, #176]	; (800f8bc <Send+0x1b0>)
 800f80a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f80e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f812:	4b2a      	ldr	r3, [pc, #168]	; (800f8bc <Send+0x1b0>)
 800f814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f81c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f820:	f107 0014 	add.w	r0, r7, #20
 800f824:	4a27      	ldr	r2, [pc, #156]	; (800f8c4 <Send+0x1b8>)
 800f826:	4928      	ldr	r1, [pc, #160]	; (800f8c8 <Send+0x1bc>)
 800f828:	f002 fb7c 	bl	8011f24 <LoRaMacAdrCalcNext>
 800f82c:	4603      	mov	r3, r0
 800f82e:	461a      	mov	r2, r3
 800f830:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f834:	f362 1386 	bfi	r3, r2, #6, #1
 800f838:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f83c:	7afa      	ldrb	r2, [r7, #11]
 800f83e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f842:	893b      	ldrh	r3, [r7, #8]
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	68f8      	ldr	r0, [r7, #12]
 800f84a:	f000 fc21 	bl	8010090 <PrepareFrame>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d003      	beq.n	800f864 <Send+0x158>
 800f85c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f860:	2b0a      	cmp	r3, #10
 800f862:	d107      	bne.n	800f874 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f864:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f868:	4618      	mov	r0, r3
 800f86a:	f000 f96d 	bl	800fb48 <ScheduleTx>
 800f86e:	4603      	mov	r3, r0
 800f870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00a      	beq.n	800f892 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f87c:	4a0f      	ldr	r2, [pc, #60]	; (800f8bc <Send+0x1b0>)
 800f87e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f882:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f886:	4a0d      	ldr	r2, [pc, #52]	; (800f8bc <Send+0x1b0>)
 800f888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f88c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f890:	e00d      	b.n	800f8ae <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f892:	4b0a      	ldr	r3, [pc, #40]	; (800f8bc <Send+0x1b0>)
 800f894:	2200      	movs	r2, #0
 800f896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89c:	4a07      	ldr	r2, [pc, #28]	; (800f8bc <Send+0x1b0>)
 800f89e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f8a0:	f002 fdd2 	bl	8012448 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8aa:	2313      	movs	r3, #19
 800f8ac:	e001      	b.n	800f8b2 <Send+0x1a6>
        }
    }
    return status;
 800f8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3730      	adds	r7, #48	; 0x30
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2000095c 	.word	0x2000095c
 800f8c0:	20000454 	.word	0x20000454
 800f8c4:	20000994 	.word	0x20000994
 800f8c8:	20000995 	.word	0x20000995

0800f8cc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f8e2:	79fb      	ldrb	r3, [r7, #7]
 800f8e4:	2bff      	cmp	r3, #255	; 0xff
 800f8e6:	d129      	bne.n	800f93c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	f7ff f941 	bl	800eb70 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f8ee:	4b1a      	ldr	r3, [pc, #104]	; (800f958 <SendReJoinReq+0x8c>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f8f6:	4b18      	ldr	r3, [pc, #96]	; (800f958 <SendReJoinReq+0x8c>)
 800f8f8:	4a18      	ldr	r2, [pc, #96]	; (800f95c <SendReJoinReq+0x90>)
 800f8fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f8fe:	4b16      	ldr	r3, [pc, #88]	; (800f958 <SendReJoinReq+0x8c>)
 800f900:	22ff      	movs	r2, #255	; 0xff
 800f902:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f906:	7b3b      	ldrb	r3, [r7, #12]
 800f908:	f36f 1347 	bfc	r3, #5, #3
 800f90c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f90e:	7b3a      	ldrb	r2, [r7, #12]
 800f910:	4b11      	ldr	r3, [pc, #68]	; (800f958 <SendReJoinReq+0x8c>)
 800f912:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f916:	f7fc fc85 	bl	800c224 <SecureElementGetJoinEui>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2208      	movs	r2, #8
 800f91e:	4619      	mov	r1, r3
 800f920:	480f      	ldr	r0, [pc, #60]	; (800f960 <SendReJoinReq+0x94>)
 800f922:	f006 fd9e 	bl	8016462 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f926:	f7fc fc5b 	bl	800c1e0 <SecureElementGetDevEui>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2208      	movs	r2, #8
 800f92e:	4619      	mov	r1, r3
 800f930:	480c      	ldr	r0, [pc, #48]	; (800f964 <SendReJoinReq+0x98>)
 800f932:	f006 fd96 	bl	8016462 <memcpy1>

            allowDelayedTx = false;
 800f936:	2300      	movs	r3, #0
 800f938:	73fb      	strb	r3, [r7, #15]

            break;
 800f93a:	e002      	b.n	800f942 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f93c:	2302      	movs	r3, #2
 800f93e:	73bb      	strb	r3, [r7, #14]
            break;
 800f940:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f942:	7bfb      	ldrb	r3, [r7, #15]
 800f944:	4618      	mov	r0, r3
 800f946:	f000 f8ff 	bl	800fb48 <ScheduleTx>
 800f94a:	4603      	mov	r3, r0
 800f94c:	73bb      	strb	r3, [r7, #14]
    return status;
 800f94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20000454 	.word	0x20000454
 800f95c:	20000456 	.word	0x20000456
 800f960:	20000562 	.word	0x20000562
 800f964:	2000056a 	.word	0x2000056a

0800f968 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f96c:	f002 fb49 	bl	8012002 <LoRaMacClassBIsBeaconExpected>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f976:	230e      	movs	r3, #14
 800f978:	e013      	b.n	800f9a2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f97a:	4b0b      	ldr	r3, [pc, #44]	; (800f9a8 <CheckForClassBCollision+0x40>)
 800f97c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f980:	2b01      	cmp	r3, #1
 800f982:	d10d      	bne.n	800f9a0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f984:	f002 fb44 	bl	8012010 <LoRaMacClassBIsPingExpected>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f98e:	230f      	movs	r3, #15
 800f990:	e007      	b.n	800f9a2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f992:	f002 fb44 	bl	801201e <LoRaMacClassBIsMulticastExpected>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d001      	beq.n	800f9a0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f99c:	230f      	movs	r3, #15
 800f99e:	e000      	b.n	800f9a2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	2000095c 	.word	0x2000095c

0800f9ac <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9b2:	4b2d      	ldr	r3, [pc, #180]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9b4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f9b8:	4b2b      	ldr	r3, [pc, #172]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f9be:	4b2a      	ldr	r3, [pc, #168]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9c0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f9c4:	4b28      	ldr	r3, [pc, #160]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9c6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f9ca:	4b27      	ldr	r3, [pc, #156]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f9d0:	b25b      	sxtb	r3, r3
 800f9d2:	f004 fba3 	bl	801411c <RegionApplyDrOffset>
 800f9d6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9d8:	b259      	sxtb	r1, r3
 800f9da:	4b23      	ldr	r3, [pc, #140]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f9e0:	4b21      	ldr	r3, [pc, #132]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9e4:	4821      	ldr	r0, [pc, #132]	; (800fa6c <ComputeRxWindowParameters+0xc0>)
 800f9e6:	9000      	str	r0, [sp, #0]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f004 faa7 	bl	8013f3c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9ee:	4b1e      	ldr	r3, [pc, #120]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f9f4:	4b1c      	ldr	r3, [pc, #112]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9fa:	b259      	sxtb	r1, r3
 800f9fc:	4b1a      	ldr	r3, [pc, #104]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800f9fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa02:	4b19      	ldr	r3, [pc, #100]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa06:	4c1a      	ldr	r4, [pc, #104]	; (800fa70 <ComputeRxWindowParameters+0xc4>)
 800fa08:	9400      	str	r4, [sp, #0]
 800fa0a:	f004 fa97 	bl	8013f3c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fa0e:	4b16      	ldr	r3, [pc, #88]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa12:	4a18      	ldr	r2, [pc, #96]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa14:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fa18:	4413      	add	r3, r2
 800fa1a:	4a16      	ldr	r2, [pc, #88]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa1c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fa20:	4b11      	ldr	r3, [pc, #68]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa24:	4a13      	ldr	r2, [pc, #76]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa26:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fa2a:	4413      	add	r3, r2
 800fa2c:	4a11      	ldr	r2, [pc, #68]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa2e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa32:	4b0d      	ldr	r3, [pc, #52]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa34:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d111      	bne.n	800fa60 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa40:	4a0c      	ldr	r2, [pc, #48]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa42:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fa46:	4413      	add	r3, r2
 800fa48:	4a0a      	ldr	r2, [pc, #40]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa4a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fa4e:	4b06      	ldr	r3, [pc, #24]	; (800fa68 <ComputeRxWindowParameters+0xbc>)
 800fa50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa52:	4a08      	ldr	r2, [pc, #32]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa54:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fa58:	4413      	add	r3, r2
 800fa5a:	4a06      	ldr	r2, [pc, #24]	; (800fa74 <ComputeRxWindowParameters+0xc8>)
 800fa5c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fa60:	bf00      	nop
 800fa62:	3704      	adds	r7, #4
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd90      	pop	{r4, r7, pc}
 800fa68:	2000095c 	.word	0x2000095c
 800fa6c:	2000080c 	.word	0x2000080c
 800fa70:	20000820 	.word	0x20000820
 800fa74:	20000454 	.word	0x20000454

0800fa78 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa82:	4b13      	ldr	r3, [pc, #76]	; (800fad0 <VerifyTxFrame+0x58>)
 800fa84:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d01b      	beq.n	800fac4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa8c:	1d3b      	adds	r3, r7, #4
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f002 fd20 	bl	80124d4 <LoRaMacCommandsGetSizeSerializedCmds>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa9a:	2313      	movs	r3, #19
 800fa9c:	e013      	b.n	800fac6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fa9e:	4b0d      	ldr	r3, [pc, #52]	; (800fad4 <VerifyTxFrame+0x5c>)
 800faa0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800faa4:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <VerifyTxFrame+0x58>)
 800faa6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	b2d2      	uxtb	r2, r2
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff f956 	bl	800ed60 <ValidatePayloadLength>
 800fab4:	4603      	mov	r3, r0
 800fab6:	f083 0301 	eor.w	r3, r3, #1
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d001      	beq.n	800fac4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fac0:	2308      	movs	r3, #8
 800fac2:	e000      	b.n	800fac6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3708      	adds	r7, #8
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	2000095c 	.word	0x2000095c
 800fad4:	20000454 	.word	0x20000454

0800fad8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fade:	4b18      	ldr	r3, [pc, #96]	; (800fb40 <SerializeTxFrame+0x68>)
 800fae0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <SerializeTxFrame+0x16>
 800fae8:	2b04      	cmp	r3, #4
 800faea:	d011      	beq.n	800fb10 <SerializeTxFrame+0x38>
 800faec:	e021      	b.n	800fb32 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800faee:	4815      	ldr	r0, [pc, #84]	; (800fb44 <SerializeTxFrame+0x6c>)
 800faf0:	f004 f823 	bl	8013b3a <LoRaMacSerializerJoinRequest>
 800faf4:	4603      	mov	r3, r0
 800faf6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800faf8:	79fb      	ldrb	r3, [r7, #7]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d001      	beq.n	800fb02 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fafe:	2311      	movs	r3, #17
 800fb00:	e01a      	b.n	800fb38 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fb02:	4b0f      	ldr	r3, [pc, #60]	; (800fb40 <SerializeTxFrame+0x68>)
 800fb04:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	4b0d      	ldr	r3, [pc, #52]	; (800fb40 <SerializeTxFrame+0x68>)
 800fb0c:	801a      	strh	r2, [r3, #0]
            break;
 800fb0e:	e012      	b.n	800fb36 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fb10:	480c      	ldr	r0, [pc, #48]	; (800fb44 <SerializeTxFrame+0x6c>)
 800fb12:	f004 f894 	bl	8013c3e <LoRaMacSerializerData>
 800fb16:	4603      	mov	r3, r0
 800fb18:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fb1a:	79fb      	ldrb	r3, [r7, #7]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb20:	2311      	movs	r3, #17
 800fb22:	e009      	b.n	800fb38 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fb24:	4b06      	ldr	r3, [pc, #24]	; (800fb40 <SerializeTxFrame+0x68>)
 800fb26:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	4b04      	ldr	r3, [pc, #16]	; (800fb40 <SerializeTxFrame+0x68>)
 800fb2e:	801a      	strh	r2, [r3, #0]
            break;
 800fb30:	e001      	b.n	800fb36 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fb32:	2303      	movs	r3, #3
 800fb34:	e000      	b.n	800fb38 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	20000454 	.word	0x20000454
 800fb44:	2000055c 	.word	0x2000055c

0800fb48 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b090      	sub	sp, #64	; 0x40
 800fb4c:	af02      	add	r7, sp, #8
 800fb4e:	4603      	mov	r3, r0
 800fb50:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb52:	2303      	movs	r3, #3
 800fb54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fb58:	f7ff ff06 	bl	800f968 <CheckForClassBCollision>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d002      	beq.n	800fb70 <ScheduleTx+0x28>
    {
        return status;
 800fb6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb6e:	e08f      	b.n	800fc90 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fb70:	f000 f8fa 	bl	800fd68 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fb74:	f7ff ffb0 	bl	800fad8 <SerializeTxFrame>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <ScheduleTx+0x44>
    {
        return status;
 800fb86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb8a:	e081      	b.n	800fc90 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fb8c:	4b42      	ldr	r3, [pc, #264]	; (800fc98 <ScheduleTx+0x150>)
 800fb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb90:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb92:	4b41      	ldr	r3, [pc, #260]	; (800fc98 <ScheduleTx+0x150>)
 800fb94:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fb98:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fb9a:	4b3f      	ldr	r3, [pc, #252]	; (800fc98 <ScheduleTx+0x150>)
 800fb9c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fba0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fba6:	4618      	mov	r0, r3
 800fba8:	f009 ff40 	bl	8019a2c <SysTimeGetMcuTime>
 800fbac:	4638      	mov	r0, r7
 800fbae:	4b3a      	ldr	r3, [pc, #232]	; (800fc98 <ScheduleTx+0x150>)
 800fbb0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fbb4:	9200      	str	r2, [sp, #0]
 800fbb6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fbba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fbbe:	ca06      	ldmia	r2, {r1, r2}
 800fbc0:	f009 fe95 	bl	80198ee <SysTimeSub>
 800fbc4:	f107 0320 	add.w	r3, r7, #32
 800fbc8:	463a      	mov	r2, r7
 800fbca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbce:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fbd2:	4b31      	ldr	r3, [pc, #196]	; (800fc98 <ScheduleTx+0x150>)
 800fbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fbe2:	4b2e      	ldr	r3, [pc, #184]	; (800fc9c <ScheduleTx+0x154>)
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbe8:	4b2b      	ldr	r3, [pc, #172]	; (800fc98 <ScheduleTx+0x150>)
 800fbea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d104      	bne.n	800fbfc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fbfc:	4b26      	ldr	r3, [pc, #152]	; (800fc98 <ScheduleTx+0x150>)
 800fbfe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc02:	f107 0114 	add.w	r1, r7, #20
 800fc06:	4b26      	ldr	r3, [pc, #152]	; (800fca0 <ScheduleTx+0x158>)
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	4b26      	ldr	r3, [pc, #152]	; (800fca4 <ScheduleTx+0x15c>)
 800fc0c:	4a26      	ldr	r2, [pc, #152]	; (800fca8 <ScheduleTx+0x160>)
 800fc0e:	f004 fa5b 	bl	80140c8 <RegionNextChannel>
 800fc12:	4603      	mov	r3, r0
 800fc14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fc18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d022      	beq.n	800fc66 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fc20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc24:	2b0b      	cmp	r3, #11
 800fc26:	d11b      	bne.n	800fc60 <ScheduleTx+0x118>
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d018      	beq.n	800fc60 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fc2e:	4b1b      	ldr	r3, [pc, #108]	; (800fc9c <ScheduleTx+0x154>)
 800fc30:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d011      	beq.n	800fc5c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fc38:	4b18      	ldr	r3, [pc, #96]	; (800fc9c <ScheduleTx+0x154>)
 800fc3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc3e:	f043 0320 	orr.w	r3, r3, #32
 800fc42:	4a16      	ldr	r2, [pc, #88]	; (800fc9c <ScheduleTx+0x154>)
 800fc44:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fc48:	4b14      	ldr	r3, [pc, #80]	; (800fc9c <ScheduleTx+0x154>)
 800fc4a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc4e:	4619      	mov	r1, r3
 800fc50:	4816      	ldr	r0, [pc, #88]	; (800fcac <ScheduleTx+0x164>)
 800fc52:	f00a fb87 	bl	801a364 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fc56:	4815      	ldr	r0, [pc, #84]	; (800fcac <ScheduleTx+0x164>)
 800fc58:	f00a faa6 	bl	801a1a8 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	e017      	b.n	800fc90 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fc60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc64:	e014      	b.n	800fc90 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fc66:	f7ff fea1 	bl	800f9ac <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fc6a:	f7ff ff05 	bl	800fa78 <VerifyTxFrame>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fc74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <ScheduleTx+0x13a>
    {
        return status;
 800fc7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc80:	e006      	b.n	800fc90 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fc82:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <ScheduleTx+0x154>)
 800fc84:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 fb1d 	bl	80102c8 <SendFrameOnChannel>
 800fc8e:	4603      	mov	r3, r0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3738      	adds	r7, #56	; 0x38
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	2000095c 	.word	0x2000095c
 800fc9c:	20000454 	.word	0x20000454
 800fca0:	2000098c 	.word	0x2000098c
 800fca4:	200008d8 	.word	0x200008d8
 800fca8:	20000869 	.word	0x20000869
 800fcac:	200007bc 	.word	0x200007bc

0800fcb0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	460a      	mov	r2, r1
 800fcba:	71fb      	strb	r3, [r7, #7]
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fcc0:	2313      	movs	r3, #19
 800fcc2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fcc8:	4b25      	ldr	r3, [pc, #148]	; (800fd60 <SecureFrame+0xb0>)
 800fcca:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <SecureFrame+0x28>
 800fcd2:	2b04      	cmp	r3, #4
 800fcd4:	d011      	beq.n	800fcfa <SecureFrame+0x4a>
 800fcd6:	e03b      	b.n	800fd50 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fcd8:	4822      	ldr	r0, [pc, #136]	; (800fd64 <SecureFrame+0xb4>)
 800fcda:	f003 faf7 	bl	80132cc <LoRaMacCryptoPrepareJoinRequest>
 800fcde:	4603      	mov	r3, r0
 800fce0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fce8:	2311      	movs	r3, #17
 800fcea:	e034      	b.n	800fd56 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fcec:	4b1c      	ldr	r3, [pc, #112]	; (800fd60 <SecureFrame+0xb0>)
 800fcee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	4b1a      	ldr	r3, [pc, #104]	; (800fd60 <SecureFrame+0xb0>)
 800fcf6:	801a      	strh	r2, [r3, #0]
            break;
 800fcf8:	e02c      	b.n	800fd54 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fcfa:	f107 0308 	add.w	r3, r7, #8
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f003 fa0a 	bl	8013118 <LoRaMacCryptoGetFCntUp>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fd0a:	2312      	movs	r3, #18
 800fd0c:	e023      	b.n	800fd56 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fd0e:	4b14      	ldr	r3, [pc, #80]	; (800fd60 <SecureFrame+0xb0>)
 800fd10:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d104      	bne.n	800fd22 <SecureFrame+0x72>
 800fd18:	4b11      	ldr	r3, [pc, #68]	; (800fd60 <SecureFrame+0xb0>)
 800fd1a:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d902      	bls.n	800fd28 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fd28:	68b8      	ldr	r0, [r7, #8]
 800fd2a:	79ba      	ldrb	r2, [r7, #6]
 800fd2c:	79f9      	ldrb	r1, [r7, #7]
 800fd2e:	4b0d      	ldr	r3, [pc, #52]	; (800fd64 <SecureFrame+0xb4>)
 800fd30:	f003 fbe4 	bl	80134fc <LoRaMacCryptoSecureMessage>
 800fd34:	4603      	mov	r3, r0
 800fd36:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fd38:	7bfb      	ldrb	r3, [r7, #15]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd3e:	2311      	movs	r3, #17
 800fd40:	e009      	b.n	800fd56 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd42:	4b07      	ldr	r3, [pc, #28]	; (800fd60 <SecureFrame+0xb0>)
 800fd44:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <SecureFrame+0xb0>)
 800fd4c:	801a      	strh	r2, [r3, #0]
            break;
 800fd4e:	e001      	b.n	800fd54 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd50:	2303      	movs	r3, #3
 800fd52:	e000      	b.n	800fd56 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3710      	adds	r7, #16
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20000454 	.word	0x20000454
 800fd64:	2000055c 	.word	0x2000055c

0800fd68 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fd68:	b480      	push	{r7}
 800fd6a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fd6c:	4b09      	ldr	r3, [pc, #36]	; (800fd94 <CalculateBackOff+0x2c>)
 800fd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d10a      	bne.n	800fd8a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fd74:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <CalculateBackOff+0x2c>)
 800fd76:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	4a06      	ldr	r2, [pc, #24]	; (800fd98 <CalculateBackOff+0x30>)
 800fd7e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fd82:	fb02 f303 	mul.w	r3, r2, r3
 800fd86:	4a03      	ldr	r2, [pc, #12]	; (800fd94 <CalculateBackOff+0x2c>)
 800fd88:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fd8a:	bf00      	nop
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bc80      	pop	{r7}
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop
 800fd94:	2000095c 	.word	0x2000095c
 800fd98:	20000454 	.word	0x20000454

0800fd9c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	7139      	strb	r1, [r7, #4]
 800fda6:	71fb      	strb	r3, [r7, #7]
 800fda8:	4613      	mov	r3, r2
 800fdaa:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fdac:	79fb      	ldrb	r3, [r7, #7]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <RemoveMacCommands+0x1c>
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d10d      	bne.n	800fdd4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fdb8:	79bb      	ldrb	r3, [r7, #6]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d108      	bne.n	800fdd0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fdbe:	793b      	ldrb	r3, [r7, #4]
 800fdc0:	f003 0320 	and.w	r3, r3, #32
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d004      	beq.n	800fdd4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fdca:	f002 fb61 	bl	8012490 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fdce:	e001      	b.n	800fdd4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fdd0:	f002 fb5e 	bl	8012490 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fdd4:	bf00      	nop
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fddc:	b5b0      	push	{r4, r5, r7, lr}
 800fdde:	b08e      	sub	sp, #56	; 0x38
 800fde0:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fde2:	4b68      	ldr	r3, [pc, #416]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fdea:	4b66      	ldr	r3, [pc, #408]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fdf0:	4b65      	ldr	r3, [pc, #404]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fdf8:	4b63      	ldr	r3, [pc, #396]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fe00:	4b61      	ldr	r3, [pc, #388]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fe08:	4b5f      	ldr	r3, [pc, #380]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fe10:	4b5c      	ldr	r3, [pc, #368]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fe18:	4b5a      	ldr	r3, [pc, #360]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fe20:	4b58      	ldr	r3, [pc, #352]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe22:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fe26:	4b57      	ldr	r3, [pc, #348]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fe2c:	4b55      	ldr	r3, [pc, #340]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe2e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fe32:	4b54      	ldr	r3, [pc, #336]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fe38:	4b52      	ldr	r3, [pc, #328]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe3a:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fe3e:	4b51      	ldr	r3, [pc, #324]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fe44:	4b4f      	ldr	r3, [pc, #316]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe46:	4a4f      	ldr	r2, [pc, #316]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe48:	3364      	adds	r3, #100	; 0x64
 800fe4a:	32a4      	adds	r2, #164	; 0xa4
 800fe4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe50:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fe54:	4b4b      	ldr	r3, [pc, #300]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe56:	4a4b      	ldr	r2, [pc, #300]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe58:	336c      	adds	r3, #108	; 0x6c
 800fe5a:	32ac      	adds	r2, #172	; 0xac
 800fe5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe60:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fe64:	4b47      	ldr	r3, [pc, #284]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe66:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fe6a:	4b46      	ldr	r3, [pc, #280]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fe70:	4b44      	ldr	r3, [pc, #272]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe72:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fe76:	4b43      	ldr	r3, [pc, #268]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe78:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fe7c:	4b41      	ldr	r3, [pc, #260]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fe82:	4a40      	ldr	r2, [pc, #256]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe84:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fe86:	4b3f      	ldr	r3, [pc, #252]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fe8c:	4a3d      	ldr	r2, [pc, #244]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe8e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800fe90:	4b3d      	ldr	r3, [pc, #244]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800fe98:	4b3a      	ldr	r3, [pc, #232]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fea0:	2301      	movs	r3, #1
 800fea2:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fea4:	4b39      	ldr	r3, [pc, #228]	; (800ff8c <ResetMacParameters+0x1b0>)
 800fea6:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fea8:	4b39      	ldr	r3, [pc, #228]	; (800ff90 <ResetMacParameters+0x1b4>)
 800feaa:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800feac:	4b35      	ldr	r3, [pc, #212]	; (800ff84 <ResetMacParameters+0x1a8>)
 800feae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feb2:	1d3a      	adds	r2, r7, #4
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f003 fff2 	bl	8013ea0 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800febc:	4b32      	ldr	r3, [pc, #200]	; (800ff88 <ResetMacParameters+0x1ac>)
 800febe:	2200      	movs	r2, #0
 800fec0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fec4:	4b30      	ldr	r3, [pc, #192]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fec6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800feca:	4b2f      	ldr	r3, [pc, #188]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fecc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fed0:	4b2c      	ldr	r3, [pc, #176]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fed4:	4a2c      	ldr	r2, [pc, #176]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fed6:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800feda:	4b2a      	ldr	r3, [pc, #168]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fedc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fee0:	4b29      	ldr	r3, [pc, #164]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fee2:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fee6:	4b27      	ldr	r3, [pc, #156]	; (800ff84 <ResetMacParameters+0x1a8>)
 800fee8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800feec:	4b26      	ldr	r3, [pc, #152]	; (800ff88 <ResetMacParameters+0x1ac>)
 800feee:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fef2:	4b25      	ldr	r3, [pc, #148]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fefa:	4b23      	ldr	r3, [pc, #140]	; (800ff88 <ResetMacParameters+0x1ac>)
 800fefc:	2201      	movs	r2, #1
 800fefe:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ff02:	4a21      	ldr	r2, [pc, #132]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff04:	4b20      	ldr	r3, [pc, #128]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff06:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ff0a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ff0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff12:	682b      	ldr	r3, [r5, #0]
 800ff14:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ff16:	4b1c      	ldr	r3, [pc, #112]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff1e:	4b1a      	ldr	r3, [pc, #104]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff20:	2202      	movs	r2, #2
 800ff22:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800ff2e:	4b16      	ldr	r3, [pc, #88]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff30:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800ff42:	4b11      	ldr	r3, [pc, #68]	; (800ff88 <ResetMacParameters+0x1ac>)
 800ff44:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ff4c:	4b11      	ldr	r3, [pc, #68]	; (800ff94 <ResetMacParameters+0x1b8>)
 800ff4e:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ff50:	4b11      	ldr	r3, [pc, #68]	; (800ff98 <ResetMacParameters+0x1bc>)
 800ff52:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ff54:	4b11      	ldr	r3, [pc, #68]	; (800ff9c <ResetMacParameters+0x1c0>)
 800ff56:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800ff58:	4b11      	ldr	r3, [pc, #68]	; (800ffa0 <ResetMacParameters+0x1c4>)
 800ff5a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800ff5c:	4b11      	ldr	r3, [pc, #68]	; (800ffa4 <ResetMacParameters+0x1c8>)
 800ff5e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800ff60:	4b11      	ldr	r3, [pc, #68]	; (800ffa8 <ResetMacParameters+0x1cc>)
 800ff62:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800ff64:	4b11      	ldr	r3, [pc, #68]	; (800ffac <ResetMacParameters+0x1d0>)
 800ff66:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <ResetMacParameters+0x1d4>)
 800ff6a:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ff6c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ff70:	f107 0310 	add.w	r3, r7, #16
 800ff74:	4a0f      	ldr	r2, [pc, #60]	; (800ffb4 <ResetMacParameters+0x1d8>)
 800ff76:	4618      	mov	r0, r3
 800ff78:	f001 ffec 	bl	8011f54 <LoRaMacClassBInit>
}
 800ff7c:	bf00      	nop
 800ff7e:	3738      	adds	r7, #56	; 0x38
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bdb0      	pop	{r4, r5, r7, pc}
 800ff84:	2000095c 	.word	0x2000095c
 800ff88:	20000454 	.word	0x20000454
 800ff8c:	20000b34 	.word	0x20000b34
 800ff90:	20000bc8 	.word	0x20000bc8
 800ff94:	200008b4 	.word	0x200008b4
 800ff98:	20000870 	.word	0x20000870
 800ff9c:	200008a0 	.word	0x200008a0
 800ffa0:	200008d5 	.word	0x200008d5
 800ffa4:	20000a28 	.word	0x20000a28
 800ffa8:	2000099c 	.word	0x2000099c
 800ffac:	200009a0 	.word	0x200009a0
 800ffb0:	20000a2c 	.word	0x20000a2c
 800ffb4:	20000c90 	.word	0x20000c90

0800ffb8 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b082      	sub	sp, #8
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f00a f95e 	bl	801a284 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ffc8:	4b0e      	ldr	r3, [pc, #56]	; (8010004 <RxWindowSetup+0x4c>)
 800ffca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffcc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ffce:	4b0e      	ldr	r3, [pc, #56]	; (8010008 <RxWindowSetup+0x50>)
 800ffd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffd4:	4a0d      	ldr	r2, [pc, #52]	; (801000c <RxWindowSetup+0x54>)
 800ffd6:	6839      	ldr	r1, [r7, #0]
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f003 ffc9 	bl	8013f70 <RegionRxConfig>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d00a      	beq.n	800fffa <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ffe4:	4b07      	ldr	r3, [pc, #28]	; (8010004 <RxWindowSetup+0x4c>)
 800ffe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffe8:	4a07      	ldr	r2, [pc, #28]	; (8010008 <RxWindowSetup+0x50>)
 800ffea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ffec:	4610      	mov	r0, r2
 800ffee:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	7cda      	ldrb	r2, [r3, #19]
 800fff4:	4b06      	ldr	r3, [pc, #24]	; (8010010 <RxWindowSetup+0x58>)
 800fff6:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 800fffa:	bf00      	nop
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	0801ba54 	.word	0x0801ba54
 8010008:	2000095c 	.word	0x2000095c
 801000c:	20000874 	.word	0x20000874
 8010010:	20000454 	.word	0x20000454

08010014 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b083      	sub	sp, #12
 8010018:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801001a:	4b18      	ldr	r3, [pc, #96]	; (801007c <OpenContinuousRxCWindow+0x68>)
 801001c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010020:	4b16      	ldr	r3, [pc, #88]	; (801007c <OpenContinuousRxCWindow+0x68>)
 8010022:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010026:	b259      	sxtb	r1, r3
 8010028:	4b14      	ldr	r3, [pc, #80]	; (801007c <OpenContinuousRxCWindow+0x68>)
 801002a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801002e:	4b13      	ldr	r3, [pc, #76]	; (801007c <OpenContinuousRxCWindow+0x68>)
 8010030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010032:	4c13      	ldr	r4, [pc, #76]	; (8010080 <OpenContinuousRxCWindow+0x6c>)
 8010034:	9400      	str	r4, [sp, #0]
 8010036:	f003 ff81 	bl	8013f3c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801003a:	4b12      	ldr	r3, [pc, #72]	; (8010084 <OpenContinuousRxCWindow+0x70>)
 801003c:	2202      	movs	r2, #2
 801003e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010042:	4b10      	ldr	r3, [pc, #64]	; (8010084 <OpenContinuousRxCWindow+0x70>)
 8010044:	2201      	movs	r2, #1
 8010046:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801004a:	4b0c      	ldr	r3, [pc, #48]	; (801007c <OpenContinuousRxCWindow+0x68>)
 801004c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010050:	4a0d      	ldr	r2, [pc, #52]	; (8010088 <OpenContinuousRxCWindow+0x74>)
 8010052:	490b      	ldr	r1, [pc, #44]	; (8010080 <OpenContinuousRxCWindow+0x6c>)
 8010054:	4618      	mov	r0, r3
 8010056:	f003 ff8b 	bl	8013f70 <RegionRxConfig>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d009      	beq.n	8010074 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 8010060:	4b0a      	ldr	r3, [pc, #40]	; (801008c <OpenContinuousRxCWindow+0x78>)
 8010062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010064:	2000      	movs	r0, #0
 8010066:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010068:	4b06      	ldr	r3, [pc, #24]	; (8010084 <OpenContinuousRxCWindow+0x70>)
 801006a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801006e:	4b05      	ldr	r3, [pc, #20]	; (8010084 <OpenContinuousRxCWindow+0x70>)
 8010070:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010074:	bf00      	nop
 8010076:	3704      	adds	r7, #4
 8010078:	46bd      	mov	sp, r7
 801007a:	bd90      	pop	{r4, r7, pc}
 801007c:	2000095c 	.word	0x2000095c
 8010080:	20000834 	.word	0x20000834
 8010084:	20000454 	.word	0x20000454
 8010088:	20000874 	.word	0x20000874
 801008c:	0801ba54 	.word	0x0801ba54

08010090 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b088      	sub	sp, #32
 8010094:	af00      	add	r7, sp, #0
 8010096:	60f8      	str	r0, [r7, #12]
 8010098:	60b9      	str	r1, [r7, #8]
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	4613      	mov	r3, r2
 801009e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80100a0:	4b82      	ldr	r3, [pc, #520]	; (80102ac <PrepareFrame+0x21c>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80100a6:	4b81      	ldr	r3, [pc, #516]	; (80102ac <PrepareFrame+0x21c>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80100c0:	2300      	movs	r3, #0
 80100c2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80100c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100c6:	461a      	mov	r2, r3
 80100c8:	6839      	ldr	r1, [r7, #0]
 80100ca:	4879      	ldr	r0, [pc, #484]	; (80102b0 <PrepareFrame+0x220>)
 80100cc:	f006 f9c9 	bl	8016462 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80100d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	4b75      	ldr	r3, [pc, #468]	; (80102ac <PrepareFrame+0x21c>)
 80100d6:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	781a      	ldrb	r2, [r3, #0]
 80100de:	4b73      	ldr	r3, [pc, #460]	; (80102ac <PrepareFrame+0x21c>)
 80100e0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	2b07      	cmp	r3, #7
 80100ee:	f000 80b9 	beq.w	8010264 <PrepareFrame+0x1d4>
 80100f2:	2b07      	cmp	r3, #7
 80100f4:	f300 80d0 	bgt.w	8010298 <PrepareFrame+0x208>
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d006      	beq.n	801010a <PrepareFrame+0x7a>
 80100fc:	2b04      	cmp	r3, #4
 80100fe:	f040 80cb 	bne.w	8010298 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010102:	4b6a      	ldr	r3, [pc, #424]	; (80102ac <PrepareFrame+0x21c>)
 8010104:	2201      	movs	r2, #1
 8010106:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801010a:	4b68      	ldr	r3, [pc, #416]	; (80102ac <PrepareFrame+0x21c>)
 801010c:	2204      	movs	r2, #4
 801010e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010112:	4b66      	ldr	r3, [pc, #408]	; (80102ac <PrepareFrame+0x21c>)
 8010114:	4a67      	ldr	r2, [pc, #412]	; (80102b4 <PrepareFrame+0x224>)
 8010116:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801011a:	4b64      	ldr	r3, [pc, #400]	; (80102ac <PrepareFrame+0x21c>)
 801011c:	22ff      	movs	r2, #255	; 0xff
 801011e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	781a      	ldrb	r2, [r3, #0]
 8010126:	4b61      	ldr	r3, [pc, #388]	; (80102ac <PrepareFrame+0x21c>)
 8010128:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801012c:	4a5f      	ldr	r2, [pc, #380]	; (80102ac <PrepareFrame+0x21c>)
 801012e:	79fb      	ldrb	r3, [r7, #7]
 8010130:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010134:	4b60      	ldr	r3, [pc, #384]	; (80102b8 <PrepareFrame+0x228>)
 8010136:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801013a:	4a5c      	ldr	r2, [pc, #368]	; (80102ac <PrepareFrame+0x21c>)
 801013c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	781a      	ldrb	r2, [r3, #0]
 8010144:	4b59      	ldr	r3, [pc, #356]	; (80102ac <PrepareFrame+0x21c>)
 8010146:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801014a:	4b58      	ldr	r3, [pc, #352]	; (80102ac <PrepareFrame+0x21c>)
 801014c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010150:	4b56      	ldr	r3, [pc, #344]	; (80102ac <PrepareFrame+0x21c>)
 8010152:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010156:	4b55      	ldr	r3, [pc, #340]	; (80102ac <PrepareFrame+0x21c>)
 8010158:	4a55      	ldr	r2, [pc, #340]	; (80102b0 <PrepareFrame+0x220>)
 801015a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801015e:	f107 0318 	add.w	r3, r7, #24
 8010162:	4618      	mov	r0, r3
 8010164:	f002 ffd8 	bl	8013118 <LoRaMacCryptoGetFCntUp>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d001      	beq.n	8010172 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801016e:	2312      	movs	r3, #18
 8010170:	e098      	b.n	80102a4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	b29a      	uxth	r2, r3
 8010176:	4b4d      	ldr	r3, [pc, #308]	; (80102ac <PrepareFrame+0x21c>)
 8010178:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801017c:	4b4b      	ldr	r3, [pc, #300]	; (80102ac <PrepareFrame+0x21c>)
 801017e:	2200      	movs	r2, #0
 8010180:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8010184:	4b49      	ldr	r3, [pc, #292]	; (80102ac <PrepareFrame+0x21c>)
 8010186:	2200      	movs	r2, #0
 8010188:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	4a47      	ldr	r2, [pc, #284]	; (80102ac <PrepareFrame+0x21c>)
 8010190:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010194:	f107 0314 	add.w	r3, r7, #20
 8010198:	4618      	mov	r0, r3
 801019a:	f002 f99b 	bl	80124d4 <LoRaMacCommandsGetSizeSerializedCmds>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d001      	beq.n	80101a8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101a4:	2313      	movs	r3, #19
 80101a6:	e07d      	b.n	80102a4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d076      	beq.n	801029c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80101ae:	4b42      	ldr	r3, [pc, #264]	; (80102b8 <PrepareFrame+0x228>)
 80101b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fe fdab 	bl	800ed10 <GetMaxAppPayloadWithoutFOptsLength>
 80101ba:	4603      	mov	r3, r0
 80101bc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80101be:	4b3b      	ldr	r3, [pc, #236]	; (80102ac <PrepareFrame+0x21c>)
 80101c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01d      	beq.n	8010204 <PrepareFrame+0x174>
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2b0f      	cmp	r3, #15
 80101cc:	d81a      	bhi.n	8010204 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80101ce:	f107 0314 	add.w	r3, r7, #20
 80101d2:	4a3a      	ldr	r2, [pc, #232]	; (80102bc <PrepareFrame+0x22c>)
 80101d4:	4619      	mov	r1, r3
 80101d6:	200f      	movs	r0, #15
 80101d8:	f002 f992 	bl	8012500 <LoRaMacCommandsSerializeCmds>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d001      	beq.n	80101e6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101e2:	2313      	movs	r3, #19
 80101e4:	e05e      	b.n	80102a4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	f003 030f 	and.w	r3, r3, #15
 80101ec:	b2d9      	uxtb	r1, r3
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	7813      	ldrb	r3, [r2, #0]
 80101f2:	f361 0303 	bfi	r3, r1, #0, #4
 80101f6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	4b2b      	ldr	r3, [pc, #172]	; (80102ac <PrepareFrame+0x21c>)
 80101fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010202:	e04b      	b.n	801029c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010204:	4b29      	ldr	r3, [pc, #164]	; (80102ac <PrepareFrame+0x21c>)
 8010206:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801020a:	2b00      	cmp	r3, #0
 801020c:	d010      	beq.n	8010230 <PrepareFrame+0x1a0>
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2b0f      	cmp	r3, #15
 8010212:	d90d      	bls.n	8010230 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010214:	7ffb      	ldrb	r3, [r7, #31]
 8010216:	f107 0114 	add.w	r1, r7, #20
 801021a:	4a29      	ldr	r2, [pc, #164]	; (80102c0 <PrepareFrame+0x230>)
 801021c:	4618      	mov	r0, r3
 801021e:	f002 f96f 	bl	8012500 <LoRaMacCommandsSerializeCmds>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010228:	2313      	movs	r3, #19
 801022a:	e03b      	b.n	80102a4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801022c:	230a      	movs	r3, #10
 801022e:	e039      	b.n	80102a4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010230:	7ffb      	ldrb	r3, [r7, #31]
 8010232:	f107 0114 	add.w	r1, r7, #20
 8010236:	4a22      	ldr	r2, [pc, #136]	; (80102c0 <PrepareFrame+0x230>)
 8010238:	4618      	mov	r0, r3
 801023a:	f002 f961 	bl	8012500 <LoRaMacCommandsSerializeCmds>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010244:	2313      	movs	r3, #19
 8010246:	e02d      	b.n	80102a4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010248:	4b18      	ldr	r3, [pc, #96]	; (80102ac <PrepareFrame+0x21c>)
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010250:	4b16      	ldr	r3, [pc, #88]	; (80102ac <PrepareFrame+0x21c>)
 8010252:	4a1b      	ldr	r2, [pc, #108]	; (80102c0 <PrepareFrame+0x230>)
 8010254:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	b2da      	uxtb	r2, r3
 801025c:	4b13      	ldr	r3, [pc, #76]	; (80102ac <PrepareFrame+0x21c>)
 801025e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010262:	e01b      	b.n	801029c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d01a      	beq.n	80102a0 <PrepareFrame+0x210>
 801026a:	4b10      	ldr	r3, [pc, #64]	; (80102ac <PrepareFrame+0x21c>)
 801026c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010270:	2b00      	cmp	r3, #0
 8010272:	d015      	beq.n	80102a0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010274:	4813      	ldr	r0, [pc, #76]	; (80102c4 <PrepareFrame+0x234>)
 8010276:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <PrepareFrame+0x21c>)
 8010278:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801027c:	b29b      	uxth	r3, r3
 801027e:	461a      	mov	r2, r3
 8010280:	6839      	ldr	r1, [r7, #0]
 8010282:	f006 f8ee 	bl	8016462 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010286:	4b09      	ldr	r3, [pc, #36]	; (80102ac <PrepareFrame+0x21c>)
 8010288:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801028c:	b29b      	uxth	r3, r3
 801028e:	3301      	adds	r3, #1
 8010290:	b29a      	uxth	r2, r3
 8010292:	4b06      	ldr	r3, [pc, #24]	; (80102ac <PrepareFrame+0x21c>)
 8010294:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010296:	e003      	b.n	80102a0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010298:	2302      	movs	r3, #2
 801029a:	e003      	b.n	80102a4 <PrepareFrame+0x214>
            break;
 801029c:	bf00      	nop
 801029e:	e000      	b.n	80102a2 <PrepareFrame+0x212>
            break;
 80102a0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80102a2:	2300      	movs	r3, #0
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3720      	adds	r7, #32
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	20000454 	.word	0x20000454
 80102b0:	2000058c 	.word	0x2000058c
 80102b4:	20000456 	.word	0x20000456
 80102b8:	2000095c 	.word	0x2000095c
 80102bc:	2000056c 	.word	0x2000056c
 80102c0:	200008dc 	.word	0x200008dc
 80102c4:	20000457 	.word	0x20000457

080102c8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b08a      	sub	sp, #40	; 0x28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	4603      	mov	r3, r0
 80102d0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80102d2:	2303      	movs	r3, #3
 80102d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80102d8:	2300      	movs	r3, #0
 80102da:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102e0:	4b47      	ldr	r3, [pc, #284]	; (8010400 <SendFrameOnChannel+0x138>)
 80102e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80102e6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102e8:	4b45      	ldr	r3, [pc, #276]	; (8010400 <SendFrameOnChannel+0x138>)
 80102ea:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80102ee:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80102f0:	4b43      	ldr	r3, [pc, #268]	; (8010400 <SendFrameOnChannel+0x138>)
 80102f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102f4:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80102f6:	4b42      	ldr	r3, [pc, #264]	; (8010400 <SendFrameOnChannel+0x138>)
 80102f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102fa:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80102fc:	4b41      	ldr	r3, [pc, #260]	; (8010404 <SendFrameOnChannel+0x13c>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010302:	4b3f      	ldr	r3, [pc, #252]	; (8010400 <SendFrameOnChannel+0x138>)
 8010304:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010308:	f107 020f 	add.w	r2, r7, #15
 801030c:	f107 0110 	add.w	r1, r7, #16
 8010310:	4b3d      	ldr	r3, [pc, #244]	; (8010408 <SendFrameOnChannel+0x140>)
 8010312:	f003 fe42 	bl	8013f9a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010316:	4b3b      	ldr	r3, [pc, #236]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010318:	2201      	movs	r2, #1
 801031a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801031e:	4b38      	ldr	r3, [pc, #224]	; (8010400 <SendFrameOnChannel+0x138>)
 8010320:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010324:	b2da      	uxtb	r2, r3
 8010326:	4b37      	ldr	r3, [pc, #220]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010328:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 801032c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010330:	4b34      	ldr	r3, [pc, #208]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010332:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	4a32      	ldr	r2, [pc, #200]	; (8010404 <SendFrameOnChannel+0x13c>)
 801033a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801033e:	4b31      	ldr	r3, [pc, #196]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010340:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010344:	4a2f      	ldr	r2, [pc, #188]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010346:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801034a:	4b2e      	ldr	r3, [pc, #184]	; (8010404 <SendFrameOnChannel+0x13c>)
 801034c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010350:	4a2c      	ldr	r2, [pc, #176]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010352:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010356:	f001 fe69 	bl	801202c <LoRaMacClassBIsBeaconModeActive>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00b      	beq.n	8010378 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010362:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010366:	4618      	mov	r0, r3
 8010368:	f001 fecb 	bl	8012102 <LoRaMacClassBIsUplinkCollision>
 801036c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801036e:	6a3b      	ldr	r3, [r7, #32]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010374:	2310      	movs	r3, #16
 8010376:	e03e      	b.n	80103f6 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010378:	4b21      	ldr	r3, [pc, #132]	; (8010400 <SendFrameOnChannel+0x138>)
 801037a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801037e:	2b01      	cmp	r3, #1
 8010380:	d101      	bne.n	8010386 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010382:	f001 fec8 	bl	8012116 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010386:	f001 fe62 	bl	801204e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801038a:	4b1d      	ldr	r3, [pc, #116]	; (8010400 <SendFrameOnChannel+0x138>)
 801038c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010390:	b2db      	uxtb	r3, r3
 8010392:	4a1c      	ldr	r2, [pc, #112]	; (8010404 <SendFrameOnChannel+0x13c>)
 8010394:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f7ff fc88 	bl	800fcb0 <SecureFrame>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80103a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d002      	beq.n	80103b4 <SendFrameOnChannel+0xec>
    {
        return status;
 80103ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103b2:	e020      	b.n	80103f6 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103b4:	4b13      	ldr	r3, [pc, #76]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103ba:	f043 0302 	orr.w	r3, r3, #2
 80103be:	4a11      	ldr	r2, [pc, #68]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80103c4:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103c6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80103ca:	f083 0301 	eor.w	r3, r3, #1
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d007      	beq.n	80103e4 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80103d4:	4b0b      	ldr	r3, [pc, #44]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103d6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80103da:	3301      	adds	r3, #1
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	4b09      	ldr	r3, [pc, #36]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80103e4:	4b09      	ldr	r3, [pc, #36]	; (801040c <SendFrameOnChannel+0x144>)
 80103e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e8:	4a06      	ldr	r2, [pc, #24]	; (8010404 <SendFrameOnChannel+0x13c>)
 80103ea:	8812      	ldrh	r2, [r2, #0]
 80103ec:	b2d2      	uxtb	r2, r2
 80103ee:	4611      	mov	r1, r2
 80103f0:	4807      	ldr	r0, [pc, #28]	; (8010410 <SendFrameOnChannel+0x148>)
 80103f2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80103f4:	2300      	movs	r3, #0
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	3728      	adds	r7, #40	; 0x28
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	2000095c 	.word	0x2000095c
 8010404:	20000454 	.word	0x20000454
 8010408:	2000086c 	.word	0x2000086c
 801040c:	0801ba54 	.word	0x0801ba54
 8010410:	20000456 	.word	0x20000456

08010414 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af00      	add	r7, sp, #0
 801041a:	4603      	mov	r3, r0
 801041c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801041e:	4b15      	ldr	r3, [pc, #84]	; (8010474 <SetTxContinuousWave+0x60>)
 8010420:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010424:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010426:	4b14      	ldr	r3, [pc, #80]	; (8010478 <SetTxContinuousWave+0x64>)
 8010428:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801042c:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801042e:	4b12      	ldr	r3, [pc, #72]	; (8010478 <SetTxContinuousWave+0x64>)
 8010430:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010434:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010436:	4b10      	ldr	r3, [pc, #64]	; (8010478 <SetTxContinuousWave+0x64>)
 8010438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801043a:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801043c:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <SetTxContinuousWave+0x64>)
 801043e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010440:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010442:	88fb      	ldrh	r3, [r7, #6]
 8010444:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8010446:	4b0c      	ldr	r3, [pc, #48]	; (8010478 <SetTxContinuousWave+0x64>)
 8010448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801044c:	f107 0208 	add.w	r2, r7, #8
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f003 fe50 	bl	80140f8 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010458:	4b06      	ldr	r3, [pc, #24]	; (8010474 <SetTxContinuousWave+0x60>)
 801045a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801045e:	f043 0302 	orr.w	r3, r3, #2
 8010462:	4a04      	ldr	r2, [pc, #16]	; (8010474 <SetTxContinuousWave+0x60>)
 8010464:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	20000454 	.word	0x20000454
 8010478:	2000095c 	.word	0x2000095c

0801047c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	4603      	mov	r3, r0
 8010484:	6039      	str	r1, [r7, #0]
 8010486:	80fb      	strh	r3, [r7, #6]
 8010488:	4613      	mov	r3, r2
 801048a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801048c:	4b09      	ldr	r3, [pc, #36]	; (80104b4 <SetTxContinuousWave1+0x38>)
 801048e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010490:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010494:	88fa      	ldrh	r2, [r7, #6]
 8010496:	6838      	ldr	r0, [r7, #0]
 8010498:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801049a:	4b07      	ldr	r3, [pc, #28]	; (80104b8 <SetTxContinuousWave1+0x3c>)
 801049c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104a0:	f043 0302 	orr.w	r3, r3, #2
 80104a4:	4a04      	ldr	r2, [pc, #16]	; (80104b8 <SetTxContinuousWave1+0x3c>)
 80104a6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80104aa:	2300      	movs	r3, #0
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	0801ba54 	.word	0x0801ba54
 80104b8:	20000454 	.word	0x20000454

080104bc <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
    return &Nvm;
 80104c0:	4b02      	ldr	r3, [pc, #8]	; (80104cc <GetNvmData+0x10>)
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bc80      	pop	{r7}
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	2000095c 	.word	0x2000095c

080104d0 <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80104d8:	2300      	movs	r3, #0
 80104da:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d101      	bne.n	80104e6 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104e2:	2303      	movs	r3, #3
 80104e4:	e09a      	b.n	801061c <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80104e6:	4b4f      	ldr	r3, [pc, #316]	; (8010624 <RestoreNvmData+0x154>)
 80104e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d001      	beq.n	80104f4 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 80104f0:	2301      	movs	r3, #1
 80104f2:	e093      	b.n	801061c <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2124      	movs	r1, #36	; 0x24
 80104f8:	4618      	mov	r0, r3
 80104fa:	f006 f807 	bl	801650c <Crc32>
 80104fe:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	429a      	cmp	r2, r3
 8010508:	d105      	bne.n	8010516 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2228      	movs	r2, #40	; 0x28
 801050e:	4619      	mov	r1, r3
 8010510:	4845      	ldr	r0, [pc, #276]	; (8010628 <RestoreNvmData+0x158>)
 8010512:	f005 ffa6 	bl	8016462 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	3328      	adds	r3, #40	; 0x28
 801051a:	2114      	movs	r1, #20
 801051c:	4618      	mov	r0, r3
 801051e:	f005 fff5 	bl	801650c <Crc32>
 8010522:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	429a      	cmp	r2, r3
 801052c:	d106      	bne.n	801053c <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	3328      	adds	r3, #40	; 0x28
 8010532:	2218      	movs	r2, #24
 8010534:	4619      	mov	r1, r3
 8010536:	483d      	ldr	r0, [pc, #244]	; (801062c <RestoreNvmData+0x15c>)
 8010538:	f005 ff93 	bl	8016462 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	3340      	adds	r3, #64	; 0x40
 8010540:	21d4      	movs	r1, #212	; 0xd4
 8010542:	4618      	mov	r0, r3
 8010544:	f005 ffe2 	bl	801650c <Crc32>
 8010548:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	429a      	cmp	r2, r3
 8010554:	d11f      	bne.n	8010596 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	3340      	adds	r3, #64	; 0x40
 801055a:	22d8      	movs	r2, #216	; 0xd8
 801055c:	4619      	mov	r1, r3
 801055e:	4834      	ldr	r0, [pc, #208]	; (8010630 <RestoreNvmData+0x160>)
 8010560:	f005 ff7f 	bl	8016462 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010564:	4b2f      	ldr	r3, [pc, #188]	; (8010624 <RestoreNvmData+0x154>)
 8010566:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801056a:	4b2e      	ldr	r3, [pc, #184]	; (8010624 <RestoreNvmData+0x154>)
 801056c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010570:	4b2d      	ldr	r3, [pc, #180]	; (8010628 <RestoreNvmData+0x158>)
 8010572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010574:	4a2b      	ldr	r2, [pc, #172]	; (8010624 <RestoreNvmData+0x154>)
 8010576:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801057a:	4b2b      	ldr	r3, [pc, #172]	; (8010628 <RestoreNvmData+0x158>)
 801057c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010580:	4b28      	ldr	r3, [pc, #160]	; (8010624 <RestoreNvmData+0x154>)
 8010582:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010586:	4b27      	ldr	r3, [pc, #156]	; (8010624 <RestoreNvmData+0x154>)
 8010588:	2201      	movs	r2, #1
 801058a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801058e:	4b25      	ldr	r3, [pc, #148]	; (8010624 <RestoreNvmData+0x154>)
 8010590:	2202      	movs	r2, #2
 8010592:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801059c:	21bc      	movs	r1, #188	; 0xbc
 801059e:	4618      	mov	r0, r3
 80105a0:	f005 ffb4 	bl	801650c <Crc32>
 80105a4:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80105ac:	68fa      	ldr	r2, [r7, #12]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d107      	bne.n	80105c2 <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80105b8:	22c0      	movs	r2, #192	; 0xc0
 80105ba:	4619      	mov	r1, r3
 80105bc:	481d      	ldr	r0, [pc, #116]	; (8010634 <RestoreNvmData+0x164>)
 80105be:	f005 ff50 	bl	8016462 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80105c8:	2190      	movs	r1, #144	; 0x90
 80105ca:	4618      	mov	r0, r3
 80105cc:	f005 ff9e 	bl	801650c <Crc32>
 80105d0:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80105d8:	68fa      	ldr	r2, [r7, #12]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d107      	bne.n	80105ee <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80105e4:	2294      	movs	r2, #148	; 0x94
 80105e6:	4619      	mov	r1, r3
 80105e8:	4813      	ldr	r0, [pc, #76]	; (8010638 <RestoreNvmData+0x168>)
 80105ea:	f005 ff3a 	bl	8016462 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80105f4:	2114      	movs	r1, #20
 80105f6:	4618      	mov	r0, r3
 80105f8:	f005 ff88 	bl	801650c <Crc32>
 80105fc:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	429a      	cmp	r2, r3
 8010608:	d107      	bne.n	801061a <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010610:	2218      	movs	r2, #24
 8010612:	4619      	mov	r1, r3
 8010614:	4809      	ldr	r0, [pc, #36]	; (801063c <RestoreNvmData+0x16c>)
 8010616:	f005 ff24 	bl	8016462 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20000454 	.word	0x20000454
 8010628:	2000095c 	.word	0x2000095c
 801062c:	20000984 	.word	0x20000984
 8010630:	2000099c 	.word	0x2000099c
 8010634:	20000a74 	.word	0x20000a74
 8010638:	20000b34 	.word	0x20000b34
 801063c:	20000c90 	.word	0x20000c90

08010640 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <DetermineFrameType+0x16>
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d101      	bne.n	801065a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010656:	2303      	movs	r3, #3
 8010658:	e03b      	b.n	80106d2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	7b1b      	ldrb	r3, [r3, #12]
 801065e:	f003 030f 	and.w	r3, r3, #15
 8010662:	b2db      	uxtb	r3, r3
 8010664:	2b00      	cmp	r3, #0
 8010666:	d008      	beq.n	801067a <DetermineFrameType+0x3a>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d003      	beq.n	801067a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	2200      	movs	r2, #0
 8010676:	701a      	strb	r2, [r3, #0]
 8010678:	e02a      	b.n	80106d0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	2201      	movs	r2, #1
 8010688:	701a      	strb	r2, [r3, #0]
 801068a:	e021      	b.n	80106d0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	7b1b      	ldrb	r3, [r3, #12]
 8010690:	f003 030f 	and.w	r3, r3, #15
 8010694:	b2db      	uxtb	r3, r3
 8010696:	2b00      	cmp	r3, #0
 8010698:	d108      	bne.n	80106ac <DetermineFrameType+0x6c>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d103      	bne.n	80106ac <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2202      	movs	r2, #2
 80106a8:	701a      	strb	r2, [r3, #0]
 80106aa:	e011      	b.n	80106d0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	7b1b      	ldrb	r3, [r3, #12]
 80106b0:	f003 030f 	and.w	r3, r3, #15
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d108      	bne.n	80106cc <DetermineFrameType+0x8c>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d003      	beq.n	80106cc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2203      	movs	r2, #3
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	e001      	b.n	80106d0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80106cc:	2317      	movs	r3, #23
 80106ce:	e000      	b.n	80106d2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bc80      	pop	{r7}
 80106da:	4770      	bx	lr

080106dc <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80106dc:	b480      	push	{r7}
 80106de:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80106e0:	4b12      	ldr	r3, [pc, #72]	; (801072c <CheckRetransUnconfirmedUplink+0x50>)
 80106e2:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80106e6:	4b12      	ldr	r3, [pc, #72]	; (8010730 <CheckRetransUnconfirmedUplink+0x54>)
 80106e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d301      	bcc.n	80106f4 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80106f0:	2301      	movs	r3, #1
 80106f2:	e016      	b.n	8010722 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80106f4:	4b0d      	ldr	r3, [pc, #52]	; (801072c <CheckRetransUnconfirmedUplink+0x50>)
 80106f6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80106fa:	f003 0302 	and.w	r3, r3, #2
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00d      	beq.n	8010720 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010704:	4b0a      	ldr	r3, [pc, #40]	; (8010730 <CheckRetransUnconfirmedUplink+0x54>)
 8010706:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801070e:	2301      	movs	r3, #1
 8010710:	e007      	b.n	8010722 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010712:	4b06      	ldr	r3, [pc, #24]	; (801072c <CheckRetransUnconfirmedUplink+0x50>)
 8010714:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 801071c:	2301      	movs	r3, #1
 801071e:	e000      	b.n	8010722 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	46bd      	mov	sp, r7
 8010726:	bc80      	pop	{r7}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20000454 	.word	0x20000454
 8010730:	2000095c 	.word	0x2000095c

08010734 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010734:	b480      	push	{r7}
 8010736:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010738:	4b0e      	ldr	r3, [pc, #56]	; (8010774 <CheckRetransConfirmedUplink+0x40>)
 801073a:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801073e:	4b0d      	ldr	r3, [pc, #52]	; (8010774 <CheckRetransConfirmedUplink+0x40>)
 8010740:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010744:	429a      	cmp	r2, r3
 8010746:	d301      	bcc.n	801074c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010748:	2301      	movs	r3, #1
 801074a:	e00f      	b.n	801076c <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801074c:	4b09      	ldr	r3, [pc, #36]	; (8010774 <CheckRetransConfirmedUplink+0x40>)
 801074e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010752:	f003 0302 	and.w	r3, r3, #2
 8010756:	b2db      	uxtb	r3, r3
 8010758:	2b00      	cmp	r3, #0
 801075a:	d006      	beq.n	801076a <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801075c:	4b05      	ldr	r3, [pc, #20]	; (8010774 <CheckRetransConfirmedUplink+0x40>)
 801075e:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010766:	2301      	movs	r3, #1
 8010768:	e000      	b.n	801076c <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	46bd      	mov	sp, r7
 8010770:	bc80      	pop	{r7}
 8010772:	4770      	bx	lr
 8010774:	20000454 	.word	0x20000454

08010778 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8010778:	b480      	push	{r7}
 801077a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801077c:	4b1a      	ldr	r3, [pc, #104]	; (80107e8 <StopRetransmission+0x70>)
 801077e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2b00      	cmp	r3, #0
 801078a:	d009      	beq.n	80107a0 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801078c:	4b16      	ldr	r3, [pc, #88]	; (80107e8 <StopRetransmission+0x70>)
 801078e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010792:	2b00      	cmp	r3, #0
 8010794:	d00e      	beq.n	80107b4 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <StopRetransmission+0x70>)
 8010798:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801079c:	2b01      	cmp	r3, #1
 801079e:	d009      	beq.n	80107b4 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80107a0:	4b12      	ldr	r3, [pc, #72]	; (80107ec <StopRetransmission+0x74>)
 80107a2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d004      	beq.n	80107b4 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80107aa:	4b10      	ldr	r3, [pc, #64]	; (80107ec <StopRetransmission+0x74>)
 80107ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ae:	3301      	adds	r3, #1
 80107b0:	4a0e      	ldr	r2, [pc, #56]	; (80107ec <StopRetransmission+0x74>)
 80107b2:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80107b4:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <StopRetransmission+0x70>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80107bc:	4b0a      	ldr	r3, [pc, #40]	; (80107e8 <StopRetransmission+0x70>)
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80107c4:	4b08      	ldr	r3, [pc, #32]	; (80107e8 <StopRetransmission+0x70>)
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107cc:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <StopRetransmission+0x70>)
 80107ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107d2:	f023 0302 	bic.w	r3, r3, #2
 80107d6:	4a04      	ldr	r2, [pc, #16]	; (80107e8 <StopRetransmission+0x70>)
 80107d8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80107dc:	2301      	movs	r3, #1
}
 80107de:	4618      	mov	r0, r3
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bc80      	pop	{r7}
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	20000454 	.word	0x20000454
 80107ec:	2000095c 	.word	0x2000095c

080107f0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	4603      	mov	r3, r0
 80107f8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80107fa:	4b0b      	ldr	r3, [pc, #44]	; (8010828 <CallNvmDataChangeCallback+0x38>)
 80107fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00c      	beq.n	801081e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010804:	4b08      	ldr	r3, [pc, #32]	; (8010828 <CallNvmDataChangeCallback+0x38>)
 8010806:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801080a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801080c:	2b00      	cmp	r3, #0
 801080e:	d006      	beq.n	801081e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010810:	4b05      	ldr	r3, [pc, #20]	; (8010828 <CallNvmDataChangeCallback+0x38>)
 8010812:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	88fa      	ldrh	r2, [r7, #6]
 801081a:	4610      	mov	r0, r2
 801081c:	4798      	blx	r3
    }
}
 801081e:	bf00      	nop
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20000454 	.word	0x20000454

0801082c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010832:	4b1b      	ldr	r3, [pc, #108]	; (80108a0 <AckTimeoutRetriesProcess+0x74>)
 8010834:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010838:	4b19      	ldr	r3, [pc, #100]	; (80108a0 <AckTimeoutRetriesProcess+0x74>)
 801083a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801083e:	429a      	cmp	r2, r3
 8010840:	d229      	bcs.n	8010896 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010842:	4b17      	ldr	r3, [pc, #92]	; (80108a0 <AckTimeoutRetriesProcess+0x74>)
 8010844:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010848:	3301      	adds	r3, #1
 801084a:	b2da      	uxtb	r2, r3
 801084c:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <AckTimeoutRetriesProcess+0x74>)
 801084e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010852:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <AckTimeoutRetriesProcess+0x74>)
 8010854:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d019      	beq.n	8010896 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010862:	2322      	movs	r3, #34	; 0x22
 8010864:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010866:	4b0f      	ldr	r3, [pc, #60]	; (80108a4 <AckTimeoutRetriesProcess+0x78>)
 8010868:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801086c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801086e:	4b0d      	ldr	r3, [pc, #52]	; (80108a4 <AckTimeoutRetriesProcess+0x78>)
 8010870:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010874:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010876:	4b0b      	ldr	r3, [pc, #44]	; (80108a4 <AckTimeoutRetriesProcess+0x78>)
 8010878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801087c:	f107 0208 	add.w	r2, r7, #8
 8010880:	4611      	mov	r1, r2
 8010882:	4618      	mov	r0, r3
 8010884:	f003 fae2 	bl	8013e4c <RegionGetPhyParam>
 8010888:	4603      	mov	r3, r0
 801088a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	b25a      	sxtb	r2, r3
 8010890:	4b04      	ldr	r3, [pc, #16]	; (80108a4 <AckTimeoutRetriesProcess+0x78>)
 8010892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20000454 	.word	0x20000454
 80108a4:	2000095c 	.word	0x2000095c

080108a8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80108ae:	4b14      	ldr	r3, [pc, #80]	; (8010900 <AckTimeoutRetriesFinalize+0x58>)
 80108b0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80108b4:	f083 0301 	eor.w	r3, r3, #1
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d015      	beq.n	80108ea <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80108be:	2302      	movs	r3, #2
 80108c0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80108c2:	4b10      	ldr	r3, [pc, #64]	; (8010904 <AckTimeoutRetriesFinalize+0x5c>)
 80108c4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80108c6:	4b10      	ldr	r3, [pc, #64]	; (8010908 <AckTimeoutRetriesFinalize+0x60>)
 80108c8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <AckTimeoutRetriesFinalize+0x64>)
 80108cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108d0:	1d3a      	adds	r2, r7, #4
 80108d2:	4611      	mov	r1, r2
 80108d4:	4618      	mov	r0, r3
 80108d6:	f003 fae3 	bl	8013ea0 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80108da:	4b09      	ldr	r3, [pc, #36]	; (8010900 <AckTimeoutRetriesFinalize+0x58>)
 80108dc:	2200      	movs	r2, #0
 80108de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80108e2:	4b07      	ldr	r3, [pc, #28]	; (8010900 <AckTimeoutRetriesFinalize+0x58>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80108ea:	4b05      	ldr	r3, [pc, #20]	; (8010900 <AckTimeoutRetriesFinalize+0x58>)
 80108ec:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80108f0:	4b03      	ldr	r3, [pc, #12]	; (8010900 <AckTimeoutRetriesFinalize+0x58>)
 80108f2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 80108f6:	bf00      	nop
 80108f8:	3710      	adds	r7, #16
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	20000454 	.word	0x20000454
 8010904:	20000b34 	.word	0x20000b34
 8010908:	20000bc8 	.word	0x20000bc8
 801090c:	2000095c 	.word	0x2000095c

08010910 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8010910:	b480      	push	{r7}
 8010912:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010914:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <IsRequestPending+0x34>)
 8010916:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801091a:	f003 0304 	and.w	r3, r3, #4
 801091e:	b2db      	uxtb	r3, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	d107      	bne.n	8010934 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010924:	4b07      	ldr	r3, [pc, #28]	; (8010944 <IsRequestPending+0x34>)
 8010926:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801092a:	f003 0301 	and.w	r3, r3, #1
 801092e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010930:	2b00      	cmp	r3, #0
 8010932:	d001      	beq.n	8010938 <IsRequestPending+0x28>
    {
        return 1;
 8010934:	2301      	movs	r3, #1
 8010936:	e000      	b.n	801093a <IsRequestPending+0x2a>
    }
    return 0;
 8010938:	2300      	movs	r3, #0
}
 801093a:	4618      	mov	r0, r3
 801093c:	46bd      	mov	sp, r7
 801093e:	bc80      	pop	{r7}
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	20000454 	.word	0x20000454

08010948 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010948:	b590      	push	{r4, r7, lr}
 801094a:	b08f      	sub	sp, #60	; 0x3c
 801094c:	af02      	add	r7, sp, #8
 801094e:	6178      	str	r0, [r7, #20]
 8010950:	6139      	str	r1, [r7, #16]
 8010952:	4613      	mov	r3, r2
 8010954:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <LoRaMacInitialization+0x1a>
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d101      	bne.n	8010966 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010962:	2303      	movs	r3, #3
 8010964:	e275      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00b      	beq.n	8010986 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010972:	2b00      	cmp	r3, #0
 8010974:	d007      	beq.n	8010986 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010986:	2303      	movs	r3, #3
 8010988:	e263      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801098a:	7bfb      	ldrb	r3, [r7, #15]
 801098c:	4618      	mov	r0, r3
 801098e:	f003 fa4d 	bl	8013e2c <RegionIsActive>
 8010992:	4603      	mov	r3, r0
 8010994:	f083 0301 	eor.w	r3, r3, #1
 8010998:	b2db      	uxtb	r3, r3
 801099a:	2b00      	cmp	r3, #0
 801099c:	d001      	beq.n	80109a2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801099e:	2309      	movs	r3, #9
 80109a0:	e257      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80109a2:	6978      	ldr	r0, [r7, #20]
 80109a4:	f001 fef6 	bl	8012794 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80109a8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80109ac:	2100      	movs	r1, #0
 80109ae:	48c7      	ldr	r0, [pc, #796]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109b0:	f005 fd92 	bl	80164d8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80109b4:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80109b8:	2100      	movs	r1, #0
 80109ba:	48c5      	ldr	r0, [pc, #788]	; (8010cd0 <LoRaMacInitialization+0x388>)
 80109bc:	f005 fd8c 	bl	80164d8 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80109c0:	4bc3      	ldr	r3, [pc, #780]	; (8010cd0 <LoRaMacInitialization+0x388>)
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80109c8:	4bc1      	ldr	r3, [pc, #772]	; (8010cd0 <LoRaMacInitialization+0x388>)
 80109ca:	2201      	movs	r2, #1
 80109cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 80109d0:	4abe      	ldr	r2, [pc, #760]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109d2:	7bfb      	ldrb	r3, [r7, #15]
 80109d4:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80109d8:	4bbc      	ldr	r3, [pc, #752]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109da:	2200      	movs	r2, #0
 80109dc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80109e0:	4bba      	ldr	r3, [pc, #744]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80109e8:	4bb8      	ldr	r3, [pc, #736]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109ea:	4aba      	ldr	r2, [pc, #744]	; (8010cd4 <LoRaMacInitialization+0x38c>)
 80109ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80109f0:	230f      	movs	r3, #15
 80109f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109f6:	4bb5      	ldr	r3, [pc, #724]	; (8010ccc <LoRaMacInitialization+0x384>)
 80109f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a00:	4611      	mov	r1, r2
 8010a02:	4618      	mov	r0, r3
 8010a04:	f003 fa22 	bl	8013e4c <RegionGetPhyParam>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bf14      	ite	ne
 8010a12:	2301      	movne	r3, #1
 8010a14:	2300      	moveq	r3, #0
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	4bac      	ldr	r3, [pc, #688]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a1a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010a1e:	230a      	movs	r3, #10
 8010a20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a24:	4ba9      	ldr	r3, [pc, #676]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a2e:	4611      	mov	r1, r2
 8010a30:	4618      	mov	r0, r3
 8010a32:	f003 fa0b 	bl	8013e4c <RegionGetPhyParam>
 8010a36:	4603      	mov	r3, r0
 8010a38:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	b25a      	sxtb	r2, r3
 8010a3e:	4ba3      	ldr	r3, [pc, #652]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a40:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010a44:	2306      	movs	r3, #6
 8010a46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a4a:	4ba0      	ldr	r3, [pc, #640]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a54:	4611      	mov	r1, r2
 8010a56:	4618      	mov	r0, r3
 8010a58:	f003 f9f8 	bl	8013e4c <RegionGetPhyParam>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a62:	b25a      	sxtb	r2, r3
 8010a64:	4b99      	ldr	r3, [pc, #612]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a66:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010a6a:	2310      	movs	r3, #16
 8010a6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a70:	4b96      	ldr	r3, [pc, #600]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f003 f9e5 	bl	8013e4c <RegionGetPhyParam>
 8010a82:	4603      	mov	r3, r0
 8010a84:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	4a90      	ldr	r2, [pc, #576]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010a8e:	2311      	movs	r3, #17
 8010a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a94:	4b8d      	ldr	r3, [pc, #564]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f003 f9d3 	bl	8013e4c <RegionGetPhyParam>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	4a87      	ldr	r2, [pc, #540]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010ab2:	2312      	movs	r3, #18
 8010ab4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab8:	4b84      	ldr	r3, [pc, #528]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ac2:	4611      	mov	r1, r2
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f003 f9c1 	bl	8013e4c <RegionGetPhyParam>
 8010aca:	4603      	mov	r3, r0
 8010acc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	4a7e      	ldr	r2, [pc, #504]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010ad6:	2313      	movs	r3, #19
 8010ad8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010adc:	4b7b      	ldr	r3, [pc, #492]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ae6:	4611      	mov	r1, r2
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f003 f9af 	bl	8013e4c <RegionGetPhyParam>
 8010aee:	4603      	mov	r3, r0
 8010af0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af4:	4a75      	ldr	r2, [pc, #468]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010af6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010afa:	2314      	movs	r3, #20
 8010afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b00:	4b72      	ldr	r3, [pc, #456]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f003 f99d 	bl	8013e4c <RegionGetPhyParam>
 8010b12:	4603      	mov	r3, r0
 8010b14:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	4a6c      	ldr	r2, [pc, #432]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010b1e:	2317      	movs	r3, #23
 8010b20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b24:	4b69      	ldr	r3, [pc, #420]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b2e:	4611      	mov	r1, r2
 8010b30:	4618      	mov	r0, r3
 8010b32:	f003 f98b 	bl	8013e4c <RegionGetPhyParam>
 8010b36:	4603      	mov	r3, r0
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	b2da      	uxtb	r2, r3
 8010b3e:	4b63      	ldr	r3, [pc, #396]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010b44:	2318      	movs	r3, #24
 8010b46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b4a:	4b60      	ldr	r3, [pc, #384]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f003 f978 	bl	8013e4c <RegionGetPhyParam>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	4a5a      	ldr	r2, [pc, #360]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b64:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6a:	4a58      	ldr	r2, [pc, #352]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b6c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b70:	2319      	movs	r3, #25
 8010b72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b76:	4b55      	ldr	r3, [pc, #340]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f003 f962 	bl	8013e4c <RegionGetPhyParam>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8e:	b2da      	uxtb	r2, r3
 8010b90:	4b4e      	ldr	r3, [pc, #312]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b92:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b98:	b2da      	uxtb	r2, r3
 8010b9a:	4b4c      	ldr	r3, [pc, #304]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010b9c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010ba0:	231e      	movs	r3, #30
 8010ba2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ba6:	4b49      	ldr	r3, [pc, #292]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f003 f94a 	bl	8013e4c <RegionGetPhyParam>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b42      	ldr	r3, [pc, #264]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010bc2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010bc6:	231f      	movs	r3, #31
 8010bc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bcc:	4b3f      	ldr	r3, [pc, #252]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f003 f937 	bl	8013e4c <RegionGetPhyParam>
 8010bde:	4603      	mov	r3, r0
 8010be0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	4b39      	ldr	r3, [pc, #228]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010be8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010bec:	2320      	movs	r3, #32
 8010bee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bf2:	4b36      	ldr	r3, [pc, #216]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f003 f924 	bl	8013e4c <RegionGetPhyParam>
 8010c04:	4603      	mov	r3, r0
 8010c06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0a:	4a30      	ldr	r2, [pc, #192]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c0c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010c10:	2321      	movs	r3, #33	; 0x21
 8010c12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c16:	4b2d      	ldr	r3, [pc, #180]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f003 f912 	bl	8013e4c <RegionGetPhyParam>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	4a27      	ldr	r2, [pc, #156]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c30:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010c34:	230b      	movs	r3, #11
 8010c36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c3a:	4b24      	ldr	r3, [pc, #144]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f003 f900 	bl	8013e4c <RegionGetPhyParam>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	4b1e      	ldr	r3, [pc, #120]	; (8010cd0 <LoRaMacInitialization+0x388>)
 8010c56:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010c5a:	230c      	movs	r3, #12
 8010c5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c60:	4b1a      	ldr	r3, [pc, #104]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f003 f8ed 	bl	8013e4c <RegionGetPhyParam>
 8010c72:	4603      	mov	r3, r0
 8010c74:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	4b15      	ldr	r3, [pc, #84]	; (8010cd0 <LoRaMacInitialization+0x388>)
 8010c7c:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010c80:	4b12      	ldr	r3, [pc, #72]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c82:	2201      	movs	r2, #1
 8010c84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010c88:	4b10      	ldr	r3, [pc, #64]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c8a:	220a      	movs	r2, #10
 8010c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010c90:	4b0e      	ldr	r3, [pc, #56]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c92:	2206      	movs	r2, #6
 8010c94:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010c98:	4b0c      	ldr	r3, [pc, #48]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010ca0:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010ca2:	4b0a      	ldr	r3, [pc, #40]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010ca4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010ca8:	4b08      	ldr	r3, [pc, #32]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010cae:	4b07      	ldr	r3, [pc, #28]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cb4:	4a05      	ldr	r2, [pc, #20]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010cb8:	4b04      	ldr	r3, [pc, #16]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cbe:	4a03      	ldr	r2, [pc, #12]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010cc0:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010cc2:	4b02      	ldr	r3, [pc, #8]	; (8010ccc <LoRaMacInitialization+0x384>)
 8010cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010cc8:	e006      	b.n	8010cd8 <LoRaMacInitialization+0x390>
 8010cca:	bf00      	nop
 8010ccc:	2000095c 	.word	0x2000095c
 8010cd0:	20000454 	.word	0x20000454
 8010cd4:	01000300 	.word	0x01000300
 8010cd8:	4a60      	ldr	r2, [pc, #384]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010cda:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010cdc:	4b5f      	ldr	r3, [pc, #380]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010ce2:	4a5e      	ldr	r2, [pc, #376]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010ce4:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010ce6:	4b5d      	ldr	r3, [pc, #372]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010cec:	4a5b      	ldr	r2, [pc, #364]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010cee:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010cf0:	4b5a      	ldr	r3, [pc, #360]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010cf2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010cf6:	4b59      	ldr	r3, [pc, #356]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010cf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d02:	4b57      	ldr	r3, [pc, #348]	; (8010e60 <LoRaMacInitialization+0x518>)
 8010d04:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d06:	4b57      	ldr	r3, [pc, #348]	; (8010e64 <LoRaMacInitialization+0x51c>)
 8010d08:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010d0a:	4b54      	ldr	r3, [pc, #336]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d10:	f107 0218 	add.w	r2, r7, #24
 8010d14:	4611      	mov	r1, r2
 8010d16:	4618      	mov	r0, r3
 8010d18:	f003 f8c2 	bl	8013ea0 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010d1c:	4a52      	ldr	r2, [pc, #328]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010d24:	f7ff f85a 	bl	800fddc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010d28:	4b4c      	ldr	r3, [pc, #304]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010d30:	4a4d      	ldr	r2, [pc, #308]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010d38:	4b4b      	ldr	r3, [pc, #300]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010d40:	4b49      	ldr	r3, [pc, #292]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010d42:	2201      	movs	r2, #1
 8010d44:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010d48:	4b44      	ldr	r3, [pc, #272]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010d4e:	4b43      	ldr	r3, [pc, #268]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010d54:	2300      	movs	r3, #0
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	4b44      	ldr	r3, [pc, #272]	; (8010e6c <LoRaMacInitialization+0x524>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8010d60:	4843      	ldr	r0, [pc, #268]	; (8010e70 <LoRaMacInitialization+0x528>)
 8010d62:	f009 f9eb 	bl	801a13c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010d66:	2300      	movs	r3, #0
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	4b42      	ldr	r3, [pc, #264]	; (8010e74 <LoRaMacInitialization+0x52c>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8010d72:	4841      	ldr	r0, [pc, #260]	; (8010e78 <LoRaMacInitialization+0x530>)
 8010d74:	f009 f9e2 	bl	801a13c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	4b3f      	ldr	r3, [pc, #252]	; (8010e7c <LoRaMacInitialization+0x534>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f04f 31ff 	mov.w	r1, #4294967295
 8010d84:	483e      	ldr	r0, [pc, #248]	; (8010e80 <LoRaMacInitialization+0x538>)
 8010d86:	f009 f9d9 	bl	801a13c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	4b3d      	ldr	r3, [pc, #244]	; (8010e84 <LoRaMacInitialization+0x53c>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	f04f 31ff 	mov.w	r1, #4294967295
 8010d96:	483c      	ldr	r0, [pc, #240]	; (8010e88 <LoRaMacInitialization+0x540>)
 8010d98:	f009 f9d0 	bl	801a13c <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010d9c:	4c2f      	ldr	r4, [pc, #188]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010d9e:	463b      	mov	r3, r7
 8010da0:	4618      	mov	r0, r3
 8010da2:	f008 fe43 	bl	8019a2c <SysTimeGetMcuTime>
 8010da6:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010daa:	463a      	mov	r2, r7
 8010dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010db0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010db4:	4b2c      	ldr	r3, [pc, #176]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010db6:	4a35      	ldr	r2, [pc, #212]	; (8010e8c <LoRaMacInitialization+0x544>)
 8010db8:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010dbc:	4b2a      	ldr	r3, [pc, #168]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010dbe:	4a34      	ldr	r2, [pc, #208]	; (8010e90 <LoRaMacInitialization+0x548>)
 8010dc0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010dc4:	4b28      	ldr	r3, [pc, #160]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010dc6:	4a33      	ldr	r2, [pc, #204]	; (8010e94 <LoRaMacInitialization+0x54c>)
 8010dc8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010dcc:	4b26      	ldr	r3, [pc, #152]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010dce:	4a32      	ldr	r2, [pc, #200]	; (8010e98 <LoRaMacInitialization+0x550>)
 8010dd0:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010dd4:	4b24      	ldr	r3, [pc, #144]	; (8010e68 <LoRaMacInitialization+0x520>)
 8010dd6:	4a31      	ldr	r2, [pc, #196]	; (8010e9c <LoRaMacInitialization+0x554>)
 8010dd8:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010ddc:	4b30      	ldr	r3, [pc, #192]	; (8010ea0 <LoRaMacInitialization+0x558>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4830      	ldr	r0, [pc, #192]	; (8010ea4 <LoRaMacInitialization+0x55c>)
 8010de2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	4619      	mov	r1, r3
 8010dea:	482f      	ldr	r0, [pc, #188]	; (8010ea8 <LoRaMacInitialization+0x560>)
 8010dec:	f7fa ff3e 	bl	800bc6c <SecureElementInit>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d001      	beq.n	8010dfa <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010df6:	2311      	movs	r3, #17
 8010df8:	e02b      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010dfa:	4818      	ldr	r0, [pc, #96]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010dfc:	f002 f950 	bl	80130a0 <LoRaMacCryptoInit>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d001      	beq.n	8010e0a <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e06:	2311      	movs	r3, #17
 8010e08:	e023      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010e0a:	f001 fa95 	bl	8012338 <LoRaMacCommandsInit>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d001      	beq.n	8010e18 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e14:	2313      	movs	r3, #19
 8010e16:	e01c      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010e18:	4824      	ldr	r0, [pc, #144]	; (8010eac <LoRaMacInitialization+0x564>)
 8010e1a:	f002 f9ff 	bl	801321c <LoRaMacCryptoSetMulticastReference>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d001      	beq.n	8010e28 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e24:	2311      	movs	r3, #17
 8010e26:	e014      	b.n	8010e52 <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010e28:	4b1d      	ldr	r3, [pc, #116]	; (8010ea0 <LoRaMacInitialization+0x558>)
 8010e2a:	695b      	ldr	r3, [r3, #20]
 8010e2c:	4798      	blx	r3
 8010e2e:	4603      	mov	r3, r0
 8010e30:	4618      	mov	r0, r3
 8010e32:	f005 faf1 	bl	8016418 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010e36:	4b1a      	ldr	r3, [pc, #104]	; (8010ea0 <LoRaMacInitialization+0x558>)
 8010e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e3a:	4a08      	ldr	r2, [pc, #32]	; (8010e5c <LoRaMacInitialization+0x514>)
 8010e3c:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010e40:	4610      	mov	r0, r2
 8010e42:	4798      	blx	r3
    Radio.Sleep( );
 8010e44:	4b16      	ldr	r3, [pc, #88]	; (8010ea0 <LoRaMacInitialization+0x558>)
 8010e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e48:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010e4a:	2001      	movs	r0, #1
 8010e4c:	f7fd faaa 	bl	800e3a4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010e50:	2300      	movs	r3, #0
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3734      	adds	r7, #52	; 0x34
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd90      	pop	{r4, r7, pc}
 8010e5a:	bf00      	nop
 8010e5c:	2000095c 	.word	0x2000095c
 8010e60:	20000b34 	.word	0x20000b34
 8010e64:	20000bc8 	.word	0x20000bc8
 8010e68:	20000454 	.word	0x20000454
 8010e6c:	0800e92d 	.word	0x0800e92d
 8010e70:	200007bc 	.word	0x200007bc
 8010e74:	0800e9a1 	.word	0x0800e9a1
 8010e78:	200007d4 	.word	0x200007d4
 8010e7c:	0800ea0d 	.word	0x0800ea0d
 8010e80:	200007ec 	.word	0x200007ec
 8010e84:	0800ea81 	.word	0x0800ea81
 8010e88:	2000084c 	.word	0x2000084c
 8010e8c:	0800d531 	.word	0x0800d531
 8010e90:	0800d5a9 	.word	0x0800d5a9
 8010e94:	0800d681 	.word	0x0800d681
 8010e98:	0800d635 	.word	0x0800d635
 8010e9c:	0800d6bd 	.word	0x0800d6bd
 8010ea0:	0801ba54 	.word	0x0801ba54
 8010ea4:	200007a0 	.word	0x200007a0
 8010ea8:	20000a74 	.word	0x20000a74
 8010eac:	20000a2c 	.word	0x20000a2c

08010eb0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010eb4:	4b04      	ldr	r3, [pc, #16]	; (8010ec8 <LoRaMacStart+0x18>)
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010ebc:	2300      	movs	r3, #0
}
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bc80      	pop	{r7}
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	20000454 	.word	0x20000454

08010ecc <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b08a      	sub	sp, #40	; 0x28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	6039      	str	r1, [r7, #0]
 8010ed6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010ed8:	4b3e      	ldr	r3, [pc, #248]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010edc:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010ede:	4b3d      	ldr	r3, [pc, #244]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010ee0:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010ee4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010ee6:	4b3b      	ldr	r3, [pc, #236]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010ee8:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010eec:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d101      	bne.n	8010efc <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010ef8:	2303      	movs	r3, #3
 8010efa:	e066      	b.n	8010fca <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010efc:	4b35      	ldr	r3, [pc, #212]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010efe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010f02:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010f04:	2300      	movs	r3, #0
 8010f06:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010f08:	4b32      	ldr	r3, [pc, #200]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f0a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010f0e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010f10:	4b30      	ldr	r3, [pc, #192]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f14:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010f16:	4b30      	ldr	r3, [pc, #192]	; (8010fd8 <LoRaMacQueryTxPossible+0x10c>)
 8010f18:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010f1c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010f1e:	4b2e      	ldr	r3, [pc, #184]	; (8010fd8 <LoRaMacQueryTxPossible+0x10c>)
 8010f20:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010f24:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010f26:	4b2b      	ldr	r3, [pc, #172]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f28:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010f30:	4b28      	ldr	r3, [pc, #160]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f32:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010f36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f3a:	4b26      	ldr	r3, [pc, #152]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010f44:	4b23      	ldr	r3, [pc, #140]	; (8010fd4 <LoRaMacQueryTxPossible+0x108>)
 8010f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010f4e:	f107 0310 	add.w	r3, r7, #16
 8010f52:	f107 020e 	add.w	r2, r7, #14
 8010f56:	f107 010f 	add.w	r1, r7, #15
 8010f5a:	f107 0014 	add.w	r0, r7, #20
 8010f5e:	f000 ffe1 	bl	8011f24 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fd fed2 	bl	800ed10 <GetMaxAppPayloadWithoutFOptsLength>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	461a      	mov	r2, r3
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010f74:	f107 0308 	add.w	r3, r7, #8
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f001 faab 	bl	80124d4 <LoRaMacCommandsGetSizeSerializedCmds>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010f84:	2313      	movs	r3, #19
 8010f86:	e020      	b.n	8010fca <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	2b0f      	cmp	r3, #15
 8010f8c:	d819      	bhi.n	8010fc2 <LoRaMacQueryTxPossible+0xf6>
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	785b      	ldrb	r3, [r3, #1]
 8010f92:	461a      	mov	r2, r3
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d313      	bcc.n	8010fc2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	785a      	ldrb	r2, [r3, #1]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	b2db      	uxtb	r3, r3
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	785b      	ldrb	r3, [r3, #1]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	79fa      	ldrb	r2, [r7, #7]
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	4299      	cmp	r1, r3
 8010fb8:	d301      	bcc.n	8010fbe <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e005      	b.n	8010fca <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010fbe:	2308      	movs	r3, #8
 8010fc0:	e003      	b.n	8010fca <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010fc8:	2308      	movs	r3, #8
    }
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3728      	adds	r7, #40	; 0x28
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	2000095c 	.word	0x2000095c
 8010fd8:	20000454 	.word	0x20000454

08010fdc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010fdc:	b590      	push	{r4, r7, lr}
 8010fde:	b087      	sub	sp, #28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010fee:	2303      	movs	r3, #3
 8010ff0:	e14b      	b.n	801128a <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	2b28      	cmp	r3, #40	; 0x28
 8010ff8:	f200 8140 	bhi.w	801127c <LoRaMacMibGetRequestConfirm+0x2a0>
 8010ffc:	a201      	add	r2, pc, #4	; (adr r2, 8011004 <LoRaMacMibGetRequestConfirm+0x28>)
 8010ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011002:	bf00      	nop
 8011004:	080110a9 	.word	0x080110a9
 8011008:	080110b5 	.word	0x080110b5
 801100c:	080110c1 	.word	0x080110c1
 8011010:	080110cd 	.word	0x080110cd
 8011014:	080110d9 	.word	0x080110d9
 8011018:	080110e5 	.word	0x080110e5
 801101c:	080110f1 	.word	0x080110f1
 8011020:	0801127d 	.word	0x0801127d
 8011024:	0801127d 	.word	0x0801127d
 8011028:	0801127d 	.word	0x0801127d
 801102c:	0801127d 	.word	0x0801127d
 8011030:	0801127d 	.word	0x0801127d
 8011034:	0801127d 	.word	0x0801127d
 8011038:	0801127d 	.word	0x0801127d
 801103c:	0801127d 	.word	0x0801127d
 8011040:	080110fd 	.word	0x080110fd
 8011044:	08011109 	.word	0x08011109
 8011048:	08011115 	.word	0x08011115
 801104c:	08011137 	.word	0x08011137
 8011050:	08011149 	.word	0x08011149
 8011054:	0801115b 	.word	0x0801115b
 8011058:	0801116d 	.word	0x0801116d
 801105c:	080111a1 	.word	0x080111a1
 8011060:	0801117f 	.word	0x0801117f
 8011064:	080111c3 	.word	0x080111c3
 8011068:	080111cf 	.word	0x080111cf
 801106c:	080111d9 	.word	0x080111d9
 8011070:	080111e3 	.word	0x080111e3
 8011074:	080111ed 	.word	0x080111ed
 8011078:	080111f7 	.word	0x080111f7
 801107c:	08011201 	.word	0x08011201
 8011080:	0801120d 	.word	0x0801120d
 8011084:	08011225 	.word	0x08011225
 8011088:	08011219 	.word	0x08011219
 801108c:	08011231 	.word	0x08011231
 8011090:	0801123b 	.word	0x0801123b
 8011094:	08011247 	.word	0x08011247
 8011098:	0801125d 	.word	0x0801125d
 801109c:	08011251 	.word	0x08011251
 80110a0:	0801127d 	.word	0x0801127d
 80110a4:	08011269 	.word	0x08011269
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80110a8:	4b7a      	ldr	r3, [pc, #488]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110aa:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	711a      	strb	r2, [r3, #4]
            break;
 80110b2:	e0e9      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80110b4:	4b77      	ldr	r3, [pc, #476]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110b6:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	711a      	strb	r2, [r3, #4]
            break;
 80110be:	e0e3      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80110c0:	f7fb f88e 	bl	800c1e0 <SecureElementGetDevEui>
 80110c4:	4602      	mov	r2, r0
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	605a      	str	r2, [r3, #4]
            break;
 80110ca:	e0dd      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80110cc:	f7fb f8aa 	bl	800c224 <SecureElementGetJoinEui>
 80110d0:	4602      	mov	r2, r0
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	605a      	str	r2, [r3, #4]
            break;
 80110d6:	e0d7      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80110d8:	4b6e      	ldr	r3, [pc, #440]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110da:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	711a      	strb	r2, [r3, #4]
            break;
 80110e2:	e0d1      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80110e4:	4b6b      	ldr	r3, [pc, #428]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	605a      	str	r2, [r3, #4]
            break;
 80110ee:	e0cb      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80110f0:	4b68      	ldr	r3, [pc, #416]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110f2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	605a      	str	r2, [r3, #4]
            break;
 80110fa:	e0c5      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80110fc:	4b65      	ldr	r3, [pc, #404]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110fe:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	711a      	strb	r2, [r3, #4]
            break;
 8011106:	e0bf      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011108:	4b62      	ldr	r3, [pc, #392]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801110a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	711a      	strb	r2, [r3, #4]
            break;
 8011112:	e0b9      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011114:	231d      	movs	r3, #29
 8011116:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011118:	4b5e      	ldr	r3, [pc, #376]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801111a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801111e:	f107 0210 	add.w	r2, r7, #16
 8011122:	4611      	mov	r1, r2
 8011124:	4618      	mov	r0, r3
 8011126:	f002 fe91 	bl	8013e4c <RegionGetPhyParam>
 801112a:	4603      	mov	r3, r0
 801112c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801112e:	68fa      	ldr	r2, [r7, #12]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	605a      	str	r2, [r3, #4]
            break;
 8011134:	e0a8      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a56      	ldr	r2, [pc, #344]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801113a:	3304      	adds	r3, #4
 801113c:	3264      	adds	r2, #100	; 0x64
 801113e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011142:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011146:	e09f      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	4a52      	ldr	r2, [pc, #328]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801114c:	3304      	adds	r3, #4
 801114e:	32a4      	adds	r2, #164	; 0xa4
 8011150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011154:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011158:	e096      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	4a4d      	ldr	r2, [pc, #308]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801115e:	3304      	adds	r3, #4
 8011160:	326c      	adds	r2, #108	; 0x6c
 8011162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011166:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801116a:	e08d      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a49      	ldr	r2, [pc, #292]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011170:	3304      	adds	r3, #4
 8011172:	32ac      	adds	r2, #172	; 0xac
 8011174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011178:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801117c:	e084      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801117e:	231b      	movs	r3, #27
 8011180:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011182:	4b44      	ldr	r3, [pc, #272]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011188:	f107 0210 	add.w	r2, r7, #16
 801118c:	4611      	mov	r1, r2
 801118e:	4618      	mov	r0, r3
 8011190:	f002 fe5c 	bl	8013e4c <RegionGetPhyParam>
 8011194:	4603      	mov	r3, r0
 8011196:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011198:	68fa      	ldr	r2, [r7, #12]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	605a      	str	r2, [r3, #4]
            break;
 801119e:	e073      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80111a0:	231a      	movs	r3, #26
 80111a2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80111a4:	4b3b      	ldr	r3, [pc, #236]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111aa:	f107 0210 	add.w	r2, r7, #16
 80111ae:	4611      	mov	r1, r2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f002 fe4b 	bl	8013e4c <RegionGetPhyParam>
 80111b6:	4603      	mov	r3, r0
 80111b8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	605a      	str	r2, [r3, #4]
            break;
 80111c0:	e062      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80111c2:	4b34      	ldr	r3, [pc, #208]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111c4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	711a      	strb	r2, [r3, #4]
            break;
 80111cc:	e05c      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80111ce:	4b31      	ldr	r3, [pc, #196]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	605a      	str	r2, [r3, #4]
            break;
 80111d6:	e057      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80111d8:	4b2e      	ldr	r3, [pc, #184]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	605a      	str	r2, [r3, #4]
            break;
 80111e0:	e052      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80111e2:	4b2c      	ldr	r3, [pc, #176]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	605a      	str	r2, [r3, #4]
            break;
 80111ea:	e04d      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80111ec:	4b29      	ldr	r3, [pc, #164]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	605a      	str	r2, [r3, #4]
            break;
 80111f4:	e048      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80111f6:	4b27      	ldr	r3, [pc, #156]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	605a      	str	r2, [r3, #4]
            break;
 80111fe:	e043      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011200:	4b24      	ldr	r3, [pc, #144]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011202:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	711a      	strb	r2, [r3, #4]
            break;
 801120a:	e03d      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801120c:	4b21      	ldr	r3, [pc, #132]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801120e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	711a      	strb	r2, [r3, #4]
            break;
 8011216:	e037      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011218:	4b1e      	ldr	r3, [pc, #120]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801121a:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	711a      	strb	r2, [r3, #4]
            break;
 8011222:	e031      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011224:	4b1b      	ldr	r3, [pc, #108]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011226:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	711a      	strb	r2, [r3, #4]
            break;
 801122e:	e02b      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011230:	4b18      	ldr	r3, [pc, #96]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	605a      	str	r2, [r3, #4]
            break;
 8011238:	e026      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801123a:	4b16      	ldr	r3, [pc, #88]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801123c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	711a      	strb	r2, [r3, #4]
            break;
 8011244:	e020      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011246:	4b13      	ldr	r3, [pc, #76]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011248:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	605a      	str	r2, [r3, #4]
            break;
 801124e:	e01b      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8011250:	f7ff f934 	bl	80104bc <GetNvmData>
 8011254:	4602      	mov	r2, r0
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	605a      	str	r2, [r3, #4]
            break;
 801125a:	e015      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801125c:	4b0d      	ldr	r3, [pc, #52]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801125e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	605a      	str	r2, [r3, #4]
            break;
 8011266:	e00f      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	4a0a      	ldr	r2, [pc, #40]	; (8011294 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801126c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8011270:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011272:	687c      	ldr	r4, [r7, #4]
 8011274:	f002 ff74 	bl	8014160 <RegionGetVersion>
 8011278:	60a0      	str	r0, [r4, #8]
            break;
 801127a:	e005      	b.n	8011288 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 fefd 	bl	801207c <LoRaMacClassBMibGetRequestConfirm>
 8011282:	4603      	mov	r3, r0
 8011284:	75fb      	strb	r3, [r7, #23]
            break;
 8011286:	bf00      	nop
        }
    }
    return status;
 8011288:	7dfb      	ldrb	r3, [r7, #23]
}
 801128a:	4618      	mov	r0, r3
 801128c:	371c      	adds	r7, #28
 801128e:	46bd      	mov	sp, r7
 8011290:	bd90      	pop	{r4, r7, pc}
 8011292:	bf00      	nop
 8011294:	2000095c 	.word	0x2000095c

08011298 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b086      	sub	sp, #24
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d101      	bne.n	80112ae <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80112aa:	2303      	movs	r3, #3
 80112ac:	e32b      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80112ae:	4bbe      	ldr	r3, [pc, #760]	; (80115a8 <LoRaMacMibSetRequestConfirm+0x310>)
 80112b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80112b4:	f003 0302 	and.w	r3, r3, #2
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d001      	beq.n	80112c0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80112bc:	2301      	movs	r3, #1
 80112be:	e322      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	2b27      	cmp	r3, #39	; 0x27
 80112c6:	f200 82fc 	bhi.w	80118c2 <LoRaMacMibSetRequestConfirm+0x62a>
 80112ca:	a201      	add	r2, pc, #4	; (adr r2, 80112d0 <LoRaMacMibSetRequestConfirm+0x38>)
 80112cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d0:	08011371 	.word	0x08011371
 80112d4:	08011381 	.word	0x08011381
 80112d8:	0801139b 	.word	0x0801139b
 80112dc:	080113b3 	.word	0x080113b3
 80112e0:	080113cb 	.word	0x080113cb
 80112e4:	080113d7 	.word	0x080113d7
 80112e8:	080113e3 	.word	0x080113e3
 80112ec:	080113ef 	.word	0x080113ef
 80112f0:	08011415 	.word	0x08011415
 80112f4:	0801143b 	.word	0x0801143b
 80112f8:	08011461 	.word	0x08011461
 80112fc:	08011487 	.word	0x08011487
 8011300:	080114ad 	.word	0x080114ad
 8011304:	080114d3 	.word	0x080114d3
 8011308:	080114f9 	.word	0x080114f9
 801130c:	0801151f 	.word	0x0801151f
 8011310:	0801153f 	.word	0x0801153f
 8011314:	080118c3 	.word	0x080118c3
 8011318:	0801154b 	.word	0x0801154b
 801131c:	080115c7 	.word	0x080115c7
 8011320:	08011607 	.word	0x08011607
 8011324:	08011669 	.word	0x08011669
 8011328:	080116d9 	.word	0x080116d9
 801132c:	080116a9 	.word	0x080116a9
 8011330:	08011709 	.word	0x08011709
 8011334:	0801172b 	.word	0x0801172b
 8011338:	08011735 	.word	0x08011735
 801133c:	0801173f 	.word	0x0801173f
 8011340:	08011749 	.word	0x08011749
 8011344:	08011753 	.word	0x08011753
 8011348:	0801175d 	.word	0x0801175d
 801134c:	0801178f 	.word	0x0801178f
 8011350:	080117fb 	.word	0x080117fb
 8011354:	080117c9 	.word	0x080117c9
 8011358:	0801182d 	.word	0x0801182d
 801135c:	08011843 	.word	0x08011843
 8011360:	0801185b 	.word	0x0801185b
 8011364:	08011865 	.word	0x08011865
 8011368:	08011871 	.word	0x08011871
 801136c:	08011899 	.word	0x08011899
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	791b      	ldrb	r3, [r3, #4]
 8011374:	4618      	mov	r0, r3
 8011376:	f7fd fbfb 	bl	800eb70 <SwitchClass>
 801137a:	4603      	mov	r3, r0
 801137c:	75fb      	strb	r3, [r7, #23]
            break;
 801137e:	e2c1      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	791b      	ldrb	r3, [r3, #4]
 8011384:	2b02      	cmp	r3, #2
 8011386:	d005      	beq.n	8011394 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	791a      	ldrb	r2, [r3, #4]
 801138c:	4b87      	ldr	r3, [pc, #540]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 801138e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011392:	e2b7      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011394:	2303      	movs	r3, #3
 8011396:	75fb      	strb	r3, [r7, #23]
            break;
 8011398:	e2b4      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fa ff06 	bl	800c1b0 <SecureElementSetDevEui>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 8291 	beq.w	80118ce <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113ac:	2303      	movs	r3, #3
 80113ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113b0:	e28d      	b.n	80118ce <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fa ff1c 	bl	800c1f4 <SecureElementSetJoinEui>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 8287 	beq.w	80118d2 <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113c4:	2303      	movs	r3, #3
 80113c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113c8:	e283      	b.n	80118d2 <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	791a      	ldrb	r2, [r3, #4]
 80113ce:	4b77      	ldr	r3, [pc, #476]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 80113d0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80113d4:	e296      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	685b      	ldr	r3, [r3, #4]
 80113da:	4a74      	ldr	r2, [pc, #464]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 80113dc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80113e0:	e290      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4a71      	ldr	r2, [pc, #452]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 80113e8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80113ec:	e28a      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00b      	beq.n	801140e <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	4619      	mov	r1, r3
 80113fc:	2000      	movs	r0, #0
 80113fe:	f001 ff35 	bl	801326c <LoRaMacCryptoSetKey>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	f000 8266 	beq.w	80118d6 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801140a:	2311      	movs	r3, #17
 801140c:	e27b      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801140e:	2303      	movs	r3, #3
 8011410:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011412:	e260      	b.n	80118d6 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00b      	beq.n	8011434 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	4619      	mov	r1, r3
 8011422:	2001      	movs	r0, #1
 8011424:	f001 ff22 	bl	801326c <LoRaMacCryptoSetKey>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 8255 	beq.w	80118da <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011430:	2311      	movs	r3, #17
 8011432:	e268      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011434:	2303      	movs	r3, #3
 8011436:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011438:	e24f      	b.n	80118da <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00b      	beq.n	801145a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	4619      	mov	r1, r3
 8011448:	2002      	movs	r0, #2
 801144a:	f001 ff0f 	bl	801326c <LoRaMacCryptoSetKey>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	f000 8244 	beq.w	80118de <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011456:	2311      	movs	r3, #17
 8011458:	e255      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801145a:	2303      	movs	r3, #3
 801145c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801145e:	e23e      	b.n	80118de <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d00b      	beq.n	8011480 <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	4619      	mov	r1, r3
 801146e:	2003      	movs	r0, #3
 8011470:	f001 fefc 	bl	801326c <LoRaMacCryptoSetKey>
 8011474:	4603      	mov	r3, r0
 8011476:	2b00      	cmp	r3, #0
 8011478:	f000 8233 	beq.w	80118e2 <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801147c:	2311      	movs	r3, #17
 801147e:	e242      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011480:	2303      	movs	r3, #3
 8011482:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011484:	e22d      	b.n	80118e2 <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d00b      	beq.n	80114a6 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	4619      	mov	r1, r3
 8011494:	207f      	movs	r0, #127	; 0x7f
 8011496:	f001 fee9 	bl	801326c <LoRaMacCryptoSetKey>
 801149a:	4603      	mov	r3, r0
 801149c:	2b00      	cmp	r3, #0
 801149e:	f000 8222 	beq.w	80118e6 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114a2:	2311      	movs	r3, #17
 80114a4:	e22f      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114a6:	2303      	movs	r3, #3
 80114a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114aa:	e21c      	b.n	80118e6 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00b      	beq.n	80114cc <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	4619      	mov	r1, r3
 80114ba:	2080      	movs	r0, #128	; 0x80
 80114bc:	f001 fed6 	bl	801326c <LoRaMacCryptoSetKey>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	f000 8211 	beq.w	80118ea <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114c8:	2311      	movs	r3, #17
 80114ca:	e21c      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114cc:	2303      	movs	r3, #3
 80114ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114d0:	e20b      	b.n	80118ea <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d00b      	beq.n	80114f2 <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	4619      	mov	r1, r3
 80114e0:	2081      	movs	r0, #129	; 0x81
 80114e2:	f001 fec3 	bl	801326c <LoRaMacCryptoSetKey>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f000 8200 	beq.w	80118ee <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114ee:	2311      	movs	r3, #17
 80114f0:	e209      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114f2:	2303      	movs	r3, #3
 80114f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114f6:	e1fa      	b.n	80118ee <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00b      	beq.n	8011518 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	4619      	mov	r1, r3
 8011506:	2082      	movs	r0, #130	; 0x82
 8011508:	f001 feb0 	bl	801326c <LoRaMacCryptoSetKey>
 801150c:	4603      	mov	r3, r0
 801150e:	2b00      	cmp	r3, #0
 8011510:	f000 81ef 	beq.w	80118f2 <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011514:	2311      	movs	r3, #17
 8011516:	e1f6      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011518:	2303      	movs	r3, #3
 801151a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801151c:	e1e9      	b.n	80118f2 <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	791a      	ldrb	r2, [r3, #4]
 8011522:	4b22      	ldr	r3, [pc, #136]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 8011524:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011528:	4b21      	ldr	r3, [pc, #132]	; (80115b0 <LoRaMacMibSetRequestConfirm+0x318>)
 801152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801152c:	4a1f      	ldr	r2, [pc, #124]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 801152e:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8011532:	4610      	mov	r0, r2
 8011534:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011536:	4b1e      	ldr	r3, [pc, #120]	; (80115b0 <LoRaMacMibSetRequestConfirm+0x318>)
 8011538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801153a:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 801153c:	e1e2      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	791a      	ldrb	r2, [r3, #4]
 8011542:	4b1a      	ldr	r3, [pc, #104]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 8011544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011548:	e1dc      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	7a1b      	ldrb	r3, [r3, #8]
 801154e:	b25b      	sxtb	r3, r3
 8011550:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011552:	4b16      	ldr	r3, [pc, #88]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 8011554:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011558:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801155a:	4b14      	ldr	r3, [pc, #80]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 801155c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011560:	f107 0108 	add.w	r1, r7, #8
 8011564:	2207      	movs	r2, #7
 8011566:	4618      	mov	r0, r3
 8011568:	f002 fcac 	bl	8013ec4 <RegionVerify>
 801156c:	4603      	mov	r3, r0
 801156e:	f083 0301 	eor.w	r3, r3, #1
 8011572:	b2db      	uxtb	r3, r3
 8011574:	2b00      	cmp	r3, #0
 8011576:	d002      	beq.n	801157e <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011578:	2303      	movs	r3, #3
 801157a:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801157c:	e1c2      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	685b      	ldr	r3, [r3, #4]
 8011582:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011584:	4b09      	ldr	r3, [pc, #36]	; (80115ac <LoRaMacMibSetRequestConfirm+0x314>)
 8011586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801158a:	f107 0108 	add.w	r1, r7, #8
 801158e:	2200      	movs	r2, #0
 8011590:	4618      	mov	r0, r3
 8011592:	f002 fc97 	bl	8013ec4 <RegionVerify>
 8011596:	4603      	mov	r3, r0
 8011598:	f083 0301 	eor.w	r3, r3, #1
 801159c:	b2db      	uxtb	r3, r3
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d008      	beq.n	80115b4 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115a2:	2303      	movs	r3, #3
 80115a4:	75fb      	strb	r3, [r7, #23]
            break;
 80115a6:	e1ad      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
 80115a8:	20000454 	.word	0x20000454
 80115ac:	2000095c 	.word	0x2000095c
 80115b0:	0801ba54 	.word	0x0801ba54
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80115b4:	4bb6      	ldr	r3, [pc, #728]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	3364      	adds	r3, #100	; 0x64
 80115ba:	3204      	adds	r2, #4
 80115bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115c0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80115c4:	e19e      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	7a1b      	ldrb	r3, [r3, #8]
 80115ca:	b25b      	sxtb	r3, r3
 80115cc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115ce:	4bb0      	ldr	r3, [pc, #704]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115d0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115d4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115d6:	4bae      	ldr	r3, [pc, #696]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115dc:	f107 0108 	add.w	r1, r7, #8
 80115e0:	2207      	movs	r2, #7
 80115e2:	4618      	mov	r0, r3
 80115e4:	f002 fc6e 	bl	8013ec4 <RegionVerify>
 80115e8:	4603      	mov	r3, r0
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d008      	beq.n	8011600 <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80115ee:	4ba8      	ldr	r3, [pc, #672]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	33a4      	adds	r3, #164	; 0xa4
 80115f4:	3204      	adds	r2, #4
 80115f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115fa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80115fe:	e181      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011600:	2303      	movs	r3, #3
 8011602:	75fb      	strb	r3, [r7, #23]
            break;
 8011604:	e17e      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	7a1b      	ldrb	r3, [r3, #8]
 801160a:	b25b      	sxtb	r3, r3
 801160c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801160e:	4ba0      	ldr	r3, [pc, #640]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011610:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011614:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011616:	4b9e      	ldr	r3, [pc, #632]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801161c:	f107 0108 	add.w	r1, r7, #8
 8011620:	2207      	movs	r2, #7
 8011622:	4618      	mov	r0, r3
 8011624:	f002 fc4e 	bl	8013ec4 <RegionVerify>
 8011628:	4603      	mov	r3, r0
 801162a:	2b00      	cmp	r3, #0
 801162c:	d019      	beq.n	8011662 <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801162e:	4b98      	ldr	r3, [pc, #608]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	336c      	adds	r3, #108	; 0x6c
 8011634:	3204      	adds	r2, #4
 8011636:	e892 0003 	ldmia.w	r2, {r0, r1}
 801163a:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801163e:	4b94      	ldr	r3, [pc, #592]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011640:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011644:	2b02      	cmp	r3, #2
 8011646:	f040 8156 	bne.w	80118f6 <LoRaMacMibSetRequestConfirm+0x65e>
 801164a:	4b91      	ldr	r3, [pc, #580]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801164c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 8150 	beq.w	80118f6 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011656:	4b8f      	ldr	r3, [pc, #572]	; (8011894 <LoRaMacMibSetRequestConfirm+0x5fc>)
 8011658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801165a:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 801165c:	f7fe fcda 	bl	8010014 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011660:	e149      	b.n	80118f6 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011662:	2303      	movs	r3, #3
 8011664:	75fb      	strb	r3, [r7, #23]
            break;
 8011666:	e146      	b.n	80118f6 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	7a1b      	ldrb	r3, [r3, #8]
 801166c:	b25b      	sxtb	r3, r3
 801166e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011670:	4b87      	ldr	r3, [pc, #540]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011672:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011676:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011678:	4b85      	ldr	r3, [pc, #532]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801167a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801167e:	f107 0108 	add.w	r1, r7, #8
 8011682:	2207      	movs	r2, #7
 8011684:	4618      	mov	r0, r3
 8011686:	f002 fc1d 	bl	8013ec4 <RegionVerify>
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	d008      	beq.n	80116a2 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011690:	4b7f      	ldr	r3, [pc, #508]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	33ac      	adds	r3, #172	; 0xac
 8011696:	3204      	adds	r2, #4
 8011698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801169c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116a0:	e130      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116a2:	2303      	movs	r3, #3
 80116a4:	75fb      	strb	r3, [r7, #23]
            break;
 80116a6:	e12d      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80116ae:	2301      	movs	r3, #1
 80116b0:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116b2:	4b77      	ldr	r3, [pc, #476]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116b8:	f107 020c 	add.w	r2, r7, #12
 80116bc:	4611      	mov	r1, r2
 80116be:	4618      	mov	r0, r3
 80116c0:	f002 fc29 	bl	8013f16 <RegionChanMaskSet>
 80116c4:	4603      	mov	r3, r0
 80116c6:	f083 0301 	eor.w	r3, r3, #1
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 8114 	beq.w	80118fa <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116d2:	2303      	movs	r3, #3
 80116d4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116d6:	e110      	b.n	80118fa <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80116de:	2300      	movs	r3, #0
 80116e0:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116e2:	4b6b      	ldr	r3, [pc, #428]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116e8:	f107 020c 	add.w	r2, r7, #12
 80116ec:	4611      	mov	r1, r2
 80116ee:	4618      	mov	r0, r3
 80116f0:	f002 fc11 	bl	8013f16 <RegionChanMaskSet>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f083 0301 	eor.w	r3, r3, #1
 80116fa:	b2db      	uxtb	r3, r3
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 80fe 	beq.w	80118fe <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011702:	2303      	movs	r3, #3
 8011704:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011706:	e0fa      	b.n	80118fe <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	791b      	ldrb	r3, [r3, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d009      	beq.n	8011724 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011714:	2b0f      	cmp	r3, #15
 8011716:	d805      	bhi.n	8011724 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	791a      	ldrb	r2, [r3, #4]
 801171c:	4b5c      	ldr	r3, [pc, #368]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801171e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011722:	e0ef      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011724:	2303      	movs	r3, #3
 8011726:	75fb      	strb	r3, [r7, #23]
            break;
 8011728:	e0ec      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	4a58      	ldr	r2, [pc, #352]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011730:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011732:	e0e7      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	685b      	ldr	r3, [r3, #4]
 8011738:	4a55      	ldr	r2, [pc, #340]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801173a:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801173c:	e0e2      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	4a53      	ldr	r2, [pc, #332]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011744:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011746:	e0dd      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	4a50      	ldr	r2, [pc, #320]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801174e:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011750:	e0d8      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	4a4e      	ldr	r2, [pc, #312]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011758:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801175a:	e0d3      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011762:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011764:	4b4a      	ldr	r3, [pc, #296]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801176a:	f107 0108 	add.w	r1, r7, #8
 801176e:	2206      	movs	r2, #6
 8011770:	4618      	mov	r0, r3
 8011772:	f002 fba7 	bl	8013ec4 <RegionVerify>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d005      	beq.n	8011788 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801177c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011780:	4b43      	ldr	r3, [pc, #268]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011782:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011786:	e0bd      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011788:	2303      	movs	r3, #3
 801178a:	75fb      	strb	r3, [r7, #23]
            break;
 801178c:	e0ba      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011794:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011796:	4b3e      	ldr	r3, [pc, #248]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011798:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801179c:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801179e:	4b3c      	ldr	r3, [pc, #240]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117a4:	f107 0108 	add.w	r1, r7, #8
 80117a8:	2205      	movs	r2, #5
 80117aa:	4618      	mov	r0, r3
 80117ac:	f002 fb8a 	bl	8013ec4 <RegionVerify>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d005      	beq.n	80117c2 <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80117b6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117ba:	4b35      	ldr	r3, [pc, #212]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117c0:	e0a0      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117c2:	2303      	movs	r3, #3
 80117c4:	75fb      	strb	r3, [r7, #23]
            break;
 80117c6:	e09d      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117ce:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80117d0:	4b2f      	ldr	r3, [pc, #188]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117d6:	f107 0108 	add.w	r1, r7, #8
 80117da:	220a      	movs	r2, #10
 80117dc:	4618      	mov	r0, r3
 80117de:	f002 fb71 	bl	8013ec4 <RegionVerify>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d005      	beq.n	80117f4 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80117e8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117ec:	4b28      	ldr	r3, [pc, #160]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117ee:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117f2:	e087      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117f4:	2303      	movs	r3, #3
 80117f6:	75fb      	strb	r3, [r7, #23]
            break;
 80117f8:	e084      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011800:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011802:	4b23      	ldr	r3, [pc, #140]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011808:	f107 0108 	add.w	r1, r7, #8
 801180c:	2209      	movs	r2, #9
 801180e:	4618      	mov	r0, r3
 8011810:	f002 fb58 	bl	8013ec4 <RegionVerify>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801181a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801181e:	4b1c      	ldr	r3, [pc, #112]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011824:	e06e      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011826:	2303      	movs	r3, #3
 8011828:	75fb      	strb	r3, [r7, #23]
            break;
 801182a:	e06b      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	4a17      	ldr	r2, [pc, #92]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011832:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011836:	4b16      	ldr	r3, [pc, #88]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801183c:	4a14      	ldr	r2, [pc, #80]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801183e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011840:	e060      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	791a      	ldrb	r2, [r3, #4]
 8011846:	4b12      	ldr	r3, [pc, #72]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011848:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801184c:	4b10      	ldr	r3, [pc, #64]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801184e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8011852:	4b0f      	ldr	r3, [pc, #60]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011858:	e054      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	4a0c      	ldr	r2, [pc, #48]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011860:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011862:	e04f      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	4a09      	ldr	r2, [pc, #36]	; (8011890 <LoRaMacMibSetRequestConfirm+0x5f8>)
 801186a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 801186e:	e049      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d007      	beq.n	8011888 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe fe27 	bl	80104d0 <RestoreNvmData>
 8011882:	4603      	mov	r3, r0
 8011884:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011886:	e03d      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011888:	2303      	movs	r3, #3
 801188a:	75fb      	strb	r3, [r7, #23]
            break;
 801188c:	e03a      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
 801188e:	bf00      	nop
 8011890:	2000095c 	.word	0x2000095c
 8011894:	0801ba54 	.word	0x0801ba54
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	799b      	ldrb	r3, [r3, #6]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d80d      	bhi.n	80118bc <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80118a0:	4a1b      	ldr	r2, [pc, #108]	; (8011910 <LoRaMacMibSetRequestConfirm+0x678>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6858      	ldr	r0, [r3, #4]
 80118ae:	f001 fc23 	bl	80130f8 <LoRaMacCryptoSetLrWanVersion>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d024      	beq.n	8011902 <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118b8:	2311      	movs	r3, #17
 80118ba:	e024      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118bc:	2303      	movs	r3, #3
 80118be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118c0:	e01f      	b.n	8011902 <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fbe4 	bl	8012090 <LoRaMacMibClassBSetRequestConfirm>
 80118c8:	4603      	mov	r3, r0
 80118ca:	75fb      	strb	r3, [r7, #23]
            break;
 80118cc:	e01a      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ce:	bf00      	nop
 80118d0:	e018      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118d2:	bf00      	nop
 80118d4:	e016      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118d6:	bf00      	nop
 80118d8:	e014      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118da:	bf00      	nop
 80118dc:	e012      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118de:	bf00      	nop
 80118e0:	e010      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118e2:	bf00      	nop
 80118e4:	e00e      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118e6:	bf00      	nop
 80118e8:	e00c      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ea:	bf00      	nop
 80118ec:	e00a      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ee:	bf00      	nop
 80118f0:	e008      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118f2:	bf00      	nop
 80118f4:	e006      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118f6:	bf00      	nop
 80118f8:	e004      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118fa:	bf00      	nop
 80118fc:	e002      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118fe:	bf00      	nop
 8011900:	e000      	b.n	8011904 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011902:	bf00      	nop
        }
    }
    return status;
 8011904:	7dfb      	ldrb	r3, [r7, #23]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	2000095c 	.word	0x2000095c

08011914 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801191c:	2302      	movs	r3, #2
 801191e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011920:	2300      	movs	r3, #0
 8011922:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d101      	bne.n	801192e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801192a:	2303      	movs	r3, #3
 801192c:	e127      	b.n	8011b7e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801192e:	f7fc fd23 	bl	800e378 <LoRaMacIsBusy>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d001      	beq.n	801193c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011938:	2301      	movs	r3, #1
 801193a:	e120      	b.n	8011b7e <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801193c:	f001 f8a6 	bl	8012a8c <LoRaMacConfirmQueueIsFull>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011946:	2301      	movs	r3, #1
 8011948:	e119      	b.n	8011b7e <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801194a:	f001 f893 	bl	8012a74 <LoRaMacConfirmQueueGetCnt>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d104      	bne.n	801195e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011954:	2214      	movs	r2, #20
 8011956:	2100      	movs	r1, #0
 8011958:	488b      	ldr	r0, [pc, #556]	; (8011b88 <LoRaMacMlmeRequest+0x274>)
 801195a:	f004 fdbd 	bl	80164d8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801195e:	4b8b      	ldr	r3, [pc, #556]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 8011960:	2201      	movs	r2, #1
 8011962:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011966:	4a89      	ldr	r2, [pc, #548]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 8011968:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801196c:	f043 0304 	orr.w	r3, r3, #4
 8011970:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801197a:	2301      	movs	r3, #1
 801197c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801197e:	2300      	movs	r3, #0
 8011980:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	781b      	ldrb	r3, [r3, #0]
 8011986:	3b01      	subs	r3, #1
 8011988:	2b0d      	cmp	r3, #13
 801198a:	f200 80ce 	bhi.w	8011b2a <LoRaMacMlmeRequest+0x216>
 801198e:	a201      	add	r2, pc, #4	; (adr r2, 8011994 <LoRaMacMlmeRequest+0x80>)
 8011990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011994:	080119cd 	.word	0x080119cd
 8011998:	08011b2b 	.word	0x08011b2b
 801199c:	08011b2b 	.word	0x08011b2b
 80119a0:	08011a37 	.word	0x08011a37
 80119a4:	08011a55 	.word	0x08011a55
 80119a8:	08011a65 	.word	0x08011a65
 80119ac:	08011b2b 	.word	0x08011b2b
 80119b0:	08011b2b 	.word	0x08011b2b
 80119b4:	08011b2b 	.word	0x08011b2b
 80119b8:	08011a81 	.word	0x08011a81
 80119bc:	08011b2b 	.word	0x08011b2b
 80119c0:	08011aff 	.word	0x08011aff
 80119c4:	08011a9f 	.word	0x08011a9f
 80119c8:	08011ae1 	.word	0x08011ae1
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80119cc:	4b6f      	ldr	r3, [pc, #444]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 80119ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119d2:	f003 0320 	and.w	r3, r3, #32
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d001      	beq.n	80119de <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80119da:	2301      	movs	r3, #1
 80119dc:	e0cf      	b.n	8011b7e <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80119de:	f7fe f9fd 	bl	800fddc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80119e2:	4b6b      	ldr	r3, [pc, #428]	; (8011b90 <LoRaMacMlmeRequest+0x27c>)
 80119e4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	791b      	ldrb	r3, [r3, #4]
 80119ec:	b25b      	sxtb	r3, r3
 80119ee:	2200      	movs	r2, #0
 80119f0:	4619      	mov	r1, r3
 80119f2:	f002 fb4f 	bl	8014094 <RegionAlternateDr>
 80119f6:	4603      	mov	r3, r0
 80119f8:	461a      	mov	r2, r3
 80119fa:	4b65      	ldr	r3, [pc, #404]	; (8011b90 <LoRaMacMlmeRequest+0x27c>)
 80119fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011a00:	2307      	movs	r3, #7
 8011a02:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011a04:	20ff      	movs	r0, #255	; 0xff
 8011a06:	f7fd ff61 	bl	800f8cc <SendReJoinReq>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 808c 	beq.w	8011b2e <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011a16:	4b5e      	ldr	r3, [pc, #376]	; (8011b90 <LoRaMacMlmeRequest+0x27c>)
 8011a18:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	791b      	ldrb	r3, [r3, #4]
 8011a20:	b25b      	sxtb	r3, r3
 8011a22:	2201      	movs	r2, #1
 8011a24:	4619      	mov	r1, r3
 8011a26:	f002 fb35 	bl	8014094 <RegionAlternateDr>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	4b58      	ldr	r3, [pc, #352]	; (8011b90 <LoRaMacMlmeRequest+0x27c>)
 8011a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011a34:	e07b      	b.n	8011b2e <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a36:	2300      	movs	r3, #0
 8011a38:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a3a:	f107 030c 	add.w	r3, r7, #12
 8011a3e:	2200      	movs	r2, #0
 8011a40:	4619      	mov	r1, r3
 8011a42:	2002      	movs	r0, #2
 8011a44:	f000 fc88 	bl	8012358 <LoRaMacCommandsAddCmd>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d071      	beq.n	8011b32 <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a4e:	2313      	movs	r3, #19
 8011a50:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a52:	e06e      	b.n	8011b32 <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	889b      	ldrh	r3, [r3, #4]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fe fcdb 	bl	8010414 <SetTxContinuousWave>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	75fb      	strb	r3, [r7, #23]
            break;
 8011a62:	e06d      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	8898      	ldrh	r0, [r3, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6899      	ldr	r1, [r3, #8]
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	461a      	mov	r2, r3
 8011a76:	f7fe fd01 	bl	801047c <SetTxContinuousWave1>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a7e:	e05f      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a80:	2300      	movs	r3, #0
 8011a82:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a84:	f107 030c 	add.w	r3, r7, #12
 8011a88:	2200      	movs	r2, #0
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	200d      	movs	r0, #13
 8011a8e:	f000 fc63 	bl	8012358 <LoRaMacCommandsAddCmd>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d04e      	beq.n	8011b36 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a98:	2313      	movs	r3, #19
 8011a9a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a9c:	e04b      	b.n	8011b36 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011a9e:	4b3c      	ldr	r3, [pc, #240]	; (8011b90 <LoRaMacMlmeRequest+0x27c>)
 8011aa0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d148      	bne.n	8011b3a <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	791b      	ldrb	r3, [r3, #4]
 8011aac:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	791b      	ldrb	r3, [r3, #4]
 8011ab2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 fabe 	bl	801203a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011abe:	7dbb      	ldrb	r3, [r7, #22]
 8011ac0:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ac6:	f107 030c 	add.w	r3, r7, #12
 8011aca:	2201      	movs	r2, #1
 8011acc:	4619      	mov	r1, r3
 8011ace:	2010      	movs	r0, #16
 8011ad0:	f000 fc42 	bl	8012358 <LoRaMacCommandsAddCmd>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d02f      	beq.n	8011b3a <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ada:	2313      	movs	r3, #19
 8011adc:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011ade:	e02c      	b.n	8011b3a <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ae4:	f107 030c 	add.w	r3, r7, #12
 8011ae8:	2200      	movs	r2, #0
 8011aea:	4619      	mov	r1, r3
 8011aec:	2012      	movs	r0, #18
 8011aee:	f000 fc33 	bl	8012358 <LoRaMacCommandsAddCmd>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d022      	beq.n	8011b3e <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011af8:	2313      	movs	r3, #19
 8011afa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011afc:	e01f      	b.n	8011b3e <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011afe:	2301      	movs	r3, #1
 8011b00:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011b02:	f000 fa50 	bl	8011fa6 <LoRaMacClassBIsAcquisitionInProgress>
 8011b06:	4603      	mov	r3, r0
 8011b08:	f083 0301 	eor.w	r3, r3, #1
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d008      	beq.n	8011b24 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011b12:	2000      	movs	r0, #0
 8011b14:	f000 fa29 	bl	8011f6a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011b18:	2000      	movs	r0, #0
 8011b1a:	f000 fa4b 	bl	8011fb4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011b22:	e00d      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011b24:	2301      	movs	r3, #1
 8011b26:	75fb      	strb	r3, [r7, #23]
            break;
 8011b28:	e00a      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011b2a:	bf00      	nop
 8011b2c:	e008      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b2e:	bf00      	nop
 8011b30:	e006      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b32:	bf00      	nop
 8011b34:	e004      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b36:	bf00      	nop
 8011b38:	e002      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b3a:	bf00      	nop
 8011b3c:	e000      	b.n	8011b40 <LoRaMacMlmeRequest+0x22c>
            break;
 8011b3e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011b40:	4b12      	ldr	r3, [pc, #72]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 8011b42:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d010      	beq.n	8011b72 <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011b50:	f000 ff90 	bl	8012a74 <LoRaMacConfirmQueueGetCnt>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d110      	bne.n	8011b7c <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011b5a:	4b0c      	ldr	r3, [pc, #48]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b62:	4a0a      	ldr	r2, [pc, #40]	; (8011b8c <LoRaMacMlmeRequest+0x278>)
 8011b64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b68:	f36f 0382 	bfc	r3, #2, #1
 8011b6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011b70:	e004      	b.n	8011b7c <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011b72:	f107 0310 	add.w	r3, r7, #16
 8011b76:	4618      	mov	r0, r3
 8011b78:	f000 fe2e 	bl	80127d8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3718      	adds	r7, #24
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	200008a0 	.word	0x200008a0
 8011b8c:	20000454 	.word	0x20000454
 8011b90:	2000095c 	.word	0x2000095c

08011b94 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b08c      	sub	sp, #48	; 0x30
 8011b98:	af02      	add	r7, sp, #8
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011bac:	2300      	movs	r3, #0
 8011bae:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	e0d4      	b.n	8011d6c <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011bc2:	f7fc fbd9 	bl	800e378 <LoRaMacIsBusy>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d001      	beq.n	8011bd0 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	e0cd      	b.n	8011d6c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011bd4:	2214      	movs	r2, #20
 8011bd6:	2100      	movs	r1, #0
 8011bd8:	4866      	ldr	r0, [pc, #408]	; (8011d74 <LoRaMacMcpsRequest+0x1e0>)
 8011bda:	f004 fc7d 	bl	80164d8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bde:	4b66      	ldr	r3, [pc, #408]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011be0:	2201      	movs	r2, #1
 8011be2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011be6:	4b64      	ldr	r3, [pc, #400]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011be8:	2201      	movs	r2, #1
 8011bea:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2b03      	cmp	r3, #3
 8011bf4:	d03d      	beq.n	8011c72 <LoRaMacMcpsRequest+0xde>
 8011bf6:	2b03      	cmp	r3, #3
 8011bf8:	dc4f      	bgt.n	8011c9a <LoRaMacMcpsRequest+0x106>
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <LoRaMacMcpsRequest+0x70>
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d019      	beq.n	8011c36 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011c02:	e04a      	b.n	8011c9a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011c04:	2301      	movs	r3, #1
 8011c06:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c08:	4b5b      	ldr	r3, [pc, #364]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011c10:	7b3b      	ldrb	r3, [r7, #12]
 8011c12:	2202      	movs	r2, #2
 8011c14:	f362 1347 	bfi	r3, r2, #5, #3
 8011c18:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	791b      	ldrb	r3, [r3, #4]
 8011c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	689b      	ldr	r3, [r3, #8]
 8011c26:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	899b      	ldrh	r3, [r3, #12]
 8011c2c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	7b9b      	ldrb	r3, [r3, #14]
 8011c32:	777b      	strb	r3, [r7, #29]
            break;
 8011c34:	e032      	b.n	8011c9c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c36:	2301      	movs	r3, #1
 8011c38:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	7bdb      	ldrb	r3, [r3, #15]
 8011c3e:	2b08      	cmp	r3, #8
 8011c40:	bf28      	it	cs
 8011c42:	2308      	movcs	r3, #8
 8011c44:	b2da      	uxtb	r2, r3
 8011c46:	4b4c      	ldr	r3, [pc, #304]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011c48:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011c4c:	7b3b      	ldrb	r3, [r7, #12]
 8011c4e:	2204      	movs	r2, #4
 8011c50:	f362 1347 	bfi	r3, r2, #5, #3
 8011c54:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	791b      	ldrb	r3, [r3, #4]
 8011c5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	899b      	ldrh	r3, [r3, #12]
 8011c68:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	7b9b      	ldrb	r3, [r3, #14]
 8011c6e:	777b      	strb	r3, [r7, #29]
            break;
 8011c70:	e014      	b.n	8011c9c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c72:	2301      	movs	r3, #1
 8011c74:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c76:	4b40      	ldr	r3, [pc, #256]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011c7e:	7b3b      	ldrb	r3, [r7, #12]
 8011c80:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011c84:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	891b      	ldrh	r3, [r3, #8]
 8011c90:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	7a9b      	ldrb	r3, [r3, #10]
 8011c96:	777b      	strb	r3, [r7, #29]
            break;
 8011c98:	e000      	b.n	8011c9c <LoRaMacMcpsRequest+0x108>
            break;
 8011c9a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ca0:	4b36      	ldr	r3, [pc, #216]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011ca2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011ca6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca8:	4b34      	ldr	r3, [pc, #208]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cae:	f107 0214 	add.w	r2, r7, #20
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f002 f8c9 	bl	8013e4c <RegionGetPhyParam>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	b25b      	sxtb	r3, r3
 8011cc2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	bfb8      	it	lt
 8011cca:	4613      	movlt	r3, r2
 8011ccc:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011cce:	7f3b      	ldrb	r3, [r7, #28]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d044      	beq.n	8011d5e <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011cd4:	4b29      	ldr	r3, [pc, #164]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011cd6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011cda:	f083 0301 	eor.w	r3, r3, #1
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d019      	beq.n	8011d18 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011ce4:	7f7b      	ldrb	r3, [r7, #29]
 8011ce6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ce8:	4b24      	ldr	r3, [pc, #144]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011cea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011cee:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011cf0:	4b22      	ldr	r3, [pc, #136]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cf6:	f107 0108 	add.w	r1, r7, #8
 8011cfa:	2205      	movs	r2, #5
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f002 f8e1 	bl	8013ec4 <RegionVerify>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d005      	beq.n	8011d14 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011d08:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d0c:	4b1b      	ldr	r3, [pc, #108]	; (8011d7c <LoRaMacMcpsRequest+0x1e8>)
 8011d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011d12:	e001      	b.n	8011d18 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d14:	2303      	movs	r3, #3
 8011d16:	e029      	b.n	8011d6c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011d18:	8bfa      	ldrh	r2, [r7, #30]
 8011d1a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011d1e:	f107 000c 	add.w	r0, r7, #12
 8011d22:	78fb      	ldrb	r3, [r7, #3]
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	4613      	mov	r3, r2
 8011d28:	6a3a      	ldr	r2, [r7, #32]
 8011d2a:	f7fd fcef 	bl	800f70c <Send>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10c      	bne.n	8011d56 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	781a      	ldrb	r2, [r3, #0]
 8011d40:	4b0d      	ldr	r3, [pc, #52]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011d42:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011d46:	4a0c      	ldr	r2, [pc, #48]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011d48:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d4c:	f043 0301 	orr.w	r3, r3, #1
 8011d50:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011d54:	e003      	b.n	8011d5e <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011d56:	4b08      	ldr	r3, [pc, #32]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011d5e:	4b06      	ldr	r3, [pc, #24]	; (8011d78 <LoRaMacMcpsRequest+0x1e4>)
 8011d60:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	611a      	str	r2, [r3, #16]

    return status;
 8011d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3728      	adds	r7, #40	; 0x28
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	2000088c 	.word	0x2000088c
 8011d78:	20000454 	.word	0x20000454
 8011d7c:	2000095c 	.word	0x2000095c

08011d80 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	4603      	mov	r3, r0
 8011d88:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011d8a:	79fb      	ldrb	r3, [r7, #7]
 8011d8c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011d8e:	4b0a      	ldr	r3, [pc, #40]	; (8011db8 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d94:	f107 010c 	add.w	r1, r7, #12
 8011d98:	220f      	movs	r2, #15
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f002 f892 	bl	8013ec4 <RegionVerify>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d003      	beq.n	8011dae <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011da6:	4a04      	ldr	r2, [pc, #16]	; (8011db8 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011da8:	79fb      	ldrb	r3, [r7, #7]
 8011daa:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011dae:	bf00      	nop
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2000095c 	.word	0x2000095c

08011dbc <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b08c      	sub	sp, #48	; 0x30
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	607a      	str	r2, [r7, #4]
 8011dc8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	7c1b      	ldrb	r3, [r3, #16]
 8011dd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	7c5b      	ldrb	r3, [r3, #17]
 8011ddc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	689a      	ldr	r2, [r3, #8]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	795b      	ldrb	r3, [r3, #5]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 808b 	beq.w	8011f08 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011df2:	2302      	movs	r3, #2
 8011df4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	7c9b      	ldrb	r3, [r3, #18]
 8011dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	7cdb      	ldrb	r3, [r3, #19]
 8011e04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f002 f81e 	bl	8013e4c <RegionGetPhyParam>
 8011e10:	4603      	mov	r3, r0
 8011e12:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011e14:	6a3b      	ldr	r3, [r7, #32]
 8011e16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011e1a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011e1e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011e22:	4293      	cmp	r3, r2
 8011e24:	bfb8      	it	lt
 8011e26:	4613      	movlt	r3, r2
 8011e28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011e2c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e30:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d106      	bne.n	8011e46 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e44:	e060      	b.n	8011f08 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	689b      	ldr	r3, [r3, #8]
 8011e4a:	68fa      	ldr	r2, [r7, #12]
 8011e4c:	8992      	ldrh	r2, [r2, #12]
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d303      	bcc.n	8011e5a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011e52:	2301      	movs	r3, #1
 8011e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e58:	e002      	b.n	8011e60 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	689b      	ldr	r3, [r3, #8]
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	8992      	ldrh	r2, [r2, #12]
 8011e68:	4611      	mov	r1, r2
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	89d2      	ldrh	r2, [r2, #14]
 8011e6e:	440a      	add	r2, r1
 8011e70:	4293      	cmp	r3, r2
 8011e72:	d349      	bcc.n	8011f08 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011e74:	2308      	movs	r3, #8
 8011e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	7cdb      	ldrb	r3, [r3, #19]
 8011e7e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e82:	4611      	mov	r1, r2
 8011e84:	4618      	mov	r0, r3
 8011e86:	f001 ffe1 	bl	8013e4c <RegionGetPhyParam>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011e8e:	6a3b      	ldr	r3, [r7, #32]
 8011e90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	89d2      	ldrh	r2, [r2, #14]
 8011e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ea0:	fb02 f201 	mul.w	r2, r2, r1
 8011ea4:	1a9b      	subs	r3, r3, r2
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d12e      	bne.n	8011f08 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011eaa:	2322      	movs	r3, #34	; 0x22
 8011eac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011eb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	7c9b      	ldrb	r3, [r3, #18]
 8011ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	7cdb      	ldrb	r3, [r3, #19]
 8011ec4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011ec8:	4611      	mov	r1, r2
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f001 ffbe 	bl	8013e4c <RegionGetPhyParam>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011ed4:	6a3b      	ldr	r3, [r7, #32]
 8011ed6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011eda:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011ede:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d110      	bne.n	8011f08 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	791b      	ldrb	r3, [r3, #4]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d009      	beq.n	8011f08 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011ef4:	2302      	movs	r3, #2
 8011ef6:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	7cdb      	ldrb	r3, [r3, #19]
 8011efc:	f107 0214 	add.w	r2, r7, #20
 8011f00:	4611      	mov	r1, r2
 8011f02:	4618      	mov	r0, r3
 8011f04:	f001 ffcc 	bl	8013ea0 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011f0e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f16:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011f18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3730      	adds	r7, #48	; 0x30
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	789b      	ldrb	r3, [r3, #2]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d107      	bne.n	8011f4a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	68b9      	ldr	r1, [r7, #8]
 8011f40:	68f8      	ldr	r0, [r7, #12]
 8011f42:	f7ff ff3b 	bl	8011dbc <CalcNextV10X>
 8011f46:	4603      	mov	r3, r0
 8011f48:	e000      	b.n	8011f4c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f60:	bf00      	nop
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bc80      	pop	{r7}
 8011f68:	4770      	bx	lr

08011f6a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011f6a:	b480      	push	{r7}
 8011f6c:	b083      	sub	sp, #12
 8011f6e:	af00      	add	r7, sp, #0
 8011f70:	4603      	mov	r3, r0
 8011f72:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bc80      	pop	{r7}
 8011f7c:	4770      	bx	lr

08011f7e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b083      	sub	sp, #12
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	4603      	mov	r3, r0
 8011f86:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bc80      	pop	{r7}
 8011f90:	4770      	bx	lr

08011f92 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011f92:	b480      	push	{r7}
 8011f94:	b083      	sub	sp, #12
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	4603      	mov	r3, r0
 8011f9a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f9c:	bf00      	nop
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bc80      	pop	{r7}
 8011fa4:	4770      	bx	lr

08011fa6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011fa6:	b480      	push	{r7}
 8011fa8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011faa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bc80      	pop	{r7}
 8011fb2:	4770      	bx	lr

08011fb4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fbc:	bf00      	nop
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bc80      	pop	{r7}
 8011fc4:	4770      	bx	lr

08011fc6 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011fc6:	b480      	push	{r7}
 8011fc8:	b083      	sub	sp, #12
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fce:	bf00      	nop
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bc80      	pop	{r7}
 8011fd6:	4770      	bx	lr

08011fd8 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b083      	sub	sp, #12
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fe0:	bf00      	nop
 8011fe2:	370c      	adds	r7, #12
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bc80      	pop	{r7}
 8011fe8:	4770      	bx	lr

08011fea <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011fea:	b480      	push	{r7}
 8011fec:	b083      	sub	sp, #12
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	6078      	str	r0, [r7, #4]
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011ff6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bc80      	pop	{r7}
 8012000:	4770      	bx	lr

08012002 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012002:	b480      	push	{r7}
 8012004:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012006:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012008:	4618      	mov	r0, r3
 801200a:	46bd      	mov	sp, r7
 801200c:	bc80      	pop	{r7}
 801200e:	4770      	bx	lr

08012010 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012010:	b480      	push	{r7}
 8012012:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012014:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012016:	4618      	mov	r0, r3
 8012018:	46bd      	mov	sp, r7
 801201a:	bc80      	pop	{r7}
 801201c:	4770      	bx	lr

0801201e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801201e:	b480      	push	{r7}
 8012020:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012022:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012024:	4618      	mov	r0, r3
 8012026:	46bd      	mov	sp, r7
 8012028:	bc80      	pop	{r7}
 801202a:	4770      	bx	lr

0801202c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801202c:	b480      	push	{r7}
 801202e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012030:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012032:	4618      	mov	r0, r3
 8012034:	46bd      	mov	sp, r7
 8012036:	bc80      	pop	{r7}
 8012038:	4770      	bx	lr

0801203a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801203a:	b480      	push	{r7}
 801203c:	b083      	sub	sp, #12
 801203e:	af00      	add	r7, sp, #0
 8012040:	4603      	mov	r3, r0
 8012042:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012044:	bf00      	nop
 8012046:	370c      	adds	r7, #12
 8012048:	46bd      	mov	sp, r7
 801204a:	bc80      	pop	{r7}
 801204c:	4770      	bx	lr

0801204e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801204e:	b480      	push	{r7}
 8012050:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012052:	bf00      	nop
 8012054:	46bd      	mov	sp, r7
 8012056:	bc80      	pop	{r7}
 8012058:	4770      	bx	lr

0801205a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801205a:	b480      	push	{r7}
 801205c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801205e:	bf00      	nop
 8012060:	46bd      	mov	sp, r7
 8012062:	bc80      	pop	{r7}
 8012064:	4770      	bx	lr

08012066 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012066:	b480      	push	{r7}
 8012068:	b083      	sub	sp, #12
 801206a:	af00      	add	r7, sp, #0
 801206c:	4603      	mov	r3, r0
 801206e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012070:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012072:	4618      	mov	r0, r3
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	bc80      	pop	{r7}
 801207a:	4770      	bx	lr

0801207c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012084:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012086:	4618      	mov	r0, r3
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	bc80      	pop	{r7}
 801208e:	4770      	bx	lr

08012090 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012098:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801209a:	4618      	mov	r0, r3
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	bc80      	pop	{r7}
 80120a2:	4770      	bx	lr

080120a4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80120a4:	b480      	push	{r7}
 80120a6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120a8:	bf00      	nop
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bc80      	pop	{r7}
 80120ae:	4770      	bx	lr

080120b0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	4603      	mov	r3, r0
 80120b8:	6039      	str	r1, [r7, #0]
 80120ba:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80120bc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120be:	4618      	mov	r0, r3
 80120c0:	370c      	adds	r7, #12
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bc80      	pop	{r7}
 80120c6:	4770      	bx	lr

080120c8 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	4603      	mov	r3, r0
 80120d0:	603a      	str	r2, [r7, #0]
 80120d2:	80fb      	strh	r3, [r7, #6]
 80120d4:	460b      	mov	r3, r1
 80120d6:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	bc80      	pop	{r7}
 80120e0:	4770      	bx	lr

080120e2 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80120e2:	b480      	push	{r7}
 80120e4:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120e6:	bf00      	nop
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bc80      	pop	{r7}
 80120ec:	4770      	bx	lr

080120ee <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80120ee:	b480      	push	{r7}
 80120f0:	b083      	sub	sp, #12
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80120f6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bc80      	pop	{r7}
 8012100:	4770      	bx	lr

08012102 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012102:	b480      	push	{r7}
 8012104:	b083      	sub	sp, #12
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801210a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801210c:	4618      	mov	r0, r3
 801210e:	370c      	adds	r7, #12
 8012110:	46bd      	mov	sp, r7
 8012112:	bc80      	pop	{r7}
 8012114:	4770      	bx	lr

08012116 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012116:	b480      	push	{r7}
 8012118:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801211a:	bf00      	nop
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr

08012122 <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8012122:	b480      	push	{r7}
 8012124:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012126:	bf00      	nop
 8012128:	46bd      	mov	sp, r7
 801212a:	bc80      	pop	{r7}
 801212c:	4770      	bx	lr

0801212e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801212e:	b480      	push	{r7}
 8012130:	b085      	sub	sp, #20
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801213a:	2300      	movs	r3, #0
 801213c:	81fb      	strh	r3, [r7, #14]
 801213e:	e00a      	b.n	8012156 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012140:	89fb      	ldrh	r3, [r7, #14]
 8012142:	68ba      	ldr	r2, [r7, #8]
 8012144:	4413      	add	r3, r2
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d001      	beq.n	8012150 <IsSlotFree+0x22>
        {
            return false;
 801214c:	2300      	movs	r3, #0
 801214e:	e006      	b.n	801215e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012150:	89fb      	ldrh	r3, [r7, #14]
 8012152:	3301      	adds	r3, #1
 8012154:	81fb      	strh	r3, [r7, #14]
 8012156:	89fb      	ldrh	r3, [r7, #14]
 8012158:	2b0f      	cmp	r3, #15
 801215a:	d9f1      	bls.n	8012140 <IsSlotFree+0x12>
        }
    }
    return true;
 801215c:	2301      	movs	r3, #1
}
 801215e:	4618      	mov	r0, r3
 8012160:	3714      	adds	r7, #20
 8012162:	46bd      	mov	sp, r7
 8012164:	bc80      	pop	{r7}
 8012166:	4770      	bx	lr

08012168 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801216e:	2300      	movs	r3, #0
 8012170:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012172:	e007      	b.n	8012184 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012174:	79fb      	ldrb	r3, [r7, #7]
 8012176:	3301      	adds	r3, #1
 8012178:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801217a:	79fb      	ldrb	r3, [r7, #7]
 801217c:	2b0f      	cmp	r3, #15
 801217e:	d101      	bne.n	8012184 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	e012      	b.n	80121aa <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012184:	79fb      	ldrb	r3, [r7, #7]
 8012186:	011b      	lsls	r3, r3, #4
 8012188:	3308      	adds	r3, #8
 801218a:	4a0a      	ldr	r2, [pc, #40]	; (80121b4 <MallocNewMacCommandSlot+0x4c>)
 801218c:	4413      	add	r3, r2
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff ffcd 	bl	801212e <IsSlotFree>
 8012194:	4603      	mov	r3, r0
 8012196:	f083 0301 	eor.w	r3, r3, #1
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b00      	cmp	r3, #0
 801219e:	d1e9      	bne.n	8012174 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	011b      	lsls	r3, r3, #4
 80121a4:	3308      	adds	r3, #8
 80121a6:	4a03      	ldr	r2, [pc, #12]	; (80121b4 <MallocNewMacCommandSlot+0x4c>)
 80121a8:	4413      	add	r3, r2
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	3708      	adds	r7, #8
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	20000cac 	.word	0x20000cac

080121b8 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d101      	bne.n	80121ca <FreeMacCommandSlot+0x12>
    {
        return false;
 80121c6:	2300      	movs	r3, #0
 80121c8:	e005      	b.n	80121d6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80121ca:	2210      	movs	r2, #16
 80121cc:	2100      	movs	r1, #0
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f004 f982 	bl	80164d8 <memset1>

    return true;
 80121d4:	2301      	movs	r3, #1
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80121de:	b480      	push	{r7}
 80121e0:	b083      	sub	sp, #12
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d101      	bne.n	80121f0 <LinkedListInit+0x12>
    {
        return false;
 80121ec:	2300      	movs	r3, #0
 80121ee:	e006      	b.n	80121fe <LinkedListInit+0x20>
    }

    list->First = NULL;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	605a      	str	r2, [r3, #4]

    return true;
 80121fc:	2301      	movs	r3, #1
}
 80121fe:	4618      	mov	r0, r3
 8012200:	370c      	adds	r7, #12
 8012202:	46bd      	mov	sp, r7
 8012204:	bc80      	pop	{r7}
 8012206:	4770      	bx	lr

08012208 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d002      	beq.n	801221e <LinkedListAdd+0x16>
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d101      	bne.n	8012222 <LinkedListAdd+0x1a>
    {
        return false;
 801221e:	2300      	movs	r3, #0
 8012220:	e015      	b.n	801224e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d102      	bne.n	8012230 <LinkedListAdd+0x28>
    {
        list->First = element;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	683a      	ldr	r2, [r7, #0]
 801222e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d003      	beq.n	8012240 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	683a      	ldr	r2, [r7, #0]
 801223e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	2200      	movs	r2, #0
 8012244:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	605a      	str	r2, [r3, #4]

    return true;
 801224c:	2301      	movs	r3, #1
}
 801224e:	4618      	mov	r0, r3
 8012250:	370c      	adds	r7, #12
 8012252:	46bd      	mov	sp, r7
 8012254:	bc80      	pop	{r7}
 8012256:	4770      	bx	lr

08012258 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d002      	beq.n	801226e <LinkedListGetPrevious+0x16>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d101      	bne.n	8012272 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801226e:	2300      	movs	r3, #0
 8012270:	e016      	b.n	80122a0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012278:	683a      	ldr	r2, [r7, #0]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	429a      	cmp	r2, r3
 801227e:	d00c      	beq.n	801229a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012280:	e002      	b.n	8012288 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d007      	beq.n	801229e <LinkedListGetPrevious+0x46>
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	429a      	cmp	r2, r3
 8012296:	d1f4      	bne.n	8012282 <LinkedListGetPrevious+0x2a>
 8012298:	e001      	b.n	801229e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801229a:	2300      	movs	r3, #0
 801229c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801229e:	68fb      	ldr	r3, [r7, #12]
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3714      	adds	r7, #20
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bc80      	pop	{r7}
 80122a8:	4770      	bx	lr

080122aa <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d002      	beq.n	80122c0 <LinkedListRemove+0x16>
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <LinkedListRemove+0x1a>
    {
        return false;
 80122c0:	2300      	movs	r3, #0
 80122c2:	e020      	b.n	8012306 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7ff ffc6 	bl	8012258 <LinkedListGetPrevious>
 80122cc:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	683a      	ldr	r2, [r7, #0]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d103      	bne.n	80122e0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	683a      	ldr	r2, [r7, #0]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d102      	bne.n	80122f0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	68fa      	ldr	r2, [r7, #12]
 80122ee:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d003      	beq.n	80122fe <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2200      	movs	r2, #0
 8012302:	601a      	str	r2, [r3, #0]

    return true;
 8012304:	2301      	movs	r3, #1
}
 8012306:	4618      	mov	r0, r3
 8012308:	3710      	adds	r7, #16
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801230e:	b480      	push	{r7}
 8012310:	b083      	sub	sp, #12
 8012312:	af00      	add	r7, sp, #0
 8012314:	4603      	mov	r3, r0
 8012316:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012318:	79fb      	ldrb	r3, [r7, #7]
 801231a:	2b05      	cmp	r3, #5
 801231c:	d004      	beq.n	8012328 <IsSticky+0x1a>
 801231e:	2b05      	cmp	r3, #5
 8012320:	db04      	blt.n	801232c <IsSticky+0x1e>
 8012322:	3b08      	subs	r3, #8
 8012324:	2b02      	cmp	r3, #2
 8012326:	d801      	bhi.n	801232c <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8012328:	2301      	movs	r3, #1
 801232a:	e000      	b.n	801232e <IsSticky+0x20>
        default:
            return false;
 801232c:	2300      	movs	r3, #0
    }
}
 801232e:	4618      	mov	r0, r3
 8012330:	370c      	adds	r7, #12
 8012332:	46bd      	mov	sp, r7
 8012334:	bc80      	pop	{r7}
 8012336:	4770      	bx	lr

08012338 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012338:	b580      	push	{r7, lr}
 801233a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801233c:	22fc      	movs	r2, #252	; 0xfc
 801233e:	2100      	movs	r1, #0
 8012340:	4804      	ldr	r0, [pc, #16]	; (8012354 <LoRaMacCommandsInit+0x1c>)
 8012342:	f004 f8c9 	bl	80164d8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012346:	4803      	ldr	r0, [pc, #12]	; (8012354 <LoRaMacCommandsInit+0x1c>)
 8012348:	f7ff ff49 	bl	80121de <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop
 8012354:	20000cac 	.word	0x20000cac

08012358 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
 8012364:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012366:	68bb      	ldr	r3, [r7, #8]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801236c:	2301      	movs	r3, #1
 801236e:	e033      	b.n	80123d8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012370:	f7ff fefa 	bl	8012168 <MallocNewMacCommandSlot>
 8012374:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d101      	bne.n	8012380 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801237c:	2302      	movs	r3, #2
 801237e:	e02b      	b.n	80123d8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012380:	6979      	ldr	r1, [r7, #20]
 8012382:	4817      	ldr	r0, [pc, #92]	; (80123e0 <LoRaMacCommandsAddCmd+0x88>)
 8012384:	f7ff ff40 	bl	8012208 <LinkedListAdd>
 8012388:	4603      	mov	r3, r0
 801238a:	f083 0301 	eor.w	r3, r3, #1
 801238e:	b2db      	uxtb	r3, r3
 8012390:	2b00      	cmp	r3, #0
 8012392:	d001      	beq.n	8012398 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012394:	2305      	movs	r3, #5
 8012396:	e01f      	b.n	80123d8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	7bfa      	ldrb	r2, [r7, #15]
 801239c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	3305      	adds	r3, #5
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	b292      	uxth	r2, r2
 80123ac:	68b9      	ldr	r1, [r7, #8]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f004 f857 	bl	8016462 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7ff ffa9 	bl	801230e <IsSticky>
 80123bc:	4603      	mov	r3, r0
 80123be:	461a      	mov	r2, r3
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80123c4:	4b06      	ldr	r3, [pc, #24]	; (80123e0 <LoRaMacCommandsAddCmd+0x88>)
 80123c6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4413      	add	r3, r2
 80123ce:	3301      	adds	r3, #1
 80123d0:	4a03      	ldr	r2, [pc, #12]	; (80123e0 <LoRaMacCommandsAddCmd+0x88>)
 80123d2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3718      	adds	r7, #24
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	20000cac 	.word	0x20000cac

080123e4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b082      	sub	sp, #8
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d101      	bne.n	80123f6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80123f2:	2301      	movs	r3, #1
 80123f4:	e021      	b.n	801243a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80123f6:	6879      	ldr	r1, [r7, #4]
 80123f8:	4812      	ldr	r0, [pc, #72]	; (8012444 <LoRaMacCommandsRemoveCmd+0x60>)
 80123fa:	f7ff ff56 	bl	80122aa <LinkedListRemove>
 80123fe:	4603      	mov	r3, r0
 8012400:	f083 0301 	eor.w	r3, r3, #1
 8012404:	b2db      	uxtb	r3, r3
 8012406:	2b00      	cmp	r3, #0
 8012408:	d001      	beq.n	801240e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801240a:	2303      	movs	r3, #3
 801240c:	e015      	b.n	801243a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801240e:	4b0d      	ldr	r3, [pc, #52]	; (8012444 <LoRaMacCommandsRemoveCmd+0x60>)
 8012410:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	689b      	ldr	r3, [r3, #8]
 8012418:	1ad3      	subs	r3, r2, r3
 801241a:	3b01      	subs	r3, #1
 801241c:	4a09      	ldr	r2, [pc, #36]	; (8012444 <LoRaMacCommandsRemoveCmd+0x60>)
 801241e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7ff fec8 	bl	80121b8 <FreeMacCommandSlot>
 8012428:	4603      	mov	r3, r0
 801242a:	f083 0301 	eor.w	r3, r3, #1
 801242e:	b2db      	uxtb	r3, r3
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012434:	2305      	movs	r3, #5
 8012436:	e000      	b.n	801243a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012438:	2300      	movs	r3, #0
}
 801243a:	4618      	mov	r0, r3
 801243c:	3708      	adds	r7, #8
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	20000cac 	.word	0x20000cac

08012448 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801244e:	4b0f      	ldr	r3, [pc, #60]	; (801248c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012454:	e012      	b.n	801247c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	7b1b      	ldrb	r3, [r3, #12]
 801245a:	f083 0301 	eor.w	r3, r3, #1
 801245e:	b2db      	uxtb	r3, r3
 8012460:	2b00      	cmp	r3, #0
 8012462:	d008      	beq.n	8012476 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7ff ffba 	bl	80123e4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	607b      	str	r3, [r7, #4]
 8012474:	e002      	b.n	801247c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1e9      	bne.n	8012456 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	20000cac 	.word	0x20000cac

08012490 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012496:	4b0e      	ldr	r3, [pc, #56]	; (80124d0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801249c:	e00f      	b.n	80124be <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	791b      	ldrb	r3, [r3, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7ff ff30 	bl	801230e <IsSticky>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d002      	beq.n	80124ba <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7ff ff95 	bl	80123e4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1ec      	bne.n	801249e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	20000cac 	.word	0x20000cac

080124d4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d101      	bne.n	80124e6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124e2:	2301      	movs	r3, #1
 80124e4:	e005      	b.n	80124f2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80124e6:	4b05      	ldr	r3, [pc, #20]	; (80124fc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80124e8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bc80      	pop	{r7}
 80124fa:	4770      	bx	lr
 80124fc:	20000cac 	.word	0x20000cac

08012500 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 801250c:	4b25      	ldr	r3, [pc, #148]	; (80125a4 <LoRaMacCommandsSerializeCmds+0xa4>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012512:	2300      	movs	r3, #0
 8012514:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <LoRaMacCommandsSerializeCmds+0x22>
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d126      	bne.n	8012570 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012522:	2301      	movs	r3, #1
 8012524:	e039      	b.n	801259a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012526:	7efb      	ldrb	r3, [r7, #27]
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	1ad2      	subs	r2, r2, r3
 801252c:	69fb      	ldr	r3, [r7, #28]
 801252e:	689b      	ldr	r3, [r3, #8]
 8012530:	3301      	adds	r3, #1
 8012532:	429a      	cmp	r2, r3
 8012534:	d320      	bcc.n	8012578 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012536:	7efb      	ldrb	r3, [r7, #27]
 8012538:	1c5a      	adds	r2, r3, #1
 801253a:	76fa      	strb	r2, [r7, #27]
 801253c:	461a      	mov	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	4413      	add	r3, r2
 8012542:	69fa      	ldr	r2, [r7, #28]
 8012544:	7912      	ldrb	r2, [r2, #4]
 8012546:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012548:	7efb      	ldrb	r3, [r7, #27]
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	18d0      	adds	r0, r2, r3
 801254e:	69fb      	ldr	r3, [r7, #28]
 8012550:	1d59      	adds	r1, r3, #5
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	689b      	ldr	r3, [r3, #8]
 8012556:	b29b      	uxth	r3, r3
 8012558:	461a      	mov	r2, r3
 801255a:	f003 ff82 	bl	8016462 <memcpy1>
            itr += curElement->PayloadSize;
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	689b      	ldr	r3, [r3, #8]
 8012562:	b2da      	uxtb	r2, r3
 8012564:	7efb      	ldrb	r3, [r7, #27]
 8012566:	4413      	add	r3, r2
 8012568:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1d7      	bne.n	8012526 <LoRaMacCommandsSerializeCmds+0x26>
 8012576:	e009      	b.n	801258c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012578:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801257a:	e007      	b.n	801258c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012582:	69f8      	ldr	r0, [r7, #28]
 8012584:	f7ff ff2e 	bl	80123e4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1f4      	bne.n	801257c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012592:	68b8      	ldr	r0, [r7, #8]
 8012594:	f7ff ff9e 	bl	80124d4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012598:	2300      	movs	r3, #0
}
 801259a:	4618      	mov	r0, r3
 801259c:	3720      	adds	r7, #32
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	20000cac 	.word	0x20000cac

080125a8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80125a8:	b480      	push	{r7}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e016      	b.n	80125e8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80125ba:	4b0e      	ldr	r3, [pc, #56]	; (80125f4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80125c6:	e00b      	b.n	80125e0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	7b1b      	ldrb	r3, [r3, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d004      	beq.n	80125da <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2201      	movs	r2, #1
 80125d4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80125d6:	2300      	movs	r3, #0
 80125d8:	e006      	b.n	80125e8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d1f0      	bne.n	80125c8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bc80      	pop	{r7}
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	20000cac 	.word	0x20000cac

080125f8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80125f8:	b480      	push	{r7}
 80125fa:	b085      	sub	sp, #20
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	4603      	mov	r3, r0
 8012600:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012606:	79fb      	ldrb	r3, [r7, #7]
 8012608:	3b02      	subs	r3, #2
 801260a:	2b11      	cmp	r3, #17
 801260c:	d850      	bhi.n	80126b0 <LoRaMacCommandsGetCmdSize+0xb8>
 801260e:	a201      	add	r2, pc, #4	; (adr r2, 8012614 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012614:	0801265d 	.word	0x0801265d
 8012618:	08012663 	.word	0x08012663
 801261c:	08012669 	.word	0x08012669
 8012620:	0801266f 	.word	0x0801266f
 8012624:	08012675 	.word	0x08012675
 8012628:	0801267b 	.word	0x0801267b
 801262c:	08012681 	.word	0x08012681
 8012630:	08012687 	.word	0x08012687
 8012634:	0801268d 	.word	0x0801268d
 8012638:	080126b1 	.word	0x080126b1
 801263c:	080126b1 	.word	0x080126b1
 8012640:	08012693 	.word	0x08012693
 8012644:	080126b1 	.word	0x080126b1
 8012648:	080126b1 	.word	0x080126b1
 801264c:	08012699 	.word	0x08012699
 8012650:	0801269f 	.word	0x0801269f
 8012654:	080126a5 	.word	0x080126a5
 8012658:	080126ab 	.word	0x080126ab
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801265c:	2303      	movs	r3, #3
 801265e:	73fb      	strb	r3, [r7, #15]
            break;
 8012660:	e027      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012662:	2305      	movs	r3, #5
 8012664:	73fb      	strb	r3, [r7, #15]
            break;
 8012666:	e024      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012668:	2302      	movs	r3, #2
 801266a:	73fb      	strb	r3, [r7, #15]
            break;
 801266c:	e021      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801266e:	2305      	movs	r3, #5
 8012670:	73fb      	strb	r3, [r7, #15]
            break;
 8012672:	e01e      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012674:	2301      	movs	r3, #1
 8012676:	73fb      	strb	r3, [r7, #15]
            break;
 8012678:	e01b      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801267a:	2306      	movs	r3, #6
 801267c:	73fb      	strb	r3, [r7, #15]
            break;
 801267e:	e018      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012680:	2302      	movs	r3, #2
 8012682:	73fb      	strb	r3, [r7, #15]
            break;
 8012684:	e015      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012686:	2302      	movs	r3, #2
 8012688:	73fb      	strb	r3, [r7, #15]
            break;
 801268a:	e012      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801268c:	2305      	movs	r3, #5
 801268e:	73fb      	strb	r3, [r7, #15]
            break;
 8012690:	e00f      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012692:	2306      	movs	r3, #6
 8012694:	73fb      	strb	r3, [r7, #15]
            break;
 8012696:	e00c      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012698:	2301      	movs	r3, #1
 801269a:	73fb      	strb	r3, [r7, #15]
            break;
 801269c:	e009      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801269e:	2305      	movs	r3, #5
 80126a0:	73fb      	strb	r3, [r7, #15]
            break;
 80126a2:	e006      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80126a4:	2304      	movs	r3, #4
 80126a6:	73fb      	strb	r3, [r7, #15]
            break;
 80126a8:	e003      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80126aa:	2304      	movs	r3, #4
 80126ac:	73fb      	strb	r3, [r7, #15]
            break;
 80126ae:	e000      	b.n	80126b2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80126b0:	bf00      	nop
        }
    }
    return cidSize;
 80126b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3714      	adds	r7, #20
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bc80      	pop	{r7}
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop

080126c0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4a07      	ldr	r2, [pc, #28]	; (80126e8 <IncreaseBufferPointer+0x28>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d102      	bne.n	80126d6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126d0:	4b06      	ldr	r3, [pc, #24]	; (80126ec <IncreaseBufferPointer+0x2c>)
 80126d2:	607b      	str	r3, [r7, #4]
 80126d4:	e002      	b.n	80126dc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	3304      	adds	r3, #4
 80126da:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80126dc:	687b      	ldr	r3, [r7, #4]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bc80      	pop	{r7}
 80126e6:	4770      	bx	lr
 80126e8:	20000dc4 	.word	0x20000dc4
 80126ec:	20000db4 	.word	0x20000db4

080126f0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	4603      	mov	r3, r0
 80126f8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80126fa:	79fb      	ldrb	r3, [r7, #7]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d101      	bne.n	8012704 <IsListEmpty+0x14>
    {
        return true;
 8012700:	2301      	movs	r3, #1
 8012702:	e000      	b.n	8012706 <IsListEmpty+0x16>
    }
    return false;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	bc80      	pop	{r7}
 801270e:	4770      	bx	lr

08012710 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801271a:	79fb      	ldrb	r3, [r7, #7]
 801271c:	2b04      	cmp	r3, #4
 801271e:	d901      	bls.n	8012724 <IsListFull+0x14>
    {
        return true;
 8012720:	2301      	movs	r3, #1
 8012722:	e000      	b.n	8012726 <IsListFull+0x16>
    }
    return false;
 8012724:	2300      	movs	r3, #0
}
 8012726:	4618      	mov	r0, r3
 8012728:	370c      	adds	r7, #12
 801272a:	46bd      	mov	sp, r7
 801272c:	bc80      	pop	{r7}
 801272e:	4770      	bx	lr

08012730 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
 801273c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012742:	4b13      	ldr	r3, [pc, #76]	; (8012790 <GetElement+0x60>)
 8012744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff ffd1 	bl	80126f0 <IsListEmpty>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d001      	beq.n	8012758 <GetElement+0x28>
    {
        return NULL;
 8012754:	2300      	movs	r3, #0
 8012756:	e017      	b.n	8012788 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012758:	2300      	movs	r3, #0
 801275a:	74fb      	strb	r3, [r7, #19]
 801275c:	e00d      	b.n	801277a <GetElement+0x4a>
    {
        if( element->Request == request )
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	7bfa      	ldrb	r2, [r7, #15]
 8012764:	429a      	cmp	r2, r3
 8012766:	d101      	bne.n	801276c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	e00d      	b.n	8012788 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801276c:	6978      	ldr	r0, [r7, #20]
 801276e:	f7ff ffa7 	bl	80126c0 <IncreaseBufferPointer>
 8012772:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012774:	7cfb      	ldrb	r3, [r7, #19]
 8012776:	3301      	adds	r3, #1
 8012778:	74fb      	strb	r3, [r7, #19]
 801277a:	4b05      	ldr	r3, [pc, #20]	; (8012790 <GetElement+0x60>)
 801277c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012780:	7cfa      	ldrb	r2, [r7, #19]
 8012782:	429a      	cmp	r2, r3
 8012784:	d3eb      	bcc.n	801275e <GetElement+0x2e>
    }

    return NULL;
 8012786:	2300      	movs	r3, #0
}
 8012788:	4618      	mov	r0, r3
 801278a:	3718      	adds	r7, #24
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20000da8 	.word	0x20000da8

08012794 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801279c:	4a0c      	ldr	r2, [pc, #48]	; (80127d0 <LoRaMacConfirmQueueInit+0x3c>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80127a2:	4b0b      	ldr	r3, [pc, #44]	; (80127d0 <LoRaMacConfirmQueueInit+0x3c>)
 80127a4:	2200      	movs	r2, #0
 80127a6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80127aa:	4b09      	ldr	r3, [pc, #36]	; (80127d0 <LoRaMacConfirmQueueInit+0x3c>)
 80127ac:	4a09      	ldr	r2, [pc, #36]	; (80127d4 <LoRaMacConfirmQueueInit+0x40>)
 80127ae:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80127b0:	4b07      	ldr	r3, [pc, #28]	; (80127d0 <LoRaMacConfirmQueueInit+0x3c>)
 80127b2:	4a08      	ldr	r2, [pc, #32]	; (80127d4 <LoRaMacConfirmQueueInit+0x40>)
 80127b4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80127b6:	2214      	movs	r2, #20
 80127b8:	21ff      	movs	r1, #255	; 0xff
 80127ba:	4806      	ldr	r0, [pc, #24]	; (80127d4 <LoRaMacConfirmQueueInit+0x40>)
 80127bc:	f003 fe8c 	bl	80164d8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80127c0:	4b03      	ldr	r3, [pc, #12]	; (80127d0 <LoRaMacConfirmQueueInit+0x3c>)
 80127c2:	2201      	movs	r2, #1
 80127c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20000da8 	.word	0x20000da8
 80127d4:	20000db4 	.word	0x20000db4

080127d8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80127e0:	4b19      	ldr	r3, [pc, #100]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 80127e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7ff ff92 	bl	8012710 <IsListFull>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d001      	beq.n	80127f6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80127f2:	2300      	movs	r3, #0
 80127f4:	e023      	b.n	801283e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80127f6:	4b14      	ldr	r3, [pc, #80]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	7812      	ldrb	r2, [r2, #0]
 80127fe:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012800:	4b11      	ldr	r3, [pc, #68]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 8012802:	689b      	ldr	r3, [r3, #8]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	7852      	ldrb	r2, [r2, #1]
 8012808:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801280a:	4b0f      	ldr	r3, [pc, #60]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 801280c:	689b      	ldr	r3, [r3, #8]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	78d2      	ldrb	r2, [r2, #3]
 8012812:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012814:	4b0c      	ldr	r3, [pc, #48]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	2200      	movs	r2, #0
 801281a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801281c:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 801281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012822:	3301      	adds	r3, #1
 8012824:	b2da      	uxtb	r2, r3
 8012826:	4b08      	ldr	r3, [pc, #32]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 8012828:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801282c:	4b06      	ldr	r3, [pc, #24]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 801282e:	689b      	ldr	r3, [r3, #8]
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff ff45 	bl	80126c0 <IncreaseBufferPointer>
 8012836:	4603      	mov	r3, r0
 8012838:	4a03      	ldr	r2, [pc, #12]	; (8012848 <LoRaMacConfirmQueueAdd+0x70>)
 801283a:	6093      	str	r3, [r2, #8]

    return true;
 801283c:	2301      	movs	r3, #1
}
 801283e:	4618      	mov	r0, r3
 8012840:	3708      	adds	r7, #8
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	20000da8 	.word	0x20000da8

0801284c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801284c:	b580      	push	{r7, lr}
 801284e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012850:	4b0e      	ldr	r3, [pc, #56]	; (801288c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012856:	4618      	mov	r0, r3
 8012858:	f7ff ff4a 	bl	80126f0 <IsListEmpty>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d001      	beq.n	8012866 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012862:	2300      	movs	r3, #0
 8012864:	e010      	b.n	8012888 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012866:	4b09      	ldr	r3, [pc, #36]	; (801288c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012868:	f893 3020 	ldrb.w	r3, [r3, #32]
 801286c:	3b01      	subs	r3, #1
 801286e:	b2da      	uxtb	r2, r3
 8012870:	4b06      	ldr	r3, [pc, #24]	; (801288c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012872:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012876:	4b05      	ldr	r3, [pc, #20]	; (801288c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	4618      	mov	r0, r3
 801287c:	f7ff ff20 	bl	80126c0 <IncreaseBufferPointer>
 8012880:	4603      	mov	r3, r0
 8012882:	4a02      	ldr	r2, [pc, #8]	; (801288c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012884:	6053      	str	r3, [r2, #4]

    return true;
 8012886:	2301      	movs	r3, #1
}
 8012888:	4618      	mov	r0, r3
 801288a:	bd80      	pop	{r7, pc}
 801288c:	20000da8 	.word	0x20000da8

08012890 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	4603      	mov	r3, r0
 8012898:	460a      	mov	r2, r1
 801289a:	71fb      	strb	r3, [r7, #7]
 801289c:	4613      	mov	r3, r2
 801289e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80128a0:	2300      	movs	r3, #0
 80128a2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128a4:	4b10      	ldr	r3, [pc, #64]	; (80128e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff ff20 	bl	80126f0 <IsListEmpty>
 80128b0:	4603      	mov	r3, r0
 80128b2:	f083 0301 	eor.w	r3, r3, #1
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d011      	beq.n	80128e0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128be:	6859      	ldr	r1, [r3, #4]
 80128c0:	4b09      	ldr	r3, [pc, #36]	; (80128e8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128c2:	689a      	ldr	r2, [r3, #8]
 80128c4:	79bb      	ldrb	r3, [r7, #6]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff ff32 	bl	8012730 <GetElement>
 80128cc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d005      	beq.n	80128e0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	79fa      	ldrb	r2, [r7, #7]
 80128d8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2201      	movs	r2, #1
 80128de:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80128e0:	bf00      	nop
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	20000da8 	.word	0x20000da8

080128ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b084      	sub	sp, #16
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	4603      	mov	r3, r0
 80128f4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80128f6:	2300      	movs	r3, #0
 80128f8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128fa:	4b10      	ldr	r3, [pc, #64]	; (801293c <LoRaMacConfirmQueueGetStatus+0x50>)
 80128fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012900:	4618      	mov	r0, r3
 8012902:	f7ff fef5 	bl	80126f0 <IsListEmpty>
 8012906:	4603      	mov	r3, r0
 8012908:	f083 0301 	eor.w	r3, r3, #1
 801290c:	b2db      	uxtb	r3, r3
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00e      	beq.n	8012930 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012912:	4b0a      	ldr	r3, [pc, #40]	; (801293c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012914:	6859      	ldr	r1, [r3, #4]
 8012916:	4b09      	ldr	r3, [pc, #36]	; (801293c <LoRaMacConfirmQueueGetStatus+0x50>)
 8012918:	689a      	ldr	r2, [r3, #8]
 801291a:	79fb      	ldrb	r3, [r7, #7]
 801291c:	4618      	mov	r0, r3
 801291e:	f7ff ff07 	bl	8012730 <GetElement>
 8012922:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d002      	beq.n	8012930 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	785b      	ldrb	r3, [r3, #1]
 801292e:	e000      	b.n	8012932 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012930:	2301      	movs	r3, #1
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	20000da8 	.word	0x20000da8

08012940 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801294a:	4b16      	ldr	r3, [pc, #88]	; (80129a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012950:	4a14      	ldr	r2, [pc, #80]	; (80129a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012952:	79fb      	ldrb	r3, [r7, #7]
 8012954:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012958:	4b12      	ldr	r3, [pc, #72]	; (80129a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801295e:	4618      	mov	r0, r3
 8012960:	f7ff fec6 	bl	80126f0 <IsListEmpty>
 8012964:	4603      	mov	r3, r0
 8012966:	f083 0301 	eor.w	r3, r3, #1
 801296a:	b2db      	uxtb	r3, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	d015      	beq.n	801299c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	79fa      	ldrb	r2, [r7, #7]
 8012974:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	78db      	ldrb	r3, [r3, #3]
 801297a:	f083 0301 	eor.w	r3, r3, #1
 801297e:	b2db      	uxtb	r3, r3
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	2201      	movs	r2, #1
 8012988:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801298a:	68f8      	ldr	r0, [r7, #12]
 801298c:	f7ff fe98 	bl	80126c0 <IncreaseBufferPointer>
 8012990:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012992:	4b04      	ldr	r3, [pc, #16]	; (80129a4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	68fa      	ldr	r2, [r7, #12]
 8012998:	429a      	cmp	r2, r3
 801299a:	d1e9      	bne.n	8012970 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801299c:	bf00      	nop
 801299e:	3710      	adds	r7, #16
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	20000da8 	.word	0x20000da8

080129a8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	4603      	mov	r3, r0
 80129b0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80129b2:	4b09      	ldr	r3, [pc, #36]	; (80129d8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80129b4:	6859      	ldr	r1, [r3, #4]
 80129b6:	4b08      	ldr	r3, [pc, #32]	; (80129d8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80129b8:	689a      	ldr	r2, [r3, #8]
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7ff feb7 	bl	8012730 <GetElement>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d001      	beq.n	80129cc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e000      	b.n	80129ce <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80129cc:	2300      	movs	r3, #0
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3708      	adds	r7, #8
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	20000da8 	.word	0x20000da8

080129dc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80129e4:	4b22      	ldr	r3, [pc, #136]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129ea:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80129ec:	2300      	movs	r3, #0
 80129ee:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80129f0:	2300      	movs	r3, #0
 80129f2:	73fb      	strb	r3, [r7, #15]
 80129f4:	e032      	b.n	8012a5c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80129f6:	4b1e      	ldr	r3, [pc, #120]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	781a      	ldrb	r2, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012a00:	4b1b      	ldr	r3, [pc, #108]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	785a      	ldrb	r2, [r3, #1]
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012a0a:	4b19      	ldr	r3, [pc, #100]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	789b      	ldrb	r3, [r3, #2]
 8012a10:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012a12:	7b7b      	ldrb	r3, [r7, #13]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d005      	beq.n	8012a24 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012a18:	4b15      	ldr	r3, [pc, #84]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	4798      	blx	r3
 8012a22:	e00b      	b.n	8012a3c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012a24:	4b12      	ldr	r3, [pc, #72]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012a2c:	4b10      	ldr	r3, [pc, #64]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	785b      	ldrb	r3, [r3, #1]
 8012a32:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012a34:	4b0e      	ldr	r3, [pc, #56]	; (8012a70 <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	78db      	ldrb	r3, [r3, #3]
 8012a3a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012a3c:	f7ff ff06 	bl	801284c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012a40:	7b7b      	ldrb	r3, [r7, #13]
 8012a42:	f083 0301 	eor.w	r3, r3, #1
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d004      	beq.n	8012a56 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012a4c:	f107 0308 	add.w	r3, r7, #8
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ff fec1 	bl	80127d8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012a56:	7bfb      	ldrb	r3, [r7, #15]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	73fb      	strb	r3, [r7, #15]
 8012a5c:	7bfa      	ldrb	r2, [r7, #15]
 8012a5e:	7bbb      	ldrb	r3, [r7, #14]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d3c8      	bcc.n	80129f6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012a64:	bf00      	nop
 8012a66:	bf00      	nop
 8012a68:	3710      	adds	r7, #16
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	20000da8 	.word	0x20000da8

08012a74 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012a74:	b480      	push	{r7}
 8012a76:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012a78:	4b03      	ldr	r3, [pc, #12]	; (8012a88 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bc80      	pop	{r7}
 8012a84:	4770      	bx	lr
 8012a86:	bf00      	nop
 8012a88:	20000da8 	.word	0x20000da8

08012a8c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012a90:	4b06      	ldr	r3, [pc, #24]	; (8012aac <LoRaMacConfirmQueueIsFull+0x20>)
 8012a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ff fe3a 	bl	8012710 <IsListFull>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d001      	beq.n	8012aa6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012aa6:	2300      	movs	r3, #0
    }
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	20000da8 	.word	0x20000da8

08012ab0 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b08e      	sub	sp, #56	; 0x38
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	607b      	str	r3, [r7, #4]
 8012aba:	460b      	mov	r3, r1
 8012abc:	817b      	strh	r3, [r7, #10]
 8012abe:	4613      	mov	r3, r2
 8012ac0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d101      	bne.n	8012acc <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ac8:	230a      	movs	r3, #10
 8012aca:	e087      	b.n	8012bdc <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012acc:	2300      	movs	r3, #0
 8012ace:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	623b      	str	r3, [r7, #32]
 8012ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ade:	2200      	movs	r2, #0
 8012ae0:	601a      	str	r2, [r3, #0]
 8012ae2:	605a      	str	r2, [r3, #4]
 8012ae4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	613b      	str	r3, [r7, #16]
 8012aea:	f107 0314 	add.w	r3, r7, #20
 8012aee:	2200      	movs	r2, #0
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	605a      	str	r2, [r3, #4]
 8012af4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012af6:	2301      	movs	r3, #1
 8012af8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012afa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012afe:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	0a1b      	lsrs	r3, r3, #8
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	0c1b      	lsrs	r3, r3, #16
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	0e1b      	lsrs	r3, r3, #24
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b26:	0a1b      	lsrs	r3, r3, #8
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b2e:	0c1b      	lsrs	r3, r3, #16
 8012b30:	b2db      	uxtb	r3, r3
 8012b32:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b36:	0e1b      	lsrs	r3, r3, #24
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012b3c:	e049      	b.n	8012bd2 <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012b3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012b44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b46:	3301      	adds	r3, #1
 8012b48:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012b4a:	f107 0320 	add.w	r3, r7, #32
 8012b4e:	7a7a      	ldrb	r2, [r7, #9]
 8012b50:	f107 0010 	add.w	r0, r7, #16
 8012b54:	2110      	movs	r1, #16
 8012b56:	f7f9 f9fa 	bl	800bf4e <SecureElementAesEncrypt>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b60:	230f      	movs	r3, #15
 8012b62:	e03b      	b.n	8012bdc <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b64:	2300      	movs	r3, #0
 8012b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b6a:	e01f      	b.n	8012bac <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012b6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b74:	4413      	add	r3, r2
 8012b76:	461a      	mov	r2, r3
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	7819      	ldrb	r1, [r3, #0]
 8012b7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012b86:	4413      	add	r3, r2
 8012b88:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012b8c:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b94:	4403      	add	r3, r0
 8012b96:	4618      	mov	r0, r3
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	4403      	add	r3, r0
 8012b9c:	404a      	eors	r2, r1
 8012b9e:	b2d2      	uxtb	r2, r2
 8012ba0:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012bb0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012bb4:	2a10      	cmp	r2, #16
 8012bb6:	bfa8      	it	ge
 8012bb8:	2210      	movge	r2, #16
 8012bba:	b212      	sxth	r2, r2
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	dbd5      	blt.n	8012b6c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012bc0:	897b      	ldrh	r3, [r7, #10]
 8012bc2:	3b10      	subs	r3, #16
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012bc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bcc:	3310      	adds	r3, #16
 8012bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012bd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	dcb1      	bgt.n	8012b3e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012bda:	2300      	movs	r3, #0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3738      	adds	r7, #56	; 0x38
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012be4:	b490      	push	{r4, r7}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	4611      	mov	r1, r2
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	4623      	mov	r3, r4
 8012bf4:	80fb      	strh	r3, [r7, #6]
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	717b      	strb	r3, [r7, #5]
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	713b      	strb	r3, [r7, #4]
 8012bfe:	4613      	mov	r3, r2
 8012c00:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d101      	bne.n	8012c0c <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c08:	230a      	movs	r3, #10
 8012c0a:	e04e      	b.n	8012caa <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	2249      	movs	r2, #73	; 0x49
 8012c10:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	3301      	adds	r3, #1
 8012c16:	2200      	movs	r2, #0
 8012c18:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	3302      	adds	r3, #2
 8012c1e:	2200      	movs	r2, #0
 8012c20:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012c22:	69bb      	ldr	r3, [r7, #24]
 8012c24:	3303      	adds	r3, #3
 8012c26:	2200      	movs	r2, #0
 8012c28:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	2200      	movs	r2, #0
 8012c30:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	3305      	adds	r3, #5
 8012c36:	78fa      	ldrb	r2, [r7, #3]
 8012c38:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012c3a:	69bb      	ldr	r3, [r7, #24]
 8012c3c:	3306      	adds	r3, #6
 8012c3e:	693a      	ldr	r2, [r7, #16]
 8012c40:	b2d2      	uxtb	r2, r2
 8012c42:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	0a1a      	lsrs	r2, r3, #8
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	3307      	adds	r3, #7
 8012c4c:	b2d2      	uxtb	r2, r2
 8012c4e:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	0c1a      	lsrs	r2, r3, #16
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	3308      	adds	r3, #8
 8012c58:	b2d2      	uxtb	r2, r2
 8012c5a:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	0e1a      	lsrs	r2, r3, #24
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	3309      	adds	r3, #9
 8012c64:	b2d2      	uxtb	r2, r2
 8012c66:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	330a      	adds	r3, #10
 8012c6c:	697a      	ldr	r2, [r7, #20]
 8012c6e:	b2d2      	uxtb	r2, r2
 8012c70:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	0a1a      	lsrs	r2, r3, #8
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	330b      	adds	r3, #11
 8012c7a:	b2d2      	uxtb	r2, r2
 8012c7c:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	0c1a      	lsrs	r2, r3, #16
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	330c      	adds	r3, #12
 8012c86:	b2d2      	uxtb	r2, r2
 8012c88:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	0e1a      	lsrs	r2, r3, #24
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	330d      	adds	r3, #13
 8012c92:	b2d2      	uxtb	r2, r2
 8012c94:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012c96:	69bb      	ldr	r3, [r7, #24]
 8012c98:	330e      	adds	r3, #14
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	330f      	adds	r3, #15
 8012ca2:	88fa      	ldrh	r2, [r7, #6]
 8012ca4:	b2d2      	uxtb	r2, r2
 8012ca6:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bc90      	pop	{r4, r7}
 8012cb2:	4770      	bx	lr

08012cb4 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012cb4:	b590      	push	{r4, r7, lr}
 8012cb6:	b08b      	sub	sp, #44	; 0x2c
 8012cb8:	af04      	add	r7, sp, #16
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	4608      	mov	r0, r1
 8012cbe:	4611      	mov	r1, r2
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	807b      	strh	r3, [r7, #2]
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	707b      	strb	r3, [r7, #1]
 8012cca:	4613      	mov	r3, r2
 8012ccc:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d002      	beq.n	8012cda <ComputeCmacB0+0x26>
 8012cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012cda:	230a      	movs	r3, #10
 8012cdc:	e024      	b.n	8012d28 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012cde:	887b      	ldrh	r3, [r7, #2]
 8012ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ce4:	d901      	bls.n	8012cea <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012ce6:	230e      	movs	r3, #14
 8012ce8:	e01e      	b.n	8012d28 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012cea:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012cee:	783a      	ldrb	r2, [r7, #0]
 8012cf0:	7879      	ldrb	r1, [r7, #1]
 8012cf2:	8878      	ldrh	r0, [r7, #2]
 8012cf4:	f107 0308 	add.w	r3, r7, #8
 8012cf8:	9302      	str	r3, [sp, #8]
 8012cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfc:	9301      	str	r3, [sp, #4]
 8012cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	4623      	mov	r3, r4
 8012d04:	f7ff ff6e 	bl	8012be4 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012d08:	7879      	ldrb	r1, [r7, #1]
 8012d0a:	887a      	ldrh	r2, [r7, #2]
 8012d0c:	f107 0008 	add.w	r0, r7, #8
 8012d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d12:	9300      	str	r3, [sp, #0]
 8012d14:	460b      	mov	r3, r1
 8012d16:	6879      	ldr	r1, [r7, #4]
 8012d18:	f7f9 f8cc 	bl	800beb4 <SecureElementComputeAesCmac>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d22:	230f      	movs	r3, #15
 8012d24:	e000      	b.n	8012d28 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	371c      	adds	r7, #28
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd90      	pop	{r4, r7, pc}

08012d30 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012d30:	b590      	push	{r4, r7, lr}
 8012d32:	b0cd      	sub	sp, #308	; 0x134
 8012d34:	af04      	add	r7, sp, #16
 8012d36:	1d3c      	adds	r4, r7, #4
 8012d38:	6020      	str	r0, [r4, #0]
 8012d3a:	460c      	mov	r4, r1
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	4619      	mov	r1, r3
 8012d40:	1cbb      	adds	r3, r7, #2
 8012d42:	4622      	mov	r2, r4
 8012d44:	801a      	strh	r2, [r3, #0]
 8012d46:	1c7b      	adds	r3, r7, #1
 8012d48:	4602      	mov	r2, r0
 8012d4a:	701a      	strb	r2, [r3, #0]
 8012d4c:	463b      	mov	r3, r7
 8012d4e:	460a      	mov	r2, r1
 8012d50:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012d52:	1d3b      	adds	r3, r7, #4
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d101      	bne.n	8012d5e <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d5a:	230a      	movs	r3, #10
 8012d5c:	e04b      	b.n	8012df6 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012d5e:	1cbb      	adds	r3, r7, #2
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d66:	d901      	bls.n	8012d6c <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012d68:	230e      	movs	r3, #14
 8012d6a:	e044      	b.n	8012df6 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012d6c:	f107 030c 	add.w	r3, r7, #12
 8012d70:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012d74:	2100      	movs	r1, #0
 8012d76:	4618      	mov	r0, r3
 8012d78:	f003 fbae 	bl	80164d8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012d7c:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012d80:	463b      	mov	r3, r7
 8012d82:	781a      	ldrb	r2, [r3, #0]
 8012d84:	1c7b      	adds	r3, r7, #1
 8012d86:	7819      	ldrb	r1, [r3, #0]
 8012d88:	1cbb      	adds	r3, r7, #2
 8012d8a:	8818      	ldrh	r0, [r3, #0]
 8012d8c:	f107 030c 	add.w	r3, r7, #12
 8012d90:	9302      	str	r3, [sp, #8]
 8012d92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012d96:	9301      	str	r3, [sp, #4]
 8012d98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012d9c:	9300      	str	r3, [sp, #0]
 8012d9e:	4623      	mov	r3, r4
 8012da0:	f7ff ff20 	bl	8012be4 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012da4:	f107 030c 	add.w	r3, r7, #12
 8012da8:	3310      	adds	r3, #16
 8012daa:	1cba      	adds	r2, r7, #2
 8012dac:	8812      	ldrh	r2, [r2, #0]
 8012dae:	1d39      	adds	r1, r7, #4
 8012db0:	6809      	ldr	r1, [r1, #0]
 8012db2:	4618      	mov	r0, r3
 8012db4:	f003 fb55 	bl	8016462 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012db8:	2306      	movs	r3, #6
 8012dba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012dbe:	1cbb      	adds	r3, r7, #2
 8012dc0:	881b      	ldrh	r3, [r3, #0]
 8012dc2:	3310      	adds	r3, #16
 8012dc4:	b299      	uxth	r1, r3
 8012dc6:	1c7b      	adds	r3, r7, #1
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	f107 000c 	add.w	r0, r7, #12
 8012dce:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012dd2:	f7f9 f88d 	bl	800bef0 <SecureElementVerifyAesCmac>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d101      	bne.n	8012de8 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012de4:	2300      	movs	r3, #0
 8012de6:	e006      	b.n	8012df6 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d101      	bne.n	8012df4 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012df0:	2301      	movs	r3, #1
 8012df2:	e000      	b.n	8012df6 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012df4:	230f      	movs	r3, #15
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd90      	pop	{r4, r7, pc}

08012e00 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	6039      	str	r1, [r7, #0]
 8012e0a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	73fb      	strb	r3, [r7, #15]
 8012e10:	e011      	b.n	8012e36 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012e12:	7bfb      	ldrb	r3, [r7, #15]
 8012e14:	4a0c      	ldr	r2, [pc, #48]	; (8012e48 <GetKeyAddrItem+0x48>)
 8012e16:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012e1a:	79fa      	ldrb	r2, [r7, #7]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d107      	bne.n	8012e30 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012e20:	7bfb      	ldrb	r3, [r7, #15]
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	4a08      	ldr	r2, [pc, #32]	; (8012e48 <GetKeyAddrItem+0x48>)
 8012e26:	441a      	add	r2, r3
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e006      	b.n	8012e3e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012e30:	7bfb      	ldrb	r3, [r7, #15]
 8012e32:	3301      	adds	r3, #1
 8012e34:	73fb      	strb	r3, [r7, #15]
 8012e36:	7bfb      	ldrb	r3, [r7, #15]
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d9ea      	bls.n	8012e12 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012e3c:	230c      	movs	r3, #12
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3714      	adds	r7, #20
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bc80      	pop	{r7}
 8012e46:	4770      	bx	lr
 8012e48:	20000114 	.word	0x20000114

08012e4c <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60b9      	str	r1, [r7, #8]
 8012e54:	607a      	str	r2, [r7, #4]
 8012e56:	461a      	mov	r2, r3
 8012e58:	4603      	mov	r3, r0
 8012e5a:	73fb      	strb	r3, [r7, #15]
 8012e5c:	4613      	mov	r3, r2
 8012e5e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012e60:	2300      	movs	r3, #0
 8012e62:	613b      	str	r3, [r7, #16]
 8012e64:	f107 0314 	add.w	r3, r7, #20
 8012e68:	2200      	movs	r2, #0
 8012e6a:	601a      	str	r2, [r3, #0]
 8012e6c:	605a      	str	r2, [r3, #4]
 8012e6e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d002      	beq.n	8012e7c <DeriveSessionKey10x+0x30>
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d003      	beq.n	8012e82 <DeriveSessionKey10x+0x36>
 8012e7a:	e005      	b.n	8012e88 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	743b      	strb	r3, [r7, #16]
            break;
 8012e80:	e004      	b.n	8012e8c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012e82:	2302      	movs	r3, #2
 8012e84:	743b      	strb	r3, [r7, #16]
            break;
 8012e86:	e001      	b.n	8012e8c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012e88:	230b      	movs	r3, #11
 8012e8a:	e02a      	b.n	8012ee2 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	0a1b      	lsrs	r3, r3, #8
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	0c1b      	lsrs	r3, r3, #16
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	0a1b      	lsrs	r3, r3, #8
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	0c1b      	lsrs	r3, r3, #16
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012eb8:	89bb      	ldrh	r3, [r7, #12]
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012ebe:	89bb      	ldrh	r3, [r7, #12]
 8012ec0:	0a1b      	lsrs	r3, r3, #8
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012ec8:	7bfa      	ldrb	r2, [r7, #15]
 8012eca:	f107 0310 	add.w	r3, r7, #16
 8012ece:	2101      	movs	r1, #1
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7f9 f89a 	bl	800c00a <SecureElementDeriveAndStoreKey>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012edc:	230f      	movs	r3, #15
 8012ede:	e000      	b.n	8012ee2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3720      	adds	r7, #32
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
	...

08012eec <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	6039      	str	r1, [r7, #0]
 8012ef6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d101      	bne.n	8012f02 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012efe:	230a      	movs	r3, #10
 8012f00:	e03b      	b.n	8012f7a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012f02:	79fb      	ldrb	r3, [r7, #7]
 8012f04:	3b01      	subs	r3, #1
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	d834      	bhi.n	8012f74 <GetLastFcntDown+0x88>
 8012f0a:	a201      	add	r2, pc, #4	; (adr r2, 8012f10 <GetLastFcntDown+0x24>)
 8012f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f10:	08012f21 	.word	0x08012f21
 8012f14:	08012f39 	.word	0x08012f39
 8012f18:	08012f51 	.word	0x08012f51
 8012f1c:	08012f69 	.word	0x08012f69
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012f20:	4b18      	ldr	r3, [pc, #96]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	691a      	ldr	r2, [r3, #16]
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012f2a:	4b16      	ldr	r3, [pc, #88]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	4b15      	ldr	r3, [pc, #84]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	6912      	ldr	r2, [r2, #16]
 8012f34:	621a      	str	r2, [r3, #32]
            break;
 8012f36:	e01f      	b.n	8012f78 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012f38:	4b12      	ldr	r3, [pc, #72]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	695a      	ldr	r2, [r3, #20]
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012f42:	4b10      	ldr	r3, [pc, #64]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	4b0f      	ldr	r3, [pc, #60]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	6952      	ldr	r2, [r2, #20]
 8012f4c:	621a      	str	r2, [r3, #32]
            break;
 8012f4e:	e013      	b.n	8012f78 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012f50:	4b0c      	ldr	r3, [pc, #48]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	699a      	ldr	r2, [r3, #24]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012f5a:	4b0a      	ldr	r3, [pc, #40]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	4b09      	ldr	r3, [pc, #36]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	6992      	ldr	r2, [r2, #24]
 8012f64:	621a      	str	r2, [r3, #32]
            break;
 8012f66:	e007      	b.n	8012f78 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012f68:	4b06      	ldr	r3, [pc, #24]	; (8012f84 <GetLastFcntDown+0x98>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	69da      	ldr	r2, [r3, #28]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	601a      	str	r2, [r3, #0]
            break;
 8012f72:	e001      	b.n	8012f78 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012f74:	2305      	movs	r3, #5
 8012f76:	e000      	b.n	8012f7a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f78:	2300      	movs	r3, #0
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	370c      	adds	r7, #12
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bc80      	pop	{r7}
 8012f82:	4770      	bx	lr
 8012f84:	20000dcc 	.word	0x20000dcc

08012f88 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	4603      	mov	r3, r0
 8012f90:	6039      	str	r1, [r7, #0]
 8012f92:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012f98:	f107 020c 	add.w	r2, r7, #12
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	4611      	mov	r1, r2
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff ffa3 	bl	8012eec <GetLastFcntDown>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d001      	beq.n	8012fb0 <CheckFCntDown+0x28>
    {
        return false;
 8012fac:	2300      	movs	r3, #0
 8012fae:	e00a      	b.n	8012fc6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	683a      	ldr	r2, [r7, #0]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d803      	bhi.n	8012fc0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012fb8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fbe:	d101      	bne.n	8012fc4 <CheckFCntDown+0x3c>
    {
        return true;
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	e000      	b.n	8012fc6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012fc4:	2300      	movs	r3, #0
    }
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
	...

08012fd0 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	6039      	str	r1, [r7, #0]
 8012fda:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012fdc:	79fb      	ldrb	r3, [r7, #7]
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	2b03      	cmp	r3, #3
 8012fe2:	d81f      	bhi.n	8013024 <UpdateFCntDown+0x54>
 8012fe4:	a201      	add	r2, pc, #4	; (adr r2, 8012fec <UpdateFCntDown+0x1c>)
 8012fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fea:	bf00      	nop
 8012fec:	08012ffd 	.word	0x08012ffd
 8012ff0:	08013007 	.word	0x08013007
 8012ff4:	08013011 	.word	0x08013011
 8012ff8:	0801301b 	.word	0x0801301b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012ffc:	4b0c      	ldr	r3, [pc, #48]	; (8013030 <UpdateFCntDown+0x60>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	611a      	str	r2, [r3, #16]
            break;
 8013004:	e00f      	b.n	8013026 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013006:	4b0a      	ldr	r3, [pc, #40]	; (8013030 <UpdateFCntDown+0x60>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	683a      	ldr	r2, [r7, #0]
 801300c:	615a      	str	r2, [r3, #20]
            break;
 801300e:	e00a      	b.n	8013026 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013010:	4b07      	ldr	r3, [pc, #28]	; (8013030 <UpdateFCntDown+0x60>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	683a      	ldr	r2, [r7, #0]
 8013016:	619a      	str	r2, [r3, #24]
            break;
 8013018:	e005      	b.n	8013026 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801301a:	4b05      	ldr	r3, [pc, #20]	; (8013030 <UpdateFCntDown+0x60>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	683a      	ldr	r2, [r7, #0]
 8013020:	61da      	str	r2, [r3, #28]
            break;
 8013022:	e000      	b.n	8013026 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013024:	bf00      	nop
    }
}
 8013026:	bf00      	nop
 8013028:	370c      	adds	r7, #12
 801302a:	46bd      	mov	sp, r7
 801302c:	bc80      	pop	{r7}
 801302e:	4770      	bx	lr
 8013030:	20000dcc 	.word	0x20000dcc

08013034 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801303a:	4b18      	ldr	r3, [pc, #96]	; (801309c <ResetFCnts+0x68>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2200      	movs	r2, #0
 8013040:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013042:	4b16      	ldr	r3, [pc, #88]	; (801309c <ResetFCnts+0x68>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	f04f 32ff 	mov.w	r2, #4294967295
 801304a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801304c:	4b13      	ldr	r3, [pc, #76]	; (801309c <ResetFCnts+0x68>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f04f 32ff 	mov.w	r2, #4294967295
 8013054:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013056:	4b11      	ldr	r3, [pc, #68]	; (801309c <ResetFCnts+0x68>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f04f 32ff 	mov.w	r2, #4294967295
 801305e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013060:	4b0e      	ldr	r3, [pc, #56]	; (801309c <ResetFCnts+0x68>)
 8013062:	681a      	ldr	r2, [r3, #0]
 8013064:	4b0d      	ldr	r3, [pc, #52]	; (801309c <ResetFCnts+0x68>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	6992      	ldr	r2, [r2, #24]
 801306a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801306c:	2300      	movs	r3, #0
 801306e:	607b      	str	r3, [r7, #4]
 8013070:	e00b      	b.n	801308a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013072:	4b0a      	ldr	r3, [pc, #40]	; (801309c <ResetFCnts+0x68>)
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	3306      	adds	r3, #6
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	f04f 32ff 	mov.w	r2, #4294967295
 8013082:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	3301      	adds	r3, #1
 8013088:	607b      	str	r3, [r7, #4]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	ddf0      	ble.n	8013072 <ResetFCnts+0x3e>
    }
}
 8013090:	bf00      	nop
 8013092:	bf00      	nop
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	bc80      	pop	{r7}
 801309a:	4770      	bx	lr
 801309c:	20000dcc 	.word	0x20000dcc

080130a0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d101      	bne.n	80130b2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80130ae:	2309      	movs	r3, #9
 80130b0:	e01c      	b.n	80130ec <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80130b2:	4a10      	ldr	r2, [pc, #64]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80130b8:	4b0e      	ldr	r3, [pc, #56]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2228      	movs	r2, #40	; 0x28
 80130be:	2100      	movs	r1, #0
 80130c0:	4618      	mov	r0, r3
 80130c2:	f003 fa09 	bl	80164d8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80130c6:	4b0b      	ldr	r3, [pc, #44]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2201      	movs	r2, #1
 80130cc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80130ce:	4b09      	ldr	r3, [pc, #36]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	2201      	movs	r2, #1
 80130d4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80130d6:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2201      	movs	r2, #1
 80130dc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80130de:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <LoRaMacCryptoInit+0x54>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2200      	movs	r2, #0
 80130e4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80130e6:	f7ff ffa5 	bl	8013034 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80130ea:	2300      	movs	r3, #0
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3708      	adds	r7, #8
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	20000dcc 	.word	0x20000dcc

080130f8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013100:	4b04      	ldr	r3, [pc, #16]	; (8013114 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	370c      	adds	r7, #12
 801310e:	46bd      	mov	sp, r7
 8013110:	bc80      	pop	{r7}
 8013112:	4770      	bx	lr
 8013114:	20000dcc 	.word	0x20000dcc

08013118 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d101      	bne.n	801312a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013126:	230a      	movs	r3, #10
 8013128:	e006      	b.n	8013138 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801312a:	4b06      	ldr	r3, [pc, #24]	; (8013144 <LoRaMacCryptoGetFCntUp+0x2c>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	1c5a      	adds	r2, r3, #1
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013136:	2300      	movs	r3, #0
}
 8013138:	4618      	mov	r0, r3
 801313a:	370c      	adds	r7, #12
 801313c:	46bd      	mov	sp, r7
 801313e:	bc80      	pop	{r7}
 8013140:	4770      	bx	lr
 8013142:	bf00      	nop
 8013144:	20000dcc 	.word	0x20000dcc

08013148 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013148:	b5b0      	push	{r4, r5, r7, lr}
 801314a:	b088      	sub	sp, #32
 801314c:	af00      	add	r7, sp, #0
 801314e:	60ba      	str	r2, [r7, #8]
 8013150:	607b      	str	r3, [r7, #4]
 8013152:	4603      	mov	r3, r0
 8013154:	73fb      	strb	r3, [r7, #15]
 8013156:	460b      	mov	r3, r1
 8013158:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 801315a:	2300      	movs	r3, #0
 801315c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801315e:	2300      	movs	r3, #0
 8013160:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013162:	2313      	movs	r3, #19
 8013164:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801316c:	230a      	movs	r3, #10
 801316e:	e04f      	b.n	8013210 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013170:	f107 0214 	add.w	r2, r7, #20
 8013174:	7bfb      	ldrb	r3, [r7, #15]
 8013176:	4611      	mov	r1, r2
 8013178:	4618      	mov	r0, r3
 801317a:	f7ff feb7 	bl	8012eec <GetLastFcntDown>
 801317e:	4603      	mov	r3, r0
 8013180:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013182:	7efb      	ldrb	r3, [r7, #27]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d001      	beq.n	801318c <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 8013188:	7efb      	ldrb	r3, [r7, #27]
 801318a:	e041      	b.n	8013210 <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013192:	d103      	bne.n	801319c <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	68ba      	ldr	r2, [r7, #8]
 8013198:	601a      	str	r2, [r3, #0]
 801319a:	e01e      	b.n	80131da <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	b29b      	uxth	r3, r3
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	dd05      	ble.n	80131b8 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80131ac:	697a      	ldr	r2, [r7, #20]
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	441a      	add	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	e010      	b.n	80131da <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d104      	bne.n	80131c8 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80131c4:	2307      	movs	r3, #7
 80131c6:	e023      	b.n	8013210 <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	0c1b      	lsrs	r3, r3, #16
 80131cc:	041b      	lsls	r3, r3, #16
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	4413      	add	r3, r2
 80131d2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80131da:	4b0f      	ldr	r3, [pc, #60]	; (8013218 <LoRaMacCryptoGetFCntDown+0xd0>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	789b      	ldrb	r3, [r3, #2]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d114      	bne.n	801320e <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	4618      	mov	r0, r3
 80131ea:	f04f 0100 	mov.w	r1, #0
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	461a      	mov	r2, r3
 80131f2:	f04f 0300 	mov.w	r3, #0
 80131f6:	1a84      	subs	r4, r0, r2
 80131f8:	eb61 0503 	sbc.w	r5, r1, r3
 80131fc:	89ba      	ldrh	r2, [r7, #12]
 80131fe:	f04f 0300 	mov.w	r3, #0
 8013202:	4294      	cmp	r4, r2
 8013204:	eb75 0303 	sbcs.w	r3, r5, r3
 8013208:	db01      	blt.n	801320e <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801320a:	2308      	movs	r3, #8
 801320c:	e000      	b.n	8013210 <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801320e:	2300      	movs	r3, #0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3720      	adds	r7, #32
 8013214:	46bd      	mov	sp, r7
 8013216:	bdb0      	pop	{r4, r5, r7, pc}
 8013218:	20000dcc 	.word	0x20000dcc

0801321c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 801321c:	b480      	push	{r7}
 801321e:	b085      	sub	sp, #20
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d101      	bne.n	801322e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801322a:	230a      	movs	r3, #10
 801322c:	e017      	b.n	801325e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801322e:	2300      	movs	r3, #0
 8013230:	60fb      	str	r3, [r7, #12]
 8013232:	e010      	b.n	8013256 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013234:	4b0c      	ldr	r3, [pc, #48]	; (8013268 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013236:	6819      	ldr	r1, [r3, #0]
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	222c      	movs	r2, #44	; 0x2c
 801323c:	fb02 f303 	mul.w	r3, r2, r3
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	4413      	add	r3, r2
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	3206      	adds	r2, #6
 8013248:	0092      	lsls	r2, r2, #2
 801324a:	440a      	add	r2, r1
 801324c:	3204      	adds	r2, #4
 801324e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	3301      	adds	r3, #1
 8013254:	60fb      	str	r3, [r7, #12]
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	ddeb      	ble.n	8013234 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801325c:	2300      	movs	r3, #0
}
 801325e:	4618      	mov	r0, r3
 8013260:	3714      	adds	r7, #20
 8013262:	46bd      	mov	sp, r7
 8013264:	bc80      	pop	{r7}
 8013266:	4770      	bx	lr
 8013268:	20000dcc 	.word	0x20000dcc

0801326c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	4603      	mov	r3, r0
 8013274:	6039      	str	r1, [r7, #0]
 8013276:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013278:	79fb      	ldrb	r3, [r7, #7]
 801327a:	6839      	ldr	r1, [r7, #0]
 801327c:	4618      	mov	r0, r3
 801327e:	f7f8 fdbb 	bl	800bdf8 <SecureElementSetKey>
 8013282:	4603      	mov	r3, r0
 8013284:	2b00      	cmp	r3, #0
 8013286:	d001      	beq.n	801328c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013288:	230f      	movs	r3, #15
 801328a:	e018      	b.n	80132be <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801328c:	79fb      	ldrb	r3, [r7, #7]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d114      	bne.n	80132bc <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013292:	4b0d      	ldr	r3, [pc, #52]	; (80132c8 <LoRaMacCryptoSetKey+0x5c>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	789b      	ldrb	r3, [r3, #2]
 8013298:	79fa      	ldrb	r2, [r7, #7]
 801329a:	4611      	mov	r1, r2
 801329c:	4618      	mov	r0, r3
 801329e:	f000 fa3f 	bl	8013720 <LoRaMacCryptoDeriveMcRootKey>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d001      	beq.n	80132ac <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132a8:	230f      	movs	r3, #15
 80132aa:	e008      	b.n	80132be <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80132ac:	2004      	movs	r0, #4
 80132ae:	f000 fa62 	bl	8013776 <LoRaMacCryptoDeriveMcKEKey>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132b8:	230f      	movs	r3, #15
 80132ba:	e000      	b.n	80132be <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	20000dcc 	.word	0x20000dcc

080132cc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af02      	add	r7, sp, #8
 80132d2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d101      	bne.n	80132de <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132da:	230a      	movs	r3, #10
 80132dc:	e033      	b.n	8013346 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80132de:	2301      	movs	r3, #1
 80132e0:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80132e2:	2300      	movs	r3, #0
 80132e4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80132e6:	f107 0308 	add.w	r3, r7, #8
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7f8 ff4a 	bl	800c184 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80132f0:	68ba      	ldr	r2, [r7, #8]
 80132f2:	4b17      	ldr	r3, [pc, #92]	; (8013350 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	b292      	uxth	r2, r2
 80132f8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80132fa:	4b15      	ldr	r3, [pc, #84]	; (8013350 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	889a      	ldrh	r2, [r3, #4]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f000 fc18 	bl	8013b3a <LoRaMacSerializerJoinRequest>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013310:	2311      	movs	r3, #17
 8013312:	e018      	b.n	8013346 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6819      	ldr	r1, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	3318      	adds	r3, #24
 801331c:	7bfa      	ldrb	r2, [r7, #15]
 801331e:	9300      	str	r3, [sp, #0]
 8013320:	4613      	mov	r3, r2
 8013322:	2213      	movs	r2, #19
 8013324:	2000      	movs	r0, #0
 8013326:	f7f8 fdc5 	bl	800beb4 <SecureElementComputeAesCmac>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d001      	beq.n	8013334 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013330:	230f      	movs	r3, #15
 8013332:	e008      	b.n	8013346 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 fc00 	bl	8013b3a <LoRaMacSerializerJoinRequest>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013340:	2311      	movs	r3, #17
 8013342:	e000      	b.n	8013346 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013344:	2300      	movs	r3, #0
}
 8013346:	4618      	mov	r0, r3
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	20000dcc 	.word	0x20000dcc

08013354 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013354:	b590      	push	{r4, r7, lr}
 8013356:	b097      	sub	sp, #92	; 0x5c
 8013358:	af04      	add	r7, sp, #16
 801335a:	4603      	mov	r3, r0
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
 8013360:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d002      	beq.n	801336e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d101      	bne.n	8013372 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801336e:	230a      	movs	r3, #10
 8013370:	e0bd      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013372:	2313      	movs	r3, #19
 8013374:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013378:	2300      	movs	r3, #0
 801337a:	61bb      	str	r3, [r7, #24]
 801337c:	f107 031c 	add.w	r3, r7, #28
 8013380:	221d      	movs	r2, #29
 8013382:	2100      	movs	r1, #0
 8013384:	4618      	mov	r0, r3
 8013386:	f007 fc25 	bl	801abd4 <memset>
    uint8_t versionMinor         = 0;
 801338a:	2300      	movs	r3, #0
 801338c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801338e:	4b5a      	ldr	r3, [pc, #360]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	889b      	ldrh	r3, [r3, #4]
 8013394:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681c      	ldr	r4, [r3, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	791b      	ldrb	r3, [r3, #4]
 80133a0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80133a4:	7bf8      	ldrb	r0, [r7, #15]
 80133a6:	f107 0217 	add.w	r2, r7, #23
 80133aa:	9202      	str	r2, [sp, #8]
 80133ac:	f107 0218 	add.w	r2, r7, #24
 80133b0:	9201      	str	r2, [sp, #4]
 80133b2:	9300      	str	r3, [sp, #0]
 80133b4:	4623      	mov	r3, r4
 80133b6:	460a      	mov	r2, r1
 80133b8:	68b9      	ldr	r1, [r7, #8]
 80133ba:	f7f8 fe66 	bl	800c08a <SecureElementProcessJoinAccept>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d001      	beq.n	80133c8 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133c4:	230f      	movs	r3, #15
 80133c6:	e092      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6818      	ldr	r0, [r3, #0]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	791b      	ldrb	r3, [r3, #4]
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	f107 0318 	add.w	r3, r7, #24
 80133d6:	4619      	mov	r1, r3
 80133d8:	f003 f843 	bl	8016462 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f000 f9ed 	bl	80137bc <LoRaMacParserJoinAccept>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d001      	beq.n	80133ec <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80133e8:	2310      	movs	r3, #16
 80133ea:	e080      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	799b      	ldrb	r3, [r3, #6]
 80133f0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	79db      	ldrb	r3, [r3, #7]
 80133f6:	021b      	lsls	r3, r3, #8
 80133f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80133fa:	4313      	orrs	r3, r2
 80133fc:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	7a1b      	ldrb	r3, [r3, #8]
 8013402:	041b      	lsls	r3, r3, #16
 8013404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013406:	4313      	orrs	r3, r2
 8013408:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 801340a:	4b3b      	ldr	r3, [pc, #236]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013412:	429a      	cmp	r2, r3
 8013414:	d010      	beq.n	8013438 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013416:	4b38      	ldr	r3, [pc, #224]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801341c:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801341e:	7dfb      	ldrb	r3, [r7, #23]
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f000 f97c 	bl	8013720 <LoRaMacCryptoDeriveMcRootKey>
 8013428:	4603      	mov	r3, r0
 801342a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801342e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <LoRaMacCryptoHandleJoinAccept+0xee>
 8013436:	e001      	b.n	801343c <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013438:	2303      	movs	r3, #3
 801343a:	e058      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 801343c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013440:	e055      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013442:	2004      	movs	r0, #4
 8013444:	f000 f997 	bl	8013776 <LoRaMacCryptoDeriveMcKEKey>
 8013448:	4603      	mov	r3, r0
 801344a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801344e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013452:	2b00      	cmp	r3, #0
 8013454:	d002      	beq.n	801345c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801345a:	e048      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	7a5b      	ldrb	r3, [r3, #9]
 8013460:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	7a9b      	ldrb	r3, [r3, #10]
 8013466:	021b      	lsls	r3, r3, #8
 8013468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801346a:	4313      	orrs	r3, r2
 801346c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	7adb      	ldrb	r3, [r3, #11]
 8013472:	041b      	lsls	r3, r3, #16
 8013474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013476:	4313      	orrs	r3, r2
 8013478:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801347a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801347e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013482:	2003      	movs	r0, #3
 8013484:	f7ff fce2 	bl	8012e4c <DeriveSessionKey10x>
 8013488:	4603      	mov	r3, r0
 801348a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801348e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013496:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801349a:	e028      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801349c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80134a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80134a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80134a4:	2002      	movs	r0, #2
 80134a6:	f7ff fcd1 	bl	8012e4c <DeriveSessionKey10x>
 80134aa:	4603      	mov	r3, r0
 80134ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d002      	beq.n	80134be <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80134b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134bc:	e017      	b.n	80134ee <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80134be:	4b0e      	ldr	r3, [pc, #56]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	7dfa      	ldrb	r2, [r7, #23]
 80134c4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80134c6:	4b0c      	ldr	r3, [pc, #48]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2200      	movs	r2, #0
 80134cc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80134ce:	4b0a      	ldr	r3, [pc, #40]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f04f 32ff 	mov.w	r2, #4294967295
 80134d6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134d8:	4b07      	ldr	r3, [pc, #28]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f04f 32ff 	mov.w	r2, #4294967295
 80134e0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134e2:	4b05      	ldr	r3, [pc, #20]	; (80134f8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ea:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80134ec:	2300      	movs	r3, #0
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	374c      	adds	r7, #76	; 0x4c
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd90      	pop	{r4, r7, pc}
 80134f6:	bf00      	nop
 80134f8:	20000dcc 	.word	0x20000dcc

080134fc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80134fc:	b590      	push	{r4, r7, lr}
 80134fe:	b08b      	sub	sp, #44	; 0x2c
 8013500:	af04      	add	r7, sp, #16
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	607b      	str	r3, [r7, #4]
 8013506:	460b      	mov	r3, r1
 8013508:	72fb      	strb	r3, [r7, #11]
 801350a:	4613      	mov	r3, r2
 801350c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801350e:	2313      	movs	r3, #19
 8013510:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013512:	2303      	movs	r3, #3
 8013514:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d101      	bne.n	8013520 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801351c:	230a      	movs	r3, #10
 801351e:	e05f      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013520:	4b31      	ldr	r3, [pc, #196]	; (80135e8 <LoRaMacCryptoSecureMessage+0xec>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	68fa      	ldr	r2, [r7, #12]
 8013528:	429a      	cmp	r2, r3
 801352a:	d201      	bcs.n	8013530 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801352c:	2306      	movs	r3, #6
 801352e:	e057      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d101      	bne.n	801353e <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801353a:	2302      	movs	r3, #2
 801353c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801353e:	4b2a      	ldr	r3, [pc, #168]	; (80135e8 <LoRaMacCryptoSecureMessage+0xec>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	429a      	cmp	r2, r3
 8013548:	d916      	bls.n	8013578 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013554:	b219      	sxth	r1, r3
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	689c      	ldr	r4, [r3, #8]
 801355a:	7dfa      	ldrb	r2, [r7, #23]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	2300      	movs	r3, #0
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	4623      	mov	r3, r4
 8013566:	f7ff faa3 	bl	8012ab0 <PayloadEncrypt>
 801356a:	4603      	mov	r3, r0
 801356c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801356e:	7dbb      	ldrb	r3, [r7, #22]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d001      	beq.n	8013578 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013574:	7dbb      	ldrb	r3, [r7, #22]
 8013576:	e033      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f000 fb60 	bl	8013c3e <LoRaMacSerializerData>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013584:	2311      	movs	r3, #17
 8013586:	e02b      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013588:	2302      	movs	r3, #2
 801358a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	791b      	ldrb	r3, [r3, #4]
 8013594:	b29b      	uxth	r3, r3
 8013596:	3b04      	subs	r3, #4
 8013598:	b299      	uxth	r1, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	689b      	ldr	r3, [r3, #8]
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	322c      	adds	r2, #44	; 0x2c
 80135a2:	7dfc      	ldrb	r4, [r7, #23]
 80135a4:	9203      	str	r2, [sp, #12]
 80135a6:	68fa      	ldr	r2, [r7, #12]
 80135a8:	9202      	str	r2, [sp, #8]
 80135aa:	9301      	str	r3, [sp, #4]
 80135ac:	2300      	movs	r3, #0
 80135ae:	9300      	str	r3, [sp, #0]
 80135b0:	2300      	movs	r3, #0
 80135b2:	4622      	mov	r2, r4
 80135b4:	f7ff fb7e 	bl	8012cb4 <ComputeCmacB0>
 80135b8:	4603      	mov	r3, r0
 80135ba:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80135bc:	7dbb      	ldrb	r3, [r7, #22]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d001      	beq.n	80135c6 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80135c2:	7dbb      	ldrb	r3, [r7, #22]
 80135c4:	e00c      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 fb39 	bl	8013c3e <LoRaMacSerializerData>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d001      	beq.n	80135d6 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135d2:	2311      	movs	r3, #17
 80135d4:	e004      	b.n	80135e0 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80135d6:	4b04      	ldr	r3, [pc, #16]	; (80135e8 <LoRaMacCryptoSecureMessage+0xec>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80135de:	2300      	movs	r3, #0
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	371c      	adds	r7, #28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd90      	pop	{r4, r7, pc}
 80135e8:	20000dcc 	.word	0x20000dcc

080135ec <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80135ec:	b590      	push	{r4, r7, lr}
 80135ee:	b08b      	sub	sp, #44	; 0x2c
 80135f0:	af04      	add	r7, sp, #16
 80135f2:	60b9      	str	r1, [r7, #8]
 80135f4:	607b      	str	r3, [r7, #4]
 80135f6:	4603      	mov	r3, r0
 80135f8:	73fb      	strb	r3, [r7, #15]
 80135fa:	4613      	mov	r3, r2
 80135fc:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80135fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013600:	2b00      	cmp	r3, #0
 8013602:	d101      	bne.n	8013608 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013604:	230a      	movs	r3, #10
 8013606:	e084      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013608:	7bbb      	ldrb	r3, [r7, #14]
 801360a:	6879      	ldr	r1, [r7, #4]
 801360c:	4618      	mov	r0, r3
 801360e:	f7ff fcbb 	bl	8012f88 <CheckFCntDown>
 8013612:	4603      	mov	r3, r0
 8013614:	f083 0301 	eor.w	r3, r3, #1
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d001      	beq.n	8013622 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801361e:	2306      	movs	r3, #6
 8013620:	e077      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013622:	2313      	movs	r3, #19
 8013624:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013626:	2303      	movs	r3, #3
 8013628:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801362a:	2302      	movs	r3, #2
 801362c:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013630:	f000 f98f 	bl	8013952 <LoRaMacParserData>
 8013634:	4603      	mov	r3, r0
 8013636:	2b00      	cmp	r3, #0
 8013638:	d001      	beq.n	801363e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801363a:	2310      	movs	r3, #16
 801363c:	e069      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801363e:	f107 0210 	add.w	r2, r7, #16
 8013642:	7bfb      	ldrb	r3, [r7, #15]
 8013644:	4611      	mov	r1, r2
 8013646:	4618      	mov	r0, r3
 8013648:	f7ff fbda 	bl	8012e00 <GetKeyAddrItem>
 801364c:	4603      	mov	r3, r0
 801364e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013650:	7d7b      	ldrb	r3, [r7, #21]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d001      	beq.n	801365a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013656:	7d7b      	ldrb	r3, [r7, #21]
 8013658:	e05b      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	785b      	ldrb	r3, [r3, #1]
 801365e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	789b      	ldrb	r3, [r3, #2]
 8013664:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	689b      	ldr	r3, [r3, #8]
 801366a:	68ba      	ldr	r2, [r7, #8]
 801366c:	429a      	cmp	r2, r3
 801366e:	d001      	beq.n	8013674 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013670:	2302      	movs	r3, #2
 8013672:	e04e      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	7b1b      	ldrb	r3, [r3, #12]
 8013678:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801367c:	b2db      	uxtb	r3, r3
 801367e:	2b00      	cmp	r3, #0
 8013680:	bf14      	ite	ne
 8013682:	2301      	movne	r3, #1
 8013684:	2300      	moveq	r3, #0
 8013686:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013688:	4b24      	ldr	r3, [pc, #144]	; (801371c <LoRaMacCryptoUnsecureMessage+0x130>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	789b      	ldrb	r3, [r3, #2]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d101      	bne.n	8013696 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013692:	2300      	movs	r3, #0
 8013694:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	6818      	ldr	r0, [r3, #0]
 801369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369c:	791b      	ldrb	r3, [r3, #4]
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b04      	subs	r3, #4
 80136a2:	b299      	uxth	r1, r3
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a8:	7dbc      	ldrb	r4, [r7, #22]
 80136aa:	7d3a      	ldrb	r2, [r7, #20]
 80136ac:	9303      	str	r3, [sp, #12]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	9302      	str	r3, [sp, #8]
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	2301      	movs	r3, #1
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	4623      	mov	r3, r4
 80136bc:	f7ff fb38 	bl	8012d30 <VerifyCmacB0>
 80136c0:	4603      	mov	r3, r0
 80136c2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136c4:	7d7b      	ldrb	r3, [r7, #21]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d001      	beq.n	80136ce <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80136ca:	7d7b      	ldrb	r3, [r7, #21]
 80136cc:	e021      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80136ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80136d8:	2302      	movs	r3, #2
 80136da:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80136e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136e6:	b219      	sxth	r1, r3
 80136e8:	7dfa      	ldrb	r2, [r7, #23]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	9301      	str	r3, [sp, #4]
 80136ee:	2301      	movs	r3, #1
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	f7ff f9dc 	bl	8012ab0 <PayloadEncrypt>
 80136f8:	4603      	mov	r3, r0
 80136fa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136fc:	7d7b      	ldrb	r3, [r7, #21]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013702:	7d7b      	ldrb	r3, [r7, #21]
 8013704:	e005      	b.n	8013712 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013706:	7bbb      	ldrb	r3, [r7, #14]
 8013708:	6879      	ldr	r1, [r7, #4]
 801370a:	4618      	mov	r0, r3
 801370c:	f7ff fc60 	bl	8012fd0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013710:	2300      	movs	r3, #0
}
 8013712:	4618      	mov	r0, r3
 8013714:	371c      	adds	r7, #28
 8013716:	46bd      	mov	sp, r7
 8013718:	bd90      	pop	{r4, r7, pc}
 801371a:	bf00      	nop
 801371c:	20000dcc 	.word	0x20000dcc

08013720 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b086      	sub	sp, #24
 8013724:	af00      	add	r7, sp, #0
 8013726:	4603      	mov	r3, r0
 8013728:	460a      	mov	r2, r1
 801372a:	71fb      	strb	r3, [r7, #7]
 801372c:	4613      	mov	r3, r2
 801372e:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013730:	79bb      	ldrb	r3, [r7, #6]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d001      	beq.n	801373a <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013736:	230b      	movs	r3, #11
 8013738:	e019      	b.n	801376e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 801373a:	2300      	movs	r3, #0
 801373c:	60bb      	str	r3, [r7, #8]
 801373e:	f107 030c 	add.w	r3, r7, #12
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	605a      	str	r2, [r3, #4]
 8013748:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 801374a:	79fb      	ldrb	r3, [r7, #7]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d101      	bne.n	8013754 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013750:	2320      	movs	r3, #32
 8013752:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013754:	79b9      	ldrb	r1, [r7, #6]
 8013756:	f107 0308 	add.w	r3, r7, #8
 801375a:	2204      	movs	r2, #4
 801375c:	4618      	mov	r0, r3
 801375e:	f7f8 fc54 	bl	800c00a <SecureElementDeriveAndStoreKey>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d001      	beq.n	801376c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013768:	230f      	movs	r3, #15
 801376a:	e000      	b.n	801376e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801376c:	2300      	movs	r3, #0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3718      	adds	r7, #24
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}

08013776 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013776:	b580      	push	{r7, lr}
 8013778:	b086      	sub	sp, #24
 801377a:	af00      	add	r7, sp, #0
 801377c:	4603      	mov	r3, r0
 801377e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013780:	79fb      	ldrb	r3, [r7, #7]
 8013782:	2b04      	cmp	r3, #4
 8013784:	d001      	beq.n	801378a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013786:	230b      	movs	r3, #11
 8013788:	e014      	b.n	80137b4 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801378a:	2300      	movs	r3, #0
 801378c:	60bb      	str	r3, [r7, #8]
 801378e:	f107 030c 	add.w	r3, r7, #12
 8013792:	2200      	movs	r2, #0
 8013794:	601a      	str	r2, [r3, #0]
 8013796:	605a      	str	r2, [r3, #4]
 8013798:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801379a:	79f9      	ldrb	r1, [r7, #7]
 801379c:	f107 0308 	add.w	r3, r7, #8
 80137a0:	227f      	movs	r2, #127	; 0x7f
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7f8 fc31 	bl	800c00a <SecureElementDeriveAndStoreKey>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80137ae:	230f      	movs	r3, #15
 80137b0:	e000      	b.n	80137b4 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3718      	adds	r7, #24
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d003      	beq.n	80137d2 <LoRaMacParserJoinAccept+0x16>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d101      	bne.n	80137d6 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80137d2:	2302      	movs	r3, #2
 80137d4:	e0b9      	b.n	801394a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	89fb      	ldrh	r3, [r7, #14]
 80137e0:	1c59      	adds	r1, r3, #1
 80137e2:	81f9      	strh	r1, [r7, #14]
 80137e4:	4413      	add	r3, r2
 80137e6:	781a      	ldrb	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	1d98      	adds	r0, r3, #6
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	89fb      	ldrh	r3, [r7, #14]
 80137f6:	4413      	add	r3, r2
 80137f8:	2203      	movs	r2, #3
 80137fa:	4619      	mov	r1, r3
 80137fc:	f002 fe31 	bl	8016462 <memcpy1>
    bufItr = bufItr + 3;
 8013800:	89fb      	ldrh	r3, [r7, #14]
 8013802:	3303      	adds	r3, #3
 8013804:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f103 0009 	add.w	r0, r3, #9
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	89fb      	ldrh	r3, [r7, #14]
 8013812:	4413      	add	r3, r2
 8013814:	2203      	movs	r2, #3
 8013816:	4619      	mov	r1, r3
 8013818:	f002 fe23 	bl	8016462 <memcpy1>
    bufItr = bufItr + 3;
 801381c:	89fb      	ldrh	r3, [r7, #14]
 801381e:	3303      	adds	r3, #3
 8013820:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	89fb      	ldrh	r3, [r7, #14]
 8013828:	1c59      	adds	r1, r3, #1
 801382a:	81f9      	strh	r1, [r7, #14]
 801382c:	4413      	add	r3, r2
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	461a      	mov	r2, r3
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	89fb      	ldrh	r3, [r7, #14]
 801383c:	1c59      	adds	r1, r3, #1
 801383e:	81f9      	strh	r1, [r7, #14]
 8013840:	4413      	add	r3, r2
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	021a      	lsls	r2, r3, #8
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	68db      	ldr	r3, [r3, #12]
 801384a:	431a      	orrs	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681a      	ldr	r2, [r3, #0]
 8013854:	89fb      	ldrh	r3, [r7, #14]
 8013856:	1c59      	adds	r1, r3, #1
 8013858:	81f9      	strh	r1, [r7, #14]
 801385a:	4413      	add	r3, r2
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	041a      	lsls	r2, r3, #16
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	68db      	ldr	r3, [r3, #12]
 8013864:	431a      	orrs	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	89fb      	ldrh	r3, [r7, #14]
 8013870:	1c59      	adds	r1, r3, #1
 8013872:	81f9      	strh	r1, [r7, #14]
 8013874:	4413      	add	r3, r2
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	061a      	lsls	r2, r3, #24
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	68db      	ldr	r3, [r3, #12]
 801387e:	431a      	orrs	r2, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	89fb      	ldrh	r3, [r7, #14]
 801388a:	1c59      	adds	r1, r3, #1
 801388c:	81f9      	strh	r1, [r7, #14]
 801388e:	4413      	add	r3, r2
 8013890:	781a      	ldrb	r2, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	89fb      	ldrh	r3, [r7, #14]
 801389c:	1c59      	adds	r1, r3, #1
 801389e:	81f9      	strh	r1, [r7, #14]
 80138a0:	4413      	add	r3, r2
 80138a2:	781a      	ldrb	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	791b      	ldrb	r3, [r3, #4]
 80138ac:	1f1a      	subs	r2, r3, #4
 80138ae:	89fb      	ldrh	r3, [r7, #14]
 80138b0:	1ad3      	subs	r3, r2, r3
 80138b2:	2b10      	cmp	r3, #16
 80138b4:	d10e      	bne.n	80138d4 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f103 0012 	add.w	r0, r3, #18
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	89fb      	ldrh	r3, [r7, #14]
 80138c2:	4413      	add	r3, r2
 80138c4:	2210      	movs	r2, #16
 80138c6:	4619      	mov	r1, r3
 80138c8:	f002 fdcb 	bl	8016462 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80138cc:	89fb      	ldrh	r3, [r7, #14]
 80138ce:	3310      	adds	r3, #16
 80138d0:	81fb      	strh	r3, [r7, #14]
 80138d2:	e008      	b.n	80138e6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	791b      	ldrb	r3, [r3, #4]
 80138d8:	1f1a      	subs	r2, r3, #4
 80138da:	89fb      	ldrh	r3, [r7, #14]
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	2b00      	cmp	r3, #0
 80138e0:	dd01      	ble.n	80138e6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80138e2:	2301      	movs	r3, #1
 80138e4:	e031      	b.n	801394a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	89fb      	ldrh	r3, [r7, #14]
 80138ec:	1c59      	adds	r1, r3, #1
 80138ee:	81f9      	strh	r1, [r7, #14]
 80138f0:	4413      	add	r3, r2
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	461a      	mov	r2, r3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	89fb      	ldrh	r3, [r7, #14]
 8013900:	1c59      	adds	r1, r3, #1
 8013902:	81f9      	strh	r1, [r7, #14]
 8013904:	4413      	add	r3, r2
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	021a      	lsls	r2, r3, #8
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390e:	431a      	orrs	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	89fb      	ldrh	r3, [r7, #14]
 801391a:	1c59      	adds	r1, r3, #1
 801391c:	81f9      	strh	r1, [r7, #14]
 801391e:	4413      	add	r3, r2
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	041a      	lsls	r2, r3, #16
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013928:	431a      	orrs	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681a      	ldr	r2, [r3, #0]
 8013932:	89fb      	ldrh	r3, [r7, #14]
 8013934:	1c59      	adds	r1, r3, #1
 8013936:	81f9      	strh	r1, [r7, #14]
 8013938:	4413      	add	r3, r2
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	061a      	lsls	r2, r3, #24
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013942:	431a      	orrs	r2, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013948:	2300      	movs	r3, #0
}
 801394a:	4618      	mov	r0, r3
 801394c:	3710      	adds	r7, #16
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b084      	sub	sp, #16
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d003      	beq.n	8013968 <LoRaMacParserData+0x16>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d101      	bne.n	801396c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013968:	2302      	movs	r3, #2
 801396a:	e0e2      	b.n	8013b32 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801396c:	2300      	movs	r3, #0
 801396e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	89fb      	ldrh	r3, [r7, #14]
 8013976:	1c59      	adds	r1, r3, #1
 8013978:	81f9      	strh	r1, [r7, #14]
 801397a:	4413      	add	r3, r2
 801397c:	781a      	ldrb	r2, [r3, #0]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	89fb      	ldrh	r3, [r7, #14]
 8013988:	1c59      	adds	r1, r3, #1
 801398a:	81f9      	strh	r1, [r7, #14]
 801398c:	4413      	add	r3, r2
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	461a      	mov	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	89fb      	ldrh	r3, [r7, #14]
 801399c:	1c59      	adds	r1, r3, #1
 801399e:	81f9      	strh	r1, [r7, #14]
 80139a0:	4413      	add	r3, r2
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	021a      	lsls	r2, r3, #8
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	689b      	ldr	r3, [r3, #8]
 80139aa:	431a      	orrs	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	89fb      	ldrh	r3, [r7, #14]
 80139b6:	1c59      	adds	r1, r3, #1
 80139b8:	81f9      	strh	r1, [r7, #14]
 80139ba:	4413      	add	r3, r2
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	041a      	lsls	r2, r3, #16
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	689b      	ldr	r3, [r3, #8]
 80139c4:	431a      	orrs	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	89fb      	ldrh	r3, [r7, #14]
 80139d0:	1c59      	adds	r1, r3, #1
 80139d2:	81f9      	strh	r1, [r7, #14]
 80139d4:	4413      	add	r3, r2
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	061a      	lsls	r2, r3, #24
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	689b      	ldr	r3, [r3, #8]
 80139de:	431a      	orrs	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681a      	ldr	r2, [r3, #0]
 80139e8:	89fb      	ldrh	r3, [r7, #14]
 80139ea:	1c59      	adds	r1, r3, #1
 80139ec:	81f9      	strh	r1, [r7, #14]
 80139ee:	4413      	add	r3, r2
 80139f0:	781a      	ldrb	r2, [r3, #0]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	89fb      	ldrh	r3, [r7, #14]
 80139fc:	1c59      	adds	r1, r3, #1
 80139fe:	81f9      	strh	r1, [r7, #14]
 8013a00:	4413      	add	r3, r2
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	89fb      	ldrh	r3, [r7, #14]
 8013a10:	1c59      	adds	r1, r3, #1
 8013a12:	81f9      	strh	r1, [r7, #14]
 8013a14:	4413      	add	r3, r2
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	0219      	lsls	r1, r3, #8
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	89db      	ldrh	r3, [r3, #14]
 8013a1e:	b21a      	sxth	r2, r3
 8013a20:	b20b      	sxth	r3, r1
 8013a22:	4313      	orrs	r3, r2
 8013a24:	b21b      	sxth	r3, r3
 8013a26:	b29a      	uxth	r2, r3
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	f103 0010 	add.w	r0, r3, #16
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	89fb      	ldrh	r3, [r7, #14]
 8013a38:	18d1      	adds	r1, r2, r3
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	7b1b      	ldrb	r3, [r3, #12]
 8013a3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	461a      	mov	r2, r3
 8013a48:	f002 fd0b 	bl	8016462 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	7b1b      	ldrb	r3, [r3, #12]
 8013a50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	b29a      	uxth	r2, r3
 8013a58:	89fb      	ldrh	r3, [r7, #14]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2200      	movs	r2, #0
 8013a62:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2200      	movs	r2, #0
 8013a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	791b      	ldrb	r3, [r3, #4]
 8013a72:	461a      	mov	r2, r3
 8013a74:	89fb      	ldrh	r3, [r7, #14]
 8013a76:	1ad3      	subs	r3, r2, r3
 8013a78:	2b04      	cmp	r3, #4
 8013a7a:	dd28      	ble.n	8013ace <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	89fb      	ldrh	r3, [r7, #14]
 8013a82:	1c59      	adds	r1, r3, #1
 8013a84:	81f9      	strh	r1, [r7, #14]
 8013a86:	4413      	add	r3, r2
 8013a88:	781a      	ldrb	r2, [r3, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	791a      	ldrb	r2, [r3, #4]
 8013a94:	89fb      	ldrh	r3, [r7, #14]
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	1ad3      	subs	r3, r2, r3
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	3b04      	subs	r3, #4
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681a      	ldr	r2, [r3, #0]
 8013aae:	89fb      	ldrh	r3, [r7, #14]
 8013ab0:	18d1      	adds	r1, r2, r3
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	461a      	mov	r2, r3
 8013abc:	f002 fcd1 	bl	8016462 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	89fb      	ldrh	r3, [r7, #14]
 8013aca:	4413      	add	r3, r2
 8013acc:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681a      	ldr	r2, [r3, #0]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	791b      	ldrb	r3, [r3, #4]
 8013ad6:	3b04      	subs	r3, #4
 8013ad8:	4413      	add	r3, r2
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	461a      	mov	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6819      	ldr	r1, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	791b      	ldrb	r3, [r3, #4]
 8013aee:	3b03      	subs	r3, #3
 8013af0:	440b      	add	r3, r1
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	021b      	lsls	r3, r3, #8
 8013af6:	431a      	orrs	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6819      	ldr	r1, [r3, #0]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	791b      	ldrb	r3, [r3, #4]
 8013b08:	3b02      	subs	r3, #2
 8013b0a:	440b      	add	r3, r1
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	041b      	lsls	r3, r3, #16
 8013b10:	431a      	orrs	r2, r3
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6819      	ldr	r1, [r3, #0]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	791b      	ldrb	r3, [r3, #4]
 8013b22:	3b01      	subs	r3, #1
 8013b24:	440b      	add	r3, r1
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	061b      	lsls	r3, r3, #24
 8013b2a:	431a      	orrs	r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3710      	adds	r7, #16
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b084      	sub	sp, #16
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <LoRaMacSerializerJoinRequest+0x16>
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d101      	bne.n	8013b54 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b50:	2301      	movs	r3, #1
 8013b52:	e070      	b.n	8013c36 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013b54:	2300      	movs	r3, #0
 8013b56:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	791b      	ldrb	r3, [r3, #4]
 8013b5c:	2b16      	cmp	r3, #22
 8013b5e:	d801      	bhi.n	8013b64 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b60:	2302      	movs	r3, #2
 8013b62:	e068      	b.n	8013c36 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	89fb      	ldrh	r3, [r7, #14]
 8013b6a:	1c59      	adds	r1, r3, #1
 8013b6c:	81f9      	strh	r1, [r7, #14]
 8013b6e:	4413      	add	r3, r2
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	7952      	ldrb	r2, [r2, #5]
 8013b74:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	89fb      	ldrh	r3, [r7, #14]
 8013b7c:	18d0      	adds	r0, r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	3306      	adds	r3, #6
 8013b82:	2208      	movs	r2, #8
 8013b84:	4619      	mov	r1, r3
 8013b86:	f002 fc87 	bl	8016498 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013b8a:	89fb      	ldrh	r3, [r7, #14]
 8013b8c:	3308      	adds	r3, #8
 8013b8e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	89fb      	ldrh	r3, [r7, #14]
 8013b96:	18d0      	adds	r0, r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	330e      	adds	r3, #14
 8013b9c:	2208      	movs	r2, #8
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	f002 fc7a 	bl	8016498 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013ba4:	89fb      	ldrh	r3, [r7, #14]
 8013ba6:	3308      	adds	r3, #8
 8013ba8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8ad9      	ldrh	r1, [r3, #22]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
 8013bb4:	1c58      	adds	r0, r3, #1
 8013bb6:	81f8      	strh	r0, [r7, #14]
 8013bb8:	4413      	add	r3, r2
 8013bba:	b2ca      	uxtb	r2, r1
 8013bbc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	8adb      	ldrh	r3, [r3, #22]
 8013bc2:	0a1b      	lsrs	r3, r3, #8
 8013bc4:	b299      	uxth	r1, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	89fb      	ldrh	r3, [r7, #14]
 8013bcc:	1c58      	adds	r0, r3, #1
 8013bce:	81f8      	strh	r0, [r7, #14]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	b2ca      	uxtb	r2, r1
 8013bd4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6999      	ldr	r1, [r3, #24]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	89fb      	ldrh	r3, [r7, #14]
 8013be0:	1c58      	adds	r0, r3, #1
 8013be2:	81f8      	strh	r0, [r7, #14]
 8013be4:	4413      	add	r3, r2
 8013be6:	b2ca      	uxtb	r2, r1
 8013be8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	699b      	ldr	r3, [r3, #24]
 8013bee:	0a19      	lsrs	r1, r3, #8
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	681a      	ldr	r2, [r3, #0]
 8013bf4:	89fb      	ldrh	r3, [r7, #14]
 8013bf6:	1c58      	adds	r0, r3, #1
 8013bf8:	81f8      	strh	r0, [r7, #14]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b2ca      	uxtb	r2, r1
 8013bfe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	699b      	ldr	r3, [r3, #24]
 8013c04:	0c19      	lsrs	r1, r3, #16
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	89fb      	ldrh	r3, [r7, #14]
 8013c0c:	1c58      	adds	r0, r3, #1
 8013c0e:	81f8      	strh	r0, [r7, #14]
 8013c10:	4413      	add	r3, r2
 8013c12:	b2ca      	uxtb	r2, r1
 8013c14:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	699b      	ldr	r3, [r3, #24]
 8013c1a:	0e19      	lsrs	r1, r3, #24
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	89fb      	ldrh	r3, [r7, #14]
 8013c22:	1c58      	adds	r0, r3, #1
 8013c24:	81f8      	strh	r0, [r7, #14]
 8013c26:	4413      	add	r3, r2
 8013c28:	b2ca      	uxtb	r2, r1
 8013c2a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013c2c:	89fb      	ldrh	r3, [r7, #14]
 8013c2e:	b2da      	uxtb	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013c34:	2300      	movs	r3, #0
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}

08013c3e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013c3e:	b580      	push	{r7, lr}
 8013c40:	b084      	sub	sp, #16
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d003      	beq.n	8013c54 <LoRaMacSerializerData+0x16>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013c54:	2301      	movs	r3, #1
 8013c56:	e0e5      	b.n	8013e24 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013c5c:	2308      	movs	r3, #8
 8013c5e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7b1b      	ldrb	r3, [r3, #12]
 8013c64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	89bb      	ldrh	r3, [r7, #12]
 8013c6e:	4413      	add	r3, r2
 8013c70:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d002      	beq.n	8013c82 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013c7c:	89bb      	ldrh	r3, [r7, #12]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	89bb      	ldrh	r3, [r7, #12]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013c90:	89bb      	ldrh	r3, [r7, #12]
 8013c92:	3304      	adds	r3, #4
 8013c94:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	791b      	ldrb	r3, [r3, #4]
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	89ba      	ldrh	r2, [r7, #12]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d901      	bls.n	8013ca6 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013ca2:	2302      	movs	r3, #2
 8013ca4:	e0be      	b.n	8013e24 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	89fb      	ldrh	r3, [r7, #14]
 8013cac:	1c59      	adds	r1, r3, #1
 8013cae:	81f9      	strh	r1, [r7, #14]
 8013cb0:	4413      	add	r3, r2
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	7952      	ldrb	r2, [r2, #5]
 8013cb6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6899      	ldr	r1, [r3, #8]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	89fb      	ldrh	r3, [r7, #14]
 8013cc2:	1c58      	adds	r0, r3, #1
 8013cc4:	81f8      	strh	r0, [r7, #14]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	b2ca      	uxtb	r2, r1
 8013cca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	689b      	ldr	r3, [r3, #8]
 8013cd0:	0a19      	lsrs	r1, r3, #8
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	89fb      	ldrh	r3, [r7, #14]
 8013cd8:	1c58      	adds	r0, r3, #1
 8013cda:	81f8      	strh	r0, [r7, #14]
 8013cdc:	4413      	add	r3, r2
 8013cde:	b2ca      	uxtb	r2, r1
 8013ce0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	689b      	ldr	r3, [r3, #8]
 8013ce6:	0c19      	lsrs	r1, r3, #16
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681a      	ldr	r2, [r3, #0]
 8013cec:	89fb      	ldrh	r3, [r7, #14]
 8013cee:	1c58      	adds	r0, r3, #1
 8013cf0:	81f8      	strh	r0, [r7, #14]
 8013cf2:	4413      	add	r3, r2
 8013cf4:	b2ca      	uxtb	r2, r1
 8013cf6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	689b      	ldr	r3, [r3, #8]
 8013cfc:	0e19      	lsrs	r1, r3, #24
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681a      	ldr	r2, [r3, #0]
 8013d02:	89fb      	ldrh	r3, [r7, #14]
 8013d04:	1c58      	adds	r0, r3, #1
 8013d06:	81f8      	strh	r0, [r7, #14]
 8013d08:	4413      	add	r3, r2
 8013d0a:	b2ca      	uxtb	r2, r1
 8013d0c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	89fb      	ldrh	r3, [r7, #14]
 8013d14:	1c59      	adds	r1, r3, #1
 8013d16:	81f9      	strh	r1, [r7, #14]
 8013d18:	4413      	add	r3, r2
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	7b12      	ldrb	r2, [r2, #12]
 8013d1e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	89d9      	ldrh	r1, [r3, #14]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	89fb      	ldrh	r3, [r7, #14]
 8013d2a:	1c58      	adds	r0, r3, #1
 8013d2c:	81f8      	strh	r0, [r7, #14]
 8013d2e:	4413      	add	r3, r2
 8013d30:	b2ca      	uxtb	r2, r1
 8013d32:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	89db      	ldrh	r3, [r3, #14]
 8013d38:	0a1b      	lsrs	r3, r3, #8
 8013d3a:	b299      	uxth	r1, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	89fb      	ldrh	r3, [r7, #14]
 8013d42:	1c58      	adds	r0, r3, #1
 8013d44:	81f8      	strh	r0, [r7, #14]
 8013d46:	4413      	add	r3, r2
 8013d48:	b2ca      	uxtb	r2, r1
 8013d4a:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	89fb      	ldrh	r3, [r7, #14]
 8013d52:	18d0      	adds	r0, r2, r3
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f103 0110 	add.w	r1, r3, #16
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	7b1b      	ldrb	r3, [r3, #12]
 8013d5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	461a      	mov	r2, r3
 8013d68:	f002 fb7b 	bl	8016462 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	7b1b      	ldrb	r3, [r3, #12]
 8013d70:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	b29a      	uxth	r2, r3
 8013d78:	89fb      	ldrh	r3, [r7, #14]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d009      	beq.n	8013d9c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	89fb      	ldrh	r3, [r7, #14]
 8013d8e:	1c59      	adds	r1, r3, #1
 8013d90:	81f9      	strh	r1, [r7, #14]
 8013d92:	4413      	add	r3, r2
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013d9a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	89fb      	ldrh	r3, [r7, #14]
 8013da2:	18d0      	adds	r0, r2, r3
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	461a      	mov	r2, r3
 8013db2:	f002 fb56 	bl	8016462 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	89fb      	ldrh	r3, [r7, #14]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	89fb      	ldrh	r3, [r7, #14]
 8013dce:	1c58      	adds	r0, r3, #1
 8013dd0:	81f8      	strh	r0, [r7, #14]
 8013dd2:	4413      	add	r3, r2
 8013dd4:	b2ca      	uxtb	r2, r1
 8013dd6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ddc:	0a19      	lsrs	r1, r3, #8
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	681a      	ldr	r2, [r3, #0]
 8013de2:	89fb      	ldrh	r3, [r7, #14]
 8013de4:	1c58      	adds	r0, r3, #1
 8013de6:	81f8      	strh	r0, [r7, #14]
 8013de8:	4413      	add	r3, r2
 8013dea:	b2ca      	uxtb	r2, r1
 8013dec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df2:	0c19      	lsrs	r1, r3, #16
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681a      	ldr	r2, [r3, #0]
 8013df8:	89fb      	ldrh	r3, [r7, #14]
 8013dfa:	1c58      	adds	r0, r3, #1
 8013dfc:	81f8      	strh	r0, [r7, #14]
 8013dfe:	4413      	add	r3, r2
 8013e00:	b2ca      	uxtb	r2, r1
 8013e02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e08:	0e19      	lsrs	r1, r3, #24
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	89fb      	ldrh	r3, [r7, #14]
 8013e10:	1c58      	adds	r0, r3, #1
 8013e12:	81f8      	strh	r0, [r7, #14]
 8013e14:	4413      	add	r3, r2
 8013e16:	b2ca      	uxtb	r2, r1
 8013e18:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013e1a:	89fb      	ldrh	r3, [r7, #14]
 8013e1c:	b2da      	uxtb	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013e22:	2300      	movs	r3, #0
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3710      	adds	r7, #16
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	4603      	mov	r3, r0
 8013e34:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e36:	79fb      	ldrb	r3, [r7, #7]
 8013e38:	2b05      	cmp	r3, #5
 8013e3a:	d101      	bne.n	8013e40 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e000      	b.n	8013e42 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013e40:	2300      	movs	r3, #0
        }
    }
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	370c      	adds	r7, #12
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bc80      	pop	{r7}
 8013e4a:	4770      	bx	lr

08013e4c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	4603      	mov	r3, r0
 8013e54:	6039      	str	r1, [r7, #0]
 8013e56:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013e58:	2300      	movs	r3, #0
 8013e5a:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	2b05      	cmp	r3, #5
 8013e60:	d105      	bne.n	8013e6e <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013e62:	6838      	ldr	r0, [r7, #0]
 8013e64:	f001 f992 	bl	801518c <RegionEU868GetPhyParam>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	e001      	b.n	8013e72 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	60fb      	str	r3, [r7, #12]
 8013e72:	2300      	movs	r3, #0
 8013e74:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3710      	adds	r7, #16
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}

08013e7e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b082      	sub	sp, #8
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	4603      	mov	r3, r0
 8013e86:	6039      	str	r1, [r7, #0]
 8013e88:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e8a:	79fb      	ldrb	r3, [r7, #7]
 8013e8c:	2b05      	cmp	r3, #5
 8013e8e:	d103      	bne.n	8013e98 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013e90:	6838      	ldr	r0, [r7, #0]
 8013e92:	f001 fac5 	bl	8015420 <RegionEU868SetBandTxDone>
 8013e96:	e000      	b.n	8013e9a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013e98:	bf00      	nop
        }
    }
}
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	6039      	str	r1, [r7, #0]
 8013eaa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013eac:	79fb      	ldrb	r3, [r7, #7]
 8013eae:	2b05      	cmp	r3, #5
 8013eb0:	d103      	bne.n	8013eba <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013eb2:	6838      	ldr	r0, [r7, #0]
 8013eb4:	f001 fae0 	bl	8015478 <RegionEU868InitDefaults>
 8013eb8:	e000      	b.n	8013ebc <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013eba:	bf00      	nop
        }
    }
}
 8013ebc:	bf00      	nop
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	4603      	mov	r3, r0
 8013ecc:	6039      	str	r1, [r7, #0]
 8013ece:	71fb      	strb	r3, [r7, #7]
 8013ed0:	4613      	mov	r3, r2
 8013ed2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013ed4:	79fb      	ldrb	r3, [r7, #7]
 8013ed6:	2b05      	cmp	r3, #5
 8013ed8:	d106      	bne.n	8013ee8 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013eda:	79bb      	ldrb	r3, [r7, #6]
 8013edc:	4619      	mov	r1, r3
 8013ede:	6838      	ldr	r0, [r7, #0]
 8013ee0:	f001 fb66 	bl	80155b0 <RegionEU868Verify>
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	e000      	b.n	8013eea <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013ee8:	2300      	movs	r3, #0
        }
    }
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3708      	adds	r7, #8
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}

08013ef2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b082      	sub	sp, #8
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	4603      	mov	r3, r0
 8013efa:	6039      	str	r1, [r7, #0]
 8013efc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013efe:	79fb      	ldrb	r3, [r7, #7]
 8013f00:	2b05      	cmp	r3, #5
 8013f02:	d103      	bne.n	8013f0c <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013f04:	6838      	ldr	r0, [r7, #0]
 8013f06:	f001 fbcf 	bl	80156a8 <RegionEU868ApplyCFList>
 8013f0a:	e000      	b.n	8013f0e <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013f0c:	bf00      	nop
        }
    }
}
 8013f0e:	bf00      	nop
 8013f10:	3708      	adds	r7, #8
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}

08013f16 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013f16:	b580      	push	{r7, lr}
 8013f18:	b082      	sub	sp, #8
 8013f1a:	af00      	add	r7, sp, #0
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	6039      	str	r1, [r7, #0]
 8013f20:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f22:	79fb      	ldrb	r3, [r7, #7]
 8013f24:	2b05      	cmp	r3, #5
 8013f26:	d104      	bne.n	8013f32 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013f28:	6838      	ldr	r0, [r7, #0]
 8013f2a:	f001 fc31 	bl	8015790 <RegionEU868ChanMaskSet>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	e000      	b.n	8013f34 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013f32:	2300      	movs	r3, #0
        }
    }
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	603b      	str	r3, [r7, #0]
 8013f44:	4603      	mov	r3, r0
 8013f46:	71fb      	strb	r3, [r7, #7]
 8013f48:	460b      	mov	r3, r1
 8013f4a:	71bb      	strb	r3, [r7, #6]
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013f50:	79fb      	ldrb	r3, [r7, #7]
 8013f52:	2b05      	cmp	r3, #5
 8013f54:	d107      	bne.n	8013f66 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013f56:	7979      	ldrb	r1, [r7, #5]
 8013f58:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	683a      	ldr	r2, [r7, #0]
 8013f60:	f001 fc40 	bl	80157e4 <RegionEU868ComputeRxWindowParameters>
 8013f64:	e000      	b.n	8013f68 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013f66:	bf00      	nop
        }
    }
}
 8013f68:	bf00      	nop
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b084      	sub	sp, #16
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	4603      	mov	r3, r0
 8013f78:	60b9      	str	r1, [r7, #8]
 8013f7a:	607a      	str	r2, [r7, #4]
 8013f7c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f7e:	7bfb      	ldrb	r3, [r7, #15]
 8013f80:	2b05      	cmp	r3, #5
 8013f82:	d105      	bne.n	8013f90 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013f84:	6879      	ldr	r1, [r7, #4]
 8013f86:	68b8      	ldr	r0, [r7, #8]
 8013f88:	f001 fc86 	bl	8015898 <RegionEU868RxConfig>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	e000      	b.n	8013f92 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013f90:	2300      	movs	r3, #0
        }
    }
}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3710      	adds	r7, #16
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b084      	sub	sp, #16
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	60b9      	str	r1, [r7, #8]
 8013fa2:	607a      	str	r2, [r7, #4]
 8013fa4:	603b      	str	r3, [r7, #0]
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013faa:	7bfb      	ldrb	r3, [r7, #15]
 8013fac:	2b05      	cmp	r3, #5
 8013fae:	d106      	bne.n	8013fbe <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	6879      	ldr	r1, [r7, #4]
 8013fb4:	68b8      	ldr	r0, [r7, #8]
 8013fb6:	f001 fd3f 	bl	8015a38 <RegionEU868TxConfig>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	e000      	b.n	8013fc0 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013fbe:	2300      	movs	r3, #0
        }
    }
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af02      	add	r7, sp, #8
 8013fce:	60b9      	str	r1, [r7, #8]
 8013fd0:	607a      	str	r2, [r7, #4]
 8013fd2:	603b      	str	r3, [r7, #0]
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013fd8:	7bfb      	ldrb	r3, [r7, #15]
 8013fda:	2b05      	cmp	r3, #5
 8013fdc:	d109      	bne.n	8013ff2 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	683a      	ldr	r2, [r7, #0]
 8013fe6:	6879      	ldr	r1, [r7, #4]
 8013fe8:	68b8      	ldr	r0, [r7, #8]
 8013fea:	f001 fdf5 	bl	8015bd8 <RegionEU868LinkAdrReq>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	e000      	b.n	8013ff4 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013ff2:	2300      	movs	r3, #0
        }
    }
}
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3710      	adds	r7, #16
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	4603      	mov	r3, r0
 8014004:	6039      	str	r1, [r7, #0]
 8014006:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014008:	79fb      	ldrb	r3, [r7, #7]
 801400a:	2b05      	cmp	r3, #5
 801400c:	d104      	bne.n	8014018 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801400e:	6838      	ldr	r0, [r7, #0]
 8014010:	f001 ff04 	bl	8015e1c <RegionEU868RxParamSetupReq>
 8014014:	4603      	mov	r3, r0
 8014016:	e000      	b.n	801401a <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014018:	2300      	movs	r3, #0
        }
    }
}
 801401a:	4618      	mov	r0, r3
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}

08014022 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b082      	sub	sp, #8
 8014026:	af00      	add	r7, sp, #0
 8014028:	4603      	mov	r3, r0
 801402a:	6039      	str	r1, [r7, #0]
 801402c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801402e:	79fb      	ldrb	r3, [r7, #7]
 8014030:	2b05      	cmp	r3, #5
 8014032:	d104      	bne.n	801403e <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014034:	6838      	ldr	r0, [r7, #0]
 8014036:	f001 ff2f 	bl	8015e98 <RegionEU868NewChannelReq>
 801403a:	4603      	mov	r3, r0
 801403c:	e000      	b.n	8014040 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801403e:	2300      	movs	r3, #0
        }
    }
}
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	4603      	mov	r3, r0
 8014050:	6039      	str	r1, [r7, #0]
 8014052:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014054:	79fb      	ldrb	r3, [r7, #7]
 8014056:	2b05      	cmp	r3, #5
 8014058:	d104      	bne.n	8014064 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801405a:	6838      	ldr	r0, [r7, #0]
 801405c:	f001 ff7a 	bl	8015f54 <RegionEU868TxParamSetupReq>
 8014060:	4603      	mov	r3, r0
 8014062:	e000      	b.n	8014066 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014064:	2300      	movs	r3, #0
        }
    }
}
 8014066:	4618      	mov	r0, r3
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}

0801406e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801406e:	b580      	push	{r7, lr}
 8014070:	b082      	sub	sp, #8
 8014072:	af00      	add	r7, sp, #0
 8014074:	4603      	mov	r3, r0
 8014076:	6039      	str	r1, [r7, #0]
 8014078:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801407a:	79fb      	ldrb	r3, [r7, #7]
 801407c:	2b05      	cmp	r3, #5
 801407e:	d104      	bne.n	801408a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014080:	6838      	ldr	r0, [r7, #0]
 8014082:	f001 ff73 	bl	8015f6c <RegionEU868DlChannelReq>
 8014086:	4603      	mov	r3, r0
 8014088:	e000      	b.n	801408c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801408a:	2300      	movs	r3, #0
        }
    }
}
 801408c:	4618      	mov	r0, r3
 801408e:	3708      	adds	r7, #8
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	4603      	mov	r3, r0
 801409c:	71fb      	strb	r3, [r7, #7]
 801409e:	460b      	mov	r3, r1
 80140a0:	71bb      	strb	r3, [r7, #6]
 80140a2:	4613      	mov	r3, r2
 80140a4:	717b      	strb	r3, [r7, #5]
    switch( region )
 80140a6:	79fb      	ldrb	r3, [r7, #7]
 80140a8:	2b05      	cmp	r3, #5
 80140aa:	d108      	bne.n	80140be <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80140ac:	797a      	ldrb	r2, [r7, #5]
 80140ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80140b2:	4611      	mov	r1, r2
 80140b4:	4618      	mov	r0, r3
 80140b6:	f001 ff9d 	bl	8015ff4 <RegionEU868AlternateDr>
 80140ba:	4603      	mov	r3, r0
 80140bc:	e000      	b.n	80140c0 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80140be:	2300      	movs	r3, #0
        }
    }
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3708      	adds	r7, #8
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}

080140c8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b084      	sub	sp, #16
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	60b9      	str	r1, [r7, #8]
 80140d0:	607a      	str	r2, [r7, #4]
 80140d2:	603b      	str	r3, [r7, #0]
 80140d4:	4603      	mov	r3, r0
 80140d6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80140d8:	7bfb      	ldrb	r3, [r7, #15]
 80140da:	2b05      	cmp	r3, #5
 80140dc:	d107      	bne.n	80140ee <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	683a      	ldr	r2, [r7, #0]
 80140e2:	6879      	ldr	r1, [r7, #4]
 80140e4:	68b8      	ldr	r0, [r7, #8]
 80140e6:	f001 ff95 	bl	8016014 <RegionEU868NextChannel>
 80140ea:	4603      	mov	r3, r0
 80140ec:	e000      	b.n	80140f0 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80140ee:	2309      	movs	r3, #9
        }
    }
}
 80140f0:	4618      	mov	r0, r3
 80140f2:	3710      	adds	r7, #16
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	4603      	mov	r3, r0
 8014100:	6039      	str	r1, [r7, #0]
 8014102:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014104:	79fb      	ldrb	r3, [r7, #7]
 8014106:	2b05      	cmp	r3, #5
 8014108:	d103      	bne.n	8014112 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801410a:	6838      	ldr	r0, [r7, #0]
 801410c:	f002 f8fa 	bl	8016304 <RegionEU868SetContinuousWave>
 8014110:	e000      	b.n	8014114 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8014112:	bf00      	nop
        }
    }
}
 8014114:	bf00      	nop
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801411c:	b590      	push	{r4, r7, lr}
 801411e:	b083      	sub	sp, #12
 8014120:	af00      	add	r7, sp, #0
 8014122:	4604      	mov	r4, r0
 8014124:	4608      	mov	r0, r1
 8014126:	4611      	mov	r1, r2
 8014128:	461a      	mov	r2, r3
 801412a:	4623      	mov	r3, r4
 801412c:	71fb      	strb	r3, [r7, #7]
 801412e:	4603      	mov	r3, r0
 8014130:	71bb      	strb	r3, [r7, #6]
 8014132:	460b      	mov	r3, r1
 8014134:	717b      	strb	r3, [r7, #5]
 8014136:	4613      	mov	r3, r2
 8014138:	713b      	strb	r3, [r7, #4]
    switch( region )
 801413a:	79fb      	ldrb	r3, [r7, #7]
 801413c:	2b05      	cmp	r3, #5
 801413e:	d109      	bne.n	8014154 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014140:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014144:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014148:	79bb      	ldrb	r3, [r7, #6]
 801414a:	4618      	mov	r0, r3
 801414c:	f002 f928 	bl	80163a0 <RegionEU868ApplyDrOffset>
 8014150:	4603      	mov	r3, r0
 8014152:	e000      	b.n	8014156 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014154:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014156:	4618      	mov	r0, r3
 8014158:	370c      	adds	r7, #12
 801415a:	46bd      	mov	sp, r7
 801415c:	bd90      	pop	{r4, r7, pc}
	...

08014160 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014160:	b480      	push	{r7}
 8014162:	b083      	sub	sp, #12
 8014164:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014166:	4b04      	ldr	r3, [pc, #16]	; (8014178 <RegionGetVersion+0x18>)
 8014168:	607b      	str	r3, [r7, #4]

    return version;
 801416a:	687b      	ldr	r3, [r7, #4]
}
 801416c:	4618      	mov	r0, r3
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	bc80      	pop	{r7}
 8014174:	4770      	bx	lr
 8014176:	bf00      	nop
 8014178:	01000300 	.word	0x01000300

0801417c <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801417c:	b480      	push	{r7}
 801417e:	b087      	sub	sp, #28
 8014180:	af00      	add	r7, sp, #0
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	4608      	mov	r0, r1
 8014186:	4639      	mov	r1, r7
 8014188:	e881 000c 	stmia.w	r1, {r2, r3}
 801418c:	4603      	mov	r3, r0
 801418e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	881b      	ldrh	r3, [r3, #0]
 8014194:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014196:	7afb      	ldrb	r3, [r7, #11]
 8014198:	f083 0301 	eor.w	r3, r3, #1
 801419c:	b2db      	uxtb	r3, r3
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d01b      	beq.n	80141da <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80141a2:	f242 7310 	movw	r3, #10000	; 0x2710
 80141a6:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80141ae:	d202      	bcs.n	80141b6 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80141b0:	2364      	movs	r3, #100	; 0x64
 80141b2:	82bb      	strh	r3, [r7, #20]
 80141b4:	e00b      	b.n	80141ce <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80141bc:	4293      	cmp	r3, r2
 80141be:	d803      	bhi.n	80141c8 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80141c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80141c4:	82bb      	strh	r3, [r7, #20]
 80141c6:	e002      	b.n	80141ce <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80141c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80141cc:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80141ce:	8aba      	ldrh	r2, [r7, #20]
 80141d0:	8afb      	ldrh	r3, [r7, #22]
 80141d2:	4293      	cmp	r3, r2
 80141d4:	bf38      	it	cc
 80141d6:	4613      	movcc	r3, r2
 80141d8:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80141da:	8afb      	ldrh	r3, [r7, #22]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d101      	bne.n	80141e4 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80141e0:	2301      	movs	r3, #1
 80141e2:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80141e4:	8afb      	ldrh	r3, [r7, #22]
}
 80141e6:	4618      	mov	r0, r3
 80141e8:	371c      	adds	r7, #28
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bc80      	pop	{r7}
 80141ee:	4770      	bx	lr

080141f0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08e      	sub	sp, #56	; 0x38
 80141f4:	af02      	add	r7, sp, #8
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	4608      	mov	r0, r1
 80141fa:	4639      	mov	r1, r7
 80141fc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014200:	4603      	mov	r3, r0
 8014202:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	881b      	ldrh	r3, [r3, #0]
 8014208:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801420a:	4b4b      	ldr	r3, [pc, #300]	; (8014338 <SetMaxTimeCredits+0x148>)
 801420c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801420e:	463b      	mov	r3, r7
 8014210:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014214:	f005 fc2a 	bl	8019a6c <SysTimeToMs>
 8014218:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801421a:	f107 0314 	add.w	r3, r7, #20
 801421e:	2200      	movs	r2, #0
 8014220:	601a      	str	r2, [r3, #0]
 8014222:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014224:	7af9      	ldrb	r1, [r7, #11]
 8014226:	463b      	mov	r3, r7
 8014228:	cb0c      	ldmia	r3, {r2, r3}
 801422a:	68f8      	ldr	r0, [r7, #12]
 801422c:	f7ff ffa6 	bl	801417c <GetDutyCycle>
 8014230:	4603      	mov	r3, r0
 8014232:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014234:	7afb      	ldrb	r3, [r7, #11]
 8014236:	f083 0301 	eor.w	r3, r3, #1
 801423a:	b2db      	uxtb	r3, r3
 801423c:	2b00      	cmp	r3, #0
 801423e:	d062      	beq.n	8014306 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014242:	2b64      	cmp	r3, #100	; 0x64
 8014244:	d105      	bne.n	8014252 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014246:	4b3c      	ldr	r3, [pc, #240]	; (8014338 <SetMaxTimeCredits+0x148>)
 8014248:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801424e:	609a      	str	r2, [r3, #8]
 8014250:	e00b      	b.n	801426a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014258:	d105      	bne.n	8014266 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801425a:	4b38      	ldr	r3, [pc, #224]	; (801433c <SetMaxTimeCredits+0x14c>)
 801425c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014262:	609a      	str	r2, [r3, #8]
 8014264:	e001      	b.n	801426a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014266:	4b36      	ldr	r3, [pc, #216]	; (8014340 <SetMaxTimeCredits+0x150>)
 8014268:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	689a      	ldr	r2, [r3, #8]
 801426e:	f107 031c 	add.w	r3, r7, #28
 8014272:	4611      	mov	r1, r2
 8014274:	4618      	mov	r0, r3
 8014276:	f005 fc21 	bl	8019abc <SysTimeFromMs>
 801427a:	f107 0014 	add.w	r0, r7, #20
 801427e:	6a3b      	ldr	r3, [r7, #32]
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	463a      	mov	r2, r7
 8014286:	ca06      	ldmia	r2, {r1, r2}
 8014288:	f005 fb31 	bl	80198ee <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801428c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014290:	f083 0301 	eor.w	r3, r3, #1
 8014294:	b2db      	uxtb	r3, r3
 8014296:	2b00      	cmp	r3, #0
 8014298:	d006      	beq.n	80142a8 <SetMaxTimeCredits+0xb8>
 801429a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801429e:	f083 0301 	eor.w	r3, r3, #1
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d108      	bne.n	80142ba <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80142ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d103      	bne.n	80142ba <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80142b2:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80142b4:	4a23      	ldr	r2, [pc, #140]	; (8014344 <SetMaxTimeCredits+0x154>)
 80142b6:	4293      	cmp	r3, r2
 80142b8:	d92f      	bls.n	801431a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142be:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	4a21      	ldr	r2, [pc, #132]	; (8014348 <SetMaxTimeCredits+0x158>)
 80142c4:	4293      	cmp	r3, r2
 80142c6:	d928      	bls.n	801431a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80142ce:	3b30      	subs	r3, #48	; 0x30
 80142d0:	4a1e      	ldr	r2, [pc, #120]	; (801434c <SetMaxTimeCredits+0x15c>)
 80142d2:	fba2 2303 	umull	r2, r3, r2, r3
 80142d6:	0c1b      	lsrs	r3, r3, #16
 80142d8:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	4a1c      	ldr	r2, [pc, #112]	; (8014350 <SetMaxTimeCredits+0x160>)
 80142de:	fb02 f303 	mul.w	r3, r2, r3
 80142e2:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80142ea:	3330      	adds	r3, #48	; 0x30
 80142ec:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80142ee:	2300      	movs	r3, #0
 80142f0:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80142f2:	f107 0314 	add.w	r3, r7, #20
 80142f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142fa:	f005 fbb7 	bl	8019a6c <SysTimeToMs>
 80142fe:	4602      	mov	r2, r0
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	609a      	str	r2, [r3, #8]
 8014304:	e009      	b.n	801431a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014306:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801430a:	f083 0301 	eor.w	r3, r3, #1
 801430e:	b2db      	uxtb	r3, r3
 8014310:	2b00      	cmp	r3, #0
 8014312:	d002      	beq.n	801431a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014318:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d102      	bne.n	8014328 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014326:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801432c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801432e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014330:	4618      	mov	r0, r3
 8014332:	3730      	adds	r7, #48	; 0x30
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	001b7740 	.word	0x001b7740
 801433c:	0112a880 	.word	0x0112a880
 8014340:	02932e00 	.word	0x02932e00
 8014344:	0001517f 	.word	0x0001517f
 8014348:	0001ec2f 	.word	0x0001ec2f
 801434c:	c22e4507 	.word	0xc22e4507
 8014350:	00015180 	.word	0x00015180

08014354 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b086      	sub	sp, #24
 8014358:	af02      	add	r7, sp, #8
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	4608      	mov	r0, r1
 801435e:	4611      	mov	r1, r2
 8014360:	461a      	mov	r2, r3
 8014362:	4603      	mov	r3, r0
 8014364:	70fb      	strb	r3, [r7, #3]
 8014366:	460b      	mov	r3, r1
 8014368:	70bb      	strb	r3, [r7, #2]
 801436a:	4613      	mov	r3, r2
 801436c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801436e:	78f9      	ldrb	r1, [r7, #3]
 8014370:	787b      	ldrb	r3, [r7, #1]
 8014372:	9301      	str	r3, [sp, #4]
 8014374:	78bb      	ldrb	r3, [r7, #2]
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	f107 0318 	add.w	r3, r7, #24
 801437c:	cb0c      	ldmia	r3, {r2, r3}
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f7ff ff36 	bl	80141f0 <SetMaxTimeCredits>
 8014384:	4603      	mov	r3, r0
 8014386:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014388:	78fb      	ldrb	r3, [r7, #3]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d00a      	beq.n	80143a4 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	f006 f8a2 	bl	801a4dc <UTIL_TIMER_GetElapsedTime>
 8014398:	4602      	mov	r2, r0
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	441a      	add	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	68da      	ldr	r2, [r3, #12]
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	691b      	ldr	r3, [r3, #16]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d903      	bls.n	80143b8 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	691a      	ldr	r2, [r3, #16]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6a3a      	ldr	r2, [r7, #32]
 80143bc:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80143be:	89fb      	ldrh	r3, [r7, #14]
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3710      	adds	r7, #16
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b085      	sub	sp, #20
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	4603      	mov	r3, r0
 80143d0:	460a      	mov	r2, r1
 80143d2:	80fb      	strh	r3, [r7, #6]
 80143d4:	4613      	mov	r3, r2
 80143d6:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80143d8:	2300      	movs	r3, #0
 80143da:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80143dc:	2300      	movs	r3, #0
 80143de:	73bb      	strb	r3, [r7, #14]
 80143e0:	e011      	b.n	8014406 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80143e2:	88fa      	ldrh	r2, [r7, #6]
 80143e4:	7bbb      	ldrb	r3, [r7, #14]
 80143e6:	2101      	movs	r1, #1
 80143e8:	fa01 f303 	lsl.w	r3, r1, r3
 80143ec:	401a      	ands	r2, r3
 80143ee:	7bbb      	ldrb	r3, [r7, #14]
 80143f0:	2101      	movs	r1, #1
 80143f2:	fa01 f303 	lsl.w	r3, r1, r3
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d102      	bne.n	8014400 <CountChannels+0x38>
        {
            nbActiveBits++;
 80143fa:	7bfb      	ldrb	r3, [r7, #15]
 80143fc:	3301      	adds	r3, #1
 80143fe:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014400:	7bbb      	ldrb	r3, [r7, #14]
 8014402:	3301      	adds	r3, #1
 8014404:	73bb      	strb	r3, [r7, #14]
 8014406:	7bba      	ldrb	r2, [r7, #14]
 8014408:	797b      	ldrb	r3, [r7, #5]
 801440a:	429a      	cmp	r2, r3
 801440c:	d3e9      	bcc.n	80143e2 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014410:	4618      	mov	r0, r3
 8014412:	3714      	adds	r7, #20
 8014414:	46bd      	mov	sp, r7
 8014416:	bc80      	pop	{r7}
 8014418:	4770      	bx	lr

0801441a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801441a:	b580      	push	{r7, lr}
 801441c:	b084      	sub	sp, #16
 801441e:	af00      	add	r7, sp, #0
 8014420:	6039      	str	r1, [r7, #0]
 8014422:	4611      	mov	r1, r2
 8014424:	461a      	mov	r2, r3
 8014426:	4603      	mov	r3, r0
 8014428:	71fb      	strb	r3, [r7, #7]
 801442a:	460b      	mov	r3, r1
 801442c:	71bb      	strb	r3, [r7, #6]
 801442e:	4613      	mov	r3, r2
 8014430:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014432:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014436:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801443a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801443e:	4618      	mov	r0, r3
 8014440:	f000 f85d 	bl	80144fe <RegionCommonValueInRange>
 8014444:	4603      	mov	r3, r0
 8014446:	2b00      	cmp	r3, #0
 8014448:	d101      	bne.n	801444e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801444a:	2300      	movs	r3, #0
 801444c:	e053      	b.n	80144f6 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801444e:	2300      	movs	r3, #0
 8014450:	73fb      	strb	r3, [r7, #15]
 8014452:	2300      	movs	r3, #0
 8014454:	73bb      	strb	r3, [r7, #14]
 8014456:	e049      	b.n	80144ec <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014458:	2300      	movs	r3, #0
 801445a:	737b      	strb	r3, [r7, #13]
 801445c:	e03d      	b.n	80144da <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801445e:	7bbb      	ldrb	r3, [r7, #14]
 8014460:	005b      	lsls	r3, r3, #1
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	4413      	add	r3, r2
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	461a      	mov	r2, r3
 801446a:	7b7b      	ldrb	r3, [r7, #13]
 801446c:	fa42 f303 	asr.w	r3, r2, r3
 8014470:	f003 0301 	and.w	r3, r3, #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	d02d      	beq.n	80144d4 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014478:	7bfa      	ldrb	r2, [r7, #15]
 801447a:	7b7b      	ldrb	r3, [r7, #13]
 801447c:	4413      	add	r3, r2
 801447e:	461a      	mov	r2, r3
 8014480:	4613      	mov	r3, r2
 8014482:	005b      	lsls	r3, r3, #1
 8014484:	4413      	add	r3, r2
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	461a      	mov	r2, r3
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	4413      	add	r3, r2
 801448e:	7a1b      	ldrb	r3, [r3, #8]
 8014490:	f343 0303 	sbfx	r3, r3, #0, #4
 8014494:	b25b      	sxtb	r3, r3
 8014496:	f003 030f 	and.w	r3, r3, #15
 801449a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801449c:	7bfa      	ldrb	r2, [r7, #15]
 801449e:	7b7b      	ldrb	r3, [r7, #13]
 80144a0:	4413      	add	r3, r2
 80144a2:	461a      	mov	r2, r3
 80144a4:	4613      	mov	r3, r2
 80144a6:	005b      	lsls	r3, r3, #1
 80144a8:	4413      	add	r3, r2
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	461a      	mov	r2, r3
 80144ae:	69fb      	ldr	r3, [r7, #28]
 80144b0:	4413      	add	r3, r2
 80144b2:	7a1b      	ldrb	r3, [r3, #8]
 80144b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80144b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	b25a      	sxtb	r2, r3
 80144c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144c4:	4618      	mov	r0, r3
 80144c6:	f000 f81a 	bl	80144fe <RegionCommonValueInRange>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d101      	bne.n	80144d4 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80144d0:	2301      	movs	r3, #1
 80144d2:	e010      	b.n	80144f6 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80144d4:	7b7b      	ldrb	r3, [r7, #13]
 80144d6:	3301      	adds	r3, #1
 80144d8:	737b      	strb	r3, [r7, #13]
 80144da:	7b7b      	ldrb	r3, [r7, #13]
 80144dc:	2b0f      	cmp	r3, #15
 80144de:	d9be      	bls.n	801445e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80144e0:	7bfb      	ldrb	r3, [r7, #15]
 80144e2:	3310      	adds	r3, #16
 80144e4:	73fb      	strb	r3, [r7, #15]
 80144e6:	7bbb      	ldrb	r3, [r7, #14]
 80144e8:	3301      	adds	r3, #1
 80144ea:	73bb      	strb	r3, [r7, #14]
 80144ec:	7bfa      	ldrb	r2, [r7, #15]
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d3b1      	bcc.n	8014458 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80144fe:	b480      	push	{r7}
 8014500:	b083      	sub	sp, #12
 8014502:	af00      	add	r7, sp, #0
 8014504:	4603      	mov	r3, r0
 8014506:	71fb      	strb	r3, [r7, #7]
 8014508:	460b      	mov	r3, r1
 801450a:	71bb      	strb	r3, [r7, #6]
 801450c:	4613      	mov	r3, r2
 801450e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014510:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014514:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014518:	429a      	cmp	r2, r3
 801451a:	db07      	blt.n	801452c <RegionCommonValueInRange+0x2e>
 801451c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014520:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014524:	429a      	cmp	r2, r3
 8014526:	dc01      	bgt.n	801452c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014528:	2301      	movs	r3, #1
 801452a:	e000      	b.n	801452e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	370c      	adds	r7, #12
 8014532:	46bd      	mov	sp, r7
 8014534:	bc80      	pop	{r7}
 8014536:	4770      	bx	lr

08014538 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014538:	b480      	push	{r7}
 801453a:	b085      	sub	sp, #20
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	70fb      	strb	r3, [r7, #3]
 8014544:	4613      	mov	r3, r2
 8014546:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014548:	78fb      	ldrb	r3, [r7, #3]
 801454a:	091b      	lsrs	r3, r3, #4
 801454c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801454e:	78bb      	ldrb	r3, [r7, #2]
 8014550:	091b      	lsrs	r3, r3, #4
 8014552:	b2db      	uxtb	r3, r3
 8014554:	7bfa      	ldrb	r2, [r7, #15]
 8014556:	429a      	cmp	r2, r3
 8014558:	d803      	bhi.n	8014562 <RegionCommonChanDisable+0x2a>
 801455a:	78fa      	ldrb	r2, [r7, #3]
 801455c:	78bb      	ldrb	r3, [r7, #2]
 801455e:	429a      	cmp	r2, r3
 8014560:	d301      	bcc.n	8014566 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014562:	2300      	movs	r3, #0
 8014564:	e017      	b.n	8014596 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014566:	7bfb      	ldrb	r3, [r7, #15]
 8014568:	005b      	lsls	r3, r3, #1
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	4413      	add	r3, r2
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	b21a      	sxth	r2, r3
 8014572:	78fb      	ldrb	r3, [r7, #3]
 8014574:	f003 030f 	and.w	r3, r3, #15
 8014578:	2101      	movs	r1, #1
 801457a:	fa01 f303 	lsl.w	r3, r1, r3
 801457e:	b21b      	sxth	r3, r3
 8014580:	43db      	mvns	r3, r3
 8014582:	b21b      	sxth	r3, r3
 8014584:	4013      	ands	r3, r2
 8014586:	b219      	sxth	r1, r3
 8014588:	7bfb      	ldrb	r3, [r7, #15]
 801458a:	005b      	lsls	r3, r3, #1
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	4413      	add	r3, r2
 8014590:	b28a      	uxth	r2, r1
 8014592:	801a      	strh	r2, [r3, #0]

    return true;
 8014594:	2301      	movs	r3, #1
}
 8014596:	4618      	mov	r0, r3
 8014598:	3714      	adds	r7, #20
 801459a:	46bd      	mov	sp, r7
 801459c:	bc80      	pop	{r7}
 801459e:	4770      	bx	lr

080145a0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	460b      	mov	r3, r1
 80145aa:	70fb      	strb	r3, [r7, #3]
 80145ac:	4613      	mov	r3, r2
 80145ae:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80145b0:	2300      	movs	r3, #0
 80145b2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d101      	bne.n	80145be <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80145ba:	2300      	movs	r3, #0
 80145bc:	e018      	b.n	80145f0 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80145be:	78fb      	ldrb	r3, [r7, #3]
 80145c0:	73bb      	strb	r3, [r7, #14]
 80145c2:	e010      	b.n	80145e6 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80145c4:	7bbb      	ldrb	r3, [r7, #14]
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	4413      	add	r3, r2
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	2110      	movs	r1, #16
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7ff fef9 	bl	80143c8 <CountChannels>
 80145d6:	4603      	mov	r3, r0
 80145d8:	461a      	mov	r2, r3
 80145da:	7bfb      	ldrb	r3, [r7, #15]
 80145dc:	4413      	add	r3, r2
 80145de:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80145e0:	7bbb      	ldrb	r3, [r7, #14]
 80145e2:	3301      	adds	r3, #1
 80145e4:	73bb      	strb	r3, [r7, #14]
 80145e6:	7bba      	ldrb	r2, [r7, #14]
 80145e8:	78bb      	ldrb	r3, [r7, #2]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d3ea      	bcc.n	80145c4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80145ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}

080145f8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80145f8:	b480      	push	{r7}
 80145fa:	b087      	sub	sp, #28
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60f8      	str	r0, [r7, #12]
 8014600:	60b9      	str	r1, [r7, #8]
 8014602:	4613      	mov	r3, r2
 8014604:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d016      	beq.n	801463a <RegionCommonChanMaskCopy+0x42>
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d013      	beq.n	801463a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014612:	2300      	movs	r3, #0
 8014614:	75fb      	strb	r3, [r7, #23]
 8014616:	e00c      	b.n	8014632 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	005b      	lsls	r3, r3, #1
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	441a      	add	r2, r3
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	005b      	lsls	r3, r3, #1
 8014624:	68f9      	ldr	r1, [r7, #12]
 8014626:	440b      	add	r3, r1
 8014628:	8812      	ldrh	r2, [r2, #0]
 801462a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801462c:	7dfb      	ldrb	r3, [r7, #23]
 801462e:	3301      	adds	r3, #1
 8014630:	75fb      	strb	r3, [r7, #23]
 8014632:	7dfa      	ldrb	r2, [r7, #23]
 8014634:	79fb      	ldrb	r3, [r7, #7]
 8014636:	429a      	cmp	r2, r3
 8014638:	d3ee      	bcc.n	8014618 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801463a:	bf00      	nop
 801463c:	371c      	adds	r7, #28
 801463e:	46bd      	mov	sp, r7
 8014640:	bc80      	pop	{r7}
 8014642:	4770      	bx	lr

08014644 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014644:	b082      	sub	sp, #8
 8014646:	b580      	push	{r7, lr}
 8014648:	b086      	sub	sp, #24
 801464a:	af00      	add	r7, sp, #0
 801464c:	60f8      	str	r0, [r7, #12]
 801464e:	60b9      	str	r1, [r7, #8]
 8014650:	627b      	str	r3, [r7, #36]	; 0x24
 8014652:	4613      	mov	r3, r2
 8014654:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014656:	79f9      	ldrb	r1, [r7, #7]
 8014658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801465c:	cb0c      	ldmia	r3, {r2, r3}
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f7ff fd8c 	bl	801417c <GetDutyCycle>
 8014664:	4603      	mov	r3, r0
 8014666:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	68da      	ldr	r2, [r3, #12]
 801466c:	8afb      	ldrh	r3, [r7, #22]
 801466e:	68b9      	ldr	r1, [r7, #8]
 8014670:	fb01 f303 	mul.w	r3, r1, r3
 8014674:	429a      	cmp	r2, r3
 8014676:	d909      	bls.n	801468c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	68da      	ldr	r2, [r3, #12]
 801467c:	8afb      	ldrh	r3, [r7, #22]
 801467e:	68b9      	ldr	r1, [r7, #8]
 8014680:	fb01 f303 	mul.w	r3, r1, r3
 8014684:	1ad2      	subs	r2, r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801468a:	e002      	b.n	8014692 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	2200      	movs	r2, #0
 8014690:	60da      	str	r2, [r3, #12]
}
 8014692:	bf00      	nop
 8014694:	3718      	adds	r7, #24
 8014696:	46bd      	mov	sp, r7
 8014698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801469c:	b002      	add	sp, #8
 801469e:	4770      	bx	lr

080146a0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80146a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146a2:	b08f      	sub	sp, #60	; 0x3c
 80146a4:	af04      	add	r7, sp, #16
 80146a6:	6039      	str	r1, [r7, #0]
 80146a8:	4611      	mov	r1, r2
 80146aa:	461a      	mov	r2, r3
 80146ac:	4603      	mov	r3, r0
 80146ae:	71fb      	strb	r3, [r7, #7]
 80146b0:	460b      	mov	r3, r1
 80146b2:	71bb      	strb	r3, [r7, #6]
 80146b4:	4613      	mov	r3, r2
 80146b6:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80146b8:	f04f 33ff 	mov.w	r3, #4294967295
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80146be:	f005 fefb 	bl	801a4b8 <UTIL_TIMER_GetCurrentTime>
 80146c2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80146c4:	2300      	movs	r3, #0
 80146c6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80146c8:	2301      	movs	r3, #1
 80146ca:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80146cc:	2300      	movs	r3, #0
 80146ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80146d2:	2300      	movs	r3, #0
 80146d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80146d8:	e0ba      	b.n	8014850 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80146da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146de:	4613      	mov	r3, r2
 80146e0:	005b      	lsls	r3, r3, #1
 80146e2:	4413      	add	r3, r2
 80146e4:	00db      	lsls	r3, r3, #3
 80146e6:	461a      	mov	r2, r3
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	189c      	adds	r4, r3, r2
 80146ec:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80146f0:	797a      	ldrb	r2, [r7, #5]
 80146f2:	79fd      	ldrb	r5, [r7, #7]
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	9302      	str	r3, [sp, #8]
 80146f8:	46ec      	mov	ip, sp
 80146fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80146fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014702:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014706:	4633      	mov	r3, r6
 8014708:	4629      	mov	r1, r5
 801470a:	4620      	mov	r0, r4
 801470c:	f7ff fe22 	bl	8014354 <UpdateTimeCredits>
 8014710:	4603      	mov	r3, r0
 8014712:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014714:	8afa      	ldrh	r2, [r7, #22]
 8014716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014718:	fb02 f303 	mul.w	r3, r2, r3
 801471c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801471e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014722:	4613      	mov	r3, r2
 8014724:	005b      	lsls	r3, r3, #1
 8014726:	4413      	add	r3, r2
 8014728:	00db      	lsls	r3, r3, #3
 801472a:	461a      	mov	r2, r3
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	4413      	add	r3, r2
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	69ba      	ldr	r2, [r7, #24]
 8014734:	429a      	cmp	r2, r3
 8014736:	d308      	bcc.n	801474a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014738:	797b      	ldrb	r3, [r7, #5]
 801473a:	f083 0301 	eor.w	r3, r3, #1
 801473e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014740:	2b00      	cmp	r3, #0
 8014742:	d013      	beq.n	801476c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014744:	79fb      	ldrb	r3, [r7, #7]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d010      	beq.n	801476c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801474a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801474e:	4613      	mov	r3, r2
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	4413      	add	r3, r2
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	461a      	mov	r2, r3
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	4413      	add	r3, r2
 801475c:	2201      	movs	r2, #1
 801475e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014764:	3301      	adds	r3, #1
 8014766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801476a:	e06c      	b.n	8014846 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801476c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	461a      	mov	r2, r3
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	4413      	add	r3, r2
 801477e:	2200      	movs	r2, #0
 8014780:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014782:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	461a      	mov	r2, r3
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	4413      	add	r3, r2
 8014794:	691b      	ldr	r3, [r3, #16]
 8014796:	69ba      	ldr	r2, [r7, #24]
 8014798:	429a      	cmp	r2, r3
 801479a:	d215      	bcs.n	80147c8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801479c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80147a0:	4613      	mov	r3, r2
 80147a2:	005b      	lsls	r3, r3, #1
 80147a4:	4413      	add	r3, r2
 80147a6:	00db      	lsls	r3, r3, #3
 80147a8:	461a      	mov	r2, r3
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	4413      	add	r3, r2
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	69ba      	ldr	r2, [r7, #24]
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147b6:	4293      	cmp	r3, r2
 80147b8:	bf28      	it	cs
 80147ba:	4613      	movcs	r3, r2
 80147bc:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80147be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147c2:	3301      	adds	r3, #1
 80147c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	f083 0301 	eor.w	r3, r3, #1
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d038      	beq.n	8014846 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80147d4:	2300      	movs	r3, #0
 80147d6:	60fb      	str	r3, [r7, #12]
 80147d8:	2300      	movs	r3, #0
 80147da:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80147dc:	8afb      	ldrh	r3, [r7, #22]
 80147de:	2b64      	cmp	r3, #100	; 0x64
 80147e0:	d103      	bne.n	80147ea <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80147e2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80147e6:	60fb      	str	r3, [r7, #12]
 80147e8:	e009      	b.n	80147fe <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80147ea:	8afb      	ldrh	r3, [r7, #22]
 80147ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80147f0:	d103      	bne.n	80147fa <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80147f2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80147f6:	60fb      	str	r3, [r7, #12]
 80147f8:	e001      	b.n	80147fe <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80147fa:	4b1e      	ldr	r3, [pc, #120]	; (8014874 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80147fc:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80147fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014800:	4a1c      	ldr	r2, [pc, #112]	; (8014874 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014802:	4293      	cmp	r3, r2
 8014804:	d90e      	bls.n	8014824 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801480a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801480e:	3b30      	subs	r3, #48	; 0x30
 8014810:	4919      	ldr	r1, [pc, #100]	; (8014878 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014812:	fba1 1303 	umull	r1, r3, r1, r3
 8014816:	0c1b      	lsrs	r3, r3, #16
 8014818:	3301      	adds	r3, #1
 801481a:	4918      	ldr	r1, [pc, #96]	; (801487c <RegionCommonUpdateBandTimeOff+0x1dc>)
 801481c:	fb01 f303 	mul.w	r3, r1, r3
 8014820:	4413      	add	r3, r2
 8014822:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014824:	f107 000c 	add.w	r0, r7, #12
 8014828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801482e:	f107 020c 	add.w	r2, r7, #12
 8014832:	ca06      	ldmia	r2, {r1, r2}
 8014834:	f005 f85b 	bl	80198ee <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014838:	f107 030c 	add.w	r3, r7, #12
 801483c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014840:	f005 f914 	bl	8019a6c <SysTimeToMs>
 8014844:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014846:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801484a:	3301      	adds	r3, #1
 801484c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014850:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014854:	79bb      	ldrb	r3, [r7, #6]
 8014856:	429a      	cmp	r2, r3
 8014858:	f4ff af3f 	bcc.w	80146da <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 801485c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014860:	2b00      	cmp	r3, #0
 8014862:	d102      	bne.n	801486a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014864:	f04f 33ff 	mov.w	r3, #4294967295
 8014868:	e000      	b.n	801486c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801486c:	4618      	mov	r0, r3
 801486e:	372c      	adds	r7, #44	; 0x2c
 8014870:	46bd      	mov	sp, r7
 8014872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014874:	0001ec30 	.word	0x0001ec30
 8014878:	c22e4507 	.word	0xc22e4507
 801487c:	00015180 	.word	0x00015180

08014880 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014880:	b480      	push	{r7}
 8014882:	b085      	sub	sp, #20
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	2b03      	cmp	r3, #3
 8014894:	d13f      	bne.n	8014916 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	3301      	adds	r3, #1
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	b25a      	sxtb	r2, r3
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148a8:	f003 030f 	and.w	r3, r3, #15
 80148ac:	b25a      	sxtb	r2, r3
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	091b      	lsrs	r3, r3, #4
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	b25a      	sxtb	r2, r3
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3302      	adds	r3, #2
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	889b      	ldrh	r3, [r3, #4]
 80148d4:	b21a      	sxth	r2, r3
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	3303      	adds	r3, #3
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	021b      	lsls	r3, r3, #8
 80148de:	b21b      	sxth	r3, r3
 80148e0:	4313      	orrs	r3, r2
 80148e2:	b21b      	sxth	r3, r3
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	791a      	ldrb	r2, [r3, #4]
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	091b      	lsrs	r3, r3, #4
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	f003 0307 	and.w	r3, r3, #7
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	f003 030f 	and.w	r3, r3, #15
 801490c:	b2da      	uxtb	r2, r3
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014912:	2305      	movs	r3, #5
 8014914:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014916:	7bfb      	ldrb	r3, [r7, #15]
}
 8014918:	4618      	mov	r0, r3
 801491a:	3714      	adds	r7, #20
 801491c:	46bd      	mov	sp, r7
 801491e:	bc80      	pop	{r7}
 8014920:	4770      	bx	lr

08014922 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014922:	b5b0      	push	{r4, r5, r7, lr}
 8014924:	b088      	sub	sp, #32
 8014926:	af02      	add	r7, sp, #8
 8014928:	60f8      	str	r0, [r7, #12]
 801492a:	60b9      	str	r1, [r7, #8]
 801492c:	607a      	str	r2, [r7, #4]
 801492e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	791b      	ldrb	r3, [r3, #4]
 8014934:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	799b      	ldrb	r3, [r3, #6]
 801493a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	79db      	ldrb	r3, [r3, #7]
 8014940:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	7a1b      	ldrb	r3, [r3, #8]
 8014946:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	795b      	ldrb	r3, [r3, #5]
 801494c:	f083 0301 	eor.w	r3, r3, #1
 8014950:	b2db      	uxtb	r3, r3
 8014952:	2b00      	cmp	r3, #0
 8014954:	d008      	beq.n	8014968 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	7adb      	ldrb	r3, [r3, #11]
 801495a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	7a5b      	ldrb	r3, [r3, #9]
 8014960:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	7a9b      	ldrb	r3, [r3, #10]
 8014966:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014968:	7dfb      	ldrb	r3, [r7, #23]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d03a      	beq.n	80149e4 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7b18      	ldrb	r0, [r3, #12]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	6919      	ldr	r1, [r3, #16]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014982:	68fa      	ldr	r2, [r7, #12]
 8014984:	6992      	ldr	r2, [r2, #24]
 8014986:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801498a:	9201      	str	r2, [sp, #4]
 801498c:	9300      	str	r3, [sp, #0]
 801498e:	462b      	mov	r3, r5
 8014990:	4622      	mov	r2, r4
 8014992:	f7ff fd42 	bl	801441a <RegionCommonChanVerifyDr>
 8014996:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8014998:	f083 0301 	eor.w	r3, r3, #1
 801499c:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d003      	beq.n	80149aa <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	f023 0302 	bic.w	r3, r3, #2
 80149a8:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80149b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7ff fd9f 	bl	80144fe <RegionCommonValueInRange>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d10e      	bne.n	80149e4 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80149cc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	da03      	bge.n	80149dc <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	7f5b      	ldrb	r3, [r3, #29]
 80149d8:	757b      	strb	r3, [r7, #21]
 80149da:	e003      	b.n	80149e4 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80149dc:	7dfb      	ldrb	r3, [r7, #23]
 80149de:	f023 0304 	bic.w	r3, r3, #4
 80149e2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80149e4:	7dfb      	ldrb	r3, [r7, #23]
 80149e6:	2b07      	cmp	r3, #7
 80149e8:	d105      	bne.n	80149f6 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 80149ea:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d101      	bne.n	80149f6 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80149f2:	2301      	movs	r3, #1
 80149f4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	7dba      	ldrb	r2, [r7, #22]
 80149fa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	7d7a      	ldrb	r2, [r7, #21]
 8014a00:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014a02:	7d3a      	ldrb	r2, [r7, #20]
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	701a      	strb	r2, [r3, #0]

    return status;
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3718      	adds	r7, #24
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014a14 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014a14:	b480      	push	{r7}
 8014a16:	b083      	sub	sp, #12
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	6039      	str	r1, [r7, #0]
 8014a1e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014a20:	79fb      	ldrb	r3, [r7, #7]
 8014a22:	4a06      	ldr	r2, [pc, #24]	; (8014a3c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014a24:	fa02 f303 	lsl.w	r3, r2, r3
 8014a28:	461a      	mov	r2, r3
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	370c      	adds	r7, #12
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bc80      	pop	{r7}
 8014a38:	4770      	bx	lr
 8014a3a:	bf00      	nop
 8014a3c:	000f4240 	.word	0x000f4240

08014a40 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	4603      	mov	r3, r0
 8014a48:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014a4a:	79fb      	ldrb	r3, [r7, #7]
 8014a4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014a50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bc80      	pop	{r7}
 8014a5c:	4770      	bx	lr
	...

08014a60 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014a60:	b480      	push	{r7}
 8014a62:	b085      	sub	sp, #20
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	607a      	str	r2, [r7, #4]
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014a70:	7afa      	ldrb	r2, [r7, #11]
 8014a72:	7afb      	ldrb	r3, [r7, #11]
 8014a74:	3b04      	subs	r3, #4
 8014a76:	4619      	mov	r1, r3
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	fb03 f101 	mul.w	r1, r3, r1
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a84:	fb00 f303 	mul.w	r3, r0, r3
 8014a88:	440b      	add	r3, r1
 8014a8a:	005b      	lsls	r3, r3, #1
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d013      	beq.n	8014ab8 <RegionCommonComputeRxWindowParameters+0x58>
 8014a90:	7afb      	ldrb	r3, [r7, #11]
 8014a92:	3b04      	subs	r3, #4
 8014a94:	4619      	mov	r1, r3
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	fb03 f101 	mul.w	r1, r3, r1
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014aa2:	fb00 f303 	mul.w	r3, r0, r3
 8014aa6:	440b      	add	r3, r1
 8014aa8:	0059      	lsls	r1, r3, #1
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	440b      	add	r3, r1
 8014aae:	1e59      	subs	r1, r3, #1
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8014ab6:	e00f      	b.n	8014ad8 <RegionCommonComputeRxWindowParameters+0x78>
 8014ab8:	7afb      	ldrb	r3, [r7, #11]
 8014aba:	3b04      	subs	r3, #4
 8014abc:	4619      	mov	r1, r3
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	fb03 f101 	mul.w	r1, r3, r1
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014aca:	fb00 f303 	mul.w	r3, r0, r3
 8014ace:	440b      	add	r3, r1
 8014ad0:	0059      	lsls	r1, r3, #1
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	bf38      	it	cc
 8014adc:	461a      	movcc	r2, r3
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4619      	mov	r1, r3
 8014ae8:	69bb      	ldr	r3, [r7, #24]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68fa      	ldr	r2, [r7, #12]
 8014aee:	fb02 f303 	mul.w	r3, r2, r3
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d007      	beq.n	8014b06 <RegionCommonComputeRxWindowParameters+0xa6>
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	68fa      	ldr	r2, [r7, #12]
 8014afc:	fb02 f303 	mul.w	r3, r2, r3
 8014b00:	3301      	adds	r3, #1
 8014b02:	085b      	lsrs	r3, r3, #1
 8014b04:	e005      	b.n	8014b12 <RegionCommonComputeRxWindowParameters+0xb2>
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	fb02 f303 	mul.w	r3, r2, r3
 8014b10:	085b      	lsrs	r3, r3, #1
 8014b12:	1acb      	subs	r3, r1, r3
 8014b14:	683a      	ldr	r2, [r7, #0]
 8014b16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b1a:	fb01 f202 	mul.w	r2, r1, r2
 8014b1e:	1a9b      	subs	r3, r3, r2
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	dd27      	ble.n	8014b74 <RegionCommonComputeRxWindowParameters+0x114>
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	009b      	lsls	r3, r3, #2
 8014b28:	4619      	mov	r1, r3
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	fb02 f303 	mul.w	r3, r2, r3
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d007      	beq.n	8014b48 <RegionCommonComputeRxWindowParameters+0xe8>
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	fb02 f303 	mul.w	r3, r2, r3
 8014b42:	3301      	adds	r3, #1
 8014b44:	085b      	lsrs	r3, r3, #1
 8014b46:	e005      	b.n	8014b54 <RegionCommonComputeRxWindowParameters+0xf4>
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	fb02 f303 	mul.w	r3, r2, r3
 8014b52:	085b      	lsrs	r3, r3, #1
 8014b54:	1acb      	subs	r3, r1, r3
 8014b56:	683a      	ldr	r2, [r7, #0]
 8014b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b5c:	fb01 f202 	mul.w	r2, r1, r2
 8014b60:	1a9b      	subs	r3, r3, r2
 8014b62:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014b66:	4a19      	ldr	r2, [pc, #100]	; (8014bcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b68:	fb82 1203 	smull	r1, r2, r2, r3
 8014b6c:	1192      	asrs	r2, r2, #6
 8014b6e:	17db      	asrs	r3, r3, #31
 8014b70:	1ad3      	subs	r3, r2, r3
 8014b72:	e024      	b.n	8014bbe <RegionCommonComputeRxWindowParameters+0x15e>
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	009b      	lsls	r3, r3, #2
 8014b78:	4619      	mov	r1, r3
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	fb02 f303 	mul.w	r3, r2, r3
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d007      	beq.n	8014b98 <RegionCommonComputeRxWindowParameters+0x138>
 8014b88:	69bb      	ldr	r3, [r7, #24]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	fb02 f303 	mul.w	r3, r2, r3
 8014b92:	3301      	adds	r3, #1
 8014b94:	085b      	lsrs	r3, r3, #1
 8014b96:	e005      	b.n	8014ba4 <RegionCommonComputeRxWindowParameters+0x144>
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	fb02 f303 	mul.w	r3, r2, r3
 8014ba2:	085b      	lsrs	r3, r3, #1
 8014ba4:	1acb      	subs	r3, r1, r3
 8014ba6:	683a      	ldr	r2, [r7, #0]
 8014ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014bac:	fb01 f202 	mul.w	r2, r1, r2
 8014bb0:	1a9b      	subs	r3, r3, r2
 8014bb2:	4a06      	ldr	r2, [pc, #24]	; (8014bcc <RegionCommonComputeRxWindowParameters+0x16c>)
 8014bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8014bb8:	1192      	asrs	r2, r2, #6
 8014bba:	17db      	asrs	r3, r3, #31
 8014bbc:	1ad3      	subs	r3, r2, r3
 8014bbe:	69fa      	ldr	r2, [r7, #28]
 8014bc0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014bc2:	bf00      	nop
 8014bc4:	3714      	adds	r7, #20
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bc80      	pop	{r7}
 8014bca:	4770      	bx	lr
 8014bcc:	10624dd3 	.word	0x10624dd3

08014bd0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b086      	sub	sp, #24
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
 8014bdc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014bde:	2300      	movs	r3, #0
 8014be0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7eb fdef 	bl	80007cc <__aeabi_ui2f>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	4619      	mov	r1, r3
 8014bf2:	68b8      	ldr	r0, [r7, #8]
 8014bf4:	f7eb fd38 	bl	8000668 <__aeabi_fsub>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	6879      	ldr	r1, [r7, #4]
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7eb fd33 	bl	8000668 <__aeabi_fsub>
 8014c02:	4603      	mov	r3, r0
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7eb fc23 	bl	8000450 <__aeabi_f2d>
 8014c0a:	4602      	mov	r2, r0
 8014c0c:	460b      	mov	r3, r1
 8014c0e:	4610      	mov	r0, r2
 8014c10:	4619      	mov	r1, r3
 8014c12:	f005 ffe9 	bl	801abe8 <floor>
 8014c16:	4602      	mov	r2, r0
 8014c18:	460b      	mov	r3, r1
 8014c1a:	4610      	mov	r0, r2
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	f7eb fcf7 	bl	8000610 <__aeabi_d2iz>
 8014c22:	4603      	mov	r3, r0
 8014c24:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3718      	adds	r7, #24
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014c32:	b590      	push	{r4, r7, lr}
 8014c34:	b087      	sub	sp, #28
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	60f8      	str	r0, [r7, #12]
 8014c3a:	60b9      	str	r1, [r7, #8]
 8014c3c:	607a      	str	r2, [r7, #4]
 8014c3e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014c44:	2300      	movs	r3, #0
 8014c46:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014c48:	2300      	movs	r3, #0
 8014c4a:	757b      	strb	r3, [r7, #21]
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	753b      	strb	r3, [r7, #20]
 8014c50:	e09c      	b.n	8014d8c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014c52:	2300      	movs	r3, #0
 8014c54:	74fb      	strb	r3, [r7, #19]
 8014c56:	e08f      	b.n	8014d78 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	685a      	ldr	r2, [r3, #4]
 8014c5c:	7d3b      	ldrb	r3, [r7, #20]
 8014c5e:	005b      	lsls	r3, r3, #1
 8014c60:	4413      	add	r3, r2
 8014c62:	881b      	ldrh	r3, [r3, #0]
 8014c64:	461a      	mov	r2, r3
 8014c66:	7cfb      	ldrb	r3, [r7, #19]
 8014c68:	fa42 f303 	asr.w	r3, r2, r3
 8014c6c:	f003 0301 	and.w	r3, r3, #1
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d07e      	beq.n	8014d72 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	689a      	ldr	r2, [r3, #8]
 8014c78:	7d79      	ldrb	r1, [r7, #21]
 8014c7a:	7cfb      	ldrb	r3, [r7, #19]
 8014c7c:	440b      	add	r3, r1
 8014c7e:	4619      	mov	r1, r3
 8014c80:	460b      	mov	r3, r1
 8014c82:	005b      	lsls	r3, r3, #1
 8014c84:	440b      	add	r3, r1
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	4413      	add	r3, r2
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d06b      	beq.n	8014d68 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	f083 0301 	eor.w	r3, r3, #1
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d011      	beq.n	8014cc2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00d      	beq.n	8014cc2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	695a      	ldr	r2, [r3, #20]
 8014caa:	7d3b      	ldrb	r3, [r7, #20]
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	4413      	add	r3, r2
 8014cb0:	881b      	ldrh	r3, [r3, #0]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	7cfb      	ldrb	r3, [r7, #19]
 8014cb6:	fa42 f303 	asr.w	r3, r2, r3
 8014cba:	f003 0301 	and.w	r3, r3, #1
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d054      	beq.n	8014d6c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	785b      	ldrb	r3, [r3, #1]
 8014cc6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	689a      	ldr	r2, [r3, #8]
 8014ccc:	7d79      	ldrb	r1, [r7, #21]
 8014cce:	7cfb      	ldrb	r3, [r7, #19]
 8014cd0:	440b      	add	r3, r1
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	440b      	add	r3, r1
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4413      	add	r3, r2
 8014cde:	7a1b      	ldrb	r3, [r3, #8]
 8014ce0:	f343 0303 	sbfx	r3, r3, #0, #4
 8014ce4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014ce6:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	689a      	ldr	r2, [r3, #8]
 8014cec:	7d79      	ldrb	r1, [r7, #21]
 8014cee:	7cfb      	ldrb	r3, [r7, #19]
 8014cf0:	440b      	add	r3, r1
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	005b      	lsls	r3, r3, #1
 8014cf8:	440b      	add	r3, r1
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	7a1b      	ldrb	r3, [r3, #8]
 8014d00:	f343 1303 	sbfx	r3, r3, #4, #4
 8014d04:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014d06:	461a      	mov	r2, r3
 8014d08:	4621      	mov	r1, r4
 8014d0a:	f7ff fbf8 	bl	80144fe <RegionCommonValueInRange>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d02d      	beq.n	8014d70 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	68da      	ldr	r2, [r3, #12]
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	6899      	ldr	r1, [r3, #8]
 8014d1c:	7d78      	ldrb	r0, [r7, #21]
 8014d1e:	7cfb      	ldrb	r3, [r7, #19]
 8014d20:	4403      	add	r3, r0
 8014d22:	4618      	mov	r0, r3
 8014d24:	4603      	mov	r3, r0
 8014d26:	005b      	lsls	r3, r3, #1
 8014d28:	4403      	add	r3, r0
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	440b      	add	r3, r1
 8014d2e:	7a5b      	ldrb	r3, [r3, #9]
 8014d30:	4619      	mov	r1, r3
 8014d32:	460b      	mov	r3, r1
 8014d34:	005b      	lsls	r3, r3, #1
 8014d36:	440b      	add	r3, r1
 8014d38:	00db      	lsls	r3, r3, #3
 8014d3a:	4413      	add	r3, r2
 8014d3c:	7d1b      	ldrb	r3, [r3, #20]
 8014d3e:	f083 0301 	eor.w	r3, r3, #1
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d003      	beq.n	8014d50 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014d48:	7dbb      	ldrb	r3, [r7, #22]
 8014d4a:	3301      	adds	r3, #1
 8014d4c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014d4e:	e010      	b.n	8014d72 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014d50:	7dfb      	ldrb	r3, [r7, #23]
 8014d52:	1c5a      	adds	r2, r3, #1
 8014d54:	75fa      	strb	r2, [r7, #23]
 8014d56:	461a      	mov	r2, r3
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	7d79      	ldrb	r1, [r7, #21]
 8014d5e:	7cfa      	ldrb	r2, [r7, #19]
 8014d60:	440a      	add	r2, r1
 8014d62:	b2d2      	uxtb	r2, r2
 8014d64:	701a      	strb	r2, [r3, #0]
 8014d66:	e004      	b.n	8014d72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d68:	bf00      	nop
 8014d6a:	e002      	b.n	8014d72 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014d6c:	bf00      	nop
 8014d6e:	e000      	b.n	8014d72 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d70:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014d72:	7cfb      	ldrb	r3, [r7, #19]
 8014d74:	3301      	adds	r3, #1
 8014d76:	74fb      	strb	r3, [r7, #19]
 8014d78:	7cfb      	ldrb	r3, [r7, #19]
 8014d7a:	2b0f      	cmp	r3, #15
 8014d7c:	f67f af6c 	bls.w	8014c58 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014d80:	7d7b      	ldrb	r3, [r7, #21]
 8014d82:	3310      	adds	r3, #16
 8014d84:	757b      	strb	r3, [r7, #21]
 8014d86:	7d3b      	ldrb	r3, [r7, #20]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	753b      	strb	r3, [r7, #20]
 8014d8c:	7d7b      	ldrb	r3, [r7, #21]
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	8a1b      	ldrh	r3, [r3, #16]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	f4ff af5c 	bcc.w	8014c52 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	7dfa      	ldrb	r2, [r7, #23]
 8014d9e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	7dba      	ldrb	r2, [r7, #22]
 8014da4:	701a      	strb	r2, [r3, #0]
}
 8014da6:	bf00      	nop
 8014da8:	371c      	adds	r7, #28
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd90      	pop	{r4, r7, pc}

08014dae <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014db0:	b08b      	sub	sp, #44	; 0x2c
 8014db2:	af04      	add	r7, sp, #16
 8014db4:	60f8      	str	r0, [r7, #12]
 8014db6:	60b9      	str	r1, [r7, #8]
 8014db8:	607a      	str	r2, [r7, #4]
 8014dba:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f005 fb8b 	bl	801a4dc <UTIL_TIMER_GetElapsedTime>
 8014dc6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	1ad2      	subs	r2, r2, r3
 8014dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dd2:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	685b      	ldr	r3, [r3, #4]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d004      	beq.n	8014df2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014dec:	697a      	ldr	r2, [r7, #20]
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d32b      	bcc.n	8014e4a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	2200      	movs	r2, #0
 8014df6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	69db      	ldr	r3, [r3, #28]
 8014dfc:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014e02:	68dd      	ldr	r5, [r3, #12]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	7a5e      	ldrb	r6, [r3, #9]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	7d1b      	ldrb	r3, [r3, #20]
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	6992      	ldr	r2, [r2, #24]
 8014e16:	9203      	str	r2, [sp, #12]
 8014e18:	68fa      	ldr	r2, [r7, #12]
 8014e1a:	f10d 0e04 	add.w	lr, sp, #4
 8014e1e:	320c      	adds	r2, #12
 8014e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e24:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	4663      	mov	r3, ip
 8014e2c:	4632      	mov	r2, r6
 8014e2e:	4629      	mov	r1, r5
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7ff fc35 	bl	80146a0 <RegionCommonUpdateBandTimeOff>
 8014e36:	4602      	mov	r2, r0
 8014e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	69d8      	ldr	r0, [r3, #28]
 8014e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e42:	683a      	ldr	r2, [r7, #0]
 8014e44:	6879      	ldr	r1, [r7, #4]
 8014e46:	f7ff fef4 	bl	8014c32 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d004      	beq.n	8014e5c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e54:	2200      	movs	r2, #0
 8014e56:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	e006      	b.n	8014e6a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d001      	beq.n	8014e68 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014e64:	230b      	movs	r3, #11
 8014e66:	e000      	b.n	8014e6a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e68:	230c      	movs	r3, #12
    }
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	371c      	adds	r7, #28
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e72 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014e72:	b5b0      	push	{r4, r5, r7, lr}
 8014e74:	b086      	sub	sp, #24
 8014e76:	af02      	add	r7, sp, #8
 8014e78:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f993 2000 	ldrsb.w	r2, [r3]
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e8c:	429a      	cmp	r2, r3
 8014e8e:	d103      	bne.n	8014e98 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014e96:	e026      	b.n	8014ee6 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014e98:	7bfb      	ldrb	r3, [r7, #15]
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014ea6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d019      	beq.n	8014ee2 <RegionCommonGetNextLowerTxDr+0x70>
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	78d8      	ldrb	r0, [r3, #3]
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	6859      	ldr	r1, [r3, #4]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	6892      	ldr	r2, [r2, #8]
 8014ec6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014eca:	9201      	str	r2, [sp, #4]
 8014ecc:	9300      	str	r3, [sp, #0]
 8014ece:	462b      	mov	r3, r5
 8014ed0:	4622      	mov	r2, r4
 8014ed2:	f7ff faa2 	bl	801441a <RegionCommonChanVerifyDr>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	f083 0301 	eor.w	r3, r3, #1
 8014edc:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1da      	bne.n	8014e98 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bdb0      	pop	{r4, r5, r7, pc}

08014eee <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014eee:	b480      	push	{r7}
 8014ef0:	b083      	sub	sp, #12
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	460a      	mov	r2, r1
 8014ef8:	71fb      	strb	r3, [r7, #7]
 8014efa:	4613      	mov	r3, r2
 8014efc:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014efe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f06:	4293      	cmp	r3, r2
 8014f08:	bfb8      	it	lt
 8014f0a:	4613      	movlt	r3, r2
 8014f0c:	b25b      	sxtb	r3, r3
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	370c      	adds	r7, #12
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bc80      	pop	{r7}
 8014f16:	4770      	bx	lr

08014f18 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	683a      	ldr	r2, [r7, #0]
 8014f28:	4413      	add	r3, r2
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	4a07      	ldr	r2, [pc, #28]	; (8014f4c <RegionCommonGetBandwidth+0x34>)
 8014f2e:	4293      	cmp	r3, r2
 8014f30:	d004      	beq.n	8014f3c <RegionCommonGetBandwidth+0x24>
 8014f32:	4a07      	ldr	r2, [pc, #28]	; (8014f50 <RegionCommonGetBandwidth+0x38>)
 8014f34:	4293      	cmp	r3, r2
 8014f36:	d003      	beq.n	8014f40 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	e002      	b.n	8014f42 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	e000      	b.n	8014f42 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014f40:	2302      	movs	r3, #2
    }
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	370c      	adds	r7, #12
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bc80      	pop	{r7}
 8014f4a:	4770      	bx	lr
 8014f4c:	0003d090 	.word	0x0003d090
 8014f50:	0007a120 	.word	0x0007a120

08014f54 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014f54:	b5b0      	push	{r4, r5, r7, lr}
 8014f56:	b08c      	sub	sp, #48	; 0x30
 8014f58:	af04      	add	r7, sp, #16
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	6039      	str	r1, [r7, #0]
 8014f5e:	71fb      	strb	r3, [r7, #7]
 8014f60:	4613      	mov	r3, r2
 8014f62:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014f64:	4b17      	ldr	r3, [pc, #92]	; (8014fc4 <RegionCommonRxConfigPrint+0x70>)
 8014f66:	f107 0408 	add.w	r4, r7, #8
 8014f6a:	461d      	mov	r5, r3
 8014f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f74:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014f78:	79fb      	ldrb	r3, [r7, #7]
 8014f7a:	2b05      	cmp	r3, #5
 8014f7c:	d813      	bhi.n	8014fa6 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014f7e:	79fb      	ldrb	r3, [r7, #7]
 8014f80:	009b      	lsls	r3, r3, #2
 8014f82:	f107 0220 	add.w	r2, r7, #32
 8014f86:	4413      	add	r3, r2
 8014f88:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014f8c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014f90:	9202      	str	r2, [sp, #8]
 8014f92:	683a      	ldr	r2, [r7, #0]
 8014f94:	9201      	str	r2, [sp, #4]
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	4b0b      	ldr	r3, [pc, #44]	; (8014fc8 <RegionCommonRxConfigPrint+0x74>)
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	2100      	movs	r1, #0
 8014f9e:	2002      	movs	r0, #2
 8014fa0:	f005 fb7a 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014fa4:	e00a      	b.n	8014fbc <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014fa6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014faa:	9301      	str	r3, [sp, #4]
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	4b06      	ldr	r3, [pc, #24]	; (8014fcc <RegionCommonRxConfigPrint+0x78>)
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	2100      	movs	r1, #0
 8014fb6:	2002      	movs	r0, #2
 8014fb8:	f005 fb6e 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 8014fbc:	bf00      	nop
 8014fbe:	3720      	adds	r7, #32
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8014fc4:	0801b490 	.word	0x0801b490
 8014fc8:	0801b454 	.word	0x0801b454
 8014fcc:	0801b474 	.word	0x0801b474

08014fd0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b084      	sub	sp, #16
 8014fd4:	af02      	add	r7, sp, #8
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	460b      	mov	r3, r1
 8014fda:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fe0:	9301      	str	r3, [sp, #4]
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	4b05      	ldr	r3, [pc, #20]	; (8014ffc <RegionCommonTxConfigPrint+0x2c>)
 8014fe8:	2201      	movs	r2, #1
 8014fea:	2100      	movs	r1, #0
 8014fec:	2002      	movs	r0, #2
 8014fee:	f005 fb53 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
}
 8014ff2:	bf00      	nop
 8014ff4:	3708      	adds	r7, #8
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}
 8014ffa:	bf00      	nop
 8014ffc:	0801b4a8 	.word	0x0801b4a8

08015000 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801500a:	4b2d      	ldr	r3, [pc, #180]	; (80150c0 <VerifyRfFreq+0xc0>)
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	4798      	blx	r3
 8015012:	4603      	mov	r3, r0
 8015014:	f083 0301 	eor.w	r3, r3, #1
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	d001      	beq.n	8015022 <VerifyRfFreq+0x22>
    {
        return false;
 801501e:	2300      	movs	r3, #0
 8015020:	e04a      	b.n	80150b8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	4a27      	ldr	r2, [pc, #156]	; (80150c4 <VerifyRfFreq+0xc4>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d307      	bcc.n	801503a <VerifyRfFreq+0x3a>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	4a26      	ldr	r2, [pc, #152]	; (80150c8 <VerifyRfFreq+0xc8>)
 801502e:	4293      	cmp	r3, r2
 8015030:	d803      	bhi.n	801503a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	2202      	movs	r2, #2
 8015036:	701a      	strb	r2, [r3, #0]
 8015038:	e03d      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	4a22      	ldr	r2, [pc, #136]	; (80150c8 <VerifyRfFreq+0xc8>)
 801503e:	4293      	cmp	r3, r2
 8015040:	d907      	bls.n	8015052 <VerifyRfFreq+0x52>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4a21      	ldr	r2, [pc, #132]	; (80150cc <VerifyRfFreq+0xcc>)
 8015046:	4293      	cmp	r3, r2
 8015048:	d803      	bhi.n	8015052 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	2200      	movs	r2, #0
 801504e:	701a      	strb	r2, [r3, #0]
 8015050:	e031      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4a1d      	ldr	r2, [pc, #116]	; (80150cc <VerifyRfFreq+0xcc>)
 8015056:	4293      	cmp	r3, r2
 8015058:	d907      	bls.n	801506a <VerifyRfFreq+0x6a>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4a1c      	ldr	r2, [pc, #112]	; (80150d0 <VerifyRfFreq+0xd0>)
 801505e:	4293      	cmp	r3, r2
 8015060:	d803      	bhi.n	801506a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2201      	movs	r2, #1
 8015066:	701a      	strb	r2, [r3, #0]
 8015068:	e025      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4a19      	ldr	r2, [pc, #100]	; (80150d4 <VerifyRfFreq+0xd4>)
 801506e:	4293      	cmp	r3, r2
 8015070:	d907      	bls.n	8015082 <VerifyRfFreq+0x82>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	4a18      	ldr	r2, [pc, #96]	; (80150d8 <VerifyRfFreq+0xd8>)
 8015076:	4293      	cmp	r3, r2
 8015078:	d803      	bhi.n	8015082 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	2205      	movs	r2, #5
 801507e:	701a      	strb	r2, [r3, #0]
 8015080:	e019      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4a15      	ldr	r2, [pc, #84]	; (80150dc <VerifyRfFreq+0xdc>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d907      	bls.n	801509a <VerifyRfFreq+0x9a>
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	4a14      	ldr	r2, [pc, #80]	; (80150e0 <VerifyRfFreq+0xe0>)
 801508e:	4293      	cmp	r3, r2
 8015090:	d803      	bhi.n	801509a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	2203      	movs	r2, #3
 8015096:	701a      	strb	r2, [r3, #0]
 8015098:	e00d      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4a11      	ldr	r2, [pc, #68]	; (80150e4 <VerifyRfFreq+0xe4>)
 801509e:	4293      	cmp	r3, r2
 80150a0:	d307      	bcc.n	80150b2 <VerifyRfFreq+0xb2>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	4a10      	ldr	r2, [pc, #64]	; (80150e8 <VerifyRfFreq+0xe8>)
 80150a6:	4293      	cmp	r3, r2
 80150a8:	d803      	bhi.n	80150b2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	2204      	movs	r2, #4
 80150ae:	701a      	strb	r2, [r3, #0]
 80150b0:	e001      	b.n	80150b6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80150b2:	2300      	movs	r3, #0
 80150b4:	e000      	b.n	80150b8 <VerifyRfFreq+0xb8>
    }
    return true;
 80150b6:	2301      	movs	r3, #1
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3708      	adds	r7, #8
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0801ba54 	.word	0x0801ba54
 80150c4:	337055c0 	.word	0x337055c0
 80150c8:	338eda3f 	.word	0x338eda3f
 80150cc:	33bca100 	.word	0x33bca100
 80150d0:	33c5c8c0 	.word	0x33c5c8c0
 80150d4:	33c74f5f 	.word	0x33c74f5f
 80150d8:	33cef080 	.word	0x33cef080
 80150dc:	33d1fdbf 	.word	0x33d1fdbf
 80150e0:	33d5ce50 	.word	0x33d5ce50
 80150e4:	33d691a0 	.word	0x33d691a0
 80150e8:	33db2580 	.word	0x33db2580

080150ec <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80150ec:	b590      	push	{r4, r7, lr}
 80150ee:	b08b      	sub	sp, #44	; 0x2c
 80150f0:	af04      	add	r7, sp, #16
 80150f2:	4603      	mov	r3, r0
 80150f4:	460a      	mov	r2, r1
 80150f6:	71fb      	strb	r3, [r7, #7]
 80150f8:	4613      	mov	r3, r2
 80150fa:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80150fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015100:	4a1f      	ldr	r2, [pc, #124]	; (8015180 <GetTimeOnAir+0x94>)
 8015102:	5cd3      	ldrb	r3, [r2, r3]
 8015104:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801510a:	491e      	ldr	r1, [pc, #120]	; (8015184 <GetTimeOnAir+0x98>)
 801510c:	4618      	mov	r0, r3
 801510e:	f7ff ff03 	bl	8014f18 <RegionCommonGetBandwidth>
 8015112:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015114:	2300      	movs	r3, #0
 8015116:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801511c:	2b07      	cmp	r3, #7
 801511e:	d118      	bne.n	8015152 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015120:	4b19      	ldr	r3, [pc, #100]	; (8015188 <GetTimeOnAir+0x9c>)
 8015122:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801512c:	fb02 f303 	mul.w	r3, r2, r3
 8015130:	4619      	mov	r1, r3
 8015132:	88bb      	ldrh	r3, [r7, #4]
 8015134:	b2db      	uxtb	r3, r3
 8015136:	2201      	movs	r2, #1
 8015138:	9203      	str	r2, [sp, #12]
 801513a:	9302      	str	r3, [sp, #8]
 801513c:	2300      	movs	r3, #0
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	2305      	movs	r3, #5
 8015142:	9300      	str	r3, [sp, #0]
 8015144:	2300      	movs	r3, #0
 8015146:	460a      	mov	r2, r1
 8015148:	68f9      	ldr	r1, [r7, #12]
 801514a:	2000      	movs	r0, #0
 801514c:	47a0      	blx	r4
 801514e:	6178      	str	r0, [r7, #20]
 8015150:	e011      	b.n	8015176 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015152:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <GetTimeOnAir+0x9c>)
 8015154:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015156:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801515a:	88bb      	ldrh	r3, [r7, #4]
 801515c:	b2db      	uxtb	r3, r3
 801515e:	2101      	movs	r1, #1
 8015160:	9103      	str	r1, [sp, #12]
 8015162:	9302      	str	r3, [sp, #8]
 8015164:	2300      	movs	r3, #0
 8015166:	9301      	str	r3, [sp, #4]
 8015168:	2308      	movs	r3, #8
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	2301      	movs	r3, #1
 801516e:	68f9      	ldr	r1, [r7, #12]
 8015170:	2001      	movs	r0, #1
 8015172:	47a0      	blx	r4
 8015174:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015176:	697b      	ldr	r3, [r7, #20]
}
 8015178:	4618      	mov	r0, r3
 801517a:	371c      	adds	r7, #28
 801517c:	46bd      	mov	sp, r7
 801517e:	bd90      	pop	{r4, r7, pc}
 8015180:	0801ba1c 	.word	0x0801ba1c
 8015184:	0801ba24 	.word	0x0801ba24
 8015188:	0801ba54 	.word	0x0801ba54

0801518c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801518c:	b580      	push	{r7, lr}
 801518e:	b088      	sub	sp, #32
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015194:	2300      	movs	r3, #0
 8015196:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	3b01      	subs	r3, #1
 801519e:	2b38      	cmp	r3, #56	; 0x38
 80151a0:	f200 8125 	bhi.w	80153ee <RegionEU868GetPhyParam+0x262>
 80151a4:	a201      	add	r2, pc, #4	; (adr r2, 80151ac <RegionEU868GetPhyParam+0x20>)
 80151a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151aa:	bf00      	nop
 80151ac:	08015291 	.word	0x08015291
 80151b0:	08015297 	.word	0x08015297
 80151b4:	080153ef 	.word	0x080153ef
 80151b8:	080153ef 	.word	0x080153ef
 80151bc:	080153ef 	.word	0x080153ef
 80151c0:	0801529d 	.word	0x0801529d
 80151c4:	080153ef 	.word	0x080153ef
 80151c8:	080152d5 	.word	0x080152d5
 80151cc:	080153ef 	.word	0x080153ef
 80151d0:	080152db 	.word	0x080152db
 80151d4:	080152e1 	.word	0x080152e1
 80151d8:	080152e7 	.word	0x080152e7
 80151dc:	080152ed 	.word	0x080152ed
 80151e0:	080152fd 	.word	0x080152fd
 80151e4:	0801530d 	.word	0x0801530d
 80151e8:	08015313 	.word	0x08015313
 80151ec:	0801531b 	.word	0x0801531b
 80151f0:	08015323 	.word	0x08015323
 80151f4:	0801532b 	.word	0x0801532b
 80151f8:	08015333 	.word	0x08015333
 80151fc:	0801533b 	.word	0x0801533b
 8015200:	08015343 	.word	0x08015343
 8015204:	08015357 	.word	0x08015357
 8015208:	0801535d 	.word	0x0801535d
 801520c:	08015363 	.word	0x08015363
 8015210:	08015369 	.word	0x08015369
 8015214:	08015373 	.word	0x08015373
 8015218:	0801537d 	.word	0x0801537d
 801521c:	08015383 	.word	0x08015383
 8015220:	0801538b 	.word	0x0801538b
 8015224:	08015391 	.word	0x08015391
 8015228:	08015397 	.word	0x08015397
 801522c:	0801539f 	.word	0x0801539f
 8015230:	080152a3 	.word	0x080152a3
 8015234:	080153ef 	.word	0x080153ef
 8015238:	080153ef 	.word	0x080153ef
 801523c:	080153ef 	.word	0x080153ef
 8015240:	080153ef 	.word	0x080153ef
 8015244:	080153ef 	.word	0x080153ef
 8015248:	080153ef 	.word	0x080153ef
 801524c:	080153ef 	.word	0x080153ef
 8015250:	080153ef 	.word	0x080153ef
 8015254:	080153ef 	.word	0x080153ef
 8015258:	080153ef 	.word	0x080153ef
 801525c:	080153ef 	.word	0x080153ef
 8015260:	080153ef 	.word	0x080153ef
 8015264:	080153ef 	.word	0x080153ef
 8015268:	080153a5 	.word	0x080153a5
 801526c:	080153ab 	.word	0x080153ab
 8015270:	080153b9 	.word	0x080153b9
 8015274:	080153ef 	.word	0x080153ef
 8015278:	080153ef 	.word	0x080153ef
 801527c:	080153bf 	.word	0x080153bf
 8015280:	080153c5 	.word	0x080153c5
 8015284:	080153ef 	.word	0x080153ef
 8015288:	080153cb 	.word	0x080153cb
 801528c:	080153db 	.word	0x080153db
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015290:	2300      	movs	r3, #0
 8015292:	61bb      	str	r3, [r7, #24]
            break;
 8015294:	e0ac      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015296:	2300      	movs	r3, #0
 8015298:	61bb      	str	r3, [r7, #24]
            break;
 801529a:	e0a9      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801529c:	2300      	movs	r3, #0
 801529e:	61bb      	str	r3, [r7, #24]
            break;
 80152a0:	e0a6      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152a8:	733b      	strb	r3, [r7, #12]
 80152aa:	2307      	movs	r3, #7
 80152ac:	737b      	strb	r3, [r7, #13]
 80152ae:	2300      	movs	r3, #0
 80152b0:	73bb      	strb	r3, [r7, #14]
 80152b2:	2310      	movs	r3, #16
 80152b4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80152b6:	4b52      	ldr	r3, [pc, #328]	; (8015400 <RegionEU868GetPhyParam+0x274>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152bc:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80152be:	4b50      	ldr	r3, [pc, #320]	; (8015400 <RegionEU868GetPhyParam+0x274>)
 80152c0:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152c2:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80152c4:	f107 030c 	add.w	r3, r7, #12
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7ff fdd2 	bl	8014e72 <RegionCommonGetNextLowerTxDr>
 80152ce:	4603      	mov	r3, r0
 80152d0:	61bb      	str	r3, [r7, #24]
            break;
 80152d2:	e08d      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80152d4:	2300      	movs	r3, #0
 80152d6:	61bb      	str	r3, [r7, #24]
            break;
 80152d8:	e08a      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80152da:	2300      	movs	r3, #0
 80152dc:	61bb      	str	r3, [r7, #24]
            break;
 80152de:	e087      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80152e0:	2340      	movs	r3, #64	; 0x40
 80152e2:	61bb      	str	r3, [r7, #24]
            break;
 80152e4:	e084      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80152e6:	2320      	movs	r3, #32
 80152e8:	61bb      	str	r3, [r7, #24]
            break;
 80152ea:	e081      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152f2:	461a      	mov	r2, r3
 80152f4:	4b43      	ldr	r3, [pc, #268]	; (8015404 <RegionEU868GetPhyParam+0x278>)
 80152f6:	5c9b      	ldrb	r3, [r3, r2]
 80152f8:	61bb      	str	r3, [r7, #24]
            break;
 80152fa:	e079      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015302:	461a      	mov	r2, r3
 8015304:	4b40      	ldr	r3, [pc, #256]	; (8015408 <RegionEU868GetPhyParam+0x27c>)
 8015306:	5c9b      	ldrb	r3, [r3, r2]
 8015308:	61bb      	str	r3, [r7, #24]
            break;
 801530a:	e071      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801530c:	2301      	movs	r3, #1
 801530e:	61bb      	str	r3, [r7, #24]
            break;
 8015310:	e06e      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015312:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015316:	61bb      	str	r3, [r7, #24]
            break;
 8015318:	e06a      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801531a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801531e:	61bb      	str	r3, [r7, #24]
            break;
 8015320:	e066      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015322:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015326:	61bb      	str	r3, [r7, #24]
            break;
 8015328:	e062      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801532a:	f241 3388 	movw	r3, #5000	; 0x1388
 801532e:	61bb      	str	r3, [r7, #24]
            break;
 8015330:	e05e      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015332:	f241 7370 	movw	r3, #6000	; 0x1770
 8015336:	61bb      	str	r3, [r7, #24]
            break;
 8015338:	e05a      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801533a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801533e:	61bb      	str	r3, [r7, #24]
            break;
 8015340:	e056      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015342:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015346:	4831      	ldr	r0, [pc, #196]	; (801540c <RegionEU868GetPhyParam+0x280>)
 8015348:	f001 f874 	bl	8016434 <randr>
 801534c:	4603      	mov	r3, r0
 801534e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015352:	61bb      	str	r3, [r7, #24]
            break;
 8015354:	e04c      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015356:	2300      	movs	r3, #0
 8015358:	61bb      	str	r3, [r7, #24]
            break;
 801535a:	e049      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801535c:	4b2c      	ldr	r3, [pc, #176]	; (8015410 <RegionEU868GetPhyParam+0x284>)
 801535e:	61bb      	str	r3, [r7, #24]
            break;
 8015360:	e046      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015362:	2300      	movs	r3, #0
 8015364:	61bb      	str	r3, [r7, #24]
            break;
 8015366:	e043      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015368:	4b25      	ldr	r3, [pc, #148]	; (8015400 <RegionEU868GetPhyParam+0x274>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	33c0      	adds	r3, #192	; 0xc0
 801536e:	61bb      	str	r3, [r7, #24]
            break;
 8015370:	e03e      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015372:	4b23      	ldr	r3, [pc, #140]	; (8015400 <RegionEU868GetPhyParam+0x274>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	33c2      	adds	r3, #194	; 0xc2
 8015378:	61bb      	str	r3, [r7, #24]
            break;
 801537a:	e039      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801537c:	2310      	movs	r3, #16
 801537e:	61bb      	str	r3, [r7, #24]
            break;
 8015380:	e036      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015382:	4b1f      	ldr	r3, [pc, #124]	; (8015400 <RegionEU868GetPhyParam+0x274>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	61bb      	str	r3, [r7, #24]
            break;
 8015388:	e032      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801538a:	2300      	movs	r3, #0
 801538c:	61bb      	str	r3, [r7, #24]
            break;
 801538e:	e02f      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015390:	2300      	movs	r3, #0
 8015392:	61bb      	str	r3, [r7, #24]
            break;
 8015394:	e02c      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015396:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801539a:	61bb      	str	r3, [r7, #24]
            break;
 801539c:	e028      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801539e:	4b1d      	ldr	r3, [pc, #116]	; (8015414 <RegionEU868GetPhyParam+0x288>)
 80153a0:	61bb      	str	r3, [r7, #24]
            break;
 80153a2:	e025      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80153a4:	4b1a      	ldr	r3, [pc, #104]	; (8015410 <RegionEU868GetPhyParam+0x284>)
 80153a6:	61bb      	str	r3, [r7, #24]
            break;
 80153a8:	e022      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80153aa:	2311      	movs	r3, #17
 80153ac:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80153ae:	2302      	movs	r3, #2
 80153b0:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80153b2:	2300      	movs	r3, #0
 80153b4:	76bb      	strb	r3, [r7, #26]
            break;
 80153b6:	e01b      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80153b8:	2303      	movs	r3, #3
 80153ba:	61bb      	str	r3, [r7, #24]
            break;
 80153bc:	e018      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80153be:	4b14      	ldr	r3, [pc, #80]	; (8015410 <RegionEU868GetPhyParam+0x284>)
 80153c0:	61bb      	str	r3, [r7, #24]
            break;
 80153c2:	e015      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80153c4:	2303      	movs	r3, #3
 80153c6:	61bb      	str	r3, [r7, #24]
            break;
 80153c8:	e012      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153d0:	461a      	mov	r2, r3
 80153d2:	4b11      	ldr	r3, [pc, #68]	; (8015418 <RegionEU868GetPhyParam+0x28c>)
 80153d4:	5c9b      	ldrb	r3, [r3, r2]
 80153d6:	61bb      	str	r3, [r7, #24]
            break;
 80153d8:	e00a      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153e0:	490e      	ldr	r1, [pc, #56]	; (801541c <RegionEU868GetPhyParam+0x290>)
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff fd98 	bl	8014f18 <RegionCommonGetBandwidth>
 80153e8:	4603      	mov	r3, r0
 80153ea:	61bb      	str	r3, [r7, #24]
            break;
 80153ec:	e000      	b.n	80153f0 <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 80153ee:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	61fb      	str	r3, [r7, #28]
 80153f4:	2300      	movs	r3, #0
 80153f6:	69fb      	ldr	r3, [r7, #28]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3720      	adds	r7, #32
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	20000dd4 	.word	0x20000dd4
 8015404:	0801ba44 	.word	0x0801ba44
 8015408:	0801ba4c 	.word	0x0801ba4c
 801540c:	fffffc18 	.word	0xfffffc18
 8015410:	33d3e608 	.word	0x33d3e608
 8015414:	4009999a 	.word	0x4009999a
 8015418:	0801ba1c 	.word	0x0801ba1c
 801541c:	0801ba24 	.word	0x0801ba24

08015420 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015420:	b590      	push	{r4, r7, lr}
 8015422:	b085      	sub	sp, #20
 8015424:	af02      	add	r7, sp, #8
 8015426:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015428:	4b11      	ldr	r3, [pc, #68]	; (8015470 <RegionEU868SetBandTxDone+0x50>)
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	4b11      	ldr	r3, [pc, #68]	; (8015474 <RegionEU868SetBandTxDone+0x54>)
 801542e:	6819      	ldr	r1, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	4618      	mov	r0, r3
 8015436:	4603      	mov	r3, r0
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	4403      	add	r3, r0
 801543c:	009b      	lsls	r3, r3, #2
 801543e:	440b      	add	r3, r1
 8015440:	3309      	adds	r3, #9
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	4619      	mov	r1, r3
 8015446:	460b      	mov	r3, r1
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	440b      	add	r3, r1
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	18d0      	adds	r0, r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6899      	ldr	r1, [r3, #8]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	785c      	ldrb	r4, [r3, #1]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	691a      	ldr	r2, [r3, #16]
 801545c:	9200      	str	r2, [sp, #0]
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	4622      	mov	r2, r4
 8015462:	f7ff f8ef 	bl	8014644 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8015466:	bf00      	nop
 8015468:	370c      	adds	r7, #12
 801546a:	46bd      	mov	sp, r7
 801546c:	bd90      	pop	{r4, r7, pc}
 801546e:	bf00      	nop
 8015470:	20000dd0 	.word	0x20000dd0
 8015474:	20000dd4 	.word	0x20000dd4

08015478 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b0b0      	sub	sp, #192	; 0xc0
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015484:	2290      	movs	r2, #144	; 0x90
 8015486:	2100      	movs	r1, #0
 8015488:	4618      	mov	r0, r3
 801548a:	f005 fba3 	bl	801abd4 <memset>
 801548e:	2364      	movs	r3, #100	; 0x64
 8015490:	863b      	strh	r3, [r7, #48]	; 0x30
 8015492:	2364      	movs	r3, #100	; 0x64
 8015494:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801549c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80154a0:	230a      	movs	r3, #10
 80154a2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80154a6:	2364      	movs	r3, #100	; 0x64
 80154a8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80154ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80154b0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	7a1b      	ldrb	r3, [r3, #8]
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d05c      	beq.n	8015576 <RegionEU868InitDefaults+0xfe>
 80154bc:	2b02      	cmp	r3, #2
 80154be:	dc69      	bgt.n	8015594 <RegionEU868InitDefaults+0x11c>
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d002      	beq.n	80154ca <RegionEU868InitDefaults+0x52>
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	d03e      	beq.n	8015546 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80154c8:	e064      	b.n	8015594 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d061      	beq.n	8015596 <RegionEU868InitDefaults+0x11e>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d05d      	beq.n	8015596 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4a2f      	ldr	r2, [pc, #188]	; (801559c <RegionEU868InitDefaults+0x124>)
 80154e0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	4a2e      	ldr	r2, [pc, #184]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 80154e8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80154ea:	4b2c      	ldr	r3, [pc, #176]	; (801559c <RegionEU868InitDefaults+0x124>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154f4:	2290      	movs	r2, #144	; 0x90
 80154f6:	4619      	mov	r1, r3
 80154f8:	f000 ffb3 	bl	8016462 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80154fc:	4b28      	ldr	r3, [pc, #160]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a28      	ldr	r2, [pc, #160]	; (80155a4 <RegionEU868InitDefaults+0x12c>)
 8015502:	ca07      	ldmia	r2, {r0, r1, r2}
 8015504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015508:	4b25      	ldr	r3, [pc, #148]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	4a26      	ldr	r2, [pc, #152]	; (80155a8 <RegionEU868InitDefaults+0x130>)
 801550e:	330c      	adds	r3, #12
 8015510:	ca07      	ldmia	r2, {r0, r1, r2}
 8015512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015516:	4b22      	ldr	r3, [pc, #136]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	4a24      	ldr	r2, [pc, #144]	; (80155ac <RegionEU868InitDefaults+0x134>)
 801551c:	3318      	adds	r3, #24
 801551e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015524:	4b1e      	ldr	r3, [pc, #120]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	2207      	movs	r2, #7
 801552a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801552e:	4b1c      	ldr	r3, [pc, #112]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015536:	4b1a      	ldr	r3, [pc, #104]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	33c2      	adds	r3, #194	; 0xc2
 801553c:	2201      	movs	r2, #1
 801553e:	4619      	mov	r1, r3
 8015540:	f7ff f85a 	bl	80145f8 <RegionCommonChanMaskCopy>
 8015544:	e027      	b.n	8015596 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015546:	4b16      	ldr	r3, [pc, #88]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2200      	movs	r2, #0
 801554c:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801554e:	4b14      	ldr	r3, [pc, #80]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2200      	movs	r2, #0
 8015554:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015556:	4b12      	ldr	r3, [pc, #72]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2200      	movs	r2, #0
 801555c:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801555e:	4b10      	ldr	r3, [pc, #64]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015566:	4b0e      	ldr	r3, [pc, #56]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	33c2      	adds	r3, #194	; 0xc2
 801556c:	2201      	movs	r2, #1
 801556e:	4619      	mov	r1, r3
 8015570:	f7ff f842 	bl	80145f8 <RegionCommonChanMaskCopy>
            break;
 8015574:	e00f      	b.n	8015596 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015576:	4b0a      	ldr	r3, [pc, #40]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 801557e:	4b08      	ldr	r3, [pc, #32]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8015586:	4b06      	ldr	r3, [pc, #24]	; (80155a0 <RegionEU868InitDefaults+0x128>)
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	430a      	orrs	r2, r1
 801558c:	b292      	uxth	r2, r2
 801558e:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8015592:	e000      	b.n	8015596 <RegionEU868InitDefaults+0x11e>
            break;
 8015594:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015596:	37c0      	adds	r7, #192	; 0xc0
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}
 801559c:	20000dd0 	.word	0x20000dd0
 80155a0:	20000dd4 	.word	0x20000dd4
 80155a4:	0801b4c4 	.word	0x0801b4c4
 80155a8:	0801b4d0 	.word	0x0801b4d0
 80155ac:	0801b4dc 	.word	0x0801b4dc

080155b0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	460b      	mov	r3, r1
 80155ba:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80155bc:	78fb      	ldrb	r3, [r7, #3]
 80155be:	2b0f      	cmp	r3, #15
 80155c0:	d86c      	bhi.n	801569c <RegionEU868Verify+0xec>
 80155c2:	a201      	add	r2, pc, #4	; (adr r2, 80155c8 <RegionEU868Verify+0x18>)
 80155c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155c8:	08015609 	.word	0x08015609
 80155cc:	0801569d 	.word	0x0801569d
 80155d0:	0801569d 	.word	0x0801569d
 80155d4:	0801569d 	.word	0x0801569d
 80155d8:	0801569d 	.word	0x0801569d
 80155dc:	08015621 	.word	0x08015621
 80155e0:	0801563f 	.word	0x0801563f
 80155e4:	0801565d 	.word	0x0801565d
 80155e8:	0801569d 	.word	0x0801569d
 80155ec:	0801567b 	.word	0x0801567b
 80155f0:	0801567b 	.word	0x0801567b
 80155f4:	0801569d 	.word	0x0801569d
 80155f8:	0801569d 	.word	0x0801569d
 80155fc:	0801569d 	.word	0x0801569d
 8015600:	0801569d 	.word	0x0801569d
 8015604:	08015699 	.word	0x08015699
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	f107 020f 	add.w	r2, r7, #15
 8015614:	4611      	mov	r1, r2
 8015616:	4618      	mov	r0, r3
 8015618:	f7ff fcf2 	bl	8015000 <VerifyRfFreq>
 801561c:	4603      	mov	r3, r0
 801561e:	e03e      	b.n	801569e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f993 3000 	ldrsb.w	r3, [r3]
 8015626:	2207      	movs	r2, #7
 8015628:	2100      	movs	r1, #0
 801562a:	4618      	mov	r0, r3
 801562c:	f7fe ff67 	bl	80144fe <RegionCommonValueInRange>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	bf14      	ite	ne
 8015636:	2301      	movne	r3, #1
 8015638:	2300      	moveq	r3, #0
 801563a:	b2db      	uxtb	r3, r3
 801563c:	e02f      	b.n	801569e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f993 3000 	ldrsb.w	r3, [r3]
 8015644:	2205      	movs	r2, #5
 8015646:	2100      	movs	r1, #0
 8015648:	4618      	mov	r0, r3
 801564a:	f7fe ff58 	bl	80144fe <RegionCommonValueInRange>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	bf14      	ite	ne
 8015654:	2301      	movne	r3, #1
 8015656:	2300      	moveq	r3, #0
 8015658:	b2db      	uxtb	r3, r3
 801565a:	e020      	b.n	801569e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f993 3000 	ldrsb.w	r3, [r3]
 8015662:	2207      	movs	r2, #7
 8015664:	2100      	movs	r1, #0
 8015666:	4618      	mov	r0, r3
 8015668:	f7fe ff49 	bl	80144fe <RegionCommonValueInRange>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	bf14      	ite	ne
 8015672:	2301      	movne	r3, #1
 8015674:	2300      	moveq	r3, #0
 8015676:	b2db      	uxtb	r3, r3
 8015678:	e011      	b.n	801569e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f993 3000 	ldrsb.w	r3, [r3]
 8015680:	2207      	movs	r2, #7
 8015682:	2100      	movs	r1, #0
 8015684:	4618      	mov	r0, r3
 8015686:	f7fe ff3a 	bl	80144fe <RegionCommonValueInRange>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	bf14      	ite	ne
 8015690:	2301      	movne	r3, #1
 8015692:	2300      	moveq	r3, #0
 8015694:	b2db      	uxtb	r3, r3
 8015696:	e002      	b.n	801569e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015698:	2301      	movs	r3, #1
 801569a:	e000      	b.n	801569e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801569c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3710      	adds	r7, #16
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop

080156a8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b08a      	sub	sp, #40	; 0x28
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80156b0:	2350      	movs	r3, #80	; 0x50
 80156b2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	791b      	ldrb	r3, [r3, #4]
 80156ba:	2b10      	cmp	r3, #16
 80156bc:	d162      	bne.n	8015784 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	330f      	adds	r3, #15
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d15e      	bne.n	8015788 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80156ca:	2300      	movs	r3, #0
 80156cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156d0:	2303      	movs	r3, #3
 80156d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156d6:	e050      	b.n	801577a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80156d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156dc:	2b07      	cmp	r3, #7
 80156de:	d824      	bhi.n	801572a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156e8:	4413      	add	r3, r2
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80156ee:	69ba      	ldr	r2, [r7, #24]
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6819      	ldr	r1, [r3, #0]
 80156f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156f8:	3301      	adds	r3, #1
 80156fa:	440b      	add	r3, r1
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	021b      	lsls	r3, r3, #8
 8015700:	4313      	orrs	r3, r2
 8015702:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015704:	69ba      	ldr	r2, [r7, #24]
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	6819      	ldr	r1, [r3, #0]
 801570a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801570e:	3302      	adds	r3, #2
 8015710:	440b      	add	r3, r1
 8015712:	781b      	ldrb	r3, [r3, #0]
 8015714:	041b      	lsls	r3, r3, #16
 8015716:	4313      	orrs	r3, r2
 8015718:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801571a:	69bb      	ldr	r3, [r7, #24]
 801571c:	2264      	movs	r2, #100	; 0x64
 801571e:	fb02 f303 	mul.w	r3, r2, r3
 8015722:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	61fb      	str	r3, [r7, #28]
 8015728:	e006      	b.n	8015738 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801572e:	2300      	movs	r3, #0
 8015730:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015734:	2300      	movs	r3, #0
 8015736:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d00b      	beq.n	8015756 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801573e:	f107 0318 	add.w	r3, r7, #24
 8015742:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015748:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801574a:	f107 0310 	add.w	r3, r7, #16
 801574e:	4618      	mov	r0, r3
 8015750:	f000 fd0e 	bl	8016170 <RegionEU868ChannelAdd>
 8015754:	e007      	b.n	8015766 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801575a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801575c:	f107 030c 	add.w	r3, r7, #12
 8015760:	4618      	mov	r0, r3
 8015762:	f000 fda7 	bl	80162b4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801576a:	3303      	adds	r3, #3
 801576c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015774:	3301      	adds	r3, #1
 8015776:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801577a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801577e:	2b0f      	cmp	r3, #15
 8015780:	d9aa      	bls.n	80156d8 <RegionEU868ApplyCFList+0x30>
 8015782:	e002      	b.n	801578a <RegionEU868ApplyCFList+0xe2>
        return;
 8015784:	bf00      	nop
 8015786:	e000      	b.n	801578a <RegionEU868ApplyCFList+0xe2>
        return;
 8015788:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801578a:	3728      	adds	r7, #40	; 0x28
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}

08015790 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	791b      	ldrb	r3, [r3, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d002      	beq.n	80157a6 <RegionEU868ChanMaskSet+0x16>
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d00b      	beq.n	80157bc <RegionEU868ChanMaskSet+0x2c>
 80157a4:	e015      	b.n	80157d2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80157a6:	4b0e      	ldr	r3, [pc, #56]	; (80157e0 <RegionEU868ChanMaskSet+0x50>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2201      	movs	r2, #1
 80157b4:	4619      	mov	r1, r3
 80157b6:	f7fe ff1f 	bl	80145f8 <RegionCommonChanMaskCopy>
            break;
 80157ba:	e00c      	b.n	80157d6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80157bc:	4b08      	ldr	r3, [pc, #32]	; (80157e0 <RegionEU868ChanMaskSet+0x50>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2201      	movs	r2, #1
 80157ca:	4619      	mov	r1, r3
 80157cc:	f7fe ff14 	bl	80145f8 <RegionCommonChanMaskCopy>
            break;
 80157d0:	e001      	b.n	80157d6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80157d2:	2300      	movs	r3, #0
 80157d4:	e000      	b.n	80157d8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80157d6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	20000dd4 	.word	0x20000dd4

080157e4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b088      	sub	sp, #32
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	60ba      	str	r2, [r7, #8]
 80157ec:	607b      	str	r3, [r7, #4]
 80157ee:	4603      	mov	r3, r0
 80157f0:	73fb      	strb	r3, [r7, #15]
 80157f2:	460b      	mov	r3, r1
 80157f4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80157fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157fe:	2b07      	cmp	r3, #7
 8015800:	bfa8      	it	ge
 8015802:	2307      	movge	r3, #7
 8015804:	b25a      	sxtb	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015810:	491e      	ldr	r1, [pc, #120]	; (801588c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015812:	4618      	mov	r0, r3
 8015814:	f7ff fb80 	bl	8014f18 <RegionCommonGetBandwidth>
 8015818:	4603      	mov	r3, r0
 801581a:	b2da      	uxtb	r2, r3
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015826:	2b07      	cmp	r3, #7
 8015828:	d10a      	bne.n	8015840 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015830:	461a      	mov	r2, r3
 8015832:	4b17      	ldr	r3, [pc, #92]	; (8015890 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015834:	5c9b      	ldrb	r3, [r3, r2]
 8015836:	4618      	mov	r0, r3
 8015838:	f7ff f902 	bl	8014a40 <RegionCommonComputeSymbolTimeFsk>
 801583c:	6178      	str	r0, [r7, #20]
 801583e:	e011      	b.n	8015864 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015846:	461a      	mov	r2, r3
 8015848:	4b11      	ldr	r3, [pc, #68]	; (8015890 <RegionEU868ComputeRxWindowParameters+0xac>)
 801584a:	5c9a      	ldrb	r2, [r3, r2]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015852:	4619      	mov	r1, r3
 8015854:	4b0d      	ldr	r3, [pc, #52]	; (801588c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015856:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801585a:	4619      	mov	r1, r3
 801585c:	4610      	mov	r0, r2
 801585e:	f7ff f8d9 	bl	8014a14 <RegionCommonComputeSymbolTimeLoRa>
 8015862:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015864:	4b0b      	ldr	r3, [pc, #44]	; (8015894 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015868:	4798      	blx	r3
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	3308      	adds	r3, #8
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	320c      	adds	r2, #12
 8015872:	7bb9      	ldrb	r1, [r7, #14]
 8015874:	9201      	str	r2, [sp, #4]
 8015876:	9300      	str	r3, [sp, #0]
 8015878:	4603      	mov	r3, r0
 801587a:	68ba      	ldr	r2, [r7, #8]
 801587c:	6978      	ldr	r0, [r7, #20]
 801587e:	f7ff f8ef 	bl	8014a60 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015882:	bf00      	nop
 8015884:	3718      	adds	r7, #24
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	0801ba24 	.word	0x0801ba24
 8015890:	0801ba1c 	.word	0x0801ba1c
 8015894:	0801ba54 	.word	0x0801ba54

08015898 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015898:	b5b0      	push	{r4, r5, r7, lr}
 801589a:	b090      	sub	sp, #64	; 0x40
 801589c:	af0a      	add	r7, sp, #40	; 0x28
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	785b      	ldrb	r3, [r3, #1]
 80158a6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80158b6:	4b5a      	ldr	r3, [pc, #360]	; (8015a20 <RegionEU868RxConfig+0x188>)
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	4798      	blx	r3
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d001      	beq.n	80158c6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80158c2:	2300      	movs	r3, #0
 80158c4:	e0a8      	b.n	8015a18 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	7cdb      	ldrb	r3, [r3, #19]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d126      	bne.n	801591c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80158ce:	4b55      	ldr	r3, [pc, #340]	; (8015a24 <RegionEU868RxConfig+0x18c>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	4619      	mov	r1, r3
 80158d8:	460b      	mov	r3, r1
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	440b      	add	r3, r1
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	4413      	add	r3, r2
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80158e6:	4b4f      	ldr	r3, [pc, #316]	; (8015a24 <RegionEU868RxConfig+0x18c>)
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	4619      	mov	r1, r3
 80158f0:	460b      	mov	r3, r1
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	440b      	add	r3, r1
 80158f6:	009b      	lsls	r3, r3, #2
 80158f8:	4413      	add	r3, r2
 80158fa:	3304      	adds	r3, #4
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d00c      	beq.n	801591c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015902:	4b48      	ldr	r3, [pc, #288]	; (8015a24 <RegionEU868RxConfig+0x18c>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	781b      	ldrb	r3, [r3, #0]
 801590a:	4619      	mov	r1, r3
 801590c:	460b      	mov	r3, r1
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	440b      	add	r3, r1
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	4413      	add	r3, r2
 8015916:	3304      	adds	r3, #4
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801591c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015920:	4a41      	ldr	r2, [pc, #260]	; (8015a28 <RegionEU868RxConfig+0x190>)
 8015922:	5cd3      	ldrb	r3, [r2, r3]
 8015924:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015926:	4b3e      	ldr	r3, [pc, #248]	; (8015a20 <RegionEU868RxConfig+0x188>)
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	6938      	ldr	r0, [r7, #16]
 801592c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801592e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015932:	2b07      	cmp	r3, #7
 8015934:	d128      	bne.n	8015988 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015936:	2300      	movs	r3, #0
 8015938:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801593a:	4b39      	ldr	r3, [pc, #228]	; (8015a20 <RegionEU868RxConfig+0x188>)
 801593c:	699c      	ldr	r4, [r3, #24]
 801593e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015946:	fb02 f303 	mul.w	r3, r2, r3
 801594a:	4619      	mov	r1, r3
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	b29b      	uxth	r3, r3
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	7c92      	ldrb	r2, [r2, #18]
 8015956:	7df8      	ldrb	r0, [r7, #23]
 8015958:	9209      	str	r2, [sp, #36]	; 0x24
 801595a:	2200      	movs	r2, #0
 801595c:	9208      	str	r2, [sp, #32]
 801595e:	2200      	movs	r2, #0
 8015960:	9207      	str	r2, [sp, #28]
 8015962:	2200      	movs	r2, #0
 8015964:	9206      	str	r2, [sp, #24]
 8015966:	2201      	movs	r2, #1
 8015968:	9205      	str	r2, [sp, #20]
 801596a:	2200      	movs	r2, #0
 801596c:	9204      	str	r2, [sp, #16]
 801596e:	2200      	movs	r2, #0
 8015970:	9203      	str	r2, [sp, #12]
 8015972:	9302      	str	r3, [sp, #8]
 8015974:	2305      	movs	r3, #5
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	4b2c      	ldr	r3, [pc, #176]	; (8015a2c <RegionEU868RxConfig+0x194>)
 801597a:	9300      	str	r3, [sp, #0]
 801597c:	2300      	movs	r3, #0
 801597e:	460a      	mov	r2, r1
 8015980:	f24c 3150 	movw	r1, #50000	; 0xc350
 8015984:	47a0      	blx	r4
 8015986:	e024      	b.n	80159d2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015988:	2301      	movs	r3, #1
 801598a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801598c:	4b24      	ldr	r3, [pc, #144]	; (8015a20 <RegionEU868RxConfig+0x188>)
 801598e:	699c      	ldr	r4, [r3, #24]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	789b      	ldrb	r3, [r3, #2]
 8015994:	461d      	mov	r5, r3
 8015996:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	b29b      	uxth	r3, r3
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	7c92      	ldrb	r2, [r2, #18]
 80159a4:	7df8      	ldrb	r0, [r7, #23]
 80159a6:	9209      	str	r2, [sp, #36]	; 0x24
 80159a8:	2201      	movs	r2, #1
 80159aa:	9208      	str	r2, [sp, #32]
 80159ac:	2200      	movs	r2, #0
 80159ae:	9207      	str	r2, [sp, #28]
 80159b0:	2200      	movs	r2, #0
 80159b2:	9206      	str	r2, [sp, #24]
 80159b4:	2200      	movs	r2, #0
 80159b6:	9205      	str	r2, [sp, #20]
 80159b8:	2200      	movs	r2, #0
 80159ba:	9204      	str	r2, [sp, #16]
 80159bc:	2200      	movs	r2, #0
 80159be:	9203      	str	r2, [sp, #12]
 80159c0:	9302      	str	r3, [sp, #8]
 80159c2:	2308      	movs	r3, #8
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	2300      	movs	r3, #0
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	2301      	movs	r3, #1
 80159cc:	460a      	mov	r2, r1
 80159ce:	4629      	mov	r1, r5
 80159d0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	7c5b      	ldrb	r3, [r3, #17]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d005      	beq.n	80159e6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80159da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159de:	4a14      	ldr	r2, [pc, #80]	; (8015a30 <RegionEU868RxConfig+0x198>)
 80159e0:	5cd3      	ldrb	r3, [r2, r3]
 80159e2:	75bb      	strb	r3, [r7, #22]
 80159e4:	e004      	b.n	80159f0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80159e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159ea:	4a12      	ldr	r2, [pc, #72]	; (8015a34 <RegionEU868RxConfig+0x19c>)
 80159ec:	5cd3      	ldrb	r3, [r2, r3]
 80159ee:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80159f0:	4b0b      	ldr	r3, [pc, #44]	; (8015a20 <RegionEU868RxConfig+0x188>)
 80159f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159f4:	7dba      	ldrb	r2, [r7, #22]
 80159f6:	320d      	adds	r2, #13
 80159f8:	b2d1      	uxtb	r1, r2
 80159fa:	7dfa      	ldrb	r2, [r7, #23]
 80159fc:	4610      	mov	r0, r2
 80159fe:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	7cdb      	ldrb	r3, [r3, #19]
 8015a04:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015a08:	6939      	ldr	r1, [r7, #16]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ff faa2 	bl	8014f54 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	7bfa      	ldrb	r2, [r7, #15]
 8015a14:	701a      	strb	r2, [r3, #0]
    return true;
 8015a16:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3718      	adds	r7, #24
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015a20:	0801ba54 	.word	0x0801ba54
 8015a24:	20000dd4 	.word	0x20000dd4
 8015a28:	0801ba1c 	.word	0x0801ba1c
 8015a2c:	00014585 	.word	0x00014585
 8015a30:	0801ba4c 	.word	0x0801ba4c
 8015a34:	0801ba44 	.word	0x0801ba44

08015a38 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015a38:	b590      	push	{r4, r7, lr}
 8015a3a:	b093      	sub	sp, #76	; 0x4c
 8015a3c:	af0a      	add	r7, sp, #40	; 0x28
 8015a3e:	60f8      	str	r0, [r7, #12]
 8015a40:	60b9      	str	r1, [r7, #8]
 8015a42:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	4b5d      	ldr	r3, [pc, #372]	; (8015bc4 <RegionEU868TxConfig+0x18c>)
 8015a4e:	5c9b      	ldrb	r3, [r3, r2]
 8015a50:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015a58:	4b5b      	ldr	r3, [pc, #364]	; (8015bc8 <RegionEU868TxConfig+0x190>)
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	4b5b      	ldr	r3, [pc, #364]	; (8015bcc <RegionEU868TxConfig+0x194>)
 8015a5e:	6819      	ldr	r1, [r3, #0]
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	461c      	mov	r4, r3
 8015a66:	4623      	mov	r3, r4
 8015a68:	005b      	lsls	r3, r3, #1
 8015a6a:	4423      	add	r3, r4
 8015a6c:	009b      	lsls	r3, r3, #2
 8015a6e:	440b      	add	r3, r1
 8015a70:	3309      	adds	r3, #9
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	4619      	mov	r1, r3
 8015a76:	460b      	mov	r3, r1
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	440b      	add	r3, r1
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	4413      	add	r3, r2
 8015a80:	3302      	adds	r3, #2
 8015a82:	f993 3000 	ldrsb.w	r3, [r3]
 8015a86:	4619      	mov	r1, r3
 8015a88:	f7ff fa31 	bl	8014eee <RegionCommonLimitTxPower>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a96:	494e      	ldr	r1, [pc, #312]	; (8015bd0 <RegionEU868TxConfig+0x198>)
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7ff fa3d 	bl	8014f18 <RegionCommonGetBandwidth>
 8015a9e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	6859      	ldr	r1, [r3, #4]
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	689a      	ldr	r2, [r3, #8]
 8015aac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7ff f88d 	bl	8014bd0 <RegionCommonComputeTxPower>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015aba:	4b46      	ldr	r3, [pc, #280]	; (8015bd4 <RegionEU868TxConfig+0x19c>)
 8015abc:	68da      	ldr	r2, [r3, #12]
 8015abe:	4b43      	ldr	r3, [pc, #268]	; (8015bcc <RegionEU868TxConfig+0x194>)
 8015ac0:	6819      	ldr	r1, [r3, #0]
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	4603      	mov	r3, r0
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	4403      	add	r3, r0
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	440b      	add	r3, r1
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ade:	2b07      	cmp	r3, #7
 8015ae0:	d124      	bne.n	8015b2c <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015ae6:	4b3b      	ldr	r3, [pc, #236]	; (8015bd4 <RegionEU868TxConfig+0x19c>)
 8015ae8:	69dc      	ldr	r4, [r3, #28]
 8015aea:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015af2:	fb02 f303 	mul.w	r3, r2, r3
 8015af6:	461a      	mov	r2, r3
 8015af8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015afc:	7ff8      	ldrb	r0, [r7, #31]
 8015afe:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015b02:	9308      	str	r3, [sp, #32]
 8015b04:	2300      	movs	r3, #0
 8015b06:	9307      	str	r3, [sp, #28]
 8015b08:	2300      	movs	r3, #0
 8015b0a:	9306      	str	r3, [sp, #24]
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9305      	str	r3, [sp, #20]
 8015b10:	2301      	movs	r3, #1
 8015b12:	9304      	str	r3, [sp, #16]
 8015b14:	2300      	movs	r3, #0
 8015b16:	9303      	str	r3, [sp, #12]
 8015b18:	2305      	movs	r3, #5
 8015b1a:	9302      	str	r3, [sp, #8]
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	9301      	str	r3, [sp, #4]
 8015b20:	9200      	str	r2, [sp, #0]
 8015b22:	69bb      	ldr	r3, [r7, #24]
 8015b24:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015b28:	47a0      	blx	r4
 8015b2a:	e01d      	b.n	8015b68 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015b30:	4b28      	ldr	r3, [pc, #160]	; (8015bd4 <RegionEU868TxConfig+0x19c>)
 8015b32:	69dc      	ldr	r4, [r3, #28]
 8015b34:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015b38:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015b3c:	7ff8      	ldrb	r0, [r7, #31]
 8015b3e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015b42:	9208      	str	r2, [sp, #32]
 8015b44:	2200      	movs	r2, #0
 8015b46:	9207      	str	r2, [sp, #28]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	9206      	str	r2, [sp, #24]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	9205      	str	r2, [sp, #20]
 8015b50:	2201      	movs	r2, #1
 8015b52:	9204      	str	r2, [sp, #16]
 8015b54:	2200      	movs	r2, #0
 8015b56:	9203      	str	r2, [sp, #12]
 8015b58:	2208      	movs	r2, #8
 8015b5a:	9202      	str	r2, [sp, #8]
 8015b5c:	2201      	movs	r2, #1
 8015b5e:	9201      	str	r2, [sp, #4]
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	2200      	movs	r2, #0
 8015b66:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015b68:	4b18      	ldr	r3, [pc, #96]	; (8015bcc <RegionEU868TxConfig+0x194>)
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	4619      	mov	r1, r3
 8015b72:	460b      	mov	r3, r1
 8015b74:	005b      	lsls	r3, r3, #1
 8015b76:	440b      	add	r3, r1
 8015b78:	009b      	lsls	r3, r3, #2
 8015b7a:	4413      	add	r3, r2
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b84:	4619      	mov	r1, r3
 8015b86:	4610      	mov	r0, r2
 8015b88:	f7ff fa22 	bl	8014fd0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	899b      	ldrh	r3, [r3, #12]
 8015b96:	4619      	mov	r1, r3
 8015b98:	4610      	mov	r0, r2
 8015b9a:	f7ff faa7 	bl	80150ec <GetTimeOnAir>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015ba4:	4b0b      	ldr	r3, [pc, #44]	; (8015bd4 <RegionEU868TxConfig+0x19c>)
 8015ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ba8:	68fa      	ldr	r2, [r7, #12]
 8015baa:	8992      	ldrh	r2, [r2, #12]
 8015bac:	b2d1      	uxtb	r1, r2
 8015bae:	7ffa      	ldrb	r2, [r7, #31]
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	7f7a      	ldrb	r2, [r7, #29]
 8015bb8:	701a      	strb	r2, [r3, #0]
    return true;
 8015bba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3724      	adds	r7, #36	; 0x24
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd90      	pop	{r4, r7, pc}
 8015bc4:	0801ba1c 	.word	0x0801ba1c
 8015bc8:	20000dd0 	.word	0x20000dd0
 8015bcc:	20000dd4 	.word	0x20000dd4
 8015bd0:	0801ba24 	.word	0x0801ba24
 8015bd4:	0801ba54 	.word	0x0801ba54

08015bd8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015bd8:	b590      	push	{r4, r7, lr}
 8015bda:	b093      	sub	sp, #76	; 0x4c
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
 8015be4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015be6:	2307      	movs	r3, #7
 8015be8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015bec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	601a      	str	r2, [r3, #0]
 8015bf4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015c02:	2300      	movs	r3, #0
 8015c04:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015c06:	e085      	b.n	8015d14 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	685a      	ldr	r2, [r3, #4]
 8015c0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015c10:	4413      	add	r3, r2
 8015c12:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015c16:	4611      	mov	r1, r2
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7fe fe31 	bl	8014880 <RegionCommonParseLinkAdrReq>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015c24:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d07b      	beq.n	8015d24 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015c2c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c30:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015c34:	4413      	add	r3, r2
 8015c36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015c3a:	2307      	movs	r3, #7
 8015c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015c40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c44:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015c46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d109      	bne.n	8015c62 <RegionEU868LinkAdrReq+0x8a>
 8015c4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d106      	bne.n	8015c62 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015c54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c58:	f023 0301 	bic.w	r3, r3, #1
 8015c5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c60:	e058      	b.n	8015d14 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d003      	beq.n	8015c72 <RegionEU868LinkAdrReq+0x9a>
 8015c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c6e:	2b05      	cmp	r3, #5
 8015c70:	d903      	bls.n	8015c7a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c76:	2b06      	cmp	r3, #6
 8015c78:	d906      	bls.n	8015c88 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c7e:	f023 0301 	bic.w	r3, r3, #1
 8015c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c86:	e045      	b.n	8015d14 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015c88:	2300      	movs	r3, #0
 8015c8a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015c8e:	e03d      	b.n	8015d0c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015c90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c94:	2b06      	cmp	r3, #6
 8015c96:	d118      	bne.n	8015cca <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015c98:	4b5f      	ldr	r3, [pc, #380]	; (8015e18 <RegionEU868LinkAdrReq+0x240>)
 8015c9a:	6819      	ldr	r1, [r3, #0]
 8015c9c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	4413      	add	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	440b      	add	r3, r1
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d028      	beq.n	8015d02 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015cb0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8015cba:	b21a      	sxth	r2, r3
 8015cbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015cbe:	b21b      	sxth	r3, r3
 8015cc0:	4313      	orrs	r3, r2
 8015cc2:	b21b      	sxth	r3, r3
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015cc8:	e01b      	b.n	8015d02 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015cca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ccc:	461a      	mov	r2, r3
 8015cce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cd2:	fa42 f303 	asr.w	r3, r2, r3
 8015cd6:	f003 0301 	and.w	r3, r3, #1
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d011      	beq.n	8015d02 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015cde:	4b4e      	ldr	r3, [pc, #312]	; (8015e18 <RegionEU868LinkAdrReq+0x240>)
 8015ce0:	6819      	ldr	r1, [r3, #0]
 8015ce2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	005b      	lsls	r3, r3, #1
 8015cea:	4413      	add	r3, r2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	440b      	add	r3, r1
 8015cf0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d105      	bne.n	8015d02 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015cf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015cfa:	f023 0301 	bic.w	r3, r3, #1
 8015cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015d02:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015d06:	3301      	adds	r3, #1
 8015d08:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015d0c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015d10:	2b0f      	cmp	r3, #15
 8015d12:	d9bd      	bls.n	8015c90 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	7a1b      	ldrb	r3, [r3, #8]
 8015d18:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	f4ff af73 	bcc.w	8015c08 <RegionEU868LinkAdrReq+0x30>
 8015d22:	e000      	b.n	8015d26 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015d24:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015d26:	2302      	movs	r3, #2
 8015d28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	7a5b      	ldrb	r3, [r3, #9]
 8015d30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7ff fa27 	bl	801518c <RegionEU868GetPhyParam>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d46:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	7a9b      	ldrb	r3, [r3, #10]
 8015d4c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015d4e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015d52:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015d54:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015d58:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015d5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015d5e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015d66:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015d6e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	7b5b      	ldrb	r3, [r3, #13]
 8015d74:	b25b      	sxtb	r3, r3
 8015d76:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015d78:	2310      	movs	r3, #16
 8015d7a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015d7c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015d80:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d84:	b25b      	sxtb	r3, r3
 8015d86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015d8a:	2307      	movs	r3, #7
 8015d8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015d90:	4b21      	ldr	r3, [pc, #132]	; (8015e18 <RegionEU868LinkAdrReq+0x240>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015d96:	2307      	movs	r3, #7
 8015d98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015da8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015db0:	1c9a      	adds	r2, r3, #2
 8015db2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015db6:	1c59      	adds	r1, r3, #1
 8015db8:	f107 0010 	add.w	r0, r7, #16
 8015dbc:	4623      	mov	r3, r4
 8015dbe:	f7fe fdb0 	bl	8014922 <RegionCommonLinkAdrReqVerifyParams>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015dcc:	2b07      	cmp	r3, #7
 8015dce:	d10c      	bne.n	8015dea <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015dd0:	4b11      	ldr	r3, [pc, #68]	; (8015e18 <RegionEU868LinkAdrReq+0x240>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	33c0      	adds	r3, #192	; 0xc0
 8015dd6:	2202      	movs	r2, #2
 8015dd8:	2100      	movs	r1, #0
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 fb7c 	bl	80164d8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015de0:	4b0d      	ldr	r3, [pc, #52]	; (8015e18 <RegionEU868LinkAdrReq+0x240>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015de6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015dea:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015df2:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015dfa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e04:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015e08:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	374c      	adds	r7, #76	; 0x4c
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd90      	pop	{r4, r7, pc}
 8015e16:	bf00      	nop
 8015e18:	20000dd4 	.word	0x20000dd4

08015e1c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015e24:	2307      	movs	r3, #7
 8015e26:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	f107 020e 	add.w	r2, r7, #14
 8015e34:	4611      	mov	r1, r2
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7ff f8e2 	bl	8015000 <VerifyRfFreq>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	f083 0301 	eor.w	r3, r3, #1
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d003      	beq.n	8015e50 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015e48:	7bfb      	ldrb	r3, [r7, #15]
 8015e4a:	f023 0301 	bic.w	r3, r3, #1
 8015e4e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f993 3000 	ldrsb.w	r3, [r3]
 8015e56:	2207      	movs	r2, #7
 8015e58:	2100      	movs	r1, #0
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fe fb4f 	bl	80144fe <RegionCommonValueInRange>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d103      	bne.n	8015e6e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015e66:	7bfb      	ldrb	r3, [r7, #15]
 8015e68:	f023 0302 	bic.w	r3, r3, #2
 8015e6c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e74:	2205      	movs	r2, #5
 8015e76:	2100      	movs	r1, #0
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fe fb40 	bl	80144fe <RegionCommonValueInRange>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d103      	bne.n	8015e8c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015e84:	7bfb      	ldrb	r3, [r7, #15]
 8015e86:	f023 0304 	bic.w	r3, r3, #4
 8015e8a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3710      	adds	r7, #16
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
	...

08015e98 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015ea0:	2303      	movs	r3, #3
 8015ea2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d114      	bne.n	8015ed8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015eb4:	b2db      	uxtb	r3, r3
 8015eb6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015eb8:	f107 0308 	add.w	r3, r7, #8
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f000 f9f9 	bl	80162b4 <RegionEU868ChannelsRemove>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	f083 0301 	eor.w	r3, r3, #1
 8015ec8:	b2db      	uxtb	r3, r3
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d03b      	beq.n	8015f46 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015ece:	7dfb      	ldrb	r3, [r7, #23]
 8015ed0:	f023 0303 	bic.w	r3, r3, #3
 8015ed4:	75fb      	strb	r3, [r7, #23]
 8015ed6:	e036      	b.n	8015f46 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015ee8:	f107 030c 	add.w	r3, r7, #12
 8015eec:	4618      	mov	r0, r3
 8015eee:	f000 f93f 	bl	8016170 <RegionEU868ChannelAdd>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	2b06      	cmp	r3, #6
 8015ef6:	d820      	bhi.n	8015f3a <RegionEU868NewChannelReq+0xa2>
 8015ef8:	a201      	add	r2, pc, #4	; (adr r2, 8015f00 <RegionEU868NewChannelReq+0x68>)
 8015efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015efe:	bf00      	nop
 8015f00:	08015f45 	.word	0x08015f45
 8015f04:	08015f3b 	.word	0x08015f3b
 8015f08:	08015f3b 	.word	0x08015f3b
 8015f0c:	08015f3b 	.word	0x08015f3b
 8015f10:	08015f1d 	.word	0x08015f1d
 8015f14:	08015f27 	.word	0x08015f27
 8015f18:	08015f31 	.word	0x08015f31
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015f1c:	7dfb      	ldrb	r3, [r7, #23]
 8015f1e:	f023 0301 	bic.w	r3, r3, #1
 8015f22:	75fb      	strb	r3, [r7, #23]
                break;
 8015f24:	e00f      	b.n	8015f46 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	f023 0302 	bic.w	r3, r3, #2
 8015f2c:	75fb      	strb	r3, [r7, #23]
                break;
 8015f2e:	e00a      	b.n	8015f46 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015f30:	7dfb      	ldrb	r3, [r7, #23]
 8015f32:	f023 0303 	bic.w	r3, r3, #3
 8015f36:	75fb      	strb	r3, [r7, #23]
                break;
 8015f38:	e005      	b.n	8015f46 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015f3a:	7dfb      	ldrb	r3, [r7, #23]
 8015f3c:	f023 0303 	bic.w	r3, r3, #3
 8015f40:	75fb      	strb	r3, [r7, #23]
                break;
 8015f42:	e000      	b.n	8015f46 <RegionEU868NewChannelReq+0xae>
                break;
 8015f44:	bf00      	nop
            }
        }
    }

    return status;
 8015f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3718      	adds	r7, #24
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop

08015f54 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	370c      	adds	r7, #12
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bc80      	pop	{r7}
 8015f68:	4770      	bx	lr
	...

08015f6c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015f74:	2303      	movs	r3, #3
 8015f76:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	f107 020e 	add.w	r2, r7, #14
 8015f84:	4611      	mov	r1, r2
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7ff f83a 	bl	8015000 <VerifyRfFreq>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	f083 0301 	eor.w	r3, r3, #1
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d003      	beq.n	8015fa0 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015f98:	7bfb      	ldrb	r3, [r7, #15]
 8015f9a:	f023 0301 	bic.w	r3, r3, #1
 8015f9e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015fa0:	4b13      	ldr	r3, [pc, #76]	; (8015ff0 <RegionEU868DlChannelReq+0x84>)
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	4619      	mov	r1, r3
 8015faa:	460b      	mov	r3, r1
 8015fac:	005b      	lsls	r3, r3, #1
 8015fae:	440b      	add	r3, r1
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	4413      	add	r3, r2
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d103      	bne.n	8015fc2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015fba:	7bfb      	ldrb	r3, [r7, #15]
 8015fbc:	f023 0302 	bic.w	r3, r3, #2
 8015fc0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015fc2:	7bfb      	ldrb	r3, [r7, #15]
 8015fc4:	2b03      	cmp	r3, #3
 8015fc6:	d10d      	bne.n	8015fe4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015fc8:	4b09      	ldr	r3, [pc, #36]	; (8015ff0 <RegionEU868DlChannelReq+0x84>)
 8015fca:	6819      	ldr	r1, [r3, #0]
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	781b      	ldrb	r3, [r3, #0]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	685a      	ldr	r2, [r3, #4]
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	005b      	lsls	r3, r3, #1
 8015fda:	4403      	add	r3, r0
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	440b      	add	r3, r1
 8015fe0:	3304      	adds	r3, #4
 8015fe2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3710      	adds	r7, #16
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20000dd4 	.word	0x20000dd4

08015ff4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	460a      	mov	r2, r1
 8015ffe:	71fb      	strb	r3, [r7, #7]
 8016000:	4613      	mov	r3, r2
 8016002:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016004:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016008:	4618      	mov	r0, r3
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	bc80      	pop	{r7}
 8016010:	4770      	bx	lr
	...

08016014 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b09a      	sub	sp, #104	; 0x68
 8016018:	af02      	add	r7, sp, #8
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	607a      	str	r2, [r7, #4]
 8016020:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016022:	2300      	movs	r3, #0
 8016024:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016028:	2300      	movs	r3, #0
 801602a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801602e:	2300      	movs	r3, #0
 8016030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016032:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016036:	2200      	movs	r2, #0
 8016038:	601a      	str	r2, [r3, #0]
 801603a:	605a      	str	r2, [r3, #4]
 801603c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801603e:	230c      	movs	r3, #12
 8016040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016044:	2307      	movs	r3, #7
 8016046:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016048:	4b47      	ldr	r3, [pc, #284]	; (8016168 <RegionEU868NextChannel+0x154>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	33c0      	adds	r3, #192	; 0xc0
 801604e:	2201      	movs	r2, #1
 8016050:	2100      	movs	r1, #0
 8016052:	4618      	mov	r0, r3
 8016054:	f7fe faa4 	bl	80145a0 <RegionCommonCountChannels>
 8016058:	4603      	mov	r3, r0
 801605a:	2b00      	cmp	r3, #0
 801605c:	d10a      	bne.n	8016074 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801605e:	4b42      	ldr	r3, [pc, #264]	; (8016168 <RegionEU868NextChannel+0x154>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016066:	4b40      	ldr	r3, [pc, #256]	; (8016168 <RegionEU868NextChannel+0x154>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f042 0207 	orr.w	r2, r2, #7
 801606e:	b292      	uxth	r2, r2
 8016070:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	7a5b      	ldrb	r3, [r3, #9]
 8016078:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016080:	b2db      	uxtb	r3, r3
 8016082:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016084:	4b38      	ldr	r3, [pc, #224]	; (8016168 <RegionEU868NextChannel+0x154>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	33c0      	adds	r3, #192	; 0xc0
 801608a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801608c:	4b36      	ldr	r3, [pc, #216]	; (8016168 <RegionEU868NextChannel+0x154>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8016092:	4b36      	ldr	r3, [pc, #216]	; (801616c <RegionEU868NextChannel+0x158>)
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016098:	2310      	movs	r3, #16
 801609a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801609c:	f107 0312 	add.w	r3, r7, #18
 80160a0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	7a9b      	ldrb	r3, [r3, #10]
 80160b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80160b6:	2306      	movs	r3, #6
 80160b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80160bc:	68fa      	ldr	r2, [r7, #12]
 80160be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160c2:	320c      	adds	r2, #12
 80160c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160c8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	7d1b      	ldrb	r3, [r3, #20]
 80160d0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	8adb      	ldrh	r3, [r3, #22]
 80160de:	4619      	mov	r1, r3
 80160e0:	4610      	mov	r0, r2
 80160e2:	f7ff f803 	bl	80150ec <GetTimeOnAir>
 80160e6:	4603      	mov	r3, r0
 80160e8:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80160ea:	f107 0314 	add.w	r3, r7, #20
 80160ee:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80160f0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80160f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80160f8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	9301      	str	r3, [sp, #4]
 8016100:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016104:	9300      	str	r3, [sp, #0]
 8016106:	460b      	mov	r3, r1
 8016108:	6839      	ldr	r1, [r7, #0]
 801610a:	f7fe fe50 	bl	8014dae <RegionCommonIdentifyChannels>
 801610e:	4603      	mov	r3, r0
 8016110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016118:	2b00      	cmp	r3, #0
 801611a:	d10f      	bne.n	801613c <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801611c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016120:	3b01      	subs	r3, #1
 8016122:	4619      	mov	r1, r3
 8016124:	2000      	movs	r0, #0
 8016126:	f000 f985 	bl	8016434 <randr>
 801612a:	4603      	mov	r3, r0
 801612c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8016130:	4413      	add	r3, r2
 8016132:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	701a      	strb	r2, [r3, #0]
 801613a:	e00e      	b.n	801615a <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801613c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016140:	2b0c      	cmp	r3, #12
 8016142:	d10a      	bne.n	801615a <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016144:	4b08      	ldr	r3, [pc, #32]	; (8016168 <RegionEU868NextChannel+0x154>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 801614c:	4b06      	ldr	r3, [pc, #24]	; (8016168 <RegionEU868NextChannel+0x154>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	f042 0207 	orr.w	r2, r2, #7
 8016154:	b292      	uxth	r2, r2
 8016156:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 801615a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801615e:	4618      	mov	r0, r3
 8016160:	3760      	adds	r7, #96	; 0x60
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	20000dd4 	.word	0x20000dd4
 801616c:	20000dd0 	.word	0x20000dd0

08016170 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016178:	2300      	movs	r3, #0
 801617a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801617c:	2300      	movs	r3, #0
 801617e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016180:	2300      	movs	r3, #0
 8016182:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	791b      	ldrb	r3, [r3, #4]
 8016188:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801618a:	7b7b      	ldrb	r3, [r7, #13]
 801618c:	2b02      	cmp	r3, #2
 801618e:	d801      	bhi.n	8016194 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016190:	2306      	movs	r3, #6
 8016192:	e089      	b.n	80162a8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016194:	7b7b      	ldrb	r3, [r7, #13]
 8016196:	2b0f      	cmp	r3, #15
 8016198:	d901      	bls.n	801619e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801619a:	2303      	movs	r3, #3
 801619c:	e084      	b.n	80162a8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	7a1b      	ldrb	r3, [r3, #8]
 80161a4:	f343 0303 	sbfx	r3, r3, #0, #4
 80161a8:	b25b      	sxtb	r3, r3
 80161aa:	2207      	movs	r2, #7
 80161ac:	2100      	movs	r1, #0
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fe f9a5 	bl	80144fe <RegionCommonValueInRange>
 80161b4:	4603      	mov	r3, r0
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d101      	bne.n	80161be <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80161ba:	2301      	movs	r3, #1
 80161bc:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	7a1b      	ldrb	r3, [r3, #8]
 80161c4:	f343 1303 	sbfx	r3, r3, #4, #4
 80161c8:	b25b      	sxtb	r3, r3
 80161ca:	2207      	movs	r2, #7
 80161cc:	2100      	movs	r1, #0
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7fe f995 	bl	80144fe <RegionCommonValueInRange>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d101      	bne.n	80161de <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80161da:	2301      	movs	r3, #1
 80161dc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	7a1b      	ldrb	r3, [r3, #8]
 80161e4:	f343 0303 	sbfx	r3, r3, #0, #4
 80161e8:	b25a      	sxtb	r2, r3
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	7a1b      	ldrb	r3, [r3, #8]
 80161f0:	f343 1303 	sbfx	r3, r3, #4, #4
 80161f4:	b25b      	sxtb	r3, r3
 80161f6:	429a      	cmp	r2, r3
 80161f8:	dd01      	ble.n	80161fe <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80161fa:	2301      	movs	r3, #1
 80161fc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80161fe:	7bbb      	ldrb	r3, [r7, #14]
 8016200:	f083 0301 	eor.w	r3, r3, #1
 8016204:	b2db      	uxtb	r3, r3
 8016206:	2b00      	cmp	r3, #0
 8016208:	d010      	beq.n	801622c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f107 020c 	add.w	r2, r7, #12
 8016214:	4611      	mov	r1, r2
 8016216:	4618      	mov	r0, r3
 8016218:	f7fe fef2 	bl	8015000 <VerifyRfFreq>
 801621c:	4603      	mov	r3, r0
 801621e:	f083 0301 	eor.w	r3, r3, #1
 8016222:	b2db      	uxtb	r3, r3
 8016224:	2b00      	cmp	r3, #0
 8016226:	d001      	beq.n	801622c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016228:	2301      	movs	r3, #1
 801622a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801622c:	7bfb      	ldrb	r3, [r7, #15]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d004      	beq.n	801623c <RegionEU868ChannelAdd+0xcc>
 8016232:	7bbb      	ldrb	r3, [r7, #14]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d001      	beq.n	801623c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016238:	2306      	movs	r3, #6
 801623a:	e035      	b.n	80162a8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801623c:	7bfb      	ldrb	r3, [r7, #15]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d001      	beq.n	8016246 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016242:	2305      	movs	r3, #5
 8016244:	e030      	b.n	80162a8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016246:	7bbb      	ldrb	r3, [r7, #14]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d001      	beq.n	8016250 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801624c:	2304      	movs	r3, #4
 801624e:	e02b      	b.n	80162a8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016250:	4b17      	ldr	r3, [pc, #92]	; (80162b0 <RegionEU868ChannelAdd+0x140>)
 8016252:	6819      	ldr	r1, [r3, #0]
 8016254:	7b7a      	ldrb	r2, [r7, #13]
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	009b      	lsls	r3, r3, #2
 801625e:	18c8      	adds	r0, r1, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	220c      	movs	r2, #12
 8016266:	4619      	mov	r1, r3
 8016268:	f000 f8fb 	bl	8016462 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801626c:	4b10      	ldr	r3, [pc, #64]	; (80162b0 <RegionEU868ChannelAdd+0x140>)
 801626e:	6819      	ldr	r1, [r3, #0]
 8016270:	7b7a      	ldrb	r2, [r7, #13]
 8016272:	7b38      	ldrb	r0, [r7, #12]
 8016274:	4613      	mov	r3, r2
 8016276:	005b      	lsls	r3, r3, #1
 8016278:	4413      	add	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	440b      	add	r3, r1
 801627e:	3309      	adds	r3, #9
 8016280:	4602      	mov	r2, r0
 8016282:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016284:	4b0a      	ldr	r3, [pc, #40]	; (80162b0 <RegionEU868ChannelAdd+0x140>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 801628c:	b21a      	sxth	r2, r3
 801628e:	7b7b      	ldrb	r3, [r7, #13]
 8016290:	2101      	movs	r1, #1
 8016292:	fa01 f303 	lsl.w	r3, r1, r3
 8016296:	b21b      	sxth	r3, r3
 8016298:	4313      	orrs	r3, r2
 801629a:	b21a      	sxth	r2, r3
 801629c:	4b04      	ldr	r3, [pc, #16]	; (80162b0 <RegionEU868ChannelAdd+0x140>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	b292      	uxth	r2, r2
 80162a2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80162a6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	20000dd4 	.word	0x20000dd4

080162b4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80162c2:	7dfb      	ldrb	r3, [r7, #23]
 80162c4:	2b02      	cmp	r3, #2
 80162c6:	d801      	bhi.n	80162cc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80162c8:	2300      	movs	r3, #0
 80162ca:	e015      	b.n	80162f8 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80162cc:	4b0c      	ldr	r3, [pc, #48]	; (8016300 <RegionEU868ChannelsRemove+0x4c>)
 80162ce:	6819      	ldr	r1, [r3, #0]
 80162d0:	7dfa      	ldrb	r2, [r7, #23]
 80162d2:	4613      	mov	r3, r2
 80162d4:	005b      	lsls	r3, r3, #1
 80162d6:	4413      	add	r3, r2
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	440b      	add	r3, r1
 80162dc:	461a      	mov	r2, r3
 80162de:	2300      	movs	r3, #0
 80162e0:	6013      	str	r3, [r2, #0]
 80162e2:	6053      	str	r3, [r2, #4]
 80162e4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80162e6:	4b06      	ldr	r3, [pc, #24]	; (8016300 <RegionEU868ChannelsRemove+0x4c>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	33c0      	adds	r3, #192	; 0xc0
 80162ec:	7df9      	ldrb	r1, [r7, #23]
 80162ee:	2210      	movs	r2, #16
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7fe f921 	bl	8014538 <RegionCommonChanDisable>
 80162f6:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3718      	adds	r7, #24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	20000dd4 	.word	0x20000dd4

08016304 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016304:	b590      	push	{r4, r7, lr}
 8016306:	b085      	sub	sp, #20
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016312:	4b20      	ldr	r3, [pc, #128]	; (8016394 <RegionEU868SetContinuousWave+0x90>)
 8016314:	681a      	ldr	r2, [r3, #0]
 8016316:	4b20      	ldr	r3, [pc, #128]	; (8016398 <RegionEU868SetContinuousWave+0x94>)
 8016318:	6819      	ldr	r1, [r3, #0]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	461c      	mov	r4, r3
 8016320:	4623      	mov	r3, r4
 8016322:	005b      	lsls	r3, r3, #1
 8016324:	4423      	add	r3, r4
 8016326:	009b      	lsls	r3, r3, #2
 8016328:	440b      	add	r3, r1
 801632a:	3309      	adds	r3, #9
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	4619      	mov	r1, r3
 8016330:	460b      	mov	r3, r1
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	440b      	add	r3, r1
 8016336:	00db      	lsls	r3, r3, #3
 8016338:	4413      	add	r3, r2
 801633a:	3302      	adds	r3, #2
 801633c:	f993 3000 	ldrsb.w	r3, [r3]
 8016340:	4619      	mov	r1, r3
 8016342:	f7fe fdd4 	bl	8014eee <RegionCommonLimitTxPower>
 8016346:	4603      	mov	r3, r0
 8016348:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801634a:	2300      	movs	r3, #0
 801634c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801634e:	4b12      	ldr	r3, [pc, #72]	; (8016398 <RegionEU868SetContinuousWave+0x94>)
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	4619      	mov	r1, r3
 8016358:	460b      	mov	r3, r1
 801635a:	005b      	lsls	r3, r3, #1
 801635c:	440b      	add	r3, r1
 801635e:	009b      	lsls	r3, r3, #2
 8016360:	4413      	add	r3, r2
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6859      	ldr	r1, [r3, #4]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	689a      	ldr	r2, [r3, #8]
 801636e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016372:	4618      	mov	r0, r3
 8016374:	f7fe fc2c 	bl	8014bd0 <RegionCommonComputeTxPower>
 8016378:	4603      	mov	r3, r0
 801637a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801637c:	4b07      	ldr	r3, [pc, #28]	; (801639c <RegionEU868SetContinuousWave+0x98>)
 801637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016380:	687a      	ldr	r2, [r7, #4]
 8016382:	8992      	ldrh	r2, [r2, #12]
 8016384:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016388:	68b8      	ldr	r0, [r7, #8]
 801638a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801638c:	bf00      	nop
 801638e:	3714      	adds	r7, #20
 8016390:	46bd      	mov	sp, r7
 8016392:	bd90      	pop	{r4, r7, pc}
 8016394:	20000dd0 	.word	0x20000dd0
 8016398:	20000dd4 	.word	0x20000dd4
 801639c:	0801ba54 	.word	0x0801ba54

080163a0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80163a0:	b480      	push	{r7}
 80163a2:	b085      	sub	sp, #20
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	4603      	mov	r3, r0
 80163a8:	71fb      	strb	r3, [r7, #7]
 80163aa:	460b      	mov	r3, r1
 80163ac:	71bb      	strb	r3, [r7, #6]
 80163ae:	4613      	mov	r3, r2
 80163b0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80163b2:	79ba      	ldrb	r2, [r7, #6]
 80163b4:	797b      	ldrb	r3, [r7, #5]
 80163b6:	1ad3      	subs	r3, r2, r3
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80163bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	da01      	bge.n	80163c8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80163c4:	2300      	movs	r3, #0
 80163c6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80163c8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3714      	adds	r7, #20
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bc80      	pop	{r7}
 80163d2:	4770      	bx	lr

080163d4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80163d4:	b480      	push	{r7}
 80163d6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80163d8:	4b0d      	ldr	r3, [pc, #52]	; (8016410 <rand1+0x3c>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	4a0d      	ldr	r2, [pc, #52]	; (8016414 <rand1+0x40>)
 80163de:	fb02 f303 	mul.w	r3, r2, r3
 80163e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80163e6:	3339      	adds	r3, #57	; 0x39
 80163e8:	4a09      	ldr	r2, [pc, #36]	; (8016410 <rand1+0x3c>)
 80163ea:	6013      	str	r3, [r2, #0]
 80163ec:	4b08      	ldr	r3, [pc, #32]	; (8016410 <rand1+0x3c>)
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	2303      	movs	r3, #3
 80163f2:	fba3 1302 	umull	r1, r3, r3, r2
 80163f6:	1ad1      	subs	r1, r2, r3
 80163f8:	0849      	lsrs	r1, r1, #1
 80163fa:	440b      	add	r3, r1
 80163fc:	0f99      	lsrs	r1, r3, #30
 80163fe:	460b      	mov	r3, r1
 8016400:	07db      	lsls	r3, r3, #31
 8016402:	1a5b      	subs	r3, r3, r1
 8016404:	1ad1      	subs	r1, r2, r3
 8016406:	460b      	mov	r3, r1
}
 8016408:	4618      	mov	r0, r3
 801640a:	46bd      	mov	sp, r7
 801640c:	bc80      	pop	{r7}
 801640e:	4770      	bx	lr
 8016410:	2000011c 	.word	0x2000011c
 8016414:	41c64e6d 	.word	0x41c64e6d

08016418 <srand1>:

void srand1( uint32_t seed )
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
    next = seed;
 8016420:	4a03      	ldr	r2, [pc, #12]	; (8016430 <srand1+0x18>)
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6013      	str	r3, [r2, #0]
}
 8016426:	bf00      	nop
 8016428:	370c      	adds	r7, #12
 801642a:	46bd      	mov	sp, r7
 801642c:	bc80      	pop	{r7}
 801642e:	4770      	bx	lr
 8016430:	2000011c 	.word	0x2000011c

08016434 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b082      	sub	sp, #8
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801643e:	f7ff ffc9 	bl	80163d4 <rand1>
 8016442:	4602      	mov	r2, r0
 8016444:	6839      	ldr	r1, [r7, #0]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	1acb      	subs	r3, r1, r3
 801644a:	3301      	adds	r3, #1
 801644c:	fb92 f1f3 	sdiv	r1, r2, r3
 8016450:	fb03 f301 	mul.w	r3, r3, r1
 8016454:	1ad2      	subs	r2, r2, r3
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	4413      	add	r3, r2
}
 801645a:	4618      	mov	r0, r3
 801645c:	3708      	adds	r7, #8
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}

08016462 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016462:	b480      	push	{r7}
 8016464:	b085      	sub	sp, #20
 8016466:	af00      	add	r7, sp, #0
 8016468:	60f8      	str	r0, [r7, #12]
 801646a:	60b9      	str	r1, [r7, #8]
 801646c:	4613      	mov	r3, r2
 801646e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016470:	e007      	b.n	8016482 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016472:	68ba      	ldr	r2, [r7, #8]
 8016474:	1c53      	adds	r3, r2, #1
 8016476:	60bb      	str	r3, [r7, #8]
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	1c59      	adds	r1, r3, #1
 801647c:	60f9      	str	r1, [r7, #12]
 801647e:	7812      	ldrb	r2, [r2, #0]
 8016480:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016482:	88fb      	ldrh	r3, [r7, #6]
 8016484:	1e5a      	subs	r2, r3, #1
 8016486:	80fa      	strh	r2, [r7, #6]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d1f2      	bne.n	8016472 <memcpy1+0x10>
    }
}
 801648c:	bf00      	nop
 801648e:	bf00      	nop
 8016490:	3714      	adds	r7, #20
 8016492:	46bd      	mov	sp, r7
 8016494:	bc80      	pop	{r7}
 8016496:	4770      	bx	lr

08016498 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016498:	b480      	push	{r7}
 801649a:	b085      	sub	sp, #20
 801649c:	af00      	add	r7, sp, #0
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	4613      	mov	r3, r2
 80164a4:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80164a6:	88fb      	ldrh	r3, [r7, #6]
 80164a8:	3b01      	subs	r3, #1
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	4413      	add	r3, r2
 80164ae:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80164b0:	e007      	b.n	80164c2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80164b2:	68ba      	ldr	r2, [r7, #8]
 80164b4:	1c53      	adds	r3, r2, #1
 80164b6:	60bb      	str	r3, [r7, #8]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	1e59      	subs	r1, r3, #1
 80164bc:	60f9      	str	r1, [r7, #12]
 80164be:	7812      	ldrb	r2, [r2, #0]
 80164c0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80164c2:	88fb      	ldrh	r3, [r7, #6]
 80164c4:	1e5a      	subs	r2, r3, #1
 80164c6:	80fa      	strh	r2, [r7, #6]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d1f2      	bne.n	80164b2 <memcpyr+0x1a>
    }
}
 80164cc:	bf00      	nop
 80164ce:	bf00      	nop
 80164d0:	3714      	adds	r7, #20
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bc80      	pop	{r7}
 80164d6:	4770      	bx	lr

080164d8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
 80164e0:	460b      	mov	r3, r1
 80164e2:	70fb      	strb	r3, [r7, #3]
 80164e4:	4613      	mov	r3, r2
 80164e6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80164e8:	e004      	b.n	80164f4 <memset1+0x1c>
    {
        *dst++ = value;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	1c5a      	adds	r2, r3, #1
 80164ee:	607a      	str	r2, [r7, #4]
 80164f0:	78fa      	ldrb	r2, [r7, #3]
 80164f2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80164f4:	883b      	ldrh	r3, [r7, #0]
 80164f6:	1e5a      	subs	r2, r3, #1
 80164f8:	803a      	strh	r2, [r7, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d1f5      	bne.n	80164ea <memset1+0x12>
    }
}
 80164fe:	bf00      	nop
 8016500:	bf00      	nop
 8016502:	370c      	adds	r7, #12
 8016504:	46bd      	mov	sp, r7
 8016506:	bc80      	pop	{r7}
 8016508:	4770      	bx	lr
	...

0801650c <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801650c:	b480      	push	{r7}
 801650e:	b087      	sub	sp, #28
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	460b      	mov	r3, r1
 8016516:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016518:	4b1a      	ldr	r3, [pc, #104]	; (8016584 <Crc32+0x78>)
 801651a:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801651c:	f04f 33ff 	mov.w	r3, #4294967295
 8016520:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d101      	bne.n	801652c <Crc32+0x20>
    {
        return 0;
 8016528:	2300      	movs	r3, #0
 801652a:	e026      	b.n	801657a <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 801652c:	2300      	movs	r3, #0
 801652e:	827b      	strh	r3, [r7, #18]
 8016530:	e01d      	b.n	801656e <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 8016532:	8a7b      	ldrh	r3, [r7, #18]
 8016534:	687a      	ldr	r2, [r7, #4]
 8016536:	4413      	add	r3, r2
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	461a      	mov	r2, r3
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	4053      	eors	r3, r2
 8016540:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016542:	2300      	movs	r3, #0
 8016544:	823b      	strh	r3, [r7, #16]
 8016546:	e00c      	b.n	8016562 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	085a      	lsrs	r2, r3, #1
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	f003 0301 	and.w	r3, r3, #1
 8016552:	4259      	negs	r1, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	400b      	ands	r3, r1
 8016558:	4053      	eors	r3, r2
 801655a:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801655c:	8a3b      	ldrh	r3, [r7, #16]
 801655e:	3301      	adds	r3, #1
 8016560:	823b      	strh	r3, [r7, #16]
 8016562:	8a3b      	ldrh	r3, [r7, #16]
 8016564:	2b07      	cmp	r3, #7
 8016566:	d9ef      	bls.n	8016548 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8016568:	8a7b      	ldrh	r3, [r7, #18]
 801656a:	3301      	adds	r3, #1
 801656c:	827b      	strh	r3, [r7, #18]
 801656e:	8a7a      	ldrh	r2, [r7, #18]
 8016570:	887b      	ldrh	r3, [r7, #2]
 8016572:	429a      	cmp	r2, r3
 8016574:	d3dd      	bcc.n	8016532 <Crc32+0x26>
        }
    }

    return ~crc;
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	43db      	mvns	r3, r3
}
 801657a:	4618      	mov	r0, r3
 801657c:	371c      	adds	r7, #28
 801657e:	46bd      	mov	sp, r7
 8016580:	bc80      	pop	{r7}
 8016582:	4770      	bx	lr
 8016584:	edb88320 	.word	0xedb88320

08016588 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016588:	b480      	push	{r7}
 801658a:	b083      	sub	sp, #12
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	683a      	ldr	r2, [r7, #0]
 8016596:	619a      	str	r2, [r3, #24]
}
 8016598:	bf00      	nop
 801659a:	370c      	adds	r7, #12
 801659c:	46bd      	mov	sp, r7
 801659e:	bc80      	pop	{r7}
 80165a0:	4770      	bx	lr

080165a2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80165a2:	b480      	push	{r7}
 80165a4:	b083      	sub	sp, #12
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	6078      	str	r0, [r7, #4]
 80165aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	683a      	ldr	r2, [r7, #0]
 80165b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80165b2:	bf00      	nop
 80165b4:	370c      	adds	r7, #12
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bc80      	pop	{r7}
 80165ba:	4770      	bx	lr

080165bc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af02      	add	r7, sp, #8
 80165c2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80165c4:	4a21      	ldr	r2, [pc, #132]	; (801664c <RadioInit+0x90>)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80165ca:	4b21      	ldr	r3, [pc, #132]	; (8016650 <RadioInit+0x94>)
 80165cc:	2200      	movs	r2, #0
 80165ce:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80165d0:	4b1f      	ldr	r3, [pc, #124]	; (8016650 <RadioInit+0x94>)
 80165d2:	2200      	movs	r2, #0
 80165d4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80165d6:	4b1e      	ldr	r3, [pc, #120]	; (8016650 <RadioInit+0x94>)
 80165d8:	2200      	movs	r2, #0
 80165da:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80165dc:	481d      	ldr	r0, [pc, #116]	; (8016654 <RadioInit+0x98>)
 80165de:	f001 fee3 	bl	80183a8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80165e2:	2000      	movs	r0, #0
 80165e4:	f001 f82a 	bl	801763c <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 80165e8:	f002 f974 	bl	80188d4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80165ec:	2100      	movs	r1, #0
 80165ee:	2000      	movs	r0, #0
 80165f0:	f002 fcca 	bl	8018f88 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 80165f4:	2204      	movs	r2, #4
 80165f6:	2100      	movs	r1, #0
 80165f8:	2001      	movs	r0, #1
 80165fa:	f002 faf5 	bl	8018be8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80165fe:	2300      	movs	r3, #0
 8016600:	2200      	movs	r2, #0
 8016602:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016606:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801660a:	f002 fa29 	bl	8018a60 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801660e:	f000 fea1 	bl	8017354 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016612:	2300      	movs	r3, #0
 8016614:	9300      	str	r3, [sp, #0]
 8016616:	4b10      	ldr	r3, [pc, #64]	; (8016658 <RadioInit+0x9c>)
 8016618:	2200      	movs	r2, #0
 801661a:	f04f 31ff 	mov.w	r1, #4294967295
 801661e:	480f      	ldr	r0, [pc, #60]	; (801665c <RadioInit+0xa0>)
 8016620:	f003 fd8c 	bl	801a13c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016624:	2300      	movs	r3, #0
 8016626:	9300      	str	r3, [sp, #0]
 8016628:	4b0d      	ldr	r3, [pc, #52]	; (8016660 <RadioInit+0xa4>)
 801662a:	2200      	movs	r2, #0
 801662c:	f04f 31ff 	mov.w	r1, #4294967295
 8016630:	480c      	ldr	r0, [pc, #48]	; (8016664 <RadioInit+0xa8>)
 8016632:	f003 fd83 	bl	801a13c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016636:	4809      	ldr	r0, [pc, #36]	; (801665c <RadioInit+0xa0>)
 8016638:	f003 fe24 	bl	801a284 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801663c:	4809      	ldr	r0, [pc, #36]	; (8016664 <RadioInit+0xa8>)
 801663e:	f003 fe21 	bl	801a284 <UTIL_TIMER_Stop>
}
 8016642:	bf00      	nop
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	20000ed8 	.word	0x20000ed8
 8016650:	200017b8 	.word	0x200017b8
 8016654:	08017735 	.word	0x08017735
 8016658:	080176a9 	.word	0x080176a9
 801665c:	20001810 	.word	0x20001810
 8016660:	080176bd 	.word	0x080176bd
 8016664:	20001828 	.word	0x20001828

08016668 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016668:	b580      	push	{r7, lr}
 801666a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801666c:	f001 fede 	bl	801842c <SUBGRF_GetOperatingMode>
 8016670:	4603      	mov	r3, r0
 8016672:	2b07      	cmp	r3, #7
 8016674:	d00a      	beq.n	801668c <RadioGetStatus+0x24>
 8016676:	2b07      	cmp	r3, #7
 8016678:	dc0a      	bgt.n	8016690 <RadioGetStatus+0x28>
 801667a:	2b04      	cmp	r3, #4
 801667c:	d002      	beq.n	8016684 <RadioGetStatus+0x1c>
 801667e:	2b05      	cmp	r3, #5
 8016680:	d002      	beq.n	8016688 <RadioGetStatus+0x20>
 8016682:	e005      	b.n	8016690 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016684:	2302      	movs	r3, #2
 8016686:	e004      	b.n	8016692 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016688:	2301      	movs	r3, #1
 801668a:	e002      	b.n	8016692 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801668c:	2303      	movs	r3, #3
 801668e:	e000      	b.n	8016692 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016690:	2300      	movs	r3, #0
    }
}
 8016692:	4618      	mov	r0, r3
 8016694:	bd80      	pop	{r7, pc}
	...

08016698 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	4603      	mov	r3, r0
 80166a0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80166a2:	4a25      	ldr	r2, [pc, #148]	; (8016738 <RadioSetModem+0xa0>)
 80166a4:	79fb      	ldrb	r3, [r7, #7]
 80166a6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80166a8:	79fb      	ldrb	r3, [r7, #7]
 80166aa:	4618      	mov	r0, r3
 80166ac:	f003 f831 	bl	8019712 <RFW_SetRadioModem>
    switch( modem )
 80166b0:	79fb      	ldrb	r3, [r7, #7]
 80166b2:	3b01      	subs	r3, #1
 80166b4:	2b03      	cmp	r3, #3
 80166b6:	d80b      	bhi.n	80166d0 <RadioSetModem+0x38>
 80166b8:	a201      	add	r2, pc, #4	; (adr r2, 80166c0 <RadioSetModem+0x28>)
 80166ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166be:	bf00      	nop
 80166c0:	080166df 	.word	0x080166df
 80166c4:	08016705 	.word	0x08016705
 80166c8:	08016713 	.word	0x08016713
 80166cc:	08016721 	.word	0x08016721
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80166d0:	2000      	movs	r0, #0
 80166d2:	f002 fa63 	bl	8018b9c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166d6:	4b18      	ldr	r3, [pc, #96]	; (8016738 <RadioSetModem+0xa0>)
 80166d8:	2200      	movs	r2, #0
 80166da:	735a      	strb	r2, [r3, #13]
        break;
 80166dc:	e028      	b.n	8016730 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80166de:	2001      	movs	r0, #1
 80166e0:	f002 fa5c 	bl	8018b9c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80166e4:	4b14      	ldr	r3, [pc, #80]	; (8016738 <RadioSetModem+0xa0>)
 80166e6:	7b5a      	ldrb	r2, [r3, #13]
 80166e8:	4b13      	ldr	r3, [pc, #76]	; (8016738 <RadioSetModem+0xa0>)
 80166ea:	7b1b      	ldrb	r3, [r3, #12]
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d01e      	beq.n	801672e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80166f0:	4b11      	ldr	r3, [pc, #68]	; (8016738 <RadioSetModem+0xa0>)
 80166f2:	7b1a      	ldrb	r2, [r3, #12]
 80166f4:	4b10      	ldr	r3, [pc, #64]	; (8016738 <RadioSetModem+0xa0>)
 80166f6:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80166f8:	4b0f      	ldr	r3, [pc, #60]	; (8016738 <RadioSetModem+0xa0>)
 80166fa:	7b5b      	ldrb	r3, [r3, #13]
 80166fc:	4618      	mov	r0, r3
 80166fe:	f000 ff9d 	bl	801763c <RadioSetPublicNetwork>
        }
        break;
 8016702:	e014      	b.n	801672e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016704:	2002      	movs	r0, #2
 8016706:	f002 fa49 	bl	8018b9c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801670a:	4b0b      	ldr	r3, [pc, #44]	; (8016738 <RadioSetModem+0xa0>)
 801670c:	2200      	movs	r2, #0
 801670e:	735a      	strb	r2, [r3, #13]
        break;
 8016710:	e00e      	b.n	8016730 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016712:	2002      	movs	r0, #2
 8016714:	f002 fa42 	bl	8018b9c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016718:	4b07      	ldr	r3, [pc, #28]	; (8016738 <RadioSetModem+0xa0>)
 801671a:	2200      	movs	r2, #0
 801671c:	735a      	strb	r2, [r3, #13]
        break;
 801671e:	e007      	b.n	8016730 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016720:	2000      	movs	r0, #0
 8016722:	f002 fa3b 	bl	8018b9c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016726:	4b04      	ldr	r3, [pc, #16]	; (8016738 <RadioSetModem+0xa0>)
 8016728:	2200      	movs	r2, #0
 801672a:	735a      	strb	r2, [r3, #13]
        break;
 801672c:	e000      	b.n	8016730 <RadioSetModem+0x98>
        break;
 801672e:	bf00      	nop
    }
}
 8016730:	bf00      	nop
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}
 8016738:	200017b8 	.word	0x200017b8

0801673c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b082      	sub	sp, #8
 8016740:	af00      	add	r7, sp, #0
 8016742:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f002 f9e7 	bl	8018b18 <SUBGRF_SetRfFrequency>
}
 801674a:	bf00      	nop
 801674c:	3708      	adds	r7, #8
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}

08016752 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016752:	b580      	push	{r7, lr}
 8016754:	b090      	sub	sp, #64	; 0x40
 8016756:	af0a      	add	r7, sp, #40	; 0x28
 8016758:	60f8      	str	r0, [r7, #12]
 801675a:	60b9      	str	r1, [r7, #8]
 801675c:	603b      	str	r3, [r7, #0]
 801675e:	4613      	mov	r3, r2
 8016760:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016762:	2301      	movs	r3, #1
 8016764:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016766:	2300      	movs	r3, #0
 8016768:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801676a:	2300      	movs	r3, #0
 801676c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801676e:	f000 fe04 	bl	801737a <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 8016772:	2000      	movs	r0, #0
 8016774:	f7ff ff90 	bl	8016698 <RadioSetModem>

    RadioSetChannel( freq );
 8016778:	68f8      	ldr	r0, [r7, #12]
 801677a:	f7ff ffdf 	bl	801673c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801677e:	2301      	movs	r3, #1
 8016780:	9309      	str	r3, [sp, #36]	; 0x24
 8016782:	2300      	movs	r3, #0
 8016784:	9308      	str	r3, [sp, #32]
 8016786:	2300      	movs	r3, #0
 8016788:	9307      	str	r3, [sp, #28]
 801678a:	2300      	movs	r3, #0
 801678c:	9306      	str	r3, [sp, #24]
 801678e:	2300      	movs	r3, #0
 8016790:	9305      	str	r3, [sp, #20]
 8016792:	2300      	movs	r3, #0
 8016794:	9304      	str	r3, [sp, #16]
 8016796:	2300      	movs	r3, #0
 8016798:	9303      	str	r3, [sp, #12]
 801679a:	2300      	movs	r3, #0
 801679c:	9302      	str	r3, [sp, #8]
 801679e:	2303      	movs	r3, #3
 80167a0:	9301      	str	r3, [sp, #4]
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	2300      	movs	r3, #0
 80167a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80167ac:	68b9      	ldr	r1, [r7, #8]
 80167ae:	2000      	movs	r0, #0
 80167b0:	f000 f840 	bl	8016834 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80167b4:	2000      	movs	r0, #0
 80167b6:	f000 fde7 	bl	8017388 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80167ba:	f000 ff6d 	bl	8017698 <RadioGetWakeupTime>
 80167be:	4603      	mov	r3, r0
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7eb fc08 	bl	8001fd6 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80167c6:	f003 fe77 	bl	801a4b8 <UTIL_TIMER_GetCurrentTime>
 80167ca:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80167cc:	e00d      	b.n	80167ea <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80167ce:	2000      	movs	r0, #0
 80167d0:	f000 feb2 	bl	8017538 <RadioRssi>
 80167d4:	4603      	mov	r3, r0
 80167d6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80167d8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80167dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	dd02      	ble.n	80167ea <RadioIsChannelFree+0x98>
        {
            status = false;
 80167e4:	2300      	movs	r3, #0
 80167e6:	75fb      	strb	r3, [r7, #23]
            break;
 80167e8:	e006      	b.n	80167f8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80167ea:	6938      	ldr	r0, [r7, #16]
 80167ec:	f003 fe76 	bl	801a4dc <UTIL_TIMER_GetElapsedTime>
 80167f0:	4602      	mov	r2, r0
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	4293      	cmp	r3, r2
 80167f6:	d8ea      	bhi.n	80167ce <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80167f8:	f000 fdbf 	bl	801737a <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80167fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3718      	adds	r7, #24
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}

08016806 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016806:	b580      	push	{r7, lr}
 8016808:	b082      	sub	sp, #8
 801680a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801680c:	2300      	movs	r3, #0
 801680e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8016810:	2001      	movs	r0, #1
 8016812:	f7ff ff41 	bl	8016698 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016816:	2300      	movs	r3, #0
 8016818:	2200      	movs	r2, #0
 801681a:	2100      	movs	r1, #0
 801681c:	2000      	movs	r0, #0
 801681e:	f002 f91f 	bl	8018a60 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016822:	f001 fed4 	bl	80185ce <SUBGRF_GetRandom>
 8016826:	6078      	str	r0, [r7, #4]

    return rnd;
 8016828:	687b      	ldr	r3, [r7, #4]
}
 801682a:	4618      	mov	r0, r3
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
	...

08016834 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b08a      	sub	sp, #40	; 0x28
 8016838:	af00      	add	r7, sp, #0
 801683a:	60b9      	str	r1, [r7, #8]
 801683c:	607a      	str	r2, [r7, #4]
 801683e:	461a      	mov	r2, r3
 8016840:	4603      	mov	r3, r0
 8016842:	73fb      	strb	r3, [r7, #15]
 8016844:	4613      	mov	r3, r2
 8016846:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016848:	4abd      	ldr	r2, [pc, #756]	; (8016b40 <RadioSetRxConfig+0x30c>)
 801684a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801684e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016850:	f002 ff1d 	bl	801968e <RFW_DeInit>
    if( rxContinuous == true )
 8016854:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016858:	2b00      	cmp	r3, #0
 801685a:	d001      	beq.n	8016860 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801685c:	2300      	movs	r3, #0
 801685e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8016860:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016864:	2b00      	cmp	r3, #0
 8016866:	d004      	beq.n	8016872 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016868:	4ab6      	ldr	r2, [pc, #728]	; (8016b44 <RadioSetRxConfig+0x310>)
 801686a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801686e:	7013      	strb	r3, [r2, #0]
 8016870:	e002      	b.n	8016878 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016872:	4bb4      	ldr	r3, [pc, #720]	; (8016b44 <RadioSetRxConfig+0x310>)
 8016874:	22ff      	movs	r2, #255	; 0xff
 8016876:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016878:	7bfb      	ldrb	r3, [r7, #15]
 801687a:	2b04      	cmp	r3, #4
 801687c:	d009      	beq.n	8016892 <RadioSetRxConfig+0x5e>
 801687e:	2b04      	cmp	r3, #4
 8016880:	f300 81da 	bgt.w	8016c38 <RadioSetRxConfig+0x404>
 8016884:	2b00      	cmp	r3, #0
 8016886:	f000 80bf 	beq.w	8016a08 <RadioSetRxConfig+0x1d4>
 801688a:	2b01      	cmp	r3, #1
 801688c:	f000 812c 	beq.w	8016ae8 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016890:	e1d2      	b.n	8016c38 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016892:	2001      	movs	r0, #1
 8016894:	f001 ffe0 	bl	8018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016898:	4ba9      	ldr	r3, [pc, #676]	; (8016b40 <RadioSetRxConfig+0x30c>)
 801689a:	2200      	movs	r2, #0
 801689c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80168a0:	4aa7      	ldr	r2, [pc, #668]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80168a6:	4ba6      	ldr	r3, [pc, #664]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168a8:	2209      	movs	r2, #9
 80168aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80168ae:	4ba4      	ldr	r3, [pc, #656]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80168b4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80168b6:	68b8      	ldr	r0, [r7, #8]
 80168b8:	f002 fe1a 	bl	80194f0 <SUBGRF_GetFskBandwidthRegValue>
 80168bc:	4603      	mov	r3, r0
 80168be:	461a      	mov	r2, r3
 80168c0:	4b9f      	ldr	r3, [pc, #636]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80168c6:	4b9e      	ldr	r3, [pc, #632]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168c8:	2200      	movs	r2, #0
 80168ca:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80168cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80168ce:	00db      	lsls	r3, r3, #3
 80168d0:	b29a      	uxth	r2, r3
 80168d2:	4b9b      	ldr	r3, [pc, #620]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168d4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80168d6:	4b9a      	ldr	r3, [pc, #616]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168d8:	2200      	movs	r2, #0
 80168da:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80168dc:	4b98      	ldr	r3, [pc, #608]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168de:	2210      	movs	r2, #16
 80168e0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80168e2:	4b97      	ldr	r3, [pc, #604]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168e4:	2200      	movs	r2, #0
 80168e6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80168e8:	4b95      	ldr	r3, [pc, #596]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168ea:	2200      	movs	r2, #0
 80168ec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80168ee:	4b95      	ldr	r3, [pc, #596]	; (8016b44 <RadioSetRxConfig+0x310>)
 80168f0:	781a      	ldrb	r2, [r3, #0]
 80168f2:	4b93      	ldr	r3, [pc, #588]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168f4:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80168f6:	4b92      	ldr	r3, [pc, #584]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168f8:	2201      	movs	r2, #1
 80168fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80168fc:	4b90      	ldr	r3, [pc, #576]	; (8016b40 <RadioSetRxConfig+0x30c>)
 80168fe:	2200      	movs	r2, #0
 8016900:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016902:	2004      	movs	r0, #4
 8016904:	f7ff fec8 	bl	8016698 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016908:	488f      	ldr	r0, [pc, #572]	; (8016b48 <RadioSetRxConfig+0x314>)
 801690a:	f002 f9d3 	bl	8018cb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801690e:	488f      	ldr	r0, [pc, #572]	; (8016b4c <RadioSetRxConfig+0x318>)
 8016910:	f002 fa9c 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016914:	4a8e      	ldr	r2, [pc, #568]	; (8016b50 <RadioSetRxConfig+0x31c>)
 8016916:	f107 031c 	add.w	r3, r7, #28
 801691a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801691e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016922:	f107 031c 	add.w	r3, r7, #28
 8016926:	4618      	mov	r0, r3
 8016928:	f001 fdcf 	bl	80184ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801692c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016930:	f001 fe1a 	bl	8018568 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016934:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016938:	f000 fe1d 	bl	8017576 <RadioRead>
 801693c:	4603      	mov	r3, r0
 801693e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016946:	f023 0310 	bic.w	r3, r3, #16
 801694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801694e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016952:	4619      	mov	r1, r3
 8016954:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016958:	f000 fdfb 	bl	8017552 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801695c:	2104      	movs	r1, #4
 801695e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8016962:	f000 fdf6 	bl	8017552 <RadioWrite>
            modReg= RadioRead(0x89b);
 8016966:	f640 009b 	movw	r0, #2203	; 0x89b
 801696a:	f000 fe04 	bl	8017576 <RadioRead>
 801696e:	4603      	mov	r3, r0
 8016970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016978:	f023 031c 	bic.w	r3, r3, #28
 801697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8016980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016984:	f043 0308 	orr.w	r3, r3, #8
 8016988:	b2db      	uxtb	r3, r3
 801698a:	4619      	mov	r1, r3
 801698c:	f640 009b 	movw	r0, #2203	; 0x89b
 8016990:	f000 fddf 	bl	8017552 <RadioWrite>
            modReg= RadioRead(0x6d1);
 8016994:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8016998:	f000 fded 	bl	8017576 <RadioRead>
 801699c:	4603      	mov	r3, r0
 801699e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80169a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169a6:	f023 0318 	bic.w	r3, r3, #24
 80169aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80169ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169b2:	f043 0318 	orr.w	r3, r3, #24
 80169b6:	b2db      	uxtb	r3, r3
 80169b8:	4619      	mov	r1, r3
 80169ba:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80169be:	f000 fdc8 	bl	8017552 <RadioWrite>
            modReg= RadioRead(0x6ac);
 80169c2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80169c6:	f000 fdd6 	bl	8017576 <RadioRead>
 80169ca:	4603      	mov	r3, r0
 80169cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80169d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80169d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80169dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169e0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	4619      	mov	r1, r3
 80169e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80169ec:	f000 fdb1 	bl	8017552 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80169f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80169f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80169f6:	fb02 f303 	mul.w	r3, r2, r3
 80169fa:	461a      	mov	r2, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a02:	4a4f      	ldr	r2, [pc, #316]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a04:	6093      	str	r3, [r2, #8]
            break;
 8016a06:	e118      	b.n	8016c3a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a08:	2000      	movs	r0, #0
 8016a0a:	f001 ff25 	bl	8018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016a0e:	4b4c      	ldr	r3, [pc, #304]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a10:	2200      	movs	r2, #0
 8016a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016a16:	4a4a      	ldr	r2, [pc, #296]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016a1c:	4b48      	ldr	r3, [pc, #288]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a1e:	220b      	movs	r2, #11
 8016a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016a24:	68b8      	ldr	r0, [r7, #8]
 8016a26:	f002 fd63 	bl	80194f0 <SUBGRF_GetFskBandwidthRegValue>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	461a      	mov	r2, r3
 8016a2e:	4b44      	ldr	r3, [pc, #272]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016a34:	4b42      	ldr	r3, [pc, #264]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a36:	2200      	movs	r2, #0
 8016a38:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016a3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a3c:	00db      	lsls	r3, r3, #3
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	4b3f      	ldr	r3, [pc, #252]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a42:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016a44:	4b3e      	ldr	r3, [pc, #248]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a46:	2204      	movs	r2, #4
 8016a48:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016a4a:	4b3d      	ldr	r3, [pc, #244]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a4c:	2218      	movs	r2, #24
 8016a4e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016a50:	4b3b      	ldr	r3, [pc, #236]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016a56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016a5a:	f083 0301 	eor.w	r3, r3, #1
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	461a      	mov	r2, r3
 8016a62:	4b37      	ldr	r3, [pc, #220]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a64:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016a66:	4b37      	ldr	r3, [pc, #220]	; (8016b44 <RadioSetRxConfig+0x310>)
 8016a68:	781a      	ldrb	r2, [r3, #0]
 8016a6a:	4b35      	ldr	r3, [pc, #212]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a6c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016a6e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d003      	beq.n	8016a7e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016a76:	4b32      	ldr	r3, [pc, #200]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a78:	22f2      	movs	r2, #242	; 0xf2
 8016a7a:	75da      	strb	r2, [r3, #23]
 8016a7c:	e002      	b.n	8016a84 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016a7e:	4b30      	ldr	r3, [pc, #192]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a80:	2201      	movs	r2, #1
 8016a82:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016a84:	4b2e      	ldr	r3, [pc, #184]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a86:	2201      	movs	r2, #1
 8016a88:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016a8a:	f000 fc76 	bl	801737a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016a8e:	4b2c      	ldr	r3, [pc, #176]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	bf14      	ite	ne
 8016a98:	2301      	movne	r3, #1
 8016a9a:	2300      	moveq	r3, #0
 8016a9c:	b2db      	uxtb	r3, r3
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7ff fdfa 	bl	8016698 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016aa4:	4828      	ldr	r0, [pc, #160]	; (8016b48 <RadioSetRxConfig+0x314>)
 8016aa6:	f002 f905 	bl	8018cb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016aaa:	4828      	ldr	r0, [pc, #160]	; (8016b4c <RadioSetRxConfig+0x318>)
 8016aac:	f002 f9ce 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ab0:	4a28      	ldr	r2, [pc, #160]	; (8016b54 <RadioSetRxConfig+0x320>)
 8016ab2:	f107 0314 	add.w	r3, r7, #20
 8016ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016aba:	e883 0003 	stmia.w	r3, {r0, r1}
 8016abe:	f107 0314 	add.w	r3, r7, #20
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f001 fd01 	bl	80184ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016ac8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016acc:	f001 fd4c 	bl	8018568 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016ad0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016ad2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016ad6:	fb02 f303 	mul.w	r3, r2, r3
 8016ada:	461a      	mov	r2, r3
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ae2:	4a17      	ldr	r2, [pc, #92]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016ae4:	6093      	str	r3, [r2, #8]
            break;
 8016ae6:	e0a8      	b.n	8016c3a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016ae8:	2000      	movs	r0, #0
 8016aea:	f001 feb5 	bl	8018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016aee:	4b14      	ldr	r3, [pc, #80]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016af0:	2201      	movs	r2, #1
 8016af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	b2da      	uxtb	r2, r3
 8016afa:	4b11      	ldr	r3, [pc, #68]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016b00:	4a15      	ldr	r2, [pc, #84]	; (8016b58 <RadioSetRxConfig+0x324>)
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	4413      	add	r3, r2
 8016b06:	781a      	ldrb	r2, [r3, #0]
 8016b08:	4b0d      	ldr	r3, [pc, #52]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016b0e:	4a0c      	ldr	r2, [pc, #48]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016b10:	7bbb      	ldrb	r3, [r7, #14]
 8016b12:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d105      	bne.n	8016b28 <RadioSetRxConfig+0x2f4>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2b0b      	cmp	r3, #11
 8016b20:	d008      	beq.n	8016b34 <RadioSetRxConfig+0x300>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2b0c      	cmp	r3, #12
 8016b26:	d005      	beq.n	8016b34 <RadioSetRxConfig+0x300>
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	2b01      	cmp	r3, #1
 8016b2c:	d116      	bne.n	8016b5c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2b0c      	cmp	r3, #12
 8016b32:	d113      	bne.n	8016b5c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016b34:	4b02      	ldr	r3, [pc, #8]	; (8016b40 <RadioSetRxConfig+0x30c>)
 8016b36:	2201      	movs	r2, #1
 8016b38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016b3c:	e012      	b.n	8016b64 <RadioSetRxConfig+0x330>
 8016b3e:	bf00      	nop
 8016b40:	200017b8 	.word	0x200017b8
 8016b44:	20000120 	.word	0x20000120
 8016b48:	200017f0 	.word	0x200017f0
 8016b4c:	200017c6 	.word	0x200017c6
 8016b50:	0801b4e8 	.word	0x0801b4e8
 8016b54:	0801b4f0 	.word	0x0801b4f0
 8016b58:	0801bad8 	.word	0x0801bad8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016b5c:	4b39      	ldr	r3, [pc, #228]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b5e:	2200      	movs	r2, #0
 8016b60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016b64:	4b37      	ldr	r3, [pc, #220]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b66:	2201      	movs	r2, #1
 8016b68:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b6a:	4b36      	ldr	r3, [pc, #216]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b70:	2b05      	cmp	r3, #5
 8016b72:	d004      	beq.n	8016b7e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016b74:	4b33      	ldr	r3, [pc, #204]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b7a:	2b06      	cmp	r3, #6
 8016b7c:	d10a      	bne.n	8016b94 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016b7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b80:	2b0b      	cmp	r3, #11
 8016b82:	d803      	bhi.n	8016b8c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016b84:	4b2f      	ldr	r3, [pc, #188]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b86:	220c      	movs	r2, #12
 8016b88:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016b8a:	e006      	b.n	8016b9a <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b8c:	4a2d      	ldr	r2, [pc, #180]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b90:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016b92:	e002      	b.n	8016b9a <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016b94:	4a2b      	ldr	r2, [pc, #172]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016b96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b98:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016b9a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016b9e:	4b29      	ldr	r3, [pc, #164]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016ba0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016ba2:	4b29      	ldr	r3, [pc, #164]	; (8016c48 <RadioSetRxConfig+0x414>)
 8016ba4:	781a      	ldrb	r2, [r3, #0]
 8016ba6:	4b27      	ldr	r3, [pc, #156]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016ba8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016baa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016bae:	4b25      	ldr	r3, [pc, #148]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016bb0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016bb4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016bb8:	4b22      	ldr	r3, [pc, #136]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016bbe:	f000 fbdc 	bl	801737a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016bc2:	4b20      	ldr	r3, [pc, #128]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	bf14      	ite	ne
 8016bcc:	2301      	movne	r3, #1
 8016bce:	2300      	moveq	r3, #0
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7ff fd60 	bl	8016698 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016bd8:	481c      	ldr	r0, [pc, #112]	; (8016c4c <RadioSetRxConfig+0x418>)
 8016bda:	f002 f86b 	bl	8018cb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016bde:	481c      	ldr	r0, [pc, #112]	; (8016c50 <RadioSetRxConfig+0x41c>)
 8016be0:	f002 f934 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016be4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	4618      	mov	r0, r3
 8016bea:	f001 fe44 	bl	8018876 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016bee:	4b15      	ldr	r3, [pc, #84]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016bf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016bf4:	2b01      	cmp	r3, #1
 8016bf6:	d10d      	bne.n	8016c14 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016bf8:	f240 7036 	movw	r0, #1846	; 0x736
 8016bfc:	f002 fa82 	bl	8019104 <SUBGRF_ReadRegister>
 8016c00:	4603      	mov	r3, r0
 8016c02:	f023 0304 	bic.w	r3, r3, #4
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	4619      	mov	r1, r3
 8016c0a:	f240 7036 	movw	r0, #1846	; 0x736
 8016c0e:	f002 fa65 	bl	80190dc <SUBGRF_WriteRegister>
 8016c12:	e00c      	b.n	8016c2e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016c14:	f240 7036 	movw	r0, #1846	; 0x736
 8016c18:	f002 fa74 	bl	8019104 <SUBGRF_ReadRegister>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	f043 0304 	orr.w	r3, r3, #4
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	4619      	mov	r1, r3
 8016c26:	f240 7036 	movw	r0, #1846	; 0x736
 8016c2a:	f002 fa57 	bl	80190dc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016c2e:	4b05      	ldr	r3, [pc, #20]	; (8016c44 <RadioSetRxConfig+0x410>)
 8016c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c34:	609a      	str	r2, [r3, #8]
            break;
 8016c36:	e000      	b.n	8016c3a <RadioSetRxConfig+0x406>
            break;
 8016c38:	bf00      	nop
    }
}
 8016c3a:	bf00      	nop
 8016c3c:	3728      	adds	r7, #40	; 0x28
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}
 8016c42:	bf00      	nop
 8016c44:	200017b8 	.word	0x200017b8
 8016c48:	20000120 	.word	0x20000120
 8016c4c:	200017f0 	.word	0x200017f0
 8016c50:	200017c6 	.word	0x200017c6

08016c54 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	60ba      	str	r2, [r7, #8]
 8016c5c:	607b      	str	r3, [r7, #4]
 8016c5e:	4603      	mov	r3, r0
 8016c60:	73fb      	strb	r3, [r7, #15]
 8016c62:	460b      	mov	r3, r1
 8016c64:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016c66:	f002 fd12 	bl	801968e <RFW_DeInit>
    switch( modem )
 8016c6a:	7bfb      	ldrb	r3, [r7, #15]
 8016c6c:	2b03      	cmp	r3, #3
 8016c6e:	f000 80d7 	beq.w	8016e20 <RadioSetTxConfig+0x1cc>
 8016c72:	2b03      	cmp	r3, #3
 8016c74:	f300 80e6 	bgt.w	8016e44 <RadioSetTxConfig+0x1f0>
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d002      	beq.n	8016c82 <RadioSetTxConfig+0x2e>
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d061      	beq.n	8016d44 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016c80:	e0e0      	b.n	8016e44 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c82:	4b7c      	ldr	r3, [pc, #496]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016c84:	2200      	movs	r2, #0
 8016c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016c8a:	4a7a      	ldr	r2, [pc, #488]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016c8c:	6a3b      	ldr	r3, [r7, #32]
 8016c8e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016c90:	4b78      	ldr	r3, [pc, #480]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016c92:	220b      	movs	r2, #11
 8016c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f002 fc29 	bl	80194f0 <SUBGRF_GetFskBandwidthRegValue>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	461a      	mov	r2, r3
 8016ca2:	4b74      	ldr	r3, [pc, #464]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016ca8:	4a72      	ldr	r2, [pc, #456]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016cae:	4b71      	ldr	r3, [pc, #452]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016cb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cb6:	00db      	lsls	r3, r3, #3
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	4b6e      	ldr	r3, [pc, #440]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cbc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016cbe:	4b6d      	ldr	r3, [pc, #436]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cc0:	2204      	movs	r2, #4
 8016cc2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016cc4:	4b6b      	ldr	r3, [pc, #428]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cc6:	2218      	movs	r2, #24
 8016cc8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016cca:	4b6a      	ldr	r3, [pc, #424]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016ccc:	2200      	movs	r2, #0
 8016cce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016cd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016cd4:	f083 0301 	eor.w	r3, r3, #1
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	461a      	mov	r2, r3
 8016cdc:	4b65      	ldr	r3, [pc, #404]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cde:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016ce0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d003      	beq.n	8016cf0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016ce8:	4b62      	ldr	r3, [pc, #392]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cea:	22f2      	movs	r2, #242	; 0xf2
 8016cec:	75da      	strb	r2, [r3, #23]
 8016cee:	e002      	b.n	8016cf6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016cf0:	4b60      	ldr	r3, [pc, #384]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016cf6:	4b5f      	ldr	r3, [pc, #380]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016cfc:	f000 fb3d 	bl	801737a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d00:	4b5c      	ldr	r3, [pc, #368]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	bf14      	ite	ne
 8016d0a:	2301      	movne	r3, #1
 8016d0c:	2300      	moveq	r3, #0
 8016d0e:	b2db      	uxtb	r3, r3
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7ff fcc1 	bl	8016698 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d16:	4858      	ldr	r0, [pc, #352]	; (8016e78 <RadioSetTxConfig+0x224>)
 8016d18:	f001 ffcc 	bl	8018cb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d1c:	4857      	ldr	r0, [pc, #348]	; (8016e7c <RadioSetTxConfig+0x228>)
 8016d1e:	f002 f895 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016d22:	4a57      	ldr	r2, [pc, #348]	; (8016e80 <RadioSetTxConfig+0x22c>)
 8016d24:	f107 0310 	add.w	r3, r7, #16
 8016d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d30:	f107 0310 	add.w	r3, r7, #16
 8016d34:	4618      	mov	r0, r3
 8016d36:	f001 fbc8 	bl	80184ca <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d3e:	f001 fc13 	bl	8018568 <SUBGRF_SetWhiteningSeed>
            break;
 8016d42:	e080      	b.n	8016e46 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d44:	4b4b      	ldr	r3, [pc, #300]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d46:	2201      	movs	r2, #1
 8016d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016d4c:	6a3b      	ldr	r3, [r7, #32]
 8016d4e:	b2da      	uxtb	r2, r3
 8016d50:	4b48      	ldr	r3, [pc, #288]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016d56:	4a4b      	ldr	r2, [pc, #300]	; (8016e84 <RadioSetTxConfig+0x230>)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	781a      	ldrb	r2, [r3, #0]
 8016d5e:	4b45      	ldr	r3, [pc, #276]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016d64:	4a43      	ldr	r2, [pc, #268]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d6a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d105      	bne.n	8016d80 <RadioSetTxConfig+0x12c>
 8016d74:	6a3b      	ldr	r3, [r7, #32]
 8016d76:	2b0b      	cmp	r3, #11
 8016d78:	d008      	beq.n	8016d8c <RadioSetTxConfig+0x138>
 8016d7a:	6a3b      	ldr	r3, [r7, #32]
 8016d7c:	2b0c      	cmp	r3, #12
 8016d7e:	d005      	beq.n	8016d8c <RadioSetTxConfig+0x138>
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d107      	bne.n	8016d96 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016d86:	6a3b      	ldr	r3, [r7, #32]
 8016d88:	2b0c      	cmp	r3, #12
 8016d8a:	d104      	bne.n	8016d96 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016d8c:	4b39      	ldr	r3, [pc, #228]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d8e:	2201      	movs	r2, #1
 8016d90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016d94:	e003      	b.n	8016d9e <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016d96:	4b37      	ldr	r3, [pc, #220]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016d98:	2200      	movs	r2, #0
 8016d9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016d9e:	4b35      	ldr	r3, [pc, #212]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016da0:	2201      	movs	r2, #1
 8016da2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016da4:	4b33      	ldr	r3, [pc, #204]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016daa:	2b05      	cmp	r3, #5
 8016dac:	d004      	beq.n	8016db8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016dae:	4b31      	ldr	r3, [pc, #196]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016db0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016db4:	2b06      	cmp	r3, #6
 8016db6:	d10a      	bne.n	8016dce <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016db8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dba:	2b0b      	cmp	r3, #11
 8016dbc:	d803      	bhi.n	8016dc6 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016dbe:	4b2d      	ldr	r3, [pc, #180]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dc0:	220c      	movs	r2, #12
 8016dc2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016dc4:	e006      	b.n	8016dd4 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dc6:	4a2b      	ldr	r2, [pc, #172]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dca:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016dcc:	e002      	b.n	8016dd4 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dce:	4a29      	ldr	r2, [pc, #164]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dd2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016dd4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016dd8:	4b26      	ldr	r3, [pc, #152]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dda:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016ddc:	4b2a      	ldr	r3, [pc, #168]	; (8016e88 <RadioSetTxConfig+0x234>)
 8016dde:	781a      	ldrb	r2, [r3, #0]
 8016de0:	4b24      	ldr	r3, [pc, #144]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016de2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016de4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016de8:	4b22      	ldr	r3, [pc, #136]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dea:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016dee:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016df2:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016df8:	f000 fabf 	bl	801737a <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016dfc:	4b1d      	ldr	r3, [pc, #116]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	bf14      	ite	ne
 8016e06:	2301      	movne	r3, #1
 8016e08:	2300      	moveq	r3, #0
 8016e0a:	b2db      	uxtb	r3, r3
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff fc43 	bl	8016698 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e12:	4819      	ldr	r0, [pc, #100]	; (8016e78 <RadioSetTxConfig+0x224>)
 8016e14:	f001 ff4e 	bl	8018cb4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e18:	4818      	ldr	r0, [pc, #96]	; (8016e7c <RadioSetTxConfig+0x228>)
 8016e1a:	f002 f817 	bl	8018e4c <SUBGRF_SetPacketParams>
            break;
 8016e1e:	e012      	b.n	8016e46 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016e20:	2003      	movs	r0, #3
 8016e22:	f7ff fc39 	bl	8016698 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016e26:	4b13      	ldr	r3, [pc, #76]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e28:	2202      	movs	r2, #2
 8016e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016e2e:	4a11      	ldr	r2, [pc, #68]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e30:	6a3b      	ldr	r3, [r7, #32]
 8016e32:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016e34:	4b0f      	ldr	r3, [pc, #60]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e36:	2216      	movs	r2, #22
 8016e38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e3c:	480e      	ldr	r0, [pc, #56]	; (8016e78 <RadioSetTxConfig+0x224>)
 8016e3e:	f001 ff39 	bl	8018cb4 <SUBGRF_SetModulationParams>
            break;
 8016e42:	e000      	b.n	8016e46 <RadioSetTxConfig+0x1f2>
            break;
 8016e44:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f002 fa62 	bl	8019314 <SUBGRF_SetRfTxPower>
 8016e50:	4603      	mov	r3, r0
 8016e52:	461a      	mov	r2, r3
 8016e54:	4b07      	ldr	r3, [pc, #28]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e56:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016e5a:	4b06      	ldr	r3, [pc, #24]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016e60:	4618      	mov	r0, r3
 8016e62:	f002 fc28 	bl	80196b6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016e66:	4a03      	ldr	r2, [pc, #12]	; (8016e74 <RadioSetTxConfig+0x220>)
 8016e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e6a:	6053      	str	r3, [r2, #4]
}
 8016e6c:	bf00      	nop
 8016e6e:	3718      	adds	r7, #24
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	200017b8 	.word	0x200017b8
 8016e78:	200017f0 	.word	0x200017f0
 8016e7c:	200017c6 	.word	0x200017c6
 8016e80:	0801b4f0 	.word	0x0801b4f0
 8016e84:	0801bad8 	.word	0x0801bad8
 8016e88:	20000120 	.word	0x20000120

08016e8c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016e8c:	b480      	push	{r7}
 8016e8e:	b083      	sub	sp, #12
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
    return true;
 8016e94:	2301      	movs	r3, #1
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	370c      	adds	r7, #12
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bc80      	pop	{r7}
 8016e9e:	4770      	bx	lr

08016ea0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b085      	sub	sp, #20
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016eae:	79fb      	ldrb	r3, [r7, #7]
 8016eb0:	2b0a      	cmp	r3, #10
 8016eb2:	d83e      	bhi.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
 8016eb4:	a201      	add	r2, pc, #4	; (adr r2, 8016ebc <RadioGetLoRaBandwidthInHz+0x1c>)
 8016eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eba:	bf00      	nop
 8016ebc:	08016ee9 	.word	0x08016ee9
 8016ec0:	08016ef9 	.word	0x08016ef9
 8016ec4:	08016f09 	.word	0x08016f09
 8016ec8:	08016f19 	.word	0x08016f19
 8016ecc:	08016f21 	.word	0x08016f21
 8016ed0:	08016f27 	.word	0x08016f27
 8016ed4:	08016f2d 	.word	0x08016f2d
 8016ed8:	08016f33 	.word	0x08016f33
 8016edc:	08016ef1 	.word	0x08016ef1
 8016ee0:	08016f01 	.word	0x08016f01
 8016ee4:	08016f11 	.word	0x08016f11
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016ee8:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016eec:	60fb      	str	r3, [r7, #12]
        break;
 8016eee:	e020      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016ef0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016ef4:	60fb      	str	r3, [r7, #12]
        break;
 8016ef6:	e01c      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016ef8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016efc:	60fb      	str	r3, [r7, #12]
        break;
 8016efe:	e018      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016f00:	f245 1361 	movw	r3, #20833	; 0x5161
 8016f04:	60fb      	str	r3, [r7, #12]
        break;
 8016f06:	e014      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016f08:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016f0c:	60fb      	str	r3, [r7, #12]
        break;
 8016f0e:	e010      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016f10:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016f14:	60fb      	str	r3, [r7, #12]
        break;
 8016f16:	e00c      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016f18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016f1c:	60fb      	str	r3, [r7, #12]
        break;
 8016f1e:	e008      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016f20:	4b07      	ldr	r3, [pc, #28]	; (8016f40 <RadioGetLoRaBandwidthInHz+0xa0>)
 8016f22:	60fb      	str	r3, [r7, #12]
        break;
 8016f24:	e005      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016f26:	4b07      	ldr	r3, [pc, #28]	; (8016f44 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016f28:	60fb      	str	r3, [r7, #12]
        break;
 8016f2a:	e002      	b.n	8016f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016f2c:	4b06      	ldr	r3, [pc, #24]	; (8016f48 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016f2e:	60fb      	str	r3, [r7, #12]
        break;
 8016f30:	bf00      	nop
    }

    return bandwidthInHz;
 8016f32:	68fb      	ldr	r3, [r7, #12]
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3714      	adds	r7, #20
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	bc80      	pop	{r7}
 8016f3c:	4770      	bx	lr
 8016f3e:	bf00      	nop
 8016f40:	0001e848 	.word	0x0001e848
 8016f44:	0003d090 	.word	0x0003d090
 8016f48:	0007a120 	.word	0x0007a120

08016f4c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	4608      	mov	r0, r1
 8016f56:	4611      	mov	r1, r2
 8016f58:	461a      	mov	r2, r3
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	70fb      	strb	r3, [r7, #3]
 8016f5e:	460b      	mov	r3, r1
 8016f60:	803b      	strh	r3, [r7, #0]
 8016f62:	4613      	mov	r3, r2
 8016f64:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016f66:	883b      	ldrh	r3, [r7, #0]
 8016f68:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f6a:	78ba      	ldrb	r2, [r7, #2]
 8016f6c:	f082 0201 	eor.w	r2, r2, #1
 8016f70:	b2d2      	uxtb	r2, r2
 8016f72:	2a00      	cmp	r2, #0
 8016f74:	d001      	beq.n	8016f7a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016f76:	2208      	movs	r2, #8
 8016f78:	e000      	b.n	8016f7c <RadioGetGfskTimeOnAirNumerator+0x30>
 8016f7a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016f7c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f7e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016f82:	7c3b      	ldrb	r3, [r7, #16]
 8016f84:	7d39      	ldrb	r1, [r7, #20]
 8016f86:	2900      	cmp	r1, #0
 8016f88:	d001      	beq.n	8016f8e <RadioGetGfskTimeOnAirNumerator+0x42>
 8016f8a:	2102      	movs	r1, #2
 8016f8c:	e000      	b.n	8016f90 <RadioGetGfskTimeOnAirNumerator+0x44>
 8016f8e:	2100      	movs	r1, #0
 8016f90:	440b      	add	r3, r1
 8016f92:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f94:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	370c      	adds	r7, #12
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bc80      	pop	{r7}
 8016f9e:	4770      	bx	lr

08016fa0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016fa0:	b480      	push	{r7}
 8016fa2:	b08b      	sub	sp, #44	; 0x2c
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	4611      	mov	r1, r2
 8016fac:	461a      	mov	r2, r3
 8016fae:	460b      	mov	r3, r1
 8016fb0:	71fb      	strb	r3, [r7, #7]
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016fb6:	79fb      	ldrb	r3, [r7, #7]
 8016fb8:	3304      	adds	r3, #4
 8016fba:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	2b05      	cmp	r3, #5
 8016fc6:	d002      	beq.n	8016fce <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	2b06      	cmp	r3, #6
 8016fcc:	d104      	bne.n	8016fd8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016fce:	88bb      	ldrh	r3, [r7, #4]
 8016fd0:	2b0b      	cmp	r3, #11
 8016fd2:	d801      	bhi.n	8016fd8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016fd4:	230c      	movs	r3, #12
 8016fd6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d105      	bne.n	8016fea <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	2b0b      	cmp	r3, #11
 8016fe2:	d008      	beq.n	8016ff6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	2b0c      	cmp	r3, #12
 8016fe8:	d005      	beq.n	8016ff6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d105      	bne.n	8016ffc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	2b0c      	cmp	r3, #12
 8016ff4:	d102      	bne.n	8016ffc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8016ffc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8017000:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017006:	2a00      	cmp	r2, #0
 8017008:	d001      	beq.n	801700e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801700a:	2210      	movs	r2, #16
 801700c:	e000      	b.n	8017010 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801700e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017010:	4413      	add	r3, r2
 8017012:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017018:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801701a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801701e:	2a00      	cmp	r2, #0
 8017020:	d001      	beq.n	8017026 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017022:	2200      	movs	r2, #0
 8017024:	e000      	b.n	8017028 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017026:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017028:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801702a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	2b06      	cmp	r3, #6
 8017030:	d803      	bhi.n	801703a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	009b      	lsls	r3, r3, #2
 8017036:	623b      	str	r3, [r7, #32]
 8017038:	e00e      	b.n	8017058 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	3308      	adds	r3, #8
 801703e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017044:	2b00      	cmp	r3, #0
 8017046:	d004      	beq.n	8017052 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	3b02      	subs	r3, #2
 801704c:	009b      	lsls	r3, r3, #2
 801704e:	623b      	str	r3, [r7, #32]
 8017050:	e002      	b.n	8017058 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	009b      	lsls	r3, r3, #2
 8017056:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	2b00      	cmp	r3, #0
 801705c:	da01      	bge.n	8017062 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801705e:	2300      	movs	r3, #0
 8017060:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017062:	69fa      	ldr	r2, [r7, #28]
 8017064:	6a3b      	ldr	r3, [r7, #32]
 8017066:	4413      	add	r3, r2
 8017068:	1e5a      	subs	r2, r3, #1
 801706a:	6a3b      	ldr	r3, [r7, #32]
 801706c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017070:	697a      	ldr	r2, [r7, #20]
 8017072:	fb02 f203 	mul.w	r2, r2, r3
 8017076:	88bb      	ldrh	r3, [r7, #4]
 8017078:	4413      	add	r3, r2
    int32_t intermediate =
 801707a:	330c      	adds	r3, #12
 801707c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	2b06      	cmp	r3, #6
 8017082:	d802      	bhi.n	801708a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	3302      	adds	r3, #2
 8017088:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801708a:	69bb      	ldr	r3, [r7, #24]
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	1c5a      	adds	r2, r3, #1
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	3b02      	subs	r3, #2
 8017094:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017098:	4618      	mov	r0, r3
 801709a:	372c      	adds	r7, #44	; 0x2c
 801709c:	46bd      	mov	sp, r7
 801709e:	bc80      	pop	{r7}
 80170a0:	4770      	bx	lr
	...

080170a4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b08a      	sub	sp, #40	; 0x28
 80170a8:	af04      	add	r7, sp, #16
 80170aa:	60b9      	str	r1, [r7, #8]
 80170ac:	607a      	str	r2, [r7, #4]
 80170ae:	461a      	mov	r2, r3
 80170b0:	4603      	mov	r3, r0
 80170b2:	73fb      	strb	r3, [r7, #15]
 80170b4:	4613      	mov	r3, r2
 80170b6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80170b8:	2300      	movs	r3, #0
 80170ba:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80170bc:	2301      	movs	r3, #1
 80170be:	613b      	str	r3, [r7, #16]

    switch( modem )
 80170c0:	7bfb      	ldrb	r3, [r7, #15]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d002      	beq.n	80170cc <RadioTimeOnAir+0x28>
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d017      	beq.n	80170fa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80170ca:	e035      	b.n	8017138 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80170cc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80170d0:	8c3a      	ldrh	r2, [r7, #32]
 80170d2:	7bb9      	ldrb	r1, [r7, #14]
 80170d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80170de:	9300      	str	r3, [sp, #0]
 80170e0:	4603      	mov	r3, r0
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	f7ff ff32 	bl	8016f4c <RadioGetGfskTimeOnAirNumerator>
 80170e8:	4603      	mov	r3, r0
 80170ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170ee:	fb02 f303 	mul.w	r3, r2, r3
 80170f2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	613b      	str	r3, [r7, #16]
        break;
 80170f8:	e01e      	b.n	8017138 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80170fa:	8c39      	ldrh	r1, [r7, #32]
 80170fc:	7bba      	ldrb	r2, [r7, #14]
 80170fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8017102:	9302      	str	r3, [sp, #8]
 8017104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017108:	9301      	str	r3, [sp, #4]
 801710a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801710e:	9300      	str	r3, [sp, #0]
 8017110:	460b      	mov	r3, r1
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	68b8      	ldr	r0, [r7, #8]
 8017116:	f7ff ff43 	bl	8016fa0 <RadioGetLoRaTimeOnAirNumerator>
 801711a:	4603      	mov	r3, r0
 801711c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017120:	fb02 f303 	mul.w	r3, r2, r3
 8017124:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017126:	4a0a      	ldr	r2, [pc, #40]	; (8017150 <RadioTimeOnAir+0xac>)
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	4413      	add	r3, r2
 801712c:	781b      	ldrb	r3, [r3, #0]
 801712e:	4618      	mov	r0, r3
 8017130:	f7ff feb6 	bl	8016ea0 <RadioGetLoRaBandwidthInHz>
 8017134:	6138      	str	r0, [r7, #16]
        break;
 8017136:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017138:	697a      	ldr	r2, [r7, #20]
 801713a:	693b      	ldr	r3, [r7, #16]
 801713c:	4413      	add	r3, r2
 801713e:	1e5a      	subs	r2, r3, #1
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017146:	4618      	mov	r0, r3
 8017148:	3718      	adds	r7, #24
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}
 801714e:	bf00      	nop
 8017150:	0801bad8 	.word	0x0801bad8

08017154 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b084      	sub	sp, #16
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	460b      	mov	r3, r1
 801715e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017160:	2300      	movs	r3, #0
 8017162:	2200      	movs	r2, #0
 8017164:	f240 2101 	movw	r1, #513	; 0x201
 8017168:	f240 2001 	movw	r0, #513	; 0x201
 801716c:	f001 fc78 	bl	8018a60 <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 8017170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017174:	4871      	ldr	r0, [pc, #452]	; (801733c <RadioSend+0x1e8>)
 8017176:	f7ff fa07 	bl	8016588 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 801717a:	4b71      	ldr	r3, [pc, #452]	; (8017340 <RadioSend+0x1ec>)
 801717c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017180:	2101      	movs	r1, #1
 8017182:	4618      	mov	r0, r3
 8017184:	f002 f89e 	bl	80192c4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8017188:	4b6d      	ldr	r3, [pc, #436]	; (8017340 <RadioSend+0x1ec>)
 801718a:	781b      	ldrb	r3, [r3, #0]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d112      	bne.n	80171b6 <RadioSend+0x62>
 8017190:	4b6b      	ldr	r3, [pc, #428]	; (8017340 <RadioSend+0x1ec>)
 8017192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017196:	2b06      	cmp	r3, #6
 8017198:	d10d      	bne.n	80171b6 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801719a:	f640 0089 	movw	r0, #2185	; 0x889
 801719e:	f001 ffb1 	bl	8019104 <SUBGRF_ReadRegister>
 80171a2:	4603      	mov	r3, r0
 80171a4:	f023 0304 	bic.w	r3, r3, #4
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	4619      	mov	r1, r3
 80171ac:	f640 0089 	movw	r0, #2185	; 0x889
 80171b0:	f001 ff94 	bl	80190dc <SUBGRF_WriteRegister>
 80171b4:	e00c      	b.n	80171d0 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80171b6:	f640 0089 	movw	r0, #2185	; 0x889
 80171ba:	f001 ffa3 	bl	8019104 <SUBGRF_ReadRegister>
 80171be:	4603      	mov	r3, r0
 80171c0:	f043 0304 	orr.w	r3, r3, #4
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	4619      	mov	r1, r3
 80171c8:	f640 0089 	movw	r0, #2185	; 0x889
 80171cc:	f001 ff86 	bl	80190dc <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80171d0:	4b5b      	ldr	r3, [pc, #364]	; (8017340 <RadioSend+0x1ec>)
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	2b03      	cmp	r3, #3
 80171d6:	f200 80a4 	bhi.w	8017322 <RadioSend+0x1ce>
 80171da:	a201      	add	r2, pc, #4	; (adr r2, 80171e0 <RadioSend+0x8c>)
 80171dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171e0:	0801720b 	.word	0x0801720b
 80171e4:	080171f1 	.word	0x080171f1
 80171e8:	0801726b 	.word	0x0801726b
 80171ec:	0801728b 	.word	0x0801728b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80171f0:	4a53      	ldr	r2, [pc, #332]	; (8017340 <RadioSend+0x1ec>)
 80171f2:	78fb      	ldrb	r3, [r7, #3]
 80171f4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80171f6:	4853      	ldr	r0, [pc, #332]	; (8017344 <RadioSend+0x1f0>)
 80171f8:	f001 fe28 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80171fc:	78fb      	ldrb	r3, [r7, #3]
 80171fe:	2200      	movs	r2, #0
 8017200:	4619      	mov	r1, r3
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f001 f94e 	bl	80184a4 <SUBGRF_SendPayload>
            break;
 8017208:	e08c      	b.n	8017324 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801720a:	f002 fa46 	bl	801969a <RFW_Is_Init>
 801720e:	4603      	mov	r3, r0
 8017210:	2b01      	cmp	r3, #1
 8017212:	d11d      	bne.n	8017250 <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017214:	f107 020d 	add.w	r2, r7, #13
 8017218:	78fb      	ldrb	r3, [r7, #3]
 801721a:	4619      	mov	r1, r3
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f002 fa54 	bl	80196ca <RFW_TransmitInit>
 8017222:	4603      	mov	r3, r0
 8017224:	2b00      	cmp	r3, #0
 8017226:	d10c      	bne.n	8017242 <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017228:	7b7a      	ldrb	r2, [r7, #13]
 801722a:	4b45      	ldr	r3, [pc, #276]	; (8017340 <RadioSend+0x1ec>)
 801722c:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801722e:	4845      	ldr	r0, [pc, #276]	; (8017344 <RadioSend+0x1f0>)
 8017230:	f001 fe0c 	bl	8018e4c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017234:	7b7b      	ldrb	r3, [r7, #13]
 8017236:	2200      	movs	r2, #0
 8017238:	4619      	mov	r1, r3
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f001 f932 	bl	80184a4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017240:	e070      	b.n	8017324 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8017242:	4b41      	ldr	r3, [pc, #260]	; (8017348 <RadioSend+0x1f4>)
 8017244:	2201      	movs	r2, #1
 8017246:	2100      	movs	r1, #0
 8017248:	2002      	movs	r0, #2
 801724a:	f003 fa25 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
 801724e:	e072      	b.n	8017336 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8017250:	4a3b      	ldr	r2, [pc, #236]	; (8017340 <RadioSend+0x1ec>)
 8017252:	78fb      	ldrb	r3, [r7, #3]
 8017254:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017256:	483b      	ldr	r0, [pc, #236]	; (8017344 <RadioSend+0x1f0>)
 8017258:	f001 fdf8 	bl	8018e4c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801725c:	78fb      	ldrb	r3, [r7, #3]
 801725e:	2200      	movs	r2, #0
 8017260:	4619      	mov	r1, r3
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f001 f91e 	bl	80184a4 <SUBGRF_SendPayload>
            break;
 8017268:	e05c      	b.n	8017324 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801726a:	4b35      	ldr	r3, [pc, #212]	; (8017340 <RadioSend+0x1ec>)
 801726c:	2202      	movs	r2, #2
 801726e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017270:	4a33      	ldr	r2, [pc, #204]	; (8017340 <RadioSend+0x1ec>)
 8017272:	78fb      	ldrb	r3, [r7, #3]
 8017274:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017276:	4833      	ldr	r0, [pc, #204]	; (8017344 <RadioSend+0x1f0>)
 8017278:	f001 fde8 	bl	8018e4c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801727c:	78fb      	ldrb	r3, [r7, #3]
 801727e:	2200      	movs	r2, #0
 8017280:	4619      	mov	r1, r3
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f001 f90e 	bl	80184a4 <SUBGRF_SendPayload>
            break;
 8017288:	e04c      	b.n	8017324 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801728a:	78fb      	ldrb	r3, [r7, #3]
 801728c:	461a      	mov	r2, r3
 801728e:	6879      	ldr	r1, [r7, #4]
 8017290:	482e      	ldr	r0, [pc, #184]	; (801734c <RadioSend+0x1f8>)
 8017292:	f000 fc8e 	bl	8017bb2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017296:	4b2a      	ldr	r3, [pc, #168]	; (8017340 <RadioSend+0x1ec>)
 8017298:	2202      	movs	r2, #2
 801729a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801729c:	78fb      	ldrb	r3, [r7, #3]
 801729e:	3301      	adds	r3, #1
 80172a0:	b2da      	uxtb	r2, r3
 80172a2:	4b27      	ldr	r3, [pc, #156]	; (8017340 <RadioSend+0x1ec>)
 80172a4:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80172a6:	4827      	ldr	r0, [pc, #156]	; (8017344 <RadioSend+0x1f0>)
 80172a8:	f001 fdd0 	bl	8018e4c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80172ac:	2100      	movs	r1, #0
 80172ae:	20f1      	movs	r0, #241	; 0xf1
 80172b0:	f000 f94f 	bl	8017552 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80172b4:	2100      	movs	r1, #0
 80172b6:	20f0      	movs	r0, #240	; 0xf0
 80172b8:	f000 f94b 	bl	8017552 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80172bc:	4b20      	ldr	r3, [pc, #128]	; (8017340 <RadioSend+0x1ec>)
 80172be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172c0:	2b64      	cmp	r3, #100	; 0x64
 80172c2:	d108      	bne.n	80172d6 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80172c4:	2170      	movs	r1, #112	; 0x70
 80172c6:	20f3      	movs	r0, #243	; 0xf3
 80172c8:	f000 f943 	bl	8017552 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80172cc:	211d      	movs	r1, #29
 80172ce:	20f2      	movs	r0, #242	; 0xf2
 80172d0:	f000 f93f 	bl	8017552 <RadioWrite>
 80172d4:	e007      	b.n	80172e6 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80172d6:	21e1      	movs	r1, #225	; 0xe1
 80172d8:	20f3      	movs	r0, #243	; 0xf3
 80172da:	f000 f93a 	bl	8017552 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80172de:	2104      	movs	r1, #4
 80172e0:	20f2      	movs	r0, #242	; 0xf2
 80172e2:	f000 f936 	bl	8017552 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80172e6:	78fb      	ldrb	r3, [r7, #3]
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	3302      	adds	r3, #2
 80172f0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80172f2:	89fb      	ldrh	r3, [r7, #14]
 80172f4:	0a1b      	lsrs	r3, r3, #8
 80172f6:	b29b      	uxth	r3, r3
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	4619      	mov	r1, r3
 80172fc:	20f4      	movs	r0, #244	; 0xf4
 80172fe:	f000 f928 	bl	8017552 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8017302:	89fb      	ldrh	r3, [r7, #14]
 8017304:	b2db      	uxtb	r3, r3
 8017306:	4619      	mov	r1, r3
 8017308:	20f5      	movs	r0, #245	; 0xf5
 801730a:	f000 f922 	bl	8017552 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801730e:	78fb      	ldrb	r3, [r7, #3]
 8017310:	3301      	adds	r3, #1
 8017312:	b2db      	uxtb	r3, r3
 8017314:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017318:	4619      	mov	r1, r3
 801731a:	480c      	ldr	r0, [pc, #48]	; (801734c <RadioSend+0x1f8>)
 801731c:	f001 f8c2 	bl	80184a4 <SUBGRF_SendPayload>
            break;
 8017320:	e000      	b.n	8017324 <RadioSend+0x1d0>
        }
        default:
            break;
 8017322:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017324:	4b06      	ldr	r3, [pc, #24]	; (8017340 <RadioSend+0x1ec>)
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	4619      	mov	r1, r3
 801732a:	4809      	ldr	r0, [pc, #36]	; (8017350 <RadioSend+0x1fc>)
 801732c:	f003 f81a 	bl	801a364 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017330:	4807      	ldr	r0, [pc, #28]	; (8017350 <RadioSend+0x1fc>)
 8017332:	f002 ff39 	bl	801a1a8 <UTIL_TIMER_Start>
}
 8017336:	3710      	adds	r7, #16
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}
 801733c:	48000400 	.word	0x48000400
 8017340:	200017b8 	.word	0x200017b8
 8017344:	200017c6 	.word	0x200017c6
 8017348:	0801b4f8 	.word	0x0801b4f8
 801734c:	20000dd8 	.word	0x20000dd8
 8017350:	20001810 	.word	0x20001810

08017354 <RadioSleep>:

static void RadioSleep( void )
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801735a:	2300      	movs	r3, #0
 801735c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801735e:	793b      	ldrb	r3, [r7, #4]
 8017360:	f043 0304 	orr.w	r3, r3, #4
 8017364:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017366:	7938      	ldrb	r0, [r7, #4]
 8017368:	f001 f978 	bl	801865c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801736c:	2002      	movs	r0, #2
 801736e:	f7ea fe32 	bl	8001fd6 <HAL_Delay>
}
 8017372:	bf00      	nop
 8017374:	3708      	adds	r7, #8
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}

0801737a <RadioStandby>:

static void RadioStandby( void )
{
 801737a:	b580      	push	{r7, lr}
 801737c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801737e:	2000      	movs	r0, #0
 8017380:	f001 f99e 	bl	80186c0 <SUBGRF_SetStandby>
}
 8017384:	bf00      	nop
 8017386:	bd80      	pop	{r7, pc}

08017388 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b082      	sub	sp, #8
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8017390:	f002 f983 	bl	801969a <RFW_Is_Init>
 8017394:	4603      	mov	r3, r0
 8017396:	2b01      	cmp	r3, #1
 8017398:	d102      	bne.n	80173a0 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801739a:	f002 f9a6 	bl	80196ea <RFW_ReceiveInit>
 801739e:	e007      	b.n	80173b0 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80173a0:	2300      	movs	r3, #0
 80173a2:	2200      	movs	r2, #0
 80173a4:	f240 2162 	movw	r1, #610	; 0x262
 80173a8:	f240 2062 	movw	r0, #610	; 0x262
 80173ac:	f001 fb58 	bl	8018a60 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d006      	beq.n	80173c4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80173b6:	6879      	ldr	r1, [r7, #4]
 80173b8:	4812      	ldr	r0, [pc, #72]	; (8017404 <RadioRx+0x7c>)
 80173ba:	f002 ffd3 	bl	801a364 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80173be:	4811      	ldr	r0, [pc, #68]	; (8017404 <RadioRx+0x7c>)
 80173c0:	f002 fef2 	bl	801a1a8 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 80173c4:	2101      	movs	r1, #1
 80173c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80173ca:	f7ff f8dd 	bl	8016588 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173ce:	4b0e      	ldr	r3, [pc, #56]	; (8017408 <RadioRx+0x80>)
 80173d0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173d4:	2100      	movs	r1, #0
 80173d6:	4618      	mov	r0, r3
 80173d8:	f001 ff74 	bl	80192c4 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80173dc:	4b0a      	ldr	r3, [pc, #40]	; (8017408 <RadioRx+0x80>)
 80173de:	785b      	ldrb	r3, [r3, #1]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d004      	beq.n	80173ee <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80173e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80173e8:	f001 f9a6 	bl	8018738 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80173ec:	e005      	b.n	80173fa <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80173ee:	4b06      	ldr	r3, [pc, #24]	; (8017408 <RadioRx+0x80>)
 80173f0:	689b      	ldr	r3, [r3, #8]
 80173f2:	019b      	lsls	r3, r3, #6
 80173f4:	4618      	mov	r0, r3
 80173f6:	f001 f99f 	bl	8018738 <SUBGRF_SetRx>
}
 80173fa:	bf00      	nop
 80173fc:	3708      	adds	r7, #8
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	20001828 	.word	0x20001828
 8017408:	200017b8 	.word	0x200017b8

0801740c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b082      	sub	sp, #8
 8017410:	af00      	add	r7, sp, #0
 8017412:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8017414:	f002 f941 	bl	801969a <RFW_Is_Init>
 8017418:	4603      	mov	r3, r0
 801741a:	2b01      	cmp	r3, #1
 801741c:	d102      	bne.n	8017424 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801741e:	f002 f964 	bl	80196ea <RFW_ReceiveInit>
 8017422:	e007      	b.n	8017434 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017424:	2300      	movs	r3, #0
 8017426:	2200      	movs	r2, #0
 8017428:	f240 2162 	movw	r1, #610	; 0x262
 801742c:	f240 2062 	movw	r0, #610	; 0x262
 8017430:	f001 fb16 	bl	8018a60 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d006      	beq.n	8017448 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801743a:	6879      	ldr	r1, [r7, #4]
 801743c:	480f      	ldr	r0, [pc, #60]	; (801747c <RadioRxBoosted+0x70>)
 801743e:	f002 ff91 	bl	801a364 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017442:	480e      	ldr	r0, [pc, #56]	; (801747c <RadioRxBoosted+0x70>)
 8017444:	f002 feb0 	bl	801a1a8 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017448:	4b0d      	ldr	r3, [pc, #52]	; (8017480 <RadioRxBoosted+0x74>)
 801744a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801744e:	2100      	movs	r1, #0
 8017450:	4618      	mov	r0, r3
 8017452:	f001 ff37 	bl	80192c4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017456:	4b0a      	ldr	r3, [pc, #40]	; (8017480 <RadioRxBoosted+0x74>)
 8017458:	785b      	ldrb	r3, [r3, #1]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d004      	beq.n	8017468 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801745e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017462:	f001 f989 	bl	8018778 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017466:	e005      	b.n	8017474 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017468:	4b05      	ldr	r3, [pc, #20]	; (8017480 <RadioRxBoosted+0x74>)
 801746a:	689b      	ldr	r3, [r3, #8]
 801746c:	019b      	lsls	r3, r3, #6
 801746e:	4618      	mov	r0, r3
 8017470:	f001 f982 	bl	8018778 <SUBGRF_SetRxBoosted>
}
 8017474:	bf00      	nop
 8017476:	3708      	adds	r7, #8
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}
 801747c:	20001828 	.word	0x20001828
 8017480:	200017b8 	.word	0x200017b8

08017484 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801748e:	4b07      	ldr	r3, [pc, #28]	; (80174ac <RadioSetRxDutyCycle+0x28>)
 8017490:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017494:	2100      	movs	r1, #0
 8017496:	4618      	mov	r0, r3
 8017498:	f001 ff14 	bl	80192c4 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801749c:	6839      	ldr	r1, [r7, #0]
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f001 f98e 	bl	80187c0 <SUBGRF_SetRxDutyCycle>
}
 80174a4:	bf00      	nop
 80174a6:	3708      	adds	r7, #8
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}
 80174ac:	200017b8 	.word	0x200017b8

080174b0 <RadioStartCad>:

static void RadioStartCad( void )
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80174b4:	4b09      	ldr	r3, [pc, #36]	; (80174dc <RadioStartCad+0x2c>)
 80174b6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80174ba:	2100      	movs	r1, #0
 80174bc:	4618      	mov	r0, r3
 80174be:	f001 ff01 	bl	80192c4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80174c2:	2300      	movs	r3, #0
 80174c4:	2200      	movs	r2, #0
 80174c6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80174ca:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80174ce:	f001 fac7 	bl	8018a60 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80174d2:	f001 f9a1 	bl	8018818 <SUBGRF_SetCad>
}
 80174d6:	bf00      	nop
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	200017b8 	.word	0x200017b8

080174e0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
 80174e8:	460b      	mov	r3, r1
 80174ea:	70fb      	strb	r3, [r7, #3]
 80174ec:	4613      	mov	r3, r2
 80174ee:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80174f0:	883b      	ldrh	r3, [r7, #0]
 80174f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80174f6:	fb02 f303 	mul.w	r3, r2, r3
 80174fa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f001 fb0b 	bl	8018b18 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017506:	4618      	mov	r0, r3
 8017508:	f001 ff04 	bl	8019314 <SUBGRF_SetRfTxPower>
 801750c:	4603      	mov	r3, r0
 801750e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8017510:	7afb      	ldrb	r3, [r7, #11]
 8017512:	2101      	movs	r1, #1
 8017514:	4618      	mov	r0, r3
 8017516:	f001 fed5 	bl	80192c4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801751a:	f001 f98b 	bl	8018834 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801751e:	68f9      	ldr	r1, [r7, #12]
 8017520:	4804      	ldr	r0, [pc, #16]	; (8017534 <RadioSetTxContinuousWave+0x54>)
 8017522:	f002 ff1f 	bl	801a364 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017526:	4803      	ldr	r0, [pc, #12]	; (8017534 <RadioSetTxContinuousWave+0x54>)
 8017528:	f002 fe3e 	bl	801a1a8 <UTIL_TIMER_Start>
}
 801752c:	bf00      	nop
 801752e:	3710      	adds	r7, #16
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	20001810 	.word	0x20001810

08017538 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	4603      	mov	r3, r0
 8017540:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017542:	f001 fd38 	bl	8018fb6 <SUBGRF_GetRssiInst>
 8017546:	4603      	mov	r3, r0
 8017548:	b21b      	sxth	r3, r3
}
 801754a:	4618      	mov	r0, r3
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}

08017552 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017552:	b580      	push	{r7, lr}
 8017554:	b082      	sub	sp, #8
 8017556:	af00      	add	r7, sp, #0
 8017558:	4603      	mov	r3, r0
 801755a:	460a      	mov	r2, r1
 801755c:	80fb      	strh	r3, [r7, #6]
 801755e:	4613      	mov	r3, r2
 8017560:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8017562:	797a      	ldrb	r2, [r7, #5]
 8017564:	88fb      	ldrh	r3, [r7, #6]
 8017566:	4611      	mov	r1, r2
 8017568:	4618      	mov	r0, r3
 801756a:	f001 fdb7 	bl	80190dc <SUBGRF_WriteRegister>
}
 801756e:	bf00      	nop
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017576:	b580      	push	{r7, lr}
 8017578:	b082      	sub	sp, #8
 801757a:	af00      	add	r7, sp, #0
 801757c:	4603      	mov	r3, r0
 801757e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8017580:	88fb      	ldrh	r3, [r7, #6]
 8017582:	4618      	mov	r0, r3
 8017584:	f001 fdbe 	bl	8019104 <SUBGRF_ReadRegister>
 8017588:	4603      	mov	r3, r0
}
 801758a:	4618      	mov	r0, r3
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b082      	sub	sp, #8
 8017596:	af00      	add	r7, sp, #0
 8017598:	4603      	mov	r3, r0
 801759a:	6039      	str	r1, [r7, #0]
 801759c:	80fb      	strh	r3, [r7, #6]
 801759e:	4613      	mov	r3, r2
 80175a0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80175a2:	797b      	ldrb	r3, [r7, #5]
 80175a4:	b29a      	uxth	r2, r3
 80175a6:	88fb      	ldrh	r3, [r7, #6]
 80175a8:	6839      	ldr	r1, [r7, #0]
 80175aa:	4618      	mov	r0, r3
 80175ac:	f001 fdbe 	bl	801912c <SUBGRF_WriteRegisters>
}
 80175b0:	bf00      	nop
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}

080175b8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	4603      	mov	r3, r0
 80175c0:	6039      	str	r1, [r7, #0]
 80175c2:	80fb      	strh	r3, [r7, #6]
 80175c4:	4613      	mov	r3, r2
 80175c6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80175c8:	797b      	ldrb	r3, [r7, #5]
 80175ca:	b29a      	uxth	r2, r3
 80175cc:	88fb      	ldrh	r3, [r7, #6]
 80175ce:	6839      	ldr	r1, [r7, #0]
 80175d0:	4618      	mov	r0, r3
 80175d2:	f001 fdcd 	bl	8019170 <SUBGRF_ReadRegisters>
}
 80175d6:	bf00      	nop
 80175d8:	3708      	adds	r7, #8
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}
	...

080175e0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	4603      	mov	r3, r0
 80175e8:	460a      	mov	r2, r1
 80175ea:	71fb      	strb	r3, [r7, #7]
 80175ec:	4613      	mov	r3, r2
 80175ee:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80175f0:	79fb      	ldrb	r3, [r7, #7]
 80175f2:	2b01      	cmp	r3, #1
 80175f4:	d10a      	bne.n	801760c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80175f6:	4a0e      	ldr	r2, [pc, #56]	; (8017630 <RadioSetMaxPayloadLength+0x50>)
 80175f8:	79bb      	ldrb	r3, [r7, #6]
 80175fa:	7013      	strb	r3, [r2, #0]
 80175fc:	4b0c      	ldr	r3, [pc, #48]	; (8017630 <RadioSetMaxPayloadLength+0x50>)
 80175fe:	781a      	ldrb	r2, [r3, #0]
 8017600:	4b0c      	ldr	r3, [pc, #48]	; (8017634 <RadioSetMaxPayloadLength+0x54>)
 8017602:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017604:	480c      	ldr	r0, [pc, #48]	; (8017638 <RadioSetMaxPayloadLength+0x58>)
 8017606:	f001 fc21 	bl	8018e4c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801760a:	e00d      	b.n	8017628 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801760c:	4b09      	ldr	r3, [pc, #36]	; (8017634 <RadioSetMaxPayloadLength+0x54>)
 801760e:	7d5b      	ldrb	r3, [r3, #21]
 8017610:	2b01      	cmp	r3, #1
 8017612:	d109      	bne.n	8017628 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017614:	4a06      	ldr	r2, [pc, #24]	; (8017630 <RadioSetMaxPayloadLength+0x50>)
 8017616:	79bb      	ldrb	r3, [r7, #6]
 8017618:	7013      	strb	r3, [r2, #0]
 801761a:	4b05      	ldr	r3, [pc, #20]	; (8017630 <RadioSetMaxPayloadLength+0x50>)
 801761c:	781a      	ldrb	r2, [r3, #0]
 801761e:	4b05      	ldr	r3, [pc, #20]	; (8017634 <RadioSetMaxPayloadLength+0x54>)
 8017620:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017622:	4805      	ldr	r0, [pc, #20]	; (8017638 <RadioSetMaxPayloadLength+0x58>)
 8017624:	f001 fc12 	bl	8018e4c <SUBGRF_SetPacketParams>
}
 8017628:	bf00      	nop
 801762a:	3708      	adds	r7, #8
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}
 8017630:	20000120 	.word	0x20000120
 8017634:	200017b8 	.word	0x200017b8
 8017638:	200017c6 	.word	0x200017c6

0801763c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	4603      	mov	r3, r0
 8017644:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017646:	4a13      	ldr	r2, [pc, #76]	; (8017694 <RadioSetPublicNetwork+0x58>)
 8017648:	79fb      	ldrb	r3, [r7, #7]
 801764a:	7313      	strb	r3, [r2, #12]
 801764c:	4b11      	ldr	r3, [pc, #68]	; (8017694 <RadioSetPublicNetwork+0x58>)
 801764e:	7b1a      	ldrb	r2, [r3, #12]
 8017650:	4b10      	ldr	r3, [pc, #64]	; (8017694 <RadioSetPublicNetwork+0x58>)
 8017652:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017654:	2001      	movs	r0, #1
 8017656:	f7ff f81f 	bl	8016698 <RadioSetModem>
    if( enable == true )
 801765a:	79fb      	ldrb	r3, [r7, #7]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d00a      	beq.n	8017676 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017660:	2134      	movs	r1, #52	; 0x34
 8017662:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017666:	f001 fd39 	bl	80190dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801766a:	2144      	movs	r1, #68	; 0x44
 801766c:	f240 7041 	movw	r0, #1857	; 0x741
 8017670:	f001 fd34 	bl	80190dc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017674:	e009      	b.n	801768a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017676:	2114      	movs	r1, #20
 8017678:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801767c:	f001 fd2e 	bl	80190dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017680:	2124      	movs	r1, #36	; 0x24
 8017682:	f240 7041 	movw	r0, #1857	; 0x741
 8017686:	f001 fd29 	bl	80190dc <SUBGRF_WriteRegister>
}
 801768a:	bf00      	nop
 801768c:	3708      	adds	r7, #8
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	200017b8 	.word	0x200017b8

08017698 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801769c:	f001 fe6e 	bl	801937c <SUBGRF_GetRadioWakeUpTime>
 80176a0:	4603      	mov	r3, r0
 80176a2:	3303      	adds	r3, #3
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	bd80      	pop	{r7, pc}

080176a8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80176b0:	f000 f80e 	bl	80176d0 <RadioOnTxTimeoutProcess>
}
 80176b4:	bf00      	nop
 80176b6:	3708      	adds	r7, #8
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}

080176bc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80176c4:	f000 f81e 	bl	8017704 <RadioOnRxTimeoutProcess>
}
 80176c8:	bf00      	nop
 80176ca:	3708      	adds	r7, #8
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 80176d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80176d8:	4808      	ldr	r0, [pc, #32]	; (80176fc <RadioOnTxTimeoutProcess+0x2c>)
 80176da:	f7fe ff62 	bl	80165a2 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80176de:	4b08      	ldr	r3, [pc, #32]	; (8017700 <RadioOnTxTimeoutProcess+0x30>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d008      	beq.n	80176f8 <RadioOnTxTimeoutProcess+0x28>
 80176e6:	4b06      	ldr	r3, [pc, #24]	; (8017700 <RadioOnTxTimeoutProcess+0x30>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	685b      	ldr	r3, [r3, #4]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d003      	beq.n	80176f8 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 80176f0:	4b03      	ldr	r3, [pc, #12]	; (8017700 <RadioOnTxTimeoutProcess+0x30>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	4798      	blx	r3
    }
}
 80176f8:	bf00      	nop
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	48000400 	.word	0x48000400
 8017700:	20000ed8 	.word	0x20000ed8

08017704 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017704:	b580      	push	{r7, lr}
 8017706:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017708:	2101      	movs	r1, #1
 801770a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801770e:	f7fe ff48 	bl	80165a2 <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017712:	4b07      	ldr	r3, [pc, #28]	; (8017730 <RadioOnRxTimeoutProcess+0x2c>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d008      	beq.n	801772c <RadioOnRxTimeoutProcess+0x28>
 801771a:	4b05      	ldr	r3, [pc, #20]	; (8017730 <RadioOnRxTimeoutProcess+0x2c>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	68db      	ldr	r3, [r3, #12]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d003      	beq.n	801772c <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017724:	4b02      	ldr	r3, [pc, #8]	; (8017730 <RadioOnRxTimeoutProcess+0x2c>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	68db      	ldr	r3, [r3, #12]
 801772a:	4798      	blx	r3
    }
}
 801772c:	bf00      	nop
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20000ed8 	.word	0x20000ed8

08017734 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	af00      	add	r7, sp, #0
 801773a:	4603      	mov	r3, r0
 801773c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801773e:	4a05      	ldr	r2, [pc, #20]	; (8017754 <RadioOnDioIrq+0x20>)
 8017740:	88fb      	ldrh	r3, [r7, #6]
 8017742:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017746:	f000 f807 	bl	8017758 <RadioIrqProcess>
}
 801774a:	bf00      	nop
 801774c:	3708      	adds	r7, #8
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
 8017752:	bf00      	nop
 8017754:	200017b8 	.word	0x200017b8

08017758 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017758:	b590      	push	{r4, r7, lr}
 801775a:	b083      	sub	sp, #12
 801775c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801775e:	2300      	movs	r3, #0
 8017760:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017762:	2300      	movs	r3, #0
 8017764:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8017766:	4bbf      	ldr	r3, [pc, #764]	; (8017a64 <RadioIrqProcess+0x30c>)
 8017768:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801776c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017770:	f000 8116 	beq.w	80179a0 <RadioIrqProcess+0x248>
 8017774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017778:	f300 81cb 	bgt.w	8017b12 <RadioIrqProcess+0x3ba>
 801777c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017780:	f000 80fa 	beq.w	8017978 <RadioIrqProcess+0x220>
 8017784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017788:	f300 81c3 	bgt.w	8017b12 <RadioIrqProcess+0x3ba>
 801778c:	2b80      	cmp	r3, #128	; 0x80
 801778e:	f000 80df 	beq.w	8017950 <RadioIrqProcess+0x1f8>
 8017792:	2b80      	cmp	r3, #128	; 0x80
 8017794:	f300 81bd 	bgt.w	8017b12 <RadioIrqProcess+0x3ba>
 8017798:	2b20      	cmp	r3, #32
 801779a:	dc49      	bgt.n	8017830 <RadioIrqProcess+0xd8>
 801779c:	2b00      	cmp	r3, #0
 801779e:	f340 81b8 	ble.w	8017b12 <RadioIrqProcess+0x3ba>
 80177a2:	3b01      	subs	r3, #1
 80177a4:	2b1f      	cmp	r3, #31
 80177a6:	f200 81b4 	bhi.w	8017b12 <RadioIrqProcess+0x3ba>
 80177aa:	a201      	add	r2, pc, #4	; (adr r2, 80177b0 <RadioIrqProcess+0x58>)
 80177ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177b0:	08017839 	.word	0x08017839
 80177b4:	0801787d 	.word	0x0801787d
 80177b8:	08017b13 	.word	0x08017b13
 80177bc:	08017a2d 	.word	0x08017a2d
 80177c0:	08017b13 	.word	0x08017b13
 80177c4:	08017b13 	.word	0x08017b13
 80177c8:	08017b13 	.word	0x08017b13
 80177cc:	08017a3b 	.word	0x08017a3b
 80177d0:	08017b13 	.word	0x08017b13
 80177d4:	08017b13 	.word	0x08017b13
 80177d8:	08017b13 	.word	0x08017b13
 80177dc:	08017b13 	.word	0x08017b13
 80177e0:	08017b13 	.word	0x08017b13
 80177e4:	08017b13 	.word	0x08017b13
 80177e8:	08017b13 	.word	0x08017b13
 80177ec:	08017a57 	.word	0x08017a57
 80177f0:	08017b13 	.word	0x08017b13
 80177f4:	08017b13 	.word	0x08017b13
 80177f8:	08017b13 	.word	0x08017b13
 80177fc:	08017b13 	.word	0x08017b13
 8017800:	08017b13 	.word	0x08017b13
 8017804:	08017b13 	.word	0x08017b13
 8017808:	08017b13 	.word	0x08017b13
 801780c:	08017b13 	.word	0x08017b13
 8017810:	08017b13 	.word	0x08017b13
 8017814:	08017b13 	.word	0x08017b13
 8017818:	08017b13 	.word	0x08017b13
 801781c:	08017b13 	.word	0x08017b13
 8017820:	08017b13 	.word	0x08017b13
 8017824:	08017b13 	.word	0x08017b13
 8017828:	08017b13 	.word	0x08017b13
 801782c:	08017a95 	.word	0x08017a95
 8017830:	2b40      	cmp	r3, #64	; 0x40
 8017832:	f000 8150 	beq.w	8017ad6 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017836:	e16c      	b.n	8017b12 <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801783c:	488a      	ldr	r0, [pc, #552]	; (8017a68 <RadioIrqProcess+0x310>)
 801783e:	f7fe feb0 	bl	80165a2 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017842:	488a      	ldr	r0, [pc, #552]	; (8017a6c <RadioIrqProcess+0x314>)
 8017844:	f002 fd1e 	bl	801a284 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017848:	2000      	movs	r0, #0
 801784a:	f000 ff39 	bl	80186c0 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801784e:	f001 ff2b 	bl	80196a8 <RFW_Is_LongPacketModeEnabled>
 8017852:	4603      	mov	r3, r0
 8017854:	2b01      	cmp	r3, #1
 8017856:	d101      	bne.n	801785c <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017858:	f001 ff4f 	bl	80196fa <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801785c:	4b84      	ldr	r3, [pc, #528]	; (8017a70 <RadioIrqProcess+0x318>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	f000 8158 	beq.w	8017b16 <RadioIrqProcess+0x3be>
 8017866:	4b82      	ldr	r3, [pc, #520]	; (8017a70 <RadioIrqProcess+0x318>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	f000 8152 	beq.w	8017b16 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 8017872:	4b7f      	ldr	r3, [pc, #508]	; (8017a70 <RadioIrqProcess+0x318>)
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4798      	blx	r3
        break;
 801787a:	e14c      	b.n	8017b16 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 801787c:	2101      	movs	r1, #1
 801787e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017882:	f7fe fe8e 	bl	80165a2 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017886:	487b      	ldr	r0, [pc, #492]	; (8017a74 <RadioIrqProcess+0x31c>)
 8017888:	f002 fcfc 	bl	801a284 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801788c:	4b75      	ldr	r3, [pc, #468]	; (8017a64 <RadioIrqProcess+0x30c>)
 801788e:	785b      	ldrb	r3, [r3, #1]
 8017890:	f083 0301 	eor.w	r3, r3, #1
 8017894:	b2db      	uxtb	r3, r3
 8017896:	2b00      	cmp	r3, #0
 8017898:	d014      	beq.n	80178c4 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 801789a:	2000      	movs	r0, #0
 801789c:	f000 ff10 	bl	80186c0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80178a0:	2100      	movs	r1, #0
 80178a2:	f640 1002 	movw	r0, #2306	; 0x902
 80178a6:	f001 fc19 	bl	80190dc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80178aa:	f640 1044 	movw	r0, #2372	; 0x944
 80178ae:	f001 fc29 	bl	8019104 <SUBGRF_ReadRegister>
 80178b2:	4603      	mov	r3, r0
 80178b4:	f043 0302 	orr.w	r3, r3, #2
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	4619      	mov	r1, r3
 80178bc:	f640 1044 	movw	r0, #2372	; 0x944
 80178c0:	f001 fc0c 	bl	80190dc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80178c4:	1dfb      	adds	r3, r7, #7
 80178c6:	22ff      	movs	r2, #255	; 0xff
 80178c8:	4619      	mov	r1, r3
 80178ca:	486b      	ldr	r0, [pc, #428]	; (8017a78 <RadioIrqProcess+0x320>)
 80178cc:	f000 fdc8 	bl	8018460 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80178d0:	486a      	ldr	r0, [pc, #424]	; (8017a7c <RadioIrqProcess+0x324>)
 80178d2:	f001 fbb1 	bl	8019038 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80178d6:	4b66      	ldr	r3, [pc, #408]	; (8017a70 <RadioIrqProcess+0x318>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d036      	beq.n	801794c <RadioIrqProcess+0x1f4>
 80178de:	4b64      	ldr	r3, [pc, #400]	; (8017a70 <RadioIrqProcess+0x318>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	689b      	ldr	r3, [r3, #8]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d031      	beq.n	801794c <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 80178e8:	4b5e      	ldr	r3, [pc, #376]	; (8017a64 <RadioIrqProcess+0x30c>)
 80178ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d10e      	bne.n	8017910 <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 80178f2:	4b5f      	ldr	r3, [pc, #380]	; (8017a70 <RadioIrqProcess+0x318>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	689c      	ldr	r4, [r3, #8]
 80178f8:	79fb      	ldrb	r3, [r7, #7]
 80178fa:	b299      	uxth	r1, r3
 80178fc:	4b59      	ldr	r3, [pc, #356]	; (8017a64 <RadioIrqProcess+0x30c>)
 80178fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8017902:	b21a      	sxth	r2, r3
 8017904:	4b57      	ldr	r3, [pc, #348]	; (8017a64 <RadioIrqProcess+0x30c>)
 8017906:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801790a:	485b      	ldr	r0, [pc, #364]	; (8017a78 <RadioIrqProcess+0x320>)
 801790c:	47a0      	blx	r4
                break;
 801790e:	e01e      	b.n	801794e <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017910:	4b54      	ldr	r3, [pc, #336]	; (8017a64 <RadioIrqProcess+0x30c>)
 8017912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017914:	463a      	mov	r2, r7
 8017916:	4611      	mov	r1, r2
 8017918:	4618      	mov	r0, r3
 801791a:	f001 fe11 	bl	8019540 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801791e:	4b54      	ldr	r3, [pc, #336]	; (8017a70 <RadioIrqProcess+0x318>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	689c      	ldr	r4, [r3, #8]
 8017924:	79fb      	ldrb	r3, [r7, #7]
 8017926:	b299      	uxth	r1, r3
 8017928:	4b4e      	ldr	r3, [pc, #312]	; (8017a64 <RadioIrqProcess+0x30c>)
 801792a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801792e:	b218      	sxth	r0, r3
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017936:	4a52      	ldr	r2, [pc, #328]	; (8017a80 <RadioIrqProcess+0x328>)
 8017938:	fb82 c203 	smull	ip, r2, r2, r3
 801793c:	1192      	asrs	r2, r2, #6
 801793e:	17db      	asrs	r3, r3, #31
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	b25b      	sxtb	r3, r3
 8017944:	4602      	mov	r2, r0
 8017946:	484c      	ldr	r0, [pc, #304]	; (8017a78 <RadioIrqProcess+0x320>)
 8017948:	47a0      	blx	r4
                break;
 801794a:	e000      	b.n	801794e <RadioIrqProcess+0x1f6>
        }
 801794c:	bf00      	nop
        break;
 801794e:	e0ef      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 8017950:	2000      	movs	r0, #0
 8017952:	f000 feb5 	bl	80186c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017956:	4b46      	ldr	r3, [pc, #280]	; (8017a70 <RadioIrqProcess+0x318>)
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	f000 80dd 	beq.w	8017b1a <RadioIrqProcess+0x3c2>
 8017960:	4b43      	ldr	r3, [pc, #268]	; (8017a70 <RadioIrqProcess+0x318>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	699b      	ldr	r3, [r3, #24]
 8017966:	2b00      	cmp	r3, #0
 8017968:	f000 80d7 	beq.w	8017b1a <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 801796c:	4b40      	ldr	r3, [pc, #256]	; (8017a70 <RadioIrqProcess+0x318>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	699b      	ldr	r3, [r3, #24]
 8017972:	2000      	movs	r0, #0
 8017974:	4798      	blx	r3
        break;
 8017976:	e0d0      	b.n	8017b1a <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017978:	2000      	movs	r0, #0
 801797a:	f000 fea1 	bl	80186c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801797e:	4b3c      	ldr	r3, [pc, #240]	; (8017a70 <RadioIrqProcess+0x318>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	2b00      	cmp	r3, #0
 8017984:	f000 80cb 	beq.w	8017b1e <RadioIrqProcess+0x3c6>
 8017988:	4b39      	ldr	r3, [pc, #228]	; (8017a70 <RadioIrqProcess+0x318>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	699b      	ldr	r3, [r3, #24]
 801798e:	2b00      	cmp	r3, #0
 8017990:	f000 80c5 	beq.w	8017b1e <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 8017994:	4b36      	ldr	r3, [pc, #216]	; (8017a70 <RadioIrqProcess+0x318>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	699b      	ldr	r3, [r3, #24]
 801799a:	2001      	movs	r0, #1
 801799c:	4798      	blx	r3
        break;
 801799e:	e0be      	b.n	8017b1e <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80179a0:	4b38      	ldr	r3, [pc, #224]	; (8017a84 <RadioIrqProcess+0x32c>)
 80179a2:	2201      	movs	r2, #1
 80179a4:	2100      	movs	r1, #0
 80179a6:	2002      	movs	r0, #2
 80179a8:	f002 fe76 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80179ac:	f000 fd3e 	bl	801842c <SUBGRF_GetOperatingMode>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b04      	cmp	r3, #4
 80179b4:	d11a      	bne.n	80179ec <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 80179b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80179ba:	482b      	ldr	r0, [pc, #172]	; (8017a68 <RadioIrqProcess+0x310>)
 80179bc:	f7fe fdf1 	bl	80165a2 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 80179c0:	482a      	ldr	r0, [pc, #168]	; (8017a6c <RadioIrqProcess+0x314>)
 80179c2:	f002 fc5f 	bl	801a284 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80179c6:	2000      	movs	r0, #0
 80179c8:	f000 fe7a 	bl	80186c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80179cc:	4b28      	ldr	r3, [pc, #160]	; (8017a70 <RadioIrqProcess+0x318>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	f000 80a6 	beq.w	8017b22 <RadioIrqProcess+0x3ca>
 80179d6:	4b26      	ldr	r3, [pc, #152]	; (8017a70 <RadioIrqProcess+0x318>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	685b      	ldr	r3, [r3, #4]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	f000 80a0 	beq.w	8017b22 <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 80179e2:	4b23      	ldr	r3, [pc, #140]	; (8017a70 <RadioIrqProcess+0x318>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	685b      	ldr	r3, [r3, #4]
 80179e8:	4798      	blx	r3
        break;
 80179ea:	e09a      	b.n	8017b22 <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80179ec:	f000 fd1e 	bl	801842c <SUBGRF_GetOperatingMode>
 80179f0:	4603      	mov	r3, r0
 80179f2:	2b05      	cmp	r3, #5
 80179f4:	f040 8095 	bne.w	8017b22 <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 80179f8:	2101      	movs	r1, #1
 80179fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80179fe:	f7fe fdd0 	bl	80165a2 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017a02:	481c      	ldr	r0, [pc, #112]	; (8017a74 <RadioIrqProcess+0x31c>)
 8017a04:	f002 fc3e 	bl	801a284 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017a08:	2000      	movs	r0, #0
 8017a0a:	f000 fe59 	bl	80186c0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017a0e:	4b18      	ldr	r3, [pc, #96]	; (8017a70 <RadioIrqProcess+0x318>)
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	f000 8085 	beq.w	8017b22 <RadioIrqProcess+0x3ca>
 8017a18:	4b15      	ldr	r3, [pc, #84]	; (8017a70 <RadioIrqProcess+0x318>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	68db      	ldr	r3, [r3, #12]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d07f      	beq.n	8017b22 <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8017a22:	4b13      	ldr	r3, [pc, #76]	; (8017a70 <RadioIrqProcess+0x318>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	4798      	blx	r3
        break;
 8017a2a:	e07a      	b.n	8017b22 <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017a2c:	4b16      	ldr	r3, [pc, #88]	; (8017a88 <RadioIrqProcess+0x330>)
 8017a2e:	2201      	movs	r2, #1
 8017a30:	2100      	movs	r1, #0
 8017a32:	2002      	movs	r0, #2
 8017a34:	f002 fe30 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a38:	e07a      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017a3a:	4b14      	ldr	r3, [pc, #80]	; (8017a8c <RadioIrqProcess+0x334>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	2100      	movs	r1, #0
 8017a40:	2002      	movs	r0, #2
 8017a42:	f002 fe29 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017a46:	f001 fe28 	bl	801969a <RFW_Is_Init>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	d16a      	bne.n	8017b26 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017a50:	f001 fe59 	bl	8019706 <RFW_ReceivePayload>
        break;
 8017a54:	e067      	b.n	8017b26 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017a56:	4b0e      	ldr	r3, [pc, #56]	; (8017a90 <RadioIrqProcess+0x338>)
 8017a58:	2201      	movs	r2, #1
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	2002      	movs	r0, #2
 8017a5e:	f002 fe1b 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a62:	e065      	b.n	8017b30 <RadioIrqProcess+0x3d8>
 8017a64:	200017b8 	.word	0x200017b8
 8017a68:	48000400 	.word	0x48000400
 8017a6c:	20001810 	.word	0x20001810
 8017a70:	20000ed8 	.word	0x20000ed8
 8017a74:	20001828 	.word	0x20001828
 8017a78:	20000dd8 	.word	0x20000dd8
 8017a7c:	200017dc 	.word	0x200017dc
 8017a80:	10624dd3 	.word	0x10624dd3
 8017a84:	0801b510 	.word	0x0801b510
 8017a88:	0801b524 	.word	0x0801b524
 8017a8c:	0801b530 	.word	0x0801b530
 8017a90:	0801b53c 	.word	0x0801b53c
        TimerStop( &RxTimeoutTimer );
 8017a94:	4828      	ldr	r0, [pc, #160]	; (8017b38 <RadioIrqProcess+0x3e0>)
 8017a96:	f002 fbf5 	bl	801a284 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017a9a:	4b28      	ldr	r3, [pc, #160]	; (8017b3c <RadioIrqProcess+0x3e4>)
 8017a9c:	785b      	ldrb	r3, [r3, #1]
 8017a9e:	f083 0301 	eor.w	r3, r3, #1
 8017aa2:	b2db      	uxtb	r3, r3
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d002      	beq.n	8017aae <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017aa8:	2000      	movs	r0, #0
 8017aaa:	f000 fe09 	bl	80186c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017aae:	4b24      	ldr	r3, [pc, #144]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d039      	beq.n	8017b2a <RadioIrqProcess+0x3d2>
 8017ab6:	4b22      	ldr	r3, [pc, #136]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d034      	beq.n	8017b2a <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017ac0:	4b1f      	ldr	r3, [pc, #124]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017ac8:	4b1e      	ldr	r3, [pc, #120]	; (8017b44 <RadioIrqProcess+0x3ec>)
 8017aca:	2201      	movs	r2, #1
 8017acc:	2100      	movs	r1, #0
 8017ace:	2002      	movs	r0, #2
 8017ad0:	f002 fde2 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017ad4:	e029      	b.n	8017b2a <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017ad6:	4b1c      	ldr	r3, [pc, #112]	; (8017b48 <RadioIrqProcess+0x3f0>)
 8017ad8:	2201      	movs	r2, #1
 8017ada:	2100      	movs	r1, #0
 8017adc:	2002      	movs	r0, #2
 8017ade:	f002 fddb 	bl	801a698 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017ae2:	4b16      	ldr	r3, [pc, #88]	; (8017b3c <RadioIrqProcess+0x3e4>)
 8017ae4:	785b      	ldrb	r3, [r3, #1]
 8017ae6:	f083 0301 	eor.w	r3, r3, #1
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d002      	beq.n	8017af6 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017af0:	2000      	movs	r0, #0
 8017af2:	f000 fde5 	bl	80186c0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017af6:	4b12      	ldr	r3, [pc, #72]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d017      	beq.n	8017b2e <RadioIrqProcess+0x3d6>
 8017afe:	4b10      	ldr	r3, [pc, #64]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	691b      	ldr	r3, [r3, #16]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d012      	beq.n	8017b2e <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017b08:	4b0d      	ldr	r3, [pc, #52]	; (8017b40 <RadioIrqProcess+0x3e8>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	691b      	ldr	r3, [r3, #16]
 8017b0e:	4798      	blx	r3
        break;
 8017b10:	e00d      	b.n	8017b2e <RadioIrqProcess+0x3d6>
        break;
 8017b12:	bf00      	nop
 8017b14:	e00c      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b16:	bf00      	nop
 8017b18:	e00a      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b1a:	bf00      	nop
 8017b1c:	e008      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b1e:	bf00      	nop
 8017b20:	e006      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b22:	bf00      	nop
 8017b24:	e004      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b26:	bf00      	nop
 8017b28:	e002      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b2a:	bf00      	nop
 8017b2c:	e000      	b.n	8017b30 <RadioIrqProcess+0x3d8>
        break;
 8017b2e:	bf00      	nop
  }
}
 8017b30:	bf00      	nop
 8017b32:	370c      	adds	r7, #12
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd90      	pop	{r4, r7, pc}
 8017b38:	20001828 	.word	0x20001828
 8017b3c:	200017b8 	.word	0x200017b8
 8017b40:	20000ed8 	.word	0x20000ed8
 8017b44:	0801b548 	.word	0x0801b548
 8017b48:	0801b554 	.word	0x0801b554

08017b4c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017b50:	4b09      	ldr	r3, [pc, #36]	; (8017b78 <RadioTxPrbs+0x2c>)
 8017b52:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017b56:	2101      	movs	r1, #1
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f001 fbb3 	bl	80192c4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017b5e:	4b07      	ldr	r3, [pc, #28]	; (8017b7c <RadioTxPrbs+0x30>)
 8017b60:	212d      	movs	r1, #45	; 0x2d
 8017b62:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017b66:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017b68:	f000 fe6d 	bl	8018846 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017b6c:	4804      	ldr	r0, [pc, #16]	; (8017b80 <RadioTxPrbs+0x34>)
 8017b6e:	f000 fdc3 	bl	80186f8 <SUBGRF_SetTx>
}
 8017b72:	bf00      	nop
 8017b74:	bd80      	pop	{r7, pc}
 8017b76:	bf00      	nop
 8017b78:	200017b8 	.word	0x200017b8
 8017b7c:	08017553 	.word	0x08017553
 8017b80:	000fffff 	.word	0x000fffff

08017b84 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f001 fbbe 	bl	8019314 <SUBGRF_SetRfTxPower>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017b9c:	7bfb      	ldrb	r3, [r7, #15]
 8017b9e:	2101      	movs	r1, #1
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f001 fb8f 	bl	80192c4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017ba6:	f000 fe45 	bl	8018834 <SUBGRF_SetTxContinuousWave>
}
 8017baa:	bf00      	nop
 8017bac:	3710      	adds	r7, #16
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017bb2:	b480      	push	{r7}
 8017bb4:	b089      	sub	sp, #36	; 0x24
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	60f8      	str	r0, [r7, #12]
 8017bba:	60b9      	str	r1, [r7, #8]
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017bc8:	2300      	movs	r3, #0
 8017bca:	61bb      	str	r3, [r7, #24]
 8017bcc:	e011      	b.n	8017bf2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017bce:	69bb      	ldr	r3, [r7, #24]
 8017bd0:	68ba      	ldr	r2, [r7, #8]
 8017bd2:	4413      	add	r3, r2
 8017bd4:	781a      	ldrb	r2, [r3, #0]
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	68b9      	ldr	r1, [r7, #8]
 8017bda:	440b      	add	r3, r1
 8017bdc:	43d2      	mvns	r2, r2
 8017bde:	b2d2      	uxtb	r2, r2
 8017be0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017be2:	69bb      	ldr	r3, [r7, #24]
 8017be4:	68fa      	ldr	r2, [r7, #12]
 8017be6:	4413      	add	r3, r2
 8017be8:	2200      	movs	r2, #0
 8017bea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	61bb      	str	r3, [r7, #24]
 8017bf2:	79fb      	ldrb	r3, [r7, #7]
 8017bf4:	69ba      	ldr	r2, [r7, #24]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	dbe9      	blt.n	8017bce <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	61bb      	str	r3, [r7, #24]
 8017bfe:	e049      	b.n	8017c94 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017c00:	69bb      	ldr	r3, [r7, #24]
 8017c02:	425a      	negs	r2, r3
 8017c04:	f003 0307 	and.w	r3, r3, #7
 8017c08:	f002 0207 	and.w	r2, r2, #7
 8017c0c:	bf58      	it	pl
 8017c0e:	4253      	negpl	r3, r2
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	f1c3 0307 	rsb	r3, r3, #7
 8017c16:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017c18:	69bb      	ldr	r3, [r7, #24]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	da00      	bge.n	8017c20 <payload_integration+0x6e>
 8017c1e:	3307      	adds	r3, #7
 8017c20:	10db      	asrs	r3, r3, #3
 8017c22:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017c24:	69bb      	ldr	r3, [r7, #24]
 8017c26:	3301      	adds	r3, #1
 8017c28:	425a      	negs	r2, r3
 8017c2a:	f003 0307 	and.w	r3, r3, #7
 8017c2e:	f002 0207 	and.w	r2, r2, #7
 8017c32:	bf58      	it	pl
 8017c34:	4253      	negpl	r3, r2
 8017c36:	b2db      	uxtb	r3, r3
 8017c38:	f1c3 0307 	rsb	r3, r3, #7
 8017c3c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	3301      	adds	r3, #1
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	da00      	bge.n	8017c48 <payload_integration+0x96>
 8017c46:	3307      	adds	r3, #7
 8017c48:	10db      	asrs	r3, r3, #3
 8017c4a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017c4c:	7dbb      	ldrb	r3, [r7, #22]
 8017c4e:	68ba      	ldr	r2, [r7, #8]
 8017c50:	4413      	add	r3, r2
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	461a      	mov	r2, r3
 8017c56:	7dfb      	ldrb	r3, [r7, #23]
 8017c58:	fa42 f303 	asr.w	r3, r2, r3
 8017c5c:	b2db      	uxtb	r3, r3
 8017c5e:	f003 0301 	and.w	r3, r3, #1
 8017c62:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017c64:	7ffa      	ldrb	r2, [r7, #31]
 8017c66:	7cfb      	ldrb	r3, [r7, #19]
 8017c68:	4053      	eors	r3, r2
 8017c6a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017c6c:	7d3b      	ldrb	r3, [r7, #20]
 8017c6e:	68fa      	ldr	r2, [r7, #12]
 8017c70:	4413      	add	r3, r2
 8017c72:	781b      	ldrb	r3, [r3, #0]
 8017c74:	b25a      	sxtb	r2, r3
 8017c76:	7ff9      	ldrb	r1, [r7, #31]
 8017c78:	7d7b      	ldrb	r3, [r7, #21]
 8017c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8017c7e:	b25b      	sxtb	r3, r3
 8017c80:	4313      	orrs	r3, r2
 8017c82:	b259      	sxtb	r1, r3
 8017c84:	7d3b      	ldrb	r3, [r7, #20]
 8017c86:	68fa      	ldr	r2, [r7, #12]
 8017c88:	4413      	add	r3, r2
 8017c8a:	b2ca      	uxtb	r2, r1
 8017c8c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017c8e:	69bb      	ldr	r3, [r7, #24]
 8017c90:	3301      	adds	r3, #1
 8017c92:	61bb      	str	r3, [r7, #24]
 8017c94:	79fb      	ldrb	r3, [r7, #7]
 8017c96:	00db      	lsls	r3, r3, #3
 8017c98:	69ba      	ldr	r2, [r7, #24]
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	dbb0      	blt.n	8017c00 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017c9e:	7ffb      	ldrb	r3, [r7, #31]
 8017ca0:	01db      	lsls	r3, r3, #7
 8017ca2:	b25a      	sxtb	r2, r3
 8017ca4:	7ffb      	ldrb	r3, [r7, #31]
 8017ca6:	019b      	lsls	r3, r3, #6
 8017ca8:	b25b      	sxtb	r3, r3
 8017caa:	4313      	orrs	r3, r2
 8017cac:	b25b      	sxtb	r3, r3
 8017cae:	7ffa      	ldrb	r2, [r7, #31]
 8017cb0:	2a00      	cmp	r2, #0
 8017cb2:	d101      	bne.n	8017cb8 <payload_integration+0x106>
 8017cb4:	2220      	movs	r2, #32
 8017cb6:	e000      	b.n	8017cba <payload_integration+0x108>
 8017cb8:	2200      	movs	r2, #0
 8017cba:	4313      	orrs	r3, r2
 8017cbc:	b259      	sxtb	r1, r3
 8017cbe:	79fb      	ldrb	r3, [r7, #7]
 8017cc0:	68fa      	ldr	r2, [r7, #12]
 8017cc2:	4413      	add	r3, r2
 8017cc4:	b2ca      	uxtb	r2, r1
 8017cc6:	701a      	strb	r2, [r3, #0]
}
 8017cc8:	bf00      	nop
 8017cca:	3724      	adds	r7, #36	; 0x24
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bc80      	pop	{r7}
 8017cd0:	4770      	bx	lr
	...

08017cd4 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b08c      	sub	sp, #48	; 0x30
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	60b9      	str	r1, [r7, #8]
 8017cdc:	607a      	str	r2, [r7, #4]
 8017cde:	603b      	str	r3, [r7, #0]
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017ce8:	2300      	movs	r3, #0
 8017cea:	61fb      	str	r3, [r7, #28]
 8017cec:	2300      	movs	r3, #0
 8017cee:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017cf0:	f001 fccd 	bl	801968e <RFW_DeInit>

    if( rxContinuous != 0 )
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d001      	beq.n	8017cfe <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	bf14      	ite	ne
 8017d04:	2301      	movne	r3, #1
 8017d06:	2300      	moveq	r3, #0
 8017d08:	b2da      	uxtb	r2, r3
 8017d0a:	4ba9      	ldr	r3, [pc, #676]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017d0c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017d0e:	7bfb      	ldrb	r3, [r7, #15]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d003      	beq.n	8017d1c <RadioSetRxGenericConfig+0x48>
 8017d14:	2b01      	cmp	r3, #1
 8017d16:	f000 80e8 	beq.w	8017eea <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017d1a:	e1a0      	b.n	801805e <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	68db      	ldr	r3, [r3, #12]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d003      	beq.n	8017d2c <RadioSetRxGenericConfig+0x58>
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	691b      	ldr	r3, [r3, #16]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d102      	bne.n	8017d32 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8017d30:	e196      	b.n	8018060 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	7d5b      	ldrb	r3, [r3, #21]
 8017d36:	2b08      	cmp	r3, #8
 8017d38:	d902      	bls.n	8017d40 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d3e:	e18f      	b.n	8018060 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d40:	2300      	movs	r3, #0
 8017d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d44:	e00d      	b.n	8017d62 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017d46:	68bb      	ldr	r3, [r7, #8]
 8017d48:	699a      	ldr	r2, [r3, #24]
 8017d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d4c:	4413      	add	r3, r2
 8017d4e:	7819      	ldrb	r1, [r3, #0]
 8017d50:	f107 021c 	add.w	r2, r7, #28
 8017d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d56:	4413      	add	r3, r2
 8017d58:	460a      	mov	r2, r1
 8017d5a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5e:	3301      	adds	r3, #1
 8017d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	7d5b      	ldrb	r3, [r3, #21]
 8017d66:	461a      	mov	r2, r3
 8017d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	dbeb      	blt.n	8017d46 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	bf14      	ite	ne
 8017d76:	2301      	movne	r3, #1
 8017d78:	2300      	moveq	r3, #0
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f000 fd6b 	bl	8018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d82:	4b8b      	ldr	r3, [pc, #556]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017d84:	2200      	movs	r2, #0
 8017d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	4a88      	ldr	r2, [pc, #544]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017d90:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	791a      	ldrb	r2, [r3, #4]
 8017d96:	4b86      	ldr	r3, [pc, #536]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	689b      	ldr	r3, [r3, #8]
 8017da0:	4618      	mov	r0, r3
 8017da2:	f001 fba5 	bl	80194f0 <SUBGRF_GetFskBandwidthRegValue>
 8017da6:	4603      	mov	r3, r0
 8017da8:	461a      	mov	r2, r3
 8017daa:	4b81      	ldr	r3, [pc, #516]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017db0:	4b7f      	ldr	r3, [pc, #508]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017db2:	2200      	movs	r2, #0
 8017db4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	691b      	ldr	r3, [r3, #16]
 8017dba:	b29b      	uxth	r3, r3
 8017dbc:	00db      	lsls	r3, r3, #3
 8017dbe:	b29a      	uxth	r2, r3
 8017dc0:	4b7b      	ldr	r3, [pc, #492]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017dc2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	7d1a      	ldrb	r2, [r3, #20]
 8017dc8:	4b79      	ldr	r3, [pc, #484]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017dca:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	7d5b      	ldrb	r3, [r3, #21]
 8017dd0:	00db      	lsls	r3, r3, #3
 8017dd2:	b2da      	uxtb	r2, r3
 8017dd4:	4b76      	ldr	r3, [pc, #472]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017dd6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017dde:	4b74      	ldr	r3, [pc, #464]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017de0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d105      	bne.n	8017df8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	69db      	ldr	r3, [r3, #28]
 8017df0:	b2da      	uxtb	r2, r3
 8017df2:	4b6f      	ldr	r3, [pc, #444]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017df4:	759a      	strb	r2, [r3, #22]
 8017df6:	e00b      	b.n	8017e10 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017dfe:	2b02      	cmp	r3, #2
 8017e00:	d103      	bne.n	8017e0a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017e02:	4b6b      	ldr	r3, [pc, #428]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e04:	22ff      	movs	r2, #255	; 0xff
 8017e06:	759a      	strb	r2, [r3, #22]
 8017e08:	e002      	b.n	8017e10 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017e0a:	4b69      	ldr	r3, [pc, #420]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e0c:	22ff      	movs	r2, #255	; 0xff
 8017e0e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017e10:	68bb      	ldr	r3, [r7, #8]
 8017e12:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017e16:	2b02      	cmp	r3, #2
 8017e18:	d004      	beq.n	8017e24 <RadioSetRxGenericConfig+0x150>
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017e20:	2b02      	cmp	r3, #2
 8017e22:	d12d      	bne.n	8017e80 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e2a:	2bf1      	cmp	r3, #241	; 0xf1
 8017e2c:	d00c      	beq.n	8017e48 <RadioSetRxGenericConfig+0x174>
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e34:	2bf2      	cmp	r3, #242	; 0xf2
 8017e36:	d007      	beq.n	8017e48 <RadioSetRxGenericConfig+0x174>
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e3e:	2b01      	cmp	r3, #1
 8017e40:	d002      	beq.n	8017e48 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017e42:	f04f 33ff 	mov.w	r3, #4294967295
 8017e46:	e10b      	b.n	8018060 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017e50:	4b58      	ldr	r3, [pc, #352]	; (8017fb4 <RadioSetRxGenericConfig+0x2e0>)
 8017e52:	6819      	ldr	r1, [r3, #0]
 8017e54:	f107 0310 	add.w	r3, r7, #16
 8017e58:	4a57      	ldr	r2, [pc, #348]	; (8017fb8 <RadioSetRxGenericConfig+0x2e4>)
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f001 fc0a 	bl	8019674 <RFW_Init>
 8017e60:	4603      	mov	r3, r0
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d002      	beq.n	8017e6c <RadioSetRxGenericConfig+0x198>
            return -1;
 8017e66:	f04f 33ff 	mov.w	r3, #4294967295
 8017e6a:	e0f9      	b.n	8018060 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017e6c:	4b50      	ldr	r3, [pc, #320]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e6e:	2200      	movs	r2, #0
 8017e70:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017e72:	4b4f      	ldr	r3, [pc, #316]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e74:	2201      	movs	r2, #1
 8017e76:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017e78:	4b4d      	ldr	r3, [pc, #308]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	755a      	strb	r2, [r3, #21]
        {
 8017e7e:	e00e      	b.n	8017e9e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017e86:	4b4a      	ldr	r3, [pc, #296]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e88:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017e90:	4b47      	ldr	r3, [pc, #284]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e92:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017e94:	68bb      	ldr	r3, [r7, #8]
 8017e96:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017e9a:	4b45      	ldr	r3, [pc, #276]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017e9c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017e9e:	f7ff fa6c 	bl	801737a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017ea2:	2000      	movs	r0, #0
 8017ea4:	f7fe fbf8 	bl	8016698 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ea8:	4844      	ldr	r0, [pc, #272]	; (8017fbc <RadioSetRxGenericConfig+0x2e8>)
 8017eaa:	f000 ff03 	bl	8018cb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017eae:	4844      	ldr	r0, [pc, #272]	; (8017fc0 <RadioSetRxGenericConfig+0x2ec>)
 8017eb0:	f000 ffcc 	bl	8018e4c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017eb4:	f107 031c 	add.w	r3, r7, #28
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f000 fb06 	bl	80184ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	8c1b      	ldrh	r3, [r3, #32]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f000 fb50 	bl	8018568 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f000 fb2b 	bl	8018528 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017ed8:	fb02 f203 	mul.w	r2, r2, r3
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	68db      	ldr	r3, [r3, #12]
 8017ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ee4:	4a32      	ldr	r2, [pc, #200]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017ee6:	6093      	str	r3, [r2, #8]
        break;
 8017ee8:	e0b9      	b.n	801805e <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d102      	bne.n	8017ef8 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ef6:	e0b3      	b.n	8018060 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017efe:	2b01      	cmp	r3, #1
 8017f00:	d104      	bne.n	8017f0c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	69db      	ldr	r3, [r3, #28]
 8017f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017f0a:	e002      	b.n	8017f12 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017f0c:	23ff      	movs	r3, #255	; 0xff
 8017f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	bf14      	ite	ne
 8017f1a:	2301      	movne	r3, #1
 8017f1c:	2300      	moveq	r3, #0
 8017f1e:	b2db      	uxtb	r3, r3
 8017f20:	4618      	mov	r0, r3
 8017f22:	f000 fc99 	bl	8018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f000 fca3 	bl	8018876 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f30:	4b1f      	ldr	r3, [pc, #124]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f32:	2201      	movs	r2, #1
 8017f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017f3e:	4b1c      	ldr	r3, [pc, #112]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017f44:	68bb      	ldr	r3, [r7, #8]
 8017f46:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017f4a:	4b19      	ldr	r3, [pc, #100]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017f56:	4b16      	ldr	r3, [pc, #88]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f58:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017f5c:	68bb      	ldr	r3, [r7, #8]
 8017f5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017f62:	2b02      	cmp	r3, #2
 8017f64:	d010      	beq.n	8017f88 <RadioSetRxGenericConfig+0x2b4>
 8017f66:	2b02      	cmp	r3, #2
 8017f68:	dc2c      	bgt.n	8017fc4 <RadioSetRxGenericConfig+0x2f0>
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d002      	beq.n	8017f74 <RadioSetRxGenericConfig+0x2a0>
 8017f6e:	2b01      	cmp	r3, #1
 8017f70:	d005      	beq.n	8017f7e <RadioSetRxGenericConfig+0x2aa>
            break;
 8017f72:	e027      	b.n	8017fc4 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f74:	4b0e      	ldr	r3, [pc, #56]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f76:	2200      	movs	r2, #0
 8017f78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f7c:	e023      	b.n	8017fc6 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f7e:	4b0c      	ldr	r3, [pc, #48]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f80:	2201      	movs	r2, #1
 8017f82:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f86:	e01e      	b.n	8017fc6 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f8e:	2b0b      	cmp	r3, #11
 8017f90:	d004      	beq.n	8017f9c <RadioSetRxGenericConfig+0x2c8>
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f98:	2b0c      	cmp	r3, #12
 8017f9a:	d104      	bne.n	8017fa6 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f9c:	4b04      	ldr	r3, [pc, #16]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017f9e:	2201      	movs	r2, #1
 8017fa0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017fa4:	e00f      	b.n	8017fc6 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017fa6:	4b02      	ldr	r3, [pc, #8]	; (8017fb0 <RadioSetRxGenericConfig+0x2dc>)
 8017fa8:	2200      	movs	r2, #0
 8017faa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017fae:	e00a      	b.n	8017fc6 <RadioSetRxGenericConfig+0x2f2>
 8017fb0:	200017b8 	.word	0x200017b8
 8017fb4:	20000ed8 	.word	0x20000ed8
 8017fb8:	20001828 	.word	0x20001828
 8017fbc:	200017f0 	.word	0x200017f0
 8017fc0:	200017c6 	.word	0x200017c6
            break;
 8017fc4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017fc6:	4b28      	ldr	r3, [pc, #160]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017fc8:	2201      	movs	r2, #1
 8017fca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017fd0:	4b25      	ldr	r3, [pc, #148]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017fd2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017fda:	4b23      	ldr	r3, [pc, #140]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017fdc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017fde:	4a22      	ldr	r2, [pc, #136]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017fe4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8017fec:	4b1e      	ldr	r3, [pc, #120]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017fee:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8017ff8:	4b1b      	ldr	r3, [pc, #108]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8017ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8017ffe:	f7ff f9bc 	bl	801737a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018002:	2001      	movs	r0, #1
 8018004:	f7fe fb48 	bl	8016698 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018008:	4818      	ldr	r0, [pc, #96]	; (801806c <RadioSetRxGenericConfig+0x398>)
 801800a:	f000 fe53 	bl	8018cb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801800e:	4818      	ldr	r0, [pc, #96]	; (8018070 <RadioSetRxGenericConfig+0x39c>)
 8018010:	f000 ff1c 	bl	8018e4c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018014:	4b14      	ldr	r3, [pc, #80]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8018016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801801a:	2b01      	cmp	r3, #1
 801801c:	d10d      	bne.n	801803a <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801801e:	f240 7036 	movw	r0, #1846	; 0x736
 8018022:	f001 f86f 	bl	8019104 <SUBGRF_ReadRegister>
 8018026:	4603      	mov	r3, r0
 8018028:	f023 0304 	bic.w	r3, r3, #4
 801802c:	b2db      	uxtb	r3, r3
 801802e:	4619      	mov	r1, r3
 8018030:	f240 7036 	movw	r0, #1846	; 0x736
 8018034:	f001 f852 	bl	80190dc <SUBGRF_WriteRegister>
 8018038:	e00c      	b.n	8018054 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801803a:	f240 7036 	movw	r0, #1846	; 0x736
 801803e:	f001 f861 	bl	8019104 <SUBGRF_ReadRegister>
 8018042:	4603      	mov	r3, r0
 8018044:	f043 0304 	orr.w	r3, r3, #4
 8018048:	b2db      	uxtb	r3, r3
 801804a:	4619      	mov	r1, r3
 801804c:	f240 7036 	movw	r0, #1846	; 0x736
 8018050:	f001 f844 	bl	80190dc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018054:	4b04      	ldr	r3, [pc, #16]	; (8018068 <RadioSetRxGenericConfig+0x394>)
 8018056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801805a:	609a      	str	r2, [r3, #8]
        break;
 801805c:	bf00      	nop
    }
    return status;
 801805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018060:	4618      	mov	r0, r3
 8018062:	3730      	adds	r7, #48	; 0x30
 8018064:	46bd      	mov	sp, r7
 8018066:	bd80      	pop	{r7, pc}
 8018068:	200017b8 	.word	0x200017b8
 801806c:	200017f0 	.word	0x200017f0
 8018070:	200017c6 	.word	0x200017c6

08018074 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b08a      	sub	sp, #40	; 0x28
 8018078:	af00      	add	r7, sp, #0
 801807a:	60b9      	str	r1, [r7, #8]
 801807c:	607b      	str	r3, [r7, #4]
 801807e:	4603      	mov	r3, r0
 8018080:	73fb      	strb	r3, [r7, #15]
 8018082:	4613      	mov	r3, r2
 8018084:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8018086:	2300      	movs	r3, #0
 8018088:	61fb      	str	r3, [r7, #28]
 801808a:	2300      	movs	r3, #0
 801808c:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801808e:	f001 fafe 	bl	801968e <RFW_DeInit>
    switch( modem )
 8018092:	7bfb      	ldrb	r3, [r7, #15]
 8018094:	2b02      	cmp	r3, #2
 8018096:	f000 8144 	beq.w	8018322 <RadioSetTxGenericConfig+0x2ae>
 801809a:	2b02      	cmp	r3, #2
 801809c:	f300 8160 	bgt.w	8018360 <RadioSetTxGenericConfig+0x2ec>
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d003      	beq.n	80180ac <RadioSetTxGenericConfig+0x38>
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	f000 80b7 	beq.w	8018218 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80180aa:	e159      	b.n	8018360 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	689b      	ldr	r3, [r3, #8]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d003      	beq.n	80180bc <RadioSetTxGenericConfig+0x48>
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	691b      	ldr	r3, [r3, #16]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d102      	bne.n	80180c2 <RadioSetTxGenericConfig+0x4e>
            return -1;
 80180bc:	f04f 33ff 	mov.w	r3, #4294967295
 80180c0:	e163      	b.n	801838a <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80180c2:	68bb      	ldr	r3, [r7, #8]
 80180c4:	7d1b      	ldrb	r3, [r3, #20]
 80180c6:	2b08      	cmp	r3, #8
 80180c8:	d902      	bls.n	80180d0 <RadioSetTxGenericConfig+0x5c>
            return -1;
 80180ca:	f04f 33ff 	mov.w	r3, #4294967295
 80180ce:	e15c      	b.n	801838a <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80180d0:	2300      	movs	r3, #0
 80180d2:	627b      	str	r3, [r7, #36]	; 0x24
 80180d4:	e00d      	b.n	80180f2 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	699a      	ldr	r2, [r3, #24]
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	4413      	add	r3, r2
 80180de:	7819      	ldrb	r1, [r3, #0]
 80180e0:	f107 021c 	add.w	r2, r7, #28
 80180e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e6:	4413      	add	r3, r2
 80180e8:	460a      	mov	r2, r1
 80180ea:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	3301      	adds	r3, #1
 80180f0:	627b      	str	r3, [r7, #36]	; 0x24
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	7d1b      	ldrb	r3, [r3, #20]
 80180f6:	461a      	mov	r2, r3
 80180f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fa:	4293      	cmp	r3, r2
 80180fc:	dbeb      	blt.n	80180d6 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80180fe:	4ba5      	ldr	r3, [pc, #660]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018100:	2200      	movs	r2, #0
 8018102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	689b      	ldr	r3, [r3, #8]
 801810a:	4aa2      	ldr	r2, [pc, #648]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801810c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	781a      	ldrb	r2, [r3, #0]
 8018112:	4ba0      	ldr	r3, [pc, #640]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	4618      	mov	r0, r3
 801811e:	f001 f9e7 	bl	80194f0 <SUBGRF_GetFskBandwidthRegValue>
 8018122:	4603      	mov	r3, r0
 8018124:	461a      	mov	r2, r3
 8018126:	4b9b      	ldr	r3, [pc, #620]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	4a98      	ldr	r2, [pc, #608]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018132:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018134:	4b97      	ldr	r3, [pc, #604]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018136:	2200      	movs	r2, #0
 8018138:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	691b      	ldr	r3, [r3, #16]
 801813e:	b29b      	uxth	r3, r3
 8018140:	00db      	lsls	r3, r3, #3
 8018142:	b29a      	uxth	r2, r3
 8018144:	4b93      	ldr	r3, [pc, #588]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018146:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018148:	4b92      	ldr	r3, [pc, #584]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801814a:	2204      	movs	r2, #4
 801814c:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801814e:	68bb      	ldr	r3, [r7, #8]
 8018150:	7d1b      	ldrb	r3, [r3, #20]
 8018152:	00db      	lsls	r3, r3, #3
 8018154:	b2da      	uxtb	r2, r3
 8018156:	4b8f      	ldr	r3, [pc, #572]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018158:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801815a:	4b8e      	ldr	r3, [pc, #568]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801815c:	2200      	movs	r2, #0
 801815e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018166:	2b02      	cmp	r3, #2
 8018168:	d003      	beq.n	8018172 <RadioSetTxGenericConfig+0xfe>
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	7f9b      	ldrb	r3, [r3, #30]
 801816e:	2b02      	cmp	r3, #2
 8018170:	d12a      	bne.n	80181c8 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	7fdb      	ldrb	r3, [r3, #31]
 8018176:	2bf1      	cmp	r3, #241	; 0xf1
 8018178:	d00a      	beq.n	8018190 <RadioSetTxGenericConfig+0x11c>
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	7fdb      	ldrb	r3, [r3, #31]
 801817e:	2bf2      	cmp	r3, #242	; 0xf2
 8018180:	d006      	beq.n	8018190 <RadioSetTxGenericConfig+0x11c>
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	7fdb      	ldrb	r3, [r3, #31]
 8018186:	2b01      	cmp	r3, #1
 8018188:	d002      	beq.n	8018190 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801818a:	f04f 33ff 	mov.w	r3, #4294967295
 801818e:	e0fc      	b.n	801838a <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8018190:	2301      	movs	r3, #1
 8018192:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8018194:	68bb      	ldr	r3, [r7, #8]
 8018196:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018198:	4b7f      	ldr	r3, [pc, #508]	; (8018398 <RadioSetTxGenericConfig+0x324>)
 801819a:	6819      	ldr	r1, [r3, #0]
 801819c:	f107 0310 	add.w	r3, r7, #16
 80181a0:	4a7e      	ldr	r2, [pc, #504]	; (801839c <RadioSetTxGenericConfig+0x328>)
 80181a2:	4618      	mov	r0, r3
 80181a4:	f001 fa66 	bl	8019674 <RFW_Init>
 80181a8:	4603      	mov	r3, r0
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d002      	beq.n	80181b4 <RadioSetTxGenericConfig+0x140>
              return -1;
 80181ae:	f04f 33ff 	mov.w	r3, #4294967295
 80181b2:	e0ea      	b.n	801838a <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80181b4:	4b77      	ldr	r3, [pc, #476]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181b6:	2200      	movs	r2, #0
 80181b8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80181ba:	4b76      	ldr	r3, [pc, #472]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181bc:	2201      	movs	r2, #1
 80181be:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80181c0:	4b74      	ldr	r3, [pc, #464]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181c2:	2200      	movs	r2, #0
 80181c4:	755a      	strb	r2, [r3, #21]
        {
 80181c6:	e00c      	b.n	80181e2 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	7fda      	ldrb	r2, [r3, #31]
 80181cc:	4b71      	ldr	r3, [pc, #452]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181ce:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80181d6:	4b6f      	ldr	r3, [pc, #444]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181d8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	7f9a      	ldrb	r2, [r3, #30]
 80181de:	4b6d      	ldr	r3, [pc, #436]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80181e0:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80181e2:	f7ff f8ca 	bl	801737a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80181e6:	2000      	movs	r0, #0
 80181e8:	f7fe fa56 	bl	8016698 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181ec:	486c      	ldr	r0, [pc, #432]	; (80183a0 <RadioSetTxGenericConfig+0x32c>)
 80181ee:	f000 fd61 	bl	8018cb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181f2:	486c      	ldr	r0, [pc, #432]	; (80183a4 <RadioSetTxGenericConfig+0x330>)
 80181f4:	f000 fe2a 	bl	8018e4c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80181f8:	f107 031c 	add.w	r3, r7, #28
 80181fc:	4618      	mov	r0, r3
 80181fe:	f000 f964 	bl	80184ca <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	8b9b      	ldrh	r3, [r3, #28]
 8018206:	4618      	mov	r0, r3
 8018208:	f000 f9ae 	bl	8018568 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	8c1b      	ldrh	r3, [r3, #32]
 8018210:	4618      	mov	r0, r3
 8018212:	f000 f989 	bl	8018528 <SUBGRF_SetCrcPolynomial>
        break;
 8018216:	e0a4      	b.n	8018362 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018218:	4b5e      	ldr	r3, [pc, #376]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801821a:	2201      	movs	r2, #1
 801821c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8018226:	4b5b      	ldr	r3, [pc, #364]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8018232:	4b58      	ldr	r3, [pc, #352]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801823e:	4b55      	ldr	r3, [pc, #340]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018240:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801824a:	2b02      	cmp	r3, #2
 801824c:	d010      	beq.n	8018270 <RadioSetTxGenericConfig+0x1fc>
 801824e:	2b02      	cmp	r3, #2
 8018250:	dc22      	bgt.n	8018298 <RadioSetTxGenericConfig+0x224>
 8018252:	2b00      	cmp	r3, #0
 8018254:	d002      	beq.n	801825c <RadioSetTxGenericConfig+0x1e8>
 8018256:	2b01      	cmp	r3, #1
 8018258:	d005      	beq.n	8018266 <RadioSetTxGenericConfig+0x1f2>
            break;
 801825a:	e01d      	b.n	8018298 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801825c:	4b4d      	ldr	r3, [pc, #308]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801825e:	2200      	movs	r2, #0
 8018260:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018264:	e019      	b.n	801829a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018266:	4b4b      	ldr	r3, [pc, #300]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018268:	2201      	movs	r2, #1
 801826a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801826e:	e014      	b.n	801829a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018276:	2b0b      	cmp	r3, #11
 8018278:	d004      	beq.n	8018284 <RadioSetTxGenericConfig+0x210>
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018280:	2b0c      	cmp	r3, #12
 8018282:	d104      	bne.n	801828e <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018284:	4b43      	ldr	r3, [pc, #268]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018286:	2201      	movs	r2, #1
 8018288:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801828c:	e005      	b.n	801829a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801828e:	4b41      	ldr	r3, [pc, #260]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018290:	2200      	movs	r2, #0
 8018292:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018296:	e000      	b.n	801829a <RadioSetTxGenericConfig+0x226>
            break;
 8018298:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801829a:	4b3e      	ldr	r3, [pc, #248]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801829c:	2201      	movs	r2, #1
 801829e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80182a4:	4b3b      	ldr	r3, [pc, #236]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80182a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80182ae:	4b39      	ldr	r3, [pc, #228]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80182b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80182b8:	4b36      	ldr	r3, [pc, #216]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80182ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80182c4:	4b33      	ldr	r3, [pc, #204]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80182c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80182ca:	f7ff f856 	bl	801737a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80182ce:	2001      	movs	r0, #1
 80182d0:	f7fe f9e2 	bl	8016698 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182d4:	4832      	ldr	r0, [pc, #200]	; (80183a0 <RadioSetTxGenericConfig+0x32c>)
 80182d6:	f000 fced 	bl	8018cb4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80182da:	4832      	ldr	r0, [pc, #200]	; (80183a4 <RadioSetTxGenericConfig+0x330>)
 80182dc:	f000 fdb6 	bl	8018e4c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80182e0:	4b2c      	ldr	r3, [pc, #176]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 80182e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80182e6:	2b06      	cmp	r3, #6
 80182e8:	d10d      	bne.n	8018306 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80182ea:	f640 0089 	movw	r0, #2185	; 0x889
 80182ee:	f000 ff09 	bl	8019104 <SUBGRF_ReadRegister>
 80182f2:	4603      	mov	r3, r0
 80182f4:	f023 0304 	bic.w	r3, r3, #4
 80182f8:	b2db      	uxtb	r3, r3
 80182fa:	4619      	mov	r1, r3
 80182fc:	f640 0089 	movw	r0, #2185	; 0x889
 8018300:	f000 feec 	bl	80190dc <SUBGRF_WriteRegister>
        break;
 8018304:	e02d      	b.n	8018362 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018306:	f640 0089 	movw	r0, #2185	; 0x889
 801830a:	f000 fefb 	bl	8019104 <SUBGRF_ReadRegister>
 801830e:	4603      	mov	r3, r0
 8018310:	f043 0304 	orr.w	r3, r3, #4
 8018314:	b2db      	uxtb	r3, r3
 8018316:	4619      	mov	r1, r3
 8018318:	f640 0089 	movw	r0, #2185	; 0x889
 801831c:	f000 fede 	bl	80190dc <SUBGRF_WriteRegister>
        break;
 8018320:	e01f      	b.n	8018362 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018326:	2b00      	cmp	r3, #0
 8018328:	d004      	beq.n	8018334 <RadioSetTxGenericConfig+0x2c0>
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801832e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018332:	d902      	bls.n	801833a <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8018334:	f04f 33ff 	mov.w	r3, #4294967295
 8018338:	e027      	b.n	801838a <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801833a:	2002      	movs	r0, #2
 801833c:	f7fe f9ac 	bl	8016698 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018340:	4b14      	ldr	r3, [pc, #80]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018342:	2202      	movs	r2, #2
 8018344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018348:	68bb      	ldr	r3, [r7, #8]
 801834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801834c:	4a11      	ldr	r2, [pc, #68]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 801834e:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018350:	4b10      	ldr	r3, [pc, #64]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018352:	2216      	movs	r2, #22
 8018354:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018358:	4811      	ldr	r0, [pc, #68]	; (80183a0 <RadioSetTxGenericConfig+0x32c>)
 801835a:	f000 fcab 	bl	8018cb4 <SUBGRF_SetModulationParams>
        break;
 801835e:	e000      	b.n	8018362 <RadioSetTxGenericConfig+0x2ee>
        break;
 8018360:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018366:	4618      	mov	r0, r3
 8018368:	f000 ffd4 	bl	8019314 <SUBGRF_SetRfTxPower>
 801836c:	4603      	mov	r3, r0
 801836e:	461a      	mov	r2, r3
 8018370:	4b08      	ldr	r3, [pc, #32]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018372:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018376:	4b07      	ldr	r3, [pc, #28]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018378:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801837c:	4618      	mov	r0, r3
 801837e:	f001 f99a 	bl	80196b6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018382:	4a04      	ldr	r2, [pc, #16]	; (8018394 <RadioSetTxGenericConfig+0x320>)
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	6053      	str	r3, [r2, #4]
    return 0;
 8018388:	2300      	movs	r3, #0
}
 801838a:	4618      	mov	r0, r3
 801838c:	3728      	adds	r7, #40	; 0x28
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	200017b8 	.word	0x200017b8
 8018398:	20000ed8 	.word	0x20000ed8
 801839c:	20001810 	.word	0x20001810
 80183a0:	200017f0 	.word	0x200017f0
 80183a4:	200017c6 	.word	0x200017c6

080183a8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d002      	beq.n	80183bc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80183b6:	4a1a      	ldr	r2, [pc, #104]	; (8018420 <SUBGRF_Init+0x78>)
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80183bc:	f7e9 fc50 	bl	8001c60 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80183c0:	2002      	movs	r0, #2
 80183c2:	f001 f873 	bl	80194ac <Radio_SMPS_Set>

    ImageCalibrated = false;
 80183c6:	4b17      	ldr	r3, [pc, #92]	; (8018424 <SUBGRF_Init+0x7c>)
 80183c8:	2200      	movs	r2, #0
 80183ca:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80183cc:	2000      	movs	r0, #0
 80183ce:	f000 f977 	bl	80186c0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80183d2:	f7f2 fb11 	bl	800a9f8 <RBI_IsTCXO>
 80183d6:	4603      	mov	r3, r0
 80183d8:	2b01      	cmp	r3, #1
 80183da:	d10e      	bne.n	80183fa <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80183dc:	2140      	movs	r1, #64	; 0x40
 80183de:	2001      	movs	r0, #1
 80183e0:	f000 fb78 	bl	8018ad4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80183e4:	2100      	movs	r1, #0
 80183e6:	f640 1011 	movw	r0, #2321	; 0x911
 80183ea:	f000 fe77 	bl	80190dc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80183ee:	237f      	movs	r3, #127	; 0x7f
 80183f0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80183f2:	7b38      	ldrb	r0, [r7, #12]
 80183f4:	f000 fa85 	bl	8018902 <SUBGRF_Calibrate>
 80183f8:	e009      	b.n	801840e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80183fa:	2120      	movs	r1, #32
 80183fc:	f640 1011 	movw	r0, #2321	; 0x911
 8018400:	f000 fe6c 	bl	80190dc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018404:	2120      	movs	r1, #32
 8018406:	f640 1012 	movw	r0, #2322	; 0x912
 801840a:	f000 fe67 	bl	80190dc <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801840e:	f7f2 fad7 	bl	800a9c0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018412:	4b05      	ldr	r3, [pc, #20]	; (8018428 <SUBGRF_Init+0x80>)
 8018414:	2201      	movs	r2, #1
 8018416:	701a      	strb	r2, [r3, #0]
}
 8018418:	bf00      	nop
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	20000ee8 	.word	0x20000ee8
 8018424:	20000ee4 	.word	0x20000ee4
 8018428:	20000edc 	.word	0x20000edc

0801842c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801842c:	b480      	push	{r7}
 801842e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018430:	4b02      	ldr	r3, [pc, #8]	; (801843c <SUBGRF_GetOperatingMode+0x10>)
 8018432:	781b      	ldrb	r3, [r3, #0]
}
 8018434:	4618      	mov	r0, r3
 8018436:	46bd      	mov	sp, r7
 8018438:	bc80      	pop	{r7}
 801843a:	4770      	bx	lr
 801843c:	20000edc 	.word	0x20000edc

08018440 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b082      	sub	sp, #8
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	460b      	mov	r3, r1
 801844a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801844c:	78fb      	ldrb	r3, [r7, #3]
 801844e:	461a      	mov	r2, r3
 8018450:	6879      	ldr	r1, [r7, #4]
 8018452:	2000      	movs	r0, #0
 8018454:	f000 feae 	bl	80191b4 <SUBGRF_WriteBuffer>
}
 8018458:	bf00      	nop
 801845a:	3708      	adds	r7, #8
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b086      	sub	sp, #24
 8018464:	af00      	add	r7, sp, #0
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	60b9      	str	r1, [r7, #8]
 801846a:	4613      	mov	r3, r2
 801846c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801846e:	2300      	movs	r3, #0
 8018470:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018472:	f107 0317 	add.w	r3, r7, #23
 8018476:	4619      	mov	r1, r3
 8018478:	68b8      	ldr	r0, [r7, #8]
 801847a:	f000 fdb1 	bl	8018fe0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	781b      	ldrb	r3, [r3, #0]
 8018482:	79fa      	ldrb	r2, [r7, #7]
 8018484:	429a      	cmp	r2, r3
 8018486:	d201      	bcs.n	801848c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018488:	2301      	movs	r3, #1
 801848a:	e007      	b.n	801849c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801848c:	7df8      	ldrb	r0, [r7, #23]
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	461a      	mov	r2, r3
 8018494:	68f9      	ldr	r1, [r7, #12]
 8018496:	f000 feaf 	bl	80191f8 <SUBGRF_ReadBuffer>

    return 0;
 801849a:	2300      	movs	r3, #0
}
 801849c:	4618      	mov	r0, r3
 801849e:	3718      	adds	r7, #24
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}

080184a4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b084      	sub	sp, #16
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	460b      	mov	r3, r1
 80184ae:	607a      	str	r2, [r7, #4]
 80184b0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80184b2:	7afb      	ldrb	r3, [r7, #11]
 80184b4:	4619      	mov	r1, r3
 80184b6:	68f8      	ldr	r0, [r7, #12]
 80184b8:	f7ff ffc2 	bl	8018440 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f000 f91b 	bl	80186f8 <SUBGRF_SetTx>
}
 80184c2:	bf00      	nop
 80184c4:	3710      	adds	r7, #16
 80184c6:	46bd      	mov	sp, r7
 80184c8:	bd80      	pop	{r7, pc}

080184ca <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80184ca:	b580      	push	{r7, lr}
 80184cc:	b082      	sub	sp, #8
 80184ce:	af00      	add	r7, sp, #0
 80184d0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80184d2:	2208      	movs	r2, #8
 80184d4:	6879      	ldr	r1, [r7, #4]
 80184d6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80184da:	f000 fe27 	bl	801912c <SUBGRF_WriteRegisters>
    return 0;
 80184de:	2300      	movs	r3, #0
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3708      	adds	r7, #8
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}

080184e8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	4603      	mov	r3, r0
 80184f0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80184f2:	88fb      	ldrh	r3, [r7, #6]
 80184f4:	0a1b      	lsrs	r3, r3, #8
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	b2db      	uxtb	r3, r3
 80184fa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80184fc:	88fb      	ldrh	r3, [r7, #6]
 80184fe:	b2db      	uxtb	r3, r3
 8018500:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018502:	f000 fb67 	bl	8018bd4 <SUBGRF_GetPacketType>
 8018506:	4603      	mov	r3, r0
 8018508:	2b00      	cmp	r3, #0
 801850a:	d108      	bne.n	801851e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801850c:	f107 030c 	add.w	r3, r7, #12
 8018510:	2202      	movs	r2, #2
 8018512:	4619      	mov	r1, r3
 8018514:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018518:	f000 fe08 	bl	801912c <SUBGRF_WriteRegisters>
            break;
 801851c:	e000      	b.n	8018520 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801851e:	bf00      	nop
    }
}
 8018520:	bf00      	nop
 8018522:	3710      	adds	r7, #16
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018532:	88fb      	ldrh	r3, [r7, #6]
 8018534:	0a1b      	lsrs	r3, r3, #8
 8018536:	b29b      	uxth	r3, r3
 8018538:	b2db      	uxtb	r3, r3
 801853a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801853c:	88fb      	ldrh	r3, [r7, #6]
 801853e:	b2db      	uxtb	r3, r3
 8018540:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018542:	f000 fb47 	bl	8018bd4 <SUBGRF_GetPacketType>
 8018546:	4603      	mov	r3, r0
 8018548:	2b00      	cmp	r3, #0
 801854a:	d108      	bne.n	801855e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801854c:	f107 030c 	add.w	r3, r7, #12
 8018550:	2202      	movs	r2, #2
 8018552:	4619      	mov	r1, r3
 8018554:	f240 60be 	movw	r0, #1726	; 0x6be
 8018558:	f000 fde8 	bl	801912c <SUBGRF_WriteRegisters>
            break;
 801855c:	e000      	b.n	8018560 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801855e:	bf00      	nop
    }
}
 8018560:	bf00      	nop
 8018562:	3710      	adds	r7, #16
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}

08018568 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	4603      	mov	r3, r0
 8018570:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018572:	2300      	movs	r3, #0
 8018574:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018576:	f000 fb2d 	bl	8018bd4 <SUBGRF_GetPacketType>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	d121      	bne.n	80185c4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018580:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8018584:	f000 fdbe 	bl	8019104 <SUBGRF_ReadRegister>
 8018588:	4603      	mov	r3, r0
 801858a:	f023 0301 	bic.w	r3, r3, #1
 801858e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018590:	88fb      	ldrh	r3, [r7, #6]
 8018592:	0a1b      	lsrs	r3, r3, #8
 8018594:	b29b      	uxth	r3, r3
 8018596:	b25b      	sxtb	r3, r3
 8018598:	f003 0301 	and.w	r3, r3, #1
 801859c:	b25a      	sxtb	r2, r3
 801859e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185a2:	4313      	orrs	r3, r2
 80185a4:	b25b      	sxtb	r3, r3
 80185a6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80185a8:	7bfb      	ldrb	r3, [r7, #15]
 80185aa:	4619      	mov	r1, r3
 80185ac:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80185b0:	f000 fd94 	bl	80190dc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80185b4:	88fb      	ldrh	r3, [r7, #6]
 80185b6:	b2db      	uxtb	r3, r3
 80185b8:	4619      	mov	r1, r3
 80185ba:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80185be:	f000 fd8d 	bl	80190dc <SUBGRF_WriteRegister>
            break;
 80185c2:	e000      	b.n	80185c6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80185c4:	bf00      	nop
    }
}
 80185c6:	bf00      	nop
 80185c8:	3710      	adds	r7, #16
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}

080185ce <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80185ce:	b580      	push	{r7, lr}
 80185d0:	b082      	sub	sp, #8
 80185d2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80185d4:	2300      	movs	r3, #0
 80185d6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80185d8:	2300      	movs	r3, #0
 80185da:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80185dc:	2300      	movs	r3, #0
 80185de:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80185e0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80185e4:	f000 fd8e 	bl	8019104 <SUBGRF_ReadRegister>
 80185e8:	4603      	mov	r3, r0
 80185ea:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80185ec:	79fb      	ldrb	r3, [r7, #7]
 80185ee:	f023 0301 	bic.w	r3, r3, #1
 80185f2:	b2db      	uxtb	r3, r3
 80185f4:	4619      	mov	r1, r3
 80185f6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80185fa:	f000 fd6f 	bl	80190dc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80185fe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018602:	f000 fd7f 	bl	8019104 <SUBGRF_ReadRegister>
 8018606:	4603      	mov	r3, r0
 8018608:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801860a:	79bb      	ldrb	r3, [r7, #6]
 801860c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018610:	b2db      	uxtb	r3, r3
 8018612:	4619      	mov	r1, r3
 8018614:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018618:	f000 fd60 	bl	80190dc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801861c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018620:	f000 f88a 	bl	8018738 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018624:	463b      	mov	r3, r7
 8018626:	2204      	movs	r2, #4
 8018628:	4619      	mov	r1, r3
 801862a:	f640 0019 	movw	r0, #2073	; 0x819
 801862e:	f000 fd9f 	bl	8019170 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018632:	2000      	movs	r0, #0
 8018634:	f000 f844 	bl	80186c0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018638:	79fb      	ldrb	r3, [r7, #7]
 801863a:	4619      	mov	r1, r3
 801863c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018640:	f000 fd4c 	bl	80190dc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018644:	79bb      	ldrb	r3, [r7, #6]
 8018646:	4619      	mov	r1, r3
 8018648:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801864c:	f000 fd46 	bl	80190dc <SUBGRF_WriteRegister>

    return number;
 8018650:	683b      	ldr	r3, [r7, #0]
}
 8018652:	4618      	mov	r0, r3
 8018654:	3708      	adds	r7, #8
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}
	...

0801865c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b084      	sub	sp, #16
 8018660:	af00      	add	r7, sp, #0
 8018662:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018664:	2000      	movs	r0, #0
 8018666:	f7f2 f9b2 	bl	800a9ce <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801866a:	2002      	movs	r0, #2
 801866c:	f000 ff1e 	bl	80194ac <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018670:	793b      	ldrb	r3, [r7, #4]
 8018672:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018676:	b2db      	uxtb	r3, r3
 8018678:	009b      	lsls	r3, r3, #2
 801867a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801867c:	793b      	ldrb	r3, [r7, #4]
 801867e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018682:	b2db      	uxtb	r3, r3
 8018684:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018686:	b25b      	sxtb	r3, r3
 8018688:	4313      	orrs	r3, r2
 801868a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801868c:	793b      	ldrb	r3, [r7, #4]
 801868e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018692:	b2db      	uxtb	r3, r3
 8018694:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018696:	4313      	orrs	r3, r2
 8018698:	b25b      	sxtb	r3, r3
 801869a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801869c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801869e:	f107 030f 	add.w	r3, r7, #15
 80186a2:	2201      	movs	r2, #1
 80186a4:	4619      	mov	r1, r3
 80186a6:	2084      	movs	r0, #132	; 0x84
 80186a8:	f000 fdc8 	bl	801923c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80186ac:	4b03      	ldr	r3, [pc, #12]	; (80186bc <SUBGRF_SetSleep+0x60>)
 80186ae:	2200      	movs	r2, #0
 80186b0:	701a      	strb	r2, [r3, #0]
}
 80186b2:	bf00      	nop
 80186b4:	3710      	adds	r7, #16
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	20000edc 	.word	0x20000edc

080186c0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	4603      	mov	r3, r0
 80186c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80186ca:	1dfb      	adds	r3, r7, #7
 80186cc:	2201      	movs	r2, #1
 80186ce:	4619      	mov	r1, r3
 80186d0:	2080      	movs	r0, #128	; 0x80
 80186d2:	f000 fdb3 	bl	801923c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80186d6:	79fb      	ldrb	r3, [r7, #7]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d103      	bne.n	80186e4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80186dc:	4b05      	ldr	r3, [pc, #20]	; (80186f4 <SUBGRF_SetStandby+0x34>)
 80186de:	2201      	movs	r2, #1
 80186e0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80186e2:	e002      	b.n	80186ea <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80186e4:	4b03      	ldr	r3, [pc, #12]	; (80186f4 <SUBGRF_SetStandby+0x34>)
 80186e6:	2202      	movs	r2, #2
 80186e8:	701a      	strb	r2, [r3, #0]
}
 80186ea:	bf00      	nop
 80186ec:	3708      	adds	r7, #8
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}
 80186f2:	bf00      	nop
 80186f4:	20000edc 	.word	0x20000edc

080186f8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018700:	4b0c      	ldr	r3, [pc, #48]	; (8018734 <SUBGRF_SetTx+0x3c>)
 8018702:	2204      	movs	r2, #4
 8018704:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	0c1b      	lsrs	r3, r3, #16
 801870a:	b2db      	uxtb	r3, r3
 801870c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	0a1b      	lsrs	r3, r3, #8
 8018712:	b2db      	uxtb	r3, r3
 8018714:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	b2db      	uxtb	r3, r3
 801871a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801871c:	f107 030c 	add.w	r3, r7, #12
 8018720:	2203      	movs	r2, #3
 8018722:	4619      	mov	r1, r3
 8018724:	2083      	movs	r0, #131	; 0x83
 8018726:	f000 fd89 	bl	801923c <SUBGRF_WriteCommand>
}
 801872a:	bf00      	nop
 801872c:	3710      	adds	r7, #16
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}
 8018732:	bf00      	nop
 8018734:	20000edc 	.word	0x20000edc

08018738 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018740:	4b0c      	ldr	r3, [pc, #48]	; (8018774 <SUBGRF_SetRx+0x3c>)
 8018742:	2205      	movs	r2, #5
 8018744:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	0c1b      	lsrs	r3, r3, #16
 801874a:	b2db      	uxtb	r3, r3
 801874c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	0a1b      	lsrs	r3, r3, #8
 8018752:	b2db      	uxtb	r3, r3
 8018754:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	b2db      	uxtb	r3, r3
 801875a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801875c:	f107 030c 	add.w	r3, r7, #12
 8018760:	2203      	movs	r2, #3
 8018762:	4619      	mov	r1, r3
 8018764:	2082      	movs	r0, #130	; 0x82
 8018766:	f000 fd69 	bl	801923c <SUBGRF_WriteCommand>
}
 801876a:	bf00      	nop
 801876c:	3710      	adds	r7, #16
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}
 8018772:	bf00      	nop
 8018774:	20000edc 	.word	0x20000edc

08018778 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018780:	4b0e      	ldr	r3, [pc, #56]	; (80187bc <SUBGRF_SetRxBoosted+0x44>)
 8018782:	2205      	movs	r2, #5
 8018784:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018786:	2197      	movs	r1, #151	; 0x97
 8018788:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801878c:	f000 fca6 	bl	80190dc <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	0c1b      	lsrs	r3, r3, #16
 8018794:	b2db      	uxtb	r3, r3
 8018796:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	0a1b      	lsrs	r3, r3, #8
 801879c:	b2db      	uxtb	r3, r3
 801879e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80187a6:	f107 030c 	add.w	r3, r7, #12
 80187aa:	2203      	movs	r2, #3
 80187ac:	4619      	mov	r1, r3
 80187ae:	2082      	movs	r0, #130	; 0x82
 80187b0:	f000 fd44 	bl	801923c <SUBGRF_WriteCommand>
}
 80187b4:	bf00      	nop
 80187b6:	3710      	adds	r7, #16
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	20000edc 	.word	0x20000edc

080187c0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b084      	sub	sp, #16
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
 80187c8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	0c1b      	lsrs	r3, r3, #16
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	0a1b      	lsrs	r3, r3, #8
 80187d6:	b2db      	uxtb	r3, r3
 80187d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	0c1b      	lsrs	r3, r3, #16
 80187e4:	b2db      	uxtb	r3, r3
 80187e6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	0a1b      	lsrs	r3, r3, #8
 80187ec:	b2db      	uxtb	r3, r3
 80187ee:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	b2db      	uxtb	r3, r3
 80187f4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80187f6:	f107 0308 	add.w	r3, r7, #8
 80187fa:	2206      	movs	r2, #6
 80187fc:	4619      	mov	r1, r3
 80187fe:	2094      	movs	r0, #148	; 0x94
 8018800:	f000 fd1c 	bl	801923c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018804:	4b03      	ldr	r3, [pc, #12]	; (8018814 <SUBGRF_SetRxDutyCycle+0x54>)
 8018806:	2206      	movs	r2, #6
 8018808:	701a      	strb	r2, [r3, #0]
}
 801880a:	bf00      	nop
 801880c:	3710      	adds	r7, #16
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}
 8018812:	bf00      	nop
 8018814:	20000edc 	.word	0x20000edc

08018818 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018818:	b580      	push	{r7, lr}
 801881a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801881c:	2200      	movs	r2, #0
 801881e:	2100      	movs	r1, #0
 8018820:	20c5      	movs	r0, #197	; 0xc5
 8018822:	f000 fd0b 	bl	801923c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018826:	4b02      	ldr	r3, [pc, #8]	; (8018830 <SUBGRF_SetCad+0x18>)
 8018828:	2207      	movs	r2, #7
 801882a:	701a      	strb	r2, [r3, #0]
}
 801882c:	bf00      	nop
 801882e:	bd80      	pop	{r7, pc}
 8018830:	20000edc 	.word	0x20000edc

08018834 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018834:	b580      	push	{r7, lr}
 8018836:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018838:	2200      	movs	r2, #0
 801883a:	2100      	movs	r1, #0
 801883c:	20d1      	movs	r0, #209	; 0xd1
 801883e:	f000 fcfd 	bl	801923c <SUBGRF_WriteCommand>
}
 8018842:	bf00      	nop
 8018844:	bd80      	pop	{r7, pc}

08018846 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018846:	b580      	push	{r7, lr}
 8018848:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801884a:	2200      	movs	r2, #0
 801884c:	2100      	movs	r1, #0
 801884e:	20d2      	movs	r0, #210	; 0xd2
 8018850:	f000 fcf4 	bl	801923c <SUBGRF_WriteCommand>
}
 8018854:	bf00      	nop
 8018856:	bd80      	pop	{r7, pc}

08018858 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	4603      	mov	r3, r0
 8018860:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018862:	1dfb      	adds	r3, r7, #7
 8018864:	2201      	movs	r2, #1
 8018866:	4619      	mov	r1, r3
 8018868:	209f      	movs	r0, #159	; 0x9f
 801886a:	f000 fce7 	bl	801923c <SUBGRF_WriteCommand>
}
 801886e:	bf00      	nop
 8018870:	3708      	adds	r7, #8
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b084      	sub	sp, #16
 801887a:	af00      	add	r7, sp, #0
 801887c:	4603      	mov	r3, r0
 801887e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018880:	1dfb      	adds	r3, r7, #7
 8018882:	2201      	movs	r2, #1
 8018884:	4619      	mov	r1, r3
 8018886:	20a0      	movs	r0, #160	; 0xa0
 8018888:	f000 fcd8 	bl	801923c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801888c:	79fb      	ldrb	r3, [r7, #7]
 801888e:	2b3f      	cmp	r3, #63	; 0x3f
 8018890:	d91c      	bls.n	80188cc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018892:	79fb      	ldrb	r3, [r7, #7]
 8018894:	085b      	lsrs	r3, r3, #1
 8018896:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018898:	2300      	movs	r3, #0
 801889a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801889c:	2300      	movs	r3, #0
 801889e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80188a0:	e005      	b.n	80188ae <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80188a2:	7bfb      	ldrb	r3, [r7, #15]
 80188a4:	089b      	lsrs	r3, r3, #2
 80188a6:	73fb      	strb	r3, [r7, #15]
            exp++;
 80188a8:	7bbb      	ldrb	r3, [r7, #14]
 80188aa:	3301      	adds	r3, #1
 80188ac:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80188ae:	7bfb      	ldrb	r3, [r7, #15]
 80188b0:	2b1f      	cmp	r3, #31
 80188b2:	d8f6      	bhi.n	80188a2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80188b4:	7bfb      	ldrb	r3, [r7, #15]
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	b2da      	uxtb	r2, r3
 80188ba:	7bbb      	ldrb	r3, [r7, #14]
 80188bc:	4413      	add	r3, r2
 80188be:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80188c0:	7b7b      	ldrb	r3, [r7, #13]
 80188c2:	4619      	mov	r1, r3
 80188c4:	f240 7006 	movw	r0, #1798	; 0x706
 80188c8:	f000 fc08 	bl	80190dc <SUBGRF_WriteRegister>
    }
}
 80188cc:	bf00      	nop
 80188ce:	3710      	adds	r7, #16
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}

080188d4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80188da:	f7f2 f894 	bl	800aa06 <RBI_IsDCDC>
 80188de:	4603      	mov	r3, r0
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d102      	bne.n	80188ea <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80188e4:	2301      	movs	r3, #1
 80188e6:	71fb      	strb	r3, [r7, #7]
 80188e8:	e001      	b.n	80188ee <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80188ea:	2300      	movs	r3, #0
 80188ec:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80188ee:	1dfb      	adds	r3, r7, #7
 80188f0:	2201      	movs	r2, #1
 80188f2:	4619      	mov	r1, r3
 80188f4:	2096      	movs	r0, #150	; 0x96
 80188f6:	f000 fca1 	bl	801923c <SUBGRF_WriteCommand>
}
 80188fa:	bf00      	nop
 80188fc:	3708      	adds	r7, #8
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}

08018902 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018902:	b580      	push	{r7, lr}
 8018904:	b084      	sub	sp, #16
 8018906:	af00      	add	r7, sp, #0
 8018908:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801890a:	793b      	ldrb	r3, [r7, #4]
 801890c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018910:	b2db      	uxtb	r3, r3
 8018912:	019b      	lsls	r3, r3, #6
 8018914:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018916:	793b      	ldrb	r3, [r7, #4]
 8018918:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801891c:	b2db      	uxtb	r3, r3
 801891e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018920:	b25b      	sxtb	r3, r3
 8018922:	4313      	orrs	r3, r2
 8018924:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018926:	793b      	ldrb	r3, [r7, #4]
 8018928:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801892c:	b2db      	uxtb	r3, r3
 801892e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018930:	b25b      	sxtb	r3, r3
 8018932:	4313      	orrs	r3, r2
 8018934:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018936:	793b      	ldrb	r3, [r7, #4]
 8018938:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801893c:	b2db      	uxtb	r3, r3
 801893e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018940:	b25b      	sxtb	r3, r3
 8018942:	4313      	orrs	r3, r2
 8018944:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018946:	793b      	ldrb	r3, [r7, #4]
 8018948:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801894c:	b2db      	uxtb	r3, r3
 801894e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018950:	b25b      	sxtb	r3, r3
 8018952:	4313      	orrs	r3, r2
 8018954:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018956:	793b      	ldrb	r3, [r7, #4]
 8018958:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801895c:	b2db      	uxtb	r3, r3
 801895e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018960:	b25b      	sxtb	r3, r3
 8018962:	4313      	orrs	r3, r2
 8018964:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018966:	793b      	ldrb	r3, [r7, #4]
 8018968:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801896c:	b2db      	uxtb	r3, r3
 801896e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018970:	4313      	orrs	r3, r2
 8018972:	b25b      	sxtb	r3, r3
 8018974:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018976:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018978:	f107 030f 	add.w	r3, r7, #15
 801897c:	2201      	movs	r2, #1
 801897e:	4619      	mov	r1, r3
 8018980:	2089      	movs	r0, #137	; 0x89
 8018982:	f000 fc5b 	bl	801923c <SUBGRF_WriteCommand>
}
 8018986:	bf00      	nop
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
	...

08018990 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	4a1b      	ldr	r2, [pc, #108]	; (8018a08 <SUBGRF_CalibrateImage+0x78>)
 801899c:	4293      	cmp	r3, r2
 801899e:	d904      	bls.n	80189aa <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80189a0:	23e1      	movs	r3, #225	; 0xe1
 80189a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80189a4:	23e9      	movs	r3, #233	; 0xe9
 80189a6:	737b      	strb	r3, [r7, #13]
 80189a8:	e022      	b.n	80189f0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	4a17      	ldr	r2, [pc, #92]	; (8018a0c <SUBGRF_CalibrateImage+0x7c>)
 80189ae:	4293      	cmp	r3, r2
 80189b0:	d904      	bls.n	80189bc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80189b2:	23d7      	movs	r3, #215	; 0xd7
 80189b4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80189b6:	23db      	movs	r3, #219	; 0xdb
 80189b8:	737b      	strb	r3, [r7, #13]
 80189ba:	e019      	b.n	80189f0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	4a14      	ldr	r2, [pc, #80]	; (8018a10 <SUBGRF_CalibrateImage+0x80>)
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d904      	bls.n	80189ce <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80189c4:	23c1      	movs	r3, #193	; 0xc1
 80189c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80189c8:	23c5      	movs	r3, #197	; 0xc5
 80189ca:	737b      	strb	r3, [r7, #13]
 80189cc:	e010      	b.n	80189f0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	4a10      	ldr	r2, [pc, #64]	; (8018a14 <SUBGRF_CalibrateImage+0x84>)
 80189d2:	4293      	cmp	r3, r2
 80189d4:	d904      	bls.n	80189e0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80189d6:	2375      	movs	r3, #117	; 0x75
 80189d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80189da:	2381      	movs	r3, #129	; 0x81
 80189dc:	737b      	strb	r3, [r7, #13]
 80189de:	e007      	b.n	80189f0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	4a0d      	ldr	r2, [pc, #52]	; (8018a18 <SUBGRF_CalibrateImage+0x88>)
 80189e4:	4293      	cmp	r3, r2
 80189e6:	d903      	bls.n	80189f0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80189e8:	236b      	movs	r3, #107	; 0x6b
 80189ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80189ec:	236f      	movs	r3, #111	; 0x6f
 80189ee:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80189f0:	f107 030c 	add.w	r3, r7, #12
 80189f4:	2202      	movs	r2, #2
 80189f6:	4619      	mov	r1, r3
 80189f8:	2098      	movs	r0, #152	; 0x98
 80189fa:	f000 fc1f 	bl	801923c <SUBGRF_WriteCommand>
}
 80189fe:	bf00      	nop
 8018a00:	3710      	adds	r7, #16
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	35a4e900 	.word	0x35a4e900
 8018a0c:	32a9f880 	.word	0x32a9f880
 8018a10:	2de54480 	.word	0x2de54480
 8018a14:	1b6b0b00 	.word	0x1b6b0b00
 8018a18:	1954fc40 	.word	0x1954fc40

08018a1c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018a1c:	b590      	push	{r4, r7, lr}
 8018a1e:	b085      	sub	sp, #20
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	4604      	mov	r4, r0
 8018a24:	4608      	mov	r0, r1
 8018a26:	4611      	mov	r1, r2
 8018a28:	461a      	mov	r2, r3
 8018a2a:	4623      	mov	r3, r4
 8018a2c:	71fb      	strb	r3, [r7, #7]
 8018a2e:	4603      	mov	r3, r0
 8018a30:	71bb      	strb	r3, [r7, #6]
 8018a32:	460b      	mov	r3, r1
 8018a34:	717b      	strb	r3, [r7, #5]
 8018a36:	4613      	mov	r3, r2
 8018a38:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018a3a:	79fb      	ldrb	r3, [r7, #7]
 8018a3c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018a3e:	79bb      	ldrb	r3, [r7, #6]
 8018a40:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018a42:	797b      	ldrb	r3, [r7, #5]
 8018a44:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018a46:	793b      	ldrb	r3, [r7, #4]
 8018a48:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018a4a:	f107 030c 	add.w	r3, r7, #12
 8018a4e:	2204      	movs	r2, #4
 8018a50:	4619      	mov	r1, r3
 8018a52:	2095      	movs	r0, #149	; 0x95
 8018a54:	f000 fbf2 	bl	801923c <SUBGRF_WriteCommand>
}
 8018a58:	bf00      	nop
 8018a5a:	3714      	adds	r7, #20
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd90      	pop	{r4, r7, pc}

08018a60 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018a60:	b590      	push	{r4, r7, lr}
 8018a62:	b085      	sub	sp, #20
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	4604      	mov	r4, r0
 8018a68:	4608      	mov	r0, r1
 8018a6a:	4611      	mov	r1, r2
 8018a6c:	461a      	mov	r2, r3
 8018a6e:	4623      	mov	r3, r4
 8018a70:	80fb      	strh	r3, [r7, #6]
 8018a72:	4603      	mov	r3, r0
 8018a74:	80bb      	strh	r3, [r7, #4]
 8018a76:	460b      	mov	r3, r1
 8018a78:	807b      	strh	r3, [r7, #2]
 8018a7a:	4613      	mov	r3, r2
 8018a7c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018a7e:	88fb      	ldrh	r3, [r7, #6]
 8018a80:	0a1b      	lsrs	r3, r3, #8
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018a88:	88fb      	ldrh	r3, [r7, #6]
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018a8e:	88bb      	ldrh	r3, [r7, #4]
 8018a90:	0a1b      	lsrs	r3, r3, #8
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	b2db      	uxtb	r3, r3
 8018a96:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018a98:	88bb      	ldrh	r3, [r7, #4]
 8018a9a:	b2db      	uxtb	r3, r3
 8018a9c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018a9e:	887b      	ldrh	r3, [r7, #2]
 8018aa0:	0a1b      	lsrs	r3, r3, #8
 8018aa2:	b29b      	uxth	r3, r3
 8018aa4:	b2db      	uxtb	r3, r3
 8018aa6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018aa8:	887b      	ldrh	r3, [r7, #2]
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018aae:	883b      	ldrh	r3, [r7, #0]
 8018ab0:	0a1b      	lsrs	r3, r3, #8
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018ab8:	883b      	ldrh	r3, [r7, #0]
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018abe:	f107 0308 	add.w	r3, r7, #8
 8018ac2:	2208      	movs	r2, #8
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	2008      	movs	r0, #8
 8018ac8:	f000 fbb8 	bl	801923c <SUBGRF_WriteCommand>
}
 8018acc:	bf00      	nop
 8018ace:	3714      	adds	r7, #20
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd90      	pop	{r4, r7, pc}

08018ad4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b084      	sub	sp, #16
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	4603      	mov	r3, r0
 8018adc:	6039      	str	r1, [r7, #0]
 8018ade:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018ae0:	79fb      	ldrb	r3, [r7, #7]
 8018ae2:	f003 0307 	and.w	r3, r3, #7
 8018ae6:	b2db      	uxtb	r3, r3
 8018ae8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	0c1b      	lsrs	r3, r3, #16
 8018aee:	b2db      	uxtb	r3, r3
 8018af0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	0a1b      	lsrs	r3, r3, #8
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018b00:	f107 030c 	add.w	r3, r7, #12
 8018b04:	2204      	movs	r2, #4
 8018b06:	4619      	mov	r1, r3
 8018b08:	2097      	movs	r0, #151	; 0x97
 8018b0a:	f000 fb97 	bl	801923c <SUBGRF_WriteCommand>
}
 8018b0e:	bf00      	nop
 8018b10:	3710      	adds	r7, #16
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
	...

08018b18 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018b18:	b5b0      	push	{r4, r5, r7, lr}
 8018b1a:	b084      	sub	sp, #16
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018b20:	2300      	movs	r3, #0
 8018b22:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018b24:	4b1b      	ldr	r3, [pc, #108]	; (8018b94 <SUBGRF_SetRfFrequency+0x7c>)
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	f083 0301 	eor.w	r3, r3, #1
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d005      	beq.n	8018b3e <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f7ff ff2c 	bl	8018990 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018b38:	4b16      	ldr	r3, [pc, #88]	; (8018b94 <SUBGRF_SetRfFrequency+0x7c>)
 8018b3a:	2201      	movs	r2, #1
 8018b3c:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	461a      	mov	r2, r3
 8018b42:	f04f 0300 	mov.w	r3, #0
 8018b46:	09d5      	lsrs	r5, r2, #7
 8018b48:	0654      	lsls	r4, r2, #25
 8018b4a:	4a13      	ldr	r2, [pc, #76]	; (8018b98 <SUBGRF_SetRfFrequency+0x80>)
 8018b4c:	f04f 0300 	mov.w	r3, #0
 8018b50:	4620      	mov	r0, r4
 8018b52:	4629      	mov	r1, r5
 8018b54:	f7e8 f802 	bl	8000b5c <__aeabi_uldivmod>
 8018b58:	4602      	mov	r2, r0
 8018b5a:	460b      	mov	r3, r1
 8018b5c:	4613      	mov	r3, r2
 8018b5e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	0e1b      	lsrs	r3, r3, #24
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	0c1b      	lsrs	r3, r3, #16
 8018b6c:	b2db      	uxtb	r3, r3
 8018b6e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	0a1b      	lsrs	r3, r3, #8
 8018b74:	b2db      	uxtb	r3, r3
 8018b76:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018b7e:	f107 0308 	add.w	r3, r7, #8
 8018b82:	2204      	movs	r2, #4
 8018b84:	4619      	mov	r1, r3
 8018b86:	2086      	movs	r0, #134	; 0x86
 8018b88:	f000 fb58 	bl	801923c <SUBGRF_WriteCommand>
}
 8018b8c:	bf00      	nop
 8018b8e:	3710      	adds	r7, #16
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bdb0      	pop	{r4, r5, r7, pc}
 8018b94:	20000ee4 	.word	0x20000ee4
 8018b98:	01e84800 	.word	0x01e84800

08018b9c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018ba6:	79fa      	ldrb	r2, [r7, #7]
 8018ba8:	4b09      	ldr	r3, [pc, #36]	; (8018bd0 <SUBGRF_SetPacketType+0x34>)
 8018baa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018bac:	79fb      	ldrb	r3, [r7, #7]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d104      	bne.n	8018bbc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018bb2:	2100      	movs	r1, #0
 8018bb4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018bb8:	f000 fa90 	bl	80190dc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018bbc:	1dfb      	adds	r3, r7, #7
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	208a      	movs	r0, #138	; 0x8a
 8018bc4:	f000 fb3a 	bl	801923c <SUBGRF_WriteCommand>
}
 8018bc8:	bf00      	nop
 8018bca:	3708      	adds	r7, #8
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}
 8018bd0:	20000edd 	.word	0x20000edd

08018bd4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	af00      	add	r7, sp, #0
    return PacketType;
 8018bd8:	4b02      	ldr	r3, [pc, #8]	; (8018be4 <SUBGRF_GetPacketType+0x10>)
 8018bda:	781b      	ldrb	r3, [r3, #0]
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	46bd      	mov	sp, r7
 8018be0:	bc80      	pop	{r7}
 8018be2:	4770      	bx	lr
 8018be4:	20000edd 	.word	0x20000edd

08018be8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b084      	sub	sp, #16
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	4603      	mov	r3, r0
 8018bf0:	71fb      	strb	r3, [r7, #7]
 8018bf2:	460b      	mov	r3, r1
 8018bf4:	71bb      	strb	r3, [r7, #6]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018bfa:	79fb      	ldrb	r3, [r7, #7]
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d124      	bne.n	8018c4a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018c00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c04:	2b0f      	cmp	r3, #15
 8018c06:	d106      	bne.n	8018c16 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018c08:	2301      	movs	r3, #1
 8018c0a:	2201      	movs	r2, #1
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	2006      	movs	r0, #6
 8018c10:	f7ff ff04 	bl	8018a1c <SUBGRF_SetPaConfig>
 8018c14:	e005      	b.n	8018c22 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018c16:	2301      	movs	r3, #1
 8018c18:	2201      	movs	r2, #1
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	2004      	movs	r0, #4
 8018c1e:	f7ff fefd 	bl	8018a1c <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018c22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c26:	2b0d      	cmp	r3, #13
 8018c28:	dd02      	ble.n	8018c30 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018c2a:	230e      	movs	r3, #14
 8018c2c:	71bb      	strb	r3, [r7, #6]
 8018c2e:	e006      	b.n	8018c3e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018c30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c34:	f113 0f11 	cmn.w	r3, #17
 8018c38:	da01      	bge.n	8018c3e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018c3a:	23ef      	movs	r3, #239	; 0xef
 8018c3c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018c3e:	2118      	movs	r1, #24
 8018c40:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c44:	f000 fa4a 	bl	80190dc <SUBGRF_WriteRegister>
 8018c48:	e025      	b.n	8018c96 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018c4a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c4e:	f000 fa59 	bl	8019104 <SUBGRF_ReadRegister>
 8018c52:	4603      	mov	r3, r0
 8018c54:	f043 031e 	orr.w	r3, r3, #30
 8018c58:	b2db      	uxtb	r3, r3
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c60:	f000 fa3c 	bl	80190dc <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018c64:	2301      	movs	r3, #1
 8018c66:	2200      	movs	r2, #0
 8018c68:	2107      	movs	r1, #7
 8018c6a:	2004      	movs	r0, #4
 8018c6c:	f7ff fed6 	bl	8018a1c <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018c70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c74:	2b16      	cmp	r3, #22
 8018c76:	dd02      	ble.n	8018c7e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018c78:	2316      	movs	r3, #22
 8018c7a:	71bb      	strb	r3, [r7, #6]
 8018c7c:	e006      	b.n	8018c8c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018c7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c82:	f113 0f09 	cmn.w	r3, #9
 8018c86:	da01      	bge.n	8018c8c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018c88:	23f7      	movs	r3, #247	; 0xf7
 8018c8a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018c8c:	2138      	movs	r1, #56	; 0x38
 8018c8e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c92:	f000 fa23 	bl	80190dc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018c96:	79bb      	ldrb	r3, [r7, #6]
 8018c98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018c9a:	797b      	ldrb	r3, [r7, #5]
 8018c9c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018c9e:	f107 030c 	add.w	r3, r7, #12
 8018ca2:	2202      	movs	r2, #2
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	208e      	movs	r0, #142	; 0x8e
 8018ca8:	f000 fac8 	bl	801923c <SUBGRF_WriteCommand>
}
 8018cac:	bf00      	nop
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018cb4:	b5b0      	push	{r4, r5, r7, lr}
 8018cb6:	b086      	sub	sp, #24
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018cc0:	4a5e      	ldr	r2, [pc, #376]	; (8018e3c <SUBGRF_SetModulationParams+0x188>)
 8018cc2:	f107 0308 	add.w	r3, r7, #8
 8018cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cca:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	781a      	ldrb	r2, [r3, #0]
 8018cd2:	4b5b      	ldr	r3, [pc, #364]	; (8018e40 <SUBGRF_SetModulationParams+0x18c>)
 8018cd4:	781b      	ldrb	r3, [r3, #0]
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	d004      	beq.n	8018ce4 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f7ff ff5c 	bl	8018b9c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	781b      	ldrb	r3, [r3, #0]
 8018ce8:	2b03      	cmp	r3, #3
 8018cea:	f200 80a2 	bhi.w	8018e32 <SUBGRF_SetModulationParams+0x17e>
 8018cee:	a201      	add	r2, pc, #4	; (adr r2, 8018cf4 <SUBGRF_SetModulationParams+0x40>)
 8018cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cf4:	08018d05 	.word	0x08018d05
 8018cf8:	08018dc1 	.word	0x08018dc1
 8018cfc:	08018d83 	.word	0x08018d83
 8018d00:	08018def 	.word	0x08018def
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018d04:	2308      	movs	r3, #8
 8018d06:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	685b      	ldr	r3, [r3, #4]
 8018d0c:	4a4d      	ldr	r2, [pc, #308]	; (8018e44 <SUBGRF_SetModulationParams+0x190>)
 8018d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d12:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d14:	697b      	ldr	r3, [r7, #20]
 8018d16:	0c1b      	lsrs	r3, r3, #16
 8018d18:	b2db      	uxtb	r3, r3
 8018d1a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	0a1b      	lsrs	r3, r3, #8
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018d24:	697b      	ldr	r3, [r7, #20]
 8018d26:	b2db      	uxtb	r3, r3
 8018d28:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	7b1b      	ldrb	r3, [r3, #12]
 8018d2e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	7b5b      	ldrb	r3, [r3, #13]
 8018d34:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	689b      	ldr	r3, [r3, #8]
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	f04f 0300 	mov.w	r3, #0
 8018d40:	09d5      	lsrs	r5, r2, #7
 8018d42:	0654      	lsls	r4, r2, #25
 8018d44:	4a40      	ldr	r2, [pc, #256]	; (8018e48 <SUBGRF_SetModulationParams+0x194>)
 8018d46:	f04f 0300 	mov.w	r3, #0
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	4629      	mov	r1, r5
 8018d4e:	f7e7 ff05 	bl	8000b5c <__aeabi_uldivmod>
 8018d52:	4602      	mov	r2, r0
 8018d54:	460b      	mov	r3, r1
 8018d56:	4613      	mov	r3, r2
 8018d58:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018d5a:	697b      	ldr	r3, [r7, #20]
 8018d5c:	0c1b      	lsrs	r3, r3, #16
 8018d5e:	b2db      	uxtb	r3, r3
 8018d60:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	0a1b      	lsrs	r3, r3, #8
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018d6a:	697b      	ldr	r3, [r7, #20]
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d70:	7cfb      	ldrb	r3, [r7, #19]
 8018d72:	b29a      	uxth	r2, r3
 8018d74:	f107 0308 	add.w	r3, r7, #8
 8018d78:	4619      	mov	r1, r3
 8018d7a:	208b      	movs	r0, #139	; 0x8b
 8018d7c:	f000 fa5e 	bl	801923c <SUBGRF_WriteCommand>
        break;
 8018d80:	e058      	b.n	8018e34 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018d82:	2304      	movs	r3, #4
 8018d84:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	691b      	ldr	r3, [r3, #16]
 8018d8a:	4a2e      	ldr	r2, [pc, #184]	; (8018e44 <SUBGRF_SetModulationParams+0x190>)
 8018d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d90:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d92:	697b      	ldr	r3, [r7, #20]
 8018d94:	0c1b      	lsrs	r3, r3, #16
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	0a1b      	lsrs	r3, r3, #8
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	b2db      	uxtb	r3, r3
 8018da6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	7d1b      	ldrb	r3, [r3, #20]
 8018dac:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018dae:	7cfb      	ldrb	r3, [r7, #19]
 8018db0:	b29a      	uxth	r2, r3
 8018db2:	f107 0308 	add.w	r3, r7, #8
 8018db6:	4619      	mov	r1, r3
 8018db8:	208b      	movs	r0, #139	; 0x8b
 8018dba:	f000 fa3f 	bl	801923c <SUBGRF_WriteCommand>
        break;
 8018dbe:	e039      	b.n	8018e34 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018dc0:	2304      	movs	r3, #4
 8018dc2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	7e1b      	ldrb	r3, [r3, #24]
 8018dc8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	7e5b      	ldrb	r3, [r3, #25]
 8018dce:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	7e9b      	ldrb	r3, [r3, #26]
 8018dd4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	7edb      	ldrb	r3, [r3, #27]
 8018dda:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ddc:	7cfb      	ldrb	r3, [r7, #19]
 8018dde:	b29a      	uxth	r2, r3
 8018de0:	f107 0308 	add.w	r3, r7, #8
 8018de4:	4619      	mov	r1, r3
 8018de6:	208b      	movs	r0, #139	; 0x8b
 8018de8:	f000 fa28 	bl	801923c <SUBGRF_WriteCommand>

        break;
 8018dec:	e022      	b.n	8018e34 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018dee:	2305      	movs	r3, #5
 8018df0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	685b      	ldr	r3, [r3, #4]
 8018df6:	4a13      	ldr	r2, [pc, #76]	; (8018e44 <SUBGRF_SetModulationParams+0x190>)
 8018df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dfc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018dfe:	697b      	ldr	r3, [r7, #20]
 8018e00:	0c1b      	lsrs	r3, r3, #16
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018e06:	697b      	ldr	r3, [r7, #20]
 8018e08:	0a1b      	lsrs	r3, r3, #8
 8018e0a:	b2db      	uxtb	r3, r3
 8018e0c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018e0e:	697b      	ldr	r3, [r7, #20]
 8018e10:	b2db      	uxtb	r3, r3
 8018e12:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	7b1b      	ldrb	r3, [r3, #12]
 8018e18:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	7b5b      	ldrb	r3, [r3, #13]
 8018e1e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018e20:	7cfb      	ldrb	r3, [r7, #19]
 8018e22:	b29a      	uxth	r2, r3
 8018e24:	f107 0308 	add.w	r3, r7, #8
 8018e28:	4619      	mov	r1, r3
 8018e2a:	208b      	movs	r0, #139	; 0x8b
 8018e2c:	f000 fa06 	bl	801923c <SUBGRF_WriteCommand>
        break;
 8018e30:	e000      	b.n	8018e34 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018e32:	bf00      	nop
    }
}
 8018e34:	bf00      	nop
 8018e36:	3718      	adds	r7, #24
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8018e3c:	0801b564 	.word	0x0801b564
 8018e40:	20000edd 	.word	0x20000edd
 8018e44:	3d090000 	.word	0x3d090000
 8018e48:	01e84800 	.word	0x01e84800

08018e4c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b086      	sub	sp, #24
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018e54:	2300      	movs	r3, #0
 8018e56:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018e58:	4a48      	ldr	r2, [pc, #288]	; (8018f7c <SUBGRF_SetPacketParams+0x130>)
 8018e5a:	f107 030c 	add.w	r3, r7, #12
 8018e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e60:	c303      	stmia	r3!, {r0, r1}
 8018e62:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	781a      	ldrb	r2, [r3, #0]
 8018e68:	4b45      	ldr	r3, [pc, #276]	; (8018f80 <SUBGRF_SetPacketParams+0x134>)
 8018e6a:	781b      	ldrb	r3, [r3, #0]
 8018e6c:	429a      	cmp	r2, r3
 8018e6e:	d004      	beq.n	8018e7a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	4618      	mov	r0, r3
 8018e76:	f7ff fe91 	bl	8018b9c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	781b      	ldrb	r3, [r3, #0]
 8018e7e:	2b03      	cmp	r3, #3
 8018e80:	d878      	bhi.n	8018f74 <SUBGRF_SetPacketParams+0x128>
 8018e82:	a201      	add	r2, pc, #4	; (adr r2, 8018e88 <SUBGRF_SetPacketParams+0x3c>)
 8018e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e88:	08018e99 	.word	0x08018e99
 8018e8c:	08018f29 	.word	0x08018f29
 8018e90:	08018f1d 	.word	0x08018f1d
 8018e94:	08018e99 	.word	0x08018e99
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	7a5b      	ldrb	r3, [r3, #9]
 8018e9c:	2bf1      	cmp	r3, #241	; 0xf1
 8018e9e:	d10a      	bne.n	8018eb6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018ea0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ea4:	f7ff fb20 	bl	80184e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018ea8:	f248 0005 	movw	r0, #32773	; 0x8005
 8018eac:	f7ff fb3c 	bl	8018528 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018eb0:	2302      	movs	r3, #2
 8018eb2:	75bb      	strb	r3, [r7, #22]
 8018eb4:	e011      	b.n	8018eda <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	7a5b      	ldrb	r3, [r3, #9]
 8018eba:	2bf2      	cmp	r3, #242	; 0xf2
 8018ebc:	d10a      	bne.n	8018ed4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018ebe:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018ec2:	f7ff fb11 	bl	80184e8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018ec6:	f241 0021 	movw	r0, #4129	; 0x1021
 8018eca:	f7ff fb2d 	bl	8018528 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018ece:	2306      	movs	r3, #6
 8018ed0:	75bb      	strb	r3, [r7, #22]
 8018ed2:	e002      	b.n	8018eda <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	7a5b      	ldrb	r3, [r3, #9]
 8018ed8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018eda:	2309      	movs	r3, #9
 8018edc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	885b      	ldrh	r3, [r3, #2]
 8018ee2:	0a1b      	lsrs	r3, r3, #8
 8018ee4:	b29b      	uxth	r3, r3
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	885b      	ldrh	r3, [r3, #2]
 8018eee:	b2db      	uxtb	r3, r3
 8018ef0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	791b      	ldrb	r3, [r3, #4]
 8018ef6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	795b      	ldrb	r3, [r3, #5]
 8018efc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	799b      	ldrb	r3, [r3, #6]
 8018f02:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	79db      	ldrb	r3, [r3, #7]
 8018f08:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	7a1b      	ldrb	r3, [r3, #8]
 8018f0e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018f10:	7dbb      	ldrb	r3, [r7, #22]
 8018f12:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	7a9b      	ldrb	r3, [r3, #10]
 8018f18:	753b      	strb	r3, [r7, #20]
        break;
 8018f1a:	e022      	b.n	8018f62 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	7b1b      	ldrb	r3, [r3, #12]
 8018f24:	733b      	strb	r3, [r7, #12]
        break;
 8018f26:	e01c      	b.n	8018f62 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018f28:	2306      	movs	r3, #6
 8018f2a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	89db      	ldrh	r3, [r3, #14]
 8018f30:	0a1b      	lsrs	r3, r3, #8
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	b2db      	uxtb	r3, r3
 8018f36:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	89db      	ldrh	r3, [r3, #14]
 8018f3c:	b2db      	uxtb	r3, r3
 8018f3e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	7c1a      	ldrb	r2, [r3, #16]
 8018f44:	4b0f      	ldr	r3, [pc, #60]	; (8018f84 <SUBGRF_SetPacketParams+0x138>)
 8018f46:	4611      	mov	r1, r2
 8018f48:	7019      	strb	r1, [r3, #0]
 8018f4a:	4613      	mov	r3, r2
 8018f4c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	7c5b      	ldrb	r3, [r3, #17]
 8018f52:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	7c9b      	ldrb	r3, [r3, #18]
 8018f58:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	7cdb      	ldrb	r3, [r3, #19]
 8018f5e:	747b      	strb	r3, [r7, #17]
        break;
 8018f60:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018f62:	7dfb      	ldrb	r3, [r7, #23]
 8018f64:	b29a      	uxth	r2, r3
 8018f66:	f107 030c 	add.w	r3, r7, #12
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	208c      	movs	r0, #140	; 0x8c
 8018f6e:	f000 f965 	bl	801923c <SUBGRF_WriteCommand>
 8018f72:	e000      	b.n	8018f76 <SUBGRF_SetPacketParams+0x12a>
        return;
 8018f74:	bf00      	nop
}
 8018f76:	3718      	adds	r7, #24
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	0801b56c 	.word	0x0801b56c
 8018f80:	20000edd 	.word	0x20000edd
 8018f84:	20000ede 	.word	0x20000ede

08018f88 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b084      	sub	sp, #16
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	4603      	mov	r3, r0
 8018f90:	460a      	mov	r2, r1
 8018f92:	71fb      	strb	r3, [r7, #7]
 8018f94:	4613      	mov	r3, r2
 8018f96:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018f98:	79fb      	ldrb	r3, [r7, #7]
 8018f9a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018f9c:	79bb      	ldrb	r3, [r7, #6]
 8018f9e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018fa0:	f107 030c 	add.w	r3, r7, #12
 8018fa4:	2202      	movs	r2, #2
 8018fa6:	4619      	mov	r1, r3
 8018fa8:	208f      	movs	r0, #143	; 0x8f
 8018faa:	f000 f947 	bl	801923c <SUBGRF_WriteCommand>
}
 8018fae:	bf00      	nop
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}

08018fb6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018fb6:	b580      	push	{r7, lr}
 8018fb8:	b082      	sub	sp, #8
 8018fba:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018fc0:	1d3b      	adds	r3, r7, #4
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	2015      	movs	r0, #21
 8018fc8:	f000 f95a 	bl	8019280 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018fcc:	793b      	ldrb	r3, [r7, #4]
 8018fce:	425b      	negs	r3, r3
 8018fd0:	105b      	asrs	r3, r3, #1
 8018fd2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018fd8:	4618      	mov	r0, r3
 8018fda:	3708      	adds	r7, #8
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018fea:	f107 030c 	add.w	r3, r7, #12
 8018fee:	2202      	movs	r2, #2
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	2013      	movs	r0, #19
 8018ff4:	f000 f944 	bl	8019280 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018ff8:	f7ff fdec 	bl	8018bd4 <SUBGRF_GetPacketType>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	d10d      	bne.n	801901e <SUBGRF_GetRxBufferStatus+0x3e>
 8019002:	4b0c      	ldr	r3, [pc, #48]	; (8019034 <SUBGRF_GetRxBufferStatus+0x54>)
 8019004:	781b      	ldrb	r3, [r3, #0]
 8019006:	b2db      	uxtb	r3, r3
 8019008:	2b01      	cmp	r3, #1
 801900a:	d108      	bne.n	801901e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801900c:	f240 7002 	movw	r0, #1794	; 0x702
 8019010:	f000 f878 	bl	8019104 <SUBGRF_ReadRegister>
 8019014:	4603      	mov	r3, r0
 8019016:	461a      	mov	r2, r3
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	701a      	strb	r2, [r3, #0]
 801901c:	e002      	b.n	8019024 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801901e:	7b3a      	ldrb	r2, [r7, #12]
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019024:	7b7a      	ldrb	r2, [r7, #13]
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	701a      	strb	r2, [r3, #0]
}
 801902a:	bf00      	nop
 801902c:	3710      	adds	r7, #16
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}
 8019032:	bf00      	nop
 8019034:	20000ede 	.word	0x20000ede

08019038 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019038:	b580      	push	{r7, lr}
 801903a:	b084      	sub	sp, #16
 801903c:	af00      	add	r7, sp, #0
 801903e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019040:	f107 030c 	add.w	r3, r7, #12
 8019044:	2203      	movs	r2, #3
 8019046:	4619      	mov	r1, r3
 8019048:	2014      	movs	r0, #20
 801904a:	f000 f919 	bl	8019280 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801904e:	f7ff fdc1 	bl	8018bd4 <SUBGRF_GetPacketType>
 8019052:	4603      	mov	r3, r0
 8019054:	461a      	mov	r2, r3
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	781b      	ldrb	r3, [r3, #0]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d002      	beq.n	8019068 <SUBGRF_GetPacketStatus+0x30>
 8019062:	2b01      	cmp	r3, #1
 8019064:	d013      	beq.n	801908e <SUBGRF_GetPacketStatus+0x56>
 8019066:	e02a      	b.n	80190be <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019068:	7b3a      	ldrb	r2, [r7, #12]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801906e:	7b7b      	ldrb	r3, [r7, #13]
 8019070:	425b      	negs	r3, r3
 8019072:	105b      	asrs	r3, r3, #1
 8019074:	b25a      	sxtb	r2, r3
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801907a:	7bbb      	ldrb	r3, [r7, #14]
 801907c:	425b      	negs	r3, r3
 801907e:	105b      	asrs	r3, r3, #1
 8019080:	b25a      	sxtb	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2200      	movs	r2, #0
 801908a:	609a      	str	r2, [r3, #8]
            break;
 801908c:	e020      	b.n	80190d0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801908e:	7b3b      	ldrb	r3, [r7, #12]
 8019090:	425b      	negs	r3, r3
 8019092:	105b      	asrs	r3, r3, #1
 8019094:	b25a      	sxtb	r2, r3
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801909a:	7b7b      	ldrb	r3, [r7, #13]
 801909c:	b25b      	sxtb	r3, r3
 801909e:	3302      	adds	r3, #2
 80190a0:	109b      	asrs	r3, r3, #2
 80190a2:	b25a      	sxtb	r2, r3
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80190a8:	7bbb      	ldrb	r3, [r7, #14]
 80190aa:	425b      	negs	r3, r3
 80190ac:	105b      	asrs	r3, r3, #1
 80190ae:	b25a      	sxtb	r2, r3
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80190b4:	4b08      	ldr	r3, [pc, #32]	; (80190d8 <SUBGRF_GetPacketStatus+0xa0>)
 80190b6:	681a      	ldr	r2, [r3, #0]
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	611a      	str	r2, [r3, #16]
            break;
 80190bc:	e008      	b.n	80190d0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80190be:	2214      	movs	r2, #20
 80190c0:	2100      	movs	r1, #0
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f000 fbbf 	bl	8019846 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	220f      	movs	r2, #15
 80190cc:	701a      	strb	r2, [r3, #0]
            break;
 80190ce:	bf00      	nop
    }
}
 80190d0:	bf00      	nop
 80190d2:	3710      	adds	r7, #16
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	20000ee0 	.word	0x20000ee0

080190dc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b082      	sub	sp, #8
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	4603      	mov	r3, r0
 80190e4:	460a      	mov	r2, r1
 80190e6:	80fb      	strh	r3, [r7, #6]
 80190e8:	4613      	mov	r3, r2
 80190ea:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80190ec:	1d7a      	adds	r2, r7, #5
 80190ee:	88f9      	ldrh	r1, [r7, #6]
 80190f0:	2301      	movs	r3, #1
 80190f2:	4803      	ldr	r0, [pc, #12]	; (8019100 <SUBGRF_WriteRegister+0x24>)
 80190f4:	f7ee fb8c 	bl	8007810 <HAL_SUBGHZ_WriteRegisters>
}
 80190f8:	bf00      	nop
 80190fa:	3708      	adds	r7, #8
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}
 8019100:	2000168c 	.word	0x2000168c

08019104 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b084      	sub	sp, #16
 8019108:	af00      	add	r7, sp, #0
 801910a:	4603      	mov	r3, r0
 801910c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801910e:	f107 020f 	add.w	r2, r7, #15
 8019112:	88f9      	ldrh	r1, [r7, #6]
 8019114:	2301      	movs	r3, #1
 8019116:	4804      	ldr	r0, [pc, #16]	; (8019128 <SUBGRF_ReadRegister+0x24>)
 8019118:	f7ee fbd9 	bl	80078ce <HAL_SUBGHZ_ReadRegisters>
    return data;
 801911c:	7bfb      	ldrb	r3, [r7, #15]
}
 801911e:	4618      	mov	r0, r3
 8019120:	3710      	adds	r7, #16
 8019122:	46bd      	mov	sp, r7
 8019124:	bd80      	pop	{r7, pc}
 8019126:	bf00      	nop
 8019128:	2000168c 	.word	0x2000168c

0801912c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b086      	sub	sp, #24
 8019130:	af00      	add	r7, sp, #0
 8019132:	4603      	mov	r3, r0
 8019134:	6039      	str	r1, [r7, #0]
 8019136:	80fb      	strh	r3, [r7, #6]
 8019138:	4613      	mov	r3, r2
 801913a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801913c:	f3ef 8310 	mrs	r3, PRIMASK
 8019140:	60fb      	str	r3, [r7, #12]
  return(result);
 8019142:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019146:	b672      	cpsid	i
}
 8019148:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801914a:	88bb      	ldrh	r3, [r7, #4]
 801914c:	88f9      	ldrh	r1, [r7, #6]
 801914e:	683a      	ldr	r2, [r7, #0]
 8019150:	4806      	ldr	r0, [pc, #24]	; (801916c <SUBGRF_WriteRegisters+0x40>)
 8019152:	f7ee fb5d 	bl	8007810 <HAL_SUBGHZ_WriteRegisters>
 8019156:	697b      	ldr	r3, [r7, #20]
 8019158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801915a:	693b      	ldr	r3, [r7, #16]
 801915c:	f383 8810 	msr	PRIMASK, r3
}
 8019160:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019162:	bf00      	nop
 8019164:	3718      	adds	r7, #24
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	2000168c 	.word	0x2000168c

08019170 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b086      	sub	sp, #24
 8019174:	af00      	add	r7, sp, #0
 8019176:	4603      	mov	r3, r0
 8019178:	6039      	str	r1, [r7, #0]
 801917a:	80fb      	strh	r3, [r7, #6]
 801917c:	4613      	mov	r3, r2
 801917e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019180:	f3ef 8310 	mrs	r3, PRIMASK
 8019184:	60fb      	str	r3, [r7, #12]
  return(result);
 8019186:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019188:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801918a:	b672      	cpsid	i
}
 801918c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801918e:	88bb      	ldrh	r3, [r7, #4]
 8019190:	88f9      	ldrh	r1, [r7, #6]
 8019192:	683a      	ldr	r2, [r7, #0]
 8019194:	4806      	ldr	r0, [pc, #24]	; (80191b0 <SUBGRF_ReadRegisters+0x40>)
 8019196:	f7ee fb9a 	bl	80078ce <HAL_SUBGHZ_ReadRegisters>
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801919e:	693b      	ldr	r3, [r7, #16]
 80191a0:	f383 8810 	msr	PRIMASK, r3
}
 80191a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191a6:	bf00      	nop
 80191a8:	3718      	adds	r7, #24
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	2000168c 	.word	0x2000168c

080191b4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b086      	sub	sp, #24
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	4603      	mov	r3, r0
 80191bc:	6039      	str	r1, [r7, #0]
 80191be:	71fb      	strb	r3, [r7, #7]
 80191c0:	4613      	mov	r3, r2
 80191c2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191c4:	f3ef 8310 	mrs	r3, PRIMASK
 80191c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80191ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191ce:	b672      	cpsid	i
}
 80191d0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80191d2:	79bb      	ldrb	r3, [r7, #6]
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	79f9      	ldrb	r1, [r7, #7]
 80191d8:	683a      	ldr	r2, [r7, #0]
 80191da:	4806      	ldr	r0, [pc, #24]	; (80191f4 <SUBGRF_WriteBuffer+0x40>)
 80191dc:	f7ee fc8b 	bl	8007af6 <HAL_SUBGHZ_WriteBuffer>
 80191e0:	697b      	ldr	r3, [r7, #20]
 80191e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191e4:	693b      	ldr	r3, [r7, #16]
 80191e6:	f383 8810 	msr	PRIMASK, r3
}
 80191ea:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191ec:	bf00      	nop
 80191ee:	3718      	adds	r7, #24
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	2000168c 	.word	0x2000168c

080191f8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b086      	sub	sp, #24
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	4603      	mov	r3, r0
 8019200:	6039      	str	r1, [r7, #0]
 8019202:	71fb      	strb	r3, [r7, #7]
 8019204:	4613      	mov	r3, r2
 8019206:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019208:	f3ef 8310 	mrs	r3, PRIMASK
 801920c:	60fb      	str	r3, [r7, #12]
  return(result);
 801920e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019212:	b672      	cpsid	i
}
 8019214:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019216:	79bb      	ldrb	r3, [r7, #6]
 8019218:	b29b      	uxth	r3, r3
 801921a:	79f9      	ldrb	r1, [r7, #7]
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	4806      	ldr	r0, [pc, #24]	; (8019238 <SUBGRF_ReadBuffer+0x40>)
 8019220:	f7ee fcbc 	bl	8007b9c <HAL_SUBGHZ_ReadBuffer>
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019228:	693b      	ldr	r3, [r7, #16]
 801922a:	f383 8810 	msr	PRIMASK, r3
}
 801922e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019230:	bf00      	nop
 8019232:	3718      	adds	r7, #24
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	2000168c 	.word	0x2000168c

0801923c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b086      	sub	sp, #24
 8019240:	af00      	add	r7, sp, #0
 8019242:	4603      	mov	r3, r0
 8019244:	6039      	str	r1, [r7, #0]
 8019246:	71fb      	strb	r3, [r7, #7]
 8019248:	4613      	mov	r3, r2
 801924a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801924c:	f3ef 8310 	mrs	r3, PRIMASK
 8019250:	60fb      	str	r3, [r7, #12]
  return(result);
 8019252:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019256:	b672      	cpsid	i
}
 8019258:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801925a:	88bb      	ldrh	r3, [r7, #4]
 801925c:	79f9      	ldrb	r1, [r7, #7]
 801925e:	683a      	ldr	r2, [r7, #0]
 8019260:	4806      	ldr	r0, [pc, #24]	; (801927c <SUBGRF_WriteCommand+0x40>)
 8019262:	f7ee fb95 	bl	8007990 <HAL_SUBGHZ_ExecSetCmd>
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	f383 8810 	msr	PRIMASK, r3
}
 8019270:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019272:	bf00      	nop
 8019274:	3718      	adds	r7, #24
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}
 801927a:	bf00      	nop
 801927c:	2000168c 	.word	0x2000168c

08019280 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019280:	b580      	push	{r7, lr}
 8019282:	b086      	sub	sp, #24
 8019284:	af00      	add	r7, sp, #0
 8019286:	4603      	mov	r3, r0
 8019288:	6039      	str	r1, [r7, #0]
 801928a:	71fb      	strb	r3, [r7, #7]
 801928c:	4613      	mov	r3, r2
 801928e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019290:	f3ef 8310 	mrs	r3, PRIMASK
 8019294:	60fb      	str	r3, [r7, #12]
  return(result);
 8019296:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801929a:	b672      	cpsid	i
}
 801929c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801929e:	88bb      	ldrh	r3, [r7, #4]
 80192a0:	79f9      	ldrb	r1, [r7, #7]
 80192a2:	683a      	ldr	r2, [r7, #0]
 80192a4:	4806      	ldr	r0, [pc, #24]	; (80192c0 <SUBGRF_ReadCommand+0x40>)
 80192a6:	f7ee fbd2 	bl	8007a4e <HAL_SUBGHZ_ExecGetCmd>
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192ae:	693b      	ldr	r3, [r7, #16]
 80192b0:	f383 8810 	msr	PRIMASK, r3
}
 80192b4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192b6:	bf00      	nop
 80192b8:	3718      	adds	r7, #24
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	2000168c 	.word	0x2000168c

080192c4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b084      	sub	sp, #16
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	4603      	mov	r3, r0
 80192cc:	460a      	mov	r2, r1
 80192ce:	71fb      	strb	r3, [r7, #7]
 80192d0:	4613      	mov	r3, r2
 80192d2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80192d4:	2301      	movs	r3, #1
 80192d6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80192d8:	79bb      	ldrb	r3, [r7, #6]
 80192da:	2b01      	cmp	r3, #1
 80192dc:	d10d      	bne.n	80192fa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80192de:	79fb      	ldrb	r3, [r7, #7]
 80192e0:	2b01      	cmp	r3, #1
 80192e2:	d104      	bne.n	80192ee <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80192e4:	2302      	movs	r3, #2
 80192e6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80192e8:	2004      	movs	r0, #4
 80192ea:	f000 f8df 	bl	80194ac <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80192ee:	79fb      	ldrb	r3, [r7, #7]
 80192f0:	2b02      	cmp	r3, #2
 80192f2:	d107      	bne.n	8019304 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80192f4:	2303      	movs	r3, #3
 80192f6:	73fb      	strb	r3, [r7, #15]
 80192f8:	e004      	b.n	8019304 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80192fa:	79bb      	ldrb	r3, [r7, #6]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d101      	bne.n	8019304 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019300:	2301      	movs	r3, #1
 8019302:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019304:	7bfb      	ldrb	r3, [r7, #15]
 8019306:	4618      	mov	r0, r3
 8019308:	f7f1 fb61 	bl	800a9ce <RBI_ConfigRFSwitch>
}
 801930c:	bf00      	nop
 801930e:	3710      	adds	r7, #16
 8019310:	46bd      	mov	sp, r7
 8019312:	bd80      	pop	{r7, pc}

08019314 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b084      	sub	sp, #16
 8019318:	af00      	add	r7, sp, #0
 801931a:	4603      	mov	r3, r0
 801931c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801931e:	2301      	movs	r3, #1
 8019320:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019322:	f7f1 fb62 	bl	800a9ea <RBI_GetTxConfig>
 8019326:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	2b02      	cmp	r3, #2
 801932c:	d016      	beq.n	801935c <SUBGRF_SetRfTxPower+0x48>
 801932e:	68bb      	ldr	r3, [r7, #8]
 8019330:	2b02      	cmp	r3, #2
 8019332:	dc16      	bgt.n	8019362 <SUBGRF_SetRfTxPower+0x4e>
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d003      	beq.n	8019342 <SUBGRF_SetRfTxPower+0x2e>
 801933a:	68bb      	ldr	r3, [r7, #8]
 801933c:	2b01      	cmp	r3, #1
 801933e:	d00a      	beq.n	8019356 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019340:	e00f      	b.n	8019362 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019346:	2b0f      	cmp	r3, #15
 8019348:	dd02      	ble.n	8019350 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801934a:	2302      	movs	r3, #2
 801934c:	73fb      	strb	r3, [r7, #15]
            break;
 801934e:	e009      	b.n	8019364 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019350:	2301      	movs	r3, #1
 8019352:	73fb      	strb	r3, [r7, #15]
            break;
 8019354:	e006      	b.n	8019364 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019356:	2301      	movs	r3, #1
 8019358:	73fb      	strb	r3, [r7, #15]
            break;
 801935a:	e003      	b.n	8019364 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801935c:	2302      	movs	r3, #2
 801935e:	73fb      	strb	r3, [r7, #15]
            break;
 8019360:	e000      	b.n	8019364 <SUBGRF_SetRfTxPower+0x50>
            break;
 8019362:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019364:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019368:	7bfb      	ldrb	r3, [r7, #15]
 801936a:	2202      	movs	r2, #2
 801936c:	4618      	mov	r0, r3
 801936e:	f7ff fc3b 	bl	8018be8 <SUBGRF_SetTxParams>

    return paSelect;
 8019372:	7bfb      	ldrb	r3, [r7, #15]
}
 8019374:	4618      	mov	r0, r3
 8019376:	3710      	adds	r7, #16
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}

0801937c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801937c:	b480      	push	{r7}
 801937e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019380:	2301      	movs	r3, #1
}
 8019382:	4618      	mov	r0, r3
 8019384:	46bd      	mov	sp, r7
 8019386:	bc80      	pop	{r7}
 8019388:	4770      	bx	lr
	...

0801938c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b082      	sub	sp, #8
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019394:	4b03      	ldr	r3, [pc, #12]	; (80193a4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	2001      	movs	r0, #1
 801939a:	4798      	blx	r3
}
 801939c:	bf00      	nop
 801939e:	3708      	adds	r7, #8
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bd80      	pop	{r7, pc}
 80193a4:	20000ee8 	.word	0x20000ee8

080193a8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80193b0:	4b03      	ldr	r3, [pc, #12]	; (80193c0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	2002      	movs	r0, #2
 80193b6:	4798      	blx	r3
}
 80193b8:	bf00      	nop
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	20000ee8 	.word	0x20000ee8

080193c4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80193cc:	4b03      	ldr	r3, [pc, #12]	; (80193dc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2040      	movs	r0, #64	; 0x40
 80193d2:	4798      	blx	r3
}
 80193d4:	bf00      	nop
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}
 80193dc:	20000ee8 	.word	0x20000ee8

080193e0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b082      	sub	sp, #8
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
 80193e8:	460b      	mov	r3, r1
 80193ea:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80193ec:	78fb      	ldrb	r3, [r7, #3]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d002      	beq.n	80193f8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d005      	beq.n	8019402 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80193f6:	e00a      	b.n	801940e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80193f8:	4b07      	ldr	r3, [pc, #28]	; (8019418 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	2080      	movs	r0, #128	; 0x80
 80193fe:	4798      	blx	r3
            break;
 8019400:	e005      	b.n	801940e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019402:	4b05      	ldr	r3, [pc, #20]	; (8019418 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	f44f 7080 	mov.w	r0, #256	; 0x100
 801940a:	4798      	blx	r3
            break;
 801940c:	bf00      	nop
    }
}
 801940e:	bf00      	nop
 8019410:	3708      	adds	r7, #8
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	20000ee8 	.word	0x20000ee8

0801941c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b082      	sub	sp, #8
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019424:	4b04      	ldr	r3, [pc, #16]	; (8019438 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	f44f 7000 	mov.w	r0, #512	; 0x200
 801942c:	4798      	blx	r3
}
 801942e:	bf00      	nop
 8019430:	3708      	adds	r7, #8
 8019432:	46bd      	mov	sp, r7
 8019434:	bd80      	pop	{r7, pc}
 8019436:	bf00      	nop
 8019438:	20000ee8 	.word	0x20000ee8

0801943c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b082      	sub	sp, #8
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019444:	4b03      	ldr	r3, [pc, #12]	; (8019454 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	2020      	movs	r0, #32
 801944a:	4798      	blx	r3
}
 801944c:	bf00      	nop
 801944e:	3708      	adds	r7, #8
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	20000ee8 	.word	0x20000ee8

08019458 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019460:	4b03      	ldr	r3, [pc, #12]	; (8019470 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	2004      	movs	r0, #4
 8019466:	4798      	blx	r3
}
 8019468:	bf00      	nop
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}
 8019470:	20000ee8 	.word	0x20000ee8

08019474 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b082      	sub	sp, #8
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801947c:	4b03      	ldr	r3, [pc, #12]	; (801948c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2008      	movs	r0, #8
 8019482:	4798      	blx	r3
}
 8019484:	bf00      	nop
 8019486:	3708      	adds	r7, #8
 8019488:	46bd      	mov	sp, r7
 801948a:	bd80      	pop	{r7, pc}
 801948c:	20000ee8 	.word	0x20000ee8

08019490 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019498:	4b03      	ldr	r3, [pc, #12]	; (80194a8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2010      	movs	r0, #16
 801949e:	4798      	blx	r3
}
 80194a0:	bf00      	nop
 80194a2:	3708      	adds	r7, #8
 80194a4:	46bd      	mov	sp, r7
 80194a6:	bd80      	pop	{r7, pc}
 80194a8:	20000ee8 	.word	0x20000ee8

080194ac <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b084      	sub	sp, #16
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4603      	mov	r3, r0
 80194b4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80194b6:	f7f1 faa6 	bl	800aa06 <RBI_IsDCDC>
 80194ba:	4603      	mov	r3, r0
 80194bc:	2b01      	cmp	r3, #1
 80194be:	d112      	bne.n	80194e6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80194c0:	f640 1023 	movw	r0, #2339	; 0x923
 80194c4:	f7ff fe1e 	bl	8019104 <SUBGRF_ReadRegister>
 80194c8:	4603      	mov	r3, r0
 80194ca:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80194cc:	7bfb      	ldrb	r3, [r7, #15]
 80194ce:	f023 0306 	bic.w	r3, r3, #6
 80194d2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80194d4:	7bfa      	ldrb	r2, [r7, #15]
 80194d6:	79fb      	ldrb	r3, [r7, #7]
 80194d8:	4313      	orrs	r3, r2
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	4619      	mov	r1, r3
 80194de:	f640 1023 	movw	r0, #2339	; 0x923
 80194e2:	f7ff fdfb 	bl	80190dc <SUBGRF_WriteRegister>
  }
}
 80194e6:	bf00      	nop
 80194e8:	3710      	adds	r7, #16
 80194ea:	46bd      	mov	sp, r7
 80194ec:	bd80      	pop	{r7, pc}
	...

080194f0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80194f0:	b480      	push	{r7}
 80194f2:	b085      	sub	sp, #20
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d101      	bne.n	8019502 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80194fe:	231f      	movs	r3, #31
 8019500:	e016      	b.n	8019530 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019502:	2300      	movs	r3, #0
 8019504:	73fb      	strb	r3, [r7, #15]
 8019506:	e00f      	b.n	8019528 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019508:	7bfb      	ldrb	r3, [r7, #15]
 801950a:	4a0c      	ldr	r2, [pc, #48]	; (801953c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801950c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019510:	687a      	ldr	r2, [r7, #4]
 8019512:	429a      	cmp	r2, r3
 8019514:	d205      	bcs.n	8019522 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019516:	7bfb      	ldrb	r3, [r7, #15]
 8019518:	4a08      	ldr	r2, [pc, #32]	; (801953c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801951a:	00db      	lsls	r3, r3, #3
 801951c:	4413      	add	r3, r2
 801951e:	791b      	ldrb	r3, [r3, #4]
 8019520:	e006      	b.n	8019530 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019522:	7bfb      	ldrb	r3, [r7, #15]
 8019524:	3301      	adds	r3, #1
 8019526:	73fb      	strb	r3, [r7, #15]
 8019528:	7bfb      	ldrb	r3, [r7, #15]
 801952a:	2b15      	cmp	r3, #21
 801952c:	d9ec      	bls.n	8019508 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801952e:	e7fe      	b.n	801952e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019530:	4618      	mov	r0, r3
 8019532:	3714      	adds	r7, #20
 8019534:	46bd      	mov	sp, r7
 8019536:	bc80      	pop	{r7}
 8019538:	4770      	bx	lr
 801953a:	bf00      	nop
 801953c:	0801badc 	.word	0x0801badc

08019540 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b08a      	sub	sp, #40	; 0x28
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801954a:	4b36      	ldr	r3, [pc, #216]	; (8019624 <SUBGRF_GetCFO+0xe4>)
 801954c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801954e:	f640 0007 	movw	r0, #2055	; 0x807
 8019552:	f7ff fdd7 	bl	8019104 <SUBGRF_ReadRegister>
 8019556:	4603      	mov	r3, r0
 8019558:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801955a:	7ffb      	ldrb	r3, [r7, #31]
 801955c:	08db      	lsrs	r3, r3, #3
 801955e:	b2db      	uxtb	r3, r3
 8019560:	f003 0303 	and.w	r3, r3, #3
 8019564:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019568:	4413      	add	r3, r2
 801956a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801956e:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019570:	7ffb      	ldrb	r3, [r7, #31]
 8019572:	f003 0307 	and.w	r3, r3, #7
 8019576:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019578:	7fba      	ldrb	r2, [r7, #30]
 801957a:	7f7b      	ldrb	r3, [r7, #29]
 801957c:	3b01      	subs	r3, #1
 801957e:	fa02 f303 	lsl.w	r3, r2, r3
 8019582:	461a      	mov	r2, r3
 8019584:	4b28      	ldr	r3, [pc, #160]	; (8019628 <SUBGRF_GetCFO+0xe8>)
 8019586:	fbb3 f3f2 	udiv	r3, r3, r2
 801958a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801958c:	69ba      	ldr	r2, [r7, #24]
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	fbb2 f3f3 	udiv	r3, r2, r3
 8019594:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019596:	2301      	movs	r3, #1
 8019598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801959c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195a0:	697a      	ldr	r2, [r7, #20]
 80195a2:	fb02 f303 	mul.w	r3, r2, r3
 80195a6:	2b07      	cmp	r3, #7
 80195a8:	d802      	bhi.n	80195b0 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80195aa:	2302      	movs	r3, #2
 80195ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80195b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195b4:	697a      	ldr	r2, [r7, #20]
 80195b6:	fb02 f303 	mul.w	r3, r2, r3
 80195ba:	2b03      	cmp	r3, #3
 80195bc:	d802      	bhi.n	80195c4 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80195be:	2304      	movs	r3, #4
 80195c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80195c4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80195c8:	69bb      	ldr	r3, [r7, #24]
 80195ca:	fb02 f303 	mul.w	r3, r2, r3
 80195ce:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80195d0:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80195d4:	f7ff fd96 	bl	8019104 <SUBGRF_ReadRegister>
 80195d8:	4603      	mov	r3, r0
 80195da:	021b      	lsls	r3, r3, #8
 80195dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80195e0:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80195e2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80195e6:	f7ff fd8d 	bl	8019104 <SUBGRF_ReadRegister>
 80195ea:	4603      	mov	r3, r0
 80195ec:	461a      	mov	r2, r3
 80195ee:	6a3b      	ldr	r3, [r7, #32]
 80195f0:	4313      	orrs	r3, r2
 80195f2:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80195f4:	6a3b      	ldr	r3, [r7, #32]
 80195f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d005      	beq.n	801960a <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 80195fe:	6a3b      	ldr	r3, [r7, #32]
 8019600:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019604:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019608:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801960a:	693b      	ldr	r3, [r7, #16]
 801960c:	095b      	lsrs	r3, r3, #5
 801960e:	6a3a      	ldr	r2, [r7, #32]
 8019610:	fb02 f303 	mul.w	r3, r2, r3
 8019614:	11da      	asrs	r2, r3, #7
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	601a      	str	r2, [r3, #0]
}
 801961a:	bf00      	nop
 801961c:	3728      	adds	r7, #40	; 0x28
 801961e:	46bd      	mov	sp, r7
 8019620:	bd80      	pop	{r7, pc}
 8019622:	bf00      	nop
 8019624:	0c0a0804 	.word	0x0c0a0804
 8019628:	01e84800 	.word	0x01e84800

0801962c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801962c:	b480      	push	{r7}
 801962e:	b087      	sub	sp, #28
 8019630:	af00      	add	r7, sp, #0
 8019632:	4603      	mov	r3, r0
 8019634:	60b9      	str	r1, [r7, #8]
 8019636:	607a      	str	r2, [r7, #4]
 8019638:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801963a:	2300      	movs	r3, #0
 801963c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801963e:	f04f 33ff 	mov.w	r3, #4294967295
 8019642:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019644:	697b      	ldr	r3, [r7, #20]
}
 8019646:	4618      	mov	r0, r3
 8019648:	371c      	adds	r7, #28
 801964a:	46bd      	mov	sp, r7
 801964c:	bc80      	pop	{r7}
 801964e:	4770      	bx	lr

08019650 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019650:	b480      	push	{r7}
 8019652:	b087      	sub	sp, #28
 8019654:	af00      	add	r7, sp, #0
 8019656:	4603      	mov	r3, r0
 8019658:	60b9      	str	r1, [r7, #8]
 801965a:	607a      	str	r2, [r7, #4]
 801965c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801965e:	2300      	movs	r3, #0
 8019660:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019662:	f04f 33ff 	mov.w	r3, #4294967295
 8019666:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019668:	697b      	ldr	r3, [r7, #20]
}
 801966a:	4618      	mov	r0, r3
 801966c:	371c      	adds	r7, #28
 801966e:	46bd      	mov	sp, r7
 8019670:	bc80      	pop	{r7}
 8019672:	4770      	bx	lr

08019674 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019680:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019684:	4618      	mov	r0, r3
 8019686:	3714      	adds	r7, #20
 8019688:	46bd      	mov	sp, r7
 801968a:	bc80      	pop	{r7}
 801968c:	4770      	bx	lr

0801968e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801968e:	b480      	push	{r7}
 8019690:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019692:	bf00      	nop
 8019694:	46bd      	mov	sp, r7
 8019696:	bc80      	pop	{r7}
 8019698:	4770      	bx	lr

0801969a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801969a:	b480      	push	{r7}
 801969c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801969e:	2300      	movs	r3, #0
#endif
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bc80      	pop	{r7}
 80196a6:	4770      	bx	lr

080196a8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80196a8:	b480      	push	{r7}
 80196aa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80196ac:	2300      	movs	r3, #0
#endif
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bc80      	pop	{r7}
 80196b4:	4770      	bx	lr

080196b6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80196b6:	b480      	push	{r7}
 80196b8:	b083      	sub	sp, #12
 80196ba:	af00      	add	r7, sp, #0
 80196bc:	4603      	mov	r3, r0
 80196be:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80196c0:	bf00      	nop
 80196c2:	370c      	adds	r7, #12
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bc80      	pop	{r7}
 80196c8:	4770      	bx	lr

080196ca <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 80196ca:	b480      	push	{r7}
 80196cc:	b087      	sub	sp, #28
 80196ce:	af00      	add	r7, sp, #0
 80196d0:	60f8      	str	r0, [r7, #12]
 80196d2:	460b      	mov	r3, r1
 80196d4:	607a      	str	r2, [r7, #4]
 80196d6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80196d8:	f04f 33ff 	mov.w	r3, #4294967295
 80196dc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80196de:	697b      	ldr	r3, [r7, #20]
}
 80196e0:	4618      	mov	r0, r3
 80196e2:	371c      	adds	r7, #28
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bc80      	pop	{r7}
 80196e8:	4770      	bx	lr

080196ea <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80196ea:	b480      	push	{r7}
 80196ec:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bc80      	pop	{r7}
 80196f8:	4770      	bx	lr

080196fa <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 80196fa:	b480      	push	{r7}
 80196fc:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80196fe:	bf00      	nop
 8019700:	46bd      	mov	sp, r7
 8019702:	bc80      	pop	{r7}
 8019704:	4770      	bx	lr

08019706 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019706:	b480      	push	{r7}
 8019708:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801970a:	bf00      	nop
 801970c:	46bd      	mov	sp, r7
 801970e:	bc80      	pop	{r7}
 8019710:	4770      	bx	lr

08019712 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019712:	b480      	push	{r7}
 8019714:	b083      	sub	sp, #12
 8019716:	af00      	add	r7, sp, #0
 8019718:	4603      	mov	r3, r0
 801971a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801971c:	bf00      	nop
 801971e:	370c      	adds	r7, #12
 8019720:	46bd      	mov	sp, r7
 8019722:	bc80      	pop	{r7}
 8019724:	4770      	bx	lr
	...

08019728 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019728:	b480      	push	{r7}
 801972a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801972c:	4b04      	ldr	r3, [pc, #16]	; (8019740 <UTIL_LPM_Init+0x18>)
 801972e:	2200      	movs	r2, #0
 8019730:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019732:	4b04      	ldr	r3, [pc, #16]	; (8019744 <UTIL_LPM_Init+0x1c>)
 8019734:	2200      	movs	r2, #0
 8019736:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019738:	bf00      	nop
 801973a:	46bd      	mov	sp, r7
 801973c:	bc80      	pop	{r7}
 801973e:	4770      	bx	lr
 8019740:	20000eec 	.word	0x20000eec
 8019744:	20000ef0 	.word	0x20000ef0

08019748 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019748:	b480      	push	{r7}
 801974a:	b087      	sub	sp, #28
 801974c:	af00      	add	r7, sp, #0
 801974e:	6078      	str	r0, [r7, #4]
 8019750:	460b      	mov	r3, r1
 8019752:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019754:	f3ef 8310 	mrs	r3, PRIMASK
 8019758:	613b      	str	r3, [r7, #16]
  return(result);
 801975a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801975c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801975e:	b672      	cpsid	i
}
 8019760:	bf00      	nop
  
  switch( state )
 8019762:	78fb      	ldrb	r3, [r7, #3]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d008      	beq.n	801977a <UTIL_LPM_SetStopMode+0x32>
 8019768:	2b01      	cmp	r3, #1
 801976a:	d10e      	bne.n	801978a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801976c:	4b0d      	ldr	r3, [pc, #52]	; (80197a4 <UTIL_LPM_SetStopMode+0x5c>)
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	4313      	orrs	r3, r2
 8019774:	4a0b      	ldr	r2, [pc, #44]	; (80197a4 <UTIL_LPM_SetStopMode+0x5c>)
 8019776:	6013      	str	r3, [r2, #0]
      break;
 8019778:	e008      	b.n	801978c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	43da      	mvns	r2, r3
 801977e:	4b09      	ldr	r3, [pc, #36]	; (80197a4 <UTIL_LPM_SetStopMode+0x5c>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	4013      	ands	r3, r2
 8019784:	4a07      	ldr	r2, [pc, #28]	; (80197a4 <UTIL_LPM_SetStopMode+0x5c>)
 8019786:	6013      	str	r3, [r2, #0]
      break;
 8019788:	e000      	b.n	801978c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801978a:	bf00      	nop
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	f383 8810 	msr	PRIMASK, r3
}
 8019796:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019798:	bf00      	nop
 801979a:	371c      	adds	r7, #28
 801979c:	46bd      	mov	sp, r7
 801979e:	bc80      	pop	{r7}
 80197a0:	4770      	bx	lr
 80197a2:	bf00      	nop
 80197a4:	20000eec 	.word	0x20000eec

080197a8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80197a8:	b480      	push	{r7}
 80197aa:	b087      	sub	sp, #28
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	460b      	mov	r3, r1
 80197b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197b4:	f3ef 8310 	mrs	r3, PRIMASK
 80197b8:	613b      	str	r3, [r7, #16]
  return(result);
 80197ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80197bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197be:	b672      	cpsid	i
}
 80197c0:	bf00      	nop
  
  switch(state)
 80197c2:	78fb      	ldrb	r3, [r7, #3]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d008      	beq.n	80197da <UTIL_LPM_SetOffMode+0x32>
 80197c8:	2b01      	cmp	r3, #1
 80197ca:	d10e      	bne.n	80197ea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80197cc:	4b0d      	ldr	r3, [pc, #52]	; (8019804 <UTIL_LPM_SetOffMode+0x5c>)
 80197ce:	681a      	ldr	r2, [r3, #0]
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	4313      	orrs	r3, r2
 80197d4:	4a0b      	ldr	r2, [pc, #44]	; (8019804 <UTIL_LPM_SetOffMode+0x5c>)
 80197d6:	6013      	str	r3, [r2, #0]
      break;
 80197d8:	e008      	b.n	80197ec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	43da      	mvns	r2, r3
 80197de:	4b09      	ldr	r3, [pc, #36]	; (8019804 <UTIL_LPM_SetOffMode+0x5c>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	4013      	ands	r3, r2
 80197e4:	4a07      	ldr	r2, [pc, #28]	; (8019804 <UTIL_LPM_SetOffMode+0x5c>)
 80197e6:	6013      	str	r3, [r2, #0]
      break;
 80197e8:	e000      	b.n	80197ec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80197ea:	bf00      	nop
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	f383 8810 	msr	PRIMASK, r3
}
 80197f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80197f8:	bf00      	nop
 80197fa:	371c      	adds	r7, #28
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bc80      	pop	{r7}
 8019800:	4770      	bx	lr
 8019802:	bf00      	nop
 8019804:	20000ef0 	.word	0x20000ef0

08019808 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019808:	b480      	push	{r7}
 801980a:	b087      	sub	sp, #28
 801980c:	af00      	add	r7, sp, #0
 801980e:	60f8      	str	r0, [r7, #12]
 8019810:	60b9      	str	r1, [r7, #8]
 8019812:	4613      	mov	r3, r2
 8019814:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801981e:	e007      	b.n	8019830 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019820:	693a      	ldr	r2, [r7, #16]
 8019822:	1c53      	adds	r3, r2, #1
 8019824:	613b      	str	r3, [r7, #16]
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	1c59      	adds	r1, r3, #1
 801982a:	6179      	str	r1, [r7, #20]
 801982c:	7812      	ldrb	r2, [r2, #0]
 801982e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019830:	88fb      	ldrh	r3, [r7, #6]
 8019832:	1e5a      	subs	r2, r3, #1
 8019834:	80fa      	strh	r2, [r7, #6]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d1f2      	bne.n	8019820 <UTIL_MEM_cpy_8+0x18>
    }
}
 801983a:	bf00      	nop
 801983c:	bf00      	nop
 801983e:	371c      	adds	r7, #28
 8019840:	46bd      	mov	sp, r7
 8019842:	bc80      	pop	{r7}
 8019844:	4770      	bx	lr

08019846 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019846:	b480      	push	{r7}
 8019848:	b085      	sub	sp, #20
 801984a:	af00      	add	r7, sp, #0
 801984c:	6078      	str	r0, [r7, #4]
 801984e:	460b      	mov	r3, r1
 8019850:	70fb      	strb	r3, [r7, #3]
 8019852:	4613      	mov	r3, r2
 8019854:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801985a:	e004      	b.n	8019866 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	1c5a      	adds	r2, r3, #1
 8019860:	60fa      	str	r2, [r7, #12]
 8019862:	78fa      	ldrb	r2, [r7, #3]
 8019864:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019866:	883b      	ldrh	r3, [r7, #0]
 8019868:	1e5a      	subs	r2, r3, #1
 801986a:	803a      	strh	r2, [r7, #0]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d1f5      	bne.n	801985c <UTIL_MEM_set_8+0x16>
  }
}
 8019870:	bf00      	nop
 8019872:	bf00      	nop
 8019874:	3714      	adds	r7, #20
 8019876:	46bd      	mov	sp, r7
 8019878:	bc80      	pop	{r7}
 801987a:	4770      	bx	lr

0801987c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801987c:	b082      	sub	sp, #8
 801987e:	b480      	push	{r7}
 8019880:	b087      	sub	sp, #28
 8019882:	af00      	add	r7, sp, #0
 8019884:	60f8      	str	r0, [r7, #12]
 8019886:	1d38      	adds	r0, r7, #4
 8019888:	e880 0006 	stmia.w	r0, {r1, r2}
 801988c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801988e:	2300      	movs	r3, #0
 8019890:	613b      	str	r3, [r7, #16]
 8019892:	2300      	movs	r3, #0
 8019894:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801989a:	4413      	add	r3, r2
 801989c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801989e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198a2:	b29a      	uxth	r2, r3
 80198a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	4413      	add	r3, r2
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	b21b      	sxth	r3, r3
 80198b0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 80198b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80198ba:	db0a      	blt.n	80198d2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 80198bc:	693b      	ldr	r3, [r7, #16]
 80198be:	3301      	adds	r3, #1
 80198c0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 80198c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	b21b      	sxth	r3, r3
 80198d0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	461a      	mov	r2, r3
 80198d6:	f107 0310 	add.w	r3, r7, #16
 80198da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80198e2:	68f8      	ldr	r0, [r7, #12]
 80198e4:	371c      	adds	r7, #28
 80198e6:	46bd      	mov	sp, r7
 80198e8:	bc80      	pop	{r7}
 80198ea:	b002      	add	sp, #8
 80198ec:	4770      	bx	lr

080198ee <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80198ee:	b082      	sub	sp, #8
 80198f0:	b480      	push	{r7}
 80198f2:	b087      	sub	sp, #28
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	60f8      	str	r0, [r7, #12]
 80198f8:	1d38      	adds	r0, r7, #4
 80198fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80198fe:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019900:	2300      	movs	r3, #0
 8019902:	613b      	str	r3, [r7, #16]
 8019904:	2300      	movs	r3, #0
 8019906:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990c:	1ad3      	subs	r3, r2, r3
 801990e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019910:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019914:	b29a      	uxth	r2, r3
 8019916:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801991a:	b29b      	uxth	r3, r3
 801991c:	1ad3      	subs	r3, r2, r3
 801991e:	b29b      	uxth	r3, r3
 8019920:	b21b      	sxth	r3, r3
 8019922:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019924:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019928:	2b00      	cmp	r3, #0
 801992a:	da0a      	bge.n	8019942 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801992c:	693b      	ldr	r3, [r7, #16]
 801992e:	3b01      	subs	r3, #1
 8019930:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019932:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019936:	b29b      	uxth	r3, r3
 8019938:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801993c:	b29b      	uxth	r3, r3
 801993e:	b21b      	sxth	r3, r3
 8019940:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	461a      	mov	r2, r3
 8019946:	f107 0310 	add.w	r3, r7, #16
 801994a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801994e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	371c      	adds	r7, #28
 8019956:	46bd      	mov	sp, r7
 8019958:	bc80      	pop	{r7}
 801995a:	b002      	add	sp, #8
 801995c:	4770      	bx	lr
	...

08019960 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b088      	sub	sp, #32
 8019964:	af02      	add	r7, sp, #8
 8019966:	463b      	mov	r3, r7
 8019968:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801996c:	2300      	movs	r3, #0
 801996e:	60bb      	str	r3, [r7, #8]
 8019970:	2300      	movs	r3, #0
 8019972:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019974:	4b10      	ldr	r3, [pc, #64]	; (80199b8 <SysTimeSet+0x58>)
 8019976:	691b      	ldr	r3, [r3, #16]
 8019978:	f107 0208 	add.w	r2, r7, #8
 801997c:	3204      	adds	r2, #4
 801997e:	4610      	mov	r0, r2
 8019980:	4798      	blx	r3
 8019982:	4603      	mov	r3, r0
 8019984:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019986:	f107 0010 	add.w	r0, r7, #16
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	463a      	mov	r2, r7
 8019992:	ca06      	ldmia	r2, {r1, r2}
 8019994:	f7ff ffab 	bl	80198ee <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019998:	4b07      	ldr	r3, [pc, #28]	; (80199b8 <SysTimeSet+0x58>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	693a      	ldr	r2, [r7, #16]
 801999e:	4610      	mov	r0, r2
 80199a0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80199a2:	4b05      	ldr	r3, [pc, #20]	; (80199b8 <SysTimeSet+0x58>)
 80199a4:	689b      	ldr	r3, [r3, #8]
 80199a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80199aa:	4610      	mov	r0, r2
 80199ac:	4798      	blx	r3
}
 80199ae:	bf00      	nop
 80199b0:	3718      	adds	r7, #24
 80199b2:	46bd      	mov	sp, r7
 80199b4:	bd80      	pop	{r7, pc}
 80199b6:	bf00      	nop
 80199b8:	0801b6a0 	.word	0x0801b6a0

080199bc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b08a      	sub	sp, #40	; 0x28
 80199c0:	af02      	add	r7, sp, #8
 80199c2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80199c4:	2300      	movs	r3, #0
 80199c6:	61bb      	str	r3, [r7, #24]
 80199c8:	2300      	movs	r3, #0
 80199ca:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80199cc:	2300      	movs	r3, #0
 80199ce:	613b      	str	r3, [r7, #16]
 80199d0:	2300      	movs	r3, #0
 80199d2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80199d4:	4b14      	ldr	r3, [pc, #80]	; (8019a28 <SysTimeGet+0x6c>)
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	f107 0218 	add.w	r2, r7, #24
 80199dc:	3204      	adds	r2, #4
 80199de:	4610      	mov	r0, r2
 80199e0:	4798      	blx	r3
 80199e2:	4603      	mov	r3, r0
 80199e4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80199e6:	4b10      	ldr	r3, [pc, #64]	; (8019a28 <SysTimeGet+0x6c>)
 80199e8:	68db      	ldr	r3, [r3, #12]
 80199ea:	4798      	blx	r3
 80199ec:	4603      	mov	r3, r0
 80199ee:	b21b      	sxth	r3, r3
 80199f0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80199f2:	4b0d      	ldr	r3, [pc, #52]	; (8019a28 <SysTimeGet+0x6c>)
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	4798      	blx	r3
 80199f8:	4603      	mov	r3, r0
 80199fa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80199fc:	f107 0010 	add.w	r0, r7, #16
 8019a00:	69fb      	ldr	r3, [r7, #28]
 8019a02:	9300      	str	r3, [sp, #0]
 8019a04:	69bb      	ldr	r3, [r7, #24]
 8019a06:	f107 0208 	add.w	r2, r7, #8
 8019a0a:	ca06      	ldmia	r2, {r1, r2}
 8019a0c:	f7ff ff36 	bl	801987c <SysTimeAdd>

  return sysTime;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	461a      	mov	r2, r3
 8019a14:	f107 0310 	add.w	r3, r7, #16
 8019a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a1c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	3720      	adds	r7, #32
 8019a24:	46bd      	mov	sp, r7
 8019a26:	bd80      	pop	{r7, pc}
 8019a28:	0801b6a0 	.word	0x0801b6a0

08019a2c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b084      	sub	sp, #16
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019a34:	2300      	movs	r3, #0
 8019a36:	60bb      	str	r3, [r7, #8]
 8019a38:	2300      	movs	r3, #0
 8019a3a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019a3c:	4b0a      	ldr	r3, [pc, #40]	; (8019a68 <SysTimeGetMcuTime+0x3c>)
 8019a3e:	691b      	ldr	r3, [r3, #16]
 8019a40:	f107 0208 	add.w	r2, r7, #8
 8019a44:	3204      	adds	r2, #4
 8019a46:	4610      	mov	r0, r2
 8019a48:	4798      	blx	r3
 8019a4a:	4603      	mov	r3, r0
 8019a4c:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	461a      	mov	r2, r3
 8019a52:	f107 0308 	add.w	r3, r7, #8
 8019a56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a5a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a5e:	6878      	ldr	r0, [r7, #4]
 8019a60:	3710      	adds	r7, #16
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bd80      	pop	{r7, pc}
 8019a66:	bf00      	nop
 8019a68:	0801b6a0 	.word	0x0801b6a0

08019a6c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b088      	sub	sp, #32
 8019a70:	af02      	add	r7, sp, #8
 8019a72:	463b      	mov	r3, r7
 8019a74:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a78:	4b0f      	ldr	r3, [pc, #60]	; (8019ab8 <SysTimeToMs+0x4c>)
 8019a7a:	68db      	ldr	r3, [r3, #12]
 8019a7c:	4798      	blx	r3
 8019a7e:	4603      	mov	r3, r0
 8019a80:	b21b      	sxth	r3, r3
 8019a82:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019a84:	4b0c      	ldr	r3, [pc, #48]	; (8019ab8 <SysTimeToMs+0x4c>)
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	4798      	blx	r3
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019a8e:	f107 0008 	add.w	r0, r7, #8
 8019a92:	697b      	ldr	r3, [r7, #20]
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	693b      	ldr	r3, [r7, #16]
 8019a98:	463a      	mov	r2, r7
 8019a9a:	ca06      	ldmia	r2, {r1, r2}
 8019a9c:	f7ff ff27 	bl	80198ee <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019aa6:	fb02 f303 	mul.w	r3, r2, r3
 8019aaa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019aae:	4413      	add	r3, r2
}
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	3718      	adds	r7, #24
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd80      	pop	{r7, pc}
 8019ab8:	0801b6a0 	.word	0x0801b6a0

08019abc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b08a      	sub	sp, #40	; 0x28
 8019ac0:	af02      	add	r7, sp, #8
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	4a19      	ldr	r2, [pc, #100]	; (8019b30 <SysTimeFromMs+0x74>)
 8019aca:	fba2 2303 	umull	r2, r3, r2, r3
 8019ace:	099b      	lsrs	r3, r3, #6
 8019ad0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019ad2:	69fb      	ldr	r3, [r7, #28]
 8019ad4:	617b      	str	r3, [r7, #20]
 8019ad6:	683b      	ldr	r3, [r7, #0]
 8019ad8:	b29a      	uxth	r2, r3
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	4619      	mov	r1, r3
 8019ae0:	0149      	lsls	r1, r1, #5
 8019ae2:	1ac9      	subs	r1, r1, r3
 8019ae4:	0089      	lsls	r1, r1, #2
 8019ae6:	440b      	add	r3, r1
 8019ae8:	00db      	lsls	r3, r3, #3
 8019aea:	b29b      	uxth	r3, r3
 8019aec:	1ad3      	subs	r3, r2, r3
 8019aee:	b29b      	uxth	r3, r3
 8019af0:	b21b      	sxth	r3, r3
 8019af2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019af4:	f107 030c 	add.w	r3, r7, #12
 8019af8:	2200      	movs	r2, #0
 8019afa:	601a      	str	r2, [r3, #0]
 8019afc:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019afe:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <SysTimeFromMs+0x78>)
 8019b00:	68db      	ldr	r3, [r3, #12]
 8019b02:	4798      	blx	r3
 8019b04:	4603      	mov	r3, r0
 8019b06:	b21b      	sxth	r3, r3
 8019b08:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019b0a:	4b0a      	ldr	r3, [pc, #40]	; (8019b34 <SysTimeFromMs+0x78>)
 8019b0c:	685b      	ldr	r3, [r3, #4]
 8019b0e:	4798      	blx	r3
 8019b10:	4603      	mov	r3, r0
 8019b12:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	693b      	ldr	r3, [r7, #16]
 8019b18:	9300      	str	r3, [sp, #0]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	f107 0214 	add.w	r2, r7, #20
 8019b20:	ca06      	ldmia	r2, {r1, r2}
 8019b22:	f7ff feab 	bl	801987c <SysTimeAdd>
}
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	3720      	adds	r7, #32
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}
 8019b2e:	bf00      	nop
 8019b30:	10624dd3 	.word	0x10624dd3
 8019b34:	0801b6a0 	.word	0x0801b6a0

08019b38 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019b38:	b480      	push	{r7}
 8019b3a:	b085      	sub	sp, #20
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019b40:	2300      	movs	r3, #0
 8019b42:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019b44:	e00e      	b.n	8019b64 <ee_skip_atoi+0x2c>
 8019b46:	68fa      	ldr	r2, [r7, #12]
 8019b48:	4613      	mov	r3, r2
 8019b4a:	009b      	lsls	r3, r3, #2
 8019b4c:	4413      	add	r3, r2
 8019b4e:	005b      	lsls	r3, r3, #1
 8019b50:	4618      	mov	r0, r3
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	1c59      	adds	r1, r3, #1
 8019b58:	687a      	ldr	r2, [r7, #4]
 8019b5a:	6011      	str	r1, [r2, #0]
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	4403      	add	r3, r0
 8019b60:	3b30      	subs	r3, #48	; 0x30
 8019b62:	60fb      	str	r3, [r7, #12]
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2b2f      	cmp	r3, #47	; 0x2f
 8019b6c:	d904      	bls.n	8019b78 <ee_skip_atoi+0x40>
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	2b39      	cmp	r3, #57	; 0x39
 8019b76:	d9e6      	bls.n	8019b46 <ee_skip_atoi+0xe>
  return i;
 8019b78:	68fb      	ldr	r3, [r7, #12]
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3714      	adds	r7, #20
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bc80      	pop	{r7}
 8019b82:	4770      	bx	lr

08019b84 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019b84:	b480      	push	{r7}
 8019b86:	b099      	sub	sp, #100	; 0x64
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	607a      	str	r2, [r7, #4]
 8019b90:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019b92:	4b72      	ldr	r3, [pc, #456]	; (8019d5c <ee_number+0x1d8>)
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d002      	beq.n	8019ba8 <ee_number+0x24>
 8019ba2:	4b6f      	ldr	r3, [pc, #444]	; (8019d60 <ee_number+0x1dc>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	2b01      	cmp	r3, #1
 8019bac:	dd02      	ble.n	8019bb4 <ee_number+0x30>
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	2b24      	cmp	r3, #36	; 0x24
 8019bb2:	dd01      	ble.n	8019bb8 <ee_number+0x34>
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	e0cc      	b.n	8019d52 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bba:	f003 0301 	and.w	r3, r3, #1
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d001      	beq.n	8019bc6 <ee_number+0x42>
 8019bc2:	2330      	movs	r3, #48	; 0x30
 8019bc4:	e000      	b.n	8019bc8 <ee_number+0x44>
 8019bc6:	2320      	movs	r3, #32
 8019bc8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019bcc:	2300      	movs	r3, #0
 8019bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bd4:	f003 0302 	and.w	r3, r3, #2
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d00b      	beq.n	8019bf4 <ee_number+0x70>
  {
    if (num < 0)
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	da08      	bge.n	8019bf4 <ee_number+0x70>
    {
      sign = '-';
 8019be2:	232d      	movs	r3, #45	; 0x2d
 8019be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	425b      	negs	r3, r3
 8019bec:	607b      	str	r3, [r7, #4]
      size--;
 8019bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019bf0:	3b01      	subs	r3, #1
 8019bf2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d120      	bne.n	8019c40 <ee_number+0xbc>
    tmp[i++] = '0';
 8019bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c00:	1c5a      	adds	r2, r3, #1
 8019c02:	657a      	str	r2, [r7, #84]	; 0x54
 8019c04:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019c08:	4413      	add	r3, r2
 8019c0a:	2230      	movs	r2, #48	; 0x30
 8019c0c:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019c10:	e019      	b.n	8019c46 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	683a      	ldr	r2, [r7, #0]
 8019c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c1a:	fb02 f201 	mul.w	r2, r2, r1
 8019c1e:	1a9b      	subs	r3, r3, r2
 8019c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019c22:	441a      	add	r2, r3
 8019c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c26:	1c59      	adds	r1, r3, #1
 8019c28:	6579      	str	r1, [r7, #84]	; 0x54
 8019c2a:	7812      	ldrb	r2, [r2, #0]
 8019c2c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019c30:	440b      	add	r3, r1
 8019c32:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019c36:	687a      	ldr	r2, [r7, #4]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c3e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d1e5      	bne.n	8019c12 <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c4a:	429a      	cmp	r2, r3
 8019c4c:	dd01      	ble.n	8019c52 <ee_number+0xce>
 8019c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c50:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c56:	1ad3      	subs	r3, r2, r3
 8019c58:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c5c:	f003 0301 	and.w	r3, r3, #1
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d112      	bne.n	8019c8a <ee_number+0x106>
 8019c64:	e00c      	b.n	8019c80 <ee_number+0xfc>
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	60fa      	str	r2, [r7, #12]
 8019c6c:	2220      	movs	r2, #32
 8019c6e:	701a      	strb	r2, [r3, #0]
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	3b01      	subs	r3, #1
 8019c74:	60bb      	str	r3, [r7, #8]
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d101      	bne.n	8019c80 <ee_number+0xfc>
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	e068      	b.n	8019d52 <ee_number+0x1ce>
 8019c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c82:	1e5a      	subs	r2, r3, #1
 8019c84:	66ba      	str	r2, [r7, #104]	; 0x68
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	dced      	bgt.n	8019c66 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d01b      	beq.n	8019cca <ee_number+0x146>
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	1c5a      	adds	r2, r3, #1
 8019c96:	60fa      	str	r2, [r7, #12]
 8019c98:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019c9c:	701a      	strb	r2, [r3, #0]
 8019c9e:	68bb      	ldr	r3, [r7, #8]
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	60bb      	str	r3, [r7, #8]
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d10f      	bne.n	8019cca <ee_number+0x146>
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	e051      	b.n	8019d52 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	1c5a      	adds	r2, r3, #1
 8019cb2:	60fa      	str	r2, [r7, #12]
 8019cb4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019cb8:	701a      	strb	r2, [r3, #0]
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	3b01      	subs	r3, #1
 8019cbe:	60bb      	str	r3, [r7, #8]
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d101      	bne.n	8019cca <ee_number+0x146>
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	e043      	b.n	8019d52 <ee_number+0x1ce>
 8019cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ccc:	1e5a      	subs	r2, r3, #1
 8019cce:	66ba      	str	r2, [r7, #104]	; 0x68
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	dcec      	bgt.n	8019cae <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019cd4:	e00c      	b.n	8019cf0 <ee_number+0x16c>
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	1c5a      	adds	r2, r3, #1
 8019cda:	60fa      	str	r2, [r7, #12]
 8019cdc:	2230      	movs	r2, #48	; 0x30
 8019cde:	701a      	strb	r2, [r3, #0]
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	3b01      	subs	r3, #1
 8019ce4:	60bb      	str	r3, [r7, #8]
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d101      	bne.n	8019cf0 <ee_number+0x16c>
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	e030      	b.n	8019d52 <ee_number+0x1ce>
 8019cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cf2:	1e5a      	subs	r2, r3, #1
 8019cf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	dbec      	blt.n	8019cd6 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019cfc:	e010      	b.n	8019d20 <ee_number+0x19c>
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	1c5a      	adds	r2, r3, #1
 8019d02:	60fa      	str	r2, [r7, #12]
 8019d04:	f107 0110 	add.w	r1, r7, #16
 8019d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d0a:	440a      	add	r2, r1
 8019d0c:	7812      	ldrb	r2, [r2, #0]
 8019d0e:	701a      	strb	r2, [r3, #0]
 8019d10:	68bb      	ldr	r3, [r7, #8]
 8019d12:	3b01      	subs	r3, #1
 8019d14:	60bb      	str	r3, [r7, #8]
 8019d16:	68bb      	ldr	r3, [r7, #8]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d101      	bne.n	8019d20 <ee_number+0x19c>
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	e018      	b.n	8019d52 <ee_number+0x1ce>
 8019d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d22:	1e5a      	subs	r2, r3, #1
 8019d24:	657a      	str	r2, [r7, #84]	; 0x54
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	dce9      	bgt.n	8019cfe <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019d2a:	e00c      	b.n	8019d46 <ee_number+0x1c2>
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	1c5a      	adds	r2, r3, #1
 8019d30:	60fa      	str	r2, [r7, #12]
 8019d32:	2220      	movs	r2, #32
 8019d34:	701a      	strb	r2, [r3, #0]
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	3b01      	subs	r3, #1
 8019d3a:	60bb      	str	r3, [r7, #8]
 8019d3c:	68bb      	ldr	r3, [r7, #8]
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d101      	bne.n	8019d46 <ee_number+0x1c2>
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	e005      	b.n	8019d52 <ee_number+0x1ce>
 8019d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019d48:	1e5a      	subs	r2, r3, #1
 8019d4a:	66ba      	str	r2, [r7, #104]	; 0x68
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	dced      	bgt.n	8019d2c <ee_number+0x1a8>

  return str;
 8019d50:	68fb      	ldr	r3, [r7, #12]
}
 8019d52:	4618      	mov	r0, r3
 8019d54:	3764      	adds	r7, #100	; 0x64
 8019d56:	46bd      	mov	sp, r7
 8019d58:	bc80      	pop	{r7}
 8019d5a:	4770      	bx	lr
 8019d5c:	20000124 	.word	0x20000124
 8019d60:	20000128 	.word	0x20000128

08019d64 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b092      	sub	sp, #72	; 0x48
 8019d68:	af04      	add	r7, sp, #16
 8019d6a:	60f8      	str	r0, [r7, #12]
 8019d6c:	60b9      	str	r1, [r7, #8]
 8019d6e:	607a      	str	r2, [r7, #4]
 8019d70:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019d72:	68bb      	ldr	r3, [r7, #8]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	dc01      	bgt.n	8019d7c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	e142      	b.n	801a002 <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d80:	e12a      	b.n	8019fd8 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	1ad2      	subs	r2, r2, r3
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	3b01      	subs	r3, #1
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	f280 8131 	bge.w	8019ff4 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	2b25      	cmp	r3, #37	; 0x25
 8019d98:	d006      	beq.n	8019da8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019d9a:	687a      	ldr	r2, [r7, #4]
 8019d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d9e:	1c59      	adds	r1, r3, #1
 8019da0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019da2:	7812      	ldrb	r2, [r2, #0]
 8019da4:	701a      	strb	r2, [r3, #0]
      continue;
 8019da6:	e114      	b.n	8019fd2 <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019da8:	2300      	movs	r3, #0
 8019daa:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	3301      	adds	r3, #1
 8019db0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	781b      	ldrb	r3, [r3, #0]
 8019db6:	2b30      	cmp	r3, #48	; 0x30
 8019db8:	d103      	bne.n	8019dc2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019dba:	6a3b      	ldr	r3, [r7, #32]
 8019dbc:	f043 0301 	orr.w	r3, r3, #1
 8019dc0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8019dc6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8019dce:	d908      	bls.n	8019de2 <tiny_vsnprintf_like+0x7e>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	2b39      	cmp	r3, #57	; 0x39
 8019dd6:	d804      	bhi.n	8019de2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019dd8:	1d3b      	adds	r3, r7, #4
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7ff feac 	bl	8019b38 <ee_skip_atoi>
 8019de0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019de2:	f04f 33ff 	mov.w	r3, #4294967295
 8019de6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019de8:	f04f 33ff 	mov.w	r3, #4294967295
 8019dec:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019dee:	230a      	movs	r3, #10
 8019df0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	781b      	ldrb	r3, [r3, #0]
 8019df6:	3b58      	subs	r3, #88	; 0x58
 8019df8:	2b20      	cmp	r3, #32
 8019dfa:	f200 8094 	bhi.w	8019f26 <tiny_vsnprintf_like+0x1c2>
 8019dfe:	a201      	add	r2, pc, #4	; (adr r2, 8019e04 <tiny_vsnprintf_like+0xa0>)
 8019e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e04:	08019f0f 	.word	0x08019f0f
 8019e08:	08019f27 	.word	0x08019f27
 8019e0c:	08019f27 	.word	0x08019f27
 8019e10:	08019f27 	.word	0x08019f27
 8019e14:	08019f27 	.word	0x08019f27
 8019e18:	08019f27 	.word	0x08019f27
 8019e1c:	08019f27 	.word	0x08019f27
 8019e20:	08019f27 	.word	0x08019f27
 8019e24:	08019f27 	.word	0x08019f27
 8019e28:	08019f27 	.word	0x08019f27
 8019e2c:	08019f27 	.word	0x08019f27
 8019e30:	08019e93 	.word	0x08019e93
 8019e34:	08019f1d 	.word	0x08019f1d
 8019e38:	08019f27 	.word	0x08019f27
 8019e3c:	08019f27 	.word	0x08019f27
 8019e40:	08019f27 	.word	0x08019f27
 8019e44:	08019f27 	.word	0x08019f27
 8019e48:	08019f1d 	.word	0x08019f1d
 8019e4c:	08019f27 	.word	0x08019f27
 8019e50:	08019f27 	.word	0x08019f27
 8019e54:	08019f27 	.word	0x08019f27
 8019e58:	08019f27 	.word	0x08019f27
 8019e5c:	08019f27 	.word	0x08019f27
 8019e60:	08019f27 	.word	0x08019f27
 8019e64:	08019f27 	.word	0x08019f27
 8019e68:	08019f27 	.word	0x08019f27
 8019e6c:	08019f27 	.word	0x08019f27
 8019e70:	08019eb3 	.word	0x08019eb3
 8019e74:	08019f27 	.word	0x08019f27
 8019e78:	08019f73 	.word	0x08019f73
 8019e7c:	08019f27 	.word	0x08019f27
 8019e80:	08019f27 	.word	0x08019f27
 8019e84:	08019f17 	.word	0x08019f17
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8a:	1c5a      	adds	r2, r3, #1
 8019e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019e8e:	2220      	movs	r2, #32
 8019e90:	701a      	strb	r2, [r3, #0]
 8019e92:	69fb      	ldr	r3, [r7, #28]
 8019e94:	3b01      	subs	r3, #1
 8019e96:	61fb      	str	r3, [r7, #28]
 8019e98:	69fb      	ldr	r3, [r7, #28]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	dcf4      	bgt.n	8019e88 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	1d1a      	adds	r2, r3, #4
 8019ea2:	603a      	str	r2, [r7, #0]
 8019ea4:	6819      	ldr	r1, [r3, #0]
 8019ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea8:	1c5a      	adds	r2, r3, #1
 8019eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019eac:	b2ca      	uxtb	r2, r1
 8019eae:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019eb0:	e08f      	b.n	8019fd2 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	1d1a      	adds	r2, r3, #4
 8019eb6:	603a      	str	r2, [r7, #0]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d101      	bne.n	8019ec6 <tiny_vsnprintf_like+0x162>
 8019ec2:	4b52      	ldr	r3, [pc, #328]	; (801a00c <tiny_vsnprintf_like+0x2a8>)
 8019ec4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ec8:	f7e6 f956 	bl	8000178 <strlen>
 8019ecc:	4603      	mov	r3, r0
 8019ece:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019ed0:	e004      	b.n	8019edc <tiny_vsnprintf_like+0x178>
 8019ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed4:	1c5a      	adds	r2, r3, #1
 8019ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019ed8:	2220      	movs	r2, #32
 8019eda:	701a      	strb	r2, [r3, #0]
 8019edc:	69fb      	ldr	r3, [r7, #28]
 8019ede:	1e5a      	subs	r2, r3, #1
 8019ee0:	61fa      	str	r2, [r7, #28]
 8019ee2:	693a      	ldr	r2, [r7, #16]
 8019ee4:	429a      	cmp	r2, r3
 8019ee6:	dbf4      	blt.n	8019ed2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019ee8:	2300      	movs	r3, #0
 8019eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8019eec:	e00a      	b.n	8019f04 <tiny_vsnprintf_like+0x1a0>
 8019eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ef0:	1c53      	adds	r3, r2, #1
 8019ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	1c59      	adds	r1, r3, #1
 8019ef8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019efa:	7812      	ldrb	r2, [r2, #0]
 8019efc:	701a      	strb	r2, [r3, #0]
 8019efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f00:	3301      	adds	r3, #1
 8019f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	dbf0      	blt.n	8019eee <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019f0c:	e061      	b.n	8019fd2 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019f0e:	6a3b      	ldr	r3, [r7, #32]
 8019f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f14:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019f16:	2310      	movs	r3, #16
 8019f18:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019f1a:	e02d      	b.n	8019f78 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019f1c:	6a3b      	ldr	r3, [r7, #32]
 8019f1e:	f043 0302 	orr.w	r3, r3, #2
 8019f22:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019f24:	e025      	b.n	8019f72 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	781b      	ldrb	r3, [r3, #0]
 8019f2a:	2b25      	cmp	r3, #37	; 0x25
 8019f2c:	d004      	beq.n	8019f38 <tiny_vsnprintf_like+0x1d4>
 8019f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f30:	1c5a      	adds	r2, r3, #1
 8019f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f34:	2225      	movs	r2, #37	; 0x25
 8019f36:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	1ad2      	subs	r2, r2, r3
 8019f3e:	68bb      	ldr	r3, [r7, #8]
 8019f40:	3b01      	subs	r3, #1
 8019f42:	429a      	cmp	r2, r3
 8019f44:	da17      	bge.n	8019f76 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d006      	beq.n	8019f5c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f52:	1c59      	adds	r1, r3, #1
 8019f54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f56:	7812      	ldrb	r2, [r2, #0]
 8019f58:	701a      	strb	r2, [r3, #0]
 8019f5a:	e002      	b.n	8019f62 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	1ad2      	subs	r2, r2, r3
 8019f68:	68bb      	ldr	r3, [r7, #8]
 8019f6a:	3b01      	subs	r3, #1
 8019f6c:	429a      	cmp	r2, r3
 8019f6e:	db2f      	blt.n	8019fd0 <tiny_vsnprintf_like+0x26c>
 8019f70:	e002      	b.n	8019f78 <tiny_vsnprintf_like+0x214>
        break;
 8019f72:	bf00      	nop
 8019f74:	e000      	b.n	8019f78 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019f76:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	2b6c      	cmp	r3, #108	; 0x6c
 8019f7c:	d105      	bne.n	8019f8a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	1d1a      	adds	r2, r3, #4
 8019f82:	603a      	str	r2, [r7, #0]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	637b      	str	r3, [r7, #52]	; 0x34
 8019f88:	e00f      	b.n	8019faa <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019f8a:	6a3b      	ldr	r3, [r7, #32]
 8019f8c:	f003 0302 	and.w	r3, r3, #2
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d005      	beq.n	8019fa0 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	1d1a      	adds	r2, r3, #4
 8019f98:	603a      	str	r2, [r7, #0]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8019f9e:	e004      	b.n	8019faa <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019fa0:	683b      	ldr	r3, [r7, #0]
 8019fa2:	1d1a      	adds	r2, r3, #4
 8019fa4:	603a      	str	r2, [r7, #0]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019faa:	68bb      	ldr	r3, [r7, #8]
 8019fac:	1e5a      	subs	r2, r3, #1
 8019fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	1acb      	subs	r3, r1, r3
 8019fb4:	1ad1      	subs	r1, r2, r3
 8019fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019fb8:	6a3b      	ldr	r3, [r7, #32]
 8019fba:	9302      	str	r3, [sp, #8]
 8019fbc:	69bb      	ldr	r3, [r7, #24]
 8019fbe:	9301      	str	r3, [sp, #4]
 8019fc0:	69fb      	ldr	r3, [r7, #28]
 8019fc2:	9300      	str	r3, [sp, #0]
 8019fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fc8:	f7ff fddc 	bl	8019b84 <ee_number>
 8019fcc:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019fce:	e000      	b.n	8019fd2 <tiny_vsnprintf_like+0x26e>
        continue;
 8019fd0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	3301      	adds	r3, #1
 8019fd6:	607b      	str	r3, [r7, #4]
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	781b      	ldrb	r3, [r3, #0]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	f47f aed0 	bne.w	8019d82 <tiny_vsnprintf_like+0x1e>
 8019fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	1ad2      	subs	r2, r2, r3
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	3b01      	subs	r3, #1
 8019fec:	429a      	cmp	r2, r3
 8019fee:	f6bf aec8 	bge.w	8019d82 <tiny_vsnprintf_like+0x1e>
 8019ff2:	e000      	b.n	8019ff6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8019ff4:	bf00      	nop
  }

  *str = '\0';
 8019ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8019ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	1ad3      	subs	r3, r2, r3
}
 801a002:	4618      	mov	r0, r3
 801a004:	3738      	adds	r7, #56	; 0x38
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}
 801a00a:	bf00      	nop
 801a00c:	0801b5c8 	.word	0x0801b5c8

0801a010 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b088      	sub	sp, #32
 801a014:	af00      	add	r7, sp, #0
 801a016:	60f8      	str	r0, [r7, #12]
 801a018:	60b9      	str	r1, [r7, #8]
 801a01a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a01c:	f3ef 8310 	mrs	r3, PRIMASK
 801a020:	617b      	str	r3, [r7, #20]
  return(result);
 801a022:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a026:	b672      	cpsid	i
}
 801a028:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a02a:	68f8      	ldr	r0, [r7, #12]
 801a02c:	f000 f83e 	bl	801a0ac <SEQ_BitPosition>
 801a030:	4603      	mov	r3, r0
 801a032:	4619      	mov	r1, r3
 801a034:	4a06      	ldr	r2, [pc, #24]	; (801a050 <UTIL_SEQ_RegTask+0x40>)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a03c:	69fb      	ldr	r3, [r7, #28]
 801a03e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a040:	69bb      	ldr	r3, [r7, #24]
 801a042:	f383 8810 	msr	PRIMASK, r3
}
 801a046:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a048:	bf00      	nop
}
 801a04a:	3720      	adds	r7, #32
 801a04c:	46bd      	mov	sp, r7
 801a04e:	bd80      	pop	{r7, pc}
 801a050:	20000ef8 	.word	0x20000ef8

0801a054 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a054:	b480      	push	{r7}
 801a056:	b087      	sub	sp, #28
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
 801a05c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a05e:	f3ef 8310 	mrs	r3, PRIMASK
 801a062:	60fb      	str	r3, [r7, #12]
  return(result);
 801a064:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a066:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a068:	b672      	cpsid	i
}
 801a06a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a06c:	4b0d      	ldr	r3, [pc, #52]	; (801a0a4 <UTIL_SEQ_SetTask+0x50>)
 801a06e:	681a      	ldr	r2, [r3, #0]
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	4313      	orrs	r3, r2
 801a074:	4a0b      	ldr	r2, [pc, #44]	; (801a0a4 <UTIL_SEQ_SetTask+0x50>)
 801a076:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a078:	4a0b      	ldr	r2, [pc, #44]	; (801a0a8 <UTIL_SEQ_SetTask+0x54>)
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	431a      	orrs	r2, r3
 801a084:	4908      	ldr	r1, [pc, #32]	; (801a0a8 <UTIL_SEQ_SetTask+0x54>)
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a090:	693b      	ldr	r3, [r7, #16]
 801a092:	f383 8810 	msr	PRIMASK, r3
}
 801a096:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a098:	bf00      	nop
}
 801a09a:	371c      	adds	r7, #28
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bc80      	pop	{r7}
 801a0a0:	4770      	bx	lr
 801a0a2:	bf00      	nop
 801a0a4:	20000ef4 	.word	0x20000ef4
 801a0a8:	20000f78 	.word	0x20000f78

0801a0ac <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a0ac:	b480      	push	{r7}
 801a0ae:	b085      	sub	sp, #20
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	0c1b      	lsrs	r3, r3, #16
 801a0bc:	041b      	lsls	r3, r3, #16
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d104      	bne.n	801a0cc <SEQ_BitPosition+0x20>
 801a0c2:	2310      	movs	r3, #16
 801a0c4:	73fb      	strb	r3, [r7, #15]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	041b      	lsls	r3, r3, #16
 801a0ca:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d105      	bne.n	801a0e2 <SEQ_BitPosition+0x36>
 801a0d6:	7bfb      	ldrb	r3, [r7, #15]
 801a0d8:	3308      	adds	r3, #8
 801a0da:	73fb      	strb	r3, [r7, #15]
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	021b      	lsls	r3, r3, #8
 801a0e0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d105      	bne.n	801a0f8 <SEQ_BitPosition+0x4c>
 801a0ec:	7bfb      	ldrb	r3, [r7, #15]
 801a0ee:	3304      	adds	r3, #4
 801a0f0:	73fb      	strb	r3, [r7, #15]
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	011b      	lsls	r3, r3, #4
 801a0f6:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	0f1b      	lsrs	r3, r3, #28
 801a0fc:	4a06      	ldr	r2, [pc, #24]	; (801a118 <SEQ_BitPosition+0x6c>)
 801a0fe:	5cd2      	ldrb	r2, [r2, r3]
 801a100:	7bfb      	ldrb	r3, [r7, #15]
 801a102:	4413      	add	r3, r2
 801a104:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a106:	7bfb      	ldrb	r3, [r7, #15]
 801a108:	f1c3 031f 	rsb	r3, r3, #31
 801a10c:	b2db      	uxtb	r3, r3
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3714      	adds	r7, #20
 801a112:	46bd      	mov	sp, r7
 801a114:	bc80      	pop	{r7}
 801a116:	4770      	bx	lr
 801a118:	0801bb8c 	.word	0x0801bb8c

0801a11c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a120:	4b04      	ldr	r3, [pc, #16]	; (801a134 <UTIL_TIMER_Init+0x18>)
 801a122:	2200      	movs	r2, #0
 801a124:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a126:	4b04      	ldr	r3, [pc, #16]	; (801a138 <UTIL_TIMER_Init+0x1c>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4798      	blx	r3
 801a12c:	4603      	mov	r3, r0
}
 801a12e:	4618      	mov	r0, r3
 801a130:	bd80      	pop	{r7, pc}
 801a132:	bf00      	nop
 801a134:	20000f88 	.word	0x20000f88
 801a138:	0801b674 	.word	0x0801b674

0801a13c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b084      	sub	sp, #16
 801a140:	af00      	add	r7, sp, #0
 801a142:	60f8      	str	r0, [r7, #12]
 801a144:	60b9      	str	r1, [r7, #8]
 801a146:	603b      	str	r3, [r7, #0]
 801a148:	4613      	mov	r3, r2
 801a14a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d023      	beq.n	801a19a <UTIL_TIMER_Create+0x5e>
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d020      	beq.n	801a19a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	2200      	movs	r2, #0
 801a15c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a15e:	4b11      	ldr	r3, [pc, #68]	; (801a1a4 <UTIL_TIMER_Create+0x68>)
 801a160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a162:	68b8      	ldr	r0, [r7, #8]
 801a164:	4798      	blx	r3
 801a166:	4602      	mov	r2, r0
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	2200      	movs	r2, #0
 801a170:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	2200      	movs	r2, #0
 801a176:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	2200      	movs	r2, #0
 801a17c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	683a      	ldr	r2, [r7, #0]
 801a182:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	69ba      	ldr	r2, [r7, #24]
 801a188:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	79fa      	ldrb	r2, [r7, #7]
 801a18e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	2200      	movs	r2, #0
 801a194:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a196:	2300      	movs	r3, #0
 801a198:	e000      	b.n	801a19c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a19a:	2301      	movs	r3, #1
  }
}
 801a19c:	4618      	mov	r0, r3
 801a19e:	3710      	adds	r7, #16
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	bd80      	pop	{r7, pc}
 801a1a4:	0801b674 	.word	0x0801b674

0801a1a8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b08a      	sub	sp, #40	; 0x28
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d056      	beq.n	801a26a <UTIL_TIMER_Start+0xc2>
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f000 f9a9 	bl	801a514 <TimerExists>
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	f083 0301 	eor.w	r3, r3, #1
 801a1c8:	b2db      	uxtb	r3, r3
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d04d      	beq.n	801a26a <UTIL_TIMER_Start+0xc2>
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	7a5b      	ldrb	r3, [r3, #9]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d149      	bne.n	801a26a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1d6:	f3ef 8310 	mrs	r3, PRIMASK
 801a1da:	613b      	str	r3, [r7, #16]
  return(result);
 801a1dc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a1de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1e0:	b672      	cpsid	i
}
 801a1e2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a1ea:	4b24      	ldr	r3, [pc, #144]	; (801a27c <UTIL_TIMER_Start+0xd4>)
 801a1ec:	6a1b      	ldr	r3, [r3, #32]
 801a1ee:	4798      	blx	r3
 801a1f0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a1f2:	6a3a      	ldr	r2, [r7, #32]
 801a1f4:	69bb      	ldr	r3, [r7, #24]
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d201      	bcs.n	801a1fe <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a1fa:	69bb      	ldr	r3, [r7, #24]
 801a1fc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	6a3a      	ldr	r2, [r7, #32]
 801a202:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2201      	movs	r2, #1
 801a20e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	2200      	movs	r2, #0
 801a214:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a216:	4b1a      	ldr	r3, [pc, #104]	; (801a280 <UTIL_TIMER_Start+0xd8>)
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d106      	bne.n	801a22c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a21e:	4b17      	ldr	r3, [pc, #92]	; (801a27c <UTIL_TIMER_Start+0xd4>)
 801a220:	691b      	ldr	r3, [r3, #16]
 801a222:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a224:	6878      	ldr	r0, [r7, #4]
 801a226:	f000 f9eb 	bl	801a600 <TimerInsertNewHeadTimer>
 801a22a:	e017      	b.n	801a25c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a22c:	4b13      	ldr	r3, [pc, #76]	; (801a27c <UTIL_TIMER_Start+0xd4>)
 801a22e:	699b      	ldr	r3, [r3, #24]
 801a230:	4798      	blx	r3
 801a232:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	681a      	ldr	r2, [r3, #0]
 801a238:	697b      	ldr	r3, [r7, #20]
 801a23a:	441a      	add	r2, r3
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	4b0e      	ldr	r3, [pc, #56]	; (801a280 <UTIL_TIMER_Start+0xd8>)
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	d203      	bcs.n	801a256 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a24e:	6878      	ldr	r0, [r7, #4]
 801a250:	f000 f9d6 	bl	801a600 <TimerInsertNewHeadTimer>
 801a254:	e002      	b.n	801a25c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a256:	6878      	ldr	r0, [r7, #4]
 801a258:	f000 f9a2 	bl	801a5a0 <TimerInsertTimer>
 801a25c:	69fb      	ldr	r3, [r7, #28]
 801a25e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	f383 8810 	msr	PRIMASK, r3
}
 801a266:	bf00      	nop
  {
 801a268:	e002      	b.n	801a270 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a26a:	2301      	movs	r3, #1
 801a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a274:	4618      	mov	r0, r3
 801a276:	3728      	adds	r7, #40	; 0x28
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	0801b674 	.word	0x0801b674
 801a280:	20000f88 	.word	0x20000f88

0801a284 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b088      	sub	sp, #32
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a28c:	2300      	movs	r3, #0
 801a28e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d05b      	beq.n	801a34e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a296:	f3ef 8310 	mrs	r3, PRIMASK
 801a29a:	60fb      	str	r3, [r7, #12]
  return(result);
 801a29c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a29e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2a0:	b672      	cpsid	i
}
 801a2a2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a2a4:	4b2d      	ldr	r3, [pc, #180]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a2aa:	4b2c      	ldr	r3, [pc, #176]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	2201      	movs	r2, #1
 801a2b4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a2b6:	4b29      	ldr	r3, [pc, #164]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d041      	beq.n	801a342 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a2c4:	4b25      	ldr	r3, [pc, #148]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	687a      	ldr	r2, [r7, #4]
 801a2ca:	429a      	cmp	r2, r3
 801a2cc:	d134      	bne.n	801a338 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a2ce:	4b23      	ldr	r3, [pc, #140]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	2200      	movs	r2, #0
 801a2d4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a2d6:	4b21      	ldr	r3, [pc, #132]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	695b      	ldr	r3, [r3, #20]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d00a      	beq.n	801a2f6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a2e0:	4b1e      	ldr	r3, [pc, #120]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	695b      	ldr	r3, [r3, #20]
 801a2e6:	4a1d      	ldr	r2, [pc, #116]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2e8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a2ea:	4b1c      	ldr	r3, [pc, #112]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f000 f92c 	bl	801a54c <TimerSetTimeout>
 801a2f4:	e023      	b.n	801a33e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a2f6:	4b1a      	ldr	r3, [pc, #104]	; (801a360 <UTIL_TIMER_Stop+0xdc>)
 801a2f8:	68db      	ldr	r3, [r3, #12]
 801a2fa:	4798      	blx	r3
            TimerListHead = NULL;
 801a2fc:	4b17      	ldr	r3, [pc, #92]	; (801a35c <UTIL_TIMER_Stop+0xd8>)
 801a2fe:	2200      	movs	r2, #0
 801a300:	601a      	str	r2, [r3, #0]
 801a302:	e01c      	b.n	801a33e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a304:	697a      	ldr	r2, [r7, #20]
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	429a      	cmp	r2, r3
 801a30a:	d110      	bne.n	801a32e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a30c:	697b      	ldr	r3, [r7, #20]
 801a30e:	695b      	ldr	r3, [r3, #20]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d006      	beq.n	801a322 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	695b      	ldr	r3, [r3, #20]
 801a318:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a31a:	69bb      	ldr	r3, [r7, #24]
 801a31c:	697a      	ldr	r2, [r7, #20]
 801a31e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a320:	e00d      	b.n	801a33e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a322:	2300      	movs	r3, #0
 801a324:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a326:	69bb      	ldr	r3, [r7, #24]
 801a328:	697a      	ldr	r2, [r7, #20]
 801a32a:	615a      	str	r2, [r3, #20]
            break;
 801a32c:	e007      	b.n	801a33e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a32e:	697b      	ldr	r3, [r7, #20]
 801a330:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a332:	697b      	ldr	r3, [r7, #20]
 801a334:	695b      	ldr	r3, [r3, #20]
 801a336:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a338:	697b      	ldr	r3, [r7, #20]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d1e2      	bne.n	801a304 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a33e:	2300      	movs	r3, #0
 801a340:	77fb      	strb	r3, [r7, #31]
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	f383 8810 	msr	PRIMASK, r3
}
 801a34c:	e001      	b.n	801a352 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a34e:	2301      	movs	r3, #1
 801a350:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a352:	7ffb      	ldrb	r3, [r7, #31]
}
 801a354:	4618      	mov	r0, r3
 801a356:	3720      	adds	r7, #32
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	20000f88 	.word	0x20000f88
 801a360:	0801b674 	.word	0x0801b674

0801a364 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
 801a36c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a36e:	2300      	movs	r3, #0
 801a370:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d102      	bne.n	801a37e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a378:	2301      	movs	r3, #1
 801a37a:	73fb      	strb	r3, [r7, #15]
 801a37c:	e014      	b.n	801a3a8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a37e:	4b0d      	ldr	r3, [pc, #52]	; (801a3b4 <UTIL_TIMER_SetPeriod+0x50>)
 801a380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a382:	6838      	ldr	r0, [r7, #0]
 801a384:	4798      	blx	r3
 801a386:	4602      	mov	r2, r0
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f000 f8c1 	bl	801a514 <TimerExists>
 801a392:	4603      	mov	r3, r0
 801a394:	2b00      	cmp	r3, #0
 801a396:	d007      	beq.n	801a3a8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a398:	6878      	ldr	r0, [r7, #4]
 801a39a:	f7ff ff73 	bl	801a284 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a39e:	6878      	ldr	r0, [r7, #4]
 801a3a0:	f7ff ff02 	bl	801a1a8 <UTIL_TIMER_Start>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3710      	adds	r7, #16
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	bd80      	pop	{r7, pc}
 801a3b2:	bf00      	nop
 801a3b4:	0801b674 	.word	0x0801b674

0801a3b8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a3b8:	b590      	push	{r4, r7, lr}
 801a3ba:	b089      	sub	sp, #36	; 0x24
 801a3bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3be:	f3ef 8310 	mrs	r3, PRIMASK
 801a3c2:	60bb      	str	r3, [r7, #8]
  return(result);
 801a3c4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a3c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3c8:	b672      	cpsid	i
}
 801a3ca:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a3cc:	4b38      	ldr	r3, [pc, #224]	; (801a4b0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3ce:	695b      	ldr	r3, [r3, #20]
 801a3d0:	4798      	blx	r3
 801a3d2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a3d4:	4b36      	ldr	r3, [pc, #216]	; (801a4b0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3d6:	691b      	ldr	r3, [r3, #16]
 801a3d8:	4798      	blx	r3
 801a3da:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a3dc:	693a      	ldr	r2, [r7, #16]
 801a3de:	697b      	ldr	r3, [r7, #20]
 801a3e0:	1ad3      	subs	r3, r2, r3
 801a3e2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a3e4:	4b33      	ldr	r3, [pc, #204]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d037      	beq.n	801a45c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a3ec:	4b31      	ldr	r3, [pc, #196]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a3f2:	69fb      	ldr	r3, [r7, #28]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	68fa      	ldr	r2, [r7, #12]
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	d206      	bcs.n	801a40a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a3fc:	69fb      	ldr	r3, [r7, #28]
 801a3fe:	681a      	ldr	r2, [r3, #0]
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	1ad2      	subs	r2, r2, r3
 801a404:	69fb      	ldr	r3, [r7, #28]
 801a406:	601a      	str	r2, [r3, #0]
 801a408:	e002      	b.n	801a410 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a40a:	69fb      	ldr	r3, [r7, #28]
 801a40c:	2200      	movs	r2, #0
 801a40e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	695b      	ldr	r3, [r3, #20]
 801a414:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d1ea      	bne.n	801a3f2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a41c:	e01e      	b.n	801a45c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a41e:	4b25      	ldr	r3, [pc, #148]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a424:	4b23      	ldr	r3, [pc, #140]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	695b      	ldr	r3, [r3, #20]
 801a42a:	4a22      	ldr	r2, [pc, #136]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a42c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a42e:	69fb      	ldr	r3, [r7, #28]
 801a430:	2200      	movs	r2, #0
 801a432:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a434:	69fb      	ldr	r3, [r7, #28]
 801a436:	2200      	movs	r2, #0
 801a438:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a43a:	69fb      	ldr	r3, [r7, #28]
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	69fa      	ldr	r2, [r7, #28]
 801a440:	6912      	ldr	r2, [r2, #16]
 801a442:	4610      	mov	r0, r2
 801a444:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a446:	69fb      	ldr	r3, [r7, #28]
 801a448:	7adb      	ldrb	r3, [r3, #11]
 801a44a:	2b01      	cmp	r3, #1
 801a44c:	d106      	bne.n	801a45c <UTIL_TIMER_IRQ_Handler+0xa4>
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	7a9b      	ldrb	r3, [r3, #10]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d102      	bne.n	801a45c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a456:	69f8      	ldr	r0, [r7, #28]
 801a458:	f7ff fea6 	bl	801a1a8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a45c:	4b15      	ldr	r3, [pc, #84]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d00d      	beq.n	801a480 <UTIL_TIMER_IRQ_Handler+0xc8>
 801a464:	4b13      	ldr	r3, [pc, #76]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d0d7      	beq.n	801a41e <UTIL_TIMER_IRQ_Handler+0x66>
 801a46e:	4b11      	ldr	r3, [pc, #68]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	681c      	ldr	r4, [r3, #0]
 801a474:	4b0e      	ldr	r3, [pc, #56]	; (801a4b0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a476:	699b      	ldr	r3, [r3, #24]
 801a478:	4798      	blx	r3
 801a47a:	4603      	mov	r3, r0
 801a47c:	429c      	cmp	r4, r3
 801a47e:	d3ce      	bcc.n	801a41e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a480:	4b0c      	ldr	r3, [pc, #48]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d009      	beq.n	801a49c <UTIL_TIMER_IRQ_Handler+0xe4>
 801a488:	4b0a      	ldr	r3, [pc, #40]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	7a1b      	ldrb	r3, [r3, #8]
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d104      	bne.n	801a49c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a492:	4b08      	ldr	r3, [pc, #32]	; (801a4b4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	4618      	mov	r0, r3
 801a498:	f000 f858 	bl	801a54c <TimerSetTimeout>
 801a49c:	69bb      	ldr	r3, [r7, #24]
 801a49e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	f383 8810 	msr	PRIMASK, r3
}
 801a4a6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a4a8:	bf00      	nop
 801a4aa:	3724      	adds	r7, #36	; 0x24
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	bd90      	pop	{r4, r7, pc}
 801a4b0:	0801b674 	.word	0x0801b674
 801a4b4:	20000f88 	.word	0x20000f88

0801a4b8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b082      	sub	sp, #8
 801a4bc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a4be:	4b06      	ldr	r3, [pc, #24]	; (801a4d8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a4c0:	69db      	ldr	r3, [r3, #28]
 801a4c2:	4798      	blx	r3
 801a4c4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a4c6:	4b04      	ldr	r3, [pc, #16]	; (801a4d8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4ca:	6878      	ldr	r0, [r7, #4]
 801a4cc:	4798      	blx	r3
 801a4ce:	4603      	mov	r3, r0
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3708      	adds	r7, #8
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}
 801a4d8:	0801b674 	.word	0x0801b674

0801a4dc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b084      	sub	sp, #16
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a4e4:	4b0a      	ldr	r3, [pc, #40]	; (801a510 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4e6:	69db      	ldr	r3, [r3, #28]
 801a4e8:	4798      	blx	r3
 801a4ea:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a4ec:	4b08      	ldr	r3, [pc, #32]	; (801a510 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f0:	6878      	ldr	r0, [r7, #4]
 801a4f2:	4798      	blx	r3
 801a4f4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a4f6:	4b06      	ldr	r3, [pc, #24]	; (801a510 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4fa:	68f9      	ldr	r1, [r7, #12]
 801a4fc:	68ba      	ldr	r2, [r7, #8]
 801a4fe:	1a8a      	subs	r2, r1, r2
 801a500:	4610      	mov	r0, r2
 801a502:	4798      	blx	r3
 801a504:	4603      	mov	r3, r0
}
 801a506:	4618      	mov	r0, r3
 801a508:	3710      	adds	r7, #16
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd80      	pop	{r7, pc}
 801a50e:	bf00      	nop
 801a510:	0801b674 	.word	0x0801b674

0801a514 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a514:	b480      	push	{r7}
 801a516:	b085      	sub	sp, #20
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a51c:	4b0a      	ldr	r3, [pc, #40]	; (801a548 <TimerExists+0x34>)
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a522:	e008      	b.n	801a536 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a524:	68fa      	ldr	r2, [r7, #12]
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	429a      	cmp	r2, r3
 801a52a:	d101      	bne.n	801a530 <TimerExists+0x1c>
    {
      return true;
 801a52c:	2301      	movs	r3, #1
 801a52e:	e006      	b.n	801a53e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	695b      	ldr	r3, [r3, #20]
 801a534:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d1f3      	bne.n	801a524 <TimerExists+0x10>
  }
  return false;
 801a53c:	2300      	movs	r3, #0
}
 801a53e:	4618      	mov	r0, r3
 801a540:	3714      	adds	r7, #20
 801a542:	46bd      	mov	sp, r7
 801a544:	bc80      	pop	{r7}
 801a546:	4770      	bx	lr
 801a548:	20000f88 	.word	0x20000f88

0801a54c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a54c:	b590      	push	{r4, r7, lr}
 801a54e:	b085      	sub	sp, #20
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a554:	4b11      	ldr	r3, [pc, #68]	; (801a59c <TimerSetTimeout+0x50>)
 801a556:	6a1b      	ldr	r3, [r3, #32]
 801a558:	4798      	blx	r3
 801a55a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	2201      	movs	r2, #1
 801a560:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681c      	ldr	r4, [r3, #0]
 801a566:	4b0d      	ldr	r3, [pc, #52]	; (801a59c <TimerSetTimeout+0x50>)
 801a568:	699b      	ldr	r3, [r3, #24]
 801a56a:	4798      	blx	r3
 801a56c:	4602      	mov	r2, r0
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	4413      	add	r3, r2
 801a572:	429c      	cmp	r4, r3
 801a574:	d207      	bcs.n	801a586 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a576:	4b09      	ldr	r3, [pc, #36]	; (801a59c <TimerSetTimeout+0x50>)
 801a578:	699b      	ldr	r3, [r3, #24]
 801a57a:	4798      	blx	r3
 801a57c:	4602      	mov	r2, r0
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	441a      	add	r2, r3
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a586:	4b05      	ldr	r3, [pc, #20]	; (801a59c <TimerSetTimeout+0x50>)
 801a588:	689b      	ldr	r3, [r3, #8]
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	6812      	ldr	r2, [r2, #0]
 801a58e:	4610      	mov	r0, r2
 801a590:	4798      	blx	r3
}
 801a592:	bf00      	nop
 801a594:	3714      	adds	r7, #20
 801a596:	46bd      	mov	sp, r7
 801a598:	bd90      	pop	{r4, r7, pc}
 801a59a:	bf00      	nop
 801a59c:	0801b674 	.word	0x0801b674

0801a5a0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b085      	sub	sp, #20
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a5a8:	4b14      	ldr	r3, [pc, #80]	; (801a5fc <TimerInsertTimer+0x5c>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a5ae:	4b13      	ldr	r3, [pc, #76]	; (801a5fc <TimerInsertTimer+0x5c>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	695b      	ldr	r3, [r3, #20]
 801a5b4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a5b6:	e012      	b.n	801a5de <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681a      	ldr	r2, [r3, #0]
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	d905      	bls.n	801a5d0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a5c4:	68bb      	ldr	r3, [r7, #8]
 801a5c6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	695b      	ldr	r3, [r3, #20]
 801a5cc:	60bb      	str	r3, [r7, #8]
 801a5ce:	e006      	b.n	801a5de <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	687a      	ldr	r2, [r7, #4]
 801a5d4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	68ba      	ldr	r2, [r7, #8]
 801a5da:	615a      	str	r2, [r3, #20]
        return;
 801a5dc:	e009      	b.n	801a5f2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	695b      	ldr	r3, [r3, #20]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d1e8      	bne.n	801a5b8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a5e6:	68fb      	ldr	r3, [r7, #12]
 801a5e8:	687a      	ldr	r2, [r7, #4]
 801a5ea:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	615a      	str	r2, [r3, #20]
}
 801a5f2:	3714      	adds	r7, #20
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bc80      	pop	{r7}
 801a5f8:	4770      	bx	lr
 801a5fa:	bf00      	nop
 801a5fc:	20000f88 	.word	0x20000f88

0801a600 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b084      	sub	sp, #16
 801a604:	af00      	add	r7, sp, #0
 801a606:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a608:	4b0b      	ldr	r3, [pc, #44]	; (801a638 <TimerInsertNewHeadTimer+0x38>)
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d002      	beq.n	801a61a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a614:	68fb      	ldr	r3, [r7, #12]
 801a616:	2200      	movs	r2, #0
 801a618:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	68fa      	ldr	r2, [r7, #12]
 801a61e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a620:	4a05      	ldr	r2, [pc, #20]	; (801a638 <TimerInsertNewHeadTimer+0x38>)
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a626:	4b04      	ldr	r3, [pc, #16]	; (801a638 <TimerInsertNewHeadTimer+0x38>)
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7ff ff8e 	bl	801a54c <TimerSetTimeout>
}
 801a630:	bf00      	nop
 801a632:	3710      	adds	r7, #16
 801a634:	46bd      	mov	sp, r7
 801a636:	bd80      	pop	{r7, pc}
 801a638:	20000f88 	.word	0x20000f88

0801a63c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a640:	2218      	movs	r2, #24
 801a642:	2100      	movs	r1, #0
 801a644:	4807      	ldr	r0, [pc, #28]	; (801a664 <UTIL_ADV_TRACE_Init+0x28>)
 801a646:	f7ff f8fe 	bl	8019846 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a64a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a64e:	2100      	movs	r1, #0
 801a650:	4805      	ldr	r0, [pc, #20]	; (801a668 <UTIL_ADV_TRACE_Init+0x2c>)
 801a652:	f7ff f8f8 	bl	8019846 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a656:	4b05      	ldr	r3, [pc, #20]	; (801a66c <UTIL_ADV_TRACE_Init+0x30>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	4805      	ldr	r0, [pc, #20]	; (801a670 <UTIL_ADV_TRACE_Init+0x34>)
 801a65c:	4798      	blx	r3
 801a65e:	4603      	mov	r3, r0
}
 801a660:	4618      	mov	r0, r3
 801a662:	bd80      	pop	{r7, pc}
 801a664:	20000f8c 	.word	0x20000f8c
 801a668:	20000fa4 	.word	0x20000fa4
 801a66c:	0801b6b4 	.word	0x0801b6b4
 801a670:	0801a8e1 	.word	0x0801a8e1

0801a674 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a674:	b480      	push	{r7}
 801a676:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a678:	4b06      	ldr	r3, [pc, #24]	; (801a694 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a67a:	8a5a      	ldrh	r2, [r3, #18]
 801a67c:	4b05      	ldr	r3, [pc, #20]	; (801a694 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a67e:	8a1b      	ldrh	r3, [r3, #16]
 801a680:	429a      	cmp	r2, r3
 801a682:	d101      	bne.n	801a688 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a684:	2301      	movs	r3, #1
 801a686:	e000      	b.n	801a68a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a688:	2300      	movs	r3, #0
}
 801a68a:	4618      	mov	r0, r3
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bc80      	pop	{r7}
 801a690:	4770      	bx	lr
 801a692:	bf00      	nop
 801a694:	20000f8c 	.word	0x20000f8c

0801a698 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a698:	b408      	push	{r3}
 801a69a:	b580      	push	{r7, lr}
 801a69c:	b08d      	sub	sp, #52	; 0x34
 801a69e:	af00      	add	r7, sp, #0
 801a6a0:	60f8      	str	r0, [r7, #12]
 801a6a2:	60b9      	str	r1, [r7, #8]
 801a6a4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a6ae:	4b38      	ldr	r3, [pc, #224]	; (801a790 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6b0:	7a1b      	ldrb	r3, [r3, #8]
 801a6b2:	461a      	mov	r2, r3
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	4293      	cmp	r3, r2
 801a6b8:	d902      	bls.n	801a6c0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a6ba:	f06f 0304 	mvn.w	r3, #4
 801a6be:	e05f      	b.n	801a780 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a6c0:	4b33      	ldr	r3, [pc, #204]	; (801a790 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6c2:	68da      	ldr	r2, [r3, #12]
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	4013      	ands	r3, r2
 801a6c8:	68ba      	ldr	r2, [r7, #8]
 801a6ca:	429a      	cmp	r2, r3
 801a6cc:	d002      	beq.n	801a6d4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a6ce:	f06f 0305 	mvn.w	r3, #5
 801a6d2:	e055      	b.n	801a780 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a6d4:	4b2e      	ldr	r3, [pc, #184]	; (801a790 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6d6:	685b      	ldr	r3, [r3, #4]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d00a      	beq.n	801a6f2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d007      	beq.n	801a6f2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a6e2:	4b2b      	ldr	r3, [pc, #172]	; (801a790 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6e4:	685b      	ldr	r3, [r3, #4]
 801a6e6:	f107 0116 	add.w	r1, r7, #22
 801a6ea:	f107 0218 	add.w	r2, r7, #24
 801a6ee:	4610      	mov	r0, r2
 801a6f0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a6f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a6fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a700:	4824      	ldr	r0, [pc, #144]	; (801a794 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a702:	f7ff fb2f 	bl	8019d64 <tiny_vsnprintf_like>
 801a706:	4603      	mov	r3, r0
 801a708:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a70a:	f000 f9f3 	bl	801aaf4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a70e:	8afa      	ldrh	r2, [r7, #22]
 801a710:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a712:	4413      	add	r3, r2
 801a714:	b29b      	uxth	r3, r3
 801a716:	f107 0214 	add.w	r2, r7, #20
 801a71a:	4611      	mov	r1, r2
 801a71c:	4618      	mov	r0, r3
 801a71e:	f000 f96b 	bl	801a9f8 <TRACE_AllocateBufer>
 801a722:	4603      	mov	r3, r0
 801a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a728:	d026      	beq.n	801a778 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a72a:	2300      	movs	r3, #0
 801a72c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a72e:	e00f      	b.n	801a750 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a732:	8aba      	ldrh	r2, [r7, #20]
 801a734:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a738:	440b      	add	r3, r1
 801a73a:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a73e:	4b16      	ldr	r3, [pc, #88]	; (801a798 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a740:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a742:	8abb      	ldrh	r3, [r7, #20]
 801a744:	3301      	adds	r3, #1
 801a746:	b29b      	uxth	r3, r3
 801a748:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a74a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a74c:	3301      	adds	r3, #1
 801a74e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a750:	8afb      	ldrh	r3, [r7, #22]
 801a752:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a754:	429a      	cmp	r2, r3
 801a756:	d3eb      	bcc.n	801a730 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a758:	8abb      	ldrh	r3, [r7, #20]
 801a75a:	461a      	mov	r2, r3
 801a75c:	4b0e      	ldr	r3, [pc, #56]	; (801a798 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a75e:	18d0      	adds	r0, r2, r3
 801a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a764:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a768:	f7ff fafc 	bl	8019d64 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a76c:	f000 f9e0 	bl	801ab30 <TRACE_UnLock>

    return TRACE_Send();
 801a770:	f000 f832 	bl	801a7d8 <TRACE_Send>
 801a774:	4603      	mov	r3, r0
 801a776:	e003      	b.n	801a780 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a778:	f000 f9da 	bl	801ab30 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a77c:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a780:	4618      	mov	r0, r3
 801a782:	3734      	adds	r7, #52	; 0x34
 801a784:	46bd      	mov	sp, r7
 801a786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a78a:	b001      	add	sp, #4
 801a78c:	4770      	bx	lr
 801a78e:	bf00      	nop
 801a790:	20000f8c 	.word	0x20000f8c
 801a794:	200013a4 	.word	0x200013a4
 801a798:	20000fa4 	.word	0x20000fa4

0801a79c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a79c:	b480      	push	{r7}
 801a79e:	b083      	sub	sp, #12
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a7a4:	4a03      	ldr	r2, [pc, #12]	; (801a7b4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6053      	str	r3, [r2, #4]
}
 801a7aa:	bf00      	nop
 801a7ac:	370c      	adds	r7, #12
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bc80      	pop	{r7}
 801a7b2:	4770      	bx	lr
 801a7b4:	20000f8c 	.word	0x20000f8c

0801a7b8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	4603      	mov	r3, r0
 801a7c0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a7c2:	4a04      	ldr	r2, [pc, #16]	; (801a7d4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a7c4:	79fb      	ldrb	r3, [r7, #7]
 801a7c6:	7213      	strb	r3, [r2, #8]
}
 801a7c8:	bf00      	nop
 801a7ca:	370c      	adds	r7, #12
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bc80      	pop	{r7}
 801a7d0:	4770      	bx	lr
 801a7d2:	bf00      	nop
 801a7d4:	20000f8c 	.word	0x20000f8c

0801a7d8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b088      	sub	sp, #32
 801a7dc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a7de:	2300      	movs	r3, #0
 801a7e0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7e6:	f3ef 8310 	mrs	r3, PRIMASK
 801a7ea:	613b      	str	r3, [r7, #16]
  return(result);
 801a7ec:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a7ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7f0:	b672      	cpsid	i
}
 801a7f2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a7f4:	f000 f9ba 	bl	801ab6c <TRACE_IsLocked>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d15d      	bne.n	801a8ba <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a7fe:	f000 f979 	bl	801aaf4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a802:	4b34      	ldr	r3, [pc, #208]	; (801a8d4 <TRACE_Send+0xfc>)
 801a804:	8a1a      	ldrh	r2, [r3, #16]
 801a806:	4b33      	ldr	r3, [pc, #204]	; (801a8d4 <TRACE_Send+0xfc>)
 801a808:	8a5b      	ldrh	r3, [r3, #18]
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d04d      	beq.n	801a8aa <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a80e:	4b31      	ldr	r3, [pc, #196]	; (801a8d4 <TRACE_Send+0xfc>)
 801a810:	789b      	ldrb	r3, [r3, #2]
 801a812:	2b01      	cmp	r3, #1
 801a814:	d117      	bne.n	801a846 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a816:	4b2f      	ldr	r3, [pc, #188]	; (801a8d4 <TRACE_Send+0xfc>)
 801a818:	881a      	ldrh	r2, [r3, #0]
 801a81a:	4b2e      	ldr	r3, [pc, #184]	; (801a8d4 <TRACE_Send+0xfc>)
 801a81c:	8a1b      	ldrh	r3, [r3, #16]
 801a81e:	1ad3      	subs	r3, r2, r3
 801a820:	b29a      	uxth	r2, r3
 801a822:	4b2c      	ldr	r3, [pc, #176]	; (801a8d4 <TRACE_Send+0xfc>)
 801a824:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a826:	4b2b      	ldr	r3, [pc, #172]	; (801a8d4 <TRACE_Send+0xfc>)
 801a828:	2202      	movs	r2, #2
 801a82a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a82c:	4b29      	ldr	r3, [pc, #164]	; (801a8d4 <TRACE_Send+0xfc>)
 801a82e:	2200      	movs	r2, #0
 801a830:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a832:	4b28      	ldr	r3, [pc, #160]	; (801a8d4 <TRACE_Send+0xfc>)
 801a834:	8a9b      	ldrh	r3, [r3, #20]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d105      	bne.n	801a846 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a83a:	4b26      	ldr	r3, [pc, #152]	; (801a8d4 <TRACE_Send+0xfc>)
 801a83c:	2200      	movs	r2, #0
 801a83e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a840:	4b24      	ldr	r3, [pc, #144]	; (801a8d4 <TRACE_Send+0xfc>)
 801a842:	2200      	movs	r2, #0
 801a844:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a846:	4b23      	ldr	r3, [pc, #140]	; (801a8d4 <TRACE_Send+0xfc>)
 801a848:	789b      	ldrb	r3, [r3, #2]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d115      	bne.n	801a87a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a84e:	4b21      	ldr	r3, [pc, #132]	; (801a8d4 <TRACE_Send+0xfc>)
 801a850:	8a5a      	ldrh	r2, [r3, #18]
 801a852:	4b20      	ldr	r3, [pc, #128]	; (801a8d4 <TRACE_Send+0xfc>)
 801a854:	8a1b      	ldrh	r3, [r3, #16]
 801a856:	429a      	cmp	r2, r3
 801a858:	d908      	bls.n	801a86c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a85a:	4b1e      	ldr	r3, [pc, #120]	; (801a8d4 <TRACE_Send+0xfc>)
 801a85c:	8a5a      	ldrh	r2, [r3, #18]
 801a85e:	4b1d      	ldr	r3, [pc, #116]	; (801a8d4 <TRACE_Send+0xfc>)
 801a860:	8a1b      	ldrh	r3, [r3, #16]
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	b29a      	uxth	r2, r3
 801a866:	4b1b      	ldr	r3, [pc, #108]	; (801a8d4 <TRACE_Send+0xfc>)
 801a868:	829a      	strh	r2, [r3, #20]
 801a86a:	e006      	b.n	801a87a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a86c:	4b19      	ldr	r3, [pc, #100]	; (801a8d4 <TRACE_Send+0xfc>)
 801a86e:	8a1b      	ldrh	r3, [r3, #16]
 801a870:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a874:	b29a      	uxth	r2, r3
 801a876:	4b17      	ldr	r3, [pc, #92]	; (801a8d4 <TRACE_Send+0xfc>)
 801a878:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a87a:	4b16      	ldr	r3, [pc, #88]	; (801a8d4 <TRACE_Send+0xfc>)
 801a87c:	8a1b      	ldrh	r3, [r3, #16]
 801a87e:	461a      	mov	r2, r3
 801a880:	4b15      	ldr	r3, [pc, #84]	; (801a8d8 <TRACE_Send+0x100>)
 801a882:	4413      	add	r3, r2
 801a884:	61bb      	str	r3, [r7, #24]
 801a886:	697b      	ldr	r3, [r7, #20]
 801a888:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	f383 8810 	msr	PRIMASK, r3
}
 801a890:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a892:	f7e7 fb69 	bl	8001f68 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a896:	4b11      	ldr	r3, [pc, #68]	; (801a8dc <TRACE_Send+0x104>)
 801a898:	68db      	ldr	r3, [r3, #12]
 801a89a:	4a0e      	ldr	r2, [pc, #56]	; (801a8d4 <TRACE_Send+0xfc>)
 801a89c:	8a92      	ldrh	r2, [r2, #20]
 801a89e:	4611      	mov	r1, r2
 801a8a0:	69b8      	ldr	r0, [r7, #24]
 801a8a2:	4798      	blx	r3
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	77fb      	strb	r3, [r7, #31]
 801a8a8:	e00d      	b.n	801a8c6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a8aa:	f000 f941 	bl	801ab30 <TRACE_UnLock>
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	f383 8810 	msr	PRIMASK, r3
}
 801a8b8:	e005      	b.n	801a8c6 <TRACE_Send+0xee>
 801a8ba:	697b      	ldr	r3, [r7, #20]
 801a8bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	f383 8810 	msr	PRIMASK, r3
}
 801a8c4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a8c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	3720      	adds	r7, #32
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bd80      	pop	{r7, pc}
 801a8d2:	bf00      	nop
 801a8d4:	20000f8c 	.word	0x20000f8c
 801a8d8:	20000fa4 	.word	0x20000fa4
 801a8dc:	0801b6b4 	.word	0x0801b6b4

0801a8e0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b088      	sub	sp, #32
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8ec:	f3ef 8310 	mrs	r3, PRIMASK
 801a8f0:	617b      	str	r3, [r7, #20]
  return(result);
 801a8f2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a8f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8f6:	b672      	cpsid	i
}
 801a8f8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a8fa:	4b3c      	ldr	r3, [pc, #240]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a8fc:	789b      	ldrb	r3, [r3, #2]
 801a8fe:	2b02      	cmp	r3, #2
 801a900:	d106      	bne.n	801a910 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a902:	4b3a      	ldr	r3, [pc, #232]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a904:	2200      	movs	r2, #0
 801a906:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a908:	4b38      	ldr	r3, [pc, #224]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a90a:	2200      	movs	r2, #0
 801a90c:	821a      	strh	r2, [r3, #16]
 801a90e:	e00a      	b.n	801a926 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a910:	4b36      	ldr	r3, [pc, #216]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a912:	8a1a      	ldrh	r2, [r3, #16]
 801a914:	4b35      	ldr	r3, [pc, #212]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a916:	8a9b      	ldrh	r3, [r3, #20]
 801a918:	4413      	add	r3, r2
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a920:	b29a      	uxth	r2, r3
 801a922:	4b32      	ldr	r3, [pc, #200]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a924:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a926:	4b31      	ldr	r3, [pc, #196]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a928:	8a1a      	ldrh	r2, [r3, #16]
 801a92a:	4b30      	ldr	r3, [pc, #192]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a92c:	8a5b      	ldrh	r3, [r3, #18]
 801a92e:	429a      	cmp	r2, r3
 801a930:	d04d      	beq.n	801a9ce <TRACE_TxCpltCallback+0xee>
 801a932:	4b2e      	ldr	r3, [pc, #184]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a934:	8adb      	ldrh	r3, [r3, #22]
 801a936:	2b01      	cmp	r3, #1
 801a938:	d149      	bne.n	801a9ce <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a93a:	4b2c      	ldr	r3, [pc, #176]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a93c:	789b      	ldrb	r3, [r3, #2]
 801a93e:	2b01      	cmp	r3, #1
 801a940:	d117      	bne.n	801a972 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a942:	4b2a      	ldr	r3, [pc, #168]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a944:	881a      	ldrh	r2, [r3, #0]
 801a946:	4b29      	ldr	r3, [pc, #164]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a948:	8a1b      	ldrh	r3, [r3, #16]
 801a94a:	1ad3      	subs	r3, r2, r3
 801a94c:	b29a      	uxth	r2, r3
 801a94e:	4b27      	ldr	r3, [pc, #156]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a950:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a952:	4b26      	ldr	r3, [pc, #152]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a954:	2202      	movs	r2, #2
 801a956:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a958:	4b24      	ldr	r3, [pc, #144]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a95a:	2200      	movs	r2, #0
 801a95c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a95e:	4b23      	ldr	r3, [pc, #140]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a960:	8a9b      	ldrh	r3, [r3, #20]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d105      	bne.n	801a972 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a966:	4b21      	ldr	r3, [pc, #132]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a968:	2200      	movs	r2, #0
 801a96a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a96c:	4b1f      	ldr	r3, [pc, #124]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a96e:	2200      	movs	r2, #0
 801a970:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a972:	4b1e      	ldr	r3, [pc, #120]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a974:	789b      	ldrb	r3, [r3, #2]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d115      	bne.n	801a9a6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a97a:	4b1c      	ldr	r3, [pc, #112]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a97c:	8a5a      	ldrh	r2, [r3, #18]
 801a97e:	4b1b      	ldr	r3, [pc, #108]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a980:	8a1b      	ldrh	r3, [r3, #16]
 801a982:	429a      	cmp	r2, r3
 801a984:	d908      	bls.n	801a998 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a986:	4b19      	ldr	r3, [pc, #100]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a988:	8a5a      	ldrh	r2, [r3, #18]
 801a98a:	4b18      	ldr	r3, [pc, #96]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a98c:	8a1b      	ldrh	r3, [r3, #16]
 801a98e:	1ad3      	subs	r3, r2, r3
 801a990:	b29a      	uxth	r2, r3
 801a992:	4b16      	ldr	r3, [pc, #88]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a994:	829a      	strh	r2, [r3, #20]
 801a996:	e006      	b.n	801a9a6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a998:	4b14      	ldr	r3, [pc, #80]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a99a:	8a1b      	ldrh	r3, [r3, #16]
 801a99c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a9a0:	b29a      	uxth	r2, r3
 801a9a2:	4b12      	ldr	r3, [pc, #72]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a9a4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a9a6:	4b11      	ldr	r3, [pc, #68]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a9a8:	8a1b      	ldrh	r3, [r3, #16]
 801a9aa:	461a      	mov	r2, r3
 801a9ac:	4b10      	ldr	r3, [pc, #64]	; (801a9f0 <TRACE_TxCpltCallback+0x110>)
 801a9ae:	4413      	add	r3, r2
 801a9b0:	61fb      	str	r3, [r7, #28]
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9b6:	693b      	ldr	r3, [r7, #16]
 801a9b8:	f383 8810 	msr	PRIMASK, r3
}
 801a9bc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a9be:	4b0d      	ldr	r3, [pc, #52]	; (801a9f4 <TRACE_TxCpltCallback+0x114>)
 801a9c0:	68db      	ldr	r3, [r3, #12]
 801a9c2:	4a0a      	ldr	r2, [pc, #40]	; (801a9ec <TRACE_TxCpltCallback+0x10c>)
 801a9c4:	8a92      	ldrh	r2, [r2, #20]
 801a9c6:	4611      	mov	r1, r2
 801a9c8:	69f8      	ldr	r0, [r7, #28]
 801a9ca:	4798      	blx	r3
 801a9cc:	e00a      	b.n	801a9e4 <TRACE_TxCpltCallback+0x104>
 801a9ce:	69bb      	ldr	r3, [r7, #24]
 801a9d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	f383 8810 	msr	PRIMASK, r3
}
 801a9d8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a9da:	f7e7 facd 	bl	8001f78 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a9de:	f000 f8a7 	bl	801ab30 <TRACE_UnLock>
  }
}
 801a9e2:	bf00      	nop
 801a9e4:	bf00      	nop
 801a9e6:	3720      	adds	r7, #32
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}
 801a9ec:	20000f8c 	.word	0x20000f8c
 801a9f0:	20000fa4 	.word	0x20000fa4
 801a9f4:	0801b6b4 	.word	0x0801b6b4

0801a9f8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801a9f8:	b480      	push	{r7}
 801a9fa:	b087      	sub	sp, #28
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	4603      	mov	r3, r0
 801aa00:	6039      	str	r1, [r7, #0]
 801aa02:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801aa04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa08:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa0a:	f3ef 8310 	mrs	r3, PRIMASK
 801aa0e:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa10:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aa12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa14:	b672      	cpsid	i
}
 801aa16:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aa18:	4b35      	ldr	r3, [pc, #212]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa1a:	8a5a      	ldrh	r2, [r3, #18]
 801aa1c:	4b34      	ldr	r3, [pc, #208]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa1e:	8a1b      	ldrh	r3, [r3, #16]
 801aa20:	429a      	cmp	r2, r3
 801aa22:	d11b      	bne.n	801aa5c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa24:	4b32      	ldr	r3, [pc, #200]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa26:	8a5b      	ldrh	r3, [r3, #18]
 801aa28:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa2c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801aa2e:	88fa      	ldrh	r2, [r7, #6]
 801aa30:	8afb      	ldrh	r3, [r7, #22]
 801aa32:	429a      	cmp	r2, r3
 801aa34:	d33a      	bcc.n	801aaac <TRACE_AllocateBufer+0xb4>
 801aa36:	4b2e      	ldr	r3, [pc, #184]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa38:	8a1b      	ldrh	r3, [r3, #16]
 801aa3a:	88fa      	ldrh	r2, [r7, #6]
 801aa3c:	429a      	cmp	r2, r3
 801aa3e:	d235      	bcs.n	801aaac <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa40:	4b2b      	ldr	r3, [pc, #172]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa42:	2201      	movs	r2, #1
 801aa44:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa46:	4b2a      	ldr	r3, [pc, #168]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa48:	8a5a      	ldrh	r2, [r3, #18]
 801aa4a:	4b29      	ldr	r3, [pc, #164]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa4c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa4e:	4b28      	ldr	r3, [pc, #160]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa50:	8a1b      	ldrh	r3, [r3, #16]
 801aa52:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa54:	4b26      	ldr	r3, [pc, #152]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa56:	2200      	movs	r2, #0
 801aa58:	825a      	strh	r2, [r3, #18]
 801aa5a:	e027      	b.n	801aaac <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801aa5c:	4b24      	ldr	r3, [pc, #144]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa5e:	8a5a      	ldrh	r2, [r3, #18]
 801aa60:	4b23      	ldr	r3, [pc, #140]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa62:	8a1b      	ldrh	r3, [r3, #16]
 801aa64:	429a      	cmp	r2, r3
 801aa66:	d91b      	bls.n	801aaa0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa68:	4b21      	ldr	r3, [pc, #132]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa6a:	8a5b      	ldrh	r3, [r3, #18]
 801aa6c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa70:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801aa72:	88fa      	ldrh	r2, [r7, #6]
 801aa74:	8afb      	ldrh	r3, [r7, #22]
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d318      	bcc.n	801aaac <TRACE_AllocateBufer+0xb4>
 801aa7a:	4b1d      	ldr	r3, [pc, #116]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa7c:	8a1b      	ldrh	r3, [r3, #16]
 801aa7e:	88fa      	ldrh	r2, [r7, #6]
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d213      	bcs.n	801aaac <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa84:	4b1a      	ldr	r3, [pc, #104]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa86:	2201      	movs	r2, #1
 801aa88:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa8a:	4b19      	ldr	r3, [pc, #100]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa8c:	8a5a      	ldrh	r2, [r3, #18]
 801aa8e:	4b18      	ldr	r3, [pc, #96]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa90:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa92:	4b17      	ldr	r3, [pc, #92]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa94:	8a1b      	ldrh	r3, [r3, #16]
 801aa96:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa98:	4b15      	ldr	r3, [pc, #84]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	825a      	strh	r2, [r3, #18]
 801aa9e:	e005      	b.n	801aaac <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801aaa0:	4b13      	ldr	r3, [pc, #76]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aaa2:	8a1a      	ldrh	r2, [r3, #16]
 801aaa4:	4b12      	ldr	r3, [pc, #72]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aaa6:	8a5b      	ldrh	r3, [r3, #18]
 801aaa8:	1ad3      	subs	r3, r2, r3
 801aaaa:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801aaac:	8afa      	ldrh	r2, [r7, #22]
 801aaae:	88fb      	ldrh	r3, [r7, #6]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d90f      	bls.n	801aad4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801aab4:	4b0e      	ldr	r3, [pc, #56]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aab6:	8a5a      	ldrh	r2, [r3, #18]
 801aab8:	683b      	ldr	r3, [r7, #0]
 801aaba:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aabc:	4b0c      	ldr	r3, [pc, #48]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aabe:	8a5a      	ldrh	r2, [r3, #18]
 801aac0:	88fb      	ldrh	r3, [r7, #6]
 801aac2:	4413      	add	r3, r2
 801aac4:	b29b      	uxth	r3, r3
 801aac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aaca:	b29a      	uxth	r2, r3
 801aacc:	4b08      	ldr	r3, [pc, #32]	; (801aaf0 <TRACE_AllocateBufer+0xf8>)
 801aace:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801aad0:	2300      	movs	r3, #0
 801aad2:	82bb      	strh	r3, [r7, #20]
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aad8:	68bb      	ldr	r3, [r7, #8]
 801aada:	f383 8810 	msr	PRIMASK, r3
}
 801aade:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801aae0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	371c      	adds	r7, #28
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bc80      	pop	{r7}
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop
 801aaf0:	20000f8c 	.word	0x20000f8c

0801aaf4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801aaf4:	b480      	push	{r7}
 801aaf6:	b085      	sub	sp, #20
 801aaf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aafa:	f3ef 8310 	mrs	r3, PRIMASK
 801aafe:	607b      	str	r3, [r7, #4]
  return(result);
 801ab00:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ab02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab04:	b672      	cpsid	i
}
 801ab06:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ab08:	4b08      	ldr	r3, [pc, #32]	; (801ab2c <TRACE_Lock+0x38>)
 801ab0a:	8adb      	ldrh	r3, [r3, #22]
 801ab0c:	3301      	adds	r3, #1
 801ab0e:	b29a      	uxth	r2, r3
 801ab10:	4b06      	ldr	r3, [pc, #24]	; (801ab2c <TRACE_Lock+0x38>)
 801ab12:	82da      	strh	r2, [r3, #22]
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	f383 8810 	msr	PRIMASK, r3
}
 801ab1e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ab20:	bf00      	nop
 801ab22:	3714      	adds	r7, #20
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bc80      	pop	{r7}
 801ab28:	4770      	bx	lr
 801ab2a:	bf00      	nop
 801ab2c:	20000f8c 	.word	0x20000f8c

0801ab30 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ab30:	b480      	push	{r7}
 801ab32:	b085      	sub	sp, #20
 801ab34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab36:	f3ef 8310 	mrs	r3, PRIMASK
 801ab3a:	607b      	str	r3, [r7, #4]
  return(result);
 801ab3c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ab3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab40:	b672      	cpsid	i
}
 801ab42:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ab44:	4b08      	ldr	r3, [pc, #32]	; (801ab68 <TRACE_UnLock+0x38>)
 801ab46:	8adb      	ldrh	r3, [r3, #22]
 801ab48:	3b01      	subs	r3, #1
 801ab4a:	b29a      	uxth	r2, r3
 801ab4c:	4b06      	ldr	r3, [pc, #24]	; (801ab68 <TRACE_UnLock+0x38>)
 801ab4e:	82da      	strh	r2, [r3, #22]
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	f383 8810 	msr	PRIMASK, r3
}
 801ab5a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ab5c:	bf00      	nop
 801ab5e:	3714      	adds	r7, #20
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bc80      	pop	{r7}
 801ab64:	4770      	bx	lr
 801ab66:	bf00      	nop
 801ab68:	20000f8c 	.word	0x20000f8c

0801ab6c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ab6c:	b480      	push	{r7}
 801ab6e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ab70:	4b05      	ldr	r3, [pc, #20]	; (801ab88 <TRACE_IsLocked+0x1c>)
 801ab72:	8adb      	ldrh	r3, [r3, #22]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	bf14      	ite	ne
 801ab78:	2301      	movne	r3, #1
 801ab7a:	2300      	moveq	r3, #0
 801ab7c:	b2db      	uxtb	r3, r3
}
 801ab7e:	4618      	mov	r0, r3
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bc80      	pop	{r7}
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	20000f8c 	.word	0x20000f8c

0801ab8c <__libc_init_array>:
 801ab8c:	b570      	push	{r4, r5, r6, lr}
 801ab8e:	4d0d      	ldr	r5, [pc, #52]	; (801abc4 <__libc_init_array+0x38>)
 801ab90:	4c0d      	ldr	r4, [pc, #52]	; (801abc8 <__libc_init_array+0x3c>)
 801ab92:	1b64      	subs	r4, r4, r5
 801ab94:	10a4      	asrs	r4, r4, #2
 801ab96:	2600      	movs	r6, #0
 801ab98:	42a6      	cmp	r6, r4
 801ab9a:	d109      	bne.n	801abb0 <__libc_init_array+0x24>
 801ab9c:	4d0b      	ldr	r5, [pc, #44]	; (801abcc <__libc_init_array+0x40>)
 801ab9e:	4c0c      	ldr	r4, [pc, #48]	; (801abd0 <__libc_init_array+0x44>)
 801aba0:	f000 f8a2 	bl	801ace8 <_init>
 801aba4:	1b64      	subs	r4, r4, r5
 801aba6:	10a4      	asrs	r4, r4, #2
 801aba8:	2600      	movs	r6, #0
 801abaa:	42a6      	cmp	r6, r4
 801abac:	d105      	bne.n	801abba <__libc_init_array+0x2e>
 801abae:	bd70      	pop	{r4, r5, r6, pc}
 801abb0:	f855 3b04 	ldr.w	r3, [r5], #4
 801abb4:	4798      	blx	r3
 801abb6:	3601      	adds	r6, #1
 801abb8:	e7ee      	b.n	801ab98 <__libc_init_array+0xc>
 801abba:	f855 3b04 	ldr.w	r3, [r5], #4
 801abbe:	4798      	blx	r3
 801abc0:	3601      	adds	r6, #1
 801abc2:	e7f2      	b.n	801abaa <__libc_init_array+0x1e>
 801abc4:	0801bba4 	.word	0x0801bba4
 801abc8:	0801bba4 	.word	0x0801bba4
 801abcc:	0801bba4 	.word	0x0801bba4
 801abd0:	0801bba8 	.word	0x0801bba8

0801abd4 <memset>:
 801abd4:	4402      	add	r2, r0
 801abd6:	4603      	mov	r3, r0
 801abd8:	4293      	cmp	r3, r2
 801abda:	d100      	bne.n	801abde <memset+0xa>
 801abdc:	4770      	bx	lr
 801abde:	f803 1b01 	strb.w	r1, [r3], #1
 801abe2:	e7f9      	b.n	801abd8 <memset+0x4>
 801abe4:	0000      	movs	r0, r0
	...

0801abe8 <floor>:
 801abe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801abf0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801abf4:	2e13      	cmp	r6, #19
 801abf6:	4602      	mov	r2, r0
 801abf8:	460b      	mov	r3, r1
 801abfa:	4607      	mov	r7, r0
 801abfc:	460c      	mov	r4, r1
 801abfe:	4605      	mov	r5, r0
 801ac00:	dc34      	bgt.n	801ac6c <floor+0x84>
 801ac02:	2e00      	cmp	r6, #0
 801ac04:	da15      	bge.n	801ac32 <floor+0x4a>
 801ac06:	a334      	add	r3, pc, #208	; (adr r3, 801acd8 <floor+0xf0>)
 801ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0c:	f7e5 fac2 	bl	8000194 <__adddf3>
 801ac10:	2200      	movs	r2, #0
 801ac12:	2300      	movs	r3, #0
 801ac14:	f7e5 fcf2 	bl	80005fc <__aeabi_dcmpgt>
 801ac18:	b140      	cbz	r0, 801ac2c <floor+0x44>
 801ac1a:	2c00      	cmp	r4, #0
 801ac1c:	da59      	bge.n	801acd2 <floor+0xea>
 801ac1e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ac22:	ea57 0503 	orrs.w	r5, r7, r3
 801ac26:	d001      	beq.n	801ac2c <floor+0x44>
 801ac28:	4c2d      	ldr	r4, [pc, #180]	; (801ace0 <floor+0xf8>)
 801ac2a:	2500      	movs	r5, #0
 801ac2c:	4623      	mov	r3, r4
 801ac2e:	462f      	mov	r7, r5
 801ac30:	e025      	b.n	801ac7e <floor+0x96>
 801ac32:	4a2c      	ldr	r2, [pc, #176]	; (801ace4 <floor+0xfc>)
 801ac34:	fa42 f806 	asr.w	r8, r2, r6
 801ac38:	ea01 0208 	and.w	r2, r1, r8
 801ac3c:	4302      	orrs	r2, r0
 801ac3e:	d01e      	beq.n	801ac7e <floor+0x96>
 801ac40:	a325      	add	r3, pc, #148	; (adr r3, 801acd8 <floor+0xf0>)
 801ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac46:	f7e5 faa5 	bl	8000194 <__adddf3>
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	f7e5 fcd5 	bl	80005fc <__aeabi_dcmpgt>
 801ac52:	2800      	cmp	r0, #0
 801ac54:	d0ea      	beq.n	801ac2c <floor+0x44>
 801ac56:	2c00      	cmp	r4, #0
 801ac58:	bfbe      	ittt	lt
 801ac5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ac5e:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac62:	19a4      	addlt	r4, r4, r6
 801ac64:	ea24 0408 	bic.w	r4, r4, r8
 801ac68:	2500      	movs	r5, #0
 801ac6a:	e7df      	b.n	801ac2c <floor+0x44>
 801ac6c:	2e33      	cmp	r6, #51	; 0x33
 801ac6e:	dd0a      	ble.n	801ac86 <floor+0x9e>
 801ac70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac74:	d103      	bne.n	801ac7e <floor+0x96>
 801ac76:	f7e5 fa8d 	bl	8000194 <__adddf3>
 801ac7a:	4607      	mov	r7, r0
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	4638      	mov	r0, r7
 801ac80:	4619      	mov	r1, r3
 801ac82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac86:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ac8a:	f04f 32ff 	mov.w	r2, #4294967295
 801ac8e:	fa22 f808 	lsr.w	r8, r2, r8
 801ac92:	ea18 0f00 	tst.w	r8, r0
 801ac96:	d0f2      	beq.n	801ac7e <floor+0x96>
 801ac98:	a30f      	add	r3, pc, #60	; (adr r3, 801acd8 <floor+0xf0>)
 801ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9e:	f7e5 fa79 	bl	8000194 <__adddf3>
 801aca2:	2200      	movs	r2, #0
 801aca4:	2300      	movs	r3, #0
 801aca6:	f7e5 fca9 	bl	80005fc <__aeabi_dcmpgt>
 801acaa:	2800      	cmp	r0, #0
 801acac:	d0be      	beq.n	801ac2c <floor+0x44>
 801acae:	2c00      	cmp	r4, #0
 801acb0:	da02      	bge.n	801acb8 <floor+0xd0>
 801acb2:	2e14      	cmp	r6, #20
 801acb4:	d103      	bne.n	801acbe <floor+0xd6>
 801acb6:	3401      	adds	r4, #1
 801acb8:	ea25 0508 	bic.w	r5, r5, r8
 801acbc:	e7b6      	b.n	801ac2c <floor+0x44>
 801acbe:	2301      	movs	r3, #1
 801acc0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801acc4:	fa03 f606 	lsl.w	r6, r3, r6
 801acc8:	4435      	add	r5, r6
 801acca:	42bd      	cmp	r5, r7
 801accc:	bf38      	it	cc
 801acce:	18e4      	addcc	r4, r4, r3
 801acd0:	e7f2      	b.n	801acb8 <floor+0xd0>
 801acd2:	2500      	movs	r5, #0
 801acd4:	462c      	mov	r4, r5
 801acd6:	e7a9      	b.n	801ac2c <floor+0x44>
 801acd8:	8800759c 	.word	0x8800759c
 801acdc:	7e37e43c 	.word	0x7e37e43c
 801ace0:	bff00000 	.word	0xbff00000
 801ace4:	000fffff 	.word	0x000fffff

0801ace8 <_init>:
 801ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acea:	bf00      	nop
 801acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acee:	bc08      	pop	{r3}
 801acf0:	469e      	mov	lr, r3
 801acf2:	4770      	bx	lr

0801acf4 <_fini>:
 801acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acf6:	bf00      	nop
 801acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acfa:	bc08      	pop	{r3}
 801acfc:	469e      	mov	lr, r3
 801acfe:	4770      	bx	lr
