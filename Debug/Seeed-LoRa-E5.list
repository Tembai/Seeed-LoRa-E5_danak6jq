
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abe0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  0801ad18  0801ad18  0002ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bbb0  0801bbb0  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bbb0  0801bbb0  0002bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bbb8  0801bbb8  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bbb8  0801bbb8  0002bbb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bbbc  0801bbbc  0002bbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  0801bbc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001714  2000012c  0801bcec  0003012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001840  0801bcec  00031840  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061d0b  00000000  00000000  00030156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b541  00000000  00000000  00091e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003600  00000000  00000000  0009d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031f8  00000000  00000000  000a09a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002836a  00000000  00000000  000a3ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e85a  00000000  00000000  000cbf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce2c  00000000  00000000  0010a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df44  00000000  00000000  001d75e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000012c 	.word	0x2000012c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ad00 	.word	0x0801ad00

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000130 	.word	0x20000130
 8000174:	0801ad00 	.word	0x0801ad00

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2uiz>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	d20e      	bcs.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30b      	bcc.n	8000b3e <__aeabi_f2uiz+0x22>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d409      	bmi.n	8000b44 <__aeabi_f2uiz+0x28>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr
 8000b44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b48:	d101      	bne.n	8000b4e <__aeabi_f2uiz+0x32>
 8000b4a:	0242      	lsls	r2, r0, #9
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_f2uiz+0x38>
 8000b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b96c 	b.w	8000e4c <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	468e      	mov	lr, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f040 8082 	bne.w	8000ca2 <__udivmoddi4+0x116>
 8000b9e:	428a      	cmp	r2, r1
 8000ba0:	4617      	mov	r7, r2
 8000ba2:	d946      	bls.n	8000c32 <__udivmoddi4+0xa6>
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	b14a      	cbz	r2, 8000bbe <__udivmoddi4+0x32>
 8000baa:	f1c2 0120 	rsb	r1, r2, #32
 8000bae:	fa05 f302 	lsl.w	r3, r5, r2
 8000bb2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb6:	4097      	lsls	r7, r2
 8000bb8:	ea41 0e03 	orr.w	lr, r1, r3
 8000bbc:	4094      	lsls	r4, r2
 8000bbe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc2:	0c23      	lsrs	r3, r4, #16
 8000bc4:	fbbe fcf8 	udiv	ip, lr, r8
 8000bc8:	b2b9      	uxth	r1, r7
 8000bca:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000bce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bd2:	fb0c f001 	mul.w	r0, ip, r1
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x64>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 35ff 	add.w	r5, ip, #4294967295
 8000be0:	f080 8116 	bcs.w	8000e10 <__udivmoddi4+0x284>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 8113 	bls.w	8000e10 <__udivmoddi4+0x284>
 8000bea:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bee:	443b      	add	r3, r7
 8000bf0:	1a1b      	subs	r3, r3, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f101 	mul.w	r1, r0, r1
 8000c04:	42a1      	cmp	r1, r4
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8101 	bcs.w	8000e14 <__udivmoddi4+0x288>
 8000c12:	42a1      	cmp	r1, r4
 8000c14:	f240 80fe 	bls.w	8000e14 <__udivmoddi4+0x288>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	1a64      	subs	r4, r4, r1
 8000c1e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40d4      	lsrs	r4, r2
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	b902      	cbnz	r2, 8000c36 <__udivmoddi4+0xaa>
 8000c34:	deff      	udf	#255	; 0xff
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d14f      	bne.n	8000cde <__udivmoddi4+0x152>
 8000c3e:	1bcb      	subs	r3, r1, r7
 8000c40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c44:	fa1f f887 	uxth.w	r8, r7
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4e:	0c25      	lsrs	r5, r4, #16
 8000c50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c58:	fb08 f30c 	mul.w	r3, r8, ip
 8000c5c:	42ab      	cmp	r3, r5
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000c60:	197d      	adds	r5, r7, r5
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0xe2>
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	f200 80e7 	bhi.w	8000e3c <__udivmoddi4+0x2b0>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1aed      	subs	r5, r5, r3
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c78:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c7c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x10c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x10a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80d7 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e7c0      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x12c>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80af 	beq.w	8000e0a <__udivmoddi4+0x27e>
 8000cac:	2100      	movs	r1, #0
 8000cae:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb8:	fab3 f183 	clz	r1, r3
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d14b      	bne.n	8000d58 <__udivmoddi4+0x1cc>
 8000cc0:	42ab      	cmp	r3, r5
 8000cc2:	d302      	bcc.n	8000cca <__udivmoddi4+0x13e>
 8000cc4:	4282      	cmp	r2, r0
 8000cc6:	f200 80b7 	bhi.w	8000e38 <__udivmoddi4+0x2ac>
 8000cca:	1a84      	subs	r4, r0, r2
 8000ccc:	eb65 0303 	sbc.w	r3, r5, r3
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	469e      	mov	lr, r3
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d0aa      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000cd8:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cdc:	e7a7      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000cde:	f1c2 0c20 	rsb	ip, r2, #32
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	fa20 f00c 	lsr.w	r0, r0, ip
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	fbbc f1fe 	udiv	r1, ip, lr
 8000cfa:	0c05      	lsrs	r5, r0, #16
 8000cfc:	fb0e cc11 	mls	ip, lr, r1, ip
 8000d00:	fa1f f887 	uxth.w	r8, r7
 8000d04:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d08:	fb01 f308 	mul.w	r3, r1, r8
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x19c>
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	f101 3cff 	add.w	ip, r1, #4294967295
 8000d1a:	f080 808b 	bcs.w	8000e34 <__udivmoddi4+0x2a8>
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	f240 8088 	bls.w	8000e34 <__udivmoddi4+0x2a8>
 8000d24:	3902      	subs	r1, #2
 8000d26:	443d      	add	r5, r7
 8000d28:	1aeb      	subs	r3, r5, r3
 8000d2a:	b285      	uxth	r5, r0
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d38:	fb00 f308 	mul.w	r3, r0, r8
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x1c4>
 8000d40:	197d      	adds	r5, r7, r5
 8000d42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d46:	d271      	bcs.n	8000e2c <__udivmoddi4+0x2a0>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d96f      	bls.n	8000e2c <__udivmoddi4+0x2a0>
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	443d      	add	r5, r7
 8000d50:	1aeb      	subs	r3, r5, r3
 8000d52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d56:	e778      	b.n	8000c4a <__udivmoddi4+0xbe>
 8000d58:	f1c1 0c20 	rsb	ip, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f70c 	lsr.w	r7, r2, ip
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 f40c 	lsr.w	r4, r0, ip
 8000d68:	fa05 f301 	lsl.w	r3, r5, r1
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa25 f50c 	lsr.w	r5, r5, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbb5 f9fe 	udiv	r9, r5, lr
 8000d7c:	fa1f f887 	uxth.w	r8, r7
 8000d80:	fb0e 5519 	mls	r5, lr, r9, r5
 8000d84:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000d88:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8c:	45aa      	cmp	sl, r5
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	fa00 f301 	lsl.w	r3, r0, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x21e>
 8000d98:	197d      	adds	r5, r7, r5
 8000d9a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9e:	d247      	bcs.n	8000e30 <__udivmoddi4+0x2a4>
 8000da0:	45aa      	cmp	sl, r5
 8000da2:	d945      	bls.n	8000e30 <__udivmoddi4+0x2a4>
 8000da4:	f1a9 0902 	sub.w	r9, r9, #2
 8000da8:	443d      	add	r5, r7
 8000daa:	eba5 050a 	sub.w	r5, r5, sl
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000db4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb00 f808 	mul.w	r8, r0, r8
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x248>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dca:	d22d      	bcs.n	8000e28 <__udivmoddi4+0x29c>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d92b      	bls.n	8000e28 <__udivmoddi4+0x29c>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	fba0 8902 	umull	r8, r9, r0, r2
 8000de0:	454c      	cmp	r4, r9
 8000de2:	46c6      	mov	lr, r8
 8000de4:	464d      	mov	r5, r9
 8000de6:	d319      	bcc.n	8000e1c <__udivmoddi4+0x290>
 8000de8:	d016      	beq.n	8000e18 <__udivmoddi4+0x28c>
 8000dea:	b15e      	cbz	r6, 8000e04 <__udivmoddi4+0x278>
 8000dec:	ebb3 020e 	subs.w	r2, r3, lr
 8000df0:	eb64 0405 	sbc.w	r4, r4, r5
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40ca      	lsrs	r2, r1
 8000dfa:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 2400 	strd	r2, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e70e      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e10:	46ac      	mov	ip, r5
 8000e12:	e6ed      	b.n	8000bf0 <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e701      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e6      	bcs.n	8000dea <__udivmoddi4+0x25e>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0507 	sbc.w	r5, r9, r7
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7e0      	b.n	8000dea <__udivmoddi4+0x25e>
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e7d3      	b.n	8000dd4 <__udivmoddi4+0x248>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78f      	b.n	8000d50 <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7ba      	b.n	8000daa <__udivmoddi4+0x21e>
 8000e34:	4661      	mov	r1, ip
 8000e36:	e777      	b.n	8000d28 <__udivmoddi4+0x19c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0x148>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	443d      	add	r5, r7
 8000e42:	e715      	b.n	8000c70 <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e726      	b.n	8000c98 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Sensor_Init>:
	return pressure;
}



void Sensor_Init(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0


	  APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Init------------------------\r\n")
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <Sensor_Init+0x14>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f019 fc2a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
	  }
	  */



	return;
 8000e60:	bf00      	nop
}
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	0801ad18 	.word	0x0801ad18

08000e68 <Sensor_Data>:


int32_t Sensor_Data(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af02      	add	r7, sp, #8

	Sensor_Init();
 8000e6e:	f7ff ffef 	bl	8000e50 <Sensor_Init>

	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data--------------------------\r\n");
 8000e72:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <Sensor_Data+0x100>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f019 fc1b 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
//    platform_init();

    /* Wait sensor boot time */

//    platform_delay(BOOT_TIME);
	HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f001 f8b7 	bl	8001ff2 <HAL_Delay>


	stmdev_ctx_t dev_ctx;

    /* Initialize mems driver interface */
    dev_ctx.write_reg = platform_write;
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <Sensor_Data+0x104>)
 8000e86:	60bb      	str	r3, [r7, #8]
    dev_ctx.read_reg = platform_read;
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <Sensor_Data+0x108>)
 8000e8a:	60fb      	str	r3, [r7, #12]
    dev_ctx.handle = &hi2c2;
 8000e8c:	4b39      	ldr	r3, [pc, #228]	; (8000f74 <Sensor_Data+0x10c>)
 8000e8e:	613b      	str	r3, [r7, #16]

	uint8_t reg[3];
	reg[0]=0x1;
 8000e90:	2301      	movs	r3, #1
 8000e92:	713b      	strb	r3, [r7, #4]
	reg[1]=0x1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	717b      	strb	r3, [r7, #5]
	reg[2]=0x1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	71bb      	strb	r3, [r7, #6]
//	uint8_t whoamI;
//
//    APP_LOG(TS_OFF, VLEVEL_M, "Who Am I:%x\r\n",whoamI);


	I2C_id();
 8000e9c:	f000 f878 	bl	8000f90 <I2C_id>


	lps33hw_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fa2c 	bl	8001304 <lps33hw_reset_set>
	do {
	lps33hw_reset_get(&dev_ctx, &rst);									// software reset
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4931      	ldr	r1, [pc, #196]	; (8000f78 <Sensor_Data+0x110>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa4c 	bl	8001350 <lps33hw_reset_get>
	} while (rst);
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <Sensor_Data+0x110>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f5      	bne.n	8000eac <Sensor_Data+0x44>





	HAL_Delay(50);
 8000ec0:	2032      	movs	r0, #50	; 0x32
 8000ec2:	f001 f896 	bl	8001ff2 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <Sensor_Data+0x114>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
	lps33hw_device_id_get(&dev_ctx, &whoamI);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	492a      	ldr	r1, [pc, #168]	; (8000f7c <Sensor_Data+0x114>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fa05 	bl	80012e2 <lps33hw_device_id_get>
	APP_LOG(TS_OFF, VLEVEL_M, "Sensor_Data -> WhoAmI: %x\r\n",whoamI);
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <Sensor_Data+0x114>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <Sensor_Data+0x118>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f019 fbe5 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>


	/* Enable Block Data Update */
	  lps33hw_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);			// BDU bit set
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f95b 	bl	80011ac <lps33hw_block_data_update_set>
	  /* Set Output Data Rate */
	  lps33hw_data_rate_set(&dev_ctx, LPS33HW_POWER_DOWN);				// one-shot mode enabled
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f97b 	bl	80011f8 <lps33hw_data_rate_set>


	  while (1) {

		HAL_Delay(1000);
 8000f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f06:	f001 f874 	bl	8001ff2 <HAL_Delay>




	    do {
	    	lps33hw_one_shoot_trigger_set(&dev_ctx, PROPERTY_ENABLE);		// one-shot mode triggered
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f997 	bl	8001244 <lps33hw_one_shoot_trigger_set>

	    	ret =  platform_read(&hi2c2, LPS33HW_PRESS_OUT_XL, reg, 3);
 8000f16:	1d3a      	adds	r2, r7, #4
 8000f18:	2303      	movs	r3, #3
 8000f1a:	2128      	movs	r1, #40	; 0x28
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <Sensor_Data+0x10c>)
 8000f1e:	f000 f8c5 	bl	80010ac <platform_read>
 8000f22:	6178      	str	r0, [r7, #20]
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <Sensor_Data+0x11c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]


			memset(&data_raw_pressure, 0x00, sizeof(int32_t));
			lps33hw_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4915      	ldr	r1, [pc, #84]	; (8000f84 <Sensor_Data+0x11c>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f9ad 	bl	8001290 <lps33hw_pressure_raw_get>
			APP_LOG(TS_OFF, VLEVEL_M, "raw pressure:%x\r\n", data_raw_pressure);
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <Sensor_Data+0x11c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <Sensor_Data+0x120>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2002      	movs	r0, #2
 8000f44:	f019 fbb6 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
			pressure_hPa = lps33hw_from_lsb_to_hpa(data_raw_pressure);
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <Sensor_Data+0x11c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f91b 	bl	8001188 <lps33hw_from_lsb_to_hpa>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <Sensor_Data+0x124>)
 8000f56:	6013      	str	r3, [r2, #0]
//	      tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );

	      */


		lps33hw_low_power_set(&dev_ctx, PROPERTY_DISABLE);			// Low-current mode enabled
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa0f 	bl	8001382 <lps33hw_low_power_set>
		HAL_Delay(1000);
 8000f64:	e7cd      	b.n	8000f02 <Sensor_Data+0x9a>
 8000f66:	bf00      	nop
 8000f68:	0801ad40 	.word	0x0801ad40
 8000f6c:	08000fd5 	.word	0x08000fd5
 8000f70:	080010ad 	.word	0x080010ad
 8000f74:	20001608 	.word	0x20001608
 8000f78:	20000151 	.word	0x20000151
 8000f7c:	20000150 	.word	0x20000150
 8000f80:	0801ad68 	.word	0x0801ad68
 8000f84:	20000148 	.word	0x20000148
 8000f88:	0801ad84 	.word	0x0801ad84
 8000f8c:	2000014c 	.word	0x2000014c

08000f90 <I2C_id>:
    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    return;
}


void I2C_id(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8

  	static const uint8_t WhoAmI = 0x0F;				// register
    HAL_StatusTypeDef ret;
    ret=8;
 8000f96:	2308      	movs	r3, #8
 8000f98:	71fb      	strb	r3, [r7, #7]
    uint8_t var[1];
    var[0]=0x0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	713b      	strb	r3, [r7, #4]

//    ret=platform_write(&hi2c2, CTRL_REG2, var, 1);
    ret=platform_read(&hi2c2, WhoAmI, var, 1);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <I2C_id+0x38>)
 8000fa0:	7819      	ldrb	r1, [r3, #0]
 8000fa2:	1d3a      	adds	r2, r7, #4
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <I2C_id+0x3c>)
 8000fa8:	f000 f880 	bl	80010ac <platform_read>
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]

	APP_LOG(TS_OFF, VLEVEL_M, "WhoAmI ID: 0x%X\n",var[0]);
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <I2C_id+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f019 fb7a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
//    */
//
////    APP_LOG(TS_OFF, VLEVEL_M, "lengte van buf:%x\n",z);
//	APP_LOG(TS_OFF, VLEVEL_M, "id2: %X\n",buf[0]);

	 return;
 8000fc0:	bf00      	nop
}
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	0801b5e7 	.word	0x0801b5e7
 8000fcc:	20001608 	.word	0x20001608
 8000fd0:	0801adc4 	.word	0x0801adc4

08000fd4 <platform_write>:


int32_t platform_write(void *handle, uint8_t Reg, const uint8_t *Bufp, uint16_t len){
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	72fb      	strb	r3, [r7, #11]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	813b      	strh	r3, [r7, #8]
 8000fe8:	466b      	mov	r3, sp
 8000fea:	461d      	mov	r5, r3
//			message[i]=Bufp[i];
//		}
//    }


    uint8_t buffer[len+1];
 8000fec:	893b      	ldrh	r3, [r7, #8]
 8000fee:	1c5c      	adds	r4, r3, #1
 8000ff0:	1e63      	subs	r3, r4, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f04f 0100 	mov.w	r1, #0
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	00cb      	lsls	r3, r1, #3
 8001006:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800100a:	00c2      	lsls	r2, r0, #3
 800100c:	4623      	mov	r3, r4
 800100e:	4618      	mov	r0, r3
 8001010:	f04f 0100 	mov.w	r1, #0
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	00cb      	lsls	r3, r1, #3
 800101e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001022:	00c2      	lsls	r2, r0, #3
 8001024:	4623      	mov	r3, r4
 8001026:	3307      	adds	r3, #7
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	ebad 0d03 	sub.w	sp, sp, r3
 8001030:	ab02      	add	r3, sp, #8
 8001032:	3300      	adds	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
    if (len>0){
 8001036:	893b      	ldrh	r3, [r7, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d016      	beq.n	800106a <platform_write+0x96>
		for (int i=1;i<(len+1);i++){
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	e00c      	b.n	800105c <platform_write+0x88>
			buffer[i]=Bufp[i-1];
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b01      	subs	r3, #1
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	7819      	ldrb	r1, [r3, #0]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
		for (int i=1;i<(len+1);i++){
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	ddee      	ble.n	8001042 <platform_write+0x6e>
			}
		buffer[0]=Reg;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	7afa      	ldrb	r2, [r7, #11]
 8001068:	701a      	strb	r2, [r3, #0]
//    	if(arg[x]){
//    		z++;
//    }
//    }

	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, buffer, (len+1), 1000);
 800106a:	23ba      	movs	r3, #186	; 0xba
 800106c:	b299      	uxth	r1, r3
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	3301      	adds	r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107a:	9000      	str	r0, [sp, #0]
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <platform_write+0xd0>)
 800107e:	f003 ffe7 	bl	8005050 <HAL_I2C_Master_Transmit>
 8001082:	4603      	mov	r3, r0
 8001084:	74fb      	strb	r3, [r7, #19]

	if (ret){
 8001086:	7cfb      	ldrb	r3, [r7, #19]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <platform_write+0xc4>
		  APP_LOG(TS_OFF, VLEVEL_M, "Er ging iets mis (write)!\n");
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <platform_write+0xd4>)
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2002      	movs	r0, #2
 8001094:	f019 fb0e 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
	}
	return ret;
 8001098:	7cfb      	ldrb	r3, [r7, #19]
 800109a:	46ad      	mov	sp, r5
}
 800109c:	4618      	mov	r0, r3
 800109e:	3720      	adds	r7, #32
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bdb0      	pop	{r4, r5, r7, pc}
 80010a4:	20001608 	.word	0x20001608
 80010a8:	0801add8 	.word	0x0801add8

080010ac <platform_read>:



int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	461a      	mov	r2, r3
 80010b8:	460b      	mov	r3, r1
 80010ba:	72fb      	strb	r3, [r7, #11]
 80010bc:	4613      	mov	r3, r2
 80010be:	813b      	strh	r3, [r7, #8]
    HAL_StatusTypeDef ret;
    uint8_t reg[1];

    reg[0]=Reg;
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	753b      	strb	r3, [r7, #20]



	ret=HAL_I2C_Master_Transmit(&hi2c2, addr_write, reg, 1, 1000);
 80010c4:	23ba      	movs	r3, #186	; 0xba
 80010c6:	b299      	uxth	r1, r3
 80010c8:	f107 0214 	add.w	r2, r7, #20
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <platform_read+0x74>)
 80010d6:	f003 ffbb 	bl	8005050 <HAL_I2C_Master_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	75fb      	strb	r3, [r7, #23]
	if(len>0 && !ret){
 80010de:	893b      	ldrh	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00f      	beq.n	8001104 <platform_read+0x58>
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <platform_read+0x58>
		ret=HAL_I2C_Master_Receive(&hi2c2, addr_read, Bufp, len, 1000);
 80010ea:	23bb      	movs	r3, #187	; 0xbb
 80010ec:	b299      	uxth	r1, r3
 80010ee:	893b      	ldrh	r3, [r7, #8]
 80010f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <platform_read+0x74>)
 80010fa:	f004 f89d 	bl	8005238 <HAL_I2C_Master_Receive>
 80010fe:	4603      	mov	r3, r0
 8001100:	75fb      	strb	r3, [r7, #23]
 8001102:	e008      	b.n	8001116 <platform_read+0x6a>
	}
	else if(ret){
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d005      	beq.n	8001116 <platform_read+0x6a>
	  APP_LOG(TS_OFF, VLEVEL_M, "Kan geen verbinding maken met de sensor (read)!\n");
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <platform_read+0x78>)
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2002      	movs	r0, #2
 8001112:	f019 facf 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
	}


	return ret;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20001608 	.word	0x20001608
 8001124:	0801adf4 	.word	0x0801adf4

08001128 <lps33hw_read_reg>:
  *
  */
int32_t lps33hw_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	460b      	mov	r3, r1
 8001136:	72fb      	strb	r3, [r7, #11]
 8001138:	4613      	mov	r3, r2
 800113a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	685c      	ldr	r4, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6898      	ldr	r0, [r3, #8]
 8001144:	893b      	ldrh	r3, [r7, #8]
 8001146:	7af9      	ldrb	r1, [r7, #11]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	47a0      	blx	r4
 800114c:	6178      	str	r0, [r7, #20]

  return ret;
 800114e:	697b      	ldr	r3, [r7, #20]
}
 8001150:	4618      	mov	r0, r3
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}

08001158 <lps33hw_write_reg>:
  *
  */
int32_t lps33hw_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	72fb      	strb	r3, [r7, #11]
 8001168:	4613      	mov	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681c      	ldr	r4, [r3, #0]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	893b      	ldrh	r3, [r7, #8]
 8001176:	7af9      	ldrb	r1, [r7, #11]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	47a0      	blx	r4
 800117c:	6178      	str	r0, [r7, #20]

  return ret;
 800117e:	697b      	ldr	r3, [r7, #20]
}
 8001180:	4618      	mov	r0, r3
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <lps33hw_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps33hw_from_lsb_to_hpa(int32_t lsb)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 4096.0f);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fb1f 	bl	80007d4 <__aeabi_i2f>
 8001196:	4603      	mov	r3, r0
 8001198:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fc21 	bl	80009e4 <__aeabi_fdiv>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <lps33hw_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	2301      	movs	r3, #1
 80011be:	2110      	movs	r1, #16
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffb1 	bl	8001128 <lps33hw_read_reg>
 80011c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <lps33hw_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	7a3b      	ldrb	r3, [r7, #8]
 80011d8:	f362 0341 	bfi	r3, r2, #1, #1
 80011dc:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80011de:	f107 0208 	add.w	r2, r7, #8
 80011e2:	2301      	movs	r3, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb6 	bl	8001158 <lps33hw_write_reg>
 80011ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lps33hw_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_data_rate_set(stmdev_ctx_t *ctx, lps33hw_odr_t val)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	2301      	movs	r3, #1
 800120a:	2110      	movs	r1, #16
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff8b 	bl	8001128 <lps33hw_read_reg>
 8001212:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <lps33hw_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	b2da      	uxtb	r2, r3
 8001222:	7a3b      	ldrb	r3, [r7, #8]
 8001224:	f362 1306 	bfi	r3, r2, #4, #3
 8001228:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	2301      	movs	r3, #1
 8001230:	2110      	movs	r1, #16
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff90 	bl	8001158 <lps33hw_write_reg>
 8001238:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <lps33hw_one_shoot_trigger_set>:
  * @param  val    Change the values of one_shot in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_one_shoot_trigger_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001250:	f107 0208 	add.w	r2, r7, #8
 8001254:	2301      	movs	r3, #1
 8001256:	2111      	movs	r1, #17
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff65 	bl	8001128 <lps33hw_read_reg>
 800125e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <lps33hw_one_shoot_trigger_set+0x42>
  {
    ctrl_reg2.one_shot = val;
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	7a3b      	ldrb	r3, [r7, #8]
 8001270:	f362 0300 	bfi	r3, r2, #0, #1
 8001274:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	2301      	movs	r3, #1
 800127c:	2111      	movs	r1, #17
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff6a 	bl	8001158 <lps33hw_write_reg>
 8001284:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <lps33hw_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_PRESS_OUT_XL, reg, 3);
 800129a:	f107 0208 	add.w	r2, r7, #8
 800129e:	2303      	movs	r3, #3
 80012a0:	2128      	movs	r1, #40	; 0x28
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff40 	bl	8001128 <lps33hw_read_reg>
 80012a8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	461a      	mov	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	7a7a      	ldrb	r2, [r7, #9]
 80012ba:	441a      	add	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	7a3a      	ldrb	r2, [r7, #8]
 80012c8:	441a      	add	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	021a      	lsls	r2, r3, #8
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	601a      	str	r2, [r3, #0]

  return ret;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <lps33hw_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps33hw_read_reg(ctx, LPS33HW_WHO_AM_I, (uint8_t *) buff, 1);
 80012ec:	2301      	movs	r3, #1
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	210f      	movs	r1, #15
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff18 	bl	8001128 <lps33hw_read_reg>
 80012f8:	60f8      	str	r0, [r7, #12]

  return ret;
 80012fa:	68fb      	ldr	r3, [r7, #12]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <lps33hw_reset_set>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001310:	f107 0208 	add.w	r2, r7, #8
 8001314:	2301      	movs	r3, #1
 8001316:	2111      	movs	r1, #17
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff05 	bl	8001128 <lps33hw_read_reg>
 800131e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <lps33hw_reset_set+0x42>
  {
    ctrl_reg2.swreset = val;
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	7a3b      	ldrb	r3, [r7, #8]
 8001330:	f362 0382 	bfi	r3, r2, #2, #1
 8001334:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001336:	f107 0208 	add.w	r2, r7, #8
 800133a:	2301      	movs	r3, #1
 800133c:	2111      	movs	r1, #17
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff0a 	bl	8001158 <lps33hw_write_reg>
 8001344:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <lps33hw_reset_get>:
  * @param  val    Change the values of swreset in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  lps33hw_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	2301      	movs	r3, #1
 8001360:	2111      	movs	r1, #17
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fee0 	bl	8001128 <lps33hw_read_reg>
 8001368:	60f8      	str	r0, [r7, #12]
  *val = ctrl_reg2.swreset;
 800136a:	7a3b      	ldrb	r3, [r7, #8]
 800136c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	701a      	strb	r2, [r3, #0]

  return ret;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <lps33hw_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps33hw_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  lps33hw_res_conf_t res_conf;
  int32_t ret;

  ret = lps33hw_read_reg(ctx, LPS33HW_RES_CONF, (uint8_t *)&res_conf, 1);
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	2301      	movs	r3, #1
 8001394:	211a      	movs	r1, #26
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fec6 	bl	8001128 <lps33hw_read_reg>
 800139c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <lps33hw_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	f362 0300 	bfi	r3, r2, #0, #1
 80013b2:	723b      	strb	r3, [r7, #8]
    ret = lps33hw_write_reg(ctx, LPS33HW_RES_CONF, (uint8_t *)&res_conf, 1);
 80013b4:	f107 0208 	add.w	r2, r7, #8
 80013b8:	2301      	movs	r3, #1
 80013ba:	211a      	movs	r1, #26
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fecb 	bl	8001158 <lps33hw_write_reg>
 80013c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	43db      	mvns	r3, r3
 8001410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001414:	4013      	ands	r3, r2
 8001416:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
	...

08001424 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_ADC_Init+0x94>)
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <MX_ADC_Init+0x98>)
 800142c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_ADC_Init+0x94>)
 8001430:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001434:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_ADC_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_ADC_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_ADC_Init+0x94>)
 800144a:	2204      	movs	r2, #4
 800144c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_ADC_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_ADC_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_ADC_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_ADC_Init+0x94>)
 8001462:	2201      	movs	r2, #1
 8001464:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_ADC_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_ADC_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_ADC_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_ADC_Init+0x94>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_ADC_Init+0x94>)
 8001484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_ADC_Init+0x94>)
 800148c:	2207      	movs	r2, #7
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_ADC_Init+0x94>)
 8001492:	2207      	movs	r2, #7
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_ADC_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_ADC_Init+0x94>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_ADC_Init+0x94>)
 80014a6:	f001 ff47 	bl	8003338 <HAL_ADC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80014b0:	f000 faa8 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200015a4 	.word	0x200015a4
 80014bc:	40012400 	.word	0x40012400

080014c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_ADC_MspInit+0x24>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d103      	bne.n	80014da <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014d6:	f7ff ff7a 	bl	80013ce <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40012400 	.word	0x40012400

080014e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_ADC_MspDeInit+0x24>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d103      	bne.n	8001502 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014fe:	f7ff ff7e 	bl	80013fe <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012400 	.word	0x40012400

08001510 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <SYS_InitMeasurement+0x14>)
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <SYS_InitMeasurement+0x18>)
 8001518:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	200015a4 	.word	0x200015a4
 8001528:	40012400 	.word	0x40012400

0800152c <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800153a:	f000 f871 	bl	8001620 <SYS_GetBatteryLevel>
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001542:	4830      	ldr	r0, [pc, #192]	; (8001604 <SYS_GetTemperatureLevel+0xd8>)
 8001544:	f000 f8a0 	bl	8001688 <ADC_ReadChannels>
 8001548:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <SYS_GetTemperatureLevel+0xdc>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <SYS_GetTemperatureLevel+0xe0>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d026      	beq.n	80015a4 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <SYS_GetTemperatureLevel+0xdc>)
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <SYS_GetTemperatureLevel+0xe0>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d01c      	beq.n	800159c <SYS_GetTemperatureLevel+0x70>
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <SYS_GetTemperatureLevel+0xe4>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	461a      	mov	r2, r3
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <SYS_GetTemperatureLevel+0xe0>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2264      	movs	r2, #100	; 0x64
 800157e:	fb02 f203 	mul.w	r2, r2, r3
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <SYS_GetTemperatureLevel+0xdc>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <SYS_GetTemperatureLevel+0xe0>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	1acb      	subs	r3, r1, r3
 800158e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001592:	b29b      	uxth	r3, r3
 8001594:	331e      	adds	r3, #30
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21b      	sxth	r3, r3
 800159a:	e001      	b.n	80015a0 <SYS_GetTemperatureLevel+0x74>
 800159c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80015a0:	81fb      	strh	r3, [r7, #14]
 80015a2:	e01c      	b.n	80015de <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	fb02 f203 	mul.w	r2, r2, r3
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <SYS_GetTemperatureLevel+0xe8>)
 80015ae:	fba3 1302 	umull	r1, r3, r3, r2
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	0852      	lsrs	r2, r2, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	0adb      	lsrs	r3, r3, #11
 80015ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 80015c6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <SYS_GetTemperatureLevel+0xec>)
 80015cc:	fb82 1203 	smull	r1, r2, r2, r3
 80015d0:	1292      	asrs	r2, r2, #10
 80015d2:	17db      	asrs	r3, r3, #31
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	331e      	adds	r3, #30
 80015da:	b29b      	uxth	r3, r3
 80015dc:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 80015de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <SYS_GetTemperatureLevel+0xf0>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	2100      	movs	r1, #0
 80015ea:	2001      	movs	r0, #1
 80015ec:	f019 f862 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80015f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 80015f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	b0001000 	.word	0xb0001000
 8001608:	1fff75c8 	.word	0x1fff75c8
 800160c:	1fff75a8 	.word	0x1fff75a8
 8001610:	09ee009f 	.word	0x09ee009f
 8001614:	00100101 	.word	0x00100101
 8001618:	68db8bad 	.word	0x68db8bad
 800161c:	0801ae28 	.word	0x0801ae28

08001620 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <SYS_GetBatteryLevel+0x5c>)
 8001630:	f000 f82a 	bl	8001688 <ADC_ReadChannels>
 8001634:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	e016      	b.n	8001670 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <SYS_GetBatteryLevel+0x60>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164a:	4293      	cmp	r3, r2
 800164c:	d00b      	beq.n	8001666 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <SYS_GetBatteryLevel+0x60>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001658:	fb03 f202 	mul.w	r2, r3, r2
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	80fb      	strh	r3, [r7, #6]
 8001664:	e004      	b.n	8001670 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <SYS_GetBatteryLevel+0x64>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001670:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	b4002000 	.word	0xb4002000
 8001680:	1fff75aa 	.word	0x1fff75aa
 8001684:	004c08d8 	.word	0x004c08d8

08001688 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016a0:	f7ff fec0 	bl	8001424 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016a4:	481a      	ldr	r0, [pc, #104]	; (8001710 <ADC_ReadChannels+0x88>)
 80016a6:	f002 fc2d 	bl	8003f04 <HAL_ADCEx_Calibration_Start>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016b0:	f000 f9a8 	bl	8001a04 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4619      	mov	r1, r3
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <ADC_ReadChannels+0x88>)
 80016c8:	f002 f994 	bl	80039f4 <HAL_ADC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80016d2:	f000 f997 	bl	8001a04 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <ADC_ReadChannels+0x88>)
 80016d8:	f002 f870 	bl	80037bc <HAL_ADC_Start>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016e2:	f000 f98f 	bl	8001a04 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016e6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <ADC_ReadChannels+0x88>)
 80016ec:	f002 f8de 	bl	80038ac <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <ADC_ReadChannels+0x88>)
 80016f2:	f002 f8a9 	bl	8003848 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <ADC_ReadChannels+0x88>)
 80016f8:	f002 f96f 	bl	80039da <HAL_ADC_GetValue>
 80016fc:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016fe:	4804      	ldr	r0, [pc, #16]	; (8001710 <ADC_ReadChannels+0x88>)
 8001700:	f001 ffe0 	bl	80036c4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001704:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200015a4 	.word	0x200015a4

08001714 <LL_AHB1_GRP1_EnableClock>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001748:	2004      	movs	r0, #4
 800174a:	f7ff ffe3 	bl	8001714 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff ffe0 	bl	8001714 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2102      	movs	r1, #2
 8001758:	200b      	movs	r0, #11
 800175a:	f002 fd26 	bl	80041aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800175e:	200b      	movs	r0, #11
 8001760:	f002 fd3d 	bl	80041de <HAL_NVIC_EnableIRQ>

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <LL_AHB2_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <LL_APB1_GRP1_EnableClock>:
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017bc:	68fb      	ldr	r3, [r7, #12]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C2_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C2_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C2_Init+0x74>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <MX_I2C2_Init+0x7c>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C2_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_I2C2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C2_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C2_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_I2C2_Init+0x74>)
 8001804:	f003 fb94 	bl	8004f30 <HAL_I2C_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 f8f9 	bl	8001a04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C2_Init+0x74>)
 8001816:	f003 fff3 	bl	8005800 <HAL_I2CEx_ConfigAnalogFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 f8f0 	bl	8001a04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_I2C2_Init+0x74>)
 8001828:	f004 f834 	bl	8005894 <HAL_I2CEx_ConfigDigitalFilter>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001832:	f000 f8e7 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20001608 	.word	0x20001608
 8001840:	40005800 	.word	0x40005800
 8001844:	20303e5d 	.word	0x20303e5d

08001848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b096      	sub	sp, #88	; 0x58
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2238      	movs	r2, #56	; 0x38
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f019 f9c1 	bl	801abf0 <memset>
  if(i2cHandle->Instance==I2C2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_I2C_MspInit+0xb0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13b      	bne.n	80018f0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800187c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fa3a 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001892:	f000 f8b7 	bl	8001a04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff ff66 	bl	8001768 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	2002      	movs	r0, #2
 800189e:	f7ff ff63 	bl	8001768 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a8:	2312      	movs	r3, #18
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018b4:	2304      	movs	r3, #4
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f003 f8bf 	bl	8004a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018cc:	2312      	movs	r3, #18
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018d8:	2304      	movs	r3, #4
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018e4:	f003 f8ae 	bl	8004a44 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018ec:	f7ff ff54 	bl	8001798 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018f0:	bf00      	nop
 80018f2:	3758      	adds	r7, #88	; 0x58
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40005800 	.word	0x40005800
 80018fc:	48000400 	.word	0x48000400

08001900 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f023 0218 	bic.w	r2, r3, #24
 8001914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4313      	orrs	r3, r2
 800191c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001930:	f001 fb36 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001934:	f000 f80c 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8001938:	f008 fc76 	bl	800a228 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 800193c:	f7ff ff44 	bl	80017c8 <MX_I2C2_Init>
    /* USER CODE END WHILE */
//    MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */

	  Sensor_Data();
 8001940:	f7ff fa92 	bl	8000e68 <Sensor_Data>

	  HAL_Delay(2000);
 8001944:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001948:	f000 fb53 	bl	8001ff2 <HAL_Delay>
  {
 800194c:	e7f8      	b.n	8001940 <main+0x16>
	...

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b09a      	sub	sp, #104	; 0x68
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2248      	movs	r2, #72	; 0x48
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f019 f946 	bl	801abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001976:	f003 ffd9 	bl	800592c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ffc0 	bl	8001900 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <SystemClock_Config+0xb0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <SystemClock_Config+0xb0>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <SystemClock_Config+0xb0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800199c:	2324      	movs	r3, #36	; 0x24
 800199e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019a0:	2381      	movs	r3, #129	; 0x81
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019a4:	2301      	movs	r3, #1
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80019ac:	23b0      	movs	r3, #176	; 0xb0
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 fa61 	bl	8005e80 <HAL_RCC_OscConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80019c4:	f000 f81e 	bl	8001a04 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80019c8:	234f      	movs	r3, #79	; 0x4f
 80019ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fde4 	bl	80065b4 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019f2:	f000 f807 	bl	8001a04 <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3768      	adds	r7, #104	; 0x68
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	58000400 	.word	0x58000400

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <Error_Handler+0x8>

08001a0e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <LL_APB1_GRP1_EnableClock>:
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	222c      	movs	r2, #44	; 0x2c
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f019 f8bf 	bl	801abf0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a74:	4a22      	ldr	r2, [pc, #136]	; (8001b00 <MX_RTC_Init+0xa0>)
 8001a76:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a96:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_RTC_Init+0x9c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_RTC_Init+0x9c>)
 8001aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001aa6:	4815      	ldr	r0, [pc, #84]	; (8001afc <MX_RTC_Init+0x9c>)
 8001aa8:	f005 fa44 	bl	8006f34 <HAL_RTC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001ab2:	f7ff ffa7 	bl	8001a04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001ab6:	4811      	ldr	r0, [pc, #68]	; (8001afc <MX_RTC_Init+0x9c>)
 8001ab8:	f005 fd32 	bl	8007520 <HAL_RTCEx_SetSSRU_IT>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001ac2:	f7ff ff9f 	bl	8001a04 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ad2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ad6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_RTC_Init+0x9c>)
 8001ae6:	f005 fa9f 	bl	8007028 <HAL_RTC_SetAlarm_IT>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001af0:	f7ff ff88 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20001654 	.word	0x20001654
 8001b00:	40002800 	.word	0x40002800

08001b04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b090      	sub	sp, #64	; 0x40
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2238      	movs	r2, #56	; 0x38
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f019 f86b 	bl	801abf0 <memset>
  if(rtcHandle->Instance==RTC)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_RTC_MspInit+0x74>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d125      	bne.n	8001b70 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b28:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 f8e3 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b40:	f7ff ff60 	bl	8001a04 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b44:	f7ff ff63 	bl	8001a0e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b4c:	f7ff ff6f 	bl	8001a2e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2002      	movs	r0, #2
 8001b56:	f002 fb28 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f002 fb3f 	bl	80041de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2100      	movs	r1, #0
 8001b64:	202a      	movs	r0, #42	; 0x2a
 8001b66:	f002 fb20 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001b6a:	202a      	movs	r0, #42	; 0x2a
 8001b6c:	f002 fb37 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3740      	adds	r7, #64	; 0x40
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40002800 	.word	0x40002800

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001bde:	f005 fcdb 	bl	8007598 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20001654 	.word	0x20001654

08001bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Channel1_IRQHandler+0x10>)
 8001bf2:	f002 fd8b 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20001698 	.word	0x20001698

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f006 fb27 	bl	8008258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200016f8 	.word	0x200016f8

08001c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c1c:	f003 f970 	bl	8004f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <RTC_Alarm_IRQHandler+0x10>)
 8001c2a:	f005 fb65 	bl	80072f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001654 	.word	0x20001654

08001c38 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c3e:	f006 f813 	bl	8007c68 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000168c 	.word	0x2000168c

08001c4c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_SUBGHZ_Init+0x20>)
 8001c82:	2208      	movs	r2, #8
 8001c84:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_SUBGHZ_Init+0x20>)
 8001c88:	f005 fd72 	bl	8007770 <HAL_SUBGHZ_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c92:	f7ff feb7 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000168c 	.word	0x2000168c

08001ca0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff ffcf 	bl	8001c4c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2032      	movs	r0, #50	; 0x32
 8001cb4:	f002 fa79 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001cb8:	2032      	movs	r0, #50	; 0x32
 8001cba:	f002 fa90 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <LL_FLASH_GetUDN+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	1fff7580 	.word	0x1fff7580

08001d00 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <LL_FLASH_GetDeviceID+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	1fff7584 	.word	0x1fff7584

08001d18 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <LL_FLASH_GetSTCompanyID+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0a1b      	lsrs	r3, r3, #8
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	1fff7584 	.word	0x1fff7584

08001d30 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff ffc6 	bl	8001cc6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001d3a:	f018 f9fd 	bl	801a138 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8001d3e:	f000 f991 	bl	8002064 <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8001d42:	f000 f9b1 	bl	80020a8 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001d46:	f018 fc87 	bl	801a658 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <SystemApp_Init+0x48>)
 8001d4c:	f018 fd34 	bl	801a7b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001d50:	2002      	movs	r0, #2
 8001d52:	f018 fd3f 	bl	801a7d4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001d56:	f7ff fbdb 	bl	8001510 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001d5a:	f000 fa6f 	bl	800223c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001d5e:	f017 fcf1 	bl	8019744 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	2001      	movs	r0, #1
 8001d66:	f017 fd2d 	bl	80197c4 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f017 fcf9 	bl	8019764 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08001f45 	.word	0x08001f45

08001d7c <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001d86:	f7ff fc4b 	bl	8001620 <SYS_GetBatteryLevel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001d8e:	88bb      	ldrh	r3, [r7, #4]
 8001d90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d902      	bls.n	8001d9e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001d98:	23fe      	movs	r3, #254	; 0xfe
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	e014      	b.n	8001dc8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001da4:	d202      	bcs.n	8001dac <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	e00d      	b.n	8001dc8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001dac:	88bb      	ldrh	r3, [r7, #4]
 8001dae:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001db2:	461a      	mov	r2, r3
 8001db4:	4613      	mov	r3, r2
 8001db6:	01db      	lsls	r3, r3, #7
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <GetBatteryLevel+0x68>)
 8001dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc4:	09db      	lsrs	r3, r3, #7
 8001dc6:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <GetBatteryLevel+0x6c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f018 fc6e 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	1b4e81b5 	.word	0x1b4e81b5
 8001de8:	0801ae34 	.word	0x0801ae34

08001dec <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8001df6:	f7ff fb99 	bl	800152c <SYS_GetTemperatureLevel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da00      	bge.n	8001e02 <GetTemperatureLevel+0x16>
 8001e00:	33ff      	adds	r3, #255	; 0xff
 8001e02:	121b      	asrs	r3, r3, #8
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001e08:	88fb      	ldrh	r3, [r7, #6]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001e12:	b590      	push	{r4, r7, lr}
 8001e14:	b087      	sub	sp, #28
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001e1e:	f7ff ff65 	bl	8001cec <LL_FLASH_GetUDN>
 8001e22:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d138      	bne.n	8001e9e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e2c:	f001 f8d8 	bl	8002fe0 <HAL_GetUIDw0>
 8001e30:	4604      	mov	r4, r0
 8001e32:	f001 f8e9 	bl	8003008 <HAL_GetUIDw2>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4423      	add	r3, r4
 8001e3a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e3c:	f001 f8da 	bl	8002ff4 <HAL_GetUIDw1>
 8001e40:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	0e1a      	lsrs	r2, r3, #24
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3307      	adds	r3, #7
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	0c1a      	lsrs	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3306      	adds	r3, #6
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	0a1a      	lsrs	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3305      	adds	r3, #5
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0e1a      	lsrs	r2, r3, #24
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3303      	adds	r3, #3
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0c1a      	lsrs	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3302      	adds	r3, #2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	0a1a      	lsrs	r2, r3, #8
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001e9c:	e031      	b.n	8001f02 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3307      	adds	r3, #7
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	0a1a      	lsrs	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3306      	adds	r3, #6
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	0c1a      	lsrs	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3305      	adds	r3, #5
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	0e1a      	lsrs	r2, r3, #24
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001ecc:	f7ff ff18 	bl	8001d00 <LL_FLASH_GetDeviceID>
 8001ed0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3303      	adds	r3, #3
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001edc:	f7ff ff1c 	bl	8001d18 <LL_FLASH_GetSTCompanyID>
 8001ee0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	0a1a      	lsrs	r2, r3, #8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	0c1b      	lsrs	r3, r3, #16
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	701a      	strb	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001f0a:	b590      	push	{r4, r7, lr}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001f14:	f7ff feea 	bl	8001cec <LL_FLASH_GetUDN>
 8001f18:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d10b      	bne.n	8001f3a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001f22:	f001 f85d 	bl	8002fe0 <HAL_GetUIDw0>
 8001f26:	4604      	mov	r4, r0
 8001f28:	f001 f864 	bl	8002ff4 <HAL_GetUIDw1>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	405c      	eors	r4, r3
 8001f30:	f001 f86a 	bl	8003008 <HAL_GetUIDw2>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4063      	eors	r3, r4
 8001f38:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001f3a:	687b      	ldr	r3, [r7, #4]

}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd90      	pop	{r4, r7, pc}

08001f44 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f017 fd40 	bl	80199d8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <TimestampNow+0x3c>)
 8001f62:	2110      	movs	r1, #16
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f81d 	bl	8001fa4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe f904 	bl	8000178 <strlen>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0801ae40 	.word	0x0801ae40

08001f84 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	f017 fbea 	bl	8019764 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f017 fbe2 	bl	8019764 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001fa4:	b40c      	push	{r2, r3}
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001fb6:	6839      	ldr	r1, [r7, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f017 fedf 	bl	8019d80 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fcc:	b002      	add	sp, #8
 8001fce:	4770      	bx	lr

08001fd0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8001fe8:	f000 f9f0 	bl	80023cc <TIMER_IF_GetTimerValue>
 8001fec:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fa65 	bl	80024cc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_AHB2_GRP1_EnableClock>:
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4313      	orrs	r3, r2
 8002020:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <LL_EXTI_EnableIT_32_63+0x24>)
 8002046:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800204a:	4905      	ldr	r1, [pc, #20]	; (8002060 <LL_EXTI_EnableIT_32_63+0x24>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	58000800 	.word	0x58000800

08002064 <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f802 	bl	8002072 <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}

08002072 <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8002086:	f000 ffc9 	bl	800301c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800208a:	f000 ffd3 	bl	8003034 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800208e:	f000 ffdd 	bl	800304c <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002092:	e005      	b.n	80020a0 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8002094:	f000 ffc8 	bl	8003028 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8002098:	f000 ffd2 	bl	8003040 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 800209c:	f000 ffdc 	bl	8003058 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_1 */

  /* SW probes */

#if defined (PROBE_PINS_ENABLED) && ( PROBE_PINS_ENABLED == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff ff9e 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80020ce:	2002      	movs	r0, #2
 80020d0:	f7ff ff9b 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7ff ff98 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80020da:	2002      	movs	r0, #2
 80020dc:	f7ff ff95 	bl	800200a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80020e0:	2301      	movs	r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ec:	f002 fcaa 	bl	8004a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80020f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	483a      	ldr	r0, [pc, #232]	; (80021e4 <DBG_ProbesInit+0x13c>)
 80020fc:	f002 fca2 	bl	8004a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002100:	2308      	movs	r3, #8
 8002102:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4836      	ldr	r0, [pc, #216]	; (80021e4 <DBG_ProbesInit+0x13c>)
 800210a:	f002 fc9b 	bl	8004a44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800210e:	2310      	movs	r3, #16
 8002110:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4833      	ldr	r0, [pc, #204]	; (80021e4 <DBG_ProbesInit+0x13c>)
 8002118:	f002 fc94 	bl	8004a44 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	f002 febc 	bl	8004ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800212e:	482d      	ldr	r0, [pc, #180]	; (80021e4 <DBG_ProbesInit+0x13c>)
 8002130:	f002 feb6 	bl	8004ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2108      	movs	r1, #8
 8002138:	482a      	ldr	r0, [pc, #168]	; (80021e4 <DBG_ProbesInit+0x13c>)
 800213a:	f002 feb1 	bl	8004ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2110      	movs	r1, #16
 8002142:	4828      	ldr	r0, [pc, #160]	; (80021e4 <DBG_ProbesInit+0x13c>)
 8002144:	f002 feac 	bl	8004ea0 <HAL_GPIO_WritePin>

  /* USER CODE END DBG_ProbesInit_2 */
  /* HW alternate functions for monitoring RF */

  /* Configure the GPIO pin */
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	613b      	str	r3, [r7, #16]

  /*spi dbg*/
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
 8002154:	23f0      	movs	r3, #240	; 0xf0
 8002156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_SUBGHZSPI;
 8002158:	230d      	movs	r3, #13
 800215a:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff ff54 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216a:	f002 fc6b 	bl	8004a44 <HAL_GPIO_Init>

  /* Busy */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_12);
 8002176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF6_RF_BUSY;
 800217c:	2306      	movs	r3, #6
 800217e:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff ff42 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f002 fc59 	bl	8004a44 <HAL_GPIO_Init>

  /* LDO_rdy & BUCK_rdy (SMPS) */
  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_2);
 800219a:	2304      	movs	r3, #4
 800219c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 800219e:	230d      	movs	r3, #13
 80021a0:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	2002      	movs	r0, #2
 80021a4:	f7ff ff31 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	4619      	mov	r1, r3
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <DBG_ProbesInit+0x13c>)
 80021ae:	f002 fc49 	bl	8004a44 <HAL_GPIO_Init>

  GPIO_InitStruct.Mode   = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pin    = (GPIO_PIN_4);
 80021ba:	2310      	movs	r3, #16
 80021bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Alternate  = GPIO_AF13_DEBUG_RF;
 80021be:	230d      	movs	r3, #13
 80021c0:	617b      	str	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7ff ff21 	bl	800200a <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <DBG_ProbesInit+0x13c>)
 80021ce:	f002 fc39 	bl	8004a44 <HAL_GPIO_Init>
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80021d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d6:	f7ff ff31 	bl	800203c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	48000400 	.word	0x48000400

080021e8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t  EnvSensors_Read(sensor_t *sensor_data)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <EnvSensors_Read+0x40>)
 80021f2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <EnvSensors_Read+0x44>)
 80021f6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <EnvSensors_Read+0x48>)
 80021fa:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a08      	ldr	r2, [pc, #32]	; (8002234 <EnvSensors_Read+0x4c>)
 8002212:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <EnvSensors_Read+0x50>)
 8002218:	611a      	str	r2, [r3, #16]

  return 0;
 800221a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	42480000 	.word	0x42480000
 800222c:	41900000 	.word	0x41900000
 8002230:	447a0000 	.word	0x447a0000
 8002234:	003e090d 	.word	0x003e090d
 8002238:	000503ab 	.word	0x000503ab

0800223c <EnvSensors_Init>:

int32_t  EnvSensors_Init(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002240:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <TIMER_IF_Init+0x5c>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <TIMER_IF_Init+0x60>)
 8002286:	f04f 32ff 	mov.w	r2, #4294967295
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800228c:	f7ff fbe8 	bl	8001a60 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002290:	f000 f856 	bl	8002340 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002298:	480c      	ldr	r0, [pc, #48]	; (80022cc <TIMER_IF_Init+0x60>)
 800229a:	f004 ffd1 	bl	8007240 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <TIMER_IF_Init+0x60>)
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022a6:	4809      	ldr	r0, [pc, #36]	; (80022cc <TIMER_IF_Init+0x60>)
 80022a8:	f005 f908 	bl	80074bc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 f9cf 	bl	8002650 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022b2:	f000 f85f 	bl	8002374 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <TIMER_IF_Init+0x5c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000152 	.word	0x20000152
 80022cc:	20001654 	.word	0x20001654

080022d0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	; 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80022de:	f107 0308 	add.w	r3, r7, #8
 80022e2:	222c      	movs	r2, #44	; 0x2c
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f018 fc82 	bl	801abf0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80022ec:	f000 f828 	bl	8002340 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <TIMER_IF_StartTimer+0x68>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	43db      	mvns	r3, r3
 8002302:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002308:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800230c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800230e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	2201      	movs	r2, #1
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <TIMER_IF_StartTimer+0x6c>)
 800231e:	f004 fe83 	bl	8007028 <HAL_RTC_SetAlarm_IT>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002328:	f7ff fb6c 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002330:	4618      	mov	r0, r3
 8002332:	3738      	adds	r7, #56	; 0x38
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000154 	.word	0x20000154
 800233c:	20001654 	.word	0x20001654

08002340 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <TIMER_IF_StopTimer+0x2c>)
 800234c:	2201      	movs	r2, #1
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002354:	4806      	ldr	r0, [pc, #24]	; (8002370 <TIMER_IF_StopTimer+0x30>)
 8002356:	f004 ff73 	bl	8007240 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <TIMER_IF_StopTimer+0x30>)
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002362:	79fb      	ldrb	r3, [r7, #7]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40002800 	.word	0x40002800
 8002370:	20001654 	.word	0x20001654

08002374 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002378:	f000 f98a 	bl	8002690 <GetTimerTicks>
 800237c:	4603      	mov	r3, r0
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <TIMER_IF_SetTimerContext+0x18>)
 8002380:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002382:	4b02      	ldr	r3, [pc, #8]	; (800238c <TIMER_IF_SetTimerContext+0x18>)
 8002384:	681b      	ldr	r3, [r3, #0]
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000154 	.word	0x20000154

08002390 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <TIMER_IF_GetTimerContext+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000154 	.word	0x20000154

080023a4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023ae:	f000 f96f 	bl	8002690 <GetTimerTicks>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000154 	.word	0x20000154

080023cc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <TIMER_IF_GetTimerValue+0x24>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80023de:	f000 f957 	bl	8002690 <GetTimerTicks>
 80023e2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000152 	.word	0x20000152

080023f4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80023fe:	2303      	movs	r3, #3
 8002400:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800240e:	b5b0      	push	{r4, r5, r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	0d95      	lsrs	r5, r2, #22
 8002424:	0294      	lsls	r4, r2, #10
 8002426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	4620      	mov	r0, r4
 8002430:	4629      	mov	r1, r5
 8002432:	f7fe fb93 	bl	8000b5c <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4613      	mov	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}

08002448 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002448:	b4b0      	push	{r4, r5, r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4618      	mov	r0, r3
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	f04f 0400 	mov.w	r4, #0
 8002464:	f04f 0500 	mov.w	r5, #0
 8002468:	015d      	lsls	r5, r3, #5
 800246a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800246e:	0154      	lsls	r4, r2, #5
 8002470:	4622      	mov	r2, r4
 8002472:	462b      	mov	r3, r5
 8002474:	1a12      	subs	r2, r2, r0
 8002476:	eb63 0301 	sbc.w	r3, r3, r1
 800247a:	f04f 0400 	mov.w	r4, #0
 800247e:	f04f 0500 	mov.w	r5, #0
 8002482:	009d      	lsls	r5, r3, #2
 8002484:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002488:	0094      	lsls	r4, r2, #2
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	1812      	adds	r2, r2, r0
 8002490:	eb41 0303 	adc.w	r3, r1, r3
 8002494:	f04f 0000 	mov.w	r0, #0
 8002498:	f04f 0100 	mov.w	r1, #0
 800249c:	00d9      	lsls	r1, r3, #3
 800249e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a2:	00d0      	lsls	r0, r2, #3
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	0a82      	lsrs	r2, r0, #10
 80024b6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024ba:	0a8b      	lsrs	r3, r1, #10
 80024bc:	4613      	mov	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80024c0:	68fb      	ldr	r3, [r7, #12]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bcb0      	pop	{r4, r5, r7}
 80024ca:	4770      	bx	lr

080024cc <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff9a 	bl	800240e <TIMER_IF_Convert_ms2Tick>
 80024da:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80024dc:	f000 f8d8 	bl	8002690 <GetTimerTicks>
 80024e0:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024e2:	e000      	b.n	80024e6 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80024e4:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024e6:	f000 f8d3 	bl	8002690 <GetTimerTicks>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d8f6      	bhi.n	80024e4 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002508:	f017 ff64 	bl	801a3d4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800251c:	f000 f8a8 	bl	8002670 <TIMER_IF_BkUp_Read_MSBticks>
 8002520:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f892 	bl	8002650 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002542:	f000 f8a5 	bl	8002690 <GetTimerTicks>
 8002546:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002548:	f000 f892 	bl	8002670 <TIMER_IF_BkUp_Read_MSBticks>
 800254c:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4618      	mov	r0, r3
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	0003      	movs	r3, r0
 8002560:	2200      	movs	r2, #0
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	4608      	mov	r0, r1
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	eb12 0800 	adds.w	r8, r2, r0
 800256e:	eb43 0901 	adc.w	r9, r3, r1
 8002572:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0a82      	lsrs	r2, r0, #10
 8002584:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002588:	0a8b      	lsrs	r3, r1, #10
 800258a:	4613      	mov	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	461a      	mov	r2, r3
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	ea02 0400 	and.w	r4, r2, r0
 80025a2:	ea03 0501 	and.w	r5, r3, r1
 80025a6:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff4b 	bl	8002448 <TIMER_IF_Convert_Tick2ms>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025ba:	69fb      	ldr	r3, [r7, #28]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080025c8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4803      	ldr	r0, [pc, #12]	; (80025e4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80025d6:	f005 f803 	bl	80075e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20001654 	.word	0x20001654

080025e8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80025f6:	f004 fff3 	bl	80075e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20001654 	.word	0x20001654

08002608 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002612:	2100      	movs	r1, #0
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002616:	f004 fffb 	bl	8007610 <HAL_RTCEx_BKUPRead>
 800261a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20001654 	.word	0x20001654

0800262c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002636:	2101      	movs	r1, #1
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800263a:	f004 ffe9 	bl	8007610 <HAL_RTCEx_BKUPRead>
 800263e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002640:	687b      	ldr	r3, [r7, #4]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001654 	.word	0x20001654

08002650 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	2102      	movs	r1, #2
 800265c:	4803      	ldr	r0, [pc, #12]	; (800266c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800265e:	f004 ffbf 	bl	80075e0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20001654 	.word	0x20001654

08002670 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002676:	2102      	movs	r1, #2
 8002678:	4804      	ldr	r0, [pc, #16]	; (800268c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800267a:	f004 ffc9 	bl	8007610 <HAL_RTCEx_BKUPRead>
 800267e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002680:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20001654 	.word	0x20001654

08002690 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <GetTimerTicks+0x14>)
 8002696:	f7ff fdde 	bl	8002256 <LL_RTC_TIME_GetSubSecond>
 800269a:	4603      	mov	r3, r0
 800269c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800269e:	4618      	mov	r0, r3
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40002800 	.word	0x40002800

080026a8 <LL_AHB2_GRP1_EnableClock>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <LL_APB2_GRP1_EnableClock>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <LL_APB2_GRP1_DisableClock>:
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	43db      	mvns	r3, r3
 800271a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271e:	4013      	ands	r3, r2
 8002720:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002732:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <MX_USART1_UART_Init+0x94>)
 8002734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800273c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002774:	4811      	ldr	r0, [pc, #68]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002776:	f005 fc36 	bl	8007fe6 <HAL_UART_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002780:	f7ff f940 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002784:	2100      	movs	r1, #0
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_USART1_UART_Init+0x90>)
 8002788:	f007 fc63 	bl	800a052 <HAL_UARTEx_SetTxFifoThreshold>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002792:	f7ff f937 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002796:	2100      	movs	r1, #0
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <MX_USART1_UART_Init+0x90>)
 800279a:	f007 fc98 	bl	800a0ce <HAL_UARTEx_SetRxFifoThreshold>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027a4:	f7ff f92e 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80027a8:	4804      	ldr	r0, [pc, #16]	; (80027bc <MX_USART1_UART_Init+0x90>)
 80027aa:	f007 fc17 	bl	8009fdc <HAL_UARTEx_EnableFifoMode>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027b4:	f7ff f926 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200016f8 	.word	0x200016f8
 80027c0:	40013800 	.word	0x40013800

080027c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b096      	sub	sp, #88	; 0x58
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	2238      	movs	r2, #56	; 0x38
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f018 fa03 	bl	801abf0 <memset>
  if(uartHandle->Instance==USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2f      	ldr	r2, [pc, #188]	; (80028ac <HAL_UART_MspInit+0xe8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d156      	bne.n	80028a2 <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80027fc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 030c 	add.w	r3, r7, #12
 8002802:	4618      	mov	r0, r3
 8002804:	f004 fa7c 	bl	8006d00 <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800280e:	f7ff f8f9 	bl	8001a04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002812:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002816:	f7ff ff5f 	bl	80026d8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	2002      	movs	r0, #2
 800281c:	f7ff ff44 	bl	80026a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002820:	23c0      	movs	r3, #192	; 0xc0
 8002822:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002830:	2307      	movs	r3, #7
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002838:	4619      	mov	r1, r3
 800283a:	481d      	ldr	r0, [pc, #116]	; (80028b0 <HAL_UART_MspInit+0xec>)
 800283c:	f002 f902 	bl	8004a44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002840:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_UART_MspInit+0xf4>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002848:	2212      	movs	r2, #18
 800284a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800284e:	2210      	movs	r2, #16
 8002850:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800286c:	2200      	movs	r2, #0
 800286e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 8002878:	f001 fcce 	bl	8004218 <HAL_DMA_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002882:	f7ff f8bf 	bl	8001a04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800288a:	679a      	str	r2, [r3, #120]	; 0x78
 800288c:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_UART_MspInit+0xf0>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2102      	movs	r1, #2
 8002896:	2024      	movs	r0, #36	; 0x24
 8002898:	f001 fc87 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800289c:	2024      	movs	r0, #36	; 0x24
 800289e:	f001 fc9e 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028a2:	bf00      	nop
 80028a4:	3758      	adds	r7, #88	; 0x58
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40013800 	.word	0x40013800
 80028b0:	48000400 	.word	0x48000400
 80028b4:	20001698 	.word	0x20001698
 80028b8:	40020008 	.word	0x40020008

080028bc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_UART_MspDeInit+0x3c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10f      	bne.n	80028ee <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80028ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028d2:	f7ff ff19 	bl	8002708 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80028d6:	21c0      	movs	r1, #192	; 0xc0
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <HAL_UART_MspDeInit+0x40>)
 80028da:	f002 fa13 	bl	8004d04 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fd40 	bl	8004368 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028e8:	2024      	movs	r0, #36	; 0x24
 80028ea:	f001 fc86 	bl	80041fa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40013800 	.word	0x40013800
 80028fc:	48000400 	.word	0x48000400

08002900 <LL_APB2_GRP1_ForceReset>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4313      	orrs	r3, r2
 8002916:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <LL_APB2_GRP1_ReleaseReset>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	43db      	mvns	r3, r3
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002938:	4013      	ands	r3, r2
 800293a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
	...

08002948 <LL_EXTI_EnableIT_0_31>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002952:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002956:	4905      	ldr	r1, [pc, #20]	; (800296c <LL_EXTI_EnableIT_0_31+0x24>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	58000800 	.word	0x58000800

08002970 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <vcom_Init+0x28>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800297e:	f7fe fee1 	bl	8001744 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002982:	f7ff fed3 	bl	800272c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002986:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800298a:	f7ff ffdd 	bl	8002948 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800298e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000158 	.word	0x20000158

0800299c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80029a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029a4:	f7ff ffac 	bl	8002900 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80029a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029ac:	f7ff ffb9 	bl	8002922 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <vcom_DeInit+0x28>)
 80029b2:	f7ff ff83 	bl	80028bc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80029b6:	200f      	movs	r0, #15
 80029b8:	f001 fc1f 	bl	80041fa <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80029bc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200016f8 	.word	0x200016f8

080029c8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	461a      	mov	r2, r3
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4804      	ldr	r0, [pc, #16]	; (80029ec <vcom_Trace_DMA+0x24>)
 80029dc:	f005 fbaa 	bl	8008134 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80029e0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200016f8 	.word	0x200016f8

080029f0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <vcom_ReceiveInit+0x70>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80029fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a02:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a0c:	4815      	ldr	r0, [pc, #84]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a0e:	f007 fa58 	bl	8009ec2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002a12:	bf00      	nop
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a22:	d0f7      	beq.n	8002a14 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002a24:	bf00      	nop
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a34:	d1f7      	bne.n	8002a26 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002a44:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a48:	f007 fa96 	bl	8009f78 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4906      	ldr	r1, [pc, #24]	; (8002a68 <vcom_ReceiveInit+0x78>)
 8002a50:	4804      	ldr	r0, [pc, #16]	; (8002a64 <vcom_ReceiveInit+0x74>)
 8002a52:	f005 fb19 	bl	8008088 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002a56:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000015c 	.word	0x2000015c
 8002a64:	200016f8 	.word	0x200016f8
 8002a68:	20001788 	.word	0x20001788

08002a6c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_UART_TxCpltCallback+0x18>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2000      	movs	r0, #0
 8002a7a:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000158 	.word	0x20000158

08002a88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart1->ErrorCode))
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_UART_RxCpltCallback+0x38>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_UART_RxCpltCallback+0x26>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_UART_RxCpltCallback+0x38>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <HAL_UART_RxCpltCallback+0x3c>)
 8002aac:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart1, &charRx, 1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_UART_RxCpltCallback+0x3c>)
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f005 fae8 	bl	8008088 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000015c 	.word	0x2000015c
 8002ac4:	20001788 	.word	0x20001788

08002ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002acc:	f7ff fbbd 	bl	800224a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad0:	480c      	ldr	r0, [pc, #48]	; (8002b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ad4:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <LoopForever+0xe>)
  movs r3, #0
 8002ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad8:	e002      	b.n	8002ae0 <LoopCopyDataInit>

08002ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ade:	3304      	adds	r3, #4

08002ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae4:	d3f9      	bcc.n	8002ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <LoopForever+0x16>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aec:	e001      	b.n	8002af2 <LoopFillZerobss>

08002aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af0:	3204      	adds	r2, #4

08002af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af4:	d3fb      	bcc.n	8002aee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002af6:	f018 f857 	bl	801aba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002afa:	f7fe ff16 	bl	800192a <main>

08002afe <LoopForever>:

LoopForever:
    b LoopForever
 8002afe:	e7fe      	b.n	8002afe <LoopForever>
  ldr   r0, =_estack
 8002b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002b0c:	0801bbc0 	.word	0x0801bbc0
  ldr r2, =_sbss
 8002b10:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8002b14:	20001840 	.word	0x20001840

08002b18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC_IRQHandler>

08002b1a <LL_AHB2_GRP1_EnableClock>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
	...

08002b4c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]
  
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <BSP_LED_Init+0x80>)
 8002b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <BSP_LED_Init+0x2e>
	  // unsupported pin
	  return BSP_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e024      	b.n	8002bc4 <BSP_LED_Init+0x78>
  }

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f7ff ffcd 	bl	8002b1a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <BSP_LED_Init+0x80>)
 8002b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b88:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2302      	movs	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <BSP_LED_Init+0x84>)
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	f107 020c 	add.w	r2, r7, #12
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 ff4d 	bl	8004a44 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <BSP_LED_Init+0x84>)
 8002bae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <BSP_LED_Init+0x80>)
 8002bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f002 f96f 	bl	8004ea0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3720      	adds	r7, #32
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	0801b6d8 	.word	0x0801b6d8
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <BSP_LED_On+0x40>)
 8002be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <BSP_LED_On+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e00c      	b.n	8002c0c <BSP_LED_On+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <BSP_LED_On+0x44>)
 8002bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <BSP_LED_On+0x40>)
 8002bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c02:	2200      	movs	r2, #0
 8002c04:	4619      	mov	r1, r3
 8002c06:	f002 f94b 	bl	8004ea0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0801b6d8 	.word	0x0801b6d8
 8002c18:	20000004 	.word	0x20000004

08002c1c <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]

  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <BSP_LED_Off+0x40>)
 8002c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <BSP_LED_Off+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e00c      	b.n	8002c54 <BSP_LED_Off+0x38>
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <BSP_LED_Off+0x44>)
 8002c3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <BSP_LED_Off+0x40>)
 8002c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f002 f927 	bl	8004ea0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	0801b6d8 	.word	0x0801b6d8
 8002c60:	20000004 	.word	0x20000004

08002c64 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if (LED_PIN[Led] == GPIO_PIN_All) {
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <BSP_LED_Toggle+0x40>)
 8002c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <BSP_LED_Toggle+0x1e>
	// unsupported pin
	return BSP_ERROR_NONE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e00c      	b.n	8002c9c <BSP_LED_Toggle+0x38>
  }

  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <BSP_LED_Toggle+0x44>)
 8002c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4905      	ldr	r1, [pc, #20]	; (8002ca4 <BSP_LED_Toggle+0x40>)
 8002c8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f002 f91a 	bl	8004ece <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	0801b6d8 	.word	0x0801b6d8
 8002ca8:	20000004 	.word	0x20000004

08002cac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460a      	mov	r2, r1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, NULL, NULL};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY, BSP_BUTTON_SWx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  if (button_callback[Button] == NULL) {
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <BSP_PB_Init+0xe4>)
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <BSP_PB_Init+0x30>
	  return BSP_ERROR_NONE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e055      	b.n	8002d88 <BSP_PB_Init+0xdc>
  }

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <BSP_PB_Init+0x3c>
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7ff ff19 	bl	8002b1a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <BSP_PB_Init+0xe8>)
 8002cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <BSP_PB_Init+0xec>)
 8002d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0c:	f107 020c 	add.w	r2, r7, #12
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fe96 	bl	8004a44 <HAL_GPIO_Init>
 8002d18:	e035      	b.n	8002d86 <BSP_PB_Init+0xda>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002d1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d1e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <BSP_PB_Init+0xec>)
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	f107 020c 	add.w	r2, r7, #12
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fe88 	bl	8004a44 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <BSP_PB_Init+0xf0>)
 8002d3a:	441a      	add	r2, r3
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4918      	ldr	r1, [pc, #96]	; (8002da0 <BSP_PB_Init+0xf4>)
 8002d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f001 fe69 	bl	8004a1e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <BSP_PB_Init+0xf0>)
 8002d52:	1898      	adds	r0, r3, r2
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <BSP_PB_Init+0xe4>)
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f001 fe44 	bl	80049ec <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <BSP_PB_Init+0xf8>)
 8002d68:	56d0      	ldrsb	r0, [r2, r3]
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <BSP_PB_Init+0xfc>)
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	2200      	movs	r2, #0
 8002d74:	4619      	mov	r1, r3
 8002d76:	f001 fa18 	bl	80041aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <BSP_PB_Init+0xf8>)
 8002d7e:	56d3      	ldrsb	r3, [r2, r3]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fa2c 	bl	80041de <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2000001c 	.word	0x2000001c
 8002d94:	0801b6e0 	.word	0x0801b6e0
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	2000178c 	.word	0x2000178c
 8002da0:	0801b6ec 	.word	0x0801b6ec
 8002da4:	0801b6e8 	.word	0x0801b6e8
 8002da8:	20000028 	.word	0x20000028

08002dac <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff fff1 	bl	8002dac <BSP_PB_Callback>
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002de2:	2310      	movs	r3, #16
 8002de4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfa:	f001 fe23 	bl	8004a44 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0a:	f001 fe1b 	bl	8004a44 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2120      	movs	r1, #32
 8002e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e16:	f002 f843 	bl	8004ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f002 f83d 	bl	8004ea0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d83f      	bhi.n	8002ec0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e73 	.word	0x08002e73
 8002e50:	08002e8d 	.word	0x08002e8d
 8002e54:	08002ea7 	.word	0x08002ea7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e60:	f002 f81e 	bl	8004ea0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2120      	movs	r1, #32
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f002 f818 	bl	8004ea0 <HAL_GPIO_WritePin>
      break;      
 8002e70:	e027      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e72:	2201      	movs	r2, #1
 8002e74:	2110      	movs	r1, #16
 8002e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7a:	f002 f811 	bl	8004ea0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2120      	movs	r1, #32
 8002e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e86:	f002 f80b 	bl	8004ea0 <HAL_GPIO_WritePin>
      break;
 8002e8a:	e01a      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2110      	movs	r1, #16
 8002e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e94:	f002 f804 	bl	8004ea0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2120      	movs	r1, #32
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea0:	f001 fffe 	bl	8004ea0 <HAL_GPIO_WritePin>
      break;
 8002ea4:	e00d      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eae:	f001 fff7 	bl	8004ea0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eba:	f001 fff1 	bl	8004ea0 <HAL_GPIO_WritePin>
      break;
 8002ebe:	e000      	b.n	8002ec2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002ec0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002ed0:	2302      	movs	r3, #2
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002eec:	2301      	movs	r3, #1
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6053      	str	r3, [r2, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	e0042000 	.word	0xe0042000

08002f14 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a03      	ldr	r2, [pc, #12]	; (8002f2c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	6053      	str	r3, [r2, #4]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	e0042000 	.word	0xe0042000

08002f30 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	6053      	str	r3, [r2, #4]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr
 8002f48:	e0042000 	.word	0xe0042000

08002f4c <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	6053      	str	r3, [r2, #4]
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr
 8002f64:	e0042000 	.word	0xe0042000

08002f68 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6053      	str	r3, [r2, #4]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	e0042000 	.word	0xe0042000

08002f84 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f8e:	f023 0304 	bic.w	r3, r3, #4
 8002f92:	6053      	str	r3, [r2, #4]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	e0042000 	.word	0xe0042000

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002faa:	2003      	movs	r0, #3
 8002fac:	f001 f8f2 	bl	8004194 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fb0:	f003 fcc4 	bl	800693c <HAL_RCC_GetHCLKFreq>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_Init+0x3c>)
 8002fb8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fba:	200f      	movs	r0, #15
 8002fbc:	f7ff f808 	bl	8001fd0 <HAL_InitTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	e001      	b.n	8002fd0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fcc:	f7fe fdd6 	bl	8001b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002fe4:	4b02      	ldr	r3, [pc, #8]	; (8002ff0 <HAL_GetUIDw0+0x10>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	1fff7590 	.word	0x1fff7590

08002ff4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002ff8:	4b02      	ldr	r3, [pc, #8]	; (8003004 <HAL_GetUIDw1+0x10>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	1fff7594 	.word	0x1fff7594

08003008 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800300c:	4b02      	ldr	r3, [pc, #8]	; (8003018 <HAL_GetUIDw2+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	1fff7598 	.word	0x1fff7598

0800301c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003020:	f7ff ff6a 	bl	8002ef8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800302c:	f7ff ff72 	bl	8002f14 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003038:	f7ff ff7a 	bl	8002f30 <LL_DBGMCU_EnableDBGStopMode>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8003044:	f7ff ff82 	bl	8002f4c <LL_DBGMCU_DisableDBGStopMode>
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003050:	f7ff ff8a 	bl	8002f68 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 800305c:	f7ff ff92 	bl	8002f84 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2107      	movs	r1, #7
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	401a      	ands	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	210f      	movs	r1, #15
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 010f 	and.w	r1, r3, #15
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800317c:	43db      	mvns	r3, r3
 800317e:	401a      	ands	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0219      	lsls	r1, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	400b      	ands	r3, r1
 80031ae:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031d6:	f023 0317 	bic.w	r3, r3, #23
 80031da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031fc:	f023 0317 	bic.w	r3, r3, #23
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6093      	str	r3, [r2, #8]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003222:	d101      	bne.n	8003228 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003244:	f023 0317 	bic.w	r3, r3, #23
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800326a:	f023 0317 	bic.w	r3, r3, #23
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <LL_ADC_IsEnabled+0x18>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <LL_ADC_IsEnabled+0x1a>
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d101      	bne.n	80032bc <LL_ADC_IsDisableOngoing+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_IsDisableOngoing+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032d8:	f023 0317 	bic.w	r3, r3, #23
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032fe:	f023 0317 	bic.w	r3, r3, #23
 8003302:	f043 0210 	orr.w	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d101      	bne.n	800332c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1ae      	b.n	80036b8 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7fe f8a9 	bl	80014c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff44 	bl	800320e <LL_ADC_IsInternalRegulatorEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d115      	bne.n	80033b8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff18 	bl	80031c6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003396:	4b9b      	ldr	r3, [pc, #620]	; (8003604 <HAL_ADC_Init+0x2cc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	4a9a      	ldr	r2, [pc, #616]	; (8003608 <HAL_ADC_Init+0x2d0>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	3301      	adds	r3, #1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033aa:	e002      	b.n	80033b2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff26 	bl	800320e <LL_ADC_IsInternalRegulatorEnabled>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033cc:	f043 0210 	orr.w	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff93 	bl	8003314 <LL_ADC_REG_IsConversionOngoing>
 80033ee:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f040 8154 	bne.w	80036a6 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 8150 	bne.w	80036a6 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff30 	bl	8003280 <LL_ADC_IsEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14f      	bne.n	80034c6 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f023 0118 	bic.w	r1, r3, #24
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003448:	4313      	orrs	r3, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d111      	bne.n	800347e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003466:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800346c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003472:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_ADC_Init+0x2d4>)
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	6979      	ldr	r1, [r7, #20]
 800348e:	430b      	orrs	r3, r1
 8003490:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800349a:	d014      	beq.n	80034c6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d00f      	beq.n	80034c6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ae:	d00a      	beq.n	80034c6 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80034b0:	4b57      	ldr	r3, [pc, #348]	; (8003610 <HAL_ADC_Init+0x2d8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034c0:	4953      	ldr	r1, [pc, #332]	; (8003610 <HAL_ADC_Init+0x2d8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e1b      	ldrb	r3, [r3, #24]
 80034ca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7e5b      	ldrb	r3, [r3, #25]
 80034d0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7e9b      	ldrb	r3, [r3, #26]
 80034d8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034da:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034e0:	2a00      	cmp	r2, #0
 80034e2:	d002      	beq.n	80034ea <HAL_ADC_Init+0x1b2>
 80034e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e8:	e000      	b.n	80034ec <HAL_ADC_Init+0x1b4>
 80034ea:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034ec:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034f2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da04      	bge.n	8003506 <HAL_ADC_Init+0x1ce>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003504:	e001      	b.n	800350a <HAL_ADC_Init+0x1d2>
 8003506:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800350a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003512:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003514:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d114      	bne.n	8003550 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7e9b      	ldrb	r3, [r3, #26]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d104      	bne.n	8003538 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	e00b      	b.n	8003550 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d009      	beq.n	800356c <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003564:	4313      	orrs	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003576:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	430b      	orrs	r3, r1
 8003582:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_ADC_Init+0x2dc>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	430b      	orrs	r3, r1
 8003596:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	461a      	mov	r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	f7ff fd7d 	bl	80030a2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	461a      	mov	r2, r3
 80035b2:	4919      	ldr	r1, [pc, #100]	; (8003618 <HAL_ADC_Init+0x2e0>)
 80035b4:	f7ff fd75 	bl	80030a2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f062 020f 	orn	r2, r2, #15
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
 80035d0:	e044      	b.n	800365c <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035da:	d13f      	bne.n	800365c <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e00c      	b.n	80035fc <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d012      	beq.n	800361c <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d9ef      	bls.n	80035e2 <HAL_ADC_Init+0x2aa>
 8003602:	e00c      	b.n	800361e <HAL_ADC_Init+0x2e6>
 8003604:	20000000 	.word	0x20000000
 8003608:	053e2d63 	.word	0x053e2d63
 800360c:	1ffffc02 	.word	0x1ffffc02
 8003610:	40012708 	.word	0x40012708
 8003614:	dffffc02 	.word	0xdffffc02
 8003618:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 800361c:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f062 020f 	orn	r2, r2, #15
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
 8003634:	e012      	b.n	800365c <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	3b01      	subs	r3, #1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f003 031c 	and.w	r3, r3, #28
 8003648:	f06f 020f 	mvn.w	r2, #15
 800364c:	fa02 f103 	lsl.w	r1, r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_ADC_Init+0x388>)
 8003664:	4013      	ands	r3, r2
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d10b      	bne.n	8003684 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003682:	e018      	b.n	80036b6 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	f023 0312 	bic.w	r3, r3, #18
 800368c:	f043 0210 	orr.w	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80036a4:	e007      	b.n	80036b6 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	833fffe7 	.word	0x833fffe7

080036c4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06a      	b.n	80037ac <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fabe 	bl	8003c64 <ADC_ConversionStop>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fb82 	bl	8003dfc <ADC_Disable>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd6d 	bl	80031ec <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003720:	f023 0303 	bic.w	r3, r3, #3
 8003724:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f240 329f 	movw	r2, #927	; 0x39f
 800372e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68d9      	ldr	r1, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <HAL_ADC_DeInit+0xf0>)
 800373c:	400b      	ands	r3, r1
 800373e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800374e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0207 	bic.w	r2, r2, #7
 800375e:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800376e:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_ADC_DeInit+0xf4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <HAL_ADC_DeInit+0xf4>)
 8003784:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003788:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd feac 	bl	80014e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	833e0200 	.word	0x833e0200
 80037b8:	40012708 	.word	0x40012708

080037bc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fda3 	bl	8003314 <LL_ADC_REG_IsConversionOngoing>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d132      	bne.n	800383a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Start+0x26>
 80037de:	2302      	movs	r3, #2
 80037e0:	e02e      	b.n	8003840 <HAL_ADC_Start+0x84>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa80 	bl	8003cf0 <ADC_Enable>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11a      	bne.n	8003830 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	221c      	movs	r2, #28
 800381a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fd4d 	bl	80032c8 <LL_ADC_REG_StartConversion>
 800382e:	e006      	b.n	800383e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003838:	e001      	b.n	800383e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_ADC_Stop+0x16>
 800385a:	2302      	movs	r3, #2
 800385c:	e022      	b.n	80038a4 <HAL_ADC_Stop+0x5c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9fc 	bl	8003c64 <ADC_ConversionStop>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d111      	bne.n	800389a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fac0 	bl	8003dfc <ADC_Disable>
 800387c:	4603      	mov	r3, r0
 800387e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d102      	bne.n	80038c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80038be:	2308      	movs	r3, #8
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e010      	b.n	80038e6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e077      	b.n	80039d2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80038e2:	2304      	movs	r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038e6:	f7fe fb7d 	bl	8001fe4 <HAL_GetTick>
 80038ea:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038ec:	e021      	b.n	8003932 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d01d      	beq.n	8003932 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038f6:	f7fe fb75 	bl	8001fe4 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <HAL_ADC_PollForConversion+0x60>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d112      	bne.n	8003932 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	f043 0204 	orr.w	r2, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04f      	b.n	80039d2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0d6      	beq.n	80038ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fbc4 	bl	80030de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d031      	beq.n	80039c0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7e9b      	ldrb	r3, [r3, #26]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d12d      	bne.n	80039c0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d126      	bne.n	80039c0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fccc 	bl	8003314 <LL_ADC_REG_IsConversionOngoing>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d112      	bne.n	80039a8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 020c 	bic.w	r2, r2, #12
 8003990:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	; 0x58
 80039a6:	e00b      	b.n	80039c0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7e1b      	ldrb	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	220c      	movs	r2, #12
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x28>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e110      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x24a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fc73 	bl	8003314 <LL_ADC_REG_IsConversionOngoing>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 80f7 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	f000 80b1 	beq.w	8003ba2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a48:	d004      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a4e:	4a7e      	ldr	r2, [pc, #504]	; (8003c48 <HAL_ADC_ConfigChannel+0x254>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d108      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f7ff fb70 	bl	8003144 <LL_ADC_REG_SetSequencerChAdd>
 8003a64:	e041      	b.n	8003aea <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	210f      	movs	r1, #15
 8003a74:	fa01 f303 	lsl.w	r3, r1, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0xa0>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0e9b      	lsrs	r3, r3, #26
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	e011      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0xc4>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003aac:	2320      	movs	r3, #32
 8003aae:	e003      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	6839      	ldr	r1, [r7, #0]
 8003aba:	6849      	ldr	r1, [r1, #4]
 8003abc:	f001 011f 	and.w	r1, r1, #31
 8003ac0:	408b      	lsls	r3, r1
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d808      	bhi.n	8003aea <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7ff fb0c 	bl	8003102 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f7ff fb49 	bl	800318e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f280 8097 	bge.w	8003c34 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b06:	4851      	ldr	r0, [pc, #324]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003b08:	f7ff fabe 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 8003b0c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4f      	ldr	r2, [pc, #316]	; (8003c50 <HAL_ADC_ConfigChannel+0x25c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d120      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d11b      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4848      	ldr	r0, [pc, #288]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003b2c:	f7ff fa9a 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b30:	4b48      	ldr	r3, [pc, #288]	; (8003c54 <HAL_ADC_ConfigChannel+0x260>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	4a48      	ldr	r2, [pc, #288]	; (8003c58 <HAL_ADC_ConfigChannel+0x264>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b4a:	e002      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f9      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b58:	e06c      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3f      	ldr	r2, [pc, #252]	; (8003c5c <HAL_ADC_ConfigChannel+0x268>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10c      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x18a>
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b74:	4619      	mov	r1, r3
 8003b76:	4835      	ldr	r0, [pc, #212]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003b78:	f7ff fa74 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003b7c:	e05a      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_ADC_ConfigChannel+0x26c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d155      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d150      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b98:	4619      	mov	r1, r3
 8003b9a:	482c      	ldr	r0, [pc, #176]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003b9c:	f7ff fa62 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003ba0:	e048      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003baa:	d004      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bb0:	4a25      	ldr	r2, [pc, #148]	; (8003c48 <HAL_ADC_ConfigChannel+0x254>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7ff fad1 	bl	8003168 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da32      	bge.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bce:	481f      	ldr	r0, [pc, #124]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003bd0:	f7ff fa5a 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 8003bd4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_ADC_ConfigChannel+0x25c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d107      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003be6:	4619      	mov	r1, r3
 8003be8:	4818      	ldr	r0, [pc, #96]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003bea:	f7ff fa3b 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003bee:	e021      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_ADC_ConfigChannel+0x268>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d107      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c00:	4619      	mov	r1, r3
 8003c02:	4812      	ldr	r0, [pc, #72]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003c04:	f7ff fa2e 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003c08:	e014      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <HAL_ADC_ConfigChannel+0x26c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10f      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <HAL_ADC_ConfigChannel+0x258>)
 8003c1e:	f7ff fa21 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003c22:	e007      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	80000004 	.word	0x80000004
 8003c4c:	40012708 	.word	0x40012708
 8003c50:	b0001000 	.word	0xb0001000
 8003c54:	20000000 	.word	0x20000000
 8003c58:	053e2d63 	.word	0x053e2d63
 8003c5c:	b8004000 	.word	0xb8004000
 8003c60:	b4002000 	.word	0xb4002000

08003c64 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fb4f 	bl	8003314 <LL_ADC_REG_IsConversionOngoing>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d033      	beq.n	8003ce4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fb0f 	bl	80032a4 <LL_ADC_IsDisableOngoing>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fb2c 	bl	80032ee <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c96:	f7fe f9a5 	bl	8001fe4 <HAL_GetTick>
 8003c9a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c9c:	e01b      	b.n	8003cd6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c9e:	f7fe f9a1 	bl	8001fe4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d914      	bls.n	8003cd6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f043 0210 	orr.w	r2, r3, #16
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e007      	b.n	8003ce6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1dc      	bne.n	8003c9e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fabd 	bl	8003280 <LL_ADC_IsEnabled>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d169      	bne.n	8003de0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <ADC_Enable+0xfc>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e055      	b.n	8003de2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fa7a 	bl	8003234 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d40:	482b      	ldr	r0, [pc, #172]	; (8003df0 <ADC_Enable+0x100>)
 8003d42:	f7ff f9a1 	bl	8003088 <LL_ADC_GetCommonPathInternalCh>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00f      	beq.n	8003d70 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d50:	4b28      	ldr	r3, [pc, #160]	; (8003df4 <ADC_Enable+0x104>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <ADC_Enable+0x108>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d62:	e002      	b.n	8003d6a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f9      	bne.n	8003d64 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e5b      	ldrb	r3, [r3, #25]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d033      	beq.n	8003de0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d78:	f7fe f934 	bl	8001fe4 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d7e:	e028      	b.n	8003dd2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fa7b 	bl	8003280 <LL_ADC_IsEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fa4d 	bl	8003234 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d9a:	f7fe f923 	bl	8001fe4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d914      	bls.n	8003dd2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d00d      	beq.n	8003dd2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e007      	b.n	8003de2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d1cf      	bne.n	8003d80 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	80000017 	.word	0x80000017
 8003df0:	40012708 	.word	0x40012708
 8003df4:	20000000 	.word	0x20000000
 8003df8:	053e2d63 	.word	0x053e2d63

08003dfc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fa4b 	bl	80032a4 <LL_ADC_IsDisableOngoing>
 8003e0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fa33 	bl	8003280 <LL_ADC_IsEnabled>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d047      	beq.n	8003eb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d144      	bne.n	8003eb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0305 	and.w	r3, r3, #5
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d10c      	bne.n	8003e4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fa0e 	bl	800325a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2203      	movs	r2, #3
 8003e44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e46:	f7fe f8cd 	bl	8001fe4 <HAL_GetTick>
 8003e4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e4c:	e029      	b.n	8003ea2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f043 0210 	orr.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e023      	b.n	8003eb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6a:	f7fe f8bb 	bl	8001fe4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d914      	bls.n	8003ea2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e007      	b.n	8003eb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1dc      	bne.n	8003e6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <LL_ADC_IsEnabled>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <LL_ADC_IsEnabled+0x18>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <LL_ADC_IsEnabled+0x1a>
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <LL_ADC_IsCalibrationOnGoing>:
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef2:	d101      	bne.n	8003ef8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_ADCEx_Calibration_Start+0x1a>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e068      	b.n	8003ff0 <HAL_ADCEx_Calibration_Start+0xec>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff ff68 	bl	8003dfc <ADC_Disable>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ffc0 	bl	8003eba <LL_ADC_IsEnabled>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d14c      	bne.n	8003fda <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f48:	f043 0202 	orr.w	r2, r3, #2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0203 	bic.w	r2, r2, #3
 8003f6a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f7a:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f7c:	e014      	b.n	8003fa8 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f8a:	d30d      	bcc.n	8003fa8 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f023 0312 	bic.w	r3, r3, #18
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e023      	b.n	8003ff0 <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff ff96 	bl	8003ede <LL_ADC_IsCalibrationOnGoing>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e2      	bne.n	8003f7e <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68d9      	ldr	r1, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f023 0303 	bic.w	r3, r3, #3
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd8:	e005      	b.n	8003fe6 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f043 0210 	orr.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <__NVIC_SetPriorityGrouping+0x44>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <__NVIC_SetPriorityGrouping+0x44>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	60d3      	str	r3, [r2, #12]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <__NVIC_GetPriorityGrouping+0x18>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f003 0307 	and.w	r3, r3, #7
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	2b00      	cmp	r3, #0
 800406c:	db0b      	blt.n	8004086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	4906      	ldr	r1, [pc, #24]	; (8004090 <__NVIC_EnableIRQ+0x34>)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	2001      	movs	r0, #1
 800407e:	fa00 f202 	lsl.w	r2, r0, r2
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	e000e100 	.word	0xe000e100

08004094 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	db12      	blt.n	80040cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	f003 021f 	and.w	r2, r3, #31
 80040ac:	490a      	ldr	r1, [pc, #40]	; (80040d8 <__NVIC_DisableIRQ+0x44>)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2001      	movs	r0, #1
 80040b6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ba:	3320      	adds	r3, #32
 80040bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040c0:	f3bf 8f4f 	dsb	sy
}
 80040c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040c6:	f3bf 8f6f 	isb	sy
}
 80040ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff2b 	bl	8003ff8 <__NVIC_SetPriorityGrouping>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b8:	f7ff ff42 	bl	8004040 <__NVIC_GetPriorityGrouping>
 80041bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff ffb4 	bl	8004130 <NVIC_EncodePriority>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff83 	bl	80040dc <__NVIC_SetPriority>
}
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff35 	bl	800405c <__NVIC_EnableIRQ>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff43 	bl	8004094 <__NVIC_DisableIRQ>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e08e      	b.n	8004348 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_DMA_Init+0x138>)
 8004232:	429a      	cmp	r2, r3
 8004234:	d80f      	bhi.n	8004256 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	4b45      	ldr	r3, [pc, #276]	; (8004354 <HAL_DMA_Init+0x13c>)
 800423e:	4413      	add	r3, r2
 8004240:	4a45      	ldr	r2, [pc, #276]	; (8004358 <HAL_DMA_Init+0x140>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	009a      	lsls	r2, r3, #2
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a42      	ldr	r2, [pc, #264]	; (800435c <HAL_DMA_Init+0x144>)
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
 8004254:	e00e      	b.n	8004274 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	4b40      	ldr	r3, [pc, #256]	; (8004360 <HAL_DMA_Init+0x148>)
 800425e:	4413      	add	r3, r2
 8004260:	4a3d      	ldr	r2, [pc, #244]	; (8004358 <HAL_DMA_Init+0x140>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	009a      	lsls	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <HAL_DMA_Init+0x14c>)
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6819      	ldr	r1, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fb24 	bl	8004914 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d4:	d102      	bne.n	80042dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_DMA_Init+0x106>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d80c      	bhi.n	800431e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb4d 	bl	80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	e008      	b.n	8004330 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40020407 	.word	0x40020407
 8004354:	bffdfff8 	.word	0xbffdfff8
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	40020000 	.word	0x40020000
 8004360:	bffdfbf8 	.word	0xbffdfbf8
 8004364:	40020400 	.word	0x40020400

08004368 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07b      	b.n	8004472 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b3a      	ldr	r3, [pc, #232]	; (800447c <HAL_DMA_DeInit+0x114>)
 8004392:	429a      	cmp	r2, r3
 8004394:	d80f      	bhi.n	80043b6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	4b38      	ldr	r3, [pc, #224]	; (8004480 <HAL_DMA_DeInit+0x118>)
 800439e:	4413      	add	r3, r2
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_DMA_DeInit+0x11c>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	009a      	lsls	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a35      	ldr	r2, [pc, #212]	; (8004488 <HAL_DMA_DeInit+0x120>)
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
 80043b4:	e00e      	b.n	80043d4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_DMA_DeInit+0x124>)
 80043be:	4413      	add	r3, r2
 80043c0:	4a30      	ldr	r2, [pc, #192]	; (8004484 <HAL_DMA_DeInit+0x11c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	009a      	lsls	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <HAL_DMA_DeInit+0x128>)
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 021c 	and.w	r2, r3, #28
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fa8f 	bl	8004914 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004406:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00f      	beq.n	8004430 <HAL_DMA_DeInit+0xc8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d80b      	bhi.n	8004430 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fac3 	bl	80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800442e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40020407 	.word	0x40020407
 8004480:	bffdfff8 	.word	0xbffdfff8
 8004484:	cccccccd 	.word	0xcccccccd
 8004488:	40020000 	.word	0x40020000
 800448c:	bffdfbf8 	.word	0xbffdfbf8
 8004490:	40020400 	.word	0x40020400

08004494 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_DMA_Start_IT+0x20>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e069      	b.n	8004588 <HAL_DMA_Start_IT+0xf4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d155      	bne.n	8004574 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f9d3 	bl	8004898 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 020e 	orr.w	r2, r2, #14
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00f      	b.n	800452c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 020a 	orr.w	r2, r2, #10
 800452a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004548:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e008      	b.n	8004586 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2280      	movs	r2, #128	; 0x80
 8004578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e04f      	b.n	8004642 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d008      	beq.n	80045c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2204      	movs	r2, #4
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e040      	b.n	8004642 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020e 	bic.w	r2, r2, #14
 80045ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f003 021c 	and.w	r2, r3, #28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2101      	movs	r1, #1
 80045fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004602:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800460c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004624:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800462e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d005      	beq.n	8004670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2204      	movs	r2, #4
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e047      	b.n	8004700 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020e 	bic.w	r2, r2, #14
 800467e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a4:	f003 021c 	and.w	r2, r3, #28
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
    }
  }
  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	f003 031c 	and.w	r3, r3, #28
 800472c:	2204      	movs	r2, #4
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d027      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7c>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d022      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f003 021c 	and.w	r2, r3, #28
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2104      	movs	r1, #4
 800476e:	fa01 f202 	lsl.w	r2, r1, r2
 8004772:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8081 	beq.w	8004880 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004786:	e07b      	b.n	8004880 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	f003 031c 	and.w	r3, r3, #28
 8004790:	2202      	movs	r2, #2
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d03d      	beq.n	8004818 <HAL_DMA_IRQHandler+0x10c>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d038      	beq.n	8004818 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020a 	bic.w	r2, r2, #10
 80047c2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b2e      	ldr	r3, [pc, #184]	; (800488c <HAL_DMA_IRQHandler+0x180>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d909      	bls.n	80047ec <HAL_DMA_IRQHandler+0xe0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f003 031c 	and.w	r3, r3, #28
 80047e0:	4a2b      	ldr	r2, [pc, #172]	; (8004890 <HAL_DMA_IRQHandler+0x184>)
 80047e2:	2102      	movs	r1, #2
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	6053      	str	r3, [r2, #4]
 80047ea:	e008      	b.n	80047fe <HAL_DMA_IRQHandler+0xf2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f003 031c 	and.w	r3, r3, #28
 80047f4:	4a27      	ldr	r2, [pc, #156]	; (8004894 <HAL_DMA_IRQHandler+0x188>)
 80047f6:	2102      	movs	r1, #2
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d038      	beq.n	8004880 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004816:	e033      	b.n	8004880 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	f003 031c 	and.w	r3, r3, #28
 8004820:	2208      	movs	r2, #8
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02a      	beq.n	8004882 <HAL_DMA_IRQHandler+0x176>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d025      	beq.n	8004882 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 020e 	bic.w	r2, r2, #14
 8004844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	f003 021c 	and.w	r2, r3, #28
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2101      	movs	r1, #1
 8004854:	fa01 f202 	lsl.w	r2, r1, r2
 8004858:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004880:	bf00      	nop
 8004882:	bf00      	nop
}
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40020080 	.word	0x40020080
 8004890:	40020400 	.word	0x40020400
 8004894:	40020000 	.word	0x40020000

08004898 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	f003 021c 	and.w	r2, r3, #28
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f202 	lsl.w	r2, r1, r2
 80048d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d108      	bne.n	80048f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048f6:	e007      	b.n	8004908 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
	...

08004914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d813      	bhi.n	8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004934:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3b08      	subs	r3, #8
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e011      	b.n	8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	009a      	lsls	r2, r3, #2
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800495a:	4413      	add	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	3b08      	subs	r3, #8
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	3307      	adds	r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004978:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2201      	movs	r2, #1
 8004982:	409a      	lsls	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40020407 	.word	0x40020407
 8004998:	cccccccd 	.word	0xcccccccd
 800499c:	4002081c 	.word	0x4002081c
 80049a0:	40020880 	.word	0x40020880

080049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80049c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	1000823f 	.word	0x1000823f
 80049e8:	40020940 	.word	0x40020940

080049ec <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	460b      	mov	r3, r1
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	bf00      	nop
  }

  return status;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e003      	b.n	8004a3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a52:	e140      	b.n	8004cd6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8132 	beq.w	8004cd0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d005      	beq.n	8004a84 <HAL_GPIO_Init+0x40>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d130      	bne.n	8004ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aba:	2201      	movs	r2, #1
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0201 	and.w	r2, r3, #1
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d017      	beq.n	8004b22 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d123      	bne.n	8004b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	08da      	lsrs	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3208      	adds	r2, #8
 8004b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3208      	adds	r2, #8
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	2203      	movs	r2, #3
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 808c 	beq.w	8004cd0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bb8:	4a4e      	ldr	r2, [pc, #312]	; (8004cf4 <HAL_GPIO_Init+0x2b0>)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	2207      	movs	r2, #7
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004be2:	d00d      	beq.n	8004c00 <HAL_GPIO_Init+0x1bc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a44      	ldr	r2, [pc, #272]	; (8004cf8 <HAL_GPIO_Init+0x2b4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d007      	beq.n	8004bfc <HAL_GPIO_Init+0x1b8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a43      	ldr	r2, [pc, #268]	; (8004cfc <HAL_GPIO_Init+0x2b8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_GPIO_Init+0x1b4>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e004      	b.n	8004c02 <HAL_GPIO_Init+0x1be>
 8004bf8:	2307      	movs	r3, #7
 8004bfa:	e002      	b.n	8004c02 <HAL_GPIO_Init+0x1be>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <HAL_GPIO_Init+0x1be>
 8004c00:	2300      	movs	r3, #0
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	f002 0203 	and.w	r2, r2, #3
 8004c08:	0092      	lsls	r2, r2, #2
 8004c0a:	4093      	lsls	r3, r2
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c12:	4938      	ldr	r1, [pc, #224]	; (8004cf4 <HAL_GPIO_Init+0x2b0>)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	3302      	adds	r3, #2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c20:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c26:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c46:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c74:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c7c:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ca0:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cca:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <HAL_GPIO_Init+0x2bc>)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f47f aeb7 	bne.w	8004a54 <HAL_GPIO_Init+0x10>
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	48000400 	.word	0x48000400
 8004cfc:	48000800 	.word	0x48000800
 8004d00:	58000800 	.word	0x58000800

08004d04 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d12:	e0af      	b.n	8004e74 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d14:	2201      	movs	r2, #1
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80a2 	beq.w	8004e6e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d2a:	4a59      	ldr	r2, [pc, #356]	; (8004e90 <HAL_GPIO_DeInit+0x18c>)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	3302      	adds	r3, #2
 8004d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d36:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	2207      	movs	r2, #7
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d52:	d00d      	beq.n	8004d70 <HAL_GPIO_DeInit+0x6c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a4f      	ldr	r2, [pc, #316]	; (8004e94 <HAL_GPIO_DeInit+0x190>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <HAL_GPIO_DeInit+0x68>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a4e      	ldr	r2, [pc, #312]	; (8004e98 <HAL_GPIO_DeInit+0x194>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_GPIO_DeInit+0x64>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e004      	b.n	8004d72 <HAL_GPIO_DeInit+0x6e>
 8004d68:	2307      	movs	r3, #7
 8004d6a:	e002      	b.n	8004d72 <HAL_GPIO_DeInit+0x6e>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_GPIO_DeInit+0x6e>
 8004d70:	2300      	movs	r3, #0
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	f002 0203 	and.w	r2, r2, #3
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	4093      	lsls	r3, r2
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d136      	bne.n	8004df0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d82:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004d84:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	4943      	ldr	r1, [pc, #268]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d94:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004d96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	493f      	ldr	r1, [pc, #252]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004da6:	4b3d      	ldr	r3, [pc, #244]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	43db      	mvns	r3, r3
 8004dae:	493b      	ldr	r1, [pc, #236]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004db4:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_GPIO_DeInit+0x198>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	2207      	movs	r2, #7
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004dd2:	4a2f      	ldr	r2, [pc, #188]	; (8004e90 <HAL_GPIO_DeInit+0x18c>)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	3302      	adds	r3, #2
 8004dda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	482b      	ldr	r0, [pc, #172]	; (8004e90 <HAL_GPIO_DeInit+0x18c>)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	400a      	ands	r2, r1
 8004dea:	3302      	adds	r3, #2
 8004dec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	2103      	movs	r1, #3
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	08d2      	lsrs	r2, r2, #3
 8004e24:	4019      	ands	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3208      	adds	r2, #8
 8004e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	2103      	movs	r1, #3
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	401a      	ands	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	2103      	movs	r1, #3
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	401a      	ands	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f47f af49 	bne.w	8004d14 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	48000400 	.word	0x48000400
 8004e98:	48000800 	.word	0x48000800
 8004e9c:	58000800 	.word	0x58000800

08004ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
 8004eac:	4613      	mov	r3, r2
 8004eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb0:	787b      	ldrb	r3, [r7, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ee0:	887a      	ldrh	r2, [r7, #2]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	041a      	lsls	r2, r3, #16
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	400b      	ands	r3, r1
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	619a      	str	r2, [r3, #24]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f16:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f005 fa54 	bl	800a3cc <HAL_GPIO_EXTI_Callback>
  }
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	58000800 	.word	0x58000800

08004f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e081      	b.n	8005046 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fc fc76 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	e006      	b.n	8004fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d104      	bne.n	8004fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1a      	ldr	r2, [r3, #32]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	461a      	mov	r2, r3
 800505c:	460b      	mov	r3, r1
 800505e:	817b      	strh	r3, [r7, #10]
 8005060:	4613      	mov	r3, r2
 8005062:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	f040 80da 	bne.w	8005226 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_I2C_Master_Transmit+0x30>
 800507c:	2302      	movs	r3, #2
 800507e:	e0d3      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005088:	f7fc ffac 	bl	8001fe4 <HAL_GetTick>
 800508c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2319      	movs	r3, #25
 8005094:	2201      	movs	r2, #1
 8005096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f9e5 	bl	800546a <I2C_WaitOnFlagUntilTimeout>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0be      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2221      	movs	r2, #33	; 0x21
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2210      	movs	r2, #16
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	893a      	ldrh	r2, [r7, #8]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2bff      	cmp	r3, #255	; 0xff
 80050da:	d90e      	bls.n	80050fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	8979      	ldrh	r1, [r7, #10]
 80050ea:	4b51      	ldr	r3, [pc, #324]	; (8005230 <HAL_I2C_Master_Transmit+0x1e0>)
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb58 	bl	80057a8 <I2C_TransferConfig>
 80050f8:	e06c      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005108:	b2da      	uxtb	r2, r3
 800510a:	8979      	ldrh	r1, [r7, #10]
 800510c:	4b48      	ldr	r3, [pc, #288]	; (8005230 <HAL_I2C_Master_Transmit+0x1e0>)
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fb47 	bl	80057a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800511a:	e05b      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	6a39      	ldr	r1, [r7, #32]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f9e2 	bl	80054ea <I2C_WaitOnTXISFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e07b      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d034      	beq.n	80051d4 <HAL_I2C_Master_Transmit+0x184>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	d130      	bne.n	80051d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	2200      	movs	r2, #0
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f974 	bl	800546a <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04d      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2bff      	cmp	r3, #255	; 0xff
 8005194:	d90e      	bls.n	80051b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	8979      	ldrh	r1, [r7, #10]
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fafb 	bl	80057a8 <I2C_TransferConfig>
 80051b2:	e00f      	b.n	80051d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	8979      	ldrh	r1, [r7, #10]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 faea 	bl	80057a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d19e      	bne.n	800511c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6a39      	ldr	r1, [r7, #32]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f9c1 	bl	800556a <I2C_WaitOnSTOPFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01a      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2220      	movs	r2, #32
 80051f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_I2C_Master_Transmit+0x1e4>)
 8005206:	400b      	ands	r3, r1
 8005208:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	80002000 	.word	0x80002000
 8005234:	fe00e800 	.word	0xfe00e800

08005238 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	461a      	mov	r2, r3
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
 8005248:	4613      	mov	r3, r2
 800524a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b20      	cmp	r3, #32
 8005256:	f040 80db 	bne.w	8005410 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_I2C_Master_Receive+0x30>
 8005264:	2302      	movs	r3, #2
 8005266:	e0d4      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005270:	f7fc feb8 	bl	8001fe4 <HAL_GetTick>
 8005274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	2319      	movs	r3, #25
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f8f1 	bl	800546a <I2C_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e0bf      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2222      	movs	r2, #34	; 0x22
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2210      	movs	r2, #16
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	893a      	ldrh	r2, [r7, #8]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2bff      	cmp	r3, #255	; 0xff
 80052c2:	d90e      	bls.n	80052e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	22ff      	movs	r2, #255	; 0xff
 80052c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	8979      	ldrh	r1, [r7, #10]
 80052d2:	4b52      	ldr	r3, [pc, #328]	; (800541c <HAL_I2C_Master_Receive+0x1e4>)
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fa64 	bl	80057a8 <I2C_TransferConfig>
 80052e0:	e06d      	b.n	80053be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	8979      	ldrh	r1, [r7, #10]
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <HAL_I2C_Master_Receive+0x1e4>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fa53 	bl	80057a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005302:	e05c      	b.n	80053be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	6a39      	ldr	r1, [r7, #32]
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f96b 	bl	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e07c      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d034      	beq.n	80053be <HAL_I2C_Master_Receive+0x186>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d130      	bne.n	80053be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2200      	movs	r2, #0
 8005364:	2180      	movs	r1, #128	; 0x80
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f87f 	bl	800546a <I2C_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e04d      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537a:	b29b      	uxth	r3, r3
 800537c:	2bff      	cmp	r3, #255	; 0xff
 800537e:	d90e      	bls.n	800539e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	22ff      	movs	r2, #255	; 0xff
 8005384:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	b2da      	uxtb	r2, r3
 800538c:	8979      	ldrh	r1, [r7, #10]
 800538e:	2300      	movs	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa06 	bl	80057a8 <I2C_TransferConfig>
 800539c:	e00f      	b.n	80053be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f9f5 	bl	80057a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d19d      	bne.n	8005304 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8cc 	bl	800556a <I2C_WaitOnSTOPFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e01a      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2220      	movs	r2, #32
 80053e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <HAL_I2C_Master_Receive+0x1e8>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	80002400 	.word	0x80002400
 8005420:	fe00e800 	.word	0xfe00e800

08005424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d103      	bne.n	8005442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2200      	movs	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d007      	beq.n	8005460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	619a      	str	r2, [r3, #24]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547a:	e022      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d01e      	beq.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fc fdae 	bl	8001fe4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d113      	bne.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e00f      	b.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699a      	ldr	r2, [r3, #24]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf0c      	ite	eq
 80054d2:	2301      	moveq	r3, #1
 80054d4:	2300      	movne	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d0cd      	beq.n	800547c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f6:	e02c      	b.n	8005552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f8dd 	bl	80056bc <I2C_IsAcknowledgeFailed>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e02a      	b.n	8005562 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d01e      	beq.n	8005552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005514:	f7fc fd66 	bl	8001fe4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d113      	bne.n	8005552 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	f043 0220 	orr.w	r2, r3, #32
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e007      	b.n	8005562 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b02      	cmp	r3, #2
 800555e:	d1cb      	bne.n	80054f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005576:	e028      	b.n	80055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f89d 	bl	80056bc <I2C_IsAcknowledgeFailed>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e026      	b.n	80055da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558c:	f7fc fd2a 	bl	8001fe4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d113      	bne.n	80055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e007      	b.n	80055da <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d1cf      	bne.n	8005578 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055f0:	e055      	b.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f860 	bl	80056bc <I2C_IsAcknowledgeFailed>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e053      	b.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b20      	cmp	r3, #32
 8005612:	d129      	bne.n	8005668 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d105      	bne.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e03f      	b.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2220      	movs	r2, #32
 8005634:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005642:	400b      	ands	r3, r1
 8005644:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e022      	b.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005668:	f7fc fcbc 	bl	8001fe4 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	429a      	cmp	r2, r3
 8005676:	d302      	bcc.n	800567e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e007      	b.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d1a2      	bne.n	80055f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	fe00e800 	.word	0xfe00e800

080056bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d161      	bne.n	800579a <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e4:	d02b      	beq.n	800573e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f4:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056f6:	e022      	b.n	800573e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fe:	d01e      	beq.n	800573e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005700:	f7fc fc70 	bl	8001fe4 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	d302      	bcc.n	8005716 <I2C_IsAcknowledgeFailed+0x5a>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d113      	bne.n	800573e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e02e      	b.n	800579c <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d1d5      	bne.n	80056f8 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2210      	movs	r2, #16
 8005752:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2220      	movs	r2, #32
 800575a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f7ff fe61 	bl	8005424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <I2C_IsAcknowledgeFailed+0xe8>)
 800576e:	400b      	ands	r3, r1
 8005770:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f043 0204 	orr.w	r2, r3, #4
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	fe00e800 	.word	0xfe00e800

080057a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	460b      	mov	r3, r1
 80057b4:	817b      	strh	r3, [r7, #10]
 80057b6:	4613      	mov	r3, r2
 80057b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	0d5b      	lsrs	r3, r3, #21
 80057c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <I2C_TransferConfig+0x54>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	43db      	mvns	r3, r3
 80057ce:	ea02 0103 	and.w	r1, r2, r3
 80057d2:	897b      	ldrh	r3, [r7, #10]
 80057d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057d8:	7a7b      	ldrb	r3, [r7, #9]
 80057da:	041b      	lsls	r3, r3, #16
 80057dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	03ff63ff 	.word	0x03ff63ff

08005800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b20      	cmp	r3, #32
 8005814:	d138      	bne.n	8005888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005820:	2302      	movs	r3, #2
 8005822:	e032      	b.n	800588a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
  }
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d139      	bne.n	800591e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e033      	b.n	8005920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0201 	orr.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e000      	b.n	8005920 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	bc80      	pop	{r7}
 8005928:	4770      	bx	lr
	...

0800592c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a03      	ldr	r2, [pc, #12]	; (8005944 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593a:	6013      	str	r3, [r2, #0]
}
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	58000400 	.word	0x58000400

08005948 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800594c:	4b03      	ldr	r3, [pc, #12]	; (800595c <HAL_PWREx_GetVoltageRange+0x14>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005954:	4618      	mov	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr
 800595c:	58000400 	.word	0x58000400

08005960 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d101      	bne.n	8005976 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	58000400 	.word	0x58000400

08005984 <LL_RCC_HSE_EnableTcxo>:
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005996:	6013      	str	r3, [r2, #0]
}
 8005998:	bf00      	nop
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <LL_RCC_HSE_DisableTcxo>:
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80059a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b2:	6013      	str	r3, [r2, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ce:	d101      	bne.n	80059d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <LL_RCC_HSE_Enable>:
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <LL_RCC_HSE_Disable>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_HSE_IsReady>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a28:	d101      	bne.n	8005a2e <LL_RCC_HSE_IsReady+0x18>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <LL_RCC_HSE_IsReady+0x1a>
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <LL_RCC_HSI_Enable>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_HSI_Disable>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <LL_RCC_HSI_IsReady>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d101      	bne.n	8005a88 <LL_RCC_HSI_IsReady+0x18>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <LL_RCC_HSI_IsReady+0x1a>
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <LL_RCC_LSE_IsReady>:
{
 8005aba:	b480      	push	{r7}
 8005abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d101      	bne.n	8005ad2 <LL_RCC_LSE_IsReady+0x18>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <LL_RCC_LSE_IsReady+0x1a>
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <LL_RCC_LSI_Enable>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <LL_RCC_LSI_Disable>:
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <LL_RCC_LSI_IsReady>:
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d101      	bne.n	8005b34 <LL_RCC_LSI_IsReady+0x18>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <LL_RCC_LSI_IsReady+0x1a>
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_MSI_Enable>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6013      	str	r3, [r2, #0]
}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_MSI_Disable>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <LL_RCC_MSI_IsReady>:
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d101      	bne.n	8005b8c <LL_RCC_MSI_IsReady+0x16>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <LL_RCC_MSI_IsReady+0x18>
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005b96:	b480      	push	{r7}
 8005b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d101      	bne.n	8005bac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <LL_RCC_MSI_GetRange>:
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	604b      	str	r3, [r1, #4]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <LL_RCC_SetSysClkSource>:
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f023 0203 	bic.w	r2, r3, #3
 8005c1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_GetSysClkSource>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr

08005c48 <LL_RCC_SetAHBPrescaler>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_SetAHB3Prescaler>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bc80      	pop	{r7}
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_SetAPB1Prescaler>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr

08005cc0 <LL_RCC_SetAPB2Prescaler>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	608b      	str	r3, [r1, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <LL_RCC_GetAHBPrescaler>:
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <LL_RCC_GetAHB3Prescaler>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <LL_RCC_GetAPB1Prescaler>:
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <LL_RCC_GetAPB2Prescaler>:
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d54:	6013      	str	r3, [r2, #0]
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d70:	6013      	str	r3, [r2, #0]
}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr

08005d7a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d8c:	d101      	bne.n	8005d92 <LL_RCC_PLL_IsReady+0x18>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <LL_RCC_PLL_IsReady+0x1a>
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0303 	and.w	r3, r3, #3
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr

08005df6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005df6:	b480      	push	{r7}
 8005df8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e08:	d101      	bne.n	8005e0e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr

08005e18 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e2c:	d101      	bne.n	8005e32 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e4e:	d101      	bne.n	8005e54 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e70:	d101      	bne.n	8005e76 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e38a      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e92:	f7ff fece 	bl	8005c32 <LL_RCC_GetSysClkSource>
 8005e96:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e98:	f7ff ffa2 	bl	8005de0 <LL_RCC_PLL_GetMainSource>
 8005e9c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80c9 	beq.w	800603e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x3e>
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d17b      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d178      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ebe:	f7ff fe5a 	bl	8005b76 <LL_RCC_MSI_IsReady>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x54>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e369      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x72>
 8005ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef0:	e006      	b.n	8005f00 <HAL_RCC_OscConfig+0x80>
 8005ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d222      	bcs.n	8005f4a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fd4f 	bl	80069ac <RCC_SetFlashLatencyFromMSIRange>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e347      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f22:	f043 0308 	orr.w	r3, r3, #8
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fe4e 	bl	8005be4 <LL_RCC_MSI_SetCalibTrimming>
 8005f48:	e021      	b.n	8005f8e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f54:	f043 0308 	orr.w	r3, r3, #8
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fe35 	bl	8005be4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fd14 	bl	80069ac <RCC_SetFlashLatencyFromMSIRange>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e30c      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f8e:	f000 fcd5 	bl	800693c <HAL_RCC_GetHCLKFreq>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4ab4      	ldr	r2, [pc, #720]	; (8006268 <HAL_RCC_OscConfig+0x3e8>)
 8005f96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f98:	4bb4      	ldr	r3, [pc, #720]	; (800626c <HAL_RCC_OscConfig+0x3ec>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fc f817 	bl	8001fd0 <HAL_InitTick>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d047      	beq.n	800603c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	e2fb      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02c      	beq.n	8006012 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fb8:	f7ff fdc1 	bl	8005b3e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fbc:	f7fc f812 	bl	8001fe4 <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fc4:	f7fc f80e 	bl	8001fe4 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e2e8      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005fd6:	f7ff fdce 	bl	8005b76 <LL_RCC_MSI_IsReady>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f1      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fea:	f043 0308 	orr.w	r3, r3, #8
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006002:	4313      	orrs	r3, r2
 8006004:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fdea 	bl	8005be4 <LL_RCC_MSI_SetCalibTrimming>
 8006010:	e015      	b.n	800603e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006012:	f7ff fda2 	bl	8005b5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006016:	f7fb ffe5 	bl	8001fe4 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800601e:	f7fb ffe1 	bl	8001fe4 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e2bb      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006030:	f7ff fda1 	bl	8005b76 <LL_RCC_MSI_IsReady>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f1      	bne.n	800601e <HAL_RCC_OscConfig+0x19e>
 800603a:	e000      	b.n	800603e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800603c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d05f      	beq.n	800610a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d005      	beq.n	800605c <HAL_RCC_OscConfig+0x1dc>
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d10d      	bne.n	8006072 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d10a      	bne.n	8006072 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605c:	f7ff fcdb 	bl	8005a16 <LL_RCC_HSE_IsReady>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d050      	beq.n	8006108 <HAL_RCC_OscConfig+0x288>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d14c      	bne.n	8006108 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e29a      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d102      	bne.n	8006098 <HAL_RCC_OscConfig+0x218>
 8006092:	f7ff fca4 	bl	80059de <LL_RCC_HSE_Enable>
 8006096:	e00d      	b.n	80060b4 <HAL_RCC_OscConfig+0x234>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80060a0:	d104      	bne.n	80060ac <HAL_RCC_OscConfig+0x22c>
 80060a2:	f7ff fc6f 	bl	8005984 <LL_RCC_HSE_EnableTcxo>
 80060a6:	f7ff fc9a 	bl	80059de <LL_RCC_HSE_Enable>
 80060aa:	e003      	b.n	80060b4 <HAL_RCC_OscConfig+0x234>
 80060ac:	f7ff fca5 	bl	80059fa <LL_RCC_HSE_Disable>
 80060b0:	f7ff fc76 	bl	80059a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d012      	beq.n	80060e2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fb ff92 	bl	8001fe4 <HAL_GetTick>
 80060c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c4:	f7fb ff8e 	bl	8001fe4 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b64      	cmp	r3, #100	; 0x64
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e268      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80060d6:	f7ff fc9e 	bl	8005a16 <LL_RCC_HSE_IsReady>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f1      	beq.n	80060c4 <HAL_RCC_OscConfig+0x244>
 80060e0:	e013      	b.n	800610a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fb ff7f 	bl	8001fe4 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ea:	f7fb ff7b 	bl	8001fe4 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b64      	cmp	r3, #100	; 0x64
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e255      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80060fc:	f7ff fc8b 	bl	8005a16 <LL_RCC_HSE_IsReady>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f1      	bne.n	80060ea <HAL_RCC_OscConfig+0x26a>
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d04b      	beq.n	80061ae <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d005      	beq.n	8006128 <HAL_RCC_OscConfig+0x2a8>
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b0c      	cmp	r3, #12
 8006120:	d113      	bne.n	800614a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d110      	bne.n	800614a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006128:	f7ff fca2 	bl	8005a70 <LL_RCC_HSI_IsReady>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d005      	beq.n	800613e <HAL_RCC_OscConfig+0x2be>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e234      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fca5 	bl	8005a92 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006148:	e031      	b.n	80061ae <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d019      	beq.n	8006186 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006152:	f7ff fc71 	bl	8005a38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006156:	f7fb ff45 	bl	8001fe4 <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800615e:	f7fb ff41 	bl	8001fe4 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e21b      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006170:	f7ff fc7e 	bl	8005a70 <LL_RCC_HSI_IsReady>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f1      	beq.n	800615e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fc87 	bl	8005a92 <LL_RCC_HSI_SetCalibTrimming>
 8006184:	e013      	b.n	80061ae <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006186:	f7ff fc65 	bl	8005a54 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb ff2b 	bl	8001fe4 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006192:	f7fb ff27 	bl	8001fe4 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e201      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80061a4:	f7ff fc64 	bl	8005a70 <LL_RCC_HSI_IsReady>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f1      	bne.n	8006192 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d06e      	beq.n	8006298 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d056      	beq.n	8006270 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80061c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ca:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d031      	beq.n	800623e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d006      	beq.n	80061f2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e1da      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80061fc:	f7ff fc7e 	bl	8005afc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006200:	f7fb fef0 	bl	8001fe4 <HAL_GetTick>
 8006204:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006208:	f7fb feec 	bl	8001fe4 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b11      	cmp	r3, #17
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e1c6      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800621a:	f7ff fc7f 	bl	8005b1c <LL_RCC_LSI_IsReady>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f1      	bne.n	8006208 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800622c:	f023 0210 	bic.w	r2, r3, #16
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623e:	f7ff fc4d 	bl	8005adc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fb fecf 	bl	8001fe4 <HAL_GetTick>
 8006246:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800624a:	f7fb fecb 	bl	8001fe4 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b11      	cmp	r3, #17
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e1a5      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 800625c:	f7ff fc5e 	bl	8005b1c <LL_RCC_LSI_IsReady>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f1      	beq.n	800624a <HAL_RCC_OscConfig+0x3ca>
 8006266:	e017      	b.n	8006298 <HAL_RCC_OscConfig+0x418>
 8006268:	20000000 	.word	0x20000000
 800626c:	20000034 	.word	0x20000034
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006270:	f7ff fc44 	bl	8005afc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb feb6 	bl	8001fe4 <HAL_GetTick>
 8006278:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627c:	f7fb feb2 	bl	8001fe4 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b11      	cmp	r3, #17
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e18c      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 800628e:	f7ff fc45 	bl	8005b1c <LL_RCC_LSI_IsReady>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f1      	bne.n	800627c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80d8 	beq.w	8006456 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80062a6:	f7ff fb5b 	bl	8005960 <LL_PWR_IsEnabledBkUpAccess>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d113      	bne.n	80062d8 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062b0:	f7ff fb3c 	bl	800592c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062b4:	f7fb fe96 	bl	8001fe4 <HAL_GetTick>
 80062b8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062bc:	f7fb fe92 	bl	8001fe4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e16c      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80062ce:	f7ff fb47 	bl	8005960 <LL_PWR_IsEnabledBkUpAccess>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f1      	beq.n	80062bc <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d07b      	beq.n	80063d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b85      	cmp	r3, #133	; 0x85
 80062e6:	d003      	beq.n	80062f0 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d109      	bne.n	8006304 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80062f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062fc:	f043 0304 	orr.w	r3, r3, #4
 8006300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006304:	f7fb fe6e 	bl	8001fe4 <HAL_GetTick>
 8006308:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800630a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800631e:	e00a      	b.n	8006336 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006320:	f7fb fe60 	bl	8001fe4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e138      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006336:	f7ff fbc0 	bl	8005aba <LL_RCC_LSE_IsReady>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ef      	beq.n	8006320 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b81      	cmp	r3, #129	; 0x81
 8006346:	d003      	beq.n	8006350 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b85      	cmp	r3, #133	; 0x85
 800634e:	d121      	bne.n	8006394 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fe48 	bl	8001fe4 <HAL_GetTick>
 8006354:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800636a:	e00a      	b.n	8006382 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636c:	f7fb fe3a 	bl	8001fe4 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f241 3288 	movw	r2, #5000	; 0x1388
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e112      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ec      	beq.n	800636c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006392:	e060      	b.n	8006456 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fb fe26 	bl	8001fe4 <HAL_GetTick>
 8006398:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fb fe18 	bl	8001fe4 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0f0      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1ec      	bne.n	80063b0 <HAL_RCC_OscConfig+0x530>
 80063d6:	e03e      	b.n	8006456 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d8:	f7fb fe04 	bl	8001fe4 <HAL_GetTick>
 80063dc:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80063de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80063f2:	e00a      	b.n	800640a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f4:	f7fb fdf6 	bl	8001fe4 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e0ce      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1ec      	bne.n	80063f4 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fb fde3 	bl	8001fe4 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fb fdd5 	bl	8001fe4 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0ad      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800644c:	f7ff fb35 	bl	8005aba <LL_RCC_LSE_IsReady>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1ef      	bne.n	8006436 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a3 	beq.w	80065a6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0c      	cmp	r3, #12
 8006464:	d076      	beq.n	8006554 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	2b02      	cmp	r3, #2
 800646c:	d14b      	bne.n	8006506 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646e:	f7ff fc76 	bl	8005d5e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006472:	f7fb fdb7 	bl	8001fe4 <HAL_GetTick>
 8006476:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647a:	f7fb fdb3 	bl	8001fe4 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b0a      	cmp	r3, #10
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e08d      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800648c:	f7ff fc75 	bl	8005d7a <LL_RCC_PLL_IsReady>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f1      	bne.n	800647a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <HAL_RCC_OscConfig+0x730>)
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064a8:	4311      	orrs	r1, r2
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064ae:	0212      	lsls	r2, r2, #8
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064b6:	4311      	orrs	r1, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064bc:	4311      	orrs	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80064c2:	430a      	orrs	r2, r1
 80064c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064cc:	f7ff fc39 	bl	8005d42 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fb fd80 	bl	8001fe4 <HAL_GetTick>
 80064e4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e8:	f7fb fd7c 	bl	8001fe4 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b0a      	cmp	r3, #10
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e056      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 80064fa:	f7ff fc3e 	bl	8005d7a <LL_RCC_PLL_IsReady>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f1      	beq.n	80064e8 <HAL_RCC_OscConfig+0x668>
 8006504:	e04f      	b.n	80065a6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006506:	f7ff fc2a 	bl	8005d5e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800650a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006514:	f023 0303 	bic.w	r3, r3, #3
 8006518:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006524:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fb fd59 	bl	8001fe4 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006536:	f7fb fd55 	bl	8001fe4 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b0a      	cmp	r3, #10
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e02f      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006548:	f7ff fc17 	bl	8005d7a <LL_RCC_PLL_IsReady>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f1      	bne.n	8006536 <HAL_RCC_OscConfig+0x6b6>
 8006552:	e028      	b.n	80065a6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e023      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0203 	and.w	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006572:	429a      	cmp	r2, r3
 8006574:	d115      	bne.n	80065a2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	429a      	cmp	r2, r3
 8006582:	d10e      	bne.n	80065a2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	429a      	cmp	r2, r3
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	429a      	cmp	r2, r3
 80065a0:	d001      	beq.n	80065a6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	11c1808c 	.word	0x11c1808c

080065b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e10f      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d91b      	bls.n	800660e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b86      	ldr	r3, [pc, #536]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 0207 	bic.w	r2, r3, #7
 80065de:	4984      	ldr	r1, [pc, #528]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e6:	f7fb fcfd 	bl	8001fe4 <HAL_GetTick>
 80065ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80065ee:	f7fb fcf9 	bl	8001fe4 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0f3      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006600:	4b7b      	ldr	r3, [pc, #492]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d1ef      	bne.n	80065ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fb12 	bl	8005c48 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006624:	f7fb fcde 	bl	8001fe4 <HAL_GetTick>
 8006628:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800662c:	f7fb fcda 	bl	8001fe4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0d4      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800663e:	f7ff fbda 	bl	8005df6 <LL_RCC_IsActiveFlag_HPRE>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f1      	beq.n	800662c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fb08 	bl	8005c6e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800665e:	f7fb fcc1 	bl	8001fe4 <HAL_GetTick>
 8006662:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006664:	e008      	b.n	8006678 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006666:	f7fb fcbd 	bl	8001fe4 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e0b7      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006678:	f7ff fbce 	bl	8005e18 <LL_RCC_IsActiveFlag_SHDHPRE>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f1      	beq.n	8006666 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fb01 	bl	8005c9a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006698:	f7fb fca4 	bl	8001fe4 <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066a0:	f7fb fca0 	bl	8001fe4 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e09a      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80066b2:	f7ff fbc3 	bl	8005e3c <LL_RCC_IsActiveFlag_PPRE1>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0f1      	beq.n	80066a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d017      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff faf6 	bl	8005cc0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066d4:	f7fb fc86 	bl	8001fe4 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066dc:	f7fb fc82 	bl	8001fe4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e07c      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80066ee:	f7ff fbb6 	bl	8005e5e <LL_RCC_IsActiveFlag_PPRE2>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f1      	beq.n	80066dc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d043      	beq.n	800678c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d106      	bne.n	800671a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800670c:	f7ff f983 	bl	8005a16 <LL_RCC_HSE_IsReady>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d11e      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e066      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b03      	cmp	r3, #3
 8006720:	d106      	bne.n	8006730 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006722:	f7ff fb2a 	bl	8005d7a <LL_RCC_PLL_IsReady>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d113      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e05b      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006738:	f7ff fa1d 	bl	8005b76 <LL_RCC_MSI_IsReady>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d108      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e050      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006746:	f7ff f993 	bl	8005a70 <LL_RCC_HSI_IsReady>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e049      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fa57 	bl	8005c0c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675e:	f7fb fc41 	bl	8001fe4 <HAL_GetTick>
 8006762:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006764:	e00a      	b.n	800677c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006766:	f7fb fc3d 	bl	8001fe4 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e035      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677c:	f7ff fa59 	bl	8005c32 <LL_RCC_GetSysClkSource>
 8006780:	4602      	mov	r2, r0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	429a      	cmp	r2, r3
 800678a:	d1ec      	bne.n	8006766 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d21b      	bcs.n	80067d2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f023 0207 	bic.w	r2, r3, #7
 80067a2:	4913      	ldr	r1, [pc, #76]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067aa:	f7fb fc1b 	bl	8001fe4 <HAL_GetTick>
 80067ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80067b2:	f7fb fc17 	bl	8001fe4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e011      	b.n	80067e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c4:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <HAL_RCC_ClockConfig+0x23c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d1ef      	bne.n	80067b2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067d2:	f000 f8b3 	bl	800693c <HAL_RCC_GetHCLKFreq>
 80067d6:	4603      	mov	r3, r0
 80067d8:	4a06      	ldr	r2, [pc, #24]	; (80067f4 <HAL_RCC_ClockConfig+0x240>)
 80067da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_ClockConfig+0x244>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fb fbf5 	bl	8001fd0 <HAL_InitTick>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	58004000 	.word	0x58004000
 80067f4:	20000000 	.word	0x20000000
 80067f8:	20000034 	.word	0x20000034

080067fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067fc:	b590      	push	{r4, r7, lr}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800680a:	f7ff fa12 	bl	8005c32 <LL_RCC_GetSysClkSource>
 800680e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006810:	f7ff fae6 	bl	8005de0 <LL_RCC_PLL_GetMainSource>
 8006814:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RCC_GetSysClockFreq+0x2c>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b0c      	cmp	r3, #12
 8006820:	d139      	bne.n	8006896 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d136      	bne.n	8006896 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006828:	f7ff f9b5 	bl	8005b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d115      	bne.n	800685e <HAL_RCC_GetSysClockFreq+0x62>
 8006832:	f7ff f9b0 	bl	8005b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <HAL_RCC_GetSysClockFreq+0x4e>
 800683c:	f7ff f9bb 	bl	8005bb6 <LL_RCC_MSI_GetRange>
 8006840:	4603      	mov	r3, r0
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	e005      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x5a>
 800684a:	f7ff f9bf 	bl	8005bcc <LL_RCC_MSI_GetRangeAfterStandby>
 800684e:	4603      	mov	r3, r0
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	4a36      	ldr	r2, [pc, #216]	; (8006930 <HAL_RCC_GetSysClockFreq+0x134>)
 8006858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800685c:	e014      	b.n	8006888 <HAL_RCC_GetSysClockFreq+0x8c>
 800685e:	f7ff f99a 	bl	8005b96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006862:	4603      	mov	r3, r0
 8006864:	2b01      	cmp	r3, #1
 8006866:	d106      	bne.n	8006876 <HAL_RCC_GetSysClockFreq+0x7a>
 8006868:	f7ff f9a5 	bl	8005bb6 <LL_RCC_MSI_GetRange>
 800686c:	4603      	mov	r3, r0
 800686e:	091b      	lsrs	r3, r3, #4
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	e005      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x86>
 8006876:	f7ff f9a9 	bl	8005bcc <LL_RCC_MSI_GetRangeAfterStandby>
 800687a:	4603      	mov	r3, r0
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <HAL_RCC_GetSysClockFreq+0x134>)
 8006884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006888:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d115      	bne.n	80068bc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006894:	e012      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d102      	bne.n	80068a2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800689c:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCC_GetSysClockFreq+0x138>)
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e00c      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d109      	bne.n	80068bc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068a8:	f7ff f888 	bl	80059bc <LL_RCC_HSE_IsEnabledDiv2>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d102      	bne.n	80068b8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_GetSysClockFreq+0x138>)
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e001      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80068b8:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <HAL_RCC_GetSysClockFreq+0x13c>)
 80068ba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068bc:	f7ff f9b9 	bl	8005c32 <LL_RCC_GetSysClkSource>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d12f      	bne.n	8006926 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80068c6:	f7ff fa8b 	bl	8005de0 <LL_RCC_PLL_GetMainSource>
 80068ca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d003      	beq.n	80068da <HAL_RCC_GetSysClockFreq+0xde>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d003      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80068d8:	e00d      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80068da:	4b16      	ldr	r3, [pc, #88]	; (8006934 <HAL_RCC_GetSysClockFreq+0x138>)
 80068dc:	60fb      	str	r3, [r7, #12]
        break;
 80068de:	e00d      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068e0:	f7ff f86c 	bl	80059bc <LL_RCC_HSE_IsEnabledDiv2>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d102      	bne.n	80068f0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <HAL_RCC_GetSysClockFreq+0x138>)
 80068ec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80068ee:	e005      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80068f0:	4b11      	ldr	r3, [pc, #68]	; (8006938 <HAL_RCC_GetSysClockFreq+0x13c>)
 80068f2:	60fb      	str	r3, [r7, #12]
        break;
 80068f4:	e002      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	60fb      	str	r3, [r7, #12]
        break;
 80068fa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80068fc:	f7ff fa4e 	bl	8005d9c <LL_RCC_PLL_GetN>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	fb03 f402 	mul.w	r4, r3, r2
 8006908:	f7ff fa5f 	bl	8005dca <LL_RCC_PLL_GetDivider>
 800690c:	4603      	mov	r3, r0
 800690e:	091b      	lsrs	r3, r3, #4
 8006910:	3301      	adds	r3, #1
 8006912:	fbb4 f4f3 	udiv	r4, r4, r3
 8006916:	f7ff fa4d 	bl	8005db4 <LL_RCC_PLL_GetR>
 800691a:	4603      	mov	r3, r0
 800691c:	0f5b      	lsrs	r3, r3, #29
 800691e:	3301      	adds	r3, #1
 8006920:	fbb4 f3f3 	udiv	r3, r4, r3
 8006924:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006926:	697b      	ldr	r3, [r7, #20]
}
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd90      	pop	{r4, r7, pc}
 8006930:	0801b648 	.word	0x0801b648
 8006934:	00f42400 	.word	0x00f42400
 8006938:	01e84800 	.word	0x01e84800

0800693c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800693c:	b598      	push	{r3, r4, r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006940:	f7ff ff5c 	bl	80067fc <HAL_RCC_GetSysClockFreq>
 8006944:	4604      	mov	r4, r0
 8006946:	f7ff f9ce 	bl	8005ce6 <LL_RCC_GetAHBPrescaler>
 800694a:	4603      	mov	r3, r0
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	4a03      	ldr	r2, [pc, #12]	; (8006960 <HAL_RCC_GetHCLKFreq+0x24>)
 8006954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006958:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800695c:	4618      	mov	r0, r3
 800695e:	bd98      	pop	{r3, r4, r7, pc}
 8006960:	0801b5e8 	.word	0x0801b5e8

08006964 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b598      	push	{r3, r4, r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006968:	f7ff ffe8 	bl	800693c <HAL_RCC_GetHCLKFreq>
 800696c:	4604      	mov	r4, r0
 800696e:	f7ff f9d2 	bl	8005d16 <LL_RCC_GetAPB1Prescaler>
 8006972:	4603      	mov	r3, r0
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	4a03      	ldr	r2, [pc, #12]	; (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd98      	pop	{r3, r4, r7, pc}
 8006984:	0801b628 	.word	0x0801b628

08006988 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006988:	b598      	push	{r3, r4, r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800698c:	f7ff ffd6 	bl	800693c <HAL_RCC_GetHCLKFreq>
 8006990:	4604      	mov	r4, r0
 8006992:	f7ff f9cb 	bl	8005d2c <LL_RCC_GetAPB2Prescaler>
 8006996:	4603      	mov	r3, r0
 8006998:	0adb      	lsrs	r3, r3, #11
 800699a:	4a03      	ldr	r2, [pc, #12]	; (80069a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800699c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd98      	pop	{r3, r4, r7, pc}
 80069a8:	0801b628 	.word	0x0801b628

080069ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	091b      	lsrs	r3, r3, #4
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	4a10      	ldr	r2, [pc, #64]	; (8006a00 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80069be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80069c4:	f7ff f99a 	bl	8005cfc <LL_RCC_GetAHB3Prescaler>
 80069c8:	4603      	mov	r3, r0
 80069ca:	091b      	lsrs	r3, r3, #4
 80069cc:	f003 030f 	and.w	r3, r3, #15
 80069d0:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80069d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	0c9c      	lsrs	r4, r3, #18
 80069e8:	f7fe ffae 	bl	8005948 <HAL_PWREx_GetVoltageRange>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4619      	mov	r1, r3
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 f80b 	bl	8006a0c <RCC_SetFlashLatency>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}
 8006a00:	0801b648 	.word	0x0801b648
 8006a04:	0801b5e8 	.word	0x0801b5e8
 8006a08:	431bde83 	.word	0x431bde83

08006a0c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006a16:	4a3c      	ldr	r2, [pc, #240]	; (8006b08 <RCC_SetFlashLatency+0xfc>)
 8006a18:	f107 0320 	add.w	r3, r7, #32
 8006a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a20:	6018      	str	r0, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006a26:	4a39      	ldr	r2, [pc, #228]	; (8006b0c <RCC_SetFlashLatency+0x100>)
 8006a28:	f107 0318 	add.w	r3, r7, #24
 8006a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a30:	6018      	str	r0, [r3, #0]
 8006a32:	3304      	adds	r3, #4
 8006a34:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006a36:	4a36      	ldr	r2, [pc, #216]	; (8006b10 <RCC_SetFlashLatency+0x104>)
 8006a38:	f107 030c 	add.w	r3, r7, #12
 8006a3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a42:	2300      	movs	r3, #0
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d11d      	bne.n	8006a8a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a4e:	2300      	movs	r3, #0
 8006a50:	633b      	str	r3, [r7, #48]	; 0x30
 8006a52:	e016      	b.n	8006a82 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006a62:	461a      	mov	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d808      	bhi.n	8006a7c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a72:	4413      	add	r3, r2
 8006a74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a7a:	e023      	b.n	8006ac4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	3301      	adds	r3, #1
 8006a80:	633b      	str	r3, [r7, #48]	; 0x30
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d9e5      	bls.n	8006a54 <RCC_SetFlashLatency+0x48>
 8006a88:	e01c      	b.n	8006ac4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a8e:	e016      	b.n	8006abe <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a98:	4413      	add	r3, r2
 8006a9a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d808      	bhi.n	8006ab8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006aae:	4413      	add	r3, r2
 8006ab0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ab6:	e005      	b.n	8006ac4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	3301      	adds	r3, #1
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d9e5      	bls.n	8006a90 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ac4:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <RCC_SetFlashLatency+0x108>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f023 0207 	bic.w	r2, r3, #7
 8006acc:	4911      	ldr	r1, [pc, #68]	; (8006b14 <RCC_SetFlashLatency+0x108>)
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ad4:	f7fb fa86 	bl	8001fe4 <HAL_GetTick>
 8006ad8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006ada:	e008      	b.n	8006aee <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006adc:	f7fb fa82 	bl	8001fe4 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e007      	b.n	8006afe <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <RCC_SetFlashLatency+0x108>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1ef      	bne.n	8006adc <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3738      	adds	r7, #56	; 0x38
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	0801ae4c 	.word	0x0801ae4c
 8006b0c:	0801ae54 	.word	0x0801ae54
 8006b10:	0801ae5c 	.word	0x0801ae5c
 8006b14:	58004000 	.word	0x58004000

08006b18 <LL_RCC_LSE_IsReady>:
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d101      	bne.n	8006b30 <LL_RCC_LSE_IsReady+0x18>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <LL_RCC_LSE_IsReady+0x1a>
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_SetUSARTClockSource>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	401a      	ands	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <LL_RCC_SetI2SClockSource>:
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <LL_RCC_SetLPUARTClockSource>:
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <LL_RCC_SetI2CClockSource>:
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	091b      	lsrs	r3, r3, #4
 8006bd2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006bd6:	43db      	mvns	r3, r3
 8006bd8:	401a      	ands	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <LL_RCC_SetLPTIMClockSource>:
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	041b      	lsls	r3, r3, #16
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <LL_RCC_SetRNGClockSource>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <LL_RCC_SetADCClockSource>:
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr

08006c7c <LL_RCC_SetRTCClockSource>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr

08006ca6 <LL_RCC_GetRTCClockSource>:
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <LL_RCC_ForceBackupDomainReset>:
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cd6:	bf00      	nop
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_ReleaseBackupDomainReset>:
{
 8006cde:	b480      	push	{r7}
 8006ce0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006cf6:	bf00      	nop
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
	...

08006d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006d10:	2300      	movs	r3, #0
 8006d12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d058      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006d20:	f7fe fe04 	bl	800592c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d24:	f7fb f95e 	bl	8001fe4 <HAL_GetTick>
 8006d28:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006d2a:	e009      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2c:	f7fb f95a 	bl	8001fe4 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d902      	bls.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	74fb      	strb	r3, [r7, #19]
        break;
 8006d3e:	e006      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006d40:	4b7b      	ldr	r3, [pc, #492]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d1ee      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d13c      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006d54:	f7ff ffa7 	bl	8006ca6 <LL_RCC_GetRTCClockSource>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d00f      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d70:	f7ff ffa5 	bl	8006cbe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d74:	f7ff ffb3 	bl	8006cde <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d014      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fb f92a 	bl	8001fe4 <HAL_GetTick>
 8006d90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d92:	e00b      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f7fb f926 	bl	8001fe4 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d902      	bls.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	74fb      	strb	r3, [r7, #19]
            break;
 8006daa:	e004      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006dac:	f7ff feb4 	bl	8006b18 <LL_RCC_LSE_IsReady>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d1ee      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006db6:	7cfb      	ldrb	r3, [r7, #19]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff ff5b 	bl	8006c7c <LL_RCC_SetRTCClockSource>
 8006dc6:	e004      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dc8:	7cfb      	ldrb	r3, [r7, #19]
 8006dca:	74bb      	strb	r3, [r7, #18]
 8006dcc:	e001      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff fea9 	bl	8006b3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fe9e 	bl	8006b3a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff fec0 	bl	8006b94 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fee6 	bl	8006bf6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fedb 	bl	8006bf6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fed0 	bl	8006bf6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff fea9 	bl	8006bbe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fe9e 	bl	8006bbe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fe93 	bl	8006bbe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fe5e 	bl	8006b6a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d010      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fea5 	bl	8006c28 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d107      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d011      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fea3 	bl	8006c52 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	58000400 	.word	0x58000400

08006f34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d068      	beq.n	8007018 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa fdd2 	bl	8001b04 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f68:	4b2e      	ldr	r3, [pc, #184]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006f6a:	22ca      	movs	r2, #202	; 0xca
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8006f6e:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006f70:	2253      	movs	r2, #83	; 0x53
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fa0f 	bl	8007398 <RTC_EnterInitMode>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d13f      	bne.n	8007004 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f84:	4b27      	ldr	r3, [pc, #156]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	4a26      	ldr	r2, [pc, #152]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006f8a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f92:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6859      	ldr	r1, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	4319      	orrs	r1, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	491e      	ldr	r1, [pc, #120]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	491a      	ldr	r1, [pc, #104]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006fbe:	4b19      	ldr	r3, [pc, #100]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	4914      	ldr	r1, [pc, #80]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa12 	bl	8007400 <RTC_ExitInitMode>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10e      	bne.n	8007004 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <HAL_RTC_Init+0xf0>)
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a19      	ldr	r1, [r3, #32]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4319      	orrs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	4909      	ldr	r1, [pc, #36]	; (8007024 <HAL_RTC_Init+0xf0>)
 8007000:	4313      	orrs	r3, r2
 8007002:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <HAL_RTC_Init+0xf0>)
 8007006:	22ff      	movs	r2, #255	; 0xff
 8007008:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40002800 	.word	0x40002800

08007028 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_RTC_SetAlarm_IT+0x1e>
 8007042:	2302      	movs	r3, #2
 8007044:	e0f3      	b.n	800722e <HAL_RTC_SetAlarm_IT+0x206>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2202      	movs	r2, #2
 8007052:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007056:	4b78      	ldr	r3, [pc, #480]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007066:	d06a      	beq.n	800713e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d13a      	bne.n	80070e4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800706e:	4b72      	ldr	r3, [pc, #456]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 f9f5 	bl	800747c <RTC_ByteToBcd2>
 8007092:	4603      	mov	r3, r0
 8007094:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f9ee 	bl	800747c <RTC_ByteToBcd2>
 80070a0:	4603      	mov	r3, r0
 80070a2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070a4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f9e6 	bl	800747c <RTC_ByteToBcd2>
 80070b0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070b2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	78db      	ldrb	r3, [r3, #3]
 80070ba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070bc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f9d8 	bl	800747c <RTC_ByteToBcd2>
 80070cc:	4603      	mov	r3, r0
 80070ce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070d0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	e02c      	b.n	800713e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80070ec:	d00d      	beq.n	800710a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070f6:	d008      	beq.n	800710a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070f8:	4b4f      	ldr	r3, [pc, #316]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2200      	movs	r2, #0
 8007108:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007116:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800711c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	78db      	ldrb	r3, [r3, #3]
 8007122:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007124:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800712c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800712e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007134:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800713a:	4313      	orrs	r3, r2
 800713c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800713e:	4b3e      	ldr	r3, [pc, #248]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007140:	22ca      	movs	r2, #202	; 0xca
 8007142:	625a      	str	r2, [r3, #36]	; 0x24
 8007144:	4b3c      	ldr	r3, [pc, #240]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007146:	2253      	movs	r2, #83	; 0x53
 8007148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d12c      	bne.n	80071ae <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007154:	4b38      	ldr	r3, [pc, #224]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	4a37      	ldr	r2, [pc, #220]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 800715a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800715e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007160:	4b35      	ldr	r3, [pc, #212]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007162:	2201      	movs	r2, #1
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716c:	d107      	bne.n	800717e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	4930      	ldr	r1, [pc, #192]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007178:	4313      	orrs	r3, r2
 800717a:	644b      	str	r3, [r1, #68]	; 0x44
 800717c:	e006      	b.n	800718c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800717e:	4a2e      	ldr	r2, [pc, #184]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007184:	4a2c      	ldr	r2, [pc, #176]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800718c:	4a2a      	ldr	r2, [pc, #168]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	f043 0201 	orr.w	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	4a24      	ldr	r2, [pc, #144]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071a6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80071aa:	6193      	str	r3, [r2, #24]
 80071ac:	e02b      	b.n	8007206 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80071ae:	4b22      	ldr	r3, [pc, #136]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	4a21      	ldr	r2, [pc, #132]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071b4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80071b8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071ba:	4b1f      	ldr	r3, [pc, #124]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071bc:	2202      	movs	r2, #2
 80071be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c6:	d107      	bne.n	80071d8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	4919      	ldr	r1, [pc, #100]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071d6:	e006      	b.n	80071e6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80071de:	4a16      	ldr	r2, [pc, #88]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80071e6:	4a14      	ldr	r2, [pc, #80]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f043 0202 	orr.w	r2, r3, #2
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80071fa:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007200:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007204:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <HAL_RTC_SetAlarm_IT+0x214>)
 8007208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800720c:	4a0b      	ldr	r2, [pc, #44]	; (800723c <HAL_RTC_SetAlarm_IT+0x214>)
 800720e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007212:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <HAL_RTC_SetAlarm_IT+0x210>)
 8007218:	22ff      	movs	r2, #255	; 0xff
 800721a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd90      	pop	{r4, r7, pc}
 8007236:	bf00      	nop
 8007238:	40002800 	.word	0x40002800
 800723c:	58000800 	.word	0x58000800

08007240 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_RTC_DeactivateAlarm+0x18>
 8007254:	2302      	movs	r3, #2
 8007256:	e048      	b.n	80072ea <HAL_RTC_DeactivateAlarm+0xaa>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007268:	4b22      	ldr	r3, [pc, #136]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800726a:	22ca      	movs	r2, #202	; 0xca
 800726c:	625a      	str	r2, [r3, #36]	; 0x24
 800726e:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007270:	2253      	movs	r2, #83	; 0x53
 8007272:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727a:	d115      	bne.n	80072a8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800727c:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007286:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007288:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800728e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007292:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	f023 0201 	bic.w	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80072a0:	4b14      	ldr	r3, [pc, #80]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80072a6:	e014      	b.n	80072d2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80072a8:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	4a11      	ldr	r2, [pc, #68]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072ae:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80072b2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80072b4:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b8:	4a0e      	ldr	r2, [pc, #56]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072be:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	f023 0202 	bic.w	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072ce:	2202      	movs	r2, #2
 80072d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	40002800 	.word	0x40002800

080072f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007300:	4b11      	ldr	r3, [pc, #68]	; (8007348 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	4013      	ands	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007318:	2201      	movs	r2, #1
 800731a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7fb f8ef 	bl	8002500 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RTC_AlarmIRQHandler+0x50>)
 800732e:	2202      	movs	r2, #2
 8007330:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f94a 	bl	80075cc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40002800 	.word	0x40002800

0800734c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007354:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <HAL_RTC_WaitForSynchro+0x48>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <HAL_RTC_WaitForSynchro+0x48>)
 800735a:	f023 0320 	bic.w	r3, r3, #32
 800735e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007360:	f7fa fe40 	bl	8001fe4 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007366:	e009      	b.n	800737c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007368:	f7fa fe3c 	bl	8001fe4 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007376:	d901      	bls.n	800737c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e006      	b.n	800738a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800737c:	4b05      	ldr	r3, [pc, #20]	; (8007394 <HAL_RTC_WaitForSynchro+0x48>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ef      	beq.n	8007368 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40002800 	.word	0x40002800

08007398 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80073a4:	4b15      	ldr	r3, [pc, #84]	; (80073fc <RTC_EnterInitMode+0x64>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d120      	bne.n	80073f2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <RTC_EnterInitMode+0x64>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	4a11      	ldr	r2, [pc, #68]	; (80073fc <RTC_EnterInitMode+0x64>)
 80073b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ba:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80073bc:	f7fa fe12 	bl	8001fe4 <HAL_GetTick>
 80073c0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073c2:	e00d      	b.n	80073e0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80073c4:	f7fa fe0e 	bl	8001fe4 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d2:	d905      	bls.n	80073e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2203      	movs	r2, #3
 80073dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <RTC_EnterInitMode+0x64>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <RTC_EnterInitMode+0x5a>
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d1e8      	bne.n	80073c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40002800 	.word	0x40002800

08007400 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800740c:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <RTC_ExitInitMode+0x78>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a19      	ldr	r2, [pc, #100]	; (8007478 <RTC_ExitInitMode+0x78>)
 8007412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007416:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007418:	4b17      	ldr	r3, [pc, #92]	; (8007478 <RTC_ExitInitMode+0x78>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10c      	bne.n	800743e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ff91 	bl	800734c <HAL_RTC_WaitForSynchro>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01e      	beq.n	800746e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2203      	movs	r2, #3
 8007434:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	e017      	b.n	800746e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <RTC_ExitInitMode+0x78>)
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	4a0d      	ldr	r2, [pc, #52]	; (8007478 <RTC_ExitInitMode+0x78>)
 8007444:	f023 0320 	bic.w	r3, r3, #32
 8007448:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff ff7e 	bl	800734c <HAL_RTC_WaitForSynchro>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2203      	movs	r2, #3
 800745a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <RTC_ExitInitMode+0x78>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	4a04      	ldr	r2, [pc, #16]	; (8007478 <RTC_ExitInitMode+0x78>)
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40002800 	.word	0x40002800

0800747c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800748e:	e005      	b.n	800749c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	3b0a      	subs	r3, #10
 800749a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d8f6      	bhi.n	8007490 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b2db      	uxtb	r3, r3
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
	...

080074bc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_RTCEx_EnableBypassShadow+0x16>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e01f      	b.n	8007512 <HAL_RTCEx_EnableBypassShadow+0x56>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074e2:	4b0e      	ldr	r3, [pc, #56]	; (800751c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074e4:	22ca      	movs	r2, #202	; 0xca
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
 80074e8:	4b0c      	ldr	r3, [pc, #48]	; (800751c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074ea:	2253      	movs	r2, #83	; 0x53
 80074ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	4a0a      	ldr	r2, [pc, #40]	; (800751c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074f4:	f043 0320 	orr.w	r3, r3, #32
 80074f8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <HAL_RTCEx_EnableBypassShadow+0x60>)
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	40002800 	.word	0x40002800

08007520 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007532:	2302      	movs	r3, #2
 8007534:	e027      	b.n	8007586 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007546:	4b12      	ldr	r3, [pc, #72]	; (8007590 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007548:	22ca      	movs	r2, #202	; 0xca
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800754e:	2253      	movs	r2, #83	; 0x53
 8007550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	4a0e      	ldr	r2, [pc, #56]	; (8007590 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007564:	4a0b      	ldr	r2, [pc, #44]	; (8007594 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800756a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007570:	22ff      	movs	r2, #255	; 0xff
 8007572:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr
 8007590:	40002800 	.word	0x40002800
 8007594:	58000800 	.word	0x58000800

08007598 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80075ae:	2240      	movs	r2, #64	; 0x40
 80075b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa ffae 	bl	8002514 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40002800 	.word	0x40002800

080075cc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
	...

080075e0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80075ec:	4b07      	ldr	r3, [pc, #28]	; (800760c <HAL_RTCEx_BKUPWrite+0x2c>)
 80075ee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
}
 8007600:	bf00      	nop
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	4000b100 	.word	0x4000b100

08007610 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <HAL_RTCEx_BKUPRead+0x28>)
 800761c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	4000b100 	.word	0x4000b100

0800763c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800764c:	4904      	ldr	r1, [pc, #16]	; (8007660 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4313      	orrs	r3, r2
 8007652:	608b      	str	r3, [r1, #8]
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	58000400 	.word	0x58000400

08007664 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800766a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766e:	4a04      	ldr	r2, [pc, #16]	; (8007680 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007678:	bf00      	nop
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	58000400 	.word	0x58000400

08007684 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	4a04      	ldr	r2, [pc, #16]	; (80076a0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	58000400 	.word	0x58000400

080076a4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80076a8:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80076aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ae:	619a      	str	r2, [r3, #24]
}
 80076b0:	bf00      	nop
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bc80      	pop	{r7}
 80076b6:	4770      	bx	lr
 80076b8:	58000400 	.word	0x58000400

080076bc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d101      	bne.n	80076d0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	58000400 	.word	0x58000400

080076e0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d101      	bne.n	80076f4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	58000400 	.word	0x58000400

08007704 <LL_RCC_RF_DisableReset>:
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800771c:	bf00      	nop
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr

08007724 <LL_RCC_IsRFUnderReset>:
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007738:	d101      	bne.n	800773e <LL_RCC_IsRFUnderReset+0x1a>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <LL_RCC_IsRFUnderReset+0x1c>
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <LL_EXTI_EnableIT_32_63>:
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <LL_EXTI_EnableIT_32_63+0x24>)
 8007752:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007756:	4905      	ldr	r1, [pc, #20]	; (800776c <LL_EXTI_EnableIT_32_63+0x24>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	58000800 	.word	0x58000800

08007770 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
    return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	e04b      	b.n	800781e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	799b      	ldrb	r3, [r3, #6]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa fa80 	bl	8001ca0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80077a6:	f7ff ffad 	bl	8007704 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <HAL_SUBGHZ_Init+0xb8>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	0cdb      	lsrs	r3, r3, #19
 80077b8:	2264      	movs	r2, #100	; 0x64
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	609a      	str	r2, [r3, #8]
      break;
 80077d0:	e007      	b.n	80077e2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80077d8:	f7ff ffa4 	bl	8007724 <LL_RCC_IsRFUnderReset>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1ee      	bne.n	80077c0 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80077e2:	f7ff ff3f 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80077e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80077ea:	f7ff ffad 	bl	8007748 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80077ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077f2:	f7ff ff23 	bl	800763c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80077f6:	f7ff ff55 	bl	80076a4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 faad 	bl	8007d64 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	719a      	strb	r2, [r3, #6]

  return status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000000 	.word	0x20000000

0800782c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	461a      	mov	r2, r3
 8007838:	460b      	mov	r3, r1
 800783a:	817b      	strh	r3, [r7, #10]
 800783c:	4613      	mov	r3, r2
 800783e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	799b      	ldrb	r3, [r3, #6]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d14a      	bne.n	80078e0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007852:	2302      	movs	r3, #2
 8007854:	e045      	b.n	80078e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fb4c 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007868:	f7ff ff0c 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800786c:	210d      	movs	r1, #13
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fa98 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007874:	897b      	ldrh	r3, [r7, #10]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fa90 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007884:	897b      	ldrh	r3, [r7, #10]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fa8a 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007890:	2300      	movs	r3, #0
 8007892:	82bb      	strh	r3, [r7, #20]
 8007894:	e00a      	b.n	80078ac <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007896:	8abb      	ldrh	r3, [r7, #20]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fa7f 	bl	8007da4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078a6:	8abb      	ldrh	r3, [r7, #20]
 80078a8:	3301      	adds	r3, #1
 80078aa:	82bb      	strh	r3, [r7, #20]
 80078ac:	8aba      	ldrh	r2, [r7, #20]
 80078ae:	893b      	ldrh	r3, [r7, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d3f0      	bcc.n	8007896 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078b4:	f7ff fed6 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fb45 	bl	8007f48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
 80078ca:	e001      	b.n	80078d0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	715a      	strb	r2, [r3, #5]

    return status;
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	e000      	b.n	80078e2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80078e0:	2302      	movs	r3, #2
  }
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b088      	sub	sp, #32
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	461a      	mov	r2, r3
 80078f6:	460b      	mov	r3, r1
 80078f8:	817b      	strh	r3, [r7, #10]
 80078fa:	4613      	mov	r3, r2
 80078fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	799b      	ldrb	r3, [r3, #6]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d14a      	bne.n	80079a2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	795b      	ldrb	r3, [r3, #5]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007914:	2302      	movs	r3, #2
 8007916:	e045      	b.n	80079a4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 faee 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007924:	f7ff feae 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007928:	211d      	movs	r1, #29
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa3a 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	b29b      	uxth	r3, r3
 8007936:	b2db      	uxtb	r3, r3
 8007938:	4619      	mov	r1, r3
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fa32 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007940:	897b      	ldrh	r3, [r7, #10]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 fa2c 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800794c:	2100      	movs	r1, #0
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fa28 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007954:	2300      	movs	r3, #0
 8007956:	82fb      	strh	r3, [r7, #22]
 8007958:	e009      	b.n	800796e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800795a:	69b9      	ldr	r1, [r7, #24]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fa77 	bl	8007e50 <SUBGHZSPI_Receive>
      pData++;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	3301      	adds	r3, #1
 8007966:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007968:	8afb      	ldrh	r3, [r7, #22]
 800796a:	3301      	adds	r3, #1
 800796c:	82fb      	strh	r3, [r7, #22]
 800796e:	8afa      	ldrh	r2, [r7, #22]
 8007970:	893b      	ldrh	r3, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	d3f1      	bcc.n	800795a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007976:	f7ff fe75 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fae4 	bl	8007f48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e001      	b.n	8007992 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	715a      	strb	r2, [r3, #5]

    return status;
 800799e:	7ffb      	ldrb	r3, [r7, #31]
 80079a0:	e000      	b.n	80079a4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
  }
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	461a      	mov	r2, r3
 80079b8:	460b      	mov	r3, r1
 80079ba:	72fb      	strb	r3, [r7, #11]
 80079bc:	4613      	mov	r3, r2
 80079be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	799b      	ldrb	r3, [r3, #6]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d14a      	bne.n	8007a60 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	795b      	ldrb	r3, [r3, #5]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e045      	b.n	8007a62 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa8f 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	2b84      	cmp	r3, #132	; 0x84
 80079e6:	d002      	beq.n	80079ee <HAL_SUBGHZ_ExecSetCmd+0x42>
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b94      	cmp	r3, #148	; 0x94
 80079ec:	d103      	bne.n	80079f6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	711a      	strb	r2, [r3, #4]
 80079f4:	e002      	b.n	80079fc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079fc:	f7ff fe42 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f9cd 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	82bb      	strh	r3, [r7, #20]
 8007a0e:	e00a      	b.n	8007a26 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a10:	8abb      	ldrh	r3, [r7, #20]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f9c2 	bl	8007da4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a20:	8abb      	ldrh	r3, [r7, #20]
 8007a22:	3301      	adds	r3, #1
 8007a24:	82bb      	strh	r3, [r7, #20]
 8007a26:	8aba      	ldrh	r2, [r7, #20]
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d3f0      	bcc.n	8007a10 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a2e:	f7ff fe19 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007a32:	7afb      	ldrb	r3, [r7, #11]
 8007a34:	2b84      	cmp	r3, #132	; 0x84
 8007a36:	d002      	beq.n	8007a3e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fa85 	bl	8007f48 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e001      	b.n	8007a50 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2201      	movs	r2, #1
 8007a54:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	715a      	strb	r2, [r3, #5]

    return status;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	e000      	b.n	8007a62 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	461a      	mov	r2, r3
 8007a76:	460b      	mov	r3, r1
 8007a78:	72fb      	strb	r3, [r7, #11]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	799b      	ldrb	r3, [r3, #6]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d13d      	bne.n	8007b08 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	795b      	ldrb	r3, [r3, #5]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e038      	b.n	8007b0a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fa2e 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007aa4:	f7ff fdee 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f979 	bl	8007da4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 f975 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	82fb      	strh	r3, [r7, #22]
 8007abe:	e009      	b.n	8007ad4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007ac0:	69b9      	ldr	r1, [r7, #24]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f9c4 	bl	8007e50 <SUBGHZSPI_Receive>
      pData++;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	3301      	adds	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ace:	8afb      	ldrh	r3, [r7, #22]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	82fb      	strh	r3, [r7, #22]
 8007ad4:	8afa      	ldrh	r2, [r7, #22]
 8007ad6:	893b      	ldrh	r3, [r7, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d3f1      	bcc.n	8007ac0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007adc:	f7ff fdc2 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fa31 	bl	8007f48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e001      	b.n	8007af8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	715a      	strb	r2, [r3, #5]

    return status;
 8007b04:	7ffb      	ldrb	r3, [r7, #31]
 8007b06:	e000      	b.n	8007b0a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b08:	2302      	movs	r3, #2
  }
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	460b      	mov	r3, r1
 8007b20:	72fb      	strb	r3, [r7, #11]
 8007b22:	4613      	mov	r3, r2
 8007b24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	799b      	ldrb	r3, [r3, #6]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d13e      	bne.n	8007bae <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	795b      	ldrb	r3, [r3, #5]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e039      	b.n	8007bb0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f9dc 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b48:	f7ff fd9c 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007b4c:	210e      	movs	r1, #14
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f928 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	4619      	mov	r1, r3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f923 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	82bb      	strh	r3, [r7, #20]
 8007b62:	e00a      	b.n	8007b7a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b64:	8abb      	ldrh	r3, [r7, #20]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	4413      	add	r3, r2
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 f918 	bl	8007da4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b74:	8abb      	ldrh	r3, [r7, #20]
 8007b76:	3301      	adds	r3, #1
 8007b78:	82bb      	strh	r3, [r7, #20]
 8007b7a:	8aba      	ldrh	r2, [r7, #20]
 8007b7c:	893b      	ldrh	r3, [r7, #8]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d3f0      	bcc.n	8007b64 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b82:	f7ff fd6f 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 f9de 	bl	8007f48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
 8007b98:	e001      	b.n	8007b9e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	715a      	strb	r2, [r3, #5]

    return status;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	e000      	b.n	8007bb0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007bae:	2302      	movs	r3, #2
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	607a      	str	r2, [r7, #4]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	72fb      	strb	r3, [r7, #11]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	799b      	ldrb	r3, [r3, #6]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d141      	bne.n	8007c5e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	795b      	ldrb	r3, [r3, #5]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d101      	bne.n	8007be6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e03c      	b.n	8007c60 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f987 	bl	8007f00 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bf2:	f7ff fd47 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007bf6:	211e      	movs	r1, #30
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f8d3 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	4619      	mov	r1, r3
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f8ce 	bl	8007da4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f8ca 	bl	8007da4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c10:	2300      	movs	r3, #0
 8007c12:	82fb      	strh	r3, [r7, #22]
 8007c14:	e009      	b.n	8007c2a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c16:	69b9      	ldr	r1, [r7, #24]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f919 	bl	8007e50 <SUBGHZSPI_Receive>
      pData++;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	3301      	adds	r3, #1
 8007c22:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007c24:	8afb      	ldrh	r3, [r7, #22]
 8007c26:	3301      	adds	r3, #1
 8007c28:	82fb      	strh	r3, [r7, #22]
 8007c2a:	8afa      	ldrh	r2, [r7, #22]
 8007c2c:	893b      	ldrh	r3, [r7, #8]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d3f1      	bcc.n	8007c16 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c32:	f7ff fd17 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f986 	bl	8007f48 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	77fb      	strb	r3, [r7, #31]
 8007c48:	e001      	b.n	8007c4e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	715a      	strb	r2, [r3, #5]

    return status;
 8007c5a:	7ffb      	ldrb	r3, [r7, #31]
 8007c5c:	e000      	b.n	8007c60 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8007c70:	2300      	movs	r3, #0
 8007c72:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8007c74:	f107 020c 	add.w	r2, r7, #12
 8007c78:	2302      	movs	r3, #2
 8007c7a:	2112      	movs	r1, #18
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fef4 	bl	8007a6a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8007c82:	7b3b      	ldrb	r3, [r7, #12]
 8007c84:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8007c86:	89fb      	ldrh	r3, [r7, #14]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	b21a      	sxth	r2, r3
 8007c8c:	7b7b      	ldrb	r3, [r7, #13]
 8007c8e:	b21b      	sxth	r3, r3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	b21b      	sxth	r3, r3
 8007c94:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c96:	89fb      	ldrh	r3, [r7, #14]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f011 fb81 	bl	80193a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007ca6:	89fb      	ldrh	r3, [r7, #14]
 8007ca8:	085b      	lsrs	r3, r3, #1
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f011 fb86 	bl	80193c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	089b      	lsrs	r3, r3, #2
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f011 fbd5 	bl	8019474 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007cca:	89fb      	ldrh	r3, [r7, #14]
 8007ccc:	08db      	lsrs	r3, r3, #3
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f011 fbda 	bl	8019490 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007cdc:	89fb      	ldrh	r3, [r7, #14]
 8007cde:	091b      	lsrs	r3, r3, #4
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f011 fbdf 	bl	80194ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007cee:	89fb      	ldrh	r3, [r7, #14]
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f011 fbac 	bl	8019458 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	099b      	lsrs	r3, r3, #6
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f011 fb67 	bl	80193e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007d12:	89fb      	ldrh	r3, [r7, #14]
 8007d14:	09db      	lsrs	r3, r3, #7
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007d1e:	89fb      	ldrh	r3, [r7, #14]
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f011 fb65 	bl	80193fc <HAL_SUBGHZ_CADStatusCallback>
 8007d32:	e003      	b.n	8007d3c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f011 fb60 	bl	80193fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	0a5b      	lsrs	r3, r3, #9
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f011 fb75 	bl	8019438 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007d4e:	f107 020c 	add.w	r2, r7, #12
 8007d52:	2302      	movs	r3, #2
 8007d54:	2102      	movs	r1, #2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fe28 	bl	80079ac <HAL_SUBGHZ_ExecSetCmd>
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0b      	ldr	r2, [pc, #44]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d76:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007d80:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d84:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007d88:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <SUBGHZSPI_Init+0x3c>)
 8007d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d94:	6013      	str	r3, [r2, #0]
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr
 8007da0:	58010000 	.word	0x58010000

08007da4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <SUBGHZSPI_Transmit+0xa0>)
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	0cdb      	lsrs	r3, r3, #19
 8007dc2:	2264      	movs	r2, #100	; 0x64
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d105      	bne.n	8007ddc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	609a      	str	r2, [r3, #8]
      break;
 8007dda:	e008      	b.n	8007dee <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007de2:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <SUBGHZSPI_Transmit+0xa4>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d1ed      	bne.n	8007dca <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <SUBGHZSPI_Transmit+0xa8>)
 8007df0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007df8:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <SUBGHZSPI_Transmit+0xa0>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	0cdb      	lsrs	r3, r3, #19
 8007e06:	2264      	movs	r2, #100	; 0x64
 8007e08:	fb02 f303 	mul.w	r3, r2, r3
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	609a      	str	r2, [r3, #8]
      break;
 8007e1e:	e008      	b.n	8007e32 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e26:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <SUBGHZSPI_Transmit+0xa4>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d1ed      	bne.n	8007e0e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <SUBGHZSPI_Transmit+0xa4>)
 8007e34:	68db      	ldr	r3, [r3, #12]

  return status;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000000 	.word	0x20000000
 8007e48:	58010000 	.word	0x58010000
 8007e4c:	5801000c 	.word	0x5801000c

08007e50 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e5e:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <SUBGHZSPI_Receive+0xa4>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	0cdb      	lsrs	r3, r3, #19
 8007e6c:	2264      	movs	r2, #100	; 0x64
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	609a      	str	r2, [r3, #8]
      break;
 8007e84:	e008      	b.n	8007e98 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <SUBGHZSPI_Receive+0xa8>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d1ed      	bne.n	8007e74 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e98:	4b18      	ldr	r3, [pc, #96]	; (8007efc <SUBGHZSPI_Receive+0xac>)
 8007e9a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	22ff      	movs	r2, #255	; 0xff
 8007ea0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <SUBGHZSPI_Receive+0xa4>)
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	0cdb      	lsrs	r3, r3, #19
 8007eb0:	2264      	movs	r2, #100	; 0x64
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d105      	bne.n	8007eca <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	609a      	str	r2, [r3, #8]
      break;
 8007ec8:	e008      	b.n	8007edc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <SUBGHZSPI_Receive+0xa8>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d1ed      	bne.n	8007eb8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <SUBGHZSPI_Receive+0xa8>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	701a      	strb	r2, [r3, #0]

  return status;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000000 	.word	0x20000000
 8007ef8:	58010000 	.word	0x58010000
 8007efc:	5801000c 	.word	0x5801000c

08007f00 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	791b      	ldrb	r3, [r3, #4]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d111      	bne.n	8007f34 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <SUBGHZ_CheckDeviceReady+0x44>)
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4613      	mov	r3, r2
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	4413      	add	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007f20:	f7ff fbb0 	bl	8007684 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3b01      	subs	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f9      	bne.n	8007f24 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f30:	f7ff fb98 	bl	8007664 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f807 	bl	8007f48 <SUBGHZ_WaitOnBusy>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000000 	.word	0x20000000

08007f48 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007f54:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <SUBGHZ_WaitOnBusy+0x58>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	4413      	add	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	0d1b      	lsrs	r3, r3, #20
 8007f62:	2264      	movs	r2, #100	; 0x64
 8007f64:	fb02 f303 	mul.w	r3, r2, r3
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007f6a:	f7ff fbb9 	bl	80076e0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007f6e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	609a      	str	r2, [r3, #8]
      break;
 8007f80:	e009      	b.n	8007f96 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007f88:	f7ff fb98 	bl	80076bc <LL_PWR_IsActiveFlag_RFBUSYS>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d0e9      	beq.n	8007f6a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000000 	.word	0x20000000

08007fa4 <LL_RCC_GetUSARTClockSource>:
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	4313      	orrs	r3, r2
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <LL_RCC_GetLPUARTClockSource>:
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4013      	ands	r3, r2
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e042      	b.n	800807e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d106      	bne.n	8008010 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7fa fbda 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2224      	movs	r2, #36	; 0x24
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0201 	bic.w	r2, r2, #1
 8008026:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fc4b 	bl	80088c4 <UART_SetConfig>
 800802e:	4603      	mov	r3, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e022      	b.n	800807e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fe8f 	bl	8008d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689a      	ldr	r2, [r3, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 ff15 	bl	8008ea6 <UART_CheckIdleState>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809c:	2b20      	cmp	r3, #32
 800809e:	d142      	bne.n	8008126 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_UART_Receive_IT+0x24>
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e03b      	b.n	8008128 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d101      	bne.n	80080be <HAL_UART_Receive_IT+0x36>
 80080ba:	2302      	movs	r3, #2
 80080bc:	e034      	b.n	8008128 <HAL_UART_Receive_IT+0xa0>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a17      	ldr	r2, [pc, #92]	; (8008130 <HAL_UART_Receive_IT+0xa8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01f      	beq.n	8008116 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d018      	beq.n	8008116 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	613b      	str	r3, [r7, #16]
   return(result);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	623b      	str	r3, [r7, #32]
 8008104:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	69f9      	ldr	r1, [r7, #28]
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	461a      	mov	r2, r3
 800811a:	68b9      	ldr	r1, [r7, #8]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 ffd5 	bl	80090cc <UART_Start_Receive_IT>
 8008122:	4603      	mov	r3, r0
 8008124:	e000      	b.n	8008128 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008126:	2302      	movs	r3, #2
  }
}
 8008128:	4618      	mov	r0, r3
 800812a:	3728      	adds	r7, #40	; 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40008000 	.word	0x40008000

08008134 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008148:	2b20      	cmp	r3, #32
 800814a:	d17a      	bne.n	8008242 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_UART_Transmit_DMA+0x24>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e073      	b.n	8008244 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008162:	2b01      	cmp	r3, #1
 8008164:	d101      	bne.n	800816a <HAL_UART_Transmit_DMA+0x36>
 8008166:	2302      	movs	r3, #2
 8008168:	e06c      	b.n	8008244 <HAL_UART_Transmit_DMA+0x110>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	88fa      	ldrh	r2, [r7, #6]
 8008184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2221      	movs	r2, #33	; 0x21
 8008194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800819c:	2b00      	cmp	r3, #0
 800819e:	d02c      	beq.n	80081fa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <HAL_UART_Transmit_DMA+0x118>)
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ac:	4a28      	ldr	r2, [pc, #160]	; (8008250 <HAL_UART_Transmit_DMA+0x11c>)
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081b4:	4a27      	ldr	r2, [pc, #156]	; (8008254 <HAL_UART_Transmit_DMA+0x120>)
 80081b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081bc:	2200      	movs	r2, #0
 80081be:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	4619      	mov	r1, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3328      	adds	r3, #40	; 0x28
 80081d0:	461a      	mov	r2, r3
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	f7fc f95e 	bl	8004494 <HAL_DMA_Start_IT>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00d      	beq.n	80081fa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2210      	movs	r2, #16
 80081e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e024      	b.n	8008244 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2240      	movs	r2, #64	; 0x40
 8008200:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	613b      	str	r3, [r7, #16]
   return(result);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800822a:	623a      	str	r2, [r7, #32]
 800822c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	69f9      	ldr	r1, [r7, #28]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	61bb      	str	r3, [r7, #24]
   return(result);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e5      	bne.n	800820a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e000      	b.n	8008244 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008242:	2302      	movs	r3, #2
  }
}
 8008244:	4618      	mov	r0, r3
 8008246:	3728      	adds	r7, #40	; 0x28
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	0800941b 	.word	0x0800941b
 8008250:	080094b5 	.word	0x080094b5
 8008254:	080094d1 	.word	0x080094d1

08008258 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b0ba      	sub	sp, #232	; 0xe8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800827e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008282:	f640 030f 	movw	r3, #2063	; 0x80f
 8008286:	4013      	ands	r3, r2
 8008288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800828c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008290:	2b00      	cmp	r3, #0
 8008292:	d11b      	bne.n	80082cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b00      	cmp	r3, #0
 800829e:	d015      	beq.n	80082cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d105      	bne.n	80082b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d009      	beq.n	80082cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 82d6 	beq.w	800886e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
      }
      return;
 80082ca:	e2d0      	b.n	800886e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 811f 	beq.w	8008514 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80082d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082da:	4b8b      	ldr	r3, [pc, #556]	; (8008508 <HAL_UART_IRQHandler+0x2b0>)
 80082dc:	4013      	ands	r3, r2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d106      	bne.n	80082f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80082e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082e6:	4b89      	ldr	r3, [pc, #548]	; (800850c <HAL_UART_IRQHandler+0x2b4>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 8112 	beq.w	8008514 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d011      	beq.n	8008320 <HAL_UART_IRQHandler+0xc8>
 80082fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2201      	movs	r2, #1
 800830e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008316:	f043 0201 	orr.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d011      	beq.n	8008350 <HAL_UART_IRQHandler+0xf8>
 800832c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2202      	movs	r2, #2
 800833e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008346:	f043 0204 	orr.w	r2, r3, #4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d011      	beq.n	8008380 <HAL_UART_IRQHandler+0x128>
 800835c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2204      	movs	r2, #4
 800836e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008376:	f043 0202 	orr.w	r2, r3, #2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b00      	cmp	r3, #0
 800838a:	d017      	beq.n	80083bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800838c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d105      	bne.n	80083a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008398:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800839c:	4b5a      	ldr	r3, [pc, #360]	; (8008508 <HAL_UART_IRQHandler+0x2b0>)
 800839e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00b      	beq.n	80083bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2208      	movs	r2, #8
 80083aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b2:	f043 0208 	orr.w	r2, r3, #8
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d012      	beq.n	80083ee <HAL_UART_IRQHandler+0x196>
 80083c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00c      	beq.n	80083ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e4:	f043 0220 	orr.w	r2, r3, #32
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 823c 	beq.w	8008872 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d005      	beq.n	8008452 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800844a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800844e:	2b00      	cmp	r3, #0
 8008450:	d04f      	beq.n	80084f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 ff7c 	bl	8009350 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d141      	bne.n	80084ea <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800847c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008492:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800849e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1d9      	bne.n	8008466 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d013      	beq.n	80084e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084be:	4a14      	ldr	r2, [pc, #80]	; (8008510 <HAL_UART_IRQHandler+0x2b8>)
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fc f8c0 	bl	800464c <HAL_DMA_Abort_IT>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d017      	beq.n	8008502 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	e00f      	b.n	8008502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f9d9 	bl	800889a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e8:	e00b      	b.n	8008502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9d5 	bl	800889a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f0:	e007      	b.n	8008502 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9d1 	bl	800889a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008500:	e1b7      	b.n	8008872 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008502:	bf00      	nop
    return;
 8008504:	e1b5      	b.n	8008872 <HAL_UART_IRQHandler+0x61a>
 8008506:	bf00      	nop
 8008508:	10000001 	.word	0x10000001
 800850c:	04000120 	.word	0x04000120
 8008510:	08009551 	.word	0x08009551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008518:	2b01      	cmp	r3, #1
 800851a:	f040 814a 	bne.w	80087b2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800851e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8143 	beq.w	80087b2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800852c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 813c 	beq.w	80087b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2210      	movs	r2, #16
 8008540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	f040 80b5 	bne.w	80086bc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800855e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8187 	beq.w	8008876 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800856e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008572:	429a      	cmp	r2, r3
 8008574:	f080 817f 	bcs.w	8008876 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800857e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 8086 	bne.w	80086a0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1da      	bne.n	8008594 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3308      	adds	r3, #8
 80085e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008602:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008606:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800860a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e1      	bne.n	80085de <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3308      	adds	r3, #8
 8008620:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800862a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800862c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800863e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008640:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008644:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800864c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e3      	bne.n	800861a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800866e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008670:	f023 0310 	bic.w	r3, r3, #16
 8008674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	461a      	mov	r2, r3
 800867e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008682:	65bb      	str	r3, [r7, #88]	; 0x58
 8008684:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e4      	bne.n	8008660 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869a:	4618      	mov	r0, r3
 800869c:	f7fb ff78 	bl	8004590 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f8f9 	bl	80088ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086ba:	e0dc      	b.n	8008876 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80ce 	beq.w	800887a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80086de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80c9 	beq.w	800887a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800870a:	647b      	str	r3, [r7, #68]	; 0x44
 800870c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e4      	bne.n	80086e8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	623b      	str	r3, [r7, #32]
   return(result);
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008746:	633a      	str	r2, [r7, #48]	; 0x30
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e1      	bne.n	800871e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	60fb      	str	r3, [r7, #12]
   return(result);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0310 	bic.w	r3, r3, #16
 8008782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	69b9      	ldr	r1, [r7, #24]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	617b      	str	r3, [r7, #20]
   return(result);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f87e 	bl	80088ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80087b0:	e063      	b.n	800887a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <HAL_UART_IRQHandler+0x584>
 80087be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d008      	beq.n	80087dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fb59 	bl	8009e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087da:	e051      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80087dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d014      	beq.n	8008812 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d105      	bne.n	8008800 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80087f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d008      	beq.n	8008812 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008804:	2b00      	cmp	r3, #0
 8008806:	d03a      	beq.n	800887e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	4798      	blx	r3
    }
    return;
 8008810:	e035      	b.n	800887e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <HAL_UART_IRQHandler+0x5da>
 800881e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fea6 	bl	800957c <UART_EndTransmit_IT>
    return;
 8008830:	e026      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <HAL_UART_IRQHandler+0x5fa>
 800883e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008842:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fb30 	bl	8009eb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008850:	e016      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d010      	beq.n	8008880 <HAL_UART_IRQHandler+0x628>
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008862:	2b00      	cmp	r3, #0
 8008864:	da0c      	bge.n	8008880 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fb19 	bl	8009e9e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800886c:	e008      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
      return;
 800886e:	bf00      	nop
 8008870:	e006      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
    return;
 8008872:	bf00      	nop
 8008874:	e004      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
      return;
 8008876:	bf00      	nop
 8008878:	e002      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
      return;
 800887a:	bf00      	nop
 800887c:	e000      	b.n	8008880 <HAL_UART_IRQHandler+0x628>
    return;
 800887e:	bf00      	nop
  }
}
 8008880:	37e8      	adds	r7, #232	; 0xe8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop

08008888 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr

0800889a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr

080088ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
	...

080088c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c4:	b5b0      	push	{r4, r5, r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4bab      	ldr	r3, [pc, #684]	; (8008b9c <UART_SetConfig+0x2d8>)
 80088f0:	4013      	ands	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	69f9      	ldr	r1, [r7, #28]
 80088f8:	430b      	orrs	r3, r1
 80088fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4aa0      	ldr	r2, [pc, #640]	; (8008ba0 <UART_SetConfig+0x2dc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d004      	beq.n	800892c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	4313      	orrs	r3, r2
 800892a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008936:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6812      	ldr	r2, [r2, #0]
 800893e:	69f9      	ldr	r1, [r7, #28]
 8008940:	430b      	orrs	r3, r1
 8008942:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	f023 010f 	bic.w	r1, r3, #15
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a91      	ldr	r2, [pc, #580]	; (8008ba4 <UART_SetConfig+0x2e0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d122      	bne.n	80089aa <UART_SetConfig+0xe6>
 8008964:	2003      	movs	r0, #3
 8008966:	f7ff fb1d 	bl	8007fa4 <LL_RCC_GetUSARTClockSource>
 800896a:	4603      	mov	r3, r0
 800896c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008970:	2b03      	cmp	r3, #3
 8008972:	d817      	bhi.n	80089a4 <UART_SetConfig+0xe0>
 8008974:	a201      	add	r2, pc, #4	; (adr r2, 800897c <UART_SetConfig+0xb8>)
 8008976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897a:	bf00      	nop
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008999 	.word	0x08008999
 8008984:	08008993 	.word	0x08008993
 8008988:	0800899f 	.word	0x0800899f
 800898c:	2301      	movs	r3, #1
 800898e:	76fb      	strb	r3, [r7, #27]
 8008990:	e072      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008992:	2302      	movs	r3, #2
 8008994:	76fb      	strb	r3, [r7, #27]
 8008996:	e06f      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008998:	2304      	movs	r3, #4
 800899a:	76fb      	strb	r3, [r7, #27]
 800899c:	e06c      	b.n	8008a78 <UART_SetConfig+0x1b4>
 800899e:	2308      	movs	r3, #8
 80089a0:	76fb      	strb	r3, [r7, #27]
 80089a2:	e069      	b.n	8008a78 <UART_SetConfig+0x1b4>
 80089a4:	2310      	movs	r3, #16
 80089a6:	76fb      	strb	r3, [r7, #27]
 80089a8:	e066      	b.n	8008a78 <UART_SetConfig+0x1b4>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a7e      	ldr	r2, [pc, #504]	; (8008ba8 <UART_SetConfig+0x2e4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d134      	bne.n	8008a1e <UART_SetConfig+0x15a>
 80089b4:	200c      	movs	r0, #12
 80089b6:	f7ff faf5 	bl	8007fa4 <LL_RCC_GetUSARTClockSource>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80089c0:	2b0c      	cmp	r3, #12
 80089c2:	d829      	bhi.n	8008a18 <UART_SetConfig+0x154>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0x108>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	08008a01 	.word	0x08008a01
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a19 	.word	0x08008a19
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008a07 	.word	0x08008a07
 80089f0:	08008a19 	.word	0x08008a19
 80089f4:	08008a19 	.word	0x08008a19
 80089f8:	08008a19 	.word	0x08008a19
 80089fc:	08008a13 	.word	0x08008a13
 8008a00:	2300      	movs	r3, #0
 8008a02:	76fb      	strb	r3, [r7, #27]
 8008a04:	e038      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a06:	2302      	movs	r3, #2
 8008a08:	76fb      	strb	r3, [r7, #27]
 8008a0a:	e035      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	76fb      	strb	r3, [r7, #27]
 8008a10:	e032      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a12:	2308      	movs	r3, #8
 8008a14:	76fb      	strb	r3, [r7, #27]
 8008a16:	e02f      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	76fb      	strb	r3, [r7, #27]
 8008a1c:	e02c      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a5f      	ldr	r2, [pc, #380]	; (8008ba0 <UART_SetConfig+0x2dc>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d125      	bne.n	8008a74 <UART_SetConfig+0x1b0>
 8008a28:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008a2c:	f7ff facc 	bl	8007fc8 <LL_RCC_GetLPUARTClockSource>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a36:	d017      	beq.n	8008a68 <UART_SetConfig+0x1a4>
 8008a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a3c:	d817      	bhi.n	8008a6e <UART_SetConfig+0x1aa>
 8008a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a42:	d00b      	beq.n	8008a5c <UART_SetConfig+0x198>
 8008a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a48:	d811      	bhi.n	8008a6e <UART_SetConfig+0x1aa>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <UART_SetConfig+0x192>
 8008a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a52:	d006      	beq.n	8008a62 <UART_SetConfig+0x19e>
 8008a54:	e00b      	b.n	8008a6e <UART_SetConfig+0x1aa>
 8008a56:	2300      	movs	r3, #0
 8008a58:	76fb      	strb	r3, [r7, #27]
 8008a5a:	e00d      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	76fb      	strb	r3, [r7, #27]
 8008a60:	e00a      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a62:	2304      	movs	r3, #4
 8008a64:	76fb      	strb	r3, [r7, #27]
 8008a66:	e007      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	76fb      	strb	r3, [r7, #27]
 8008a6c:	e004      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a6e:	2310      	movs	r3, #16
 8008a70:	76fb      	strb	r3, [r7, #27]
 8008a72:	e001      	b.n	8008a78 <UART_SetConfig+0x1b4>
 8008a74:	2310      	movs	r3, #16
 8008a76:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a48      	ldr	r2, [pc, #288]	; (8008ba0 <UART_SetConfig+0x2dc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f040 8098 	bne.w	8008bb4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a84:	7efb      	ldrb	r3, [r7, #27]
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d823      	bhi.n	8008ad2 <UART_SetConfig+0x20e>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x1cc>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ab5 	.word	0x08008ab5
 8008a94:	08008ad3 	.word	0x08008ad3
 8008a98:	08008abd 	.word	0x08008abd
 8008a9c:	08008ad3 	.word	0x08008ad3
 8008aa0:	08008ac3 	.word	0x08008ac3
 8008aa4:	08008ad3 	.word	0x08008ad3
 8008aa8:	08008ad3 	.word	0x08008ad3
 8008aac:	08008ad3 	.word	0x08008ad3
 8008ab0:	08008acb 	.word	0x08008acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab4:	f7fd ff56 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8008ab8:	6178      	str	r0, [r7, #20]
        break;
 8008aba:	e00f      	b.n	8008adc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008abc:	4b3b      	ldr	r3, [pc, #236]	; (8008bac <UART_SetConfig+0x2e8>)
 8008abe:	617b      	str	r3, [r7, #20]
        break;
 8008ac0:	e00c      	b.n	8008adc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ac2:	f7fd fe9b 	bl	80067fc <HAL_RCC_GetSysClockFreq>
 8008ac6:	6178      	str	r0, [r7, #20]
        break;
 8008ac8:	e008      	b.n	8008adc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ace:	617b      	str	r3, [r7, #20]
        break;
 8008ad0:	e004      	b.n	8008adc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	76bb      	strb	r3, [r7, #26]
        break;
 8008ada:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8128 	beq.w	8008d34 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	4a31      	ldr	r2, [pc, #196]	; (8008bb0 <UART_SetConfig+0x2ec>)
 8008aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aee:	461a      	mov	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	4413      	add	r3, r2
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d305      	bcc.n	8008b14 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d902      	bls.n	8008b1a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	76bb      	strb	r3, [r7, #26]
 8008b18:	e10c      	b.n	8008d34 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f04f 0100 	mov.w	r1, #0
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <UART_SetConfig+0x2ec>)
 8008b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	f7f8 f813 	bl	8000b5c <__aeabi_uldivmod>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	020b      	lsls	r3, r1, #8
 8008b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b4c:	0202      	lsls	r2, r0, #8
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	6849      	ldr	r1, [r1, #4]
 8008b52:	0849      	lsrs	r1, r1, #1
 8008b54:	4608      	mov	r0, r1
 8008b56:	f04f 0100 	mov.w	r1, #0
 8008b5a:	1814      	adds	r4, r2, r0
 8008b5c:	eb43 0501 	adc.w	r5, r3, r1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	461a      	mov	r2, r3
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	f7f7 fff5 	bl	8000b5c <__aeabi_uldivmod>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4613      	mov	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b80:	d308      	bcc.n	8008b94 <UART_SetConfig+0x2d0>
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b88:	d204      	bcs.n	8008b94 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	e0cf      	b.n	8008d34 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	76bb      	strb	r3, [r7, #26]
 8008b98:	e0cc      	b.n	8008d34 <UART_SetConfig+0x470>
 8008b9a:	bf00      	nop
 8008b9c:	cfff69f3 	.word	0xcfff69f3
 8008ba0:	40008000 	.word	0x40008000
 8008ba4:	40013800 	.word	0x40013800
 8008ba8:	40004400 	.word	0x40004400
 8008bac:	00f42400 	.word	0x00f42400
 8008bb0:	0801b6f8 	.word	0x0801b6f8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bbc:	d165      	bne.n	8008c8a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8008bbe:	7efb      	ldrb	r3, [r7, #27]
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d828      	bhi.n	8008c16 <UART_SetConfig+0x352>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <UART_SetConfig+0x308>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008bf1 	.word	0x08008bf1
 8008bd0:	08008bf9 	.word	0x08008bf9
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c17 	.word	0x08008c17
 8008bdc:	08008c07 	.word	0x08008c07
 8008be0:	08008c17 	.word	0x08008c17
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
 8008bec:	08008c0f 	.word	0x08008c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf0:	f7fd feb8 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8008bf4:	6178      	str	r0, [r7, #20]
        break;
 8008bf6:	e013      	b.n	8008c20 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf8:	f7fd fec6 	bl	8006988 <HAL_RCC_GetPCLK2Freq>
 8008bfc:	6178      	str	r0, [r7, #20]
        break;
 8008bfe:	e00f      	b.n	8008c20 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c00:	4b56      	ldr	r3, [pc, #344]	; (8008d5c <UART_SetConfig+0x498>)
 8008c02:	617b      	str	r3, [r7, #20]
        break;
 8008c04:	e00c      	b.n	8008c20 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c06:	f7fd fdf9 	bl	80067fc <HAL_RCC_GetSysClockFreq>
 8008c0a:	6178      	str	r0, [r7, #20]
        break;
 8008c0c:	e008      	b.n	8008c20 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c12:	617b      	str	r3, [r7, #20]
        break;
 8008c14:	e004      	b.n	8008c20 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	76bb      	strb	r3, [r7, #26]
        break;
 8008c1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f000 8086 	beq.w	8008d34 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	4a4c      	ldr	r2, [pc, #304]	; (8008d60 <UART_SetConfig+0x49c>)
 8008c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c32:	461a      	mov	r2, r3
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c3a:	005a      	lsls	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	2b0f      	cmp	r3, #15
 8008c54:	d916      	bls.n	8008c84 <UART_SetConfig+0x3c0>
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c5c:	d212      	bcs.n	8008c84 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	f023 030f 	bic.w	r3, r3, #15
 8008c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	89fb      	ldrh	r3, [r7, #14]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	89fa      	ldrh	r2, [r7, #14]
 8008c80:	60da      	str	r2, [r3, #12]
 8008c82:	e057      	b.n	8008d34 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	76bb      	strb	r3, [r7, #26]
 8008c88:	e054      	b.n	8008d34 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c8a:	7efb      	ldrb	r3, [r7, #27]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d828      	bhi.n	8008ce2 <UART_SetConfig+0x41e>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x3d4>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008cbd 	.word	0x08008cbd
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008ccd 	.word	0x08008ccd
 8008ca4:	08008ce3 	.word	0x08008ce3
 8008ca8:	08008cd3 	.word	0x08008cd3
 8008cac:	08008ce3 	.word	0x08008ce3
 8008cb0:	08008ce3 	.word	0x08008ce3
 8008cb4:	08008ce3 	.word	0x08008ce3
 8008cb8:	08008cdb 	.word	0x08008cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cbc:	f7fd fe52 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8008cc0:	6178      	str	r0, [r7, #20]
        break;
 8008cc2:	e013      	b.n	8008cec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cc4:	f7fd fe60 	bl	8006988 <HAL_RCC_GetPCLK2Freq>
 8008cc8:	6178      	str	r0, [r7, #20]
        break;
 8008cca:	e00f      	b.n	8008cec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ccc:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <UART_SetConfig+0x498>)
 8008cce:	617b      	str	r3, [r7, #20]
        break;
 8008cd0:	e00c      	b.n	8008cec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cd2:	f7fd fd93 	bl	80067fc <HAL_RCC_GetSysClockFreq>
 8008cd6:	6178      	str	r0, [r7, #20]
        break;
 8008cd8:	e008      	b.n	8008cec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cde:	617b      	str	r3, [r7, #20]
        break;
 8008ce0:	e004      	b.n	8008cec <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	76bb      	strb	r3, [r7, #26]
        break;
 8008cea:	bf00      	nop
    }

    if (pclk != 0U)
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d020      	beq.n	8008d34 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	; (8008d60 <UART_SetConfig+0x49c>)
 8008cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	441a      	add	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b0f      	cmp	r3, #15
 8008d1c:	d908      	bls.n	8008d30 <UART_SetConfig+0x46c>
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d24:	d204      	bcs.n	8008d30 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	e001      	b.n	8008d34 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008d50:	7ebb      	ldrb	r3, [r7, #26]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bdb0      	pop	{r4, r5, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	00f42400 	.word	0x00f42400
 8008d60:	0801b6f8 	.word	0x0801b6f8

08008d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00a      	beq.n	8008e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	f003 0320 	and.w	r3, r3, #32
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01a      	beq.n	8008e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e62:	d10a      	bne.n	8008e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr

08008ea6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af02      	add	r7, sp, #8
 8008eac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008eb6:	f7f9 f895 	bl	8001fe4 <HAL_GetTick>
 8008eba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d10e      	bne.n	8008ee8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f82f 	bl	8008f3c <UART_WaitOnFlagUntilTimeout>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e025      	b.n	8008f34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d10e      	bne.n	8008f14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ef6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f819 	bl	8008f3c <UART_WaitOnFlagUntilTimeout>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e00f      	b.n	8008f34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b09c      	sub	sp, #112	; 0x70
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f4c:	e0a9      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f54:	f000 80a5 	beq.w	80090a2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f58:	f7f9 f844 	bl	8001fe4 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d302      	bcc.n	8008f6e <UART_WaitOnFlagUntilTimeout+0x32>
 8008f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d140      	bne.n	8008ff0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f82:	667b      	str	r3, [r7, #100]	; 0x64
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008f92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	f023 0301 	bic.w	r3, r3, #1
 8008fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e069      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d051      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800900c:	d149      	bne.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009016:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800902c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
 8009038:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800903c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e6      	bne.n	8009018 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	613b      	str	r3, [r7, #16]
   return(result);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	66bb      	str	r3, [r7, #104]	; 0x68
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800906a:	623a      	str	r2, [r7, #32]
 800906c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	69f9      	ldr	r1, [r7, #28]
 8009070:	6a3a      	ldr	r2, [r7, #32]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	61bb      	str	r3, [r7, #24]
   return(result);
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e010      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69da      	ldr	r2, [r3, #28]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4013      	ands	r3, r2
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	bf0c      	ite	eq
 80090b2:	2301      	moveq	r3, #1
 80090b4:	2300      	movne	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	429a      	cmp	r2, r3
 80090be:	f43f af46 	beq.w	8008f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3770      	adds	r7, #112	; 0x70
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	88fa      	ldrh	r2, [r7, #6]
 80090e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	88fa      	ldrh	r2, [r7, #6]
 80090ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fe:	d10e      	bne.n	800911e <UART_Start_Receive_IT+0x52>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <UART_Start_Receive_IT+0x48>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800910e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009112:	e02d      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	22ff      	movs	r2, #255	; 0xff
 8009118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800911c:	e028      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10d      	bne.n	8009142 <UART_Start_Receive_IT+0x76>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <UART_Start_Receive_IT+0x6c>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	22ff      	movs	r2, #255	; 0xff
 8009132:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009136:	e01b      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	227f      	movs	r2, #127	; 0x7f
 800913c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009140:	e016      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800914a:	d10d      	bne.n	8009168 <UART_Start_Receive_IT+0x9c>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <UART_Start_Receive_IT+0x92>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	227f      	movs	r2, #127	; 0x7f
 8009158:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800915c:	e008      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	223f      	movs	r2, #63	; 0x3f
 8009162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009166:	e003      	b.n	8009170 <UART_Start_Receive_IT+0xa4>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2222      	movs	r2, #34	; 0x22
 800917c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009192:	f043 0301 	orr.w	r3, r3, #1
 8009196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80091a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091bc:	d14d      	bne.n	800925a <UART_Start_Receive_IT+0x18e>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091c4:	88fa      	ldrh	r2, [r7, #6]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d347      	bcc.n	800925a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d2:	d107      	bne.n	80091e4 <UART_Start_Receive_IT+0x118>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d103      	bne.n	80091e4 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a38      	ldr	r2, [pc, #224]	; (80092c0 <UART_Start_Receive_IT+0x1f4>)
 80091e0:	671a      	str	r2, [r3, #112]	; 0x70
 80091e2:	e002      	b.n	80091ea <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4a37      	ldr	r2, [pc, #220]	; (80092c4 <UART_Start_Receive_IT+0x1f8>)
 80091e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009206:	66bb      	str	r3, [r7, #104]	; 0x68
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	461a      	mov	r2, r3
 800920e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009210:	64bb      	str	r3, [r7, #72]	; 0x48
 8009212:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800921e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e6      	bne.n	80091f2 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	e853 3f00 	ldrex	r3, [r3]
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800923a:	667b      	str	r3, [r7, #100]	; 0x64
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009244:	637a      	str	r2, [r7, #52]	; 0x34
 8009246:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800924a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800924c:	e841 2300 	strex	r3, r2, [r1]
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1e5      	bne.n	8009224 <UART_Start_Receive_IT+0x158>
 8009258:	e02c      	b.n	80092b4 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009262:	d107      	bne.n	8009274 <UART_Start_Receive_IT+0x1a8>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a16      	ldr	r2, [pc, #88]	; (80092c8 <UART_Start_Receive_IT+0x1fc>)
 8009270:	671a      	str	r2, [r3, #112]	; 0x70
 8009272:	e002      	b.n	800927a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a15      	ldr	r2, [pc, #84]	; (80092cc <UART_Start_Receive_IT+0x200>)
 8009278:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	613b      	str	r3, [r7, #16]
   return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009296:	663b      	str	r3, [r7, #96]	; 0x60
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092a0:	623b      	str	r3, [r7, #32]
 80092a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	6a3a      	ldr	r2, [r7, #32]
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e6      	bne.n	8009282 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3774      	adds	r7, #116	; 0x74
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr
 80092c0:	08009b8d 	.word	0x08009b8d
 80092c4:	08009895 	.word	0x08009895
 80092c8:	08009733 	.word	0x08009733
 80092cc:	080095d3 	.word	0x080095d3

080092d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b08f      	sub	sp, #60	; 0x3c
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e6      	bne.n	80092d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	60bb      	str	r3, [r7, #8]
   return(result);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009320:	633b      	str	r3, [r7, #48]	; 0x30
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932a:	61ba      	str	r2, [r7, #24]
 800932c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6979      	ldr	r1, [r7, #20]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	613b      	str	r3, [r7, #16]
   return(result);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009346:	bf00      	nop
 8009348:	373c      	adds	r7, #60	; 0x3c
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b095      	sub	sp, #84	; 0x54
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800936c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009376:	643b      	str	r3, [r7, #64]	; 0x40
 8009378:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800937c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e6      	bne.n	8009358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	61fb      	str	r3, [r7, #28]
   return(result);
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e3      	bne.n	800938a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d118      	bne.n	80093fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f023 0310 	bic.w	r3, r3, #16
 80093de:	647b      	str	r3, [r7, #68]	; 0x44
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	613b      	str	r3, [r7, #16]
   return(result);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009410:	bf00      	nop
 8009412:	3754      	adds	r7, #84	; 0x54
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr

0800941a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b090      	sub	sp, #64	; 0x40
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d137      	bne.n	80094a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009438:	2200      	movs	r2, #0
 800943a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	623b      	str	r3, [r7, #32]
   return(result);
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009454:	63bb      	str	r3, [r7, #56]	; 0x38
 8009456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800945e:	633a      	str	r2, [r7, #48]	; 0x30
 8009460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	637b      	str	r3, [r7, #52]	; 0x34
 8009488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	69b9      	ldr	r1, [r7, #24]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	617b      	str	r3, [r7, #20]
   return(result);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e6      	bne.n	8009472 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094a4:	e002      	b.n	80094ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80094a8:	f7f9 fae0 	bl	8002a6c <HAL_UART_TxCpltCallback>
}
 80094ac:	bf00      	nop
 80094ae:	3740      	adds	r7, #64	; 0x40
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff f9e0 	bl	8008888 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f8:	2b80      	cmp	r3, #128	; 0x80
 80094fa:	d109      	bne.n	8009510 <UART_DMAError+0x40>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b21      	cmp	r3, #33	; 0x21
 8009500:	d106      	bne.n	8009510 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff fee0 	bl	80092d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d109      	bne.n	8009532 <UART_DMAError+0x62>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b22      	cmp	r3, #34	; 0x22
 8009522:	d106      	bne.n	8009532 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800952c:	6978      	ldr	r0, [r7, #20]
 800952e:	f7ff ff0f 	bl	8009350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009538:	f043 0210 	orr.w	r2, r3, #16
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7ff f9a9 	bl	800889a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff f993 	bl	800889a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	60bb      	str	r3, [r7, #8]
   return(result);
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6979      	ldr	r1, [r7, #20]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	613b      	str	r3, [r7, #16]
   return(result);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e6      	bne.n	8009584 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7f9 fa51 	bl	8002a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ca:	bf00      	nop
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b096      	sub	sp, #88	; 0x58
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ea:	2b22      	cmp	r3, #34	; 0x22
 80095ec:	f040 8095 	bne.w	800971a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095fa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095fe:	b2d9      	uxtb	r1, r3
 8009600:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009604:	b2da      	uxtb	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960a:	400a      	ands	r2, r1
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	d178      	bne.n	800972a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800964c:	653b      	str	r3, [r7, #80]	; 0x50
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009656:	647b      	str	r3, [r7, #68]	; 0x44
 8009658:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800965c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e6      	bne.n	8009638 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	623b      	str	r3, [r7, #32]
   return(result);
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800968a:	633a      	str	r2, [r7, #48]	; 0x30
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d12e      	bne.n	8009712 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0310 	bic.w	r3, r3, #16
 80096ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	69b9      	ldr	r1, [r7, #24]
 80096de:	69fa      	ldr	r2, [r7, #28]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	617b      	str	r3, [r7, #20]
   return(result);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b10      	cmp	r3, #16
 80096f8:	d103      	bne.n	8009702 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2210      	movs	r2, #16
 8009700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff f8ce 	bl	80088ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009710:	e00b      	b.n	800972a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f7f9 f9b8 	bl	8002a88 <HAL_UART_RxCpltCallback>
}
 8009718:	e007      	b.n	800972a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699a      	ldr	r2, [r3, #24]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f042 0208 	orr.w	r2, r2, #8
 8009728:	619a      	str	r2, [r3, #24]
}
 800972a:	bf00      	nop
 800972c:	3758      	adds	r7, #88	; 0x58
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b096      	sub	sp, #88	; 0x58
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800974a:	2b22      	cmp	r3, #34	; 0x22
 800974c:	f040 8095 	bne.w	800987a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009760:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009764:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009768:	4013      	ands	r3, r2
 800976a:	b29a      	uxth	r2, r3
 800976c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800976e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009774:	1c9a      	adds	r2, r3, #2
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d178      	bne.n	800988a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b6:	643b      	str	r3, [r7, #64]	; 0x40
 80097b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097be:	e841 2300 	strex	r3, r2, [r1]
 80097c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e6      	bne.n	8009798 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3308      	adds	r3, #8
 80097d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	f023 0301 	bic.w	r3, r3, #1
 80097e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2220      	movs	r2, #32
 8009802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d12e      	bne.n	8009872 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	60bb      	str	r3, [r7, #8]
   return(result);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f023 0310 	bic.w	r3, r3, #16
 800982e:	647b      	str	r3, [r7, #68]	; 0x44
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	6979      	ldr	r1, [r7, #20]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	613b      	str	r3, [r7, #16]
   return(result);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e6      	bne.n	800981a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b10      	cmp	r3, #16
 8009858:	d103      	bne.n	8009862 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2210      	movs	r2, #16
 8009860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff f81e 	bl	80088ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009870:	e00b      	b.n	800988a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7f9 f908 	bl	8002a88 <HAL_UART_RxCpltCallback>
}
 8009878:	e007      	b.n	800988a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0208 	orr.w	r2, r2, #8
 8009888:	619a      	str	r2, [r3, #24]
}
 800988a:	bf00      	nop
 800988c:	3758      	adds	r7, #88	; 0x58
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b0a6      	sub	sp, #152	; 0x98
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ca:	2b22      	cmp	r3, #34	; 0x22
 80098cc:	f040 814f 	bne.w	8009b6e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80098da:	e0f6      	b.n	8009aca <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098e6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80098ea:	b2d9      	uxtb	r1, r3
 80098ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f6:	400a      	ands	r2, r1
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009922:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b00      	cmp	r3, #0
 800992c:	d053      	beq.n	80099d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800992e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d011      	beq.n	800995e <UART_RxISR_8BIT_FIFOEN+0xca>
 800993a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800993e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2201      	movs	r2, #1
 800994c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009954:	f043 0201 	orr.w	r2, r3, #1
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800995e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d011      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800996a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00b      	beq.n	800998e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2202      	movs	r2, #2
 800997c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009984:	f043 0204 	orr.w	r2, r3, #4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800998e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d011      	beq.n	80099be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800999a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2204      	movs	r2, #4
 80099ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099b4:	f043 0202 	orr.w	r2, r3, #2
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d006      	beq.n	80099d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe ff66 	bl	800889a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099dc:	b29b      	uxth	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d173      	bne.n	8009aca <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ea:	e853 3f00 	ldrex	r3, [r3]
 80099ee:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80099f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a06:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009a0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e4      	bne.n	80099e2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a2e:	f023 0301 	bic.w	r3, r3, #1
 8009a32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a3c:	657a      	str	r2, [r7, #84]	; 0x54
 8009a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a44:	e841 2300 	strex	r3, r2, [r1]
 8009a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1e3      	bne.n	8009a18 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d12e      	bne.n	8009ac4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	f023 0310 	bic.w	r3, r3, #16
 8009a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e6      	bne.n	8009a6c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d103      	bne.n	8009ab4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2210      	movs	r2, #16
 8009ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7fe fef5 	bl	80088ac <HAL_UARTEx_RxEventCallback>
 8009ac2:	e002      	b.n	8009aca <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7f8 ffdf 	bl	8002a88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d006      	beq.n	8009ae0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009ad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f47f aefe 	bne.w	80098dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ae6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d045      	beq.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009af8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d23e      	bcs.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b16:	673b      	str	r3, [r7, #112]	; 0x70
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e5      	bne.n	8009b00 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a14      	ldr	r2, [pc, #80]	; (8009b88 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009b38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f043 0320 	orr.w	r3, r3, #32
 8009b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b58:	61bb      	str	r3, [r7, #24]
 8009b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6979      	ldr	r1, [r7, #20]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	613b      	str	r3, [r7, #16]
   return(result);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e6      	bne.n	8009b3a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b6c:	e007      	b.n	8009b7e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0208 	orr.w	r2, r2, #8
 8009b7c:	619a      	str	r2, [r3, #24]
}
 8009b7e:	bf00      	nop
 8009b80:	3798      	adds	r7, #152	; 0x98
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	080095d3 	.word	0x080095d3

08009b8c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b0a8      	sub	sp, #160	; 0xa0
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b9a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc2:	2b22      	cmp	r3, #34	; 0x22
 8009bc4:	f040 8153 	bne.w	8009e6e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009bce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bd2:	e0fa      	b.n	8009dca <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009be6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009bea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009bee:	4013      	ands	r3, r2
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bf6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfc:	1c9a      	adds	r2, r3, #2
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d053      	beq.n	8009cd2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d011      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00b      	beq.n	8009c5a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2201      	movs	r2, #1
 8009c48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c50:	f043 0201 	orr.w	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d011      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00b      	beq.n	8009c8a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2202      	movs	r2, #2
 8009c78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c80:	f043 0204 	orr.w	r2, r3, #4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d011      	beq.n	8009cba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00b      	beq.n	8009cba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2204      	movs	r2, #4
 8009ca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cb0:	f043 0202 	orr.w	r2, r3, #2
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d006      	beq.n	8009cd2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7fe fde8 	bl	800889a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d175      	bne.n	8009dca <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d02:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1e4      	bne.n	8009cde <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3308      	adds	r3, #8
 8009d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d2a:	f023 0301 	bic.w	r3, r3, #1
 8009d2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009d3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e1      	bne.n	8009d14 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d12e      	bne.n	8009dc4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d74:	e853 3f00 	ldrex	r3, [r3]
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7c:	f023 0310 	bic.w	r3, r3, #16
 8009d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d92:	e841 2300 	strex	r3, r2, [r1]
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e6      	bne.n	8009d6c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	69db      	ldr	r3, [r3, #28]
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	d103      	bne.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2210      	movs	r2, #16
 8009db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7fe fd75 	bl	80088ac <HAL_UARTEx_RxEventCallback>
 8009dc2:	e002      	b.n	8009dca <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7f8 fe5f 	bl	8002a88 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d006      	beq.n	8009de0 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f47f aefa 	bne.w	8009bd4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009de6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d045      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009df8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d23e      	bcs.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3308      	adds	r3, #8
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	e853 3f00 	ldrex	r3, [r3]
 8009e0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e16:	677b      	str	r3, [r7, #116]	; 0x74
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009e20:	633a      	str	r2, [r7, #48]	; 0x30
 8009e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e28:	e841 2300 	strex	r3, r2, [r1]
 8009e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e5      	bne.n	8009e00 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a14      	ldr	r2, [pc, #80]	; (8009e88 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009e38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f043 0320 	orr.w	r3, r3, #32
 8009e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	69b9      	ldr	r1, [r7, #24]
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	617b      	str	r3, [r7, #20]
   return(result);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e6      	bne.n	8009e3a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e6c:	e007      	b.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	699a      	ldr	r2, [r3, #24]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f042 0208 	orr.w	r2, r2, #8
 8009e7c:	619a      	str	r2, [r3, #24]
}
 8009e7e:	bf00      	nop
 8009e80:	37a0      	adds	r7, #160	; 0xa0
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	08009733 	.word	0x08009733

08009e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b088      	sub	sp, #32
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	1d3b      	adds	r3, r7, #4
 8009ecc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e046      	b.n	8009f70 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2224      	movs	r2, #36	; 0x24
 8009eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0201 	bic.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d105      	bne.n	8009f28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009f1c:	1d3b      	adds	r3, r7, #4
 8009f1e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 f911 	bl	800a14a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f38:	f7f8 f854 	bl	8001fe4 <HAL_GetTick>
 8009f3c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7fe fff5 	bl	8008f3c <UART_WaitOnFlagUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	e003      	b.n	8009f66 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b089      	sub	sp, #36	; 0x24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d101      	bne.n	8009f8e <HAL_UARTEx_EnableStopMode+0x16>
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e021      	b.n	8009fd2 <HAL_UARTEx_EnableStopMode+0x5a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6979      	ldr	r1, [r7, #20]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e6      	bne.n	8009f96 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3724      	adds	r7, #36	; 0x24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr

08009fdc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <HAL_UARTEx_EnableFifoMode+0x16>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	e02b      	b.n	800a04a <HAL_UARTEx_EnableFifoMode+0x6e>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a020:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a028:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f8ac 	bl	800a190 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a066:	2302      	movs	r3, #2
 800a068:	e02d      	b.n	800a0c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2224      	movs	r2, #36	; 0x24
 800a076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f872 	bl	800a190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	e02d      	b.n	800a142 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2224      	movs	r2, #36	; 0x24
 800a0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0201 	bic.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f834 	bl	800a190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	1d3b      	adds	r3, r7, #4
 800a154:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f023 0210 	bic.w	r2, r3, #16
 800a162:	893b      	ldrh	r3, [r7, #8]
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a178:	7abb      	ldrb	r3, [r7, #10]
 800a17a:	061a      	lsls	r2, r3, #24
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	605a      	str	r2, [r3, #4]
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
	...

0800a190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d108      	bne.n	800a1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1b0:	e031      	b.n	800a216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1b6:	2308      	movs	r3, #8
 800a1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	0e5b      	lsrs	r3, r3, #25
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	0f5b      	lsrs	r3, r3, #29
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	7b3a      	ldrb	r2, [r7, #12]
 800a1de:	4910      	ldr	r1, [pc, #64]	; (800a220 <UARTEx_SetNbDataToProcess+0x90>)
 800a1e0:	5c8a      	ldrb	r2, [r1, r2]
 800a1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1e6:	7b3a      	ldrb	r2, [r7, #12]
 800a1e8:	490e      	ldr	r1, [pc, #56]	; (800a224 <UARTEx_SetNbDataToProcess+0x94>)
 800a1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	7b7a      	ldrb	r2, [r7, #13]
 800a1fc:	4908      	ldr	r1, [pc, #32]	; (800a220 <UARTEx_SetNbDataToProcess+0x90>)
 800a1fe:	5c8a      	ldrb	r2, [r1, r2]
 800a200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a204:	7b7a      	ldrb	r2, [r7, #13]
 800a206:	4907      	ldr	r1, [pc, #28]	; (800a224 <UARTEx_SetNbDataToProcess+0x94>)
 800a208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a20e:	b29a      	uxth	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a216:	bf00      	nop
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bc80      	pop	{r7}
 800a21e:	4770      	bx	lr
 800a220:	0801b710 	.word	0x0801b710
 800a224:	0801b718 	.word	0x0801b718

0800a228 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a22c:	f7f7 fd80 	bl	8001d30 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a230:	f000 f802 	bl	800a238 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a234:	bf00      	nop
 800a236:	bd80      	pop	{r7, pc}

0800a238 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  BSP_LED_Init(LED_BLUE);
 800a23e:	2000      	movs	r0, #0
 800a240:	f7f8 fc84 	bl	8002b4c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800a244:	2001      	movs	r0, #1
 800a246:	f7f8 fc81 	bl	8002b4c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800a24a:	2002      	movs	r0, #2
 800a24c:	f7f8 fc7e 	bl	8002b4c <BSP_LED_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800a250:	2101      	movs	r1, #1
 800a252:	2001      	movs	r0, #1
 800a254:	f7f8 fd2a 	bl	8002cac <BSP_PB_Init>

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800a258:	2300      	movs	r3, #0
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	2301      	movs	r3, #1
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	2301      	movs	r3, #1
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4b46      	ldr	r3, [pc, #280]	; (800a380 <LoRaWAN_Init+0x148>)
 800a266:	2200      	movs	r2, #0
 800a268:	2100      	movs	r1, #0
 800a26a:	2002      	movs	r0, #2
 800a26c:	f010 fa22 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a270:	2300      	movs	r3, #0
 800a272:	9302      	str	r3, [sp, #8]
 800a274:	2303      	movs	r3, #3
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	2302      	movs	r3, #2
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4b41      	ldr	r3, [pc, #260]	; (800a384 <LoRaWAN_Init+0x14c>)
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	2002      	movs	r0, #2
 800a284:	f010 fa16 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a288:	2300      	movs	r3, #0
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	2301      	movs	r3, #1
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	2301      	movs	r3, #1
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4b3c      	ldr	r3, [pc, #240]	; (800a388 <LoRaWAN_Init+0x150>)
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	2002      	movs	r0, #2
 800a29c:	f010 fa0a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4b39      	ldr	r3, [pc, #228]	; (800a38c <LoRaWAN_Init+0x154>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ac:	4838      	ldr	r0, [pc, #224]	; (800a390 <LoRaWAN_Init+0x158>)
 800a2ae:	f00f ff53 	bl	801a158 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	4b37      	ldr	r3, [pc, #220]	; (800a394 <LoRaWAN_Init+0x15c>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a2be:	4836      	ldr	r0, [pc, #216]	; (800a398 <LoRaWAN_Init+0x160>)
 800a2c0:	f00f ff4a 	bl	801a158 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4b34      	ldr	r3, [pc, #208]	; (800a39c <LoRaWAN_Init+0x164>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f04f 31ff 	mov.w	r1, #4294967295
 800a2d0:	4833      	ldr	r0, [pc, #204]	; (800a3a0 <LoRaWAN_Init+0x168>)
 800a2d2:	f00f ff41 	bl	801a158 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800a2d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2da:	482d      	ldr	r0, [pc, #180]	; (800a390 <LoRaWAN_Init+0x158>)
 800a2dc:	f010 f850 	bl	801a380 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800a2e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2e4:	482c      	ldr	r0, [pc, #176]	; (800a398 <LoRaWAN_Init+0x160>)
 800a2e6:	f010 f84b 	bl	801a380 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 800a2ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a2ee:	482c      	ldr	r0, [pc, #176]	; (800a3a0 <LoRaWAN_Init+0x168>)
 800a2f0:	f010 f846 	bl	801a380 <UTIL_TIMER_SetPeriod>

//================================================================================================================================


  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieInit), UTIL_SEQ_RFU, Sensor_Init);
 800a2f4:	4a2b      	ldr	r2, [pc, #172]	; (800a3a4 <LoRaWAN_Init+0x16c>)
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	2004      	movs	r0, #4
 800a2fa:	f00f fe97 	bl	801a02c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ApplicatieData), UTIL_SEQ_RFU, Sensor_Data);
 800a2fe:	4a2a      	ldr	r2, [pc, #168]	; (800a3a8 <LoRaWAN_Init+0x170>)
 800a300:	2100      	movs	r1, #0
 800a302:	2008      	movs	r0, #8
 800a304:	f00f fe92 	bl	801a02c <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ApplicatieInit), CFG_SEQ_Prio_0);
 800a308:	2100      	movs	r1, #0
 800a30a:	2004      	movs	r0, #4
 800a30c:	f00f feb0 	bl	801a070 <UTIL_SEQ_SetTask>



  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a310:	4a26      	ldr	r2, [pc, #152]	; (800a3ac <LoRaWAN_Init+0x174>)
 800a312:	2100      	movs	r1, #0
 800a314:	2001      	movs	r0, #1
 800a316:	f00f fe89 	bl	801a02c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a31a:	4a25      	ldr	r2, [pc, #148]	; (800a3b0 <LoRaWAN_Init+0x178>)
 800a31c:	2100      	movs	r1, #0
 800a31e:	2002      	movs	r0, #2
 800a320:	f00f fe84 	bl	801a02c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a324:	f000 fb1e 	bl	800a964 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800a328:	4822      	ldr	r0, [pc, #136]	; (800a3b4 <LoRaWAN_Init+0x17c>)
 800a32a:	f001 ff95 	bl	800c258 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a32e:	4822      	ldr	r0, [pc, #136]	; (800a3b8 <LoRaWAN_Init+0x180>)
 800a330:	f001 ffde 	bl	800c2f0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a334:	481a      	ldr	r0, [pc, #104]	; (800a3a0 <LoRaWAN_Init+0x168>)
 800a336:	f00f ff45 	bl	801a1c4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType);
 800a33a:	4b20      	ldr	r3, [pc, #128]	; (800a3bc <LoRaWAN_Init+0x184>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f002 f90c 	bl	800c55c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a344:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <LoRaWAN_Init+0x188>)
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d111      	bne.n	800a370 <LoRaWAN_Init+0x138>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a34c:	2300      	movs	r3, #0
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <LoRaWAN_Init+0x18c>)
 800a352:	2200      	movs	r2, #0
 800a354:	f04f 31ff 	mov.w	r1, #4294967295
 800a358:	481b      	ldr	r0, [pc, #108]	; (800a3c8 <LoRaWAN_Init+0x190>)
 800a35a:	f00f fefd 	bl	801a158 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800a35e:	f247 5130 	movw	r1, #30000	; 0x7530
 800a362:	4819      	ldr	r0, [pc, #100]	; (800a3c8 <LoRaWAN_Init+0x190>)
 800a364:	f010 f80c 	bl	801a380 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a368:	4817      	ldr	r0, [pc, #92]	; (800a3c8 <LoRaWAN_Init+0x190>)
 800a36a:	f00f ff2b 	bl	801a1c4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a36e:	e003      	b.n	800a378 <LoRaWAN_Init+0x140>
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800a370:	2101      	movs	r1, #1
 800a372:	2000      	movs	r0, #0
 800a374:	f7f8 fc9a 	bl	8002cac <BSP_PB_Init>
}
 800a378:	bf00      	nop
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	0801ae68 	.word	0x0801ae68
 800a384:	0801ae88 	.word	0x0801ae88
 800a388:	0801aea8 	.word	0x0801aea8
 800a38c:	0800a7d5 	.word	0x0800a7d5
 800a390:	20000270 	.word	0x20000270
 800a394:	0800a7eb 	.word	0x0800a7eb
 800a398:	20000288 	.word	0x20000288
 800a39c:	0800a801 	.word	0x0800a801
 800a3a0:	200002a0 	.word	0x200002a0
 800a3a4:	08000e51 	.word	0x08000e51
 800a3a8:	08000e69 	.word	0x08000e69
 800a3ac:	0800c549 	.word	0x0800c549
 800a3b0:	0800a545 	.word	0x0800a545
 800a3b4:	2000003c 	.word	0x2000003c
 800a3b8:	20000070 	.word	0x20000070
 800a3bc:	20000038 	.word	0x20000038
 800a3c0:	20000160 	.word	0x20000160
 800a3c4:	0800a7b1 	.word	0x0800a7b1
 800a3c8:	20000164 	.word	0x20000164

0800a3cc <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3dc:	d007      	beq.n	800a3ee <HAL_GPIO_EXTI_Callback+0x22>
 800a3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3e2:	dc09      	bgt.n	800a3f8 <HAL_GPIO_EXTI_Callback+0x2c>
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d009      	beq.n	800a3fc <HAL_GPIO_EXTI_Callback+0x30>
 800a3e8:	2b40      	cmp	r3, #64	; 0x40
 800a3ea:	d009      	beq.n	800a400 <HAL_GPIO_EXTI_Callback+0x34>
    case  BUTTON_SW2_PIN:
      break;
    case  BUTTON_SW3_PIN:
      break;
    default:
      break;
 800a3ec:	e004      	b.n	800a3f8 <HAL_GPIO_EXTI_Callback+0x2c>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	2002      	movs	r0, #2
 800a3f2:	f00f fe3d 	bl	801a070 <UTIL_SEQ_SetTask>
      break;
 800a3f6:	e004      	b.n	800a402 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e002      	b.n	800a402 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e000      	b.n	800a402 <HAL_GPIO_EXTI_Callback+0x36>
      break;
 800a400:	bf00      	nop
  }
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a40c:	b5b0      	push	{r4, r5, r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af06      	add	r7, sp, #24
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <OnRxData+0x16>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d078      	beq.n	800a514 <OnRxData+0x108>
  {
    BSP_LED_On(LED_BLUE) ;
 800a422:	2000      	movs	r0, #0
 800a424:	f7f8 fbd6 	bl	8002bd4 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 800a428:	483f      	ldr	r0, [pc, #252]	; (800a528 <OnRxData+0x11c>)
 800a42a:	f00f fecb 	bl	801a1c4 <UTIL_TIMER_Start>

    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 800a42e:	4b3f      	ldr	r3, [pc, #252]	; (800a52c <OnRxData+0x120>)
 800a430:	2200      	movs	r2, #0
 800a432:	2100      	movs	r1, #0
 800a434:	2002      	movs	r0, #2
 800a436:	f010 f93d 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	f992 200c 	ldrsb.w	r2, [r2, #12]
 800a444:	4611      	mov	r1, r2
 800a446:	4a3a      	ldr	r2, [pc, #232]	; (800a530 <OnRxData+0x124>)
 800a448:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	7809      	ldrb	r1, [r1, #0]
 800a450:	4608      	mov	r0, r1
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800a458:	460c      	mov	r4, r1
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	f991 1003 	ldrsb.w	r1, [r1, #3]
 800a460:	460d      	mov	r5, r1
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	f991 1004 	ldrsb.w	r1, [r1, #4]
 800a468:	9105      	str	r1, [sp, #20]
 800a46a:	9504      	str	r5, [sp, #16]
 800a46c:	9403      	str	r4, [sp, #12]
 800a46e:	9002      	str	r0, [sp, #8]
 800a470:	9201      	str	r2, [sp, #4]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4b2f      	ldr	r3, [pc, #188]	; (800a534 <OnRxData+0x128>)
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	2003      	movs	r0, #3
 800a47c:	f010 f91a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	2b02      	cmp	r3, #2
 800a486:	d021      	beq.n	800a4cc <OnRxData+0xc0>
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d145      	bne.n	800a518 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d117      	bne.n	800a4c4 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d00e      	beq.n	800a4bc <OnRxData+0xb0>
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	dc12      	bgt.n	800a4c8 <OnRxData+0xbc>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <OnRxData+0xa0>
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d004      	beq.n	800a4b4 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800a4aa:	e00d      	b.n	800a4c8 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f002 f9b7 	bl	800c820 <LmHandlerRequestClass>
              break;
 800a4b2:	e00a      	b.n	800a4ca <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 800a4b4:	2001      	movs	r0, #1
 800a4b6:	f002 f9b3 	bl	800c820 <LmHandlerRequestClass>
              break;
 800a4ba:	e006      	b.n	800a4ca <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 800a4bc:	2002      	movs	r0, #2
 800a4be:	f002 f9af 	bl	800c820 <LmHandlerRequestClass>
              break;
 800a4c2:	e002      	b.n	800a4ca <OnRxData+0xbe>
          }
        }
 800a4c4:	bf00      	nop
 800a4c6:	e02a      	b.n	800a51e <OnRxData+0x112>
              break;
 800a4c8:	bf00      	nop
        break;
 800a4ca:	e028      	b.n	800a51e <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	785b      	ldrb	r3, [r3, #1]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d123      	bne.n	800a51c <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	4b15      	ldr	r3, [pc, #84]	; (800a538 <OnRxData+0x12c>)
 800a4e2:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800a4e4:	4b14      	ldr	r3, [pc, #80]	; (800a538 <OnRxData+0x12c>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800a4ec:	4b13      	ldr	r3, [pc, #76]	; (800a53c <OnRxData+0x130>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2003      	movs	r0, #3
 800a4f4:	f010 f8de 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_Off(LED_RED) ;
 800a4f8:	2002      	movs	r0, #2
 800a4fa:	f7f8 fb8f 	bl	8002c1c <BSP_LED_Off>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
            BSP_LED_On(LED_RED) ;
          }
        }
        break;
 800a4fe:	e00d      	b.n	800a51c <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <OnRxData+0x134>)
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	2003      	movs	r0, #3
 800a508:	f010 f8d4 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
            BSP_LED_On(LED_RED) ;
 800a50c:	2002      	movs	r0, #2
 800a50e:	f7f8 fb61 	bl	8002bd4 <BSP_LED_On>
        break;
 800a512:	e003      	b.n	800a51c <OnRxData+0x110>

      default:

        break;
    }
  }
 800a514:	bf00      	nop
 800a516:	e002      	b.n	800a51e <OnRxData+0x112>
        break;
 800a518:	bf00      	nop
 800a51a:	e000      	b.n	800a51e <OnRxData+0x112>
        break;
 800a51c:	bf00      	nop
  /* USER CODE END OnRxData_1 */
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bdb0      	pop	{r4, r5, r7, pc}
 800a526:	bf00      	nop
 800a528:	20000288 	.word	0x20000288
 800a52c:	0801aec8 	.word	0x0801aec8
 800a530:	20000088 	.word	0x20000088
 800a534:	0801aefc 	.word	0x0801aefc
 800a538:	2000026e 	.word	0x2000026e
 800a53c:	0801af44 	.word	0x0801af44
 800a540:	0801af50 	.word	0x0801af50

0800a544 <SendTxData>:

static void SendTxData(void)
{
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b091      	sub	sp, #68	; 0x44
 800a548:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  uint16_t pressure = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t temperature = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	863b      	strh	r3, [r7, #48]	; 0x30
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t humidity = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t latitude = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t longitude = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	847b      	strh	r3, [r7, #34]	; 0x22
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f7 fe3a 	bl	80021e8 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 800a574:	f7f6 ffda 	bl	800152c <SYS_GetTemperatureLevel>
 800a578:	4603      	mov	r3, r0
 800a57a:	121b      	asrs	r3, r3, #8
 800a57c:	863b      	strh	r3, [r7, #48]	; 0x30
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	4983      	ldr	r1, [pc, #524]	; (800a790 <SendTxData+0x24c>)
 800a582:	4618      	mov	r0, r3
 800a584:	f7f6 f97a 	bl	800087c <__aeabi_fmul>
 800a588:	4603      	mov	r3, r0
 800a58a:	4982      	ldr	r1, [pc, #520]	; (800a794 <SendTxData+0x250>)
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7f6 fa29 	bl	80009e4 <__aeabi_fdiv>
 800a592:	4603      	mov	r3, r0
 800a594:	4618      	mov	r0, r3
 800a596:	f7f6 fac1 	bl	8000b1c <__aeabi_f2uiz>
 800a59a:	4603      	mov	r3, r0
 800a59c:	867b      	strh	r3, [r7, #50]	; 0x32

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a59e:	4b7e      	ldr	r3, [pc, #504]	; (800a798 <SendTxData+0x254>)
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	497b      	ldr	r1, [pc, #492]	; (800a794 <SendTxData+0x250>)
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7f6 f967 	bl	800087c <__aeabi_fmul>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7f6 fab3 	bl	8000b1c <__aeabi_f2uiz>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

  AppData.Buffer[i++] = AppLedStateOn;
 800a5ba:	4b77      	ldr	r3, [pc, #476]	; (800a798 <SendTxData+0x254>)
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c0:	1c59      	adds	r1, r3, #1
 800a5c2:	6379      	str	r1, [r7, #52]	; 0x34
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a75      	ldr	r2, [pc, #468]	; (800a79c <SendTxData+0x258>)
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a5cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a5ce:	0a1b      	lsrs	r3, r3, #8
 800a5d0:	b298      	uxth	r0, r3
 800a5d2:	4b71      	ldr	r3, [pc, #452]	; (800a798 <SendTxData+0x254>)
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	1c59      	adds	r1, r3, #1
 800a5da:	6379      	str	r1, [r7, #52]	; 0x34
 800a5dc:	4413      	add	r3, r2
 800a5de:	b2c2      	uxtb	r2, r0
 800a5e0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a5e2:	4b6d      	ldr	r3, [pc, #436]	; (800a798 <SendTxData+0x254>)
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e8:	1c59      	adds	r1, r3, #1
 800a5ea:	6379      	str	r1, [r7, #52]	; 0x34
 800a5ec:	4413      	add	r3, r2
 800a5ee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a5f4:	4b68      	ldr	r3, [pc, #416]	; (800a798 <SendTxData+0x254>)
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fa:	1c59      	adds	r1, r3, #1
 800a5fc:	6379      	str	r1, [r7, #52]	; 0x34
 800a5fe:	4413      	add	r3, r2
 800a600:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a606:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	b298      	uxth	r0, r3
 800a60c:	4b62      	ldr	r3, [pc, #392]	; (800a798 <SendTxData+0x254>)
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a612:	1c59      	adds	r1, r3, #1
 800a614:	6379      	str	r1, [r7, #52]	; 0x34
 800a616:	4413      	add	r3, r2
 800a618:	b2c2      	uxtb	r2, r0
 800a61a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a61c:	4b5e      	ldr	r3, [pc, #376]	; (800a798 <SendTxData+0x254>)
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	1c59      	adds	r1, r3, #1
 800a624:	6379      	str	r1, [r7, #52]	; 0x34
 800a626:	4413      	add	r3, r2
 800a628:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a62e:	4b5c      	ldr	r3, [pc, #368]	; (800a7a0 <SendTxData+0x25c>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b08      	cmp	r3, #8
 800a634:	d007      	beq.n	800a646 <SendTxData+0x102>
 800a636:	4b5a      	ldr	r3, [pc, #360]	; (800a7a0 <SendTxData+0x25c>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d003      	beq.n	800a646 <SendTxData+0x102>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a63e:	4b58      	ldr	r3, [pc, #352]	; (800a7a0 <SendTxData+0x25c>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d120      	bne.n	800a688 <SendTxData+0x144>
  {
    AppData.Buffer[i++] = 0;
 800a646:	4b54      	ldr	r3, [pc, #336]	; (800a798 <SendTxData+0x254>)
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	1c59      	adds	r1, r3, #1
 800a64e:	6379      	str	r1, [r7, #52]	; 0x34
 800a650:	4413      	add	r3, r2
 800a652:	2200      	movs	r2, #0
 800a654:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a656:	4b50      	ldr	r3, [pc, #320]	; (800a798 <SendTxData+0x254>)
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65c:	1c59      	adds	r1, r3, #1
 800a65e:	6379      	str	r1, [r7, #52]	; 0x34
 800a660:	4413      	add	r3, r2
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a666:	4b4c      	ldr	r3, [pc, #304]	; (800a798 <SendTxData+0x254>)
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66c:	1c59      	adds	r1, r3, #1
 800a66e:	6379      	str	r1, [r7, #52]	; 0x34
 800a670:	4413      	add	r3, r2
 800a672:	2200      	movs	r2, #0
 800a674:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a676:	4b48      	ldr	r3, [pc, #288]	; (800a798 <SendTxData+0x254>)
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	6379      	str	r1, [r7, #52]	; 0x34
 800a680:	4413      	add	r3, r2
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e05b      	b.n	800a740 <SendTxData+0x1fc>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	62bb      	str	r3, [r7, #40]	; 0x28
    longitude = sensor_data.longitude;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	627b      	str	r3, [r7, #36]	; 0x24

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a690:	4b41      	ldr	r3, [pc, #260]	; (800a798 <SendTxData+0x254>)
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a696:	1c59      	adds	r1, r3, #1
 800a698:	6379      	str	r1, [r7, #52]	; 0x34
 800a69a:	18d4      	adds	r4, r2, r3
 800a69c:	f7f7 fb6e 	bl	8001d7c <GetBatteryLevel>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	1418      	asrs	r0, r3, #16
 800a6a8:	4b3b      	ldr	r3, [pc, #236]	; (800a798 <SendTxData+0x254>)
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	1c59      	adds	r1, r3, #1
 800a6b0:	6379      	str	r1, [r7, #52]	; 0x34
 800a6b2:	4413      	add	r3, r2
 800a6b4:	b2c2      	uxtb	r2, r0
 800a6b6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	1218      	asrs	r0, r3, #8
 800a6bc:	4b36      	ldr	r3, [pc, #216]	; (800a798 <SendTxData+0x254>)
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	1c59      	adds	r1, r3, #1
 800a6c4:	6379      	str	r1, [r7, #52]	; 0x34
 800a6c6:	4413      	add	r3, r2
 800a6c8:	b2c2      	uxtb	r2, r0
 800a6ca:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a6cc:	4b32      	ldr	r3, [pc, #200]	; (800a798 <SendTxData+0x254>)
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d2:	1c59      	adds	r1, r3, #1
 800a6d4:	6379      	str	r1, [r7, #52]	; 0x34
 800a6d6:	4413      	add	r3, r2
 800a6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6da:	b2d2      	uxtb	r2, r2
 800a6dc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1418      	asrs	r0, r3, #16
 800a6e2:	4b2d      	ldr	r3, [pc, #180]	; (800a798 <SendTxData+0x254>)
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e8:	1c59      	adds	r1, r3, #1
 800a6ea:	6379      	str	r1, [r7, #52]	; 0x34
 800a6ec:	4413      	add	r3, r2
 800a6ee:	b2c2      	uxtb	r2, r0
 800a6f0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	1218      	asrs	r0, r3, #8
 800a6f6:	4b28      	ldr	r3, [pc, #160]	; (800a798 <SendTxData+0x254>)
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fc:	1c59      	adds	r1, r3, #1
 800a6fe:	6379      	str	r1, [r7, #52]	; 0x34
 800a700:	4413      	add	r3, r2
 800a702:	b2c2      	uxtb	r2, r0
 800a704:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a706:	4b24      	ldr	r3, [pc, #144]	; (800a798 <SendTxData+0x254>)
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	1c59      	adds	r1, r3, #1
 800a70e:	6379      	str	r1, [r7, #52]	; 0x34
 800a710:	4413      	add	r3, r2
 800a712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a71a:	0a1b      	lsrs	r3, r3, #8
 800a71c:	b298      	uxth	r0, r3
 800a71e:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <SendTxData+0x254>)
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a724:	1c59      	adds	r1, r3, #1
 800a726:	6379      	str	r1, [r7, #52]	; 0x34
 800a728:	4413      	add	r3, r2
 800a72a:	b2c2      	uxtb	r2, r0
 800a72c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a72e:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <SendTxData+0x254>)
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	6379      	str	r1, [r7, #52]	; 0x34
 800a738:	4413      	add	r3, r2
 800a73a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	b2da      	uxtb	r2, r3
 800a744:	4b14      	ldr	r3, [pc, #80]	; (800a798 <SendTxData+0x254>)
 800a746:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 800a748:	1d3a      	adds	r2, r7, #4
 800a74a:	2300      	movs	r3, #0
 800a74c:	2100      	movs	r1, #0
 800a74e:	4812      	ldr	r0, [pc, #72]	; (800a798 <SendTxData+0x254>)
 800a750:	f001 ff7a 	bl	800c648 <LmHandlerSend>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <SendTxData+0x224>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a75a:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <SendTxData+0x260>)
 800a75c:	2201      	movs	r2, #1
 800a75e:	2100      	movs	r1, #0
 800a760:	2001      	movs	r0, #1
 800a762:	f00f ffa7 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }

  /* USER CODE END SendTxData_1 */
}
 800a766:	e00e      	b.n	800a786 <SendTxData+0x242>
  else if (nextTxIn > 0)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00b      	beq.n	800a786 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a0d      	ldr	r2, [pc, #52]	; (800a7a8 <SendTxData+0x264>)
 800a772:	fba2 2303 	umull	r2, r3, r2, r3
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <SendTxData+0x268>)
 800a77c:	2201      	movs	r2, #1
 800a77e:	2100      	movs	r1, #0
 800a780:	2001      	movs	r0, #1
 800a782:	f00f ff97 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a786:	bf00      	nop
 800a788:	373c      	adds	r7, #60	; 0x3c
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd90      	pop	{r4, r7, pc}
 800a78e:	bf00      	nop
 800a790:	42c80000 	.word	0x42c80000
 800a794:	41200000 	.word	0x41200000
 800a798:	20000080 	.word	0x20000080
 800a79c:	2000026e 	.word	0x2000026e
 800a7a0:	20000070 	.word	0x20000070
 800a7a4:	0801af5c 	.word	0x0801af5c
 800a7a8:	10624dd3 	.word	0x10624dd3
 800a7ac:	0801af6c 	.word	0x0801af6c

0800a7b0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	2002      	movs	r0, #2
 800a7bc:	f00f fc58 	bl	801a070 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a7c0:	4803      	ldr	r0, [pc, #12]	; (800a7d0 <OnTxTimerEvent+0x20>)
 800a7c2:	f00f fcff 	bl	801a1c4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000164 	.word	0x20000164

0800a7d4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_GREEN) ;
 800a7dc:	2001      	movs	r0, #1
 800a7de:	f7f8 fa1d 	bl	8002c1c <BSP_LED_Off>
}
 800a7e2:	bf00      	nop
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  BSP_LED_Off(LED_BLUE) ;
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	f7f8 fa12 	bl	8002c1c <BSP_LED_Off>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  BSP_LED_Toggle(LED_RED) ;
 800a808:	2002      	movs	r0, #2
 800a80a:	f7f8 fa2b 	bl	8002c64 <BSP_LED_Toggle>
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af04      	add	r7, sp, #16
 800a81e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d044      	beq.n	800a8b0 <OnTxData+0x98>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d040      	beq.n	800a8b0 <OnTxData+0x98>
    {
      BSP_LED_On(LED_GREEN) ;
 800a82e:	2001      	movs	r0, #1
 800a830:	f7f8 f9d0 	bl	8002bd4 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800a834:	4820      	ldr	r0, [pc, #128]	; (800a8b8 <OnTxData+0xa0>)
 800a836:	f00f fcc5 	bl	801a1c4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a83a:	4b20      	ldr	r3, [pc, #128]	; (800a8bc <OnTxData+0xa4>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	2002      	movs	r0, #2
 800a842:	f00f ff37 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	7b12      	ldrb	r2, [r2, #12]
 800a84e:	4611      	mov	r1, r2
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a856:	4610      	mov	r0, r2
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	f992 2014 	ldrsb.w	r2, [r2, #20]
 800a85e:	9203      	str	r2, [sp, #12]
 800a860:	9002      	str	r0, [sp, #8]
 800a862:	9101      	str	r1, [sp, #4]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	4b16      	ldr	r3, [pc, #88]	; (800a8c0 <OnTxData+0xa8>)
 800a868:	2200      	movs	r2, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	2003      	movs	r0, #3
 800a86e:	f00f ff21 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <OnTxData+0xac>)
 800a874:	2200      	movs	r2, #0
 800a876:	2100      	movs	r1, #0
 800a878:	2003      	movs	r0, #3
 800a87a:	f00f ff1b 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	789b      	ldrb	r3, [r3, #2]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d10e      	bne.n	800a8a4 <OnTxData+0x8c>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	78db      	ldrb	r3, [r3, #3]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <OnTxData+0x7a>
 800a88e:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <OnTxData+0xb0>)
 800a890:	e000      	b.n	800a894 <OnTxData+0x7c>
 800a892:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <OnTxData+0xb4>)
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <OnTxData+0xb8>)
 800a898:	2200      	movs	r2, #0
 800a89a:	2100      	movs	r1, #0
 800a89c:	2003      	movs	r0, #3
 800a89e:	f00f ff09 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a8a2:	e005      	b.n	800a8b0 <OnTxData+0x98>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <OnTxData+0xbc>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	2003      	movs	r0, #3
 800a8ac:	f00f ff02 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000270 	.word	0x20000270
 800a8bc:	0801af8c 	.word	0x0801af8c
 800a8c0:	0801afc0 	.word	0x0801afc0
 800a8c4:	0801aff4 	.word	0x0801aff4
 800a8c8:	0801b004 	.word	0x0801b004
 800a8cc:	0801b008 	.word	0x0801b008
 800a8d0:	0801b010 	.word	0x0801b010
 800a8d4:	0801b024 	.word	0x0801b024

0800a8d8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d028      	beq.n	800a938 <OnJoinRequest+0x60>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d11d      	bne.n	800a92c <OnJoinRequest+0x54>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800a8f0:	4813      	ldr	r0, [pc, #76]	; (800a940 <OnJoinRequest+0x68>)
 800a8f2:	f00f fcd5 	bl	801a2a0 <UTIL_TIMER_Stop>
      BSP_LED_Off(LED_RED) ;
 800a8f6:	2002      	movs	r0, #2
 800a8f8:	f7f8 f990 	bl	8002c1c <BSP_LED_Off>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a8fc:	4b11      	ldr	r3, [pc, #68]	; (800a944 <OnJoinRequest+0x6c>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	2002      	movs	r0, #2
 800a904:	f00f fed6 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	789b      	ldrb	r3, [r3, #2]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d106      	bne.n	800a91e <OnJoinRequest+0x46>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a910:	4b0d      	ldr	r3, [pc, #52]	; (800a948 <OnJoinRequest+0x70>)
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	2002      	movs	r0, #2
 800a918:	f00f fecc 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a91c:	e00c      	b.n	800a938 <OnJoinRequest+0x60>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a91e:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <OnJoinRequest+0x74>)
 800a920:	2200      	movs	r2, #0
 800a922:	2100      	movs	r1, #0
 800a924:	2002      	movs	r0, #2
 800a926:	f00f fec5 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a92a:	e005      	b.n	800a938 <OnJoinRequest+0x60>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a92c:	4b08      	ldr	r3, [pc, #32]	; (800a950 <OnJoinRequest+0x78>)
 800a92e:	2200      	movs	r2, #0
 800a930:	2100      	movs	r1, #0
 800a932:	2002      	movs	r0, #2
 800a934:	f00f febe 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	200002a0 	.word	0x200002a0
 800a944:	0801b034 	.word	0x0801b034
 800a948:	0801b04c 	.word	0x0801b04c
 800a94c:	0801b06c 	.word	0x0801b06c
 800a950:	0801b08c 	.word	0x0801b08c

0800a954 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a958:	2100      	movs	r1, #0
 800a95a:	2001      	movs	r0, #1
 800a95c:	f00f fb88 	bl	801a070 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a960:	bf00      	nop
 800a962:	bd80      	pop	{r7, pc}

0800a964 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a96e:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a970:	2200      	movs	r2, #0
 800a972:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a974:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a976:	2200      	movs	r2, #0
 800a978:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a97a:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800a980:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f043 0320 	orr.w	r3, r3, #32
 800a988:	4a0d      	ldr	r2, [pc, #52]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a98a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a98c:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10c      	bne.n	800a9ae <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a994:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <LoraInfo_Init+0x60>)
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	2000      	movs	r0, #0
 800a99c:	f00f fe8a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a9a0:	bf00      	nop
 800a9a2:	f00f fe75 	bl	801a690 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d1fa      	bne.n	800a9a2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a9ac:	e7fe      	b.n	800a9ac <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a9ae:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a9b4:	4b02      	ldr	r3, [pc, #8]	; (800a9c0 <LoraInfo_Init+0x5c>)
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a9ba:	bf00      	nop
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	200002b8 	.word	0x200002b8
 800a9c4:	0801b0e4 	.word	0x0801b0e4

0800a9c8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <LoraInfo_GetPtr+0x10>)
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bc80      	pop	{r7}
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	200002b8 	.word	0x200002b8

0800a9dc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800a9e0:	f7f8 f9f5 	bl	8002dce <BSP_RADIO_Init>
 800a9e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7f8 fa1a 	bl	8002e30 <BSP_RADIO_ConfigRFSwitch>
 800a9fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800aa0a:	f7f8 fa5f 	bl	8002ecc <BSP_RADIO_GetTxConfig>
 800aa0e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800aa18:	f7f8 fa5f 	bl	8002eda <BSP_RADIO_IsTCXO>
 800aa1c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800aa26:	f7f8 fa5f 	bl	8002ee8 <BSP_RADIO_IsDCDC>
 800aa2a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	33f1      	adds	r3, #241	; 0xf1
 800aa3c:	2210      	movs	r2, #16
 800aa3e:	2100      	movs	r1, #0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f00b fd57 	bl	80164f4 <memset1>
    ctx->M_n = 0;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	22f0      	movs	r2, #240	; 0xf0
 800aa52:	2100      	movs	r1, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f00b fd4d 	bl	80164f4 <memset1>
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	2110      	movs	r1, #16
 800aa72:	6838      	ldr	r0, [r7, #0]
 800aa74:	f000 fe60 	bl	800b738 <lorawan_aes_set_key>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08c      	sub	sp, #48	; 0x30
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80a1 	beq.w	800abda <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aa9e:	f1c3 0310 	rsb	r3, r3, #16
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	bf28      	it	cs
 800aaa8:	4613      	movcs	r3, r2
 800aaaa:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f203 1201 	addw	r2, r3, #257	; 0x101
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aab8:	4413      	add	r3, r2
 800aaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabc:	b292      	uxth	r2, r2
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f00b fcdc 	bl	801647e <memcpy1>
        ctx->M_n += mlen;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	441a      	add	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aadc:	2b0f      	cmp	r3, #15
 800aade:	f240 808d 	bls.w	800abfc <AES_CMAC_Update+0x17c>
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	429a      	cmp	r2, r3
 800aae8:	f000 8088 	beq.w	800abfc <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aaec:	2300      	movs	r3, #0
 800aaee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaf0:	e015      	b.n	800ab1e <AES_CMAC_Update+0x9e>
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf6:	4413      	add	r3, r2
 800aaf8:	33f1      	adds	r3, #241	; 0xf1
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	440b      	add	r3, r1
 800ab02:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	4053      	eors	r3, r2
 800ab0a:	b2d9      	uxtb	r1, r3
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	4413      	add	r3, r2
 800ab12:	33f1      	adds	r3, #241	; 0xf1
 800ab14:	460a      	mov	r2, r1
 800ab16:	701a      	strb	r2, [r3, #0]
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	dde6      	ble.n	800aaf2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	2210      	movs	r2, #16
 800ab30:	4618      	mov	r0, r3
 800ab32:	f00b fca4 	bl	801647e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	f107 0114 	add.w	r1, r7, #20
 800ab3c:	f107 0314 	add.w	r3, r7, #20
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fed7 	bl	800b8f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	33f1      	adds	r3, #241	; 0xf1
 800ab4a:	f107 0114 	add.w	r1, r7, #20
 800ab4e:	2210      	movs	r2, #16
 800ab50:	4618      	mov	r0, r3
 800ab52:	f00b fc94 	bl	801647e <memcpy1>

        data += mlen;
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	4413      	add	r3, r2
 800ab5c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ab66:	e038      	b.n	800abda <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab6c:	e013      	b.n	800ab96 <AES_CMAC_Update+0x116>
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	4413      	add	r3, r2
 800ab74:	33f1      	adds	r3, #241	; 0xf1
 800ab76:	781a      	ldrb	r2, [r3, #0]
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	68b9      	ldr	r1, [r7, #8]
 800ab7c:	440b      	add	r3, r1
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	4053      	eors	r3, r2
 800ab82:	b2d9      	uxtb	r1, r3
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	4413      	add	r3, r2
 800ab8a:	33f1      	adds	r3, #241	; 0xf1
 800ab8c:	460a      	mov	r2, r1
 800ab8e:	701a      	strb	r2, [r3, #0]
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	3301      	adds	r3, #1
 800ab94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	2b0f      	cmp	r3, #15
 800ab9a:	dde8      	ble.n	800ab6e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aba2:	f107 0314 	add.w	r3, r7, #20
 800aba6:	2210      	movs	r2, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	f00b fc68 	bl	801647e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f107 0114 	add.w	r1, r7, #20
 800abb4:	f107 0314 	add.w	r3, r7, #20
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fe9b 	bl	800b8f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	33f1      	adds	r3, #241	; 0xf1
 800abc2:	f107 0114 	add.w	r1, r7, #20
 800abc6:	2210      	movs	r2, #16
 800abc8:	4618      	mov	r0, r3
 800abca:	f00b fc58 	bl	801647e <memcpy1>

        data += 16;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	3310      	adds	r3, #16
 800abd2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3b10      	subs	r3, #16
 800abd8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d8c3      	bhi.n	800ab68 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	b292      	uxth	r2, r2
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f00b fc46 	bl	801647e <memcpy1>
    ctx->M_n = len;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800abfa:	e000      	b.n	800abfe <AES_CMAC_Update+0x17e>
            return;
 800abfc:	bf00      	nop
}
 800abfe:	3730      	adds	r7, #48	; 0x30
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b092      	sub	sp, #72	; 0x48
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ac0e:	f107 031c 	add.w	r3, r7, #28
 800ac12:	2210      	movs	r2, #16
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f00b fc6c 	bl	80164f4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	f107 011c 	add.w	r1, r7, #28
 800ac22:	f107 031c 	add.w	r3, r7, #28
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fe64 	bl	800b8f4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ac2c:	7f3b      	ldrb	r3, [r7, #28]
 800ac2e:	b25b      	sxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	da31      	bge.n	800ac98 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 800ac34:	2300      	movs	r3, #0
 800ac36:	647b      	str	r3, [r7, #68]	; 0x44
 800ac38:	e01c      	b.n	800ac74 <AES_CMAC_Final+0x70>
 800ac3a:	f107 021c 	add.w	r2, r7, #28
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac40:	4413      	add	r3, r2
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	b25a      	sxtb	r2, r3
 800ac48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac50:	440b      	add	r3, r1
 800ac52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac56:	09db      	lsrs	r3, r3, #7
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	b25b      	sxtb	r3, r3
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	b25b      	sxtb	r3, r3
 800ac60:	b2d9      	uxtb	r1, r3
 800ac62:	f107 021c 	add.w	r2, r7, #28
 800ac66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac68:	4413      	add	r3, r2
 800ac6a:	460a      	mov	r2, r1
 800ac6c:	701a      	strb	r2, [r3, #0]
 800ac6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac70:	3301      	adds	r3, #1
 800ac72:	647b      	str	r3, [r7, #68]	; 0x44
 800ac74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac76:	2b0e      	cmp	r3, #14
 800ac78:	dddf      	ble.n	800ac3a <AES_CMAC_Final+0x36>
 800ac7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ac86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac8a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac96:	e028      	b.n	800acea <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 800ac98:	2300      	movs	r3, #0
 800ac9a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac9c:	e01c      	b.n	800acd8 <AES_CMAC_Final+0xd4>
 800ac9e:	f107 021c 	add.w	r2, r7, #28
 800aca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca4:	4413      	add	r3, r2
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	b25a      	sxtb	r2, r3
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	3301      	adds	r3, #1
 800acb0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800acb4:	440b      	add	r3, r1
 800acb6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acba:	09db      	lsrs	r3, r3, #7
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	b25b      	sxtb	r3, r3
 800acc0:	4313      	orrs	r3, r2
 800acc2:	b25b      	sxtb	r3, r3
 800acc4:	b2d9      	uxtb	r1, r3
 800acc6:	f107 021c 	add.w	r2, r7, #28
 800acca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800accc:	4413      	add	r3, r2
 800acce:	460a      	mov	r2, r1
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd4:	3301      	adds	r3, #1
 800acd6:	643b      	str	r3, [r7, #64]	; 0x40
 800acd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acda:	2b0e      	cmp	r3, #14
 800acdc:	dddf      	ble.n	800ac9e <AES_CMAC_Final+0x9a>
 800acde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d11d      	bne.n	800ad30 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf8:	e016      	b.n	800ad28 <AES_CMAC_Final+0x124>
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfe:	4413      	add	r3, r2
 800ad00:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad04:	781a      	ldrb	r2, [r3, #0]
 800ad06:	f107 011c 	add.w	r1, r7, #28
 800ad0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0c:	440b      	add	r3, r1
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	4053      	eors	r3, r2
 800ad12:	b2d9      	uxtb	r1, r3
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad18:	4413      	add	r3, r2
 800ad1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ad1e:	460a      	mov	r2, r1
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad24:	3301      	adds	r3, #1
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2a:	2b0f      	cmp	r3, #15
 800ad2c:	dde5      	ble.n	800acfa <AES_CMAC_Final+0xf6>
 800ad2e:	e098      	b.n	800ae62 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ad30:	7f3b      	ldrb	r3, [r7, #28]
 800ad32:	b25b      	sxtb	r3, r3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	da31      	bge.n	800ad9c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad3c:	e01c      	b.n	800ad78 <AES_CMAC_Final+0x174>
 800ad3e:	f107 021c 	add.w	r2, r7, #28
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	4413      	add	r3, r2
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	b25a      	sxtb	r2, r3
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4e:	3301      	adds	r3, #1
 800ad50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ad54:	440b      	add	r3, r1
 800ad56:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ad5a:	09db      	lsrs	r3, r3, #7
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	b25b      	sxtb	r3, r3
 800ad60:	4313      	orrs	r3, r2
 800ad62:	b25b      	sxtb	r3, r3
 800ad64:	b2d9      	uxtb	r1, r3
 800ad66:	f107 021c 	add.w	r2, r7, #28
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	4413      	add	r3, r2
 800ad6e:	460a      	mov	r2, r1
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	3301      	adds	r3, #1
 800ad76:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	2b0e      	cmp	r3, #14
 800ad7c:	dddf      	ble.n	800ad3e <AES_CMAC_Final+0x13a>
 800ad7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ad8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad8e:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ad92:	43db      	mvns	r3, r3
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad9a:	e028      	b.n	800adee <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
 800ada0:	e01c      	b.n	800addc <AES_CMAC_Final+0x1d8>
 800ada2:	f107 021c 	add.w	r2, r7, #28
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	4413      	add	r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	b25a      	sxtb	r2, r3
 800adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb2:	3301      	adds	r3, #1
 800adb4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800adb8:	440b      	add	r3, r1
 800adba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800adbe:	09db      	lsrs	r3, r3, #7
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	b25b      	sxtb	r3, r3
 800adc4:	4313      	orrs	r3, r2
 800adc6:	b25b      	sxtb	r3, r3
 800adc8:	b2d9      	uxtb	r1, r3
 800adca:	f107 021c 	add.w	r2, r7, #28
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	4413      	add	r3, r2
 800add2:	460a      	mov	r2, r1
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add8:	3301      	adds	r3, #1
 800adda:	637b      	str	r3, [r7, #52]	; 0x34
 800addc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adde:	2b0e      	cmp	r3, #14
 800ade0:	dddf      	ble.n	800ada2 <AES_CMAC_Final+0x19e>
 800ade2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	4413      	add	r3, r2
 800adf8:	2280      	movs	r2, #128	; 0x80
 800adfa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800adfe:	e007      	b.n	800ae10 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	4413      	add	r3, r2
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ae24:	2b0f      	cmp	r3, #15
 800ae26:	d9eb      	bls.n	800ae00 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800ae28:	2300      	movs	r3, #0
 800ae2a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae2c:	e016      	b.n	800ae5c <AES_CMAC_Final+0x258>
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	4413      	add	r3, r2
 800ae34:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	f107 011c 	add.w	r1, r7, #28
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	440b      	add	r3, r1
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	4053      	eors	r3, r2
 800ae46:	b2d9      	uxtb	r1, r3
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae52:	460a      	mov	r2, r1
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	3301      	adds	r3, #1
 800ae5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	2b0f      	cmp	r3, #15
 800ae60:	dde5      	ble.n	800ae2e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800ae62:	2300      	movs	r3, #0
 800ae64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae66:	e015      	b.n	800ae94 <AES_CMAC_Final+0x290>
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6c:	4413      	add	r3, r2
 800ae6e:	33f1      	adds	r3, #241	; 0xf1
 800ae70:	781a      	ldrb	r2, [r3, #0]
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	440b      	add	r3, r1
 800ae78:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	4053      	eors	r3, r2
 800ae80:	b2d9      	uxtb	r1, r3
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae86:	4413      	add	r3, r2
 800ae88:	33f1      	adds	r3, #241	; 0xf1
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	3301      	adds	r3, #1
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	2b0f      	cmp	r3, #15
 800ae98:	dde6      	ble.n	800ae68 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800aea0:	f107 030c 	add.w	r3, r7, #12
 800aea4:	2210      	movs	r2, #16
 800aea6:	4618      	mov	r0, r3
 800aea8:	f00b fae9 	bl	801647e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	f107 030c 	add.w	r3, r7, #12
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fd1d 	bl	800b8f4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800aeba:	f107 031c 	add.w	r3, r7, #28
 800aebe:	2210      	movs	r2, #16
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f00b fb16 	bl	80164f4 <memset1>
}
 800aec8:	bf00      	nop
 800aeca:	3748      	adds	r7, #72	; 0x48
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3301      	adds	r3, #1
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	7852      	ldrb	r2, [r2, #1]
 800aeea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3302      	adds	r3, #2
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	7892      	ldrb	r2, [r2, #2]
 800aef4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3303      	adds	r3, #3
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	78d2      	ldrb	r2, [r2, #3]
 800aefe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3304      	adds	r3, #4
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	7912      	ldrb	r2, [r2, #4]
 800af08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3305      	adds	r3, #5
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	7952      	ldrb	r2, [r2, #5]
 800af12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3306      	adds	r3, #6
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	7992      	ldrb	r2, [r2, #6]
 800af1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	3307      	adds	r3, #7
 800af22:	683a      	ldr	r2, [r7, #0]
 800af24:	79d2      	ldrb	r2, [r2, #7]
 800af26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3308      	adds	r3, #8
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	7a12      	ldrb	r2, [r2, #8]
 800af30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3309      	adds	r3, #9
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	7a52      	ldrb	r2, [r2, #9]
 800af3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	330a      	adds	r3, #10
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	7a92      	ldrb	r2, [r2, #10]
 800af44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	330b      	adds	r3, #11
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	7ad2      	ldrb	r2, [r2, #11]
 800af4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	330c      	adds	r3, #12
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	7b12      	ldrb	r2, [r2, #12]
 800af58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	330d      	adds	r3, #13
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	7b52      	ldrb	r2, [r2, #13]
 800af62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	330e      	adds	r3, #14
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	7b92      	ldrb	r2, [r2, #14]
 800af6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	330f      	adds	r3, #15
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	7bd2      	ldrb	r2, [r2, #15]
 800af76:	701a      	strb	r2, [r3, #0]
#endif
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	4613      	mov	r3, r2
 800af8e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800af90:	e007      	b.n	800afa2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	1c53      	adds	r3, r2, #1
 800af96:	60bb      	str	r3, [r7, #8]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	1c59      	adds	r1, r3, #1
 800af9c:	60f9      	str	r1, [r7, #12]
 800af9e:	7812      	ldrb	r2, [r2, #0]
 800afa0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	1e5a      	subs	r2, r3, #1
 800afa6:	71fa      	strb	r2, [r7, #7]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1f2      	bne.n	800af92 <copy_block_nn+0x10>
}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr

0800afb8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	781a      	ldrb	r2, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	4053      	eors	r3, r2
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3301      	adds	r3, #1
 800afd6:	7819      	ldrb	r1, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	3301      	adds	r3, #1
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3301      	adds	r3, #1
 800afe2:	404a      	eors	r2, r1
 800afe4:	b2d2      	uxtb	r2, r2
 800afe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	3302      	adds	r3, #2
 800afec:	7819      	ldrb	r1, [r3, #0]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	3302      	adds	r3, #2
 800aff2:	781a      	ldrb	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	3302      	adds	r3, #2
 800aff8:	404a      	eors	r2, r1
 800affa:	b2d2      	uxtb	r2, r2
 800affc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3303      	adds	r3, #3
 800b002:	7819      	ldrb	r1, [r3, #0]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	3303      	adds	r3, #3
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3303      	adds	r3, #3
 800b00e:	404a      	eors	r2, r1
 800b010:	b2d2      	uxtb	r2, r2
 800b012:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3304      	adds	r3, #4
 800b018:	7819      	ldrb	r1, [r3, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	3304      	adds	r3, #4
 800b01e:	781a      	ldrb	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3304      	adds	r3, #4
 800b024:	404a      	eors	r2, r1
 800b026:	b2d2      	uxtb	r2, r2
 800b028:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3305      	adds	r3, #5
 800b02e:	7819      	ldrb	r1, [r3, #0]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	3305      	adds	r3, #5
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3305      	adds	r3, #5
 800b03a:	404a      	eors	r2, r1
 800b03c:	b2d2      	uxtb	r2, r2
 800b03e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3306      	adds	r3, #6
 800b044:	7819      	ldrb	r1, [r3, #0]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	3306      	adds	r3, #6
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3306      	adds	r3, #6
 800b050:	404a      	eors	r2, r1
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3307      	adds	r3, #7
 800b05a:	7819      	ldrb	r1, [r3, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	3307      	adds	r3, #7
 800b060:	781a      	ldrb	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3307      	adds	r3, #7
 800b066:	404a      	eors	r2, r1
 800b068:	b2d2      	uxtb	r2, r2
 800b06a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3308      	adds	r3, #8
 800b070:	7819      	ldrb	r1, [r3, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	3308      	adds	r3, #8
 800b076:	781a      	ldrb	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3308      	adds	r3, #8
 800b07c:	404a      	eors	r2, r1
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3309      	adds	r3, #9
 800b086:	7819      	ldrb	r1, [r3, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	3309      	adds	r3, #9
 800b08c:	781a      	ldrb	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3309      	adds	r3, #9
 800b092:	404a      	eors	r2, r1
 800b094:	b2d2      	uxtb	r2, r2
 800b096:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	330a      	adds	r3, #10
 800b09c:	7819      	ldrb	r1, [r3, #0]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	330a      	adds	r3, #10
 800b0a2:	781a      	ldrb	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	330a      	adds	r3, #10
 800b0a8:	404a      	eors	r2, r1
 800b0aa:	b2d2      	uxtb	r2, r2
 800b0ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	330b      	adds	r3, #11
 800b0b2:	7819      	ldrb	r1, [r3, #0]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	330b      	adds	r3, #11
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	330b      	adds	r3, #11
 800b0be:	404a      	eors	r2, r1
 800b0c0:	b2d2      	uxtb	r2, r2
 800b0c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	330c      	adds	r3, #12
 800b0c8:	7819      	ldrb	r1, [r3, #0]
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	781a      	ldrb	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	330c      	adds	r3, #12
 800b0d4:	404a      	eors	r2, r1
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	330d      	adds	r3, #13
 800b0de:	7819      	ldrb	r1, [r3, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	330d      	adds	r3, #13
 800b0e4:	781a      	ldrb	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	330d      	adds	r3, #13
 800b0ea:	404a      	eors	r2, r1
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	330e      	adds	r3, #14
 800b0f4:	7819      	ldrb	r1, [r3, #0]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	330e      	adds	r3, #14
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	330e      	adds	r3, #14
 800b100:	404a      	eors	r2, r1
 800b102:	b2d2      	uxtb	r2, r2
 800b104:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	330f      	adds	r3, #15
 800b10a:	7819      	ldrb	r1, [r3, #0]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	330f      	adds	r3, #15
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	330f      	adds	r3, #15
 800b116:	404a      	eors	r2, r1
 800b118:	b2d2      	uxtb	r2, r2
 800b11a:	701a      	strb	r2, [r3, #0]
#endif
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr

0800b126 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	60f8      	str	r0, [r7, #12]
 800b12e:	60b9      	str	r1, [r7, #8]
 800b130:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	781a      	ldrb	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	4053      	eors	r3, r2
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3301      	adds	r3, #1
 800b146:	7819      	ldrb	r1, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3301      	adds	r3, #1
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3301      	adds	r3, #1
 800b152:	404a      	eors	r2, r1
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	3302      	adds	r3, #2
 800b15c:	7819      	ldrb	r1, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3302      	adds	r3, #2
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3302      	adds	r3, #2
 800b168:	404a      	eors	r2, r1
 800b16a:	b2d2      	uxtb	r2, r2
 800b16c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	3303      	adds	r3, #3
 800b172:	7819      	ldrb	r1, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3303      	adds	r3, #3
 800b178:	781a      	ldrb	r2, [r3, #0]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3303      	adds	r3, #3
 800b17e:	404a      	eors	r2, r1
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3304      	adds	r3, #4
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3304      	adds	r3, #4
 800b18e:	781a      	ldrb	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3304      	adds	r3, #4
 800b194:	404a      	eors	r2, r1
 800b196:	b2d2      	uxtb	r2, r2
 800b198:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	3305      	adds	r3, #5
 800b19e:	7819      	ldrb	r1, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3305      	adds	r3, #5
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3305      	adds	r3, #5
 800b1aa:	404a      	eors	r2, r1
 800b1ac:	b2d2      	uxtb	r2, r2
 800b1ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3306      	adds	r3, #6
 800b1b4:	7819      	ldrb	r1, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3306      	adds	r3, #6
 800b1ba:	781a      	ldrb	r2, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3306      	adds	r3, #6
 800b1c0:	404a      	eors	r2, r1
 800b1c2:	b2d2      	uxtb	r2, r2
 800b1c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3307      	adds	r3, #7
 800b1ca:	7819      	ldrb	r1, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3307      	adds	r3, #7
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3307      	adds	r3, #7
 800b1d6:	404a      	eors	r2, r1
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	7819      	ldrb	r1, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	404a      	eors	r2, r1
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	3309      	adds	r3, #9
 800b1f6:	7819      	ldrb	r1, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3309      	adds	r3, #9
 800b1fc:	781a      	ldrb	r2, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3309      	adds	r3, #9
 800b202:	404a      	eors	r2, r1
 800b204:	b2d2      	uxtb	r2, r2
 800b206:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	330a      	adds	r3, #10
 800b20c:	7819      	ldrb	r1, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	330a      	adds	r3, #10
 800b212:	781a      	ldrb	r2, [r3, #0]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	330a      	adds	r3, #10
 800b218:	404a      	eors	r2, r1
 800b21a:	b2d2      	uxtb	r2, r2
 800b21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	330b      	adds	r3, #11
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	330b      	adds	r3, #11
 800b228:	781a      	ldrb	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	330b      	adds	r3, #11
 800b22e:	404a      	eors	r2, r1
 800b230:	b2d2      	uxtb	r2, r2
 800b232:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	330c      	adds	r3, #12
 800b238:	7819      	ldrb	r1, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	330c      	adds	r3, #12
 800b23e:	781a      	ldrb	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	330c      	adds	r3, #12
 800b244:	404a      	eors	r2, r1
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330d      	adds	r3, #13
 800b24e:	7819      	ldrb	r1, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	330d      	adds	r3, #13
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	330d      	adds	r3, #13
 800b25a:	404a      	eors	r2, r1
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	330e      	adds	r3, #14
 800b264:	7819      	ldrb	r1, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	330e      	adds	r3, #14
 800b26a:	781a      	ldrb	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	330e      	adds	r3, #14
 800b270:	404a      	eors	r2, r1
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	330f      	adds	r3, #15
 800b27a:	7819      	ldrb	r1, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	330f      	adds	r3, #15
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	330f      	adds	r3, #15
 800b286:	404a      	eors	r2, r1
 800b288:	b2d2      	uxtb	r2, r2
 800b28a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b28c:	bf00      	nop
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff fe88 	bl	800afb8 <xor_block>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b48      	ldr	r3, [pc, #288]	; (800b3e0 <shift_sub_rows+0x130>)
 800b2c0:	5c9a      	ldrb	r2, [r3, r2]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4a43      	ldr	r2, [pc, #268]	; (800b3e0 <shift_sub_rows+0x130>)
 800b2d4:	5c52      	ldrb	r2, [r2, r1]
 800b2d6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	4a3e      	ldr	r2, [pc, #248]	; (800b3e0 <shift_sub_rows+0x130>)
 800b2e6:	5c52      	ldrb	r2, [r2, r1]
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	330c      	adds	r3, #12
 800b2f6:	4a3a      	ldr	r2, [pc, #232]	; (800b3e0 <shift_sub_rows+0x130>)
 800b2f8:	5c52      	ldrb	r2, [r2, r1]
 800b2fa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	785b      	ldrb	r3, [r3, #1]
 800b300:	73fb      	strb	r3, [r7, #15]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3305      	adds	r3, #5
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4619      	mov	r1, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3301      	adds	r3, #1
 800b30e:	4a34      	ldr	r2, [pc, #208]	; (800b3e0 <shift_sub_rows+0x130>)
 800b310:	5c52      	ldrb	r2, [r2, r1]
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3309      	adds	r3, #9
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	4619      	mov	r1, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3305      	adds	r3, #5
 800b320:	4a2f      	ldr	r2, [pc, #188]	; (800b3e0 <shift_sub_rows+0x130>)
 800b322:	5c52      	ldrb	r2, [r2, r1]
 800b324:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	330d      	adds	r3, #13
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	4619      	mov	r1, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3309      	adds	r3, #9
 800b332:	4a2b      	ldr	r2, [pc, #172]	; (800b3e0 <shift_sub_rows+0x130>)
 800b334:	5c52      	ldrb	r2, [r2, r1]
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	330d      	adds	r3, #13
 800b33e:	4928      	ldr	r1, [pc, #160]	; (800b3e0 <shift_sub_rows+0x130>)
 800b340:	5c8a      	ldrb	r2, [r1, r2]
 800b342:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	789b      	ldrb	r3, [r3, #2]
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	330a      	adds	r3, #10
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	4619      	mov	r1, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3302      	adds	r3, #2
 800b356:	4a22      	ldr	r2, [pc, #136]	; (800b3e0 <shift_sub_rows+0x130>)
 800b358:	5c52      	ldrb	r2, [r2, r1]
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	7bfa      	ldrb	r2, [r7, #15]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	330a      	adds	r3, #10
 800b362:	491f      	ldr	r1, [pc, #124]	; (800b3e0 <shift_sub_rows+0x130>)
 800b364:	5c8a      	ldrb	r2, [r1, r2]
 800b366:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	799b      	ldrb	r3, [r3, #6]
 800b36c:	73fb      	strb	r3, [r7, #15]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	330e      	adds	r3, #14
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	4619      	mov	r1, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3306      	adds	r3, #6
 800b37a:	4a19      	ldr	r2, [pc, #100]	; (800b3e0 <shift_sub_rows+0x130>)
 800b37c:	5c52      	ldrb	r2, [r2, r1]
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	330e      	adds	r3, #14
 800b386:	4916      	ldr	r1, [pc, #88]	; (800b3e0 <shift_sub_rows+0x130>)
 800b388:	5c8a      	ldrb	r2, [r1, r2]
 800b38a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7bdb      	ldrb	r3, [r3, #15]
 800b390:	73fb      	strb	r3, [r7, #15]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	330b      	adds	r3, #11
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	4619      	mov	r1, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	330f      	adds	r3, #15
 800b39e:	4a10      	ldr	r2, [pc, #64]	; (800b3e0 <shift_sub_rows+0x130>)
 800b3a0:	5c52      	ldrb	r2, [r2, r1]
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3307      	adds	r3, #7
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	330b      	adds	r3, #11
 800b3b0:	4a0b      	ldr	r2, [pc, #44]	; (800b3e0 <shift_sub_rows+0x130>)
 800b3b2:	5c52      	ldrb	r2, [r2, r1]
 800b3b4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3303      	adds	r3, #3
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3307      	adds	r3, #7
 800b3c2:	4a07      	ldr	r2, [pc, #28]	; (800b3e0 <shift_sub_rows+0x130>)
 800b3c4:	5c52      	ldrb	r2, [r2, r1]
 800b3c6:	701a      	strb	r2, [r3, #0]
 800b3c8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3303      	adds	r3, #3
 800b3ce:	4904      	ldr	r1, [pc, #16]	; (800b3e0 <shift_sub_rows+0x130>)
 800b3d0:	5c8a      	ldrb	r2, [r1, r2]
 800b3d2:	701a      	strb	r2, [r3, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bc80      	pop	{r7}
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	0801b720 	.word	0x0801b720

0800b3e4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b3ec:	f107 0308 	add.w	r3, r7, #8
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff fd6c 	bl	800aed0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b3f8:	7a3b      	ldrb	r3, [r7, #8]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4b9a      	ldr	r3, [pc, #616]	; (800b668 <mix_sub_columns+0x284>)
 800b3fe:	5c9a      	ldrb	r2, [r3, r2]
 800b400:	7b7b      	ldrb	r3, [r7, #13]
 800b402:	4619      	mov	r1, r3
 800b404:	4b99      	ldr	r3, [pc, #612]	; (800b66c <mix_sub_columns+0x288>)
 800b406:	5c5b      	ldrb	r3, [r3, r1]
 800b408:	4053      	eors	r3, r2
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	7cbb      	ldrb	r3, [r7, #18]
 800b40e:	4619      	mov	r1, r3
 800b410:	4b97      	ldr	r3, [pc, #604]	; (800b670 <mix_sub_columns+0x28c>)
 800b412:	5c5b      	ldrb	r3, [r3, r1]
 800b414:	4053      	eors	r3, r2
 800b416:	b2da      	uxtb	r2, r3
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	4619      	mov	r1, r3
 800b41c:	4b94      	ldr	r3, [pc, #592]	; (800b670 <mix_sub_columns+0x28c>)
 800b41e:	5c5b      	ldrb	r3, [r3, r1]
 800b420:	4053      	eors	r3, r2
 800b422:	b2da      	uxtb	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b428:	7a3b      	ldrb	r3, [r7, #8]
 800b42a:	461a      	mov	r2, r3
 800b42c:	4b90      	ldr	r3, [pc, #576]	; (800b670 <mix_sub_columns+0x28c>)
 800b42e:	5c9a      	ldrb	r2, [r3, r2]
 800b430:	7b7b      	ldrb	r3, [r7, #13]
 800b432:	4619      	mov	r1, r3
 800b434:	4b8c      	ldr	r3, [pc, #560]	; (800b668 <mix_sub_columns+0x284>)
 800b436:	5c5b      	ldrb	r3, [r3, r1]
 800b438:	4053      	eors	r3, r2
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	7cbb      	ldrb	r3, [r7, #18]
 800b43e:	4619      	mov	r1, r3
 800b440:	4b8a      	ldr	r3, [pc, #552]	; (800b66c <mix_sub_columns+0x288>)
 800b442:	5c5b      	ldrb	r3, [r3, r1]
 800b444:	4053      	eors	r3, r2
 800b446:	b2d9      	uxtb	r1, r3
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	461a      	mov	r2, r3
 800b44c:	4b88      	ldr	r3, [pc, #544]	; (800b670 <mix_sub_columns+0x28c>)
 800b44e:	5c9a      	ldrb	r2, [r3, r2]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3301      	adds	r3, #1
 800b454:	404a      	eors	r2, r1
 800b456:	b2d2      	uxtb	r2, r2
 800b458:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b45a:	7a3b      	ldrb	r3, [r7, #8]
 800b45c:	461a      	mov	r2, r3
 800b45e:	4b84      	ldr	r3, [pc, #528]	; (800b670 <mix_sub_columns+0x28c>)
 800b460:	5c9a      	ldrb	r2, [r3, r2]
 800b462:	7b7b      	ldrb	r3, [r7, #13]
 800b464:	4619      	mov	r1, r3
 800b466:	4b82      	ldr	r3, [pc, #520]	; (800b670 <mix_sub_columns+0x28c>)
 800b468:	5c5b      	ldrb	r3, [r3, r1]
 800b46a:	4053      	eors	r3, r2
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	7cbb      	ldrb	r3, [r7, #18]
 800b470:	4619      	mov	r1, r3
 800b472:	4b7d      	ldr	r3, [pc, #500]	; (800b668 <mix_sub_columns+0x284>)
 800b474:	5c5b      	ldrb	r3, [r3, r1]
 800b476:	4053      	eors	r3, r2
 800b478:	b2d9      	uxtb	r1, r3
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	461a      	mov	r2, r3
 800b47e:	4b7b      	ldr	r3, [pc, #492]	; (800b66c <mix_sub_columns+0x288>)
 800b480:	5c9a      	ldrb	r2, [r3, r2]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	3302      	adds	r3, #2
 800b486:	404a      	eors	r2, r1
 800b488:	b2d2      	uxtb	r2, r2
 800b48a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b48c:	7a3b      	ldrb	r3, [r7, #8]
 800b48e:	461a      	mov	r2, r3
 800b490:	4b76      	ldr	r3, [pc, #472]	; (800b66c <mix_sub_columns+0x288>)
 800b492:	5c9a      	ldrb	r2, [r3, r2]
 800b494:	7b7b      	ldrb	r3, [r7, #13]
 800b496:	4619      	mov	r1, r3
 800b498:	4b75      	ldr	r3, [pc, #468]	; (800b670 <mix_sub_columns+0x28c>)
 800b49a:	5c5b      	ldrb	r3, [r3, r1]
 800b49c:	4053      	eors	r3, r2
 800b49e:	b2da      	uxtb	r2, r3
 800b4a0:	7cbb      	ldrb	r3, [r7, #18]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4b72      	ldr	r3, [pc, #456]	; (800b670 <mix_sub_columns+0x28c>)
 800b4a6:	5c5b      	ldrb	r3, [r3, r1]
 800b4a8:	4053      	eors	r3, r2
 800b4aa:	b2d9      	uxtb	r1, r3
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	4b6d      	ldr	r3, [pc, #436]	; (800b668 <mix_sub_columns+0x284>)
 800b4b2:	5c9a      	ldrb	r2, [r3, r2]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3303      	adds	r3, #3
 800b4b8:	404a      	eors	r2, r1
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b4be:	7b3b      	ldrb	r3, [r7, #12]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b69      	ldr	r3, [pc, #420]	; (800b668 <mix_sub_columns+0x284>)
 800b4c4:	5c9a      	ldrb	r2, [r3, r2]
 800b4c6:	7c7b      	ldrb	r3, [r7, #17]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	4b68      	ldr	r3, [pc, #416]	; (800b66c <mix_sub_columns+0x288>)
 800b4cc:	5c5b      	ldrb	r3, [r3, r1]
 800b4ce:	4053      	eors	r3, r2
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	7dbb      	ldrb	r3, [r7, #22]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4b66      	ldr	r3, [pc, #408]	; (800b670 <mix_sub_columns+0x28c>)
 800b4d8:	5c5b      	ldrb	r3, [r3, r1]
 800b4da:	4053      	eors	r3, r2
 800b4dc:	b2d9      	uxtb	r1, r3
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4b63      	ldr	r3, [pc, #396]	; (800b670 <mix_sub_columns+0x28c>)
 800b4e4:	5c9a      	ldrb	r2, [r3, r2]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	404a      	eors	r2, r1
 800b4ec:	b2d2      	uxtb	r2, r2
 800b4ee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b4f0:	7b3b      	ldrb	r3, [r7, #12]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	4b5e      	ldr	r3, [pc, #376]	; (800b670 <mix_sub_columns+0x28c>)
 800b4f6:	5c9a      	ldrb	r2, [r3, r2]
 800b4f8:	7c7b      	ldrb	r3, [r7, #17]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4b5a      	ldr	r3, [pc, #360]	; (800b668 <mix_sub_columns+0x284>)
 800b4fe:	5c5b      	ldrb	r3, [r3, r1]
 800b500:	4053      	eors	r3, r2
 800b502:	b2da      	uxtb	r2, r3
 800b504:	7dbb      	ldrb	r3, [r7, #22]
 800b506:	4619      	mov	r1, r3
 800b508:	4b58      	ldr	r3, [pc, #352]	; (800b66c <mix_sub_columns+0x288>)
 800b50a:	5c5b      	ldrb	r3, [r3, r1]
 800b50c:	4053      	eors	r3, r2
 800b50e:	b2d9      	uxtb	r1, r3
 800b510:	7afb      	ldrb	r3, [r7, #11]
 800b512:	461a      	mov	r2, r3
 800b514:	4b56      	ldr	r3, [pc, #344]	; (800b670 <mix_sub_columns+0x28c>)
 800b516:	5c9a      	ldrb	r2, [r3, r2]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3305      	adds	r3, #5
 800b51c:	404a      	eors	r2, r1
 800b51e:	b2d2      	uxtb	r2, r2
 800b520:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b522:	7b3b      	ldrb	r3, [r7, #12]
 800b524:	461a      	mov	r2, r3
 800b526:	4b52      	ldr	r3, [pc, #328]	; (800b670 <mix_sub_columns+0x28c>)
 800b528:	5c9a      	ldrb	r2, [r3, r2]
 800b52a:	7c7b      	ldrb	r3, [r7, #17]
 800b52c:	4619      	mov	r1, r3
 800b52e:	4b50      	ldr	r3, [pc, #320]	; (800b670 <mix_sub_columns+0x28c>)
 800b530:	5c5b      	ldrb	r3, [r3, r1]
 800b532:	4053      	eors	r3, r2
 800b534:	b2da      	uxtb	r2, r3
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	4619      	mov	r1, r3
 800b53a:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <mix_sub_columns+0x284>)
 800b53c:	5c5b      	ldrb	r3, [r3, r1]
 800b53e:	4053      	eors	r3, r2
 800b540:	b2d9      	uxtb	r1, r3
 800b542:	7afb      	ldrb	r3, [r7, #11]
 800b544:	461a      	mov	r2, r3
 800b546:	4b49      	ldr	r3, [pc, #292]	; (800b66c <mix_sub_columns+0x288>)
 800b548:	5c9a      	ldrb	r2, [r3, r2]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3306      	adds	r3, #6
 800b54e:	404a      	eors	r2, r1
 800b550:	b2d2      	uxtb	r2, r2
 800b552:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b554:	7b3b      	ldrb	r3, [r7, #12]
 800b556:	461a      	mov	r2, r3
 800b558:	4b44      	ldr	r3, [pc, #272]	; (800b66c <mix_sub_columns+0x288>)
 800b55a:	5c9a      	ldrb	r2, [r3, r2]
 800b55c:	7c7b      	ldrb	r3, [r7, #17]
 800b55e:	4619      	mov	r1, r3
 800b560:	4b43      	ldr	r3, [pc, #268]	; (800b670 <mix_sub_columns+0x28c>)
 800b562:	5c5b      	ldrb	r3, [r3, r1]
 800b564:	4053      	eors	r3, r2
 800b566:	b2da      	uxtb	r2, r3
 800b568:	7dbb      	ldrb	r3, [r7, #22]
 800b56a:	4619      	mov	r1, r3
 800b56c:	4b40      	ldr	r3, [pc, #256]	; (800b670 <mix_sub_columns+0x28c>)
 800b56e:	5c5b      	ldrb	r3, [r3, r1]
 800b570:	4053      	eors	r3, r2
 800b572:	b2d9      	uxtb	r1, r3
 800b574:	7afb      	ldrb	r3, [r7, #11]
 800b576:	461a      	mov	r2, r3
 800b578:	4b3b      	ldr	r3, [pc, #236]	; (800b668 <mix_sub_columns+0x284>)
 800b57a:	5c9a      	ldrb	r2, [r3, r2]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3307      	adds	r3, #7
 800b580:	404a      	eors	r2, r1
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b586:	7c3b      	ldrb	r3, [r7, #16]
 800b588:	461a      	mov	r2, r3
 800b58a:	4b37      	ldr	r3, [pc, #220]	; (800b668 <mix_sub_columns+0x284>)
 800b58c:	5c9a      	ldrb	r2, [r3, r2]
 800b58e:	7d7b      	ldrb	r3, [r7, #21]
 800b590:	4619      	mov	r1, r3
 800b592:	4b36      	ldr	r3, [pc, #216]	; (800b66c <mix_sub_columns+0x288>)
 800b594:	5c5b      	ldrb	r3, [r3, r1]
 800b596:	4053      	eors	r3, r2
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	7abb      	ldrb	r3, [r7, #10]
 800b59c:	4619      	mov	r1, r3
 800b59e:	4b34      	ldr	r3, [pc, #208]	; (800b670 <mix_sub_columns+0x28c>)
 800b5a0:	5c5b      	ldrb	r3, [r3, r1]
 800b5a2:	4053      	eors	r3, r2
 800b5a4:	b2d9      	uxtb	r1, r3
 800b5a6:	7bfb      	ldrb	r3, [r7, #15]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4b31      	ldr	r3, [pc, #196]	; (800b670 <mix_sub_columns+0x28c>)
 800b5ac:	5c9a      	ldrb	r2, [r3, r2]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	404a      	eors	r2, r1
 800b5b4:	b2d2      	uxtb	r2, r2
 800b5b6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b5b8:	7c3b      	ldrb	r3, [r7, #16]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <mix_sub_columns+0x28c>)
 800b5be:	5c9a      	ldrb	r2, [r3, r2]
 800b5c0:	7d7b      	ldrb	r3, [r7, #21]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4b28      	ldr	r3, [pc, #160]	; (800b668 <mix_sub_columns+0x284>)
 800b5c6:	5c5b      	ldrb	r3, [r3, r1]
 800b5c8:	4053      	eors	r3, r2
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	7abb      	ldrb	r3, [r7, #10]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4b26      	ldr	r3, [pc, #152]	; (800b66c <mix_sub_columns+0x288>)
 800b5d2:	5c5b      	ldrb	r3, [r3, r1]
 800b5d4:	4053      	eors	r3, r2
 800b5d6:	b2d9      	uxtb	r1, r3
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	4b24      	ldr	r3, [pc, #144]	; (800b670 <mix_sub_columns+0x28c>)
 800b5de:	5c9a      	ldrb	r2, [r3, r2]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3309      	adds	r3, #9
 800b5e4:	404a      	eors	r2, r1
 800b5e6:	b2d2      	uxtb	r2, r2
 800b5e8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b5ea:	7c3b      	ldrb	r3, [r7, #16]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4b20      	ldr	r3, [pc, #128]	; (800b670 <mix_sub_columns+0x28c>)
 800b5f0:	5c9a      	ldrb	r2, [r3, r2]
 800b5f2:	7d7b      	ldrb	r3, [r7, #21]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4b1e      	ldr	r3, [pc, #120]	; (800b670 <mix_sub_columns+0x28c>)
 800b5f8:	5c5b      	ldrb	r3, [r3, r1]
 800b5fa:	4053      	eors	r3, r2
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	7abb      	ldrb	r3, [r7, #10]
 800b600:	4619      	mov	r1, r3
 800b602:	4b19      	ldr	r3, [pc, #100]	; (800b668 <mix_sub_columns+0x284>)
 800b604:	5c5b      	ldrb	r3, [r3, r1]
 800b606:	4053      	eors	r3, r2
 800b608:	b2d9      	uxtb	r1, r3
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	461a      	mov	r2, r3
 800b60e:	4b17      	ldr	r3, [pc, #92]	; (800b66c <mix_sub_columns+0x288>)
 800b610:	5c9a      	ldrb	r2, [r3, r2]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	330a      	adds	r3, #10
 800b616:	404a      	eors	r2, r1
 800b618:	b2d2      	uxtb	r2, r2
 800b61a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b61c:	7c3b      	ldrb	r3, [r7, #16]
 800b61e:	461a      	mov	r2, r3
 800b620:	4b12      	ldr	r3, [pc, #72]	; (800b66c <mix_sub_columns+0x288>)
 800b622:	5c9a      	ldrb	r2, [r3, r2]
 800b624:	7d7b      	ldrb	r3, [r7, #21]
 800b626:	4619      	mov	r1, r3
 800b628:	4b11      	ldr	r3, [pc, #68]	; (800b670 <mix_sub_columns+0x28c>)
 800b62a:	5c5b      	ldrb	r3, [r3, r1]
 800b62c:	4053      	eors	r3, r2
 800b62e:	b2da      	uxtb	r2, r3
 800b630:	7abb      	ldrb	r3, [r7, #10]
 800b632:	4619      	mov	r1, r3
 800b634:	4b0e      	ldr	r3, [pc, #56]	; (800b670 <mix_sub_columns+0x28c>)
 800b636:	5c5b      	ldrb	r3, [r3, r1]
 800b638:	4053      	eors	r3, r2
 800b63a:	b2d9      	uxtb	r1, r3
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	461a      	mov	r2, r3
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <mix_sub_columns+0x284>)
 800b642:	5c9a      	ldrb	r2, [r3, r2]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	330b      	adds	r3, #11
 800b648:	404a      	eors	r2, r1
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b64e:	7d3b      	ldrb	r3, [r7, #20]
 800b650:	461a      	mov	r2, r3
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <mix_sub_columns+0x284>)
 800b654:	5c9a      	ldrb	r2, [r3, r2]
 800b656:	7a7b      	ldrb	r3, [r7, #9]
 800b658:	4619      	mov	r1, r3
 800b65a:	4b04      	ldr	r3, [pc, #16]	; (800b66c <mix_sub_columns+0x288>)
 800b65c:	5c5b      	ldrb	r3, [r3, r1]
 800b65e:	4053      	eors	r3, r2
 800b660:	b2da      	uxtb	r2, r3
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	4619      	mov	r1, r3
 800b666:	e005      	b.n	800b674 <mix_sub_columns+0x290>
 800b668:	0801b820 	.word	0x0801b820
 800b66c:	0801b920 	.word	0x0801b920
 800b670:	0801b720 	.word	0x0801b720
 800b674:	4b2d      	ldr	r3, [pc, #180]	; (800b72c <mix_sub_columns+0x348>)
 800b676:	5c5b      	ldrb	r3, [r3, r1]
 800b678:	4053      	eors	r3, r2
 800b67a:	b2d9      	uxtb	r1, r3
 800b67c:	7cfb      	ldrb	r3, [r7, #19]
 800b67e:	461a      	mov	r2, r3
 800b680:	4b2a      	ldr	r3, [pc, #168]	; (800b72c <mix_sub_columns+0x348>)
 800b682:	5c9a      	ldrb	r2, [r3, r2]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	330c      	adds	r3, #12
 800b688:	404a      	eors	r2, r1
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b68e:	7d3b      	ldrb	r3, [r7, #20]
 800b690:	461a      	mov	r2, r3
 800b692:	4b26      	ldr	r3, [pc, #152]	; (800b72c <mix_sub_columns+0x348>)
 800b694:	5c9a      	ldrb	r2, [r3, r2]
 800b696:	7a7b      	ldrb	r3, [r7, #9]
 800b698:	4619      	mov	r1, r3
 800b69a:	4b25      	ldr	r3, [pc, #148]	; (800b730 <mix_sub_columns+0x34c>)
 800b69c:	5c5b      	ldrb	r3, [r3, r1]
 800b69e:	4053      	eors	r3, r2
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4b23      	ldr	r3, [pc, #140]	; (800b734 <mix_sub_columns+0x350>)
 800b6a8:	5c5b      	ldrb	r3, [r3, r1]
 800b6aa:	4053      	eors	r3, r2
 800b6ac:	b2d9      	uxtb	r1, r3
 800b6ae:	7cfb      	ldrb	r3, [r7, #19]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b1e      	ldr	r3, [pc, #120]	; (800b72c <mix_sub_columns+0x348>)
 800b6b4:	5c9a      	ldrb	r2, [r3, r2]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	330d      	adds	r3, #13
 800b6ba:	404a      	eors	r2, r1
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b6c0:	7d3b      	ldrb	r3, [r7, #20]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	4b19      	ldr	r3, [pc, #100]	; (800b72c <mix_sub_columns+0x348>)
 800b6c6:	5c9a      	ldrb	r2, [r3, r2]
 800b6c8:	7a7b      	ldrb	r3, [r7, #9]
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4b17      	ldr	r3, [pc, #92]	; (800b72c <mix_sub_columns+0x348>)
 800b6ce:	5c5b      	ldrb	r3, [r3, r1]
 800b6d0:	4053      	eors	r3, r2
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4b15      	ldr	r3, [pc, #84]	; (800b730 <mix_sub_columns+0x34c>)
 800b6da:	5c5b      	ldrb	r3, [r3, r1]
 800b6dc:	4053      	eors	r3, r2
 800b6de:	b2d9      	uxtb	r1, r3
 800b6e0:	7cfb      	ldrb	r3, [r7, #19]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4b13      	ldr	r3, [pc, #76]	; (800b734 <mix_sub_columns+0x350>)
 800b6e6:	5c9a      	ldrb	r2, [r3, r2]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	330e      	adds	r3, #14
 800b6ec:	404a      	eors	r2, r1
 800b6ee:	b2d2      	uxtb	r2, r2
 800b6f0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b6f2:	7d3b      	ldrb	r3, [r7, #20]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <mix_sub_columns+0x350>)
 800b6f8:	5c9a      	ldrb	r2, [r3, r2]
 800b6fa:	7a7b      	ldrb	r3, [r7, #9]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <mix_sub_columns+0x348>)
 800b700:	5c5b      	ldrb	r3, [r3, r1]
 800b702:	4053      	eors	r3, r2
 800b704:	b2da      	uxtb	r2, r3
 800b706:	7bbb      	ldrb	r3, [r7, #14]
 800b708:	4619      	mov	r1, r3
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <mix_sub_columns+0x348>)
 800b70c:	5c5b      	ldrb	r3, [r3, r1]
 800b70e:	4053      	eors	r3, r2
 800b710:	b2d9      	uxtb	r1, r3
 800b712:	7cfb      	ldrb	r3, [r7, #19]
 800b714:	461a      	mov	r2, r3
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <mix_sub_columns+0x34c>)
 800b718:	5c9a      	ldrb	r2, [r3, r2]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	330f      	adds	r3, #15
 800b71e:	404a      	eors	r2, r1
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	701a      	strb	r2, [r3, #0]
  }
 800b724:	bf00      	nop
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	0801b720 	.word	0x0801b720
 800b730:	0801b820 	.word	0x0801b820
 800b734:	0801b920 	.word	0x0801b920

0800b738 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	460b      	mov	r3, r1
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	3b10      	subs	r3, #16
 800b74a:	2b10      	cmp	r3, #16
 800b74c:	bf8c      	ite	hi
 800b74e:	2201      	movhi	r2, #1
 800b750:	2200      	movls	r2, #0
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	2a00      	cmp	r2, #0
 800b756:	d10d      	bne.n	800b774 <lorawan_aes_set_key+0x3c>
 800b758:	2201      	movs	r2, #1
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b766:	2b00      	cmp	r3, #0
 800b768:	bf14      	ite	ne
 800b76a:	2301      	movne	r3, #1
 800b76c:	2300      	moveq	r3, #0
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b77c:	23ff      	movs	r3, #255	; 0xff
 800b77e:	e0b2      	b.n	800b8e6 <lorawan_aes_set_key+0x1ae>
        break;
 800b780:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	7afa      	ldrb	r2, [r7, #11]
 800b786:	68f9      	ldr	r1, [r7, #12]
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fbfa 	bl	800af82 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b78e:	7afb      	ldrb	r3, [r7, #11]
 800b790:	331c      	adds	r3, #28
 800b792:	b2db      	uxtb	r3, r3
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b798:	7c7b      	ldrb	r3, [r7, #17]
 800b79a:	091b      	lsrs	r3, r3, #4
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b7a8:	7afb      	ldrb	r3, [r7, #11]
 800b7aa:	75fb      	strb	r3, [r7, #23]
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	75bb      	strb	r3, [r7, #22]
 800b7b0:	e093      	b.n	800b8da <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
 800b7b4:	3b04      	subs	r3, #4
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ba:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	3b03      	subs	r3, #3
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	5cd3      	ldrb	r3, [r2, r3]
 800b7c4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b7c6:	7dfb      	ldrb	r3, [r7, #23]
 800b7c8:	3b02      	subs	r3, #2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	5cd3      	ldrb	r3, [r2, r3]
 800b7ce:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	5cd3      	ldrb	r3, [r2, r3]
 800b7d8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	7afa      	ldrb	r2, [r7, #11]
 800b7de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7e2:	fb02 f201 	mul.w	r2, r2, r1
 800b7e6:	1a9b      	subs	r3, r3, r2
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d127      	bne.n	800b83e <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b7ee:	7d7b      	ldrb	r3, [r7, #21]
 800b7f0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b7f2:	7d3b      	ldrb	r3, [r7, #20]
 800b7f4:	4a3e      	ldr	r2, [pc, #248]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b7f6:	5cd2      	ldrb	r2, [r2, r3]
 800b7f8:	7dbb      	ldrb	r3, [r7, #22]
 800b7fa:	4053      	eors	r3, r2
 800b7fc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b7fe:	7cfb      	ldrb	r3, [r7, #19]
 800b800:	4a3b      	ldr	r2, [pc, #236]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b802:	5cd3      	ldrb	r3, [r2, r3]
 800b804:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b806:	7cbb      	ldrb	r3, [r7, #18]
 800b808:	4a39      	ldr	r2, [pc, #228]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b80a:	5cd3      	ldrb	r3, [r2, r3]
 800b80c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b80e:	7c3b      	ldrb	r3, [r7, #16]
 800b810:	4a37      	ldr	r2, [pc, #220]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b812:	5cd3      	ldrb	r3, [r2, r3]
 800b814:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b816:	7dbb      	ldrb	r3, [r7, #22]
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	b25a      	sxtb	r2, r3
 800b81c:	7dbb      	ldrb	r3, [r7, #22]
 800b81e:	09db      	lsrs	r3, r3, #7
 800b820:	b2db      	uxtb	r3, r3
 800b822:	4619      	mov	r1, r3
 800b824:	0049      	lsls	r1, r1, #1
 800b826:	440b      	add	r3, r1
 800b828:	4619      	mov	r1, r3
 800b82a:	00c8      	lsls	r0, r1, #3
 800b82c:	4619      	mov	r1, r3
 800b82e:	4603      	mov	r3, r0
 800b830:	440b      	add	r3, r1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	b25b      	sxtb	r3, r3
 800b836:	4053      	eors	r3, r2
 800b838:	b25b      	sxtb	r3, r3
 800b83a:	75bb      	strb	r3, [r7, #22]
 800b83c:	e01c      	b.n	800b878 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b83e:	7afb      	ldrb	r3, [r7, #11]
 800b840:	2b18      	cmp	r3, #24
 800b842:	d919      	bls.n	800b878 <lorawan_aes_set_key+0x140>
 800b844:	7dfb      	ldrb	r3, [r7, #23]
 800b846:	7afa      	ldrb	r2, [r7, #11]
 800b848:	fbb3 f1f2 	udiv	r1, r3, r2
 800b84c:	fb02 f201 	mul.w	r2, r2, r1
 800b850:	1a9b      	subs	r3, r3, r2
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b10      	cmp	r3, #16
 800b856:	d10f      	bne.n	800b878 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b858:	7d7b      	ldrb	r3, [r7, #21]
 800b85a:	4a25      	ldr	r2, [pc, #148]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b85c:	5cd3      	ldrb	r3, [r2, r3]
 800b85e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b860:	7d3b      	ldrb	r3, [r7, #20]
 800b862:	4a23      	ldr	r2, [pc, #140]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b864:	5cd3      	ldrb	r3, [r2, r3]
 800b866:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b868:	7cfb      	ldrb	r3, [r7, #19]
 800b86a:	4a21      	ldr	r2, [pc, #132]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b86c:	5cd3      	ldrb	r3, [r2, r3]
 800b86e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b870:	7cbb      	ldrb	r3, [r7, #18]
 800b872:	4a1f      	ldr	r2, [pc, #124]	; (800b8f0 <lorawan_aes_set_key+0x1b8>)
 800b874:	5cd3      	ldrb	r3, [r2, r3]
 800b876:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b878:	7dfa      	ldrb	r2, [r7, #23]
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b880:	7c3b      	ldrb	r3, [r7, #16]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	5cd1      	ldrb	r1, [r2, r3]
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	7d7a      	ldrb	r2, [r7, #21]
 800b88a:	404a      	eors	r2, r1
 800b88c:	b2d1      	uxtb	r1, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b892:	7c3b      	ldrb	r3, [r7, #16]
 800b894:	3301      	adds	r3, #1
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	5cd1      	ldrb	r1, [r2, r3]
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	3301      	adds	r3, #1
 800b89e:	7d3a      	ldrb	r2, [r7, #20]
 800b8a0:	404a      	eors	r2, r1
 800b8a2:	b2d1      	uxtb	r1, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b8a8:	7c3b      	ldrb	r3, [r7, #16]
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	5cd1      	ldrb	r1, [r2, r3]
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	3302      	adds	r3, #2
 800b8b4:	7cfa      	ldrb	r2, [r7, #19]
 800b8b6:	404a      	eors	r2, r1
 800b8b8:	b2d1      	uxtb	r1, r2
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b8be:	7c3b      	ldrb	r3, [r7, #16]
 800b8c0:	3303      	adds	r3, #3
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	5cd1      	ldrb	r1, [r2, r3]
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	3303      	adds	r3, #3
 800b8ca:	7cba      	ldrb	r2, [r7, #18]
 800b8cc:	404a      	eors	r2, r1
 800b8ce:	b2d1      	uxtb	r1, r2
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b8d4:	7dfb      	ldrb	r3, [r7, #23]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	75fb      	strb	r3, [r7, #23]
 800b8da:	7dfa      	ldrb	r2, [r7, #23]
 800b8dc:	7c7b      	ldrb	r3, [r7, #17]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	f4ff af67 	bcc.w	800b7b2 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0801b720 	.word	0x0801b720

0800b8f4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08a      	sub	sp, #40	; 0x28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d038      	beq.n	800b97c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	f107 0314 	add.w	r3, r7, #20
 800b910:	68f9      	ldr	r1, [r7, #12]
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff fc07 	bl	800b126 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b918:	2301      	movs	r3, #1
 800b91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b91e:	e014      	b.n	800b94a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b920:	f107 0314 	add.w	r3, r7, #20
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fd5d 	bl	800b3e4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b930:	0112      	lsls	r2, r2, #4
 800b932:	441a      	add	r2, r3
 800b934:	f107 0314 	add.w	r3, r7, #20
 800b938:	4611      	mov	r1, r2
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff fcab 	bl	800b296 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b944:	3301      	adds	r3, #1
 800b946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b950:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b954:	429a      	cmp	r2, r3
 800b956:	d3e3      	bcc.n	800b920 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b958:	f107 0314 	add.w	r3, r7, #20
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fca7 	bl	800b2b0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b968:	0112      	lsls	r2, r2, #4
 800b96a:	441a      	add	r2, r3
 800b96c:	f107 0314 	add.w	r3, r7, #20
 800b970:	4619      	mov	r1, r3
 800b972:	68b8      	ldr	r0, [r7, #8]
 800b974:	f7ff fbd7 	bl	800b126 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	e000      	b.n	800b97e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b97c:	23ff      	movs	r3, #255	; 0xff
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3728      	adds	r7, #40	; 0x28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800b988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b98a:	b09d      	sub	sp, #116	; 0x74
 800b98c:	af10      	add	r7, sp, #64	; 0x40
 800b98e:	4603      	mov	r3, r0
 800b990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b994:	2306      	movs	r3, #6
 800b996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b99a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fa05 	bl	800bdb4 <SecureElementGetKeyByID>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b9b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f040 80b0 	bne.w	800bb1a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d106      	bne.n	800b9d0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b9c2:	4b58      	ldr	r3, [pc, #352]	; (800bb24 <PrintKey+0x19c>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	2002      	movs	r0, #2
 800b9ca:	f00e fe73 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800b9ce:	e056      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d106      	bne.n	800b9e6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b9d8:	4b53      	ldr	r3, [pc, #332]	; (800bb28 <PrintKey+0x1a0>)
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	2002      	movs	r0, #2
 800b9e0:	f00e fe68 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800b9e4:	e04b      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d106      	bne.n	800b9fc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b9ee:	4b4f      	ldr	r3, [pc, #316]	; (800bb2c <PrintKey+0x1a4>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	2002      	movs	r0, #2
 800b9f6:	f00e fe5d 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800b9fa:	e040      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d106      	bne.n	800ba12 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ba04:	4b4a      	ldr	r3, [pc, #296]	; (800bb30 <PrintKey+0x1a8>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	2100      	movs	r1, #0
 800ba0a:	2002      	movs	r0, #2
 800ba0c:	f00e fe52 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800ba10:	e035      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ba12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	d106      	bne.n	800ba28 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ba1a:	4b46      	ldr	r3, [pc, #280]	; (800bb34 <PrintKey+0x1ac>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2100      	movs	r1, #0
 800ba20:	2002      	movs	r0, #2
 800ba22:	f00e fe47 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800ba26:	e02a      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800ba28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba2c:	2b7f      	cmp	r3, #127	; 0x7f
 800ba2e:	d106      	bne.n	800ba3e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800ba30:	4b41      	ldr	r3, [pc, #260]	; (800bb38 <PrintKey+0x1b0>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	2100      	movs	r1, #0
 800ba36:	2002      	movs	r0, #2
 800ba38:	f00e fe3c 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800ba3c:	e01f      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800ba3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba42:	2b80      	cmp	r3, #128	; 0x80
 800ba44:	d106      	bne.n	800ba54 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800ba46:	4b3d      	ldr	r3, [pc, #244]	; (800bb3c <PrintKey+0x1b4>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	2002      	movs	r0, #2
 800ba4e:	f00e fe31 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800ba52:	e014      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ba54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba58:	2b81      	cmp	r3, #129	; 0x81
 800ba5a:	d106      	bne.n	800ba6a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800ba5c:	4b38      	ldr	r3, [pc, #224]	; (800bb40 <PrintKey+0x1b8>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	2100      	movs	r1, #0
 800ba62:	2002      	movs	r0, #2
 800ba64:	f00e fe26 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 800ba68:	e009      	b.n	800ba7e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800ba6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6e:	2b82      	cmp	r3, #130	; 0x82
 800ba70:	d105      	bne.n	800ba7e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800ba72:	4b34      	ldr	r3, [pc, #208]	; (800bb44 <PrintKey+0x1bc>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	2100      	movs	r1, #0
 800ba78:	2002      	movs	r0, #2
 800ba7a:	f00e fe1b 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	4618      	mov	r0, r3
 800ba84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba86:	789b      	ldrb	r3, [r3, #2]
 800ba88:	461c      	mov	r4, r3
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	78db      	ldrb	r3, [r3, #3]
 800ba8e:	461d      	mov	r5, r3
 800ba90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	461e      	mov	r6, r3
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	795b      	ldrb	r3, [r3, #5]
 800ba9a:	623b      	str	r3, [r7, #32]
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	799b      	ldrb	r3, [r3, #6]
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa4:	79db      	ldrb	r3, [r3, #7]
 800baa6:	61bb      	str	r3, [r7, #24]
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	7a1b      	ldrb	r3, [r3, #8]
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	7a5b      	ldrb	r3, [r3, #9]
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	7a9b      	ldrb	r3, [r3, #10]
 800bab8:	60fb      	str	r3, [r7, #12]
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	7adb      	ldrb	r3, [r3, #11]
 800babe:	60bb      	str	r3, [r7, #8]
 800bac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac2:	7b1b      	ldrb	r3, [r3, #12]
 800bac4:	607b      	str	r3, [r7, #4]
 800bac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac8:	7b5b      	ldrb	r3, [r3, #13]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	7b9b      	ldrb	r3, [r3, #14]
 800bad0:	4619      	mov	r1, r3
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	7bdb      	ldrb	r3, [r3, #15]
 800bad6:	461a      	mov	r2, r3
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	7c1b      	ldrb	r3, [r3, #16]
 800badc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bade:	920e      	str	r2, [sp, #56]	; 0x38
 800bae0:	910d      	str	r1, [sp, #52]	; 0x34
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	920c      	str	r2, [sp, #48]	; 0x30
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	920b      	str	r2, [sp, #44]	; 0x2c
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	920a      	str	r2, [sp, #40]	; 0x28
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	9209      	str	r2, [sp, #36]	; 0x24
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	9208      	str	r2, [sp, #32]
 800baf6:	697a      	ldr	r2, [r7, #20]
 800baf8:	9207      	str	r2, [sp, #28]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	9206      	str	r2, [sp, #24]
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	9205      	str	r2, [sp, #20]
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9603      	str	r6, [sp, #12]
 800bb08:	9502      	str	r5, [sp, #8]
 800bb0a:	9401      	str	r4, [sp, #4]
 800bb0c:	9000      	str	r0, [sp, #0]
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <PrintKey+0x1c0>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	2100      	movs	r1, #0
 800bb14:	2002      	movs	r0, #2
 800bb16:	f00e fdcd 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800bb1a:	bf00      	nop
 800bb1c:	3734      	adds	r7, #52	; 0x34
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb22:	bf00      	nop
 800bb24:	0801b134 	.word	0x0801b134
 800bb28:	0801b14c 	.word	0x0801b14c
 800bb2c:	0801b164 	.word	0x0801b164
 800bb30:	0801b17c 	.word	0x0801b17c
 800bb34:	0801b194 	.word	0x0801b194
 800bb38:	0801b1ac 	.word	0x0801b1ac
 800bb3c:	0801b1c4 	.word	0x0801b1c4
 800bb40:	0801b1dc 	.word	0x0801b1dc
 800bb44:	0801b1f4 	.word	0x0801b1f4
 800bb48:	0801b20c 	.word	0x0801b20c

0800bb4c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	6039      	str	r1, [r7, #0]
 800bb56:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73fb      	strb	r3, [r7, #15]
 800bb5c:	e01a      	b.n	800bb94 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <GetKeyByID+0x5c>)
 800bb60:	6819      	ldr	r1, [r3, #0]
 800bb62:	7bfa      	ldrb	r2, [r7, #15]
 800bb64:	4613      	mov	r3, r2
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	440b      	add	r3, r1
 800bb6c:	3310      	adds	r3, #16
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	79fa      	ldrb	r2, [r7, #7]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d10b      	bne.n	800bb8e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bb76:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <GetKeyByID+0x5c>)
 800bb78:	6819      	ldr	r1, [r3, #0]
 800bb7a:	7bfa      	ldrb	r2, [r7, #15]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	4413      	add	r3, r2
 800bb82:	3310      	adds	r3, #16
 800bb84:	18ca      	adds	r2, r1, r3
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e006      	b.n	800bb9c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	3301      	adds	r3, #1
 800bb92:	73fb      	strb	r3, [r7, #15]
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
 800bb96:	2b09      	cmp	r3, #9
 800bb98:	d9e1      	bls.n	800bb5e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb9a:	2303      	movs	r3, #3
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bc80      	pop	{r7}
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	200002c8 	.word	0x200002c8

0800bbac <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800bbac:	b590      	push	{r4, r7, lr}
 800bbae:	b0d1      	sub	sp, #324	; 0x144
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	f107 040c 	add.w	r4, r7, #12
 800bbb6:	6020      	str	r0, [r4, #0]
 800bbb8:	f107 0008 	add.w	r0, r7, #8
 800bbbc:	6001      	str	r1, [r0, #0]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	1dbb      	adds	r3, r7, #6
 800bbc2:	801a      	strh	r2, [r3, #0]
 800bbc4:	1d7b      	adds	r3, r7, #5
 800bbc6:	460a      	mov	r2, r1
 800bbc8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bbca:	f107 0308 	add.w	r3, r7, #8
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <ComputeCmac+0x30>
 800bbd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <ComputeCmac+0x34>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	e04e      	b.n	800bc7e <ComputeCmac+0xd2>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fe ff23 	bl	800aa30 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bbea:	f107 0210 	add.w	r2, r7, #16
 800bbee:	1d7b      	adds	r3, r7, #5
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	4611      	mov	r1, r2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7ff ffa9 	bl	800bb4c <GetKeyByID>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bc00:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d138      	bne.n	800bc7a <ComputeCmac+0xce>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bc08:	f107 0310 	add.w	r3, r7, #16
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	4611      	mov	r1, r2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fe ff23 	bl	800aa62 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bc1c:	f107 030c 	add.w	r3, r7, #12
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <ComputeCmac+0x8a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800bc26:	f107 030c 	add.w	r3, r7, #12
 800bc2a:	f107 0014 	add.w	r0, r7, #20
 800bc2e:	2210      	movs	r2, #16
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	f7fe ff25 	bl	800aa80 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bc36:	1dbb      	adds	r3, r7, #6
 800bc38:	881a      	ldrh	r2, [r3, #0]
 800bc3a:	f107 0308 	add.w	r3, r7, #8
 800bc3e:	f107 0014 	add.w	r0, r7, #20
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	f7fe ff1c 	bl	800aa80 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bc48:	f107 0214 	add.w	r2, r7, #20
 800bc4c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe ffd6 	bl	800ac04 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800bc5c:	061a      	lsls	r2, r3, #24
 800bc5e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800bc62:	041b      	lsls	r3, r3, #16
 800bc64:	431a      	orrs	r2, r3
 800bc66:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800bc6e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800bc72:	431a      	orrs	r2, r3
 800bc74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bc78:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bc7a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd90      	pop	{r4, r7, pc}

0800bc88 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800bc88:	b5b0      	push	{r4, r5, r7, lr}
 800bc8a:	b0b2      	sub	sp, #200	; 0xc8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	22c0      	movs	r2, #192	; 0xc0
 800bc98:	2100      	movs	r1, #0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f00e ffa8 	bl	801abf0 <memset>
 800bca0:	4a3b      	ldr	r2, [pc, #236]	; (800bd90 <SecureElementInit+0x108>)
 800bca2:	f107 0308 	add.w	r3, r7, #8
 800bca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcaa:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcae:	4a39      	ldr	r2, [pc, #228]	; (800bd94 <SecureElementInit+0x10c>)
 800bcb0:	f107 0310 	add.w	r3, r7, #16
 800bcb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcb8:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcbc:	4b36      	ldr	r3, [pc, #216]	; (800bd98 <SecureElementInit+0x110>)
 800bcbe:	f107 0419 	add.w	r4, r7, #25
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcc6:	6020      	str	r0, [r4, #0]
 800bcc8:	6061      	str	r1, [r4, #4]
 800bcca:	60a2      	str	r2, [r4, #8]
 800bccc:	60e3      	str	r3, [r4, #12]
 800bcce:	2301      	movs	r3, #1
 800bcd0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800bcd4:	4b31      	ldr	r3, [pc, #196]	; (800bd9c <SecureElementInit+0x114>)
 800bcd6:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800bcda:	461d      	mov	r5, r3
 800bcdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcde:	6020      	str	r0, [r4, #0]
 800bce0:	6061      	str	r1, [r4, #4]
 800bce2:	60a2      	str	r2, [r4, #8]
 800bce4:	60e3      	str	r3, [r4, #12]
 800bce6:	2302      	movs	r3, #2
 800bce8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800bcec:	4b2c      	ldr	r3, [pc, #176]	; (800bda0 <SecureElementInit+0x118>)
 800bcee:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800bcf2:	461d      	mov	r5, r3
 800bcf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	6061      	str	r1, [r4, #4]
 800bcfa:	60a2      	str	r2, [r4, #8]
 800bcfc:	60e3      	str	r3, [r4, #12]
 800bcfe:	2303      	movs	r3, #3
 800bd00:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800bd04:	4b27      	ldr	r3, [pc, #156]	; (800bda4 <SecureElementInit+0x11c>)
 800bd06:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800bd0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd10:	2304      	movs	r3, #4
 800bd12:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800bd16:	237f      	movs	r3, #127	; 0x7f
 800bd18:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800bd1c:	2380      	movs	r3, #128	; 0x80
 800bd1e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800bd22:	2381      	movs	r3, #129	; 0x81
 800bd24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bd28:	2382      	movs	r3, #130	; 0x82
 800bd2a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800bd2e:	2383      	movs	r3, #131	; 0x83
 800bd30:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd3a:	2302      	movs	r3, #2
 800bd3c:	e023      	b.n	800bd86 <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800bd3e:	4a1a      	ldr	r2, [pc, #104]	; (800bda8 <SecureElementInit+0x120>)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800bd44:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <SecureElementInit+0x120>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f107 0108 	add.w	r1, r7, #8
 800bd4c:	22c0      	movs	r2, #192	; 0xc0
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f00a fb95 	bl	801647e <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800bd54:	4b15      	ldr	r3, [pc, #84]	; (800bdac <SecureElementInit+0x124>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	2002      	movs	r0, #2
 800bd5c:	f00e fcaa 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800bd60:	2000      	movs	r0, #0
 800bd62:	f7ff fe11 	bl	800b988 <PrintKey>
    PrintKey(NWK_KEY);
 800bd66:	2001      	movs	r0, #1
 800bd68:	f7ff fe0e 	bl	800b988 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800bd6c:	4b10      	ldr	r3, [pc, #64]	; (800bdb0 <SecureElementInit+0x128>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2100      	movs	r1, #0
 800bd72:	2002      	movs	r0, #2
 800bd74:	f00e fc9e 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800bd78:	2003      	movs	r0, #3
 800bd7a:	f7ff fe05 	bl	800b988 <PrintKey>
    PrintKey(NWK_S_KEY);
 800bd7e:	2002      	movs	r0, #2
 800bd80:	f7ff fe02 	bl	800b988 <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	37c8      	adds	r7, #200	; 0xc8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0801b290 	.word	0x0801b290
 800bd94:	0801b298 	.word	0x0801b298
 800bd98:	0801b2a0 	.word	0x0801b2a0
 800bd9c:	0801b2b0 	.word	0x0801b2b0
 800bda0:	0801b2c0 	.word	0x0801b2c0
 800bda4:	0801b2d0 	.word	0x0801b2d0
 800bda8:	200002c8 	.word	0x200002c8
 800bdac:	0801b260 	.word	0x0801b260
 800bdb0:	0801b278 	.word	0x0801b278

0800bdb4 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	6039      	str	r1, [r7, #0]
 800bdbe:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73fb      	strb	r3, [r7, #15]
 800bdc4:	e01a      	b.n	800bdfc <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800bdc6:	4b12      	ldr	r3, [pc, #72]	; (800be10 <SecureElementGetKeyByID+0x5c>)
 800bdc8:	6819      	ldr	r1, [r3, #0]
 800bdca:	7bfa      	ldrb	r2, [r7, #15]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	4413      	add	r3, r2
 800bdd2:	440b      	add	r3, r1
 800bdd4:	3310      	adds	r3, #16
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	79fa      	ldrb	r2, [r7, #7]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d10b      	bne.n	800bdf6 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800bdde:	4b0c      	ldr	r3, [pc, #48]	; (800be10 <SecureElementGetKeyByID+0x5c>)
 800bde0:	6819      	ldr	r1, [r3, #0]
 800bde2:	7bfa      	ldrb	r2, [r7, #15]
 800bde4:	4613      	mov	r3, r2
 800bde6:	011b      	lsls	r3, r3, #4
 800bde8:	4413      	add	r3, r2
 800bdea:	3310      	adds	r3, #16
 800bdec:	18ca      	adds	r2, r1, r3
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e006      	b.n	800be04 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	73fb      	strb	r3, [r7, #15]
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d9e1      	bls.n	800bdc6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be02:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	bc80      	pop	{r7}
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	200002c8 	.word	0x200002c8

0800be14 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d101      	bne.n	800be2a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be26:	2302      	movs	r3, #2
 800be28:	e04c      	b.n	800bec4 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be2a:	2300      	movs	r3, #0
 800be2c:	77fb      	strb	r3, [r7, #31]
 800be2e:	e045      	b.n	800bebc <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800be30:	4b26      	ldr	r3, [pc, #152]	; (800becc <SecureElementSetKey+0xb8>)
 800be32:	6819      	ldr	r1, [r3, #0]
 800be34:	7ffa      	ldrb	r2, [r7, #31]
 800be36:	4613      	mov	r3, r2
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	4413      	add	r3, r2
 800be3c:	440b      	add	r3, r1
 800be3e:	3310      	adds	r3, #16
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	79fa      	ldrb	r2, [r7, #7]
 800be44:	429a      	cmp	r2, r3
 800be46:	d136      	bne.n	800beb6 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b80      	cmp	r3, #128	; 0x80
 800be4c:	d123      	bne.n	800be96 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800be4e:	2306      	movs	r3, #6
 800be50:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	f107 0310 	add.w	r3, r7, #16
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	605a      	str	r2, [r3, #4]
 800be60:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800be62:	f107 030c 	add.w	r3, r7, #12
 800be66:	227f      	movs	r2, #127	; 0x7f
 800be68:	2110      	movs	r1, #16
 800be6a:	6838      	ldr	r0, [r7, #0]
 800be6c:	f000 f87d 	bl	800bf6a <SecureElementAesEncrypt>
 800be70:	4603      	mov	r3, r0
 800be72:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be74:	4b15      	ldr	r3, [pc, #84]	; (800becc <SecureElementSetKey+0xb8>)
 800be76:	6819      	ldr	r1, [r3, #0]
 800be78:	7ffa      	ldrb	r2, [r7, #31]
 800be7a:	4613      	mov	r3, r2
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	4413      	add	r3, r2
 800be80:	3310      	adds	r3, #16
 800be82:	440b      	add	r3, r1
 800be84:	3301      	adds	r3, #1
 800be86:	f107 010c 	add.w	r1, r7, #12
 800be8a:	2210      	movs	r2, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	f00a faf6 	bl	801647e <memcpy1>
                return retval;
 800be92:	7fbb      	ldrb	r3, [r7, #30]
 800be94:	e016      	b.n	800bec4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be96:	4b0d      	ldr	r3, [pc, #52]	; (800becc <SecureElementSetKey+0xb8>)
 800be98:	6819      	ldr	r1, [r3, #0]
 800be9a:	7ffa      	ldrb	r2, [r7, #31]
 800be9c:	4613      	mov	r3, r2
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	4413      	add	r3, r2
 800bea2:	3310      	adds	r3, #16
 800bea4:	440b      	add	r3, r1
 800bea6:	3301      	adds	r3, #1
 800bea8:	2210      	movs	r2, #16
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	4618      	mov	r0, r3
 800beae:	f00a fae6 	bl	801647e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800beb2:	2300      	movs	r3, #0
 800beb4:	e006      	b.n	800bec4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800beb6:	7ffb      	ldrb	r3, [r7, #31]
 800beb8:	3301      	adds	r3, #1
 800beba:	77fb      	strb	r3, [r7, #31]
 800bebc:	7ffb      	ldrb	r3, [r7, #31]
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d9b6      	bls.n	800be30 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bec2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	200002c8 	.word	0x200002c8

0800bed0 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4611      	mov	r1, r2
 800bedc:	461a      	mov	r2, r3
 800bede:	460b      	mov	r3, r1
 800bee0:	80fb      	strh	r3, [r7, #6]
 800bee2:	4613      	mov	r3, r2
 800bee4:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bee6:	797b      	ldrb	r3, [r7, #5]
 800bee8:	2b7e      	cmp	r3, #126	; 0x7e
 800beea:	d901      	bls.n	800bef0 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800beec:	2303      	movs	r3, #3
 800beee:	e009      	b.n	800bf04 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bef0:	7979      	ldrb	r1, [r7, #5]
 800bef2:	88fa      	ldrh	r2, [r7, #6]
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	460b      	mov	r3, r1
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fe55 	bl	800bbac <ComputeCmac>
 800bf02:	4603      	mov	r3, r0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af02      	add	r7, sp, #8
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	607a      	str	r2, [r7, #4]
 800bf16:	461a      	mov	r2, r3
 800bf18:	460b      	mov	r3, r1
 800bf1a:	817b      	strh	r3, [r7, #10]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf26:	2302      	movs	r3, #2
 800bf28:	e01b      	b.n	800bf62 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bf2a:	2306      	movs	r3, #6
 800bf2c:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bf32:	7a79      	ldrb	r1, [r7, #9]
 800bf34:	897a      	ldrh	r2, [r7, #10]
 800bf36:	f107 0310 	add.w	r3, r7, #16
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	2000      	movs	r0, #0
 800bf42:	f7ff fe33 	bl	800bbac <ComputeCmac>
 800bf46:	4603      	mov	r3, r0
 800bf48:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	e006      	b.n	800bf62 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d001      	beq.n	800bf60 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b0c2      	sub	sp, #264	; 0x108
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	4608      	mov	r0, r1
 800bf74:	4611      	mov	r1, r2
 800bf76:	1d3a      	adds	r2, r7, #4
 800bf78:	6013      	str	r3, [r2, #0]
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	817b      	strh	r3, [r7, #10]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <SecureElementAesEncrypt+0x26>
 800bf88:	1d3b      	adds	r3, r7, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <SecureElementAesEncrypt+0x2a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf90:	2302      	movs	r3, #2
 800bf92:	e043      	b.n	800c01c <SecureElementAesEncrypt+0xb2>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bf94:	897b      	ldrh	r3, [r7, #10]
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <SecureElementAesEncrypt+0x3a>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bfa0:	2305      	movs	r3, #5
 800bfa2:	e03b      	b.n	800c01c <SecureElementAesEncrypt+0xb2>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bfa4:	f107 0314 	add.w	r3, r7, #20
 800bfa8:	22f0      	movs	r2, #240	; 0xf0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	4618      	mov	r0, r3
 800bfae:	f00a faa1 	bl	80164f4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bfb2:	f107 0210 	add.w	r2, r7, #16
 800bfb6:	7a7b      	ldrb	r3, [r7, #9]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff fdc6 	bl	800bb4c <GetKeyByID>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bfc6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d124      	bne.n	800c018 <SecureElementAesEncrypt+0xae>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	f107 0214 	add.w	r2, r7, #20
 800bfd6:	2110      	movs	r1, #16
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff fbad 	bl	800b738 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bfe4:	e015      	b.n	800c012 <SecureElementAesEncrypt+0xa8>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bfe6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	18d0      	adds	r0, r2, r3
 800bfee:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bff2:	1d3a      	adds	r2, r7, #4
 800bff4:	6812      	ldr	r2, [r2, #0]
 800bff6:	4413      	add	r3, r2
 800bff8:	f107 0214 	add.w	r2, r7, #20
 800bffc:	4619      	mov	r1, r3
 800bffe:	f7ff fc79 	bl	800b8f4 <lorawan_aes_encrypt>
            block = block + 16;
 800c002:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c006:	3310      	adds	r3, #16
 800c008:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c00c:	897b      	ldrh	r3, [r7, #10]
 800c00e:	3b10      	subs	r3, #16
 800c010:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c012:	897b      	ldrh	r3, [r7, #10]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <SecureElementAesEncrypt+0x7c>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c018:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b088      	sub	sp, #32
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	460b      	mov	r3, r1
 800c030:	70fb      	strb	r3, [r7, #3]
 800c032:	4613      	mov	r3, r2
 800c034:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c03c:	2302      	movs	r3, #2
 800c03e:	e02e      	b.n	800c09e <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c040:	2306      	movs	r3, #6
 800c042:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c044:	78bb      	ldrb	r3, [r7, #2]
 800c046:	2b7f      	cmp	r3, #127	; 0x7f
 800c048:	d104      	bne.n	800c054 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	d001      	beq.n	800c054 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c050:	2303      	movs	r3, #3
 800c052:	e024      	b.n	800c09e <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c054:	2300      	movs	r3, #0
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	f107 0310 	add.w	r3, r7, #16
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	605a      	str	r2, [r3, #4]
 800c062:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c064:	f107 030c 	add.w	r3, r7, #12
 800c068:	78fa      	ldrb	r2, [r7, #3]
 800c06a:	2110      	movs	r1, #16
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7ff ff7c 	bl	800bf6a <SecureElementAesEncrypt>
 800c072:	4603      	mov	r3, r0
 800c074:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c076:	7ffb      	ldrb	r3, [r7, #31]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
 800c07e:	e00e      	b.n	800c09e <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c080:	f107 020c 	add.w	r2, r7, #12
 800c084:	78bb      	ldrb	r3, [r7, #2]
 800c086:	4611      	mov	r1, r2
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff fec3 	bl	800be14 <SecureElementSetKey>
 800c08e:	4603      	mov	r3, r0
 800c090:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c092:	7ffb      	ldrb	r3, [r7, #31]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c098:	7ffb      	ldrb	r3, [r7, #31]
 800c09a:	e000      	b.n	800c09e <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c09c:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b086      	sub	sp, #24
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607b      	str	r3, [r7, #4]
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	73fb      	strb	r3, [r7, #15]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d005      	beq.n	800c0ca <SecureElementProcessJoinAccept+0x24>
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <SecureElementProcessJoinAccept+0x24>
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e064      	b.n	800c198 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c0ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0d2:	2b21      	cmp	r3, #33	; 0x21
 800c0d4:	d901      	bls.n	800c0da <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c0d6:	2305      	movs	r3, #5
 800c0d8:	e05e      	b.n	800c198 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c0de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6879      	ldr	r1, [r7, #4]
 800c0e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0ea:	f00a f9c8 	bl	801647e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	1c58      	adds	r0, r3, #1
 800c0f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	b299      	uxth	r1, r3
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	3301      	adds	r3, #1
 800c100:	7dfa      	ldrb	r2, [r7, #23]
 800c102:	f7ff ff32 	bl	800bf6a <SecureElementAesEncrypt>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c10c:	2307      	movs	r3, #7
 800c10e:	e043      	b.n	800c198 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	330b      	adds	r3, #11
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	09db      	lsrs	r3, r3, #7
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c11e:	2300      	movs	r3, #0
 800c120:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c122:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c126:	3b04      	subs	r3, #4
 800c128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c12a:	4413      	add	r3, r2
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c130:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c134:	3b03      	subs	r3, #3
 800c136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c138:	4413      	add	r3, r2
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	021b      	lsls	r3, r3, #8
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	4313      	orrs	r3, r2
 800c142:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c144:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c148:	3b02      	subs	r3, #2
 800c14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c14c:	4413      	add	r3, r2
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	041b      	lsls	r3, r3, #16
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	4313      	orrs	r3, r2
 800c156:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c158:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c160:	4413      	add	r3, r2
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	061b      	lsls	r3, r3, #24
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	4313      	orrs	r3, r2
 800c16a:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10e      	bne.n	800c192 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c174:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	3b04      	subs	r3, #4
 800c17c:	b299      	uxth	r1, r3
 800c17e:	2301      	movs	r3, #1
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c184:	f7ff fec2 	bl	800bf0c <SecureElementVerifyAesCmac>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c18e:	2301      	movs	r3, #1
 800c190:	e002      	b.n	800c198 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c192:	2304      	movs	r3, #4
 800c194:	e000      	b.n	800c198 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e006      	b.n	800c1c0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c1b2:	4b05      	ldr	r3, [pc, #20]	; (800c1c8 <SecureElementRandomNumber+0x28>)
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	4798      	blx	r3
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	0801ba68 	.word	0x0801ba68

0800c1cc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e007      	b.n	800c1ee <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <SecureElementSetDevEui+0x2c>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2208      	movs	r2, #8
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f00a f949 	bl	801647e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200002c8 	.word	0x200002c8

0800c1fc <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c200:	4b02      	ldr	r3, [pc, #8]	; (800c20c <SecureElementGetDevEui+0x10>)
 800c202:	681b      	ldr	r3, [r3, #0]
}
 800c204:	4618      	mov	r0, r3
 800c206:	46bd      	mov	sp, r7
 800c208:	bc80      	pop	{r7}
 800c20a:	4770      	bx	lr
 800c20c:	200002c8 	.word	0x200002c8

0800c210 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c21e:	2302      	movs	r3, #2
 800c220:	e008      	b.n	800c234 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c222:	4b06      	ldr	r3, [pc, #24]	; (800c23c <SecureElementSetJoinEui+0x2c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3308      	adds	r3, #8
 800c228:	2208      	movs	r2, #8
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f00a f926 	bl	801647e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	200002c8 	.word	0x200002c8

0800c240 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c240:	b480      	push	{r7}
 800c242:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c244:	4b03      	ldr	r3, [pc, #12]	; (800c254 <SecureElementGetJoinEui+0x14>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3308      	adds	r3, #8
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bc80      	pop	{r7}
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	200002c8 	.word	0x200002c8

0800c258 <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800c260:	4a1a      	ldr	r2, [pc, #104]	; (800c2cc <LmHandlerInit+0x74>)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c266:	4b1a      	ldr	r3, [pc, #104]	; (800c2d0 <LmHandlerInit+0x78>)
 800c268:	4a1a      	ldr	r2, [pc, #104]	; (800c2d4 <LmHandlerInit+0x7c>)
 800c26a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c26c:	4b18      	ldr	r3, [pc, #96]	; (800c2d0 <LmHandlerInit+0x78>)
 800c26e:	4a1a      	ldr	r2, [pc, #104]	; (800c2d8 <LmHandlerInit+0x80>)
 800c270:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c272:	4b17      	ldr	r3, [pc, #92]	; (800c2d0 <LmHandlerInit+0x78>)
 800c274:	4a19      	ldr	r2, [pc, #100]	; (800c2dc <LmHandlerInit+0x84>)
 800c276:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c278:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <LmHandlerInit+0x78>)
 800c27a:	4a19      	ldr	r2, [pc, #100]	; (800c2e0 <LmHandlerInit+0x88>)
 800c27c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c27e:	4b13      	ldr	r3, [pc, #76]	; (800c2cc <LmHandlerInit+0x74>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a17      	ldr	r2, [pc, #92]	; (800c2e4 <LmHandlerInit+0x8c>)
 800c286:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c288:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <LmHandlerInit+0x74>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <LmHandlerInit+0x8c>)
 800c290:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c292:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <LmHandlerInit+0x74>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	4a12      	ldr	r2, [pc, #72]	; (800c2e4 <LmHandlerInit+0x8c>)
 800c29a:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c29c:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <LmHandlerInit+0x8c>)
 800c29e:	4a12      	ldr	r2, [pc, #72]	; (800c2e8 <LmHandlerInit+0x90>)
 800c2a0:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c2a2:	4b0a      	ldr	r3, [pc, #40]	; (800c2cc <LmHandlerInit+0x74>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	4a0e      	ldr	r2, [pc, #56]	; (800c2e4 <LmHandlerInit+0x8c>)
 800c2aa:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c2ac:	490f      	ldr	r1, [pc, #60]	; (800c2ec <LmHandlerInit+0x94>)
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	f000 fcfe 	bl	800ccb0 <LmHandlerPackageRegister>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d002      	beq.n	800c2c0 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800c2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c2be:	e000      	b.n	800c2c2 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	200002f0 	.word	0x200002f0
 800c2d0:	200002f4 	.word	0x200002f4
 800c2d4:	0800ca05 	.word	0x0800ca05
 800c2d8:	0800ca6d 	.word	0x0800ca6d
 800c2dc:	0800cb4d 	.word	0x0800cb4d
 800c2e0:	0800cc11 	.word	0x0800cc11
 800c2e4:	20000304 	.word	0x20000304
 800c2e8:	0800cf21 	.word	0x0800cf21
 800c2ec:	200000b8 	.word	0x200000b8

0800c2f0 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f2:	b099      	sub	sp, #100	; 0x64
 800c2f4:	af08      	add	r7, sp, #32
 800c2f6:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c2fc:	2210      	movs	r2, #16
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4882      	ldr	r0, [pc, #520]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c302:	f00d fa8f 	bl	8019824 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800c306:	f7fe fb5f 	bl	800a9c8 <LoraInfo_GetPtr>
 800c30a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c30c:	4b7f      	ldr	r3, [pc, #508]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	461a      	mov	r2, r3
 800c312:	2301      	movs	r3, #1
 800c314:	4093      	lsls	r3, r2
 800c316:	461a      	mov	r2, r3
 800c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	4013      	ands	r3, r2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00c      	beq.n	800c33c <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c322:	4b7a      	ldr	r3, [pc, #488]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	4979      	ldr	r1, [pc, #484]	; (800c510 <LmHandlerConfigure+0x220>)
 800c32a:	487a      	ldr	r0, [pc, #488]	; (800c514 <LmHandlerConfigure+0x224>)
 800c32c:	f004 fb1a 	bl	8010964 <LoRaMacInitialization>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800c336:	f04f 33ff 	mov.w	r3, #4294967295
 800c33a:	e0e2      	b.n	800c502 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c33c:	4b76      	ldr	r3, [pc, #472]	; (800c518 <LmHandlerConfigure+0x228>)
 800c33e:	2201      	movs	r2, #1
 800c340:	2100      	movs	r1, #0
 800c342:	2000      	movs	r0, #0
 800c344:	f00e f9b6 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c348:	e7fe      	b.n	800c348 <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800c34a:	f000 fdfa 	bl	800cf42 <NvmDataMgmtRestore>
 800c34e:	4603      	mov	r3, r0
 800c350:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800c352:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c354:	2b00      	cmp	r3, #0
 800c356:	d003      	beq.n	800c360 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800c358:	4b70      	ldr	r3, [pc, #448]	; (800c51c <LmHandlerConfigure+0x22c>)
 800c35a:	2201      	movs	r2, #1
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e002      	b.n	800c366 <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800c360:	4b6e      	ldr	r3, [pc, #440]	; (800c51c <LmHandlerConfigure+0x22c>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c366:	2302      	movs	r3, #2
 800c368:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	4618      	mov	r0, r3
 800c370:	f004 fe42 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2208      	movs	r2, #8
 800c378:	4619      	mov	r1, r3
 800c37a:	4869      	ldr	r0, [pc, #420]	; (800c520 <LmHandlerConfigure+0x230>)
 800c37c:	f00a f87f 	bl	801647e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c380:	2303      	movs	r3, #3
 800c382:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c384:	f107 0314 	add.w	r3, r7, #20
 800c388:	4618      	mov	r0, r3
 800c38a:	f004 fe35 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	2208      	movs	r2, #8
 800c392:	4619      	mov	r1, r3
 800c394:	4863      	ldr	r0, [pc, #396]	; (800c524 <LmHandlerConfigure+0x234>)
 800c396:	f00a f872 	bl	801647e <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c39a:	4b63      	ldr	r3, [pc, #396]	; (800c528 <LmHandlerConfigure+0x238>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	4798      	blx	r3
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	4a5e      	ldr	r2, [pc, #376]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3a6:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800c3a8:	2306      	movs	r3, #6
 800c3aa:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c3ac:	4b5c      	ldr	r3, [pc, #368]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c3b2:	f107 0314 	add.w	r3, r7, #20
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f004 ff7c 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c3bc:	4b58      	ldr	r3, [pc, #352]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4b57      	ldr	r3, [pc, #348]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3c4:	785b      	ldrb	r3, [r3, #1]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4b55      	ldr	r3, [pc, #340]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3ca:	789b      	ldrb	r3, [r3, #2]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	4b54      	ldr	r3, [pc, #336]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3d0:	78db      	ldrb	r3, [r3, #3]
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	4b52      	ldr	r3, [pc, #328]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3d6:	791b      	ldrb	r3, [r3, #4]
 800c3d8:	461d      	mov	r5, r3
 800c3da:	4b51      	ldr	r3, [pc, #324]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3dc:	795b      	ldrb	r3, [r3, #5]
 800c3de:	461e      	mov	r6, r3
 800c3e0:	4b4f      	ldr	r3, [pc, #316]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3e2:	799b      	ldrb	r3, [r3, #6]
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	4b4e      	ldr	r3, [pc, #312]	; (800c520 <LmHandlerConfigure+0x230>)
 800c3e8:	79db      	ldrb	r3, [r3, #7]
 800c3ea:	9307      	str	r3, [sp, #28]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	9306      	str	r3, [sp, #24]
 800c3f0:	9605      	str	r6, [sp, #20]
 800c3f2:	9504      	str	r5, [sp, #16]
 800c3f4:	9403      	str	r4, [sp, #12]
 800c3f6:	9002      	str	r0, [sp, #8]
 800c3f8:	9101      	str	r1, [sp, #4]
 800c3fa:	9200      	str	r2, [sp, #0]
 800c3fc:	4b4b      	ldr	r3, [pc, #300]	; (800c52c <LmHandlerConfigure+0x23c>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	2100      	movs	r1, #0
 800c402:	2002      	movs	r0, #2
 800c404:	f00e f956 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c408:	4b45      	ldr	r3, [pc, #276]	; (800c520 <LmHandlerConfigure+0x230>)
 800c40a:	7a1b      	ldrb	r3, [r3, #8]
 800c40c:	461a      	mov	r2, r3
 800c40e:	4b44      	ldr	r3, [pc, #272]	; (800c520 <LmHandlerConfigure+0x230>)
 800c410:	7a5b      	ldrb	r3, [r3, #9]
 800c412:	4619      	mov	r1, r3
 800c414:	4b42      	ldr	r3, [pc, #264]	; (800c520 <LmHandlerConfigure+0x230>)
 800c416:	7a9b      	ldrb	r3, [r3, #10]
 800c418:	4618      	mov	r0, r3
 800c41a:	4b41      	ldr	r3, [pc, #260]	; (800c520 <LmHandlerConfigure+0x230>)
 800c41c:	7adb      	ldrb	r3, [r3, #11]
 800c41e:	461c      	mov	r4, r3
 800c420:	4b3f      	ldr	r3, [pc, #252]	; (800c520 <LmHandlerConfigure+0x230>)
 800c422:	7b1b      	ldrb	r3, [r3, #12]
 800c424:	461d      	mov	r5, r3
 800c426:	4b3e      	ldr	r3, [pc, #248]	; (800c520 <LmHandlerConfigure+0x230>)
 800c428:	7b5b      	ldrb	r3, [r3, #13]
 800c42a:	461e      	mov	r6, r3
 800c42c:	4b3c      	ldr	r3, [pc, #240]	; (800c520 <LmHandlerConfigure+0x230>)
 800c42e:	7b9b      	ldrb	r3, [r3, #14]
 800c430:	603b      	str	r3, [r7, #0]
 800c432:	4b3b      	ldr	r3, [pc, #236]	; (800c520 <LmHandlerConfigure+0x230>)
 800c434:	7bdb      	ldrb	r3, [r3, #15]
 800c436:	9307      	str	r3, [sp, #28]
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	9306      	str	r3, [sp, #24]
 800c43c:	9605      	str	r6, [sp, #20]
 800c43e:	9504      	str	r5, [sp, #16]
 800c440:	9403      	str	r4, [sp, #12]
 800c442:	9002      	str	r0, [sp, #8]
 800c444:	9101      	str	r1, [sp, #4]
 800c446:	9200      	str	r2, [sp, #0]
 800c448:	4b39      	ldr	r3, [pc, #228]	; (800c530 <LmHandlerConfigure+0x240>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	2100      	movs	r1, #0
 800c44e:	2002      	movs	r0, #2
 800c450:	f00e f930 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800c454:	4b37      	ldr	r3, [pc, #220]	; (800c534 <LmHandlerConfigure+0x244>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	461a      	mov	r2, r3
 800c45a:	4b37      	ldr	r3, [pc, #220]	; (800c538 <LmHandlerConfigure+0x248>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	4619      	mov	r1, r3
 800c460:	4b36      	ldr	r3, [pc, #216]	; (800c53c <LmHandlerConfigure+0x24c>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	4618      	mov	r0, r3
 800c466:	4b36      	ldr	r3, [pc, #216]	; (800c540 <LmHandlerConfigure+0x250>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	9002      	str	r0, [sp, #8]
 800c46e:	9101      	str	r1, [sp, #4]
 800c470:	9200      	str	r2, [sp, #0]
 800c472:	4b34      	ldr	r3, [pc, #208]	; (800c544 <LmHandlerConfigure+0x254>)
 800c474:	2200      	movs	r2, #0
 800c476:	2100      	movs	r1, #0
 800c478:	2002      	movs	r0, #2
 800c47a:	f00e f91b 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c47e:	230f      	movs	r3, #15
 800c480:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c482:	2301      	movs	r3, #1
 800c484:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c486:	f107 0314 	add.w	r3, r7, #20
 800c48a:	4618      	mov	r0, r3
 800c48c:	f004 ff12 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800c490:	2305      	movs	r3, #5
 800c492:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c494:	2300      	movs	r3, #0
 800c496:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c498:	f107 0314 	add.w	r3, r7, #20
 800c49c:	4618      	mov	r0, r3
 800c49e:	f004 ff09 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c4a2:	2310      	movs	r3, #16
 800c4a4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f004 ff00 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c4b4:	2304      	movs	r3, #4
 800c4b6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c4b8:	4b14      	ldr	r3, [pc, #80]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c4ba:	789b      	ldrb	r3, [r3, #2]
 800c4bc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c4be:	f107 0314 	add.w	r3, r7, #20
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f004 fef6 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c4c8:	230f      	movs	r3, #15
 800c4ca:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c4cc:	4b0f      	ldr	r3, [pc, #60]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	f107 020c 	add.w	r2, r7, #12
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f007 fcc6 	bl	8013e68 <RegionGetPhyParam>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	bf14      	ite	ne
 800c4e6:	2301      	movne	r3, #1
 800c4e8:	2300      	moveq	r3, #0
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c4ee:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800c4f0:	2014      	movs	r0, #20
 800c4f2:	f000 fa6f 	bl	800c9d4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c4f6:	4b05      	ldr	r3, [pc, #20]	; (800c50c <LmHandlerConfigure+0x21c>)
 800c4f8:	795b      	ldrb	r3, [r3, #5]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f005 fc4e 	bl	8011d9c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3744      	adds	r7, #68	; 0x44
 800c506:	46bd      	mov	sp, r7
 800c508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200002e0 	.word	0x200002e0
 800c510:	20000304 	.word	0x20000304
 800c514:	200002f4 	.word	0x200002f4
 800c518:	0801b2e0 	.word	0x0801b2e0
 800c51c:	20000422 	.word	0x20000422
 800c520:	200000a0 	.word	0x200000a0
 800c524:	200000a8 	.word	0x200000a8
 800c528:	200002f0 	.word	0x200002f0
 800c52c:	0801b32c 	.word	0x0801b32c
 800c530:	0801b368 	.word	0x0801b368
 800c534:	200000b7 	.word	0x200000b7
 800c538:	200000b6 	.word	0x200000b6
 800c53c:	200000b5 	.word	0x200000b5
 800c540:	200000b4 	.word	0x200000b4
 800c544:	0801b3a4 	.word	0x0801b3a4

0800c548 <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c54c:	f002 f9b8 	bl	800e8c0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c550:	f000 fc9a 	bl	800ce88 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800c554:	f000 fcee 	bl	800cf34 <NvmDataMgmtStore>
}
 800c558:	bf00      	nop
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b090      	sub	sp, #64	; 0x40
 800c560:	af00      	add	r7, sp, #0
 800c562:	4603      	mov	r3, r0
 800c564:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d111      	bne.n	800c590 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c56c:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <LmHandlerJoin+0xa0>)
 800c56e:	2202      	movs	r2, #2
 800c570:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800c572:	f004 fcab 	bl	8010ecc <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800c576:	2301      	movs	r3, #1
 800c578:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c57a:	4b21      	ldr	r3, [pc, #132]	; (800c600 <LmHandlerJoin+0xa4>)
 800c57c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c580:	b2db      	uxtb	r3, r3
 800c582:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c584:	f107 0308 	add.w	r3, r7, #8
 800c588:	4618      	mov	r0, r3
 800c58a:	f005 f9d1 	bl	8011930 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800c58e:	e030      	b.n	800c5f2 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c590:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <LmHandlerJoin+0xa0>)
 800c592:	2201      	movs	r2, #1
 800c594:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c596:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <LmHandlerJoin+0xa4>)
 800c598:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c59c:	4b17      	ldr	r3, [pc, #92]	; (800c5fc <LmHandlerJoin+0xa0>)
 800c59e:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c5a0:	4b16      	ldr	r3, [pc, #88]	; (800c5fc <LmHandlerJoin+0xa0>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800c5a6:	4b17      	ldr	r3, [pc, #92]	; (800c604 <LmHandlerJoin+0xa8>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	f083 0301 	eor.w	r3, r3, #1
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d008      	beq.n	800c5c6 <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c5b4:	2327      	movs	r3, #39	; 0x27
 800c5b6:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c5b8:	4b13      	ldr	r3, [pc, #76]	; (800c608 <LmHandlerJoin+0xac>)
 800c5ba:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c5bc:	f107 031c 	add.w	r3, r7, #28
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f004 fe77 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c5c6:	f004 fc81 	bl	8010ecc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c5d4:	f107 031c 	add.w	r3, r7, #28
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f004 fe6b 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c5de:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <LmHandlerJoin+0xb0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	4805      	ldr	r0, [pc, #20]	; (800c5fc <LmHandlerJoin+0xa0>)
 800c5e6:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c5e8:	4b05      	ldr	r3, [pc, #20]	; (800c600 <LmHandlerJoin+0xa4>)
 800c5ea:	785b      	ldrb	r3, [r3, #1]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f917 	bl	800c820 <LmHandlerRequestClass>
}
 800c5f2:	bf00      	nop
 800c5f4:	3740      	adds	r7, #64	; 0x40
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	200000c4 	.word	0x200000c4
 800c600:	200002e0 	.word	0x200002e0
 800c604:	20000422 	.word	0x20000422
 800c608:	01000300 	.word	0x01000300
 800c60c:	200002f0 	.word	0x200002f0

0800c610 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08a      	sub	sp, #40	; 0x28
 800c614:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c616:	2301      	movs	r3, #1
 800c618:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c61a:	463b      	mov	r3, r7
 800c61c:	4618      	mov	r0, r3
 800c61e:	f004 fceb 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c630:	793b      	ldrb	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c636:	2300      	movs	r3, #0
 800c638:	e002      	b.n	800c640 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c63e:	2300      	movs	r3, #0
    }
}
 800c640:	4618      	mov	r0, r3
 800c642:	3728      	adds	r7, #40	; 0x28
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b08c      	sub	sp, #48	; 0x30
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	461a      	mov	r2, r3
 800c654:	460b      	mov	r3, r1
 800c656:	72fb      	strb	r3, [r7, #11]
 800c658:	4613      	mov	r3, r2
 800c65a:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c65c:	23ff      	movs	r3, #255	; 0xff
 800c65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c662:	f001 fe97 	bl	800e394 <LoRaMacIsBusy>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c66c:	f06f 0301 	mvn.w	r3, #1
 800c670:	e0b4      	b.n	800c7dc <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c672:	f7ff ffcd 	bl	800c610 <LmHandlerJoinStatus>
 800c676:	4603      	mov	r3, r0
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d007      	beq.n	800c68c <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800c67c:	4b59      	ldr	r3, [pc, #356]	; (800c7e4 <LmHandlerSend+0x19c>)
 800c67e:	789b      	ldrb	r3, [r3, #2]
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff ff6b 	bl	800c55c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c686:	f06f 0302 	mvn.w	r3, #2
 800c68a:	e0a7      	b.n	800c7dc <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c68c:	4b56      	ldr	r3, [pc, #344]	; (800c7e8 <LmHandlerSend+0x1a0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	4798      	blx	r3
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00d      	beq.n	800c6b6 <LmHandlerSend+0x6e>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	4b52      	ldr	r3, [pc, #328]	; (800c7e8 <LmHandlerSend+0x1a0>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d006      	beq.n	800c6b6 <LmHandlerSend+0x6e>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c6b0:	f06f 0303 	mvn.w	r3, #3
 800c6b4:	e092      	b.n	800c7dc <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c6b6:	4b4d      	ldr	r3, [pc, #308]	; (800c7ec <LmHandlerSend+0x1a4>)
 800c6b8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800c6bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	f107 0214 	add.w	r2, r7, #20
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f004 fc0c 	bl	8010ee8 <LoRaMacQueryTxPossible>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d009      	beq.n	800c6ea <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800c6d6:	4b46      	ldr	r3, [pc, #280]	; (800c7f0 <LmHandlerSend+0x1a8>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c6e8:	e017      	b.n	800c71a <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800c6ea:	4a41      	ldr	r2, [pc, #260]	; (800c7f0 <LmHandlerSend+0x1a8>)
 800c6ec:	7afb      	ldrb	r3, [r7, #11]
 800c6ee:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	785b      	ldrb	r3, [r3, #1]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d102      	bne.n	800c710 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c70a:	2300      	movs	r3, #0
 800c70c:	763b      	strb	r3, [r7, #24]
 800c70e:	e004      	b.n	800c71a <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800c710:	2301      	movs	r3, #1
 800c712:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c714:	2308      	movs	r3, #8
 800c716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800c71a:	4b35      	ldr	r3, [pc, #212]	; (800c7f0 <LmHandlerSend+0x1a8>)
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	330c      	adds	r3, #12
 800c720:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c724:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c728:	4b30      	ldr	r3, [pc, #192]	; (800c7ec <LmHandlerSend+0x1a4>)
 800c72a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c72e:	4b30      	ldr	r3, [pc, #192]	; (800c7f0 <LmHandlerSend+0x1a8>)
 800c730:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c732:	7aba      	ldrb	r2, [r7, #10]
 800c734:	f107 0318 	add.w	r3, r7, #24
 800c738:	4611      	mov	r1, r2
 800c73a:	4618      	mov	r0, r3
 800c73c:	f005 fa38 	bl	8011bb0 <LoRaMacMcpsRequest>
 800c740:	4603      	mov	r3, r0
 800c742:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800c752:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c756:	2b11      	cmp	r3, #17
 800c758:	d83a      	bhi.n	800c7d0 <LmHandlerSend+0x188>
 800c75a:	a201      	add	r2, pc, #4	; (adr r2, 800c760 <LmHandlerSend+0x118>)
 800c75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c760:	0800c7a9 	.word	0x0800c7a9
 800c764:	0800c7b1 	.word	0x0800c7b1
 800c768:	0800c7d1 	.word	0x0800c7d1
 800c76c:	0800c7d1 	.word	0x0800c7d1
 800c770:	0800c7d1 	.word	0x0800c7d1
 800c774:	0800c7d1 	.word	0x0800c7d1
 800c778:	0800c7d1 	.word	0x0800c7d1
 800c77c:	0800c7b9 	.word	0x0800c7b9
 800c780:	0800c7d1 	.word	0x0800c7d1
 800c784:	0800c7d1 	.word	0x0800c7d1
 800c788:	0800c7d1 	.word	0x0800c7d1
 800c78c:	0800c7c9 	.word	0x0800c7c9
 800c790:	0800c7d1 	.word	0x0800c7d1
 800c794:	0800c7d1 	.word	0x0800c7d1
 800c798:	0800c7b1 	.word	0x0800c7b1
 800c79c:	0800c7b1 	.word	0x0800c7b1
 800c7a0:	0800c7b1 	.word	0x0800c7b1
 800c7a4:	0800c7c1 	.word	0x0800c7c1
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7ae:	e013      	b.n	800c7d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c7b0:	23fe      	movs	r3, #254	; 0xfe
 800c7b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7b6:	e00f      	b.n	800c7d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c7b8:	23fd      	movs	r3, #253	; 0xfd
 800c7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7be:	e00b      	b.n	800c7d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c7c0:	23fb      	movs	r3, #251	; 0xfb
 800c7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7c6:	e007      	b.n	800c7d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c7c8:	23fa      	movs	r3, #250	; 0xfa
 800c7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7ce:	e003      	b.n	800c7d8 <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c7d0:	23ff      	movs	r3, #255	; 0xff
 800c7d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c7d6:	bf00      	nop
    }

    return lmhStatus;
 800c7d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3730      	adds	r7, #48	; 0x30
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	200000c4 	.word	0x200000c4
 800c7e8:	200002cc 	.word	0x200002cc
 800c7ec:	200002e0 	.word	0x200002e0
 800c7f0:	20000318 	.word	0x20000318

0800c7f4 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c7fa:	230a      	movs	r3, #10
 800c7fc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c7fe:	463b      	mov	r3, r7
 800c800:	4618      	mov	r0, r3
 800c802:	f005 f895 	bl	8011930 <LoRaMacMlmeRequest>
 800c806:	4603      	mov	r3, r0
 800c808:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c810:	2300      	movs	r3, #0
 800c812:	e001      	b.n	800c818 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c814:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08c      	sub	sp, #48	; 0x30
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c830:	f001 fdb0 	bl	800e394 <LoRaMacIsBusy>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c83a:	f06f 0301 	mvn.w	r3, #1
 800c83e:	e07b      	b.n	800c938 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c840:	f7ff fee6 	bl	800c610 <LmHandlerJoinStatus>
 800c844:	4603      	mov	r3, r0
 800c846:	2b01      	cmp	r3, #1
 800c848:	d002      	beq.n	800c850 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c84a:	f06f 0302 	mvn.w	r3, #2
 800c84e:	e073      	b.n	800c938 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c850:	2300      	movs	r3, #0
 800c852:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c854:	f107 0308 	add.w	r3, r7, #8
 800c858:	4618      	mov	r0, r3
 800c85a:	f004 fbcd 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c864:	f04f 33ff 	mov.w	r3, #4294967295
 800c868:	e066      	b.n	800c938 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800c86a:	7b3b      	ldrb	r3, [r7, #12]
 800c86c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c870:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c874:	79fb      	ldrb	r3, [r7, #7]
 800c876:	429a      	cmp	r2, r3
 800c878:	d055      	beq.n	800c926 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d02c      	beq.n	800c8da <LmHandlerRequestClass+0xba>
 800c880:	2b02      	cmp	r3, #2
 800c882:	dc52      	bgt.n	800c92a <LmHandlerRequestClass+0x10a>
 800c884:	2b00      	cmp	r3, #0
 800c886:	d002      	beq.n	800c88e <LmHandlerRequestClass+0x6e>
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d022      	beq.n	800c8d2 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800c88c:	e04d      	b.n	800c92a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800c88e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c892:	2b00      	cmp	r3, #0
 800c894:	d04b      	beq.n	800c92e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c89a:	f107 0308 	add.w	r3, r7, #8
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f004 fd08 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10f      	bne.n	800c8ca <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 fb1f 	bl	800cef0 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c8b2:	4b23      	ldr	r3, [pc, #140]	; (800c940 <LmHandlerRequestClass+0x120>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d038      	beq.n	800c92e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c8bc:	4b20      	ldr	r3, [pc, #128]	; (800c940 <LmHandlerRequestClass+0x120>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c2:	79fa      	ldrb	r2, [r7, #7]
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
            break;
 800c8c8:	e031      	b.n	800c92e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c8ca:	23ff      	movs	r3, #255	; 0xff
 800c8cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8d0:	e02d      	b.n	800c92e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c8d2:	23ff      	movs	r3, #255	; 0xff
 800c8d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8d8:	e02c      	b.n	800c934 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800c8da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d003      	beq.n	800c8ea <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c8e2:	23ff      	movs	r3, #255	; 0xff
 800c8e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c8e8:	e023      	b.n	800c932 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800c8ea:	79fb      	ldrb	r3, [r7, #7]
 800c8ec:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c8ee:	f107 0308 	add.w	r3, r7, #8
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f004 fcde 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d10f      	bne.n	800c91e <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	4618      	mov	r0, r3
 800c902:	f000 faf5 	bl	800cef0 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c906:	4b0e      	ldr	r3, [pc, #56]	; (800c940 <LmHandlerRequestClass+0x120>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d010      	beq.n	800c932 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c910:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <LmHandlerRequestClass+0x120>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c916:	79fa      	ldrb	r2, [r7, #7]
 800c918:	4610      	mov	r0, r2
 800c91a:	4798      	blx	r3
            break;
 800c91c:	e009      	b.n	800c932 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c91e:	23ff      	movs	r3, #255	; 0xff
 800c920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c924:	e005      	b.n	800c932 <LmHandlerRequestClass+0x112>
        }
    }
 800c926:	bf00      	nop
 800c928:	e004      	b.n	800c934 <LmHandlerRequestClass+0x114>
            break;
 800c92a:	bf00      	nop
 800c92c:	e002      	b.n	800c934 <LmHandlerRequestClass+0x114>
            break;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <LmHandlerRequestClass+0x114>
            break;
 800c932:	bf00      	nop
    return errorStatus;
 800c934:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3730      	adds	r7, #48	; 0x30
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	200002f0 	.word	0x200002f0

0800c944 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08c      	sub	sp, #48	; 0x30
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c952:	f04f 33ff 	mov.w	r3, #4294967295
 800c956:	e010      	b.n	800c97a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c958:	2300      	movs	r3, #0
 800c95a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c95c:	f107 030c 	add.w	r3, r7, #12
 800c960:	4618      	mov	r0, r3
 800c962:	f004 fb49 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c96c:	f04f 33ff 	mov.w	r3, #4294967295
 800c970:	e003      	b.n	800c97a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c972:	7c3a      	ldrb	r2, [r7, #16]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3730      	adds	r7, #48	; 0x30
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
	...

0800c984 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08c      	sub	sp, #48	; 0x30
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c992:	f04f 33ff 	mov.w	r3, #4294967295
 800c996:	e016      	b.n	800c9c6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c998:	231f      	movs	r3, #31
 800c99a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c99c:	f107 030c 	add.w	r3, r7, #12
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f004 fb29 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	e009      	b.n	800c9c6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c9b2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f993 2000 	ldrsb.w	r2, [r3]
 800c9c0:	4b03      	ldr	r3, [pc, #12]	; (800c9d0 <LmHandlerGetTxDatarate+0x4c>)
 800c9c2:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3730      	adds	r7, #48	; 0x30
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	200002e0 	.word	0x200002e0

0800c9d4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b08c      	sub	sp, #48	; 0x30
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c9dc:	2322      	movs	r3, #34	; 0x22
 800c9de:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c9e4:	f107 030c 	add.w	r3, r7, #12
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f004 fc63 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d002      	beq.n	800c9fa <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f8:	e000      	b.n	800c9fc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3730      	adds	r7, #48	; 0x30
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ca0c:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <McpsConfirm+0x60>)
 800ca0e:	2201      	movs	r2, #1
 800ca10:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	785a      	ldrb	r2, [r3, #1]
 800ca16:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <McpsConfirm+0x60>)
 800ca18:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	789b      	ldrb	r3, [r3, #2]
 800ca1e:	b25a      	sxtb	r2, r3
 800ca20:	4b10      	ldr	r3, [pc, #64]	; (800ca64 <McpsConfirm+0x60>)
 800ca22:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	4a0e      	ldr	r2, [pc, #56]	; (800ca64 <McpsConfirm+0x60>)
 800ca2a:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <McpsConfirm+0x60>)
 800ca34:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <McpsConfirm+0x60>)
 800ca3e:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	791b      	ldrb	r3, [r3, #4]
 800ca44:	461a      	mov	r2, r3
 800ca46:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <McpsConfirm+0x60>)
 800ca48:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800ca4a:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <McpsConfirm+0x64>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	4804      	ldr	r0, [pc, #16]	; (800ca64 <McpsConfirm+0x60>)
 800ca52:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	2000      	movs	r0, #0
 800ca58:	f000 f99a 	bl	800cd90 <LmHandlerPackagesNotify>
}
 800ca5c:	bf00      	nop
 800ca5e:	3708      	adds	r7, #8
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	20000318 	.word	0x20000318
 800ca68:	200002f0 	.word	0x200002f0

0800ca6c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b088      	sub	sp, #32
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ca76:	2300      	movs	r3, #0
 800ca78:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ca7a:	4b32      	ldr	r3, [pc, #200]	; (800cb44 <McpsIndication+0xd8>)
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	785a      	ldrb	r2, [r3, #1]
 800ca84:	4b2f      	ldr	r3, [pc, #188]	; (800cb44 <McpsIndication+0xd8>)
 800ca86:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ca88:	4b2e      	ldr	r3, [pc, #184]	; (800cb44 <McpsIndication+0xd8>)
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d154      	bne.n	800cb3a <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	b25a      	sxtb	r2, r3
 800ca96:	4b2b      	ldr	r3, [pc, #172]	; (800cb44 <McpsIndication+0xd8>)
 800ca98:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caa0:	b25a      	sxtb	r2, r3
 800caa2:	4b28      	ldr	r3, [pc, #160]	; (800cb44 <McpsIndication+0xd8>)
 800caa4:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800caac:	4b25      	ldr	r3, [pc, #148]	; (800cb44 <McpsIndication+0xd8>)
 800caae:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	78db      	ldrb	r3, [r3, #3]
 800cab4:	b25a      	sxtb	r2, r3
 800cab6:	4b23      	ldr	r3, [pc, #140]	; (800cb44 <McpsIndication+0xd8>)
 800cab8:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	4a21      	ldr	r2, [pc, #132]	; (800cb44 <McpsIndication+0xd8>)
 800cac0:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7b1b      	ldrb	r3, [r3, #12]
 800cacc:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800cad4:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <McpsIndication+0xdc>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cada:	f107 0218 	add.w	r2, r7, #24
 800cade:	4919      	ldr	r1, [pc, #100]	; (800cb44 <McpsIndication+0xd8>)
 800cae0:	4610      	mov	r0, r2
 800cae2:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800cae4:	4b18      	ldr	r3, [pc, #96]	; (800cb48 <McpsIndication+0xdc>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caea:	2b00      	cmp	r3, #0
 800caec:	d007      	beq.n	800cafe <McpsIndication+0x92>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7e1b      	ldrb	r3, [r3, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800caf6:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <McpsIndication+0xdc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafc:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	2001      	movs	r0, #1
 800cb02:	f000 f945 	bl	800cd90 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800cb06:	f107 0317 	add.w	r3, r7, #23
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7ff ff1a 	bl	800c944 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	795b      	ldrb	r3, [r3, #5]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d111      	bne.n	800cb3c <McpsIndication+0xd0>
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10e      	bne.n	800cb3c <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800cb1e:	2300      	movs	r3, #0
 800cb20:	733b      	strb	r3, [r7, #12]
 800cb22:	2300      	movs	r3, #0
 800cb24:	737b      	strb	r3, [r7, #13]
 800cb26:	2300      	movs	r3, #0
 800cb28:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800cb2a:	f107 000c 	add.w	r0, r7, #12
 800cb2e:	2301      	movs	r3, #1
 800cb30:	2200      	movs	r2, #0
 800cb32:	2100      	movs	r1, #0
 800cb34:	f7ff fd88 	bl	800c648 <LmHandlerSend>
 800cb38:	e000      	b.n	800cb3c <McpsIndication+0xd0>
        return;
 800cb3a:	bf00      	nop
    }
}
 800cb3c:	3720      	adds	r7, #32
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	200000c8 	.word	0x200000c8
 800cb48:	200002f0 	.word	0x200002f0

0800cb4c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08c      	sub	sp, #48	; 0x30
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cb54:	4b28      	ldr	r3, [pc, #160]	; (800cbf8 <MlmeConfirm+0xac>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	785a      	ldrb	r2, [r3, #1]
 800cb5e:	4b26      	ldr	r3, [pc, #152]	; (800cbf8 <MlmeConfirm+0xac>)
 800cb60:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800cb62:	4b26      	ldr	r3, [pc, #152]	; (800cbfc <MlmeConfirm+0xb0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	4823      	ldr	r0, [pc, #140]	; (800cbf8 <MlmeConfirm+0xac>)
 800cb6a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	2002      	movs	r0, #2
 800cb70:	f000 f90e 	bl	800cd90 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	2b0a      	cmp	r3, #10
 800cb7a:	d035      	beq.n	800cbe8 <MlmeConfirm+0x9c>
 800cb7c:	2b0a      	cmp	r3, #10
 800cb7e:	dc35      	bgt.n	800cbec <MlmeConfirm+0xa0>
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d002      	beq.n	800cb8a <MlmeConfirm+0x3e>
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d023      	beq.n	800cbd0 <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cb88:	e030      	b.n	800cbec <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800cb8a:	2306      	movs	r3, #6
 800cb8c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cb8e:	f107 030c 	add.w	r3, r7, #12
 800cb92:	4618      	mov	r0, r3
 800cb94:	f004 fa30 	bl	8010ff8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	4a19      	ldr	r2, [pc, #100]	; (800cc00 <MlmeConfirm+0xb4>)
 800cb9c:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cb9e:	4819      	ldr	r0, [pc, #100]	; (800cc04 <MlmeConfirm+0xb8>)
 800cba0:	f7ff fef0 	bl	800c984 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	785b      	ldrb	r3, [r3, #1]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d108      	bne.n	800cbbe <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cbac:	4b15      	ldr	r3, [pc, #84]	; (800cc04 <MlmeConfirm+0xb8>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <MlmeConfirm+0xbc>)
 800cbb4:	785b      	ldrb	r3, [r3, #1]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff fe32 	bl	800c820 <LmHandlerRequestClass>
 800cbbc:	e002      	b.n	800cbc4 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cbbe:	4b11      	ldr	r3, [pc, #68]	; (800cc04 <MlmeConfirm+0xb8>)
 800cbc0:	22ff      	movs	r2, #255	; 0xff
 800cbc2:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cbc4:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <MlmeConfirm+0xb0>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	480e      	ldr	r0, [pc, #56]	; (800cc04 <MlmeConfirm+0xb8>)
 800cbcc:	4798      	blx	r3
        break;
 800cbce:	e00e      	b.n	800cbee <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800cbd0:	4b0e      	ldr	r3, [pc, #56]	; (800cc0c <MlmeConfirm+0xc0>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	7a1a      	ldrb	r2, [r3, #8]
 800cbda:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <MlmeConfirm+0xc0>)
 800cbdc:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7a5a      	ldrb	r2, [r3, #9]
 800cbe2:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <MlmeConfirm+0xc0>)
 800cbe4:	73da      	strb	r2, [r3, #15]
        break;
 800cbe6:	e002      	b.n	800cbee <MlmeConfirm+0xa2>
        break;
 800cbe8:	bf00      	nop
 800cbea:	e000      	b.n	800cbee <MlmeConfirm+0xa2>
        break;
 800cbec:	bf00      	nop
    }
}
 800cbee:	bf00      	nop
 800cbf0:	3730      	adds	r7, #48	; 0x30
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000318 	.word	0x20000318
 800cbfc:	200002f0 	.word	0x200002f0
 800cc00:	200000a0 	.word	0x200000a0
 800cc04:	200000c4 	.word	0x200000c4
 800cc08:	200002e0 	.word	0x200002e0
 800cc0c:	200000c8 	.word	0x200000c8

0800cc10 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cc1a:	4b22      	ldr	r3, [pc, #136]	; (800cca4 <MlmeIndication+0x94>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	785a      	ldrb	r2, [r3, #1]
 800cc24:	4b1f      	ldr	r3, [pc, #124]	; (800cca4 <MlmeIndication+0x94>)
 800cc26:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc2e:	b25a      	sxtb	r2, r3
 800cc30:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <MlmeIndication+0x94>)
 800cc32:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cc3a:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <MlmeIndication+0x94>)
 800cc3c:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	78db      	ldrb	r3, [r3, #3]
 800cc42:	b25a      	sxtb	r2, r3
 800cc44:	4b17      	ldr	r3, [pc, #92]	; (800cca4 <MlmeIndication+0x94>)
 800cc46:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800cc48:	4b16      	ldr	r3, [pc, #88]	; (800cca4 <MlmeIndication+0x94>)
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b0e      	cmp	r3, #14
 800cc4e:	d005      	beq.n	800cc5c <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cc50:	4b15      	ldr	r3, [pc, #84]	; (800cca8 <MlmeIndication+0x98>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	4913      	ldr	r1, [pc, #76]	; (800cca4 <MlmeIndication+0x94>)
 800cc58:	2000      	movs	r0, #0
 800cc5a:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b07      	cmp	r3, #7
 800cc62:	d117      	bne.n	800cc94 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800cc64:	2300      	movs	r3, #0
 800cc66:	723b      	strb	r3, [r7, #8]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	727b      	strb	r3, [r7, #9]
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800cc70:	4b0e      	ldr	r3, [pc, #56]	; (800ccac <MlmeIndication+0x9c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	4798      	blx	r3
 800cc78:	4603      	mov	r3, r0
 800cc7a:	f083 0301 	eor.w	r3, r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d009      	beq.n	800cc98 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800cc84:	f107 0008 	add.w	r0, r7, #8
 800cc88:	2301      	movs	r3, #1
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	f7ff fcdb 	bl	800c648 <LmHandlerSend>
            }
        }
        break;
 800cc92:	e001      	b.n	800cc98 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800cc94:	bf00      	nop
 800cc96:	e000      	b.n	800cc9a <MlmeIndication+0x8a>
        break;
 800cc98:	bf00      	nop
    }
}
 800cc9a:	bf00      	nop
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	200000c8 	.word	0x200000c8
 800cca8:	200002f0 	.word	0x200002f0
 800ccac:	200002cc 	.word	0x200002cc

0800ccb0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d103      	bne.n	800ccce <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ccc6:	f000 f943 	bl	800cf50 <LmhpCompliancePackageFactory>
 800ccca:	60f8      	str	r0, [r7, #12]
            break;
 800cccc:	e000      	b.n	800ccd0 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ccce:	bf00      	nop
        }
    }
    if( package != NULL )
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d02b      	beq.n	800cd2e <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	4918      	ldr	r1, [pc, #96]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	4a16      	ldr	r2, [pc, #88]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800cce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce8:	4a15      	ldr	r2, [pc, #84]	; (800cd40 <LmHandlerPackageRegister+0x90>)
 800ccea:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	4a13      	ldr	r2, [pc, #76]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800ccf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf4:	4a13      	ldr	r2, [pc, #76]	; (800cd44 <LmHandlerPackageRegister+0x94>)
 800ccf6:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	4a10      	ldr	r2, [pc, #64]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800ccfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd00:	4a11      	ldr	r2, [pc, #68]	; (800cd48 <LmHandlerPackageRegister+0x98>)
 800cd02:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cd04:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <LmHandlerPackageRegister+0x9c>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	490c      	ldr	r1, [pc, #48]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800cd0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cd10:	6912      	ldr	r2, [r2, #16]
 800cd12:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	4a09      	ldr	r2, [pc, #36]	; (800cd3c <LmHandlerPackageRegister+0x8c>)
 800cd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4a0c      	ldr	r2, [pc, #48]	; (800cd50 <LmHandlerPackageRegister+0xa0>)
 800cd20:	6851      	ldr	r1, [r2, #4]
 800cd22:	4a0b      	ldr	r2, [pc, #44]	; (800cd50 <LmHandlerPackageRegister+0xa0>)
 800cd24:	7852      	ldrb	r2, [r2, #1]
 800cd26:	6838      	ldr	r0, [r7, #0]
 800cd28:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e001      	b.n	800cd32 <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cd2e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200002cc 	.word	0x200002cc
 800cd40:	0800c55d 	.word	0x0800c55d
 800cd44:	0800c649 	.word	0x0800c649
 800cd48:	0800c7f5 	.word	0x0800c7f5
 800cd4c:	200002f0 	.word	0x200002f0
 800cd50:	200000d8 	.word	0x200000d8

0800cd54 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800cd5e:	79fb      	ldrb	r3, [r7, #7]
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	d80e      	bhi.n	800cd82 <LmHandlerPackageIsInitialized+0x2e>
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	4a09      	ldr	r2, [pc, #36]	; (800cd8c <LmHandlerPackageIsInitialized+0x38>)
 800cd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d007      	beq.n	800cd82 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <LmHandlerPackageIsInitialized+0x38>)
 800cd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	4798      	blx	r3
 800cd7e:	4603      	mov	r3, r0
 800cd80:	e000      	b.n	800cd84 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cd82:	2300      	movs	r3, #0
    }
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	200002cc 	.word	0x200002cc

0800cd90 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73fb      	strb	r3, [r7, #15]
 800cda0:	e067      	b.n	800ce72 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cda2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda6:	4a37      	ldr	r2, [pc, #220]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800cda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d051      	beq.n	800ce54 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cdb0:	79fb      	ldrb	r3, [r7, #7]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d03d      	beq.n	800ce32 <LmHandlerPackagesNotify+0xa2>
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	dc4e      	bgt.n	800ce58 <LmHandlerPackagesNotify+0xc8>
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <LmHandlerPackagesNotify+0x34>
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d011      	beq.n	800cde6 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800cdc2:	e049      	b.n	800ce58 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cdc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc8:	4a2e      	ldr	r2, [pc, #184]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800cdca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d043      	beq.n	800ce5c <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cdd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdd8:	4a2a      	ldr	r2, [pc, #168]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800cdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	6838      	ldr	r0, [r7, #0]
 800cde2:	4798      	blx	r3
                    break;
 800cde4:	e03a      	b.n	800ce5c <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdea:	4a26      	ldr	r2, [pc, #152]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800cdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d034      	beq.n	800ce60 <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800cdf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdfa:	4a22      	ldr	r2, [pc, #136]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800cdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce00:	781a      	ldrb	r2, [r3, #0]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d00a      	beq.n	800ce20 <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ce0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d126      	bne.n	800ce60 <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800ce12:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	4798      	blx	r3
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d01f      	beq.n	800ce60 <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ce20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce24:	4a17      	ldr	r2, [pc, #92]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800ce26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	6838      	ldr	r0, [r7, #0]
 800ce2e:	4798      	blx	r3
                    break;
 800ce30:	e016      	b.n	800ce60 <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ce32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce36:	4a13      	ldr	r2, [pc, #76]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800ce38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3c:	6a1b      	ldr	r3, [r3, #32]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d010      	beq.n	800ce64 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ce42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce46:	4a0f      	ldr	r2, [pc, #60]	; (800ce84 <LmHandlerPackagesNotify+0xf4>)
 800ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	6838      	ldr	r0, [r7, #0]
 800ce50:	4798      	blx	r3
                    break;
 800ce52:	e007      	b.n	800ce64 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800ce54:	bf00      	nop
 800ce56:	e006      	b.n	800ce66 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce58:	bf00      	nop
 800ce5a:	e004      	b.n	800ce66 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce5c:	bf00      	nop
 800ce5e:	e002      	b.n	800ce66 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce60:	bf00      	nop
 800ce62:	e000      	b.n	800ce66 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ce64:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	73fb      	strb	r3, [r7, #15]
 800ce72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	dd93      	ble.n	800cda2 <LmHandlerPackagesNotify+0x12>
    }
}
 800ce7a:	bf00      	nop
 800ce7c:	bf00      	nop
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	200002cc 	.word	0x200002cc

0800ce88 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ce8e:	2300      	movs	r3, #0
 800ce90:	71fb      	strb	r3, [r7, #7]
 800ce92:	e022      	b.n	800ceda <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ce94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce98:	4a14      	ldr	r2, [pc, #80]	; (800ceec <LmHandlerPackagesProcess+0x64>)
 800ce9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d015      	beq.n	800cece <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cea6:	4a11      	ldr	r2, [pc, #68]	; (800ceec <LmHandlerPackagesProcess+0x64>)
 800cea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceac:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00d      	beq.n	800cece <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff ff4d 	bl	800cd54 <LmHandlerPackageIsInitialized>
 800ceba:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d006      	beq.n	800cece <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cec4:	4a09      	ldr	r2, [pc, #36]	; (800ceec <LmHandlerPackagesProcess+0x64>)
 800cec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	3301      	adds	r3, #1
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	71fb      	strb	r3, [r7, #7]
 800ceda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cede:	2b04      	cmp	r3, #4
 800cee0:	ddd8      	ble.n	800ce94 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cee2:	bf00      	nop
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	200002cc 	.word	0x200002cc

0800cef0 <DisplayClassUpdate>:
        return LORAMAC_HANDLER_ERROR;
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	4603      	mov	r3, r0
 800cef8:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800cefa:	79fb      	ldrb	r3, [r7, #7]
 800cefc:	4a06      	ldr	r2, [pc, #24]	; (800cf18 <DisplayClassUpdate+0x28>)
 800cefe:	5cd3      	ldrb	r3, [r2, r3]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <DisplayClassUpdate+0x2c>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	2100      	movs	r1, #0
 800cf08:	2002      	movs	r0, #2
 800cf0a:	f00d fbd3 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800cf0e:	bf00      	nop
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	0801b3e8 	.word	0x0801b3e8
 800cf1c:	0801b3cc 	.word	0x0801b3cc

0800cf20 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cf2a:	bf00      	nop
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 800cf34:	b480      	push	{r7}
 800cf36:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 800cf38:	2300      	movs	r3, #0
#endif
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bc80      	pop	{r7}
 800cf40:	4770      	bx	lr

0800cf42 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 800cf42:	b480      	push	{r7}
 800cf44:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bc80      	pop	{r7}
 800cf4e:	4770      	bx	lr

0800cf50 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <LmhpCompliancePackageFactory+0x10>)
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bc80      	pop	{r7}
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	200000e0 	.word	0x200000e0

0800cf64 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00f      	beq.n	800cf98 <LmhpComplianceInit+0x34>
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00c      	beq.n	800cf98 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800cf7e:	4a0c      	ldr	r2, [pc, #48]	; (800cfb0 <LmhpComplianceInit+0x4c>)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cf84:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <LmhpComplianceInit+0x50>)
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cf8a:	4a0a      	ldr	r2, [pc, #40]	; (800cfb4 <LmhpComplianceInit+0x50>)
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cf90:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <LmhpComplianceInit+0x50>)
 800cf92:	2201      	movs	r2, #1
 800cf94:	701a      	strb	r2, [r3, #0]
 800cf96:	e006      	b.n	800cfa6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cf98:	4b05      	ldr	r3, [pc, #20]	; (800cfb0 <LmhpComplianceInit+0x4c>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <LmhpComplianceInit+0x50>)
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	701a      	strb	r2, [r3, #0]
    }
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr
 800cfb0:	20000450 	.word	0x20000450
 800cfb4:	2000043c 	.word	0x2000043c

0800cfb8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cfbc:	4b02      	ldr	r3, [pc, #8]	; (800cfc8 <LmhpComplianceIsInitialized+0x10>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bc80      	pop	{r7}
 800cfc6:	4770      	bx	lr
 800cfc8:	2000043c 	.word	0x2000043c

0800cfcc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cfd0:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <LmhpComplianceIsRunning+0x24>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	f083 0301 	eor.w	r3, r3, #1
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e001      	b.n	800cfe6 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cfe2:	4b03      	ldr	r3, [pc, #12]	; (800cff0 <LmhpComplianceIsRunning+0x24>)
 800cfe4:	785b      	ldrb	r3, [r3, #1]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bc80      	pop	{r7}
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	2000043c 	.word	0x2000043c

0800cff4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 800cffc:	4b0f      	ldr	r3, [pc, #60]	; (800d03c <LmhpComplianceOnMcpsConfirm+0x48>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f083 0301 	eor.w	r3, r3, #1
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d112      	bne.n	800d030 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d00a:	4b0c      	ldr	r3, [pc, #48]	; (800d03c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00f      	beq.n	800d032 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 800d016:	2b01      	cmp	r3, #1
 800d018:	d10b      	bne.n	800d032 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d007      	beq.n	800d032 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d024:	899b      	ldrh	r3, [r3, #12]
 800d026:	3301      	adds	r3, #1
 800d028:	b29a      	uxth	r2, r3
 800d02a:	4b04      	ldr	r3, [pc, #16]	; (800d03c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d02c:	819a      	strh	r2, [r3, #12]
 800d02e:	e000      	b.n	800d032 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d030:	bf00      	nop
    }
}
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	bc80      	pop	{r7}
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	2000043c 	.word	0x2000043c

0800d040 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d048:	4b12      	ldr	r3, [pc, #72]	; (800d094 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f083 0301 	eor.w	r3, r3, #1
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d116      	bne.n	800d084 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d056:	4b0f      	ldr	r3, [pc, #60]	; (800d094 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d058:	785b      	ldrb	r3, [r3, #1]
 800d05a:	f083 0301 	eor.w	r3, r3, #1
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b00      	cmp	r3, #0
 800d062:	d111      	bne.n	800d088 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	2b04      	cmp	r3, #4
 800d06a:	d10e      	bne.n	800d08a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d06e:	2201      	movs	r2, #1
 800d070:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	7a1a      	ldrb	r2, [r3, #8]
 800d076:	4b07      	ldr	r3, [pc, #28]	; (800d094 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d078:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	7a5a      	ldrb	r2, [r3, #9]
 800d07e:	4b05      	ldr	r3, [pc, #20]	; (800d094 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d080:	741a      	strb	r2, [r3, #16]
 800d082:	e002      	b.n	800d08a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d084:	bf00      	nop
 800d086:	e000      	b.n	800d08a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d088:	bf00      	nop
    }
}
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bc80      	pop	{r7}
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	2000043c 	.word	0x2000043c

0800d098 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d098:	b590      	push	{r4, r7, lr}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d09e:	4b33      	ldr	r3, [pc, #204]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	f083 0301 	eor.w	r3, r3, #1
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b0:	e058      	b.n	800d164 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 800d0b2:	4b2e      	ldr	r3, [pc, #184]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0b4:	785b      	ldrb	r3, [r3, #1]
 800d0b6:	f083 0301 	eor.w	r3, r3, #1
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e04f      	b.n	800d164 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d0c4:	4b29      	ldr	r3, [pc, #164]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0c6:	7b9b      	ldrb	r3, [r3, #14]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d019      	beq.n	800d100 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d0cc:	4b27      	ldr	r3, [pc, #156]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d0d2:	4b26      	ldr	r3, [pc, #152]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0d4:	2203      	movs	r2, #3
 800d0d6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d0d8:	4b24      	ldr	r3, [pc, #144]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d0e0:	4b22      	ldr	r3, [pc, #136]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	4a21      	ldr	r2, [pc, #132]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0e8:	7bd2      	ldrb	r2, [r2, #15]
 800d0ea:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d0ec:	4b1f      	ldr	r3, [pc, #124]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	3302      	adds	r3, #2
 800d0f2:	4a1e      	ldr	r2, [pc, #120]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0f4:	7c12      	ldrb	r2, [r2, #16]
 800d0f6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	709a      	strb	r2, [r3, #2]
 800d0fe:	e01c      	b.n	800d13a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d100:	4b1a      	ldr	r3, [pc, #104]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d102:	789b      	ldrb	r3, [r3, #2]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d005      	beq.n	800d114 <LmhpComplianceTxProcess+0x7c>
 800d108:	2b04      	cmp	r3, #4
 800d10a:	d116      	bne.n	800d13a <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 800d10c:	4b17      	ldr	r3, [pc, #92]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d10e:	2201      	movs	r2, #1
 800d110:	709a      	strb	r2, [r3, #2]
            break;
 800d112:	e012      	b.n	800d13a <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 800d114:	4b15      	ldr	r3, [pc, #84]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d116:	2202      	movs	r2, #2
 800d118:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d11a:	4b14      	ldr	r3, [pc, #80]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d11c:	899b      	ldrh	r3, [r3, #12]
 800d11e:	0a1b      	lsrs	r3, r3, #8
 800d120:	b29a      	uxth	r2, r3
 800d122:	4b12      	ldr	r3, [pc, #72]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	b2d2      	uxtb	r2, r2
 800d128:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d12a:	4b10      	ldr	r3, [pc, #64]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d12c:	899a      	ldrh	r2, [r3, #12]
 800d12e:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	3301      	adds	r3, #1
 800d134:	b2d2      	uxtb	r2, r2
 800d136:	701a      	strb	r2, [r3, #0]
            break;
 800d138:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d13a:	23e0      	movs	r3, #224	; 0xe0
 800d13c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d13e:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d140:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d142:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d144:	4b09      	ldr	r3, [pc, #36]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d146:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d148:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 800d14a:	4809      	ldr	r0, [pc, #36]	; (800d170 <LmhpComplianceTxProcess+0xd8>)
 800d14c:	f00d f83a 	bl	801a1c4 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 800d150:	4b08      	ldr	r3, [pc, #32]	; (800d174 <LmhpComplianceTxProcess+0xdc>)
 800d152:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800d154:	4b05      	ldr	r3, [pc, #20]	; (800d16c <LmhpComplianceTxProcess+0xd4>)
 800d156:	78db      	ldrb	r3, [r3, #3]
 800d158:	4619      	mov	r1, r3
 800d15a:	4638      	mov	r0, r7
 800d15c:	2301      	movs	r3, #1
 800d15e:	2200      	movs	r2, #0
 800d160:	47a0      	blx	r4
 800d162:	4603      	mov	r3, r0
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd90      	pop	{r4, r7, pc}
 800d16c:	2000043c 	.word	0x2000043c
 800d170:	20000424 	.word	0x20000424
 800d174:	200000e0 	.word	0x200000e0

0800d178 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b0a2      	sub	sp, #136	; 0x88
 800d17c:	af02      	add	r7, sp, #8
 800d17e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d180:	4bae      	ldr	r3, [pc, #696]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	f083 0301 	eor.w	r3, r3, #1
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f040 81c0 	bne.w	800d510 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	7b5b      	ldrb	r3, [r3, #13]
 800d194:	f083 0301 	eor.w	r3, r3, #1
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f040 81ba 	bne.w	800d514 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 800d1a0:	4ba6      	ldr	r3, [pc, #664]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1a2:	785b      	ldrb	r3, [r3, #1]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00c      	beq.n	800d1c2 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	7b9b      	ldrb	r3, [r3, #14]
 800d1ac:	f083 0301 	eor.w	r3, r3, #1
 800d1b0:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d005      	beq.n	800d1c2 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d1b6:	4ba1      	ldr	r3, [pc, #644]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1b8:	899b      	ldrh	r3, [r3, #12]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	4b9f      	ldr	r3, [pc, #636]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1c0:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	78db      	ldrb	r3, [r3, #3]
 800d1c6:	2be0      	cmp	r3, #224	; 0xe0
 800d1c8:	f040 81a6 	bne.w	800d518 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d1cc:	4b9b      	ldr	r3, [pc, #620]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d1ce:	785b      	ldrb	r3, [r3, #1]
 800d1d0:	f083 0301 	eor.w	r3, r3, #1
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d060      	beq.n	800d29c <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	7b1b      	ldrb	r3, [r3, #12]
 800d1de:	2b04      	cmp	r3, #4
 800d1e0:	f040 819f 	bne.w	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	f040 8199 	bne.w	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	f040 8192 	bne.w	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	3302      	adds	r3, #2
 800d204:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d206:	2b01      	cmp	r3, #1
 800d208:	f040 818b 	bne.w	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	3303      	adds	r3, #3
 800d212:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d214:	2b01      	cmp	r3, #1
 800d216:	f040 8184 	bne.w	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 800d21a:	4b88      	ldr	r3, [pc, #544]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d220:	4b86      	ldr	r3, [pc, #536]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d222:	22e0      	movs	r2, #224	; 0xe0
 800d224:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d226:	4b85      	ldr	r3, [pc, #532]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d228:	2202      	movs	r2, #2
 800d22a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d22c:	4b83      	ldr	r3, [pc, #524]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d22e:	2200      	movs	r2, #0
 800d230:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d232:	4b82      	ldr	r3, [pc, #520]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d234:	2200      	movs	r2, #0
 800d236:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d238:	4b80      	ldr	r3, [pc, #512]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d23e:	4b7f      	ldr	r3, [pc, #508]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d240:	2200      	movs	r2, #0
 800d242:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d244:	4b7d      	ldr	r3, [pc, #500]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d246:	2201      	movs	r2, #1
 800d248:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d24a:	4b7c      	ldr	r3, [pc, #496]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d24c:	2201      	movs	r2, #1
 800d24e:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 800d250:	2304      	movs	r3, #4
 800d252:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800d254:	2301      	movs	r3, #1
 800d256:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d258:	f107 0308 	add.w	r3, r7, #8
 800d25c:	4618      	mov	r0, r3
 800d25e:	f004 f829 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 800d262:	2000      	movs	r0, #0
 800d264:	f004 fd9a 	bl	8011d9c <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d268:	4b75      	ldr	r3, [pc, #468]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d272:	4b73      	ldr	r3, [pc, #460]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d27a:	2300      	movs	r3, #0
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	4b71      	ldr	r3, [pc, #452]	; (800d444 <LmhpComplianceOnMcpsIndication+0x2cc>)
 800d280:	2200      	movs	r2, #0
 800d282:	f04f 31ff 	mov.w	r1, #4294967295
 800d286:	4870      	ldr	r0, [pc, #448]	; (800d448 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d288:	f00c ff66 	bl	801a158 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d28c:	f241 3188 	movw	r1, #5000	; 0x1388
 800d290:	486d      	ldr	r0, [pc, #436]	; (800d448 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d292:	f00d f875 	bl	801a380 <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 800d296:	f7ff feff 	bl	800d098 <LmhpComplianceTxProcess>
 800d29a:	e142      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	781a      	ldrb	r2, [r3, #0]
 800d2a2:	4b66      	ldr	r3, [pc, #408]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2a4:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d2a6:	4b65      	ldr	r3, [pc, #404]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2a8:	789b      	ldrb	r3, [r3, #2]
 800d2aa:	2b0a      	cmp	r3, #10
 800d2ac:	f200 8136 	bhi.w	800d51c <LmhpComplianceOnMcpsIndication+0x3a4>
 800d2b0:	a201      	add	r2, pc, #4	; (adr r2, 800d2b8 <LmhpComplianceOnMcpsIndication+0x140>)
 800d2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b6:	bf00      	nop
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	0800d32f 	.word	0x0800d32f
 800d2c0:	0800d337 	.word	0x0800d337
 800d2c4:	0800d345 	.word	0x0800d345
 800d2c8:	0800d353 	.word	0x0800d353
 800d2cc:	0800d3ab 	.word	0x0800d3ab
 800d2d0:	0800d3bd 	.word	0x0800d3bd
 800d2d4:	0800d40d 	.word	0x0800d40d
 800d2d8:	0800d4c9 	.word	0x0800d4c9
 800d2dc:	0800d4db 	.word	0x0800d4db
 800d2e0:	0800d4f5 	.word	0x0800d4f5
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 800d2e4:	4858      	ldr	r0, [pc, #352]	; (800d448 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d2e6:	f00c ffdb 	bl	801a2a0 <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d2ea:	4b54      	ldr	r3, [pc, #336]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d2f0:	4b52      	ldr	r3, [pc, #328]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d2f6:	2304      	movs	r3, #4
 800d2f8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d2fa:	4b51      	ldr	r3, [pc, #324]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d302:	f107 0308 	add.w	r3, r7, #8
 800d306:	4618      	mov	r0, r3
 800d308:	f003 ffd4 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d30c:	4b4c      	ldr	r3, [pc, #304]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	785b      	ldrb	r3, [r3, #1]
 800d312:	4618      	mov	r0, r3
 800d314:	f004 fd42 	bl	8011d9c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d318:	4b49      	ldr	r3, [pc, #292]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 80fe 	beq.w	800d520 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d324:	4b46      	ldr	r3, [pc, #280]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	4798      	blx	r3
                }
            }
            break;
 800d32c:	e0f8      	b.n	800d520 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 800d32e:	4b43      	ldr	r3, [pc, #268]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d330:	2202      	movs	r2, #2
 800d332:	719a      	strb	r2, [r3, #6]
            break;
 800d334:	e0f5      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 800d336:	4b41      	ldr	r3, [pc, #260]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d338:	2201      	movs	r2, #1
 800d33a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d33c:	4b3f      	ldr	r3, [pc, #252]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d33e:	2201      	movs	r2, #1
 800d340:	709a      	strb	r2, [r3, #2]
            break;
 800d342:	e0ee      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 800d344:	4b3d      	ldr	r3, [pc, #244]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d346:	2200      	movs	r2, #0
 800d348:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 800d34a:	4b3c      	ldr	r3, [pc, #240]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d34c:	2201      	movs	r2, #1
 800d34e:	709a      	strb	r2, [r3, #2]
            break;
 800d350:	e0e7      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7b1a      	ldrb	r2, [r3, #12]
 800d356:	4b39      	ldr	r3, [pc, #228]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d358:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 800d35a:	4b38      	ldr	r3, [pc, #224]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	2204      	movs	r2, #4
 800d360:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d362:	2301      	movs	r3, #1
 800d364:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d368:	e012      	b.n	800d390 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	689a      	ldr	r2, [r3, #8]
 800d36e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d372:	4413      	add	r3, r2
 800d374:	781a      	ldrb	r2, [r3, #0]
 800d376:	4b31      	ldr	r3, [pc, #196]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d378:	6899      	ldr	r1, [r3, #8]
 800d37a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d37e:	440b      	add	r3, r1
 800d380:	3201      	adds	r2, #1
 800d382:	b2d2      	uxtb	r2, r2
 800d384:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d386:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d38a:	3301      	adds	r3, #1
 800d38c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d390:	4b2a      	ldr	r3, [pc, #168]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d392:	795a      	ldrb	r2, [r3, #5]
 800d394:	4b29      	ldr	r3, [pc, #164]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d396:	799b      	ldrb	r3, [r3, #6]
 800d398:	4293      	cmp	r3, r2
 800d39a:	bf28      	it	cs
 800d39c:	4613      	movcs	r3, r2
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d3e0      	bcc.n	800d36a <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 800d3a8:	e0bb      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 800d3b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f004 fabb 	bl	8011930 <LoRaMacMlmeRequest>
            }
            break;
 800d3ba:	e0b2      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 800d3bc:	4822      	ldr	r0, [pc, #136]	; (800d448 <LmhpComplianceOnMcpsIndication+0x2d0>)
 800d3be:	f00c ff6f 	bl	801a2a0 <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 800d3c2:	4b1e      	ldr	r3, [pc, #120]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 800d3c8:	4b1c      	ldr	r3, [pc, #112]	; (800d43c <LmhpComplianceOnMcpsIndication+0x2c4>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 800d3ce:	2304      	movs	r3, #4
 800d3d0:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d3d2:	4b1b      	ldr	r3, [pc, #108]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d3da:	f107 0308 	add.w	r3, r7, #8
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f003 ff68 	bl	80112b4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d3e4:	4b16      	ldr	r3, [pc, #88]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	785b      	ldrb	r3, [r3, #1]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f004 fcd6 	bl	8011d9c <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800d3f0:	4b13      	ldr	r3, [pc, #76]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d003      	beq.n	800d402 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 800d3fa:	4b11      	ldr	r3, [pc, #68]	; (800d440 <LmhpComplianceOnMcpsIndication+0x2c8>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 800d402:	4b12      	ldr	r3, [pc, #72]	; (800d44c <LmhpComplianceOnMcpsIndication+0x2d4>)
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	2002      	movs	r0, #2
 800d408:	4798      	blx	r3
            }
            break;
 800d40a:	e08a      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7b1b      	ldrb	r3, [r3, #12]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d11d      	bne.n	800d450 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 800d414:	2305      	movs	r3, #5
 800d416:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	3301      	adds	r3, #1
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	021b      	lsls	r3, r3, #8
 800d424:	b21a      	sxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	3302      	adds	r3, #2
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	b21b      	sxth	r3, r3
 800d430:	4313      	orrs	r3, r2
 800d432:	b21b      	sxth	r3, r3
 800d434:	b29b      	uxth	r3, r3
 800d436:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800d43a:	e03c      	b.n	800d4b6 <LmhpComplianceOnMcpsIndication+0x33e>
 800d43c:	2000043c 	.word	0x2000043c
 800d440:	20000450 	.word	0x20000450
 800d444:	0800d539 	.word	0x0800d539
 800d448:	20000424 	.word	0x20000424
 800d44c:	200000e0 	.word	0x200000e0
                }
                else if( mcpsIndication->BufferSize == 7 )
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7b1b      	ldrb	r3, [r3, #12]
 800d454:	2b07      	cmp	r3, #7
 800d456:	d12e      	bne.n	800d4b6 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 800d458:	2306      	movs	r3, #6
 800d45a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	3301      	adds	r3, #1
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	b21a      	sxth	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	3302      	adds	r3, #2
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	b21b      	sxth	r3, r3
 800d474:	4313      	orrs	r3, r2
 800d476:	b21b      	sxth	r3, r3
 800d478:	b29b      	uxth	r3, r3
 800d47a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	3303      	adds	r3, #3
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	041a      	lsls	r2, r3, #16
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	3304      	adds	r3, #4
 800d48e:	781b      	ldrb	r3, [r3, #0]
 800d490:	021b      	lsls	r3, r3, #8
 800d492:	4313      	orrs	r3, r2
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	6892      	ldr	r2, [r2, #8]
 800d498:	3205      	adds	r2, #5
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	461a      	mov	r2, r3
 800d4a0:	2364      	movs	r3, #100	; 0x64
 800d4a2:	fb03 f302 	mul.w	r3, r3, r2
 800d4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	3306      	adds	r3, #6
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 800d4b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f004 fa38 	bl	8011930 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800d4c0:	4b19      	ldr	r3, [pc, #100]	; (800d528 <LmhpComplianceOnMcpsIndication+0x3b0>)
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	709a      	strb	r2, [r3, #2]
            }
            break;
 800d4c6:	e02c      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 800d4c8:	230a      	movs	r3, #10
 800d4ca:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 800d4ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f004 fa2c 	bl	8011930 <LoRaMacMlmeRequest>
            }
            break;
 800d4d8:	e023      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f003 fee1 	bl	80112b4 <LoRaMacMibSetRequestConfirm>
            }
            break;
 800d4f2:	e016      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d4f4:	230d      	movs	r3, #13
 800d4f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 800d504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d508:	4618      	mov	r0, r3
 800d50a:	f004 fa11 	bl	8011930 <LoRaMacMlmeRequest>
            }
            break;
 800d50e:	e008      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d510:	bf00      	nop
 800d512:	e006      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d514:	bf00      	nop
 800d516:	e004      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 800d518:	bf00      	nop
 800d51a:	e002      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 800d51c:	bf00      	nop
 800d51e:	e000      	b.n	800d522 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 800d520:	bf00      	nop
        }
    }
}
 800d522:	3780      	adds	r7, #128	; 0x80
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	2000043c 	.word	0x2000043c

0800d52c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d52c:	b480      	push	{r7}
 800d52e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d530:	bf00      	nop
 800d532:	46bd      	mov	sp, r7
 800d534:	bc80      	pop	{r7}
 800d536:	4770      	bx	lr

0800d538 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d540:	f7ff fdaa 	bl	800d098 <LmhpComplianceTxProcess>
}
 800d544:	bf00      	nop
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d552:	f00c ffbf 	bl	801a4d4 <UTIL_TIMER_GetCurrentTime>
 800d556:	4603      	mov	r3, r0
 800d558:	4a16      	ldr	r2, [pc, #88]	; (800d5b4 <OnRadioTxDone+0x68>)
 800d55a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d55c:	4c16      	ldr	r4, [pc, #88]	; (800d5b8 <OnRadioTxDone+0x6c>)
 800d55e:	463b      	mov	r3, r7
 800d560:	4618      	mov	r0, r3
 800d562:	f00c fa39 	bl	80199d8 <SysTimeGet>
 800d566:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d56a:	463a      	mov	r2, r7
 800d56c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d570:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d574:	4a11      	ldr	r2, [pc, #68]	; (800d5bc <OnRadioTxDone+0x70>)
 800d576:	7813      	ldrb	r3, [r2, #0]
 800d578:	f043 0310 	orr.w	r3, r3, #16
 800d57c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d57e:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <OnRadioTxDone+0x6c>)
 800d580:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00a      	beq.n	800d59e <OnRadioTxDone+0x52>
 800d588:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <OnRadioTxDone+0x6c>)
 800d58a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d594:	4b08      	ldr	r3, [pc, #32]	; (800d5b8 <OnRadioTxDone+0x6c>)
 800d596:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d59e:	4b08      	ldr	r3, [pc, #32]	; (800d5c0 <OnRadioTxDone+0x74>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	2002      	movs	r0, #2
 800d5a6:	f00d f885 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d5aa:	bf00      	nop
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd90      	pop	{r4, r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	200017a4 	.word	0x200017a4
 800d5b8:	20000454 	.word	0x20000454
 800d5bc:	20000ca8 	.word	0x20000ca8
 800d5c0:	0801b3ec 	.word	0x0801b3ec

0800d5c4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	817b      	strh	r3, [r7, #10]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	813b      	strh	r3, [r7, #8]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d5de:	f00c ff79 	bl	801a4d4 <UTIL_TIMER_GetCurrentTime>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	4a16      	ldr	r2, [pc, #88]	; (800d640 <OnRadioRxDone+0x7c>)
 800d5e6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d5e8:	4a15      	ldr	r2, [pc, #84]	; (800d640 <OnRadioRxDone+0x7c>)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d5ee:	4a14      	ldr	r2, [pc, #80]	; (800d640 <OnRadioRxDone+0x7c>)
 800d5f0:	897b      	ldrh	r3, [r7, #10]
 800d5f2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d5f4:	4a12      	ldr	r2, [pc, #72]	; (800d640 <OnRadioRxDone+0x7c>)
 800d5f6:	893b      	ldrh	r3, [r7, #8]
 800d5f8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d5fa:	4a11      	ldr	r2, [pc, #68]	; (800d640 <OnRadioRxDone+0x7c>)
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d600:	4a10      	ldr	r2, [pc, #64]	; (800d644 <OnRadioRxDone+0x80>)
 800d602:	7813      	ldrb	r3, [r2, #0]
 800d604:	f043 0308 	orr.w	r3, r3, #8
 800d608:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d60a:	4b0f      	ldr	r3, [pc, #60]	; (800d648 <OnRadioRxDone+0x84>)
 800d60c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d610:	2b00      	cmp	r3, #0
 800d612:	d00a      	beq.n	800d62a <OnRadioRxDone+0x66>
 800d614:	4b0c      	ldr	r3, [pc, #48]	; (800d648 <OnRadioRxDone+0x84>)
 800d616:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <OnRadioRxDone+0x84>)
 800d622:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d62a:	4b08      	ldr	r3, [pc, #32]	; (800d64c <OnRadioRxDone+0x88>)
 800d62c:	2201      	movs	r2, #1
 800d62e:	2100      	movs	r1, #0
 800d630:	2002      	movs	r0, #2
 800d632:	f00d f83f 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200017a8 	.word	0x200017a8
 800d644:	20000ca8 	.word	0x20000ca8
 800d648:	20000454 	.word	0x20000454
 800d64c:	0801b3fc 	.word	0x0801b3fc

0800d650 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d654:	4a0e      	ldr	r2, [pc, #56]	; (800d690 <OnRadioTxTimeout+0x40>)
 800d656:	7813      	ldrb	r3, [r2, #0]
 800d658:	f043 0304 	orr.w	r3, r3, #4
 800d65c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d65e:	4b0d      	ldr	r3, [pc, #52]	; (800d694 <OnRadioTxTimeout+0x44>)
 800d660:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00a      	beq.n	800d67e <OnRadioTxTimeout+0x2e>
 800d668:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <OnRadioTxTimeout+0x44>)
 800d66a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d674:	4b07      	ldr	r3, [pc, #28]	; (800d694 <OnRadioTxTimeout+0x44>)
 800d676:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d67e:	4b06      	ldr	r3, [pc, #24]	; (800d698 <OnRadioTxTimeout+0x48>)
 800d680:	2201      	movs	r2, #1
 800d682:	2100      	movs	r1, #0
 800d684:	2002      	movs	r0, #2
 800d686:	f00d f815 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d68a:	bf00      	nop
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000ca8 	.word	0x20000ca8
 800d694:	20000454 	.word	0x20000454
 800d698:	0801b40c 	.word	0x0801b40c

0800d69c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d6a0:	4a0b      	ldr	r2, [pc, #44]	; (800d6d0 <OnRadioRxError+0x34>)
 800d6a2:	7813      	ldrb	r3, [r2, #0]
 800d6a4:	f043 0302 	orr.w	r3, r3, #2
 800d6a8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6aa:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <OnRadioRxError+0x38>)
 800d6ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00a      	beq.n	800d6ca <OnRadioRxError+0x2e>
 800d6b4:	4b07      	ldr	r3, [pc, #28]	; (800d6d4 <OnRadioRxError+0x38>)
 800d6b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d004      	beq.n	800d6ca <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6c0:	4b04      	ldr	r3, [pc, #16]	; (800d6d4 <OnRadioRxError+0x38>)
 800d6c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	4798      	blx	r3
    }
}
 800d6ca:	bf00      	nop
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	20000ca8 	.word	0x20000ca8
 800d6d4:	20000454 	.word	0x20000454

0800d6d8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d6dc:	4a0e      	ldr	r2, [pc, #56]	; (800d718 <OnRadioRxTimeout+0x40>)
 800d6de:	7813      	ldrb	r3, [r2, #0]
 800d6e0:	f043 0301 	orr.w	r3, r3, #1
 800d6e4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d6e6:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <OnRadioRxTimeout+0x44>)
 800d6e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00a      	beq.n	800d706 <OnRadioRxTimeout+0x2e>
 800d6f0:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <OnRadioRxTimeout+0x44>)
 800d6f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d6fc:	4b07      	ldr	r3, [pc, #28]	; (800d71c <OnRadioRxTimeout+0x44>)
 800d6fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d706:	4b06      	ldr	r3, [pc, #24]	; (800d720 <OnRadioRxTimeout+0x48>)
 800d708:	2201      	movs	r2, #1
 800d70a:	2100      	movs	r1, #0
 800d70c:	2002      	movs	r0, #2
 800d70e:	f00c ffd1 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d712:	bf00      	nop
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20000ca8 	.word	0x20000ca8
 800d71c:	20000454 	.word	0x20000454
 800d720:	0801b41c 	.word	0x0801b41c

0800d724 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <UpdateRxSlotIdleState+0x28>)
 800d72a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d004      	beq.n	800d73c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d732:	4b07      	ldr	r3, [pc, #28]	; (800d750 <UpdateRxSlotIdleState+0x2c>)
 800d734:	2206      	movs	r2, #6
 800d736:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d73a:	e003      	b.n	800d744 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d73c:	4b04      	ldr	r3, [pc, #16]	; (800d750 <UpdateRxSlotIdleState+0x2c>)
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 800d744:	bf00      	nop
 800d746:	46bd      	mov	sp, r7
 800d748:	bc80      	pop	{r7}
 800d74a:	4770      	bx	lr
 800d74c:	2000095c 	.word	0x2000095c
 800d750:	20000454 	.word	0x20000454

0800d754 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08e      	sub	sp, #56	; 0x38
 800d758:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d75a:	4b44      	ldr	r3, [pc, #272]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d75c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d760:	2b02      	cmp	r3, #2
 800d762:	d002      	beq.n	800d76a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d764:	4b42      	ldr	r3, [pc, #264]	; (800d870 <ProcessRadioTxDone+0x11c>)
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800d76a:	4b42      	ldr	r3, [pc, #264]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d76c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800d770:	4619      	mov	r1, r3
 800d772:	4841      	ldr	r0, [pc, #260]	; (800d878 <ProcessRadioTxDone+0x124>)
 800d774:	f00c fe04 	bl	801a380 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d778:	483f      	ldr	r0, [pc, #252]	; (800d878 <ProcessRadioTxDone+0x124>)
 800d77a:	f00c fd23 	bl	801a1c4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800d77e:	4b3d      	ldr	r3, [pc, #244]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d780:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d784:	4619      	mov	r1, r3
 800d786:	483d      	ldr	r0, [pc, #244]	; (800d87c <ProcessRadioTxDone+0x128>)
 800d788:	f00c fdfa 	bl	801a380 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d78c:	483b      	ldr	r0, [pc, #236]	; (800d87c <ProcessRadioTxDone+0x128>)
 800d78e:	f00c fd19 	bl	801a1c4 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d792:	4b36      	ldr	r3, [pc, #216]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d794:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d004      	beq.n	800d7a6 <ProcessRadioTxDone+0x52>
 800d79c:	4b35      	ldr	r3, [pc, #212]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d79e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d019      	beq.n	800d7da <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d7a6:	2316      	movs	r3, #22
 800d7a8:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d7ac:	4b2f      	ldr	r3, [pc, #188]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d7ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7b2:	f107 0220 	add.w	r2, r7, #32
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f006 fb55 	bl	8013e68 <RegionGetPhyParam>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d7c2:	4b2c      	ldr	r3, [pc, #176]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d7c4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	482c      	ldr	r0, [pc, #176]	; (800d880 <ProcessRadioTxDone+0x12c>)
 800d7d0:	f00c fdd6 	bl	801a380 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d7d4:	482a      	ldr	r0, [pc, #168]	; (800d880 <ProcessRadioTxDone+0x12c>)
 800d7d6:	f00c fcf5 	bl	801a1c4 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d7da:	4b2a      	ldr	r3, [pc, #168]	; (800d884 <ProcessRadioTxDone+0x130>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a23      	ldr	r2, [pc, #140]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d7e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d7e2:	4b24      	ldr	r3, [pc, #144]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d7e4:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800d7e8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d7ea:	4b26      	ldr	r3, [pc, #152]	; (800d884 <ProcessRadioTxDone+0x130>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d7f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f00c f927 	bl	8019a48 <SysTimeGetMcuTime>
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	4b1b      	ldr	r3, [pc, #108]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d7fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d802:	9200      	str	r2, [sp, #0]
 800d804:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d808:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d80c:	ca06      	ldmia	r2, {r1, r2}
 800d80e:	f00c f87c 	bl	801990a <SysTimeSub>
 800d812:	f107 0314 	add.w	r3, r7, #20
 800d816:	463a      	mov	r2, r7
 800d818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d81c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d820:	4b14      	ldr	r3, [pc, #80]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d822:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800d826:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d828:	2301      	movs	r3, #1
 800d82a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d82c:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d82e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800d836:	2300      	movs	r3, #0
 800d838:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d83a:	4b0c      	ldr	r3, [pc, #48]	; (800d86c <ProcessRadioTxDone+0x118>)
 800d83c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d840:	f107 0208 	add.w	r2, r7, #8
 800d844:	4611      	mov	r1, r2
 800d846:	4618      	mov	r0, r3
 800d848:	f006 fb27 	bl	8013e9a <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800d84c:	4b09      	ldr	r3, [pc, #36]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d84e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d852:	f083 0301 	eor.w	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d85c:	4b05      	ldr	r3, [pc, #20]	; (800d874 <ProcessRadioTxDone+0x120>)
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 800d864:	bf00      	nop
 800d866:	3730      	adds	r7, #48	; 0x30
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	2000095c 	.word	0x2000095c
 800d870:	0801ba68 	.word	0x0801ba68
 800d874:	20000454 	.word	0x20000454
 800d878:	200007d4 	.word	0x200007d4
 800d87c:	200007ec 	.word	0x200007ec
 800d880:	2000084c 	.word	0x2000084c
 800d884:	200017a4 	.word	0x200017a4

0800d888 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d88c:	4b10      	ldr	r3, [pc, #64]	; (800d8d0 <PrepareRxDoneAbort+0x48>)
 800d88e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d896:	4a0e      	ldr	r2, [pc, #56]	; (800d8d0 <PrepareRxDoneAbort+0x48>)
 800d898:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800d89c:	4b0c      	ldr	r3, [pc, #48]	; (800d8d0 <PrepareRxDoneAbort+0x48>)
 800d89e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f001 f8f8 	bl	800ea9c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d8ac:	4a08      	ldr	r2, [pc, #32]	; (800d8d0 <PrepareRxDoneAbort+0x48>)
 800d8ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d8b2:	f043 0302 	orr.w	r3, r3, #2
 800d8b6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d8ba:	4a05      	ldr	r2, [pc, #20]	; (800d8d0 <PrepareRxDoneAbort+0x48>)
 800d8bc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800d8c0:	f043 0320 	orr.w	r3, r3, #32
 800d8c4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800d8c8:	f7ff ff2c 	bl	800d724 <UpdateRxSlotIdleState>
}
 800d8cc:	bf00      	nop
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	20000454 	.word	0x20000454

0800d8d4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d8d4:	b5b0      	push	{r4, r5, r7, lr}
 800d8d6:	b0a6      	sub	sp, #152	; 0x98
 800d8d8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d8da:	2313      	movs	r3, #19
 800d8dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d8e0:	4bb9      	ldr	r3, [pc, #740]	; (800dbc8 <ProcessRadioRxDone+0x2f4>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800d8e6:	4bb8      	ldr	r3, [pc, #736]	; (800dbc8 <ProcessRadioRxDone+0x2f4>)
 800d8e8:	891b      	ldrh	r3, [r3, #8]
 800d8ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 800d8ee:	4bb6      	ldr	r3, [pc, #728]	; (800dbc8 <ProcessRadioRxDone+0x2f4>)
 800d8f0:	895b      	ldrh	r3, [r3, #10]
 800d8f2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 800d8f6:	4bb4      	ldr	r3, [pc, #720]	; (800dbc8 <ProcessRadioRxDone+0x2f4>)
 800d8f8:	7b1b      	ldrb	r3, [r3, #12]
 800d8fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d908:	4bb0      	ldr	r3, [pc, #704]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800d90a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d90e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800d91e:	4bac      	ldr	r3, [pc, #688]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d920:	2200      	movs	r2, #0
 800d922:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 800d926:	4aaa      	ldr	r2, [pc, #680]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d928:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d92c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d930:	4aa7      	ldr	r2, [pc, #668]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d932:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d936:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d93a:	4ba5      	ldr	r3, [pc, #660]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d93c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 800d940:	4ba3      	ldr	r3, [pc, #652]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d942:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d946:	4ba2      	ldr	r3, [pc, #648]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 800d94e:	4ba0      	ldr	r3, [pc, #640]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d950:	2200      	movs	r2, #0
 800d952:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 800d956:	4b9e      	ldr	r3, [pc, #632]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d958:	2200      	movs	r2, #0
 800d95a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 800d95e:	4b9c      	ldr	r3, [pc, #624]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d960:	2200      	movs	r2, #0
 800d962:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 800d966:	4b9a      	ldr	r3, [pc, #616]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 800d96e:	4b98      	ldr	r3, [pc, #608]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d970:	2200      	movs	r2, #0
 800d972:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 800d976:	4b96      	ldr	r3, [pc, #600]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d97e:	4b94      	ldr	r3, [pc, #592]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d980:	2200      	movs	r2, #0
 800d982:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d986:	4b92      	ldr	r3, [pc, #584]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d988:	2200      	movs	r2, #0
 800d98a:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 800d98e:	4b90      	ldr	r3, [pc, #576]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d990:	2200      	movs	r2, #0
 800d992:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d996:	4b8e      	ldr	r3, [pc, #568]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d998:	2200      	movs	r2, #0
 800d99a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 800d99e:	4b8d      	ldr	r3, [pc, #564]	; (800dbd4 <ProcessRadioRxDone+0x300>)
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d9a4:	488c      	ldr	r0, [pc, #560]	; (800dbd8 <ProcessRadioRxDone+0x304>)
 800d9a6:	f00c fc7b 	bl	801a2a0 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d9aa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800d9b2:	f004 fb28 	bl	8012006 <LoRaMacClassBRxBeacon>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00a      	beq.n	800d9d2 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d9bc:	4a84      	ldr	r2, [pc, #528]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d9be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800d9c2:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d9c6:	4a82      	ldr	r2, [pc, #520]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d9c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9cc:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 800d9d0:	e3bf      	b.n	800e152 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d9d2:	4b7e      	ldr	r3, [pc, #504]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800d9d4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d11e      	bne.n	800da1a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d9dc:	f004 fb26 	bl	801202c <LoRaMacClassBIsPingExpected>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00a      	beq.n	800d9fc <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f004 fad7 	bl	8011f9a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	f004 faf8 	bl	8011fe2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d9f2:	4b77      	ldr	r3, [pc, #476]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800d9f4:	2204      	movs	r2, #4
 800d9f6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800d9fa:	e00e      	b.n	800da1a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d9fc:	f004 fb1d 	bl	801203a <LoRaMacClassBIsMulticastExpected>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d009      	beq.n	800da1a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da06:	2000      	movs	r0, #0
 800da08:	f004 fad1 	bl	8011fae <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800da0c:	2000      	movs	r0, #0
 800da0e:	f004 faf1 	bl	8011ff4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800da12:	4b6f      	ldr	r3, [pc, #444]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800da14:	2205      	movs	r2, #5
 800da16:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800da1a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 800da24:	461a      	mov	r2, r3
 800da26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da28:	4413      	add	r3, r2
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 800da30:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800da34:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	3b01      	subs	r3, #1
 800da3c:	2b06      	cmp	r3, #6
 800da3e:	f200 8362 	bhi.w	800e106 <ProcessRadioRxDone+0x832>
 800da42:	a201      	add	r2, pc, #4	; (adr r2, 800da48 <ProcessRadioRxDone+0x174>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800da65 	.word	0x0800da65
 800da4c:	0800e107 	.word	0x0800e107
 800da50:	0800dbe5 	.word	0x0800dbe5
 800da54:	0800e107 	.word	0x0800e107
 800da58:	0800dbdd 	.word	0x0800dbdd
 800da5c:	0800e107 	.word	0x0800e107
 800da60:	0800e0ad 	.word	0x0800e0ad
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800da64:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da68:	2b10      	cmp	r3, #16
 800da6a:	d806      	bhi.n	800da7a <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da6c:	4b58      	ldr	r3, [pc, #352]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da74:	f7ff ff08 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800da78:	e36b      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 800da7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800da7c:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 800da7e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800da82:	b2db      	uxtb	r3, r3
 800da84:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800da86:	4b51      	ldr	r3, [pc, #324]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800da88:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d006      	beq.n	800da9e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da90:	4b4f      	ldr	r3, [pc, #316]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800da92:	2201      	movs	r2, #1
 800da94:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800da98:	f7ff fef6 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800da9c:	e359      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800da9e:	f7fe fbcf 	bl	800c240 <SecureElementGetJoinEui>
 800daa2:	4601      	mov	r1, r0
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	461a      	mov	r2, r3
 800daaa:	20ff      	movs	r0, #255	; 0xff
 800daac:	f005 fc60 	bl	8013370 <LoRaMacCryptoHandleJoinAccept>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dab6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d172      	bne.n	800dba4 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dabe:	7c7b      	ldrb	r3, [r7, #17]
 800dac0:	461a      	mov	r2, r3
 800dac2:	4b42      	ldr	r3, [pc, #264]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800dac4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dac8:	4b40      	ldr	r3, [pc, #256]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800daca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dace:	7cbb      	ldrb	r3, [r7, #18]
 800dad0:	021b      	lsls	r3, r3, #8
 800dad2:	4313      	orrs	r3, r2
 800dad4:	4a3d      	ldr	r2, [pc, #244]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800dad6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dada:	4b3c      	ldr	r3, [pc, #240]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800dadc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dae0:	7cfb      	ldrb	r3, [r7, #19]
 800dae2:	041b      	lsls	r3, r3, #16
 800dae4:	4313      	orrs	r3, r2
 800dae6:	4a39      	ldr	r2, [pc, #228]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800dae8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	4a37      	ldr	r2, [pc, #220]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800daf0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800daf4:	7e3b      	ldrb	r3, [r7, #24]
 800daf6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	461a      	mov	r2, r3
 800dafe:	4b33      	ldr	r3, [pc, #204]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800db04:	7e3b      	ldrb	r3, [r7, #24]
 800db06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	461a      	mov	r2, r3
 800db0e:	4b2f      	ldr	r3, [pc, #188]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db10:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800db14:	7e3b      	ldrb	r3, [r7, #24]
 800db16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	4b2b      	ldr	r3, [pc, #172]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800db24:	7e7b      	ldrb	r3, [r7, #25]
 800db26:	461a      	mov	r2, r3
 800db28:	4b28      	ldr	r3, [pc, #160]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db2a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800db2c:	4b27      	ldr	r3, [pc, #156]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800db34:	4b25      	ldr	r3, [pc, #148]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db36:	2201      	movs	r2, #1
 800db38:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800db3a:	4b24      	ldr	r3, [pc, #144]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db42:	fb02 f303 	mul.w	r3, r2, r3
 800db46:	4a21      	ldr	r2, [pc, #132]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db48:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800db4a:	4b20      	ldr	r3, [pc, #128]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db4e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800db52:	4a1e      	ldr	r2, [pc, #120]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db54:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800db56:	4b1d      	ldr	r3, [pc, #116]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800db5e:	f107 0308 	add.w	r3, r7, #8
 800db62:	3312      	adds	r3, #18
 800db64:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800db66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	3b11      	subs	r3, #17
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800db74:	4b15      	ldr	r3, [pc, #84]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db7a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f006 f9c4 	bl	8013f0e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800db86:	4b11      	ldr	r3, [pc, #68]	; (800dbcc <ProcessRadioRxDone+0x2f8>)
 800db88:	2202      	movs	r2, #2
 800db8a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800db8e:	2001      	movs	r0, #1
 800db90:	f004 ff18 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00e      	beq.n	800dbb8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800db9a:	2101      	movs	r1, #1
 800db9c:	2000      	movs	r0, #0
 800db9e:	f004 fe85 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
 800dba2:	e009      	b.n	800dbb8 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dba4:	2001      	movs	r0, #1
 800dba6:	f004 ff0d 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d003      	beq.n	800dbb8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	2007      	movs	r0, #7
 800dbb4:	f004 fe7a 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800dbb8:	4a05      	ldr	r2, [pc, #20]	; (800dbd0 <ProcessRadioRxDone+0x2fc>)
 800dbba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800dbbe:	f043 0308 	orr.w	r3, r3, #8
 800dbc2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800dbc6:	e2a5      	b.n	800e114 <ProcessRadioRxDone+0x840>
 800dbc8:	200017a8 	.word	0x200017a8
 800dbcc:	2000095c 	.word	0x2000095c
 800dbd0:	20000454 	.word	0x20000454
 800dbd4:	0801ba68 	.word	0x0801ba68
 800dbd8:	200007ec 	.word	0x200007ec
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800dbdc:	4bae      	ldr	r3, [pc, #696]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dbe4:	4bad      	ldr	r3, [pc, #692]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dbe6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800dbea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800dbee:	4baa      	ldr	r3, [pc, #680]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dbf0:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800dbf4:	b25b      	sxtb	r3, r3
 800dbf6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800dbfa:	230d      	movs	r3, #13
 800dbfc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800dc00:	4ba6      	ldr	r3, [pc, #664]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dc02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800dc0a:	230e      	movs	r3, #14
 800dc0c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc10:	4ba2      	ldr	r3, [pc, #648]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dc12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc16:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f006 f923 	bl	8013e68 <RegionGetPhyParam>
 800dc22:	4603      	mov	r3, r0
 800dc24:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800dc26:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc2a:	3b0d      	subs	r3, #13
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	b21b      	sxth	r3, r3
 800dc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc34:	b21a      	sxth	r2, r3
 800dc36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	dc03      	bgt.n	800dc46 <ProcessRadioRxDone+0x372>
 800dc3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc42:	2b0b      	cmp	r3, #11
 800dc44:	d806      	bhi.n	800dc54 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc46:	4b94      	ldr	r3, [pc, #592]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc4e:	f7ff fe1b 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800dc52:	e27e      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 800dc54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc56:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 800dc58:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dc62:	4b8f      	ldr	r3, [pc, #572]	; (800dea0 <ProcessRadioRxDone+0x5cc>)
 800dc64:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dc66:	23ff      	movs	r3, #255	; 0xff
 800dc68:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dc6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc70:	4618      	mov	r0, r3
 800dc72:	f005 fe7c 	bl	801396e <LoRaMacParserData>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d006      	beq.n	800dc8a <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc7c:	4b86      	ldr	r3, [pc, #536]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dc84:	f7ff fe00 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800dc88:	e263      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	4a82      	ldr	r2, [pc, #520]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dc8e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dc92:	1cba      	adds	r2, r7, #2
 800dc94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f002 fcde 	bl	801065c <DetermineFrameType>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d006      	beq.n	800dcb4 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dca6:	4b7c      	ldr	r3, [pc, #496]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dcae:	f7ff fdeb 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800dcb2:	e24e      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dcc4:	e049      	b.n	800dd5a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dcc6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcca:	4a74      	ldr	r2, [pc, #464]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dccc:	212c      	movs	r1, #44	; 0x2c
 800dcce:	fb01 f303 	mul.w	r3, r1, r3
 800dcd2:	4413      	add	r3, r2
 800dcd4:	33d4      	adds	r3, #212	; 0xd4
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d138      	bne.n	800dd50 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800dcde:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dce2:	4a6e      	ldr	r2, [pc, #440]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dce4:	212c      	movs	r1, #44	; 0x2c
 800dce6:	fb01 f303 	mul.w	r3, r1, r3
 800dcea:	4413      	add	r3, r2
 800dcec:	33d2      	adds	r3, #210	; 0xd2
 800dcee:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d02d      	beq.n	800dd50 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800dcfa:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dcfe:	4a67      	ldr	r2, [pc, #412]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dd00:	212c      	movs	r1, #44	; 0x2c
 800dd02:	fb01 f303 	mul.w	r3, r1, r3
 800dd06:	4413      	add	r3, r2
 800dd08:	33d3      	adds	r3, #211	; 0xd3
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800dd10:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd14:	4a61      	ldr	r2, [pc, #388]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dd16:	212c      	movs	r1, #44	; 0x2c
 800dd18:	fb01 f303 	mul.w	r3, r1, r3
 800dd1c:	4413      	add	r3, r2
 800dd1e:	33f0      	adds	r3, #240	; 0xf0
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dd26:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd2a:	4a5c      	ldr	r2, [pc, #368]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dd2c:	212c      	movs	r1, #44	; 0x2c
 800dd2e:	fb01 f303 	mul.w	r3, r1, r3
 800dd32:	4413      	add	r3, r2
 800dd34:	33d4      	adds	r3, #212	; 0xd4
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dd3c:	4b57      	ldr	r3, [pc, #348]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dd3e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d10e      	bne.n	800dd64 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dd46:	4b54      	ldr	r3, [pc, #336]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dd48:	2203      	movs	r2, #3
 800dd4a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 800dd4e:	e009      	b.n	800dd64 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dd50:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd54:	3301      	adds	r3, #1
 800dd56:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800dd5a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d0b1      	beq.n	800dcc6 <ProcessRadioRxDone+0x3f2>
 800dd62:	e000      	b.n	800dd66 <ProcessRadioRxDone+0x492>
                    break;
 800dd64:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd66:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d117      	bne.n	800dd9e <ProcessRadioRxDone+0x4ca>
 800dd6e:	78bb      	ldrb	r3, [r7, #2]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d10d      	bne.n	800dd90 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd74:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd78:	f003 0320 	and.w	r3, r3, #32
 800dd7c:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d106      	bne.n	800dd90 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dd82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd8a:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d006      	beq.n	800dd9e <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd90:	4b41      	ldr	r3, [pc, #260]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 800dd98:	f7ff fd76 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800dd9c:	e1d9      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dd9e:	2315      	movs	r3, #21
 800dda0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dda4:	4b3d      	ldr	r3, [pc, #244]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800dda6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddaa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f006 f859 	bl	8013e68 <RegionGetPhyParam>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ddba:	78b9      	ldrb	r1, [r7, #2]
 800ddbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4d36      	ldr	r5, [pc, #216]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800ddc2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ddc6:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800ddca:	1d3a      	adds	r2, r7, #4
 800ddcc:	9202      	str	r2, [sp, #8]
 800ddce:	1cfa      	adds	r2, r7, #3
 800ddd0:	9201      	str	r2, [sp, #4]
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 800ddd8:	4622      	mov	r2, r4
 800ddda:	f000 fe95 	bl	800eb08 <GetFCntDown>
 800ddde:	4603      	mov	r3, r0
 800dde0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dde4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d031      	beq.n	800de50 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ddec:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800ddf0:	2b07      	cmp	r3, #7
 800ddf2:	d119      	bne.n	800de28 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ddf4:	4b28      	ldr	r3, [pc, #160]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800ddf6:	2208      	movs	r2, #8
 800ddf8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800ddfc:	4b27      	ldr	r3, [pc, #156]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800ddfe:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800de02:	2b00      	cmp	r3, #0
 800de04:	d11d      	bne.n	800de42 <ProcessRadioRxDone+0x56e>
 800de06:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800de0a:	f023 031f 	bic.w	r3, r3, #31
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2ba0      	cmp	r3, #160	; 0xa0
 800de12:	d116      	bne.n	800de42 <ProcessRadioRxDone+0x56e>
 800de14:	4b21      	ldr	r3, [pc, #132]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800de16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d111      	bne.n	800de42 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800de1e:	4b1f      	ldr	r3, [pc, #124]	; (800de9c <ProcessRadioRxDone+0x5c8>)
 800de20:	2201      	movs	r2, #1
 800de22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800de26:	e00c      	b.n	800de42 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800de28:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de2c:	2b08      	cmp	r3, #8
 800de2e:	d104      	bne.n	800de3a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800de30:	4b19      	ldr	r3, [pc, #100]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800de32:	220a      	movs	r2, #10
 800de34:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de38:	e003      	b.n	800de42 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de3a:	4b17      	ldr	r3, [pc, #92]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a14      	ldr	r2, [pc, #80]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800de46:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 800de4a:	f7ff fd1d 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800de4e:	e180      	b.n	800e152 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800de50:	78fa      	ldrb	r2, [r7, #3]
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 800de58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	460b      	mov	r3, r1
 800de60:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800de64:	f005 fbd0 	bl	8013608 <LoRaMacCryptoUnsecureMessage>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800de6e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de72:	2b00      	cmp	r3, #0
 800de74:	d016      	beq.n	800dea4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800de76:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d104      	bne.n	800de88 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800de7e:	4b06      	ldr	r3, [pc, #24]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800de80:	220b      	movs	r2, #11
 800de82:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 800de86:	e003      	b.n	800de90 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800de88:	4b03      	ldr	r3, [pc, #12]	; (800de98 <ProcessRadioRxDone+0x5c4>)
 800de8a:	220c      	movs	r2, #12
 800de8c:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 800de90:	f7ff fcfa 	bl	800d888 <PrepareRxDoneAbort>
                return;
 800de94:	e15d      	b.n	800e152 <ProcessRadioRxDone+0x87e>
 800de96:	bf00      	nop
 800de98:	20000454 	.word	0x20000454
 800de9c:	2000095c 	.word	0x2000095c
 800dea0:	2000068c 	.word	0x2000068c
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dea4:	4bac      	ldr	r3, [pc, #688]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 800deac:	4aaa      	ldr	r2, [pc, #680]	; (800e158 <ProcessRadioRxDone+0x884>)
 800deae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800deb2:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800deb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800deba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	461a      	mov	r2, r3
 800dec2:	4ba5      	ldr	r3, [pc, #660]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dec4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 800dec8:	4ba3      	ldr	r3, [pc, #652]	; (800e158 <ProcessRadioRxDone+0x884>)
 800deca:	2200      	movs	r2, #0
 800decc:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 800ded0:	4ba1      	ldr	r3, [pc, #644]	; (800e158 <ProcessRadioRxDone+0x884>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a9f      	ldr	r2, [pc, #636]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dedc:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dee0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dee4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	bf14      	ite	ne
 800deee:	2301      	movne	r3, #1
 800def0:	2300      	moveq	r3, #0
 800def2:	b2da      	uxtb	r2, r3
 800def4:	4b98      	ldr	r3, [pc, #608]	; (800e158 <ProcessRadioRxDone+0x884>)
 800def6:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800defa:	4b97      	ldr	r3, [pc, #604]	; (800e158 <ProcessRadioRxDone+0x884>)
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800df02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800df06:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	bf14      	ite	ne
 800df10:	2301      	movne	r3, #1
 800df12:	2300      	moveq	r3, #0
 800df14:	b2da      	uxtb	r2, r3
 800df16:	4b90      	ldr	r3, [pc, #576]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df18:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800df1c:	4b8e      	ldr	r3, [pc, #568]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df1e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df22:	2b00      	cmp	r3, #0
 800df24:	d004      	beq.n	800df30 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800df26:	4b8c      	ldr	r3, [pc, #560]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df28:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d102      	bne.n	800df36 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800df30:	4b8a      	ldr	r3, [pc, #552]	; (800e15c <ProcessRadioRxDone+0x888>)
 800df32:	2200      	movs	r2, #0
 800df34:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800df36:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	d104      	bne.n	800df48 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800df3e:	4b86      	ldr	r3, [pc, #536]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df40:	2202      	movs	r2, #2
 800df42:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800df46:	e01f      	b.n	800df88 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800df48:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800df4c:	f023 031f 	bic.w	r3, r3, #31
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2ba0      	cmp	r3, #160	; 0xa0
 800df54:	d110      	bne.n	800df78 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800df56:	4b81      	ldr	r3, [pc, #516]	; (800e15c <ProcessRadioRxDone+0x888>)
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800df5e:	4b7f      	ldr	r3, [pc, #508]	; (800e15c <ProcessRadioRxDone+0x888>)
 800df60:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800df64:	2b00      	cmp	r3, #0
 800df66:	d102      	bne.n	800df6e <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800df68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df6a:	4a7c      	ldr	r2, [pc, #496]	; (800e15c <ProcessRadioRxDone+0x888>)
 800df6c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800df6e:	4b7a      	ldr	r3, [pc, #488]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df70:	2201      	movs	r2, #1
 800df72:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 800df76:	e007      	b.n	800df88 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800df78:	4b78      	ldr	r3, [pc, #480]	; (800e15c <ProcessRadioRxDone+0x888>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800df80:	4b75      	ldr	r3, [pc, #468]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df82:	2200      	movs	r2, #0
 800df84:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800df88:	4b73      	ldr	r3, [pc, #460]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df8a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800df8e:	4a72      	ldr	r2, [pc, #456]	; (800e158 <ProcessRadioRxDone+0x884>)
 800df90:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 800df94:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800df98:	4618      	mov	r0, r3
 800df9a:	f001 ff0d 	bl	800fdb8 <RemoveMacCommands>

            switch( fType )
 800df9e:	78bb      	ldrb	r3, [r7, #2]
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d874      	bhi.n	800e08e <ProcessRadioRxDone+0x7ba>
 800dfa4:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <ProcessRadioRxDone+0x6d8>)
 800dfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfaa:	bf00      	nop
 800dfac:	0800dfbd 	.word	0x0800dfbd
 800dfb0:	0800e00d 	.word	0x0800e00d
 800dfb4:	0800e043 	.word	0x0800e043
 800dfb8:	0800e069 	.word	0x0800e069
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dfbc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfc0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	461c      	mov	r4, r3
 800dfc8:	4b63      	ldr	r3, [pc, #396]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dfca:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800dfce:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800dfd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfd6:	f102 0010 	add.w	r0, r2, #16
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4622      	mov	r2, r4
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	f000 ff03 	bl	800edec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800dfe6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfea:	4b5b      	ldr	r3, [pc, #364]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dfec:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff2:	4a59      	ldr	r2, [pc, #356]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dff4:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800dff8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800dffc:	4b56      	ldr	r3, [pc, #344]	; (800e158 <ProcessRadioRxDone+0x884>)
 800dffe:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e002:	4b55      	ldr	r3, [pc, #340]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e004:	2201      	movs	r2, #1
 800e006:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e00a:	e047      	b.n	800e09c <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e00c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e010:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e014:	b2db      	uxtb	r3, r3
 800e016:	461c      	mov	r4, r3
 800e018:	4b4f      	ldr	r3, [pc, #316]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e01a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e01e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e022:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e026:	f102 0010 	add.w	r0, r2, #16
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	460b      	mov	r3, r1
 800e02e:	4622      	mov	r2, r4
 800e030:	2100      	movs	r1, #0
 800e032:	f000 fedb 	bl	800edec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e036:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e03a:	4b47      	ldr	r3, [pc, #284]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e03c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e040:	e02c      	b.n	800e09c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e042:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e044:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e048:	4b43      	ldr	r3, [pc, #268]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e04a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 800e04e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	460b      	mov	r3, r1
 800e056:	2100      	movs	r1, #0
 800e058:	f000 fec8 	bl	800edec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e05c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e060:	4b3d      	ldr	r3, [pc, #244]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e062:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 800e066:	e019      	b.n	800e09c <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e068:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800e06c:	4b3a      	ldr	r3, [pc, #232]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e06e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e074:	4a38      	ldr	r2, [pc, #224]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e076:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e07a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800e07e:	4b36      	ldr	r3, [pc, #216]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e080:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 800e084:	4b34      	ldr	r3, [pc, #208]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 800e08c:	e006      	b.n	800e09c <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e08e:	4b32      	ldr	r3, [pc, #200]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e090:	2201      	movs	r2, #1
 800e092:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 800e096:	f7ff fbf7 	bl	800d888 <PrepareRxDoneAbort>
                    break;
 800e09a:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e09c:	4a2e      	ldr	r2, [pc, #184]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e09e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0a2:	f043 0302 	orr.w	r3, r3, #2
 800e0a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 800e0aa:	e033      	b.n	800e114 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e0ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e0b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e0b2:	18d1      	adds	r1, r2, r3
 800e0b4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e0be:	1ad3      	subs	r3, r2, r3
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4826      	ldr	r0, [pc, #152]	; (800e160 <ProcessRadioRxDone+0x88c>)
 800e0c6:	f008 f9da 	bl	801647e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e0ca:	4b23      	ldr	r3, [pc, #140]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e0cc:	2203      	movs	r2, #3
 800e0ce:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e0d2:	4b21      	ldr	r3, [pc, #132]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e0da:	4b1f      	ldr	r3, [pc, #124]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e0dc:	4a20      	ldr	r2, [pc, #128]	; (800e160 <ProcessRadioRxDone+0x88c>)
 800e0de:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e0e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	4b19      	ldr	r3, [pc, #100]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e0f2:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e0f6:	4a18      	ldr	r2, [pc, #96]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e0f8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e0fc:	f043 0302 	orr.w	r3, r3, #2
 800e100:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 800e104:	e006      	b.n	800e114 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e106:	4b14      	ldr	r3, [pc, #80]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 800e10e:	f7ff fbbb 	bl	800d888 <PrepareRxDoneAbort>
            break;
 800e112:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e114:	4b10      	ldr	r3, [pc, #64]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e116:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d008      	beq.n	800e130 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e11e:	4b0e      	ldr	r3, [pc, #56]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e120:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00b      	beq.n	800e140 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e128:	2000      	movs	r0, #0
 800e12a:	f000 fcb7 	bl	800ea9c <OnAckTimeoutTimerEvent>
 800e12e:	e007      	b.n	800e140 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e130:	4b0a      	ldr	r3, [pc, #40]	; (800e15c <ProcessRadioRxDone+0x888>)
 800e132:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e136:	2b02      	cmp	r3, #2
 800e138:	d102      	bne.n	800e140 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e13a:	2000      	movs	r0, #0
 800e13c:	f000 fcae 	bl	800ea9c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e140:	4a05      	ldr	r2, [pc, #20]	; (800e158 <ProcessRadioRxDone+0x884>)
 800e142:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e146:	f043 0320 	orr.w	r3, r3, #32
 800e14a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 800e14e:	f7ff fae9 	bl	800d724 <UpdateRxSlotIdleState>
}
 800e152:	3788      	adds	r7, #136	; 0x88
 800e154:	46bd      	mov	sp, r7
 800e156:	bdb0      	pop	{r4, r5, r7, pc}
 800e158:	20000454 	.word	0x20000454
 800e15c:	2000095c 	.word	0x2000095c
 800e160:	2000068c 	.word	0x2000068c

0800e164 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e168:	4b11      	ldr	r3, [pc, #68]	; (800e1b0 <ProcessRadioTxTimeout+0x4c>)
 800e16a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d002      	beq.n	800e178 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e172:	4b10      	ldr	r3, [pc, #64]	; (800e1b4 <ProcessRadioTxTimeout+0x50>)
 800e174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e176:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e178:	f7ff fad4 	bl	800d724 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e17c:	4b0e      	ldr	r3, [pc, #56]	; (800e1b8 <ProcessRadioTxTimeout+0x54>)
 800e17e:	2202      	movs	r2, #2
 800e180:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e184:	2002      	movs	r0, #2
 800e186:	f004 fbe9 	bl	801295c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e18a:	4b0b      	ldr	r3, [pc, #44]	; (800e1b8 <ProcessRadioTxTimeout+0x54>)
 800e18c:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e190:	2b00      	cmp	r3, #0
 800e192:	d003      	beq.n	800e19c <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 800e194:	4b08      	ldr	r3, [pc, #32]	; (800e1b8 <ProcessRadioTxTimeout+0x54>)
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e19c:	4a06      	ldr	r2, [pc, #24]	; (800e1b8 <ProcessRadioTxTimeout+0x54>)
 800e19e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e1a2:	f043 0320 	orr.w	r3, r3, #32
 800e1a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800e1aa:	bf00      	nop
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	2000095c 	.word	0x2000095c
 800e1b4:	0801ba68 	.word	0x0801ba68
 800e1b8:	20000454 	.word	0x20000454

0800e1bc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	460a      	mov	r2, r1
 800e1c6:	71fb      	strb	r3, [r7, #7]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e1d0:	4b40      	ldr	r3, [pc, #256]	; (800e2d4 <HandleRadioRxErrorTimeout+0x118>)
 800e1d2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d002      	beq.n	800e1e0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e1da:	4b3f      	ldr	r3, [pc, #252]	; (800e2d8 <HandleRadioRxErrorTimeout+0x11c>)
 800e1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1de:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e1e0:	f003 ff1d 	bl	801201e <LoRaMacClassBIsBeaconExpected>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d007      	beq.n	800e1fa <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e1ea:	2002      	movs	r0, #2
 800e1ec:	f003 fecb 	bl	8011f86 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	f003 feed 	bl	8011fd0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1fa:	4b36      	ldr	r3, [pc, #216]	; (800e2d4 <HandleRadioRxErrorTimeout+0x118>)
 800e1fc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e200:	2b01      	cmp	r3, #1
 800e202:	d119      	bne.n	800e238 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e204:	f003 ff12 	bl	801202c <LoRaMacClassBIsPingExpected>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d007      	beq.n	800e21e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e20e:	2000      	movs	r0, #0
 800e210:	f003 fec3 	bl	8011f9a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e214:	2000      	movs	r0, #0
 800e216:	f003 fee4 	bl	8011fe2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e21a:	2301      	movs	r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e21e:	f003 ff0c 	bl	801203a <LoRaMacClassBIsMulticastExpected>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d007      	beq.n	800e238 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e228:	2000      	movs	r0, #0
 800e22a:	f003 fec0 	bl	8011fae <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e22e:	2000      	movs	r0, #0
 800e230:	f003 fee0 	bl	8011ff4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e234:	2301      	movs	r3, #1
 800e236:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	f083 0301 	eor.w	r3, r3, #1
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d040      	beq.n	800e2c6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e244:	4b25      	ldr	r3, [pc, #148]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e246:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d122      	bne.n	800e294 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e24e:	4b23      	ldr	r3, [pc, #140]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e250:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e254:	2b00      	cmp	r3, #0
 800e256:	d003      	beq.n	800e260 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e258:	4a20      	ldr	r2, [pc, #128]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e260:	79fb      	ldrb	r3, [r7, #7]
 800e262:	4618      	mov	r0, r3
 800e264:	f004 fb7a 	bl	801295c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e268:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <HandleRadioRxErrorTimeout+0x118>)
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	4618      	mov	r0, r3
 800e26e:	f00c f943 	bl	801a4f8 <UTIL_TIMER_GetElapsedTime>
 800e272:	4602      	mov	r2, r0
 800e274:	4b19      	ldr	r3, [pc, #100]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e276:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d323      	bcc.n	800e2c6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e27e:	4818      	ldr	r0, [pc, #96]	; (800e2e0 <HandleRadioRxErrorTimeout+0x124>)
 800e280:	f00c f80e 	bl	801a2a0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e284:	4a15      	ldr	r2, [pc, #84]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e286:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e28a:	f043 0320 	orr.w	r3, r3, #32
 800e28e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 800e292:	e018      	b.n	800e2c6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e294:	4b11      	ldr	r3, [pc, #68]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e296:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e29e:	4a0f      	ldr	r2, [pc, #60]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e2a0:	79bb      	ldrb	r3, [r7, #6]
 800e2a2:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e2a6:	79bb      	ldrb	r3, [r7, #6]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f004 fb57 	bl	801295c <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e2ae:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <HandleRadioRxErrorTimeout+0x118>)
 800e2b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d006      	beq.n	800e2c6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e2b8:	4a08      	ldr	r2, [pc, #32]	; (800e2dc <HandleRadioRxErrorTimeout+0x120>)
 800e2ba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e2be:	f043 0320 	orr.w	r3, r3, #32
 800e2c2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e2c6:	f7ff fa2d 	bl	800d724 <UpdateRxSlotIdleState>
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	2000095c 	.word	0x2000095c
 800e2d8:	0801ba68 	.word	0x0801ba68
 800e2dc:	20000454 	.word	0x20000454
 800e2e0:	200007ec 	.word	0x200007ec

0800e2e4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e2e8:	2106      	movs	r1, #6
 800e2ea:	2005      	movs	r0, #5
 800e2ec:	f7ff ff66 	bl	800e1bc <HandleRadioRxErrorTimeout>
}
 800e2f0:	bf00      	nop
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e2f8:	2104      	movs	r1, #4
 800e2fa:	2003      	movs	r0, #3
 800e2fc:	f7ff ff5e 	bl	800e1bc <HandleRadioRxErrorTimeout>
}
 800e300:	bf00      	nop
 800e302:	bd80      	pop	{r7, pc}

0800e304 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e30a:	f3ef 8310 	mrs	r3, PRIMASK
 800e30e:	607b      	str	r3, [r7, #4]
  return(result);
 800e310:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e312:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e314:	b672      	cpsid	i
}
 800e316:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e318:	4b1d      	ldr	r3, [pc, #116]	; (800e390 <LoRaMacHandleIrqEvents+0x8c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e31e:	4b1c      	ldr	r3, [pc, #112]	; (800e390 <LoRaMacHandleIrqEvents+0x8c>)
 800e320:	2200      	movs	r2, #0
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f383 8810 	msr	PRIMASK, r3
}
 800e32e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d027      	beq.n	800e386 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e336:	783b      	ldrb	r3, [r7, #0]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e342:	f7ff fa07 	bl	800d754 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e346:	783b      	ldrb	r3, [r7, #0]
 800e348:	f003 0308 	and.w	r3, r3, #8
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e352:	f7ff fabf 	bl	800d8d4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e356:	783b      	ldrb	r3, [r7, #0]
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e362:	f7ff feff 	bl	800e164 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e366:	783b      	ldrb	r3, [r7, #0]
 800e368:	f003 0302 	and.w	r3, r3, #2
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e372:	f7ff ffb7 	bl	800e2e4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e376:	783b      	ldrb	r3, [r7, #0]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e382:	f7ff ffb7 	bl	800e2f4 <ProcessRadioRxTimeout>
        }
    }
}
 800e386:	bf00      	nop
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20000ca8 	.word	0x20000ca8

0800e394 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e394:	b480      	push	{r7}
 800e396:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e398:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <LoRaMacIsBusy+0x28>)
 800e39a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d106      	bne.n	800e3b0 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e3a2:	4b06      	ldr	r3, [pc, #24]	; (800e3bc <LoRaMacIsBusy+0x28>)
 800e3a4:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d101      	bne.n	800e3b0 <LoRaMacIsBusy+0x1c>
    {
        return false;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e000      	b.n	800e3b2 <LoRaMacIsBusy+0x1e>
    }
    return true;
 800e3b0:	2301      	movs	r3, #1
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bc80      	pop	{r7}
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop
 800e3bc:	20000454 	.word	0x20000454

0800e3c0 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e3ca:	4a04      	ldr	r2, [pc, #16]	; (800e3dc <LoRaMacEnableRequests+0x1c>)
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 800e3d2:	bf00      	nop
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bc80      	pop	{r7}
 800e3da:	4770      	bx	lr
 800e3dc:	20000454 	.word	0x20000454

0800e3e0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e3e6:	4b2c      	ldr	r3, [pc, #176]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e3e8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3ec:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e3ee:	4b2a      	ldr	r3, [pc, #168]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e3f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d14a      	bne.n	800e48e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e3f8:	4b27      	ldr	r3, [pc, #156]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e3fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	b2db      	uxtb	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d006      	beq.n	800e416 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e408:	4a23      	ldr	r2, [pc, #140]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e40a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e40e:	f36f 0300 	bfc	r3, #0, #1
 800e412:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e416:	4b20      	ldr	r3, [pc, #128]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e418:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d006      	beq.n	800e434 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e426:	4a1c      	ldr	r2, [pc, #112]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e428:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e42c:	f36f 0382 	bfc	r3, #2, #1
 800e430:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e434:	2001      	movs	r0, #1
 800e436:	f7ff ffc3 	bl	800e3c0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e43a:	793b      	ldrb	r3, [r7, #4]
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d005      	beq.n	800e452 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e446:	4b14      	ldr	r3, [pc, #80]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e448:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4813      	ldr	r0, [pc, #76]	; (800e49c <LoRaMacHandleRequestEvents+0xbc>)
 800e450:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e452:	793b      	ldrb	r3, [r7, #4]
 800e454:	f003 0304 	and.w	r3, r3, #4
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d00e      	beq.n	800e47c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e45e:	4810      	ldr	r0, [pc, #64]	; (800e4a0 <LoRaMacHandleRequestEvents+0xc0>)
 800e460:	f004 faca 	bl	80129f8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e464:	f004 fb14 	bl	8012a90 <LoRaMacConfirmQueueGetCnt>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d006      	beq.n	800e47c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e46e:	4a0a      	ldr	r2, [pc, #40]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e470:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e474:	f043 0304 	orr.w	r3, r3, #4
 800e478:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e47c:	f003 fdfb 	bl	8012076 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e480:	4a05      	ldr	r2, [pc, #20]	; (800e498 <LoRaMacHandleRequestEvents+0xb8>)
 800e482:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e486:	f36f 1345 	bfc	r3, #5, #1
 800e48a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 800e48e:	bf00      	nop
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	20000454 	.word	0x20000454
 800e49c:	2000088c 	.word	0x2000088c
 800e4a0:	200008a0 	.word	0x200008a0

0800e4a4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e4aa:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 800e4ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e4b8:	1dfb      	adds	r3, r7, #7
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f004 f882 	bl	80125c4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800e4c0:	79fb      	ldrb	r3, [r7, #7]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800e4c6:	f000 fc81 	bl	800edcc <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800e4ca:	bf00      	nop
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	20000454 	.word	0x20000454

0800e4d8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b088      	sub	sp, #32
 800e4dc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e4de:	4b25      	ldr	r3, [pc, #148]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e4e4:	f003 0308 	and.w	r3, r3, #8
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00d      	beq.n	800e50a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e4ee:	4a21      	ldr	r2, [pc, #132]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e4f4:	f36f 03c3 	bfc	r3, #3, #1
 800e4f8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e4fc:	4b1d      	ldr	r3, [pc, #116]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e4fe:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	491c      	ldr	r1, [pc, #112]	; (800e578 <LoRaMacHandleIndicationEvents+0xa0>)
 800e506:	481d      	ldr	r0, [pc, #116]	; (800e57c <LoRaMacHandleIndicationEvents+0xa4>)
 800e508:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800e50a:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e50c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e510:	f003 0310 	and.w	r3, r3, #16
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d012      	beq.n	800e540 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800e51a:	2307      	movs	r3, #7
 800e51c:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800e522:	4b14      	ldr	r3, [pc, #80]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e524:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	1d3a      	adds	r2, r7, #4
 800e52c:	4912      	ldr	r1, [pc, #72]	; (800e578 <LoRaMacHandleIndicationEvents+0xa0>)
 800e52e:	4610      	mov	r0, r2
 800e530:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800e532:	4a10      	ldr	r2, [pc, #64]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e534:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e538:	f36f 1304 	bfc	r3, #4, #1
 800e53c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e542:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e546:	f003 0302 	and.w	r3, r3, #2
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00d      	beq.n	800e56c <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e550:	4a08      	ldr	r2, [pc, #32]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e552:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e556:	f36f 0341 	bfc	r3, #1, #1
 800e55a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <LoRaMacHandleIndicationEvents+0x9c>)
 800e560:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	4904      	ldr	r1, [pc, #16]	; (800e578 <LoRaMacHandleIndicationEvents+0xa0>)
 800e568:	4805      	ldr	r0, [pc, #20]	; (800e580 <LoRaMacHandleIndicationEvents+0xa8>)
 800e56a:	4798      	blx	r3
    }
}
 800e56c:	bf00      	nop
 800e56e:	3720      	adds	r7, #32
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20000454 	.word	0x20000454
 800e578:	200008d0 	.word	0x200008d0
 800e57c:	200008b4 	.word	0x200008b4
 800e580:	20000870 	.word	0x20000870

0800e584 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e58a:	4b32      	ldr	r3, [pc, #200]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e58c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e590:	f003 0301 	and.w	r3, r3, #1
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d058      	beq.n	800e64c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e59a:	2300      	movs	r3, #0
 800e59c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e5a2:	4b2c      	ldr	r3, [pc, #176]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5a4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d004      	beq.n	800e5b6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e5ac:	4b29      	ldr	r3, [pc, #164]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5ae:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	d104      	bne.n	800e5c0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e5b6:	f002 f89f 	bl	80106f8 <CheckRetransUnconfirmedUplink>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	71fb      	strb	r3, [r7, #7]
 800e5be:	e020      	b.n	800e602 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e5c0:	4b24      	ldr	r3, [pc, #144]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5c2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d11b      	bne.n	800e602 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800e5ca:	4b22      	ldr	r3, [pc, #136]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e5cc:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d014      	beq.n	800e5fe <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e5d4:	f002 f8bc 	bl	8010750 <CheckRetransConfirmedUplink>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e5dc:	4b1e      	ldr	r3, [pc, #120]	; (800e658 <LoRaMacHandleMcpsRequest+0xd4>)
 800e5de:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10d      	bne.n	800e602 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	f083 0301 	eor.w	r3, r3, #1
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d002      	beq.n	800e5f8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e5f2:	f002 f929 	bl	8010848 <AckTimeoutRetriesProcess>
 800e5f6:	e004      	b.n	800e602 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e5f8:	f002 f964 	bl	80108c4 <AckTimeoutRetriesFinalize>
 800e5fc:	e001      	b.n	800e602 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e5fe:	2301      	movs	r3, #1
 800e600:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00d      	beq.n	800e624 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e608:	4814      	ldr	r0, [pc, #80]	; (800e65c <LoRaMacHandleMcpsRequest+0xd8>)
 800e60a:	f00b fe49 	bl	801a2a0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e60e:	4b11      	ldr	r3, [pc, #68]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e610:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e614:	f023 0320 	bic.w	r3, r3, #32
 800e618:	4a0e      	ldr	r2, [pc, #56]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e61a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800e61e:	f002 f8b9 	bl	8010794 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e622:	e013      	b.n	800e64c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e624:	79bb      	ldrb	r3, [r7, #6]
 800e626:	f083 0301 	eor.w	r3, r3, #1
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00d      	beq.n	800e64c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e630:	4a08      	ldr	r2, [pc, #32]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e632:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800e636:	f36f 1345 	bfc	r3, #5, #1
 800e63a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <LoRaMacHandleMcpsRequest+0xd0>)
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 800e646:	2000      	movs	r0, #0
 800e648:	f000 f97e 	bl	800e948 <OnTxDelayedTimerEvent>
}
 800e64c:	bf00      	nop
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	20000454 	.word	0x20000454
 800e658:	2000095c 	.word	0x2000095c
 800e65c:	200007bc 	.word	0x200007bc

0800e660 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e664:	4b1b      	ldr	r3, [pc, #108]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e666:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e66a:	f003 0304 	and.w	r3, r3, #4
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b00      	cmp	r3, #0
 800e672:	d02c      	beq.n	800e6ce <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e674:	2001      	movs	r0, #1
 800e676:	f004 f9a5 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d012      	beq.n	800e6a6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e680:	2001      	movs	r0, #1
 800e682:	f004 f941 	bl	8012908 <LoRaMacConfirmQueueGetStatus>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d103      	bne.n	800e694 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e68c:	4b11      	ldr	r3, [pc, #68]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e694:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e696:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e69a:	f023 0302 	bic.w	r3, r3, #2
 800e69e:	4a0d      	ldr	r2, [pc, #52]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e6a0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800e6a4:	e013      	b.n	800e6ce <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e6a6:	2005      	movs	r0, #5
 800e6a8:	f004 f98c 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d105      	bne.n	800e6be <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e6b2:	2006      	movs	r0, #6
 800e6b4:	f004 f986 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800e6b8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d007      	beq.n	800e6ce <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e6c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e6c4:	f023 0302 	bic.w	r3, r3, #2
 800e6c8:	4a02      	ldr	r2, [pc, #8]	; (800e6d4 <LoRaMacHandleMlmeRequest+0x74>)
 800e6ca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800e6ce:	bf00      	nop
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20000454 	.word	0x20000454

0800e6d8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e6dc:	200c      	movs	r0, #12
 800e6de:	f004 f971 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d019      	beq.n	800e71c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e6e8:	4b0e      	ldr	r3, [pc, #56]	; (800e724 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d111      	bne.n	800e71c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e6f8:	4b0a      	ldr	r3, [pc, #40]	; (800e724 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e6fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	d009      	beq.n	800e71c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e708:	4b06      	ldr	r3, [pc, #24]	; (800e724 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e70a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e70e:	f023 0302 	bic.w	r3, r3, #2
 800e712:	4a04      	ldr	r2, [pc, #16]	; (800e724 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e714:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800e718:	2301      	movs	r3, #1
 800e71a:	e000      	b.n	800e71e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	20000454 	.word	0x20000454

0800e728 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800e728:	b480      	push	{r7}
 800e72a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e72c:	4b0d      	ldr	r3, [pc, #52]	; (800e764 <LoRaMacCheckForRxAbort+0x3c>)
 800e72e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00f      	beq.n	800e75a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e73a:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <LoRaMacCheckForRxAbort+0x3c>)
 800e73c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e744:	4a07      	ldr	r2, [pc, #28]	; (800e764 <LoRaMacCheckForRxAbort+0x3c>)
 800e746:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e74a:	4b06      	ldr	r3, [pc, #24]	; (800e764 <LoRaMacCheckForRxAbort+0x3c>)
 800e74c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e750:	f023 0302 	bic.w	r3, r3, #2
 800e754:	4a03      	ldr	r2, [pc, #12]	; (800e764 <LoRaMacCheckForRxAbort+0x3c>)
 800e756:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800e75a:	bf00      	nop
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bc80      	pop	{r7}
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	20000454 	.word	0x20000454

0800e768 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e774:	2300      	movs	r3, #0
 800e776:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e778:	4b50      	ldr	r3, [pc, #320]	; (800e8bc <LoRaMacHandleNvm+0x154>)
 800e77a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e77e:	2b00      	cmp	r3, #0
 800e780:	f040 8097 	bne.w	800e8b2 <LoRaMacHandleNvm+0x14a>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2124      	movs	r1, #36	; 0x24
 800e788:	4618      	mov	r0, r3
 800e78a:	f007 fecd 	bl	8016528 <Crc32>
 800e78e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	429a      	cmp	r2, r3
 800e798:	d006      	beq.n	800e7a8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e7a0:	89fb      	ldrh	r3, [r7, #14]
 800e7a2:	f043 0301 	orr.w	r3, r3, #1
 800e7a6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	3328      	adds	r3, #40	; 0x28
 800e7ac:	2114      	movs	r1, #20
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f007 feba 	bl	8016528 <Crc32>
 800e7b4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d006      	beq.n	800e7ce <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e7c6:	89fb      	ldrh	r3, [r7, #14]
 800e7c8:	f043 0302 	orr.w	r3, r3, #2
 800e7cc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	3340      	adds	r3, #64	; 0x40
 800e7d2:	21d4      	movs	r1, #212	; 0xd4
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f007 fea7 	bl	8016528 <Crc32>
 800e7da:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d007      	beq.n	800e7f8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e7f0:	89fb      	ldrh	r3, [r7, #14]
 800e7f2:	f043 0304 	orr.w	r3, r3, #4
 800e7f6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800e7fe:	21bc      	movs	r1, #188	; 0xbc
 800e800:	4618      	mov	r0, r3
 800e802:	f007 fe91 	bl	8016528 <Crc32>
 800e806:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	429a      	cmp	r2, r3
 800e812:	d007      	beq.n	800e824 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e81c:	89fb      	ldrh	r3, [r7, #14]
 800e81e:	f043 0308 	orr.w	r3, r3, #8
 800e822:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e82a:	2190      	movs	r1, #144	; 0x90
 800e82c:	4618      	mov	r0, r3
 800e82e:	f007 fe7b 	bl	8016528 <Crc32>
 800e832:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d007      	beq.n	800e850 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e848:	89fb      	ldrh	r3, [r7, #14]
 800e84a:	f043 0310 	orr.w	r3, r3, #16
 800e84e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800e856:	21c4      	movs	r1, #196	; 0xc4
 800e858:	4618      	mov	r0, r3
 800e85a:	f007 fe65 	bl	8016528 <Crc32>
 800e85e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d007      	beq.n	800e87c <LoRaMacHandleNvm+0x114>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e874:	89fb      	ldrh	r3, [r7, #14]
 800e876:	f043 0320 	orr.w	r3, r3, #32
 800e87a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e882:	2114      	movs	r1, #20
 800e884:	4618      	mov	r0, r3
 800e886:	f007 fe4f 	bl	8016528 <Crc32>
 800e88a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	429a      	cmp	r2, r3
 800e896:	d007      	beq.n	800e8a8 <LoRaMacHandleNvm+0x140>
    {
        nvmData->ClassB.Crc32 = crc;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e8a0:	89fb      	ldrh	r3, [r7, #14]
 800e8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a6:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e8a8:	89fb      	ldrh	r3, [r7, #14]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f001 ffae 	bl	801080c <CallNvmDataChangeCallback>
 800e8b0:	e000      	b.n	800e8b4 <LoRaMacHandleNvm+0x14c>
        return;
 800e8b2:	bf00      	nop
}
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20000454 	.word	0x20000454

0800e8c0 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e8ca:	f7ff fd1b 	bl	800e304 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e8ce:	f003 fc36 	bl	801213e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e8d2:	4b1b      	ldr	r3, [pc, #108]	; (800e940 <LoRaMacProcess+0x80>)
 800e8d4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 800e8d8:	f003 0320 	and.w	r3, r3, #32
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d021      	beq.n	800e926 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	f7ff fd6c 	bl	800e3c0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e8e8:	f7ff ff1e 	bl	800e728 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e8ec:	f002 f81e 	bl	801092c <IsRequestPending>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d006      	beq.n	800e904 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e8f6:	f7ff feef 	bl	800e6d8 <LoRaMacCheckForBeaconAcquisition>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	79fb      	ldrb	r3, [r7, #7]
 800e900:	4313      	orrs	r3, r2
 800e902:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d103      	bne.n	800e912 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e90a:	f7ff fea9 	bl	800e660 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e90e:	f7ff fe39 	bl	800e584 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e912:	f7ff fd65 	bl	800e3e0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e916:	f7ff fdc5 	bl	800e4a4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 800e91a:	480a      	ldr	r0, [pc, #40]	; (800e944 <LoRaMacProcess+0x84>)
 800e91c:	f7ff ff24 	bl	800e768 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e920:	2001      	movs	r0, #1
 800e922:	f7ff fd4d 	bl	800e3c0 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800e926:	f7ff fdd7 	bl	800e4d8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e92a:	4b05      	ldr	r3, [pc, #20]	; (800e940 <LoRaMacProcess+0x80>)
 800e92c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800e930:	2b02      	cmp	r3, #2
 800e932:	d101      	bne.n	800e938 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 800e934:	f001 fb7c 	bl	8010030 <OpenContinuousRxCWindow>
    }
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20000454 	.word	0x20000454
 800e944:	2000095c 	.word	0x2000095c

0800e948 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e950:	4817      	ldr	r0, [pc, #92]	; (800e9b0 <OnTxDelayedTimerEvent+0x68>)
 800e952:	f00b fca5 	bl	801a2a0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e956:	4b17      	ldr	r3, [pc, #92]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e958:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e95c:	f023 0320 	bic.w	r3, r3, #32
 800e960:	4a14      	ldr	r2, [pc, #80]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e962:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e966:	2001      	movs	r0, #1
 800e968:	f001 f8fc 	bl	800fb64 <ScheduleTx>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d018      	beq.n	800e9a4 <OnTxDelayedTimerEvent+0x5c>
 800e972:	2b0b      	cmp	r3, #11
 800e974:	d016      	beq.n	800e9a4 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e976:	4b10      	ldr	r3, [pc, #64]	; (800e9b8 <OnTxDelayedTimerEvent+0x70>)
 800e978:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e980:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e984:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e986:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 800e98a:	4b0a      	ldr	r3, [pc, #40]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e98c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e990:	4b08      	ldr	r3, [pc, #32]	; (800e9b4 <OnTxDelayedTimerEvent+0x6c>)
 800e992:	2209      	movs	r2, #9
 800e994:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e998:	2009      	movs	r0, #9
 800e99a:	f003 ffdf 	bl	801295c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e99e:	f001 fef9 	bl	8010794 <StopRetransmission>
            break;
 800e9a2:	e000      	b.n	800e9a6 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e9a4:	bf00      	nop
        }
    }
}
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	200007bc 	.word	0x200007bc
 800e9b4:	20000454 	.word	0x20000454
 800e9b8:	2000095c 	.word	0x2000095c

0800e9bc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9c6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800e9ca:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9cc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e9d0:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <OnRxWindow1TimerEvent+0x60>)
 800e9d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e9d6:	b25a      	sxtb	r2, r3
 800e9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9da:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e9de:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <OnRxWindow1TimerEvent+0x60>)
 800e9e0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800e9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9e6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800e9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <OnRxWindow1TimerEvent+0x60>)
 800e9ec:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800e9f0:	4b09      	ldr	r3, [pc, #36]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9f2:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e9f6:	4b08      	ldr	r3, [pc, #32]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e9fe:	4b06      	ldr	r3, [pc, #24]	; (800ea18 <OnRxWindow1TimerEvent+0x5c>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ea06:	4906      	ldr	r1, [pc, #24]	; (800ea20 <OnRxWindow1TimerEvent+0x64>)
 800ea08:	4806      	ldr	r0, [pc, #24]	; (800ea24 <OnRxWindow1TimerEvent+0x68>)
 800ea0a:	f001 fae3 	bl	800ffd4 <RxWindowSetup>
}
 800ea0e:	bf00      	nop
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20000454 	.word	0x20000454
 800ea1c:	2000095c 	.word	0x2000095c
 800ea20:	2000080c 	.word	0x2000080c
 800ea24:	200007d4 	.word	0x200007d4

0800ea28 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ea30:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea32:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d023      	beq.n	800ea82 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ea3a:	4b14      	ldr	r3, [pc, #80]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea3c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ea40:	4b12      	ldr	r3, [pc, #72]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea42:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ea46:	4b12      	ldr	r3, [pc, #72]	; (800ea90 <OnRxWindow2TimerEvent+0x68>)
 800ea48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea4a:	4a10      	ldr	r2, [pc, #64]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea4c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea50:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <OnRxWindow2TimerEvent+0x68>)
 800ea52:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ea56:	4b0d      	ldr	r3, [pc, #52]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea58:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ea5c:	4b0c      	ldr	r3, [pc, #48]	; (800ea90 <OnRxWindow2TimerEvent+0x68>)
 800ea5e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ea62:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea64:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ea68:	4b08      	ldr	r3, [pc, #32]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ea70:	4b06      	ldr	r3, [pc, #24]	; (800ea8c <OnRxWindow2TimerEvent+0x64>)
 800ea72:	2201      	movs	r2, #1
 800ea74:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ea78:	4906      	ldr	r1, [pc, #24]	; (800ea94 <OnRxWindow2TimerEvent+0x6c>)
 800ea7a:	4807      	ldr	r0, [pc, #28]	; (800ea98 <OnRxWindow2TimerEvent+0x70>)
 800ea7c:	f001 faaa 	bl	800ffd4 <RxWindowSetup>
 800ea80:	e000      	b.n	800ea84 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ea82:	bf00      	nop
}
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000454 	.word	0x20000454
 800ea90:	2000095c 	.word	0x2000095c
 800ea94:	20000820 	.word	0x20000820
 800ea98:	200007ec 	.word	0x200007ec

0800ea9c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800eaa4:	4815      	ldr	r0, [pc, #84]	; (800eafc <OnAckTimeoutTimerEvent+0x60>)
 800eaa6:	f00b fbfb 	bl	801a2a0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800eaaa:	4b15      	ldr	r3, [pc, #84]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800eaac:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d003      	beq.n	800eabc <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800eab4:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800eab6:	2201      	movs	r2, #1
 800eab8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800eabc:	4b11      	ldr	r3, [pc, #68]	; (800eb04 <OnAckTimeoutTimerEvent+0x68>)
 800eabe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d106      	bne.n	800ead4 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eac6:	4a0e      	ldr	r2, [pc, #56]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800eac8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800eacc:	f043 0320 	orr.w	r3, r3, #32
 800ead0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800ead6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00a      	beq.n	800eaf4 <OnAckTimeoutTimerEvent+0x58>
 800eade:	4b08      	ldr	r3, [pc, #32]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800eae0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eae4:	691b      	ldr	r3, [r3, #16]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d004      	beq.n	800eaf4 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eaea:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <OnAckTimeoutTimerEvent+0x64>)
 800eaec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	4798      	blx	r3
    }
}
 800eaf4:	bf00      	nop
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	2000084c 	.word	0x2000084c
 800eb00:	20000454 	.word	0x20000454
 800eb04:	2000095c 	.word	0x2000095c

0800eb08 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60ba      	str	r2, [r7, #8]
 800eb10:	607b      	str	r3, [r7, #4]
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
 800eb16:	460b      	mov	r3, r1
 800eb18:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d005      	beq.n	800eb2c <GetFCntDown+0x24>
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d002      	beq.n	800eb2c <GetFCntDown+0x24>
 800eb26:	6a3b      	ldr	r3, [r7, #32]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d101      	bne.n	800eb30 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb2c:	230a      	movs	r3, #10
 800eb2e:	e029      	b.n	800eb84 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d016      	beq.n	800eb64 <GetFCntDown+0x5c>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d118      	bne.n	800eb6c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800eb3a:	79bb      	ldrb	r3, [r7, #6]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d10d      	bne.n	800eb5c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d002      	beq.n	800eb4c <GetFCntDown+0x44>
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	2b03      	cmp	r3, #3
 800eb4a:	d103      	bne.n	800eb54 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	2202      	movs	r2, #2
 800eb50:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800eb52:	e00d      	b.n	800eb70 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	2201      	movs	r2, #1
 800eb58:	701a      	strb	r2, [r3, #0]
            break;
 800eb5a:	e009      	b.n	800eb70 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	2203      	movs	r2, #3
 800eb60:	701a      	strb	r2, [r3, #0]
            break;
 800eb62:	e005      	b.n	800eb70 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	2204      	movs	r2, #4
 800eb68:	701a      	strb	r2, [r3, #0]
            break;
 800eb6a:	e001      	b.n	800eb70 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800eb6c:	2305      	movs	r3, #5
 800eb6e:	e009      	b.n	800eb84 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	7818      	ldrb	r0, [r3, #0]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	89db      	ldrh	r3, [r3, #14]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	8b39      	ldrh	r1, [r7, #24]
 800eb7c:	6a3b      	ldr	r3, [r7, #32]
 800eb7e:	f004 faf1 	bl	8013164 <LoRaMacCryptoGetFCntDown>
 800eb82:	4603      	mov	r3, r0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800eb8c:	b5b0      	push	{r4, r5, r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb96:	2303      	movs	r3, #3
 800eb98:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800eb9a:	4b61      	ldr	r3, [pc, #388]	; (800ed20 <SwitchClass+0x194>)
 800eb9c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	f000 80a5 	beq.w	800ecf0 <SwitchClass+0x164>
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	f300 80b4 	bgt.w	800ed14 <SwitchClass+0x188>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <SwitchClass+0x2c>
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	f000 808f 	beq.w	800ecd4 <SwitchClass+0x148>
 800ebb6:	e0ad      	b.n	800ed14 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d107      	bne.n	800ebce <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ebbe:	4b58      	ldr	r3, [pc, #352]	; (800ed20 <SwitchClass+0x194>)
 800ebc0:	4a57      	ldr	r2, [pc, #348]	; (800ed20 <SwitchClass+0x194>)
 800ebc2:	336c      	adds	r3, #108	; 0x6c
 800ebc4:	3264      	adds	r2, #100	; 0x64
 800ebc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebca:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ebce:	79fb      	ldrb	r3, [r7, #7]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d10c      	bne.n	800ebee <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f003 fa53 	bl	8012082 <LoRaMacClassBSwitchClass>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d103      	bne.n	800ebee <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebe6:	4a4e      	ldr	r2, [pc, #312]	; (800ed20 <SwitchClass+0x194>)
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 800ebee:	79fb      	ldrb	r3, [r7, #7]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	f040 808a 	bne.w	800ed0a <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebf6:	4a4a      	ldr	r2, [pc, #296]	; (800ed20 <SwitchClass+0x194>)
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ebfe:	4a49      	ldr	r2, [pc, #292]	; (800ed24 <SwitchClass+0x198>)
 800ec00:	4b48      	ldr	r3, [pc, #288]	; (800ed24 <SwitchClass+0x198>)
 800ec02:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ec06:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ec0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec0e:	682b      	ldr	r3, [r5, #0]
 800ec10:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ec12:	4b44      	ldr	r3, [pc, #272]	; (800ed24 <SwitchClass+0x198>)
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	73bb      	strb	r3, [r7, #14]
 800ec1e:	e049      	b.n	800ecb4 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ec20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec24:	4a3e      	ldr	r2, [pc, #248]	; (800ed20 <SwitchClass+0x194>)
 800ec26:	212c      	movs	r1, #44	; 0x2c
 800ec28:	fb01 f303 	mul.w	r3, r1, r3
 800ec2c:	4413      	add	r3, r2
 800ec2e:	33d2      	adds	r3, #210	; 0xd2
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d038      	beq.n	800eca8 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ec36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec3a:	4a39      	ldr	r2, [pc, #228]	; (800ed20 <SwitchClass+0x194>)
 800ec3c:	212c      	movs	r1, #44	; 0x2c
 800ec3e:	fb01 f303 	mul.w	r3, r1, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	33e8      	adds	r3, #232	; 0xe8
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a35      	ldr	r2, [pc, #212]	; (800ed20 <SwitchClass+0x194>)
 800ec4a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ec4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec50:	4a33      	ldr	r2, [pc, #204]	; (800ed20 <SwitchClass+0x194>)
 800ec52:	212c      	movs	r1, #44	; 0x2c
 800ec54:	fb01 f303 	mul.w	r3, r1, r3
 800ec58:	4413      	add	r3, r2
 800ec5a:	33ec      	adds	r3, #236	; 0xec
 800ec5c:	f993 3000 	ldrsb.w	r3, [r3]
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	4b2f      	ldr	r3, [pc, #188]	; (800ed20 <SwitchClass+0x194>)
 800ec64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ec68:	4b2e      	ldr	r3, [pc, #184]	; (800ed24 <SwitchClass+0x198>)
 800ec6a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800ec6e:	4b2d      	ldr	r3, [pc, #180]	; (800ed24 <SwitchClass+0x198>)
 800ec70:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ec74:	4b2a      	ldr	r3, [pc, #168]	; (800ed20 <SwitchClass+0x194>)
 800ec76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec78:	4a2a      	ldr	r2, [pc, #168]	; (800ed24 <SwitchClass+0x198>)
 800ec7a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec7e:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <SwitchClass+0x194>)
 800ec80:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ec84:	4b27      	ldr	r3, [pc, #156]	; (800ed24 <SwitchClass+0x198>)
 800ec86:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ec8a:	4b25      	ldr	r3, [pc, #148]	; (800ed20 <SwitchClass+0x194>)
 800ec8c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ec90:	4b24      	ldr	r3, [pc, #144]	; (800ed24 <SwitchClass+0x198>)
 800ec92:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ec96:	4b23      	ldr	r3, [pc, #140]	; (800ed24 <SwitchClass+0x198>)
 800ec98:	2203      	movs	r2, #3
 800ec9a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ec9e:	4b21      	ldr	r3, [pc, #132]	; (800ed24 <SwitchClass+0x198>)
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 800eca6:	e009      	b.n	800ecbc <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	3301      	adds	r3, #1
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	73bb      	strb	r3, [r7, #14]
 800ecb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	ddb1      	ble.n	800ec20 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ecbc:	4b19      	ldr	r3, [pc, #100]	; (800ed24 <SwitchClass+0x198>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ecc4:	4b18      	ldr	r3, [pc, #96]	; (800ed28 <SwitchClass+0x19c>)
 800ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ecca:	f001 f9b1 	bl	8010030 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ecd2:	e01a      	b.n	800ed0a <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f003 f9d3 	bl	8012082 <LoRaMacClassBSwitchClass>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ece0:	7bfb      	ldrb	r3, [r7, #15]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d113      	bne.n	800ed0e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ece6:	4a0e      	ldr	r2, [pc, #56]	; (800ed20 <SwitchClass+0x194>)
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 800ecee:	e00e      	b.n	800ed0e <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ecf0:	79fb      	ldrb	r3, [r7, #7]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d10d      	bne.n	800ed12 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ecf6:	4a0a      	ldr	r2, [pc, #40]	; (800ed20 <SwitchClass+0x194>)
 800ecf8:	79fb      	ldrb	r3, [r7, #7]
 800ecfa:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <SwitchClass+0x19c>)
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ed08:	e003      	b.n	800ed12 <SwitchClass+0x186>
            break;
 800ed0a:	bf00      	nop
 800ed0c:	e002      	b.n	800ed14 <SwitchClass+0x188>
            break;
 800ed0e:	bf00      	nop
 800ed10:	e000      	b.n	800ed14 <SwitchClass+0x188>
            break;
 800ed12:	bf00      	nop
        }
    }

    return status;
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3710      	adds	r7, #16
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bdb0      	pop	{r4, r5, r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	2000095c 	.word	0x2000095c
 800ed24:	20000454 	.word	0x20000454
 800ed28:	0801ba68 	.word	0x0801ba68

0800ed2c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ed36:	4b10      	ldr	r3, [pc, #64]	; (800ed78 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ed3c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ed3e:	79fb      	ldrb	r3, [r7, #7]
 800ed40:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ed42:	230d      	movs	r3, #13
 800ed44:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ed46:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ed50:	230e      	movs	r3, #14
 800ed52:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed54:	4b08      	ldr	r3, [pc, #32]	; (800ed78 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ed56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed5a:	f107 0210 	add.w	r2, r7, #16
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f005 f881 	bl	8013e68 <RegionGetPhyParam>
 800ed66:	4603      	mov	r3, r0
 800ed68:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	b2db      	uxtb	r3, r3
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	2000095c 	.word	0x2000095c

0800ed7c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	4603      	mov	r3, r0
 800ed84:	71fb      	strb	r3, [r7, #7]
 800ed86:	460b      	mov	r3, r1
 800ed88:	71bb      	strb	r3, [r7, #6]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ed96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff ffc6 	bl	800ed2c <GetMaxAppPayloadWithoutFOptsLength>
 800eda0:	4603      	mov	r3, r0
 800eda2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	797b      	ldrb	r3, [r7, #5]
 800edaa:	b29b      	uxth	r3, r3
 800edac:	4413      	add	r3, r2
 800edae:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800edb0:	89ba      	ldrh	r2, [r7, #12]
 800edb2:	89fb      	ldrh	r3, [r7, #14]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d804      	bhi.n	800edc2 <ValidatePayloadLength+0x46>
 800edb8:	89bb      	ldrh	r3, [r7, #12]
 800edba:	2bff      	cmp	r3, #255	; 0xff
 800edbc:	d801      	bhi.n	800edc2 <ValidatePayloadLength+0x46>
    {
        return true;
 800edbe:	2301      	movs	r3, #1
 800edc0:	e000      	b.n	800edc4 <ValidatePayloadLength+0x48>
    }
    return false;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800edcc:	b480      	push	{r7}
 800edce:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800edd0:	4a05      	ldr	r2, [pc, #20]	; (800ede8 <SetMlmeScheduleUplinkIndication+0x1c>)
 800edd2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 800edd6:	f043 0310 	orr.w	r3, r3, #16
 800edda:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 800edde:	bf00      	nop
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bc80      	pop	{r7}
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	20000454 	.word	0x20000454

0800edec <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b0a5      	sub	sp, #148	; 0x94
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	4608      	mov	r0, r1
 800edf6:	4611      	mov	r1, r2
 800edf8:	461a      	mov	r2, r3
 800edfa:	4603      	mov	r3, r0
 800edfc:	70fb      	strb	r3, [r7, #3]
 800edfe:	460b      	mov	r3, r1
 800ee00:	70bb      	strb	r3, [r7, #2]
 800ee02:	4613      	mov	r3, r2
 800ee04:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ee12:	2300      	movs	r3, #0
 800ee14:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 800ee18:	f000 bc73 	b.w	800f702 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ee1c:	78fb      	ldrb	r3, [r7, #3]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	4413      	add	r3, r2
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f003 fbf5 	bl	8012614 <LoRaMacCommandsGetCmdSize>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	441a      	add	r2, r3
 800ee32:	78bb      	ldrb	r3, [r7, #2]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	f300 846a 	bgt.w	800f70e <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ee3a:	78fb      	ldrb	r3, [r7, #3]
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	70fa      	strb	r2, [r7, #3]
 800ee40:	461a      	mov	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4413      	add	r3, r2
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	3b02      	subs	r3, #2
 800ee4a:	2b11      	cmp	r3, #17
 800ee4c:	f200 8461 	bhi.w	800f712 <ProcessMacCommands+0x926>
 800ee50:	a201      	add	r2, pc, #4	; (adr r2, 800ee58 <ProcessMacCommands+0x6c>)
 800ee52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee56:	bf00      	nop
 800ee58:	0800eea1 	.word	0x0800eea1
 800ee5c:	0800eee3 	.word	0x0800eee3
 800ee60:	0800efff 	.word	0x0800efff
 800ee64:	0800f03d 	.word	0x0800f03d
 800ee68:	0800f12d 	.word	0x0800f12d
 800ee6c:	0800f189 	.word	0x0800f189
 800ee70:	0800f245 	.word	0x0800f245
 800ee74:	0800f29f 	.word	0x0800f29f
 800ee78:	0800f383 	.word	0x0800f383
 800ee7c:	0800f713 	.word	0x0800f713
 800ee80:	0800f713 	.word	0x0800f713
 800ee84:	0800f42d 	.word	0x0800f42d
 800ee88:	0800f713 	.word	0x0800f713
 800ee8c:	0800f713 	.word	0x0800f713
 800ee90:	0800f543 	.word	0x0800f543
 800ee94:	0800f577 	.word	0x0800f577
 800ee98:	0800f607 	.word	0x0800f607
 800ee9c:	0800f67d 	.word	0x0800f67d
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800eea0:	2004      	movs	r0, #4
 800eea2:	f003 fd8f 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 842a 	beq.w	800f702 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800eeae:	2104      	movs	r1, #4
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	f003 fcfb 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800eeb6:	78fb      	ldrb	r3, [r7, #3]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	70fa      	strb	r2, [r7, #3]
 800eebc:	461a      	mov	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4413      	add	r3, r2
 800eec2:	781a      	ldrb	r2, [r3, #0]
 800eec4:	4bad      	ldr	r3, [pc, #692]	; (800f17c <ProcessMacCommands+0x390>)
 800eec6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	70fa      	strb	r2, [r7, #3]
 800eed0:	461a      	mov	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4413      	add	r3, r2
 800eed6:	781a      	ldrb	r2, [r3, #0]
 800eed8:	4ba8      	ldr	r3, [pc, #672]	; (800f17c <ProcessMacCommands+0x390>)
 800eeda:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 800eede:	f000 bc10 	b.w	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 800eefa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800eefe:	f083 0301 	eor.w	r3, r3, #1
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d078      	beq.n	800effa <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ef0e:	78fb      	ldrb	r3, [r7, #3]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	4413      	add	r3, r2
 800ef16:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ef18:	78ba      	ldrb	r2, [r7, #2]
 800ef1a:	78fb      	ldrb	r3, [r7, #3]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	3301      	adds	r3, #1
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ef28:	4b95      	ldr	r3, [pc, #596]	; (800f180 <ProcessMacCommands+0x394>)
 800ef2a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ef2e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ef32:	4b93      	ldr	r3, [pc, #588]	; (800f180 <ProcessMacCommands+0x394>)
 800ef34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ef38:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef3c:	4b90      	ldr	r3, [pc, #576]	; (800f180 <ProcessMacCommands+0x394>)
 800ef3e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ef42:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ef46:	4b8e      	ldr	r3, [pc, #568]	; (800f180 <ProcessMacCommands+0x394>)
 800ef48:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ef4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ef50:	4b8b      	ldr	r3, [pc, #556]	; (800f180 <ProcessMacCommands+0x394>)
 800ef52:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ef56:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ef5a:	4b89      	ldr	r3, [pc, #548]	; (800f180 <ProcessMacCommands+0x394>)
 800ef5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ef60:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ef62:	4b87      	ldr	r3, [pc, #540]	; (800f180 <ProcessMacCommands+0x394>)
 800ef64:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef68:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ef6c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800ef70:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ef78:	9301      	str	r3, [sp, #4]
 800ef7a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	4623      	mov	r3, r4
 800ef82:	f005 f82f 	bl	8013fe4 <RegionLinkAdrReq>
 800ef86:	4603      	mov	r3, r0
 800ef88:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ef8c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef90:	f003 0307 	and.w	r3, r3, #7
 800ef94:	2b07      	cmp	r3, #7
 800ef96:	d10e      	bne.n	800efb6 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ef98:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800ef9c:	4b78      	ldr	r3, [pc, #480]	; (800f180 <ProcessMacCommands+0x394>)
 800ef9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800efa2:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800efa6:	4b76      	ldr	r3, [pc, #472]	; (800f180 <ProcessMacCommands+0x394>)
 800efa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800efac:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800efb0:	4b73      	ldr	r3, [pc, #460]	; (800f180 <ProcessMacCommands+0x394>)
 800efb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800efb6:	2300      	movs	r3, #0
 800efb8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800efbc:	e00b      	b.n	800efd6 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800efbe:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800efc2:	2201      	movs	r2, #1
 800efc4:	4619      	mov	r1, r3
 800efc6:	2003      	movs	r0, #3
 800efc8:	f003 f9d4 	bl	8012374 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800efcc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800efd0:	3301      	adds	r3, #1
 800efd2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800efd6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800efda:	4a6a      	ldr	r2, [pc, #424]	; (800f184 <ProcessMacCommands+0x398>)
 800efdc:	fba2 2303 	umull	r2, r3, r2, r3
 800efe0:	089b      	lsrs	r3, r3, #2
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800efe8:	429a      	cmp	r2, r3
 800efea:	d3e8      	bcc.n	800efbe <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800efec:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	4413      	add	r3, r2
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	3b01      	subs	r3, #1
 800eff8:	70fb      	strb	r3, [r7, #3]
                }
                break;
 800effa:	bf00      	nop
 800effc:	e381      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	70fa      	strb	r2, [r7, #3]
 800f004:	461a      	mov	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4413      	add	r3, r2
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	f003 030f 	and.w	r3, r3, #15
 800f010:	b2da      	uxtb	r2, r3
 800f012:	4b5b      	ldr	r3, [pc, #364]	; (800f180 <ProcessMacCommands+0x394>)
 800f014:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f018:	4b59      	ldr	r3, [pc, #356]	; (800f180 <ProcessMacCommands+0x394>)
 800f01a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f01e:	461a      	mov	r2, r3
 800f020:	2301      	movs	r3, #1
 800f022:	4093      	lsls	r3, r2
 800f024:	b29a      	uxth	r2, r3
 800f026:	4b56      	ldr	r3, [pc, #344]	; (800f180 <ProcessMacCommands+0x394>)
 800f028:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f02c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f030:	2200      	movs	r2, #0
 800f032:	4619      	mov	r1, r3
 800f034:	2004      	movs	r0, #4
 800f036:	f003 f99d 	bl	8012374 <LoRaMacCommandsAddCmd>
                break;
 800f03a:	e362      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f03c:	2307      	movs	r3, #7
 800f03e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f042:	78fb      	ldrb	r3, [r7, #3]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	4413      	add	r3, r2
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	091b      	lsrs	r3, r3, #4
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	b25b      	sxtb	r3, r3
 800f050:	f003 0307 	and.w	r3, r3, #7
 800f054:	b25b      	sxtb	r3, r3
 800f056:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f05a:	78fb      	ldrb	r3, [r7, #3]
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	4413      	add	r3, r2
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	b25b      	sxtb	r3, r3
 800f064:	f003 030f 	and.w	r3, r3, #15
 800f068:	b25b      	sxtb	r3, r3
 800f06a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f06e:	78fb      	ldrb	r3, [r7, #3]
 800f070:	3301      	adds	r3, #1
 800f072:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f074:	78fb      	ldrb	r3, [r7, #3]
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	70fa      	strb	r2, [r7, #3]
 800f07a:	461a      	mov	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4413      	add	r3, r2
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f084:	78fb      	ldrb	r3, [r7, #3]
 800f086:	1c5a      	adds	r2, r3, #1
 800f088:	70fa      	strb	r2, [r7, #3]
 800f08a:	461a      	mov	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4413      	add	r3, r2
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	021a      	lsls	r2, r3, #8
 800f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f096:	4313      	orrs	r3, r2
 800f098:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f09a:	78fb      	ldrb	r3, [r7, #3]
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	70fa      	strb	r2, [r7, #3]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	041a      	lsls	r2, r3, #16
 800f0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0b2:	2264      	movs	r2, #100	; 0x64
 800f0b4:	fb02 f303 	mul.w	r3, r2, r3
 800f0b8:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f0ba:	4b31      	ldr	r3, [pc, #196]	; (800f180 <ProcessMacCommands+0x394>)
 800f0bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0c0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f004 ffa6 	bl	8014018 <RegionRxParamSetupReq>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f0d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b07      	cmp	r3, #7
 800f0dc:	d117      	bne.n	800f10e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f0de:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	4b26      	ldr	r3, [pc, #152]	; (800f180 <ProcessMacCommands+0x394>)
 800f0e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f0ea:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	4b23      	ldr	r3, [pc, #140]	; (800f180 <ProcessMacCommands+0x394>)
 800f0f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f8:	4a21      	ldr	r2, [pc, #132]	; (800f180 <ProcessMacCommands+0x394>)
 800f0fa:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0fe:	4a20      	ldr	r2, [pc, #128]	; (800f180 <ProcessMacCommands+0x394>)
 800f100:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f102:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b1d      	ldr	r3, [pc, #116]	; (800f180 <ProcessMacCommands+0x394>)
 800f10a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f10e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f112:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f116:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f11a:	2201      	movs	r2, #1
 800f11c:	4619      	mov	r1, r3
 800f11e:	2005      	movs	r0, #5
 800f120:	f003 f928 	bl	8012374 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f124:	f7ff fe52 	bl	800edcc <SetMlmeScheduleUplinkIndication>
                break;
 800f128:	bf00      	nop
 800f12a:	e2ea      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f12c:	23ff      	movs	r3, #255	; 0xff
 800f12e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f132:	4b12      	ldr	r3, [pc, #72]	; (800f17c <ProcessMacCommands+0x390>)
 800f134:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00d      	beq.n	800f158 <ProcessMacCommands+0x36c>
 800f13c:	4b0f      	ldr	r3, [pc, #60]	; (800f17c <ProcessMacCommands+0x390>)
 800f13e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f148:	4b0c      	ldr	r3, [pc, #48]	; (800f17c <ProcessMacCommands+0x390>)
 800f14a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4798      	blx	r3
 800f152:	4603      	mov	r3, r0
 800f154:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f158:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f15c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f160:	787b      	ldrb	r3, [r7, #1]
 800f162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f166:	b2db      	uxtb	r3, r3
 800f168:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f16c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f170:	2202      	movs	r2, #2
 800f172:	4619      	mov	r1, r3
 800f174:	2006      	movs	r0, #6
 800f176:	f003 f8fd 	bl	8012374 <LoRaMacCommandsAddCmd>
                break;
 800f17a:	e2c2      	b.n	800f702 <ProcessMacCommands+0x916>
 800f17c:	20000454 	.word	0x20000454
 800f180:	2000095c 	.word	0x2000095c
 800f184:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f188:	2303      	movs	r3, #3
 800f18a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f18e:	78fb      	ldrb	r3, [r7, #3]
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	70fa      	strb	r2, [r7, #3]
 800f194:	461a      	mov	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4413      	add	r3, r2
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	b25b      	sxtb	r3, r3
 800f19e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f1a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f1a6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f1a8:	78fb      	ldrb	r3, [r7, #3]
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	70fa      	strb	r2, [r7, #3]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	70fa      	strb	r2, [r7, #3]
 800f1be:	461a      	mov	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	021a      	lsls	r2, r3, #8
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f1ce:	78fb      	ldrb	r3, [r7, #3]
 800f1d0:	1c5a      	adds	r2, r3, #1
 800f1d2:	70fa      	strb	r2, [r7, #3]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4413      	add	r3, r2
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	041a      	lsls	r2, r3, #16
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	2264      	movs	r2, #100	; 0x64
 800f1e8:	fb02 f303 	mul.w	r3, r2, r3
 800f1ec:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f1f2:	78fb      	ldrb	r3, [r7, #3]
 800f1f4:	1c5a      	adds	r2, r3, #1
 800f1f6:	70fa      	strb	r2, [r7, #3]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b25b      	sxtb	r3, r3
 800f202:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f206:	4b87      	ldr	r3, [pc, #540]	; (800f424 <ProcessMacCommands+0x638>)
 800f208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f20c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f210:	4611      	mov	r1, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f004 ff13 	bl	801403e <RegionNewChannelReq>
 800f218:	4603      	mov	r3, r0
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f220:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f224:	b25b      	sxtb	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	db0a      	blt.n	800f240 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 800f22a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f22e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f232:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f236:	2201      	movs	r2, #1
 800f238:	4619      	mov	r1, r3
 800f23a:	2007      	movs	r0, #7
 800f23c:	f003 f89a 	bl	8012374 <LoRaMacCommandsAddCmd>
                }
                break;
 800f240:	bf00      	nop
 800f242:	e25e      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	1c5a      	adds	r2, r3, #1
 800f248:	70fa      	strb	r2, [r7, #3]
 800f24a:	461a      	mov	r2, r3
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	f003 030f 	and.w	r3, r3, #15
 800f256:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f25a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d104      	bne.n	800f26c <ProcessMacCommands+0x480>
                {
                    delay++;
 800f262:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f266:	3301      	adds	r3, #1
 800f268:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f26c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f274:	fb02 f303 	mul.w	r3, r2, r3
 800f278:	461a      	mov	r2, r3
 800f27a:	4b6a      	ldr	r3, [pc, #424]	; (800f424 <ProcessMacCommands+0x638>)
 800f27c:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f27e:	4b69      	ldr	r3, [pc, #420]	; (800f424 <ProcessMacCommands+0x638>)
 800f280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f282:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f286:	4a67      	ldr	r2, [pc, #412]	; (800f424 <ProcessMacCommands+0x638>)
 800f288:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f28a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f28e:	2200      	movs	r2, #0
 800f290:	4619      	mov	r1, r3
 800f292:	2008      	movs	r0, #8
 800f294:	f003 f86e 	bl	8012374 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f298:	f7ff fd98 	bl	800edcc <SetMlmeScheduleUplinkIndication>
                break;
 800f29c:	e231      	b.n	800f702 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f29e:	78fb      	ldrb	r3, [r7, #3]
 800f2a0:	1c5a      	adds	r2, r3, #1
 800f2a2:	70fa      	strb	r2, [r7, #3]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f2bc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2c0:	f003 0320 	and.w	r3, r3, #32
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f2ce:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2d2:	f003 0310 	and.w	r3, r3, #16
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d002      	beq.n	800f2e0 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f2e0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f2e4:	f003 030f 	and.w	r3, r3, #15
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f2ee:	4b4d      	ldr	r3, [pc, #308]	; (800f424 <ProcessMacCommands+0x638>)
 800f2f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f004 feb2 	bl	8014064 <RegionTxParamSetupReq>
 800f300:	4603      	mov	r3, r0
 800f302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f306:	d03a      	beq.n	800f37e <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f308:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f30c:	4b45      	ldr	r3, [pc, #276]	; (800f424 <ProcessMacCommands+0x638>)
 800f30e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f312:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f316:	4b43      	ldr	r3, [pc, #268]	; (800f424 <ProcessMacCommands+0x638>)
 800f318:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f31c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f320:	461a      	mov	r2, r3
 800f322:	4b41      	ldr	r3, [pc, #260]	; (800f428 <ProcessMacCommands+0x63c>)
 800f324:	5c9b      	ldrb	r3, [r3, r2]
 800f326:	4618      	mov	r0, r3
 800f328:	f7f1 fa50 	bl	80007cc <__aeabi_ui2f>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4a3d      	ldr	r2, [pc, #244]	; (800f424 <ProcessMacCommands+0x638>)
 800f330:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f332:	2302      	movs	r3, #2
 800f334:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f338:	4b3a      	ldr	r3, [pc, #232]	; (800f424 <ProcessMacCommands+0x638>)
 800f33a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f33e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f342:	4b38      	ldr	r3, [pc, #224]	; (800f424 <ProcessMacCommands+0x638>)
 800f344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f348:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f34c:	4611      	mov	r1, r2
 800f34e:	4618      	mov	r0, r3
 800f350:	f004 fd8a 	bl	8013e68 <RegionGetPhyParam>
 800f354:	4603      	mov	r3, r0
 800f356:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	b25a      	sxtb	r2, r3
 800f35c:	4b31      	ldr	r3, [pc, #196]	; (800f424 <ProcessMacCommands+0x638>)
 800f35e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f362:	4293      	cmp	r3, r2
 800f364:	bfb8      	it	lt
 800f366:	4613      	movlt	r3, r2
 800f368:	b25a      	sxtb	r2, r3
 800f36a:	4b2e      	ldr	r3, [pc, #184]	; (800f424 <ProcessMacCommands+0x638>)
 800f36c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f370:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f374:	2200      	movs	r2, #0
 800f376:	4619      	mov	r1, r3
 800f378:	2009      	movs	r0, #9
 800f37a:	f002 fffb 	bl	8012374 <LoRaMacCommandsAddCmd>
                }
                break;
 800f37e:	bf00      	nop
 800f380:	e1bf      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f382:	2303      	movs	r3, #3
 800f384:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f388:	78fb      	ldrb	r3, [r7, #3]
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	70fa      	strb	r2, [r7, #3]
 800f38e:	461a      	mov	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4413      	add	r3, r2
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f39a:	78fb      	ldrb	r3, [r7, #3]
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	70fa      	strb	r2, [r7, #3]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f3aa:	78fb      	ldrb	r3, [r7, #3]
 800f3ac:	1c5a      	adds	r2, r3, #1
 800f3ae:	70fa      	strb	r2, [r7, #3]
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	021a      	lsls	r2, r3, #8
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	1c5a      	adds	r2, r3, #1
 800f3c4:	70fa      	strb	r2, [r7, #3]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	041a      	lsls	r2, r3, #16
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d8:	2264      	movs	r2, #100	; 0x64
 800f3da:	fb02 f303 	mul.w	r3, r2, r3
 800f3de:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f3e0:	4b10      	ldr	r3, [pc, #64]	; (800f424 <ProcessMacCommands+0x638>)
 800f3e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3e6:	f107 0220 	add.w	r2, r7, #32
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f004 fe4c 	bl	801408a <RegionDlChannelReq>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f3fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f3fe:	b25b      	sxtb	r3, r3
 800f400:	2b00      	cmp	r3, #0
 800f402:	db0c      	blt.n	800f41e <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 800f404:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f408:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f40c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f410:	2201      	movs	r2, #1
 800f412:	4619      	mov	r1, r3
 800f414:	200a      	movs	r0, #10
 800f416:	f002 ffad 	bl	8012374 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 800f41a:	f7ff fcd7 	bl	800edcc <SetMlmeScheduleUplinkIndication>
                }
                break;
 800f41e:	bf00      	nop
 800f420:	e16f      	b.n	800f702 <ProcessMacCommands+0x916>
 800f422:	bf00      	nop
 800f424:	2000095c 	.word	0x2000095c
 800f428:	0801ba20 	.word	0x0801ba20
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f42c:	200a      	movs	r0, #10
 800f42e:	f003 fac9 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	f000 8164 	beq.w	800f702 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f43a:	210a      	movs	r1, #10
 800f43c:	2000      	movs	r0, #0
 800f43e:	f003 fa35 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800f442:	f107 0318 	add.w	r3, r7, #24
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f44c:	f107 0310 	add.w	r3, r7, #16
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f456:	f107 0308 	add.w	r3, r7, #8
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	70fa      	strb	r2, [r7, #3]
 800f466:	461a      	mov	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f470:	78fb      	ldrb	r3, [r7, #3]
 800f472:	1c5a      	adds	r2, r3, #1
 800f474:	70fa      	strb	r2, [r7, #3]
 800f476:	461a      	mov	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4413      	add	r3, r2
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	021a      	lsls	r2, r3, #8
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	4313      	orrs	r3, r2
 800f484:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f486:	78fb      	ldrb	r3, [r7, #3]
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	70fa      	strb	r2, [r7, #3]
 800f48c:	461a      	mov	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4413      	add	r3, r2
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	041a      	lsls	r2, r3, #16
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	4313      	orrs	r3, r2
 800f49a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f49c:	78fb      	ldrb	r3, [r7, #3]
 800f49e:	1c5a      	adds	r2, r3, #1
 800f4a0:	70fa      	strb	r2, [r7, #3]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	061a      	lsls	r2, r3, #24
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f4b2:	78fb      	ldrb	r3, [r7, #3]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	70fa      	strb	r2, [r7, #3]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	b21b      	sxth	r3, r3
 800f4c2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f4c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f4ce:	fb03 f302 	mul.w	r3, r3, r2
 800f4d2:	121b      	asrs	r3, r3, #8
 800f4d4:	b21b      	sxth	r3, r3
 800f4d6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f4d8:	f107 0310 	add.w	r3, r7, #16
 800f4dc:	f107 0218 	add.w	r2, r7, #24
 800f4e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4e4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	4b8c      	ldr	r3, [pc, #560]	; (800f71c <ProcessMacCommands+0x930>)
 800f4ec:	4413      	add	r3, r2
 800f4ee:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f4f0:	f107 0308 	add.w	r3, r7, #8
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f00a fa6f 	bl	80199d8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f4fa:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800f4fe:	4b88      	ldr	r3, [pc, #544]	; (800f720 <ProcessMacCommands+0x934>)
 800f500:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800f504:	9200      	str	r2, [sp, #0]
 800f506:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800f50a:	f107 0210 	add.w	r2, r7, #16
 800f50e:	ca06      	ldmia	r2, {r1, r2}
 800f510:	f00a f9fb 	bl	801990a <SysTimeSub>
 800f514:	f107 0010 	add.w	r0, r7, #16
 800f518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f51e:	f107 0208 	add.w	r2, r7, #8
 800f522:	ca06      	ldmia	r2, {r1, r2}
 800f524:	f00a f9b8 	bl	8019898 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f528:	f107 0310 	add.w	r3, r7, #16
 800f52c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f530:	f00a fa24 	bl	801997c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f534:	f002 fde3 	bl	80120fe <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f538:	4b79      	ldr	r3, [pc, #484]	; (800f720 <ProcessMacCommands+0x934>)
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 800f540:	e0df      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f542:	200d      	movs	r0, #13
 800f544:	f003 fa3e 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f000 80d9 	beq.w	800f702 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f550:	210d      	movs	r1, #13
 800f552:	2000      	movs	r0, #0
 800f554:	f003 f9aa 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f558:	4b71      	ldr	r3, [pc, #452]	; (800f720 <ProcessMacCommands+0x934>)
 800f55a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f55e:	2b04      	cmp	r3, #4
 800f560:	f000 80cf 	beq.w	800f702 <ProcessMacCommands+0x916>
 800f564:	4b6e      	ldr	r3, [pc, #440]	; (800f720 <ProcessMacCommands+0x934>)
 800f566:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 800f56a:	2b05      	cmp	r3, #5
 800f56c:	f000 80c9 	beq.w	800f702 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f570:	f002 fda6 	bl	80120c0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f574:	e0c5      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f576:	2303      	movs	r3, #3
 800f578:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	70fa      	strb	r2, [r7, #3]
 800f586:	461a      	mov	r2, r3
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4413      	add	r3, r2
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	70fa      	strb	r2, [r7, #3]
 800f596:	461a      	mov	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4413      	add	r3, r2
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	021b      	lsls	r3, r3, #8
 800f5a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f5a6:	78fb      	ldrb	r3, [r7, #3]
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	70fa      	strb	r2, [r7, #3]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	041b      	lsls	r3, r3, #16
 800f5b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800f5bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f5be:	2264      	movs	r2, #100	; 0x64
 800f5c0:	fb02 f303 	mul.w	r3, r2, r3
 800f5c4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f5c6:	78fb      	ldrb	r3, [r7, #3]
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	70fa      	strb	r2, [r7, #3]
 800f5cc:	461a      	mov	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 030f 	and.w	r3, r3, #15
 800f5d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f5dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f5e0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f002 fd72 	bl	80120cc <LoRaMacClassBPingSlotChannelReq>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800f5ee:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f5f2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f5f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2011      	movs	r0, #17
 800f600:	f002 feb8 	bl	8012374 <LoRaMacCommandsAddCmd>
                break;
 800f604:	e07d      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f606:	200e      	movs	r0, #14
 800f608:	f003 f9dc 	bl	80129c4 <LoRaMacConfirmQueueIsCmdActive>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d077      	beq.n	800f702 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f612:	210e      	movs	r1, #14
 800f614:	2000      	movs	r0, #0
 800f616:	f003 f949 	bl	80128ac <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	70fa      	strb	r2, [r7, #3]
 800f62c:	461a      	mov	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	1c5a      	adds	r2, r3, #1
 800f63c:	70fa      	strb	r2, [r7, #3]
 800f63e:	461a      	mov	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4413      	add	r3, r2
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	021b      	lsls	r3, r3, #8
 800f648:	b21a      	sxth	r2, r3
 800f64a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800f64e:	4313      	orrs	r3, r2
 800f650:	b21b      	sxth	r3, r3
 800f652:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f656:	78fb      	ldrb	r3, [r7, #3]
 800f658:	1c5a      	adds	r2, r3, #1
 800f65a:	70fa      	strb	r2, [r7, #3]
 800f65c:	461a      	mov	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4413      	add	r3, r2
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f668:	4b2e      	ldr	r3, [pc, #184]	; (800f724 <ProcessMacCommands+0x938>)
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800f670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f674:	4618      	mov	r0, r3
 800f676:	f002 fd35 	bl	80120e4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f67a:	e042      	b.n	800f702 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f682:	78fb      	ldrb	r3, [r7, #3]
 800f684:	1c5a      	adds	r2, r3, #1
 800f686:	70fa      	strb	r2, [r7, #3]
 800f688:	461a      	mov	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4413      	add	r3, r2
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f694:	78fb      	ldrb	r3, [r7, #3]
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	70fa      	strb	r2, [r7, #3]
 800f69a:	461a      	mov	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4413      	add	r3, r2
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	021b      	lsls	r3, r3, #8
 800f6a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f6ae:	78fb      	ldrb	r3, [r7, #3]
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	70fa      	strb	r2, [r7, #3]
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	041b      	lsls	r3, r3, #16
 800f6be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800f6c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f6cc:	2264      	movs	r2, #100	; 0x64
 800f6ce:	fb02 f303 	mul.w	r3, r2, r3
 800f6d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f6d6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f6da:	f002 fd16 	bl	801210a <LoRaMacClassBBeaconFreqReq>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d003      	beq.n	800f6ec <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800f6ea:	e002      	b.n	800f6f2 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f6f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	2013      	movs	r0, #19
 800f6fc:	f002 fe3a 	bl	8012374 <LoRaMacCommandsAddCmd>
                }
                break;
 800f700:	bf00      	nop
    while( macIndex < commandsSize )
 800f702:	78fa      	ldrb	r2, [r7, #3]
 800f704:	78bb      	ldrb	r3, [r7, #2]
 800f706:	429a      	cmp	r2, r3
 800f708:	f4ff ab88 	bcc.w	800ee1c <ProcessMacCommands+0x30>
 800f70c:	e002      	b.n	800f714 <ProcessMacCommands+0x928>
            return;
 800f70e:	bf00      	nop
 800f710:	e000      	b.n	800f714 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f712:	bf00      	nop
        }
    }
}
 800f714:	378c      	adds	r7, #140	; 0x8c
 800f716:	46bd      	mov	sp, r7
 800f718:	bd90      	pop	{r4, r7, pc}
 800f71a:	bf00      	nop
 800f71c:	12d53d80 	.word	0x12d53d80
 800f720:	20000454 	.word	0x20000454
 800f724:	200017a8 	.word	0x200017a8

0800f728 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b08e      	sub	sp, #56	; 0x38
 800f72c:	af02      	add	r7, sp, #8
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	607a      	str	r2, [r7, #4]
 800f732:	461a      	mov	r2, r3
 800f734:	460b      	mov	r3, r1
 800f736:	72fb      	strb	r3, [r7, #11]
 800f738:	4613      	mov	r3, r2
 800f73a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f73c:	2303      	movs	r3, #3
 800f73e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f742:	4b65      	ldr	r3, [pc, #404]	; (800f8d8 <Send+0x1b0>)
 800f744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f748:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f74c:	4b62      	ldr	r3, [pc, #392]	; (800f8d8 <Send+0x1b0>)
 800f74e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f752:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f756:	4b60      	ldr	r3, [pc, #384]	; (800f8d8 <Send+0x1b0>)
 800f758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f75a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f75c:	4b5e      	ldr	r3, [pc, #376]	; (800f8d8 <Send+0x1b0>)
 800f75e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f766:	2307      	movs	r3, #7
 800f768:	e0b1      	b.n	800f8ce <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f76a:	4b5b      	ldr	r3, [pc, #364]	; (800f8d8 <Send+0x1b0>)
 800f76c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 800f770:	2b00      	cmp	r3, #0
 800f772:	d102      	bne.n	800f77a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f774:	4b58      	ldr	r3, [pc, #352]	; (800f8d8 <Send+0x1b0>)
 800f776:	2200      	movs	r2, #0
 800f778:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800f77a:	2300      	movs	r3, #0
 800f77c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f780:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f784:	f36f 0303 	bfc	r3, #0, #4
 800f788:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f78c:	4b52      	ldr	r3, [pc, #328]	; (800f8d8 <Send+0x1b0>)
 800f78e:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 800f792:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f796:	f362 13c7 	bfi	r3, r2, #7, #1
 800f79a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f79e:	4b4e      	ldr	r3, [pc, #312]	; (800f8d8 <Send+0x1b0>)
 800f7a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d106      	bne.n	800f7b6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f7a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7ac:	f043 0310 	orr.w	r3, r3, #16
 800f7b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800f7b4:	e005      	b.n	800f7c2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f7b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7ba:	f36f 1304 	bfc	r3, #4, #1
 800f7be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f7c2:	4b45      	ldr	r3, [pc, #276]	; (800f8d8 <Send+0x1b0>)
 800f7c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d005      	beq.n	800f7d8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f7cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7d0:	f043 0320 	orr.w	r3, r3, #32
 800f7d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 800f7d8:	4b3f      	ldr	r3, [pc, #252]	; (800f8d8 <Send+0x1b0>)
 800f7da:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f7de:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f7e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f7e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	bf14      	ite	ne
 800f7f2:	2301      	movne	r3, #1
 800f7f4:	2300      	moveq	r3, #0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f7fa:	4b37      	ldr	r3, [pc, #220]	; (800f8d8 <Send+0x1b0>)
 800f7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fe:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800f800:	4b36      	ldr	r3, [pc, #216]	; (800f8dc <Send+0x1b4>)
 800f802:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 800f806:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800f808:	4b34      	ldr	r3, [pc, #208]	; (800f8dc <Send+0x1b4>)
 800f80a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 800f80e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f810:	4b31      	ldr	r3, [pc, #196]	; (800f8d8 <Send+0x1b0>)
 800f812:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f816:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f81a:	4b2f      	ldr	r3, [pc, #188]	; (800f8d8 <Send+0x1b0>)
 800f81c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f820:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f824:	4b2c      	ldr	r3, [pc, #176]	; (800f8d8 <Send+0x1b0>)
 800f826:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f82a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f82e:	4b2a      	ldr	r3, [pc, #168]	; (800f8d8 <Send+0x1b0>)
 800f830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f83c:	f107 0014 	add.w	r0, r7, #20
 800f840:	4a27      	ldr	r2, [pc, #156]	; (800f8e0 <Send+0x1b8>)
 800f842:	4928      	ldr	r1, [pc, #160]	; (800f8e4 <Send+0x1bc>)
 800f844:	f002 fb7c 	bl	8011f40 <LoRaMacAdrCalcNext>
 800f848:	4603      	mov	r3, r0
 800f84a:	461a      	mov	r2, r3
 800f84c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f850:	f362 1386 	bfi	r3, r2, #6, #1
 800f854:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f858:	7afa      	ldrb	r2, [r7, #11]
 800f85a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f85e:	893b      	ldrh	r3, [r7, #8]
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f000 fc21 	bl	80100ac <PrepareFrame>
 800f86a:	4603      	mov	r3, r0
 800f86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <Send+0x158>
 800f878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f87c:	2b0a      	cmp	r3, #10
 800f87e:	d107      	bne.n	800f890 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f880:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f884:	4618      	mov	r0, r3
 800f886:	f000 f96d 	bl	800fb64 <ScheduleTx>
 800f88a:	4603      	mov	r3, r0
 800f88c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00a      	beq.n	800f8ae <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f898:	4a0f      	ldr	r2, [pc, #60]	; (800f8d8 <Send+0x1b0>)
 800f89a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f89e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f8a2:	4a0d      	ldr	r2, [pc, #52]	; (800f8d8 <Send+0x1b0>)
 800f8a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f8a8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800f8ac:	e00d      	b.n	800f8ca <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f8ae:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <Send+0x1b0>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	4a07      	ldr	r2, [pc, #28]	; (800f8d8 <Send+0x1b0>)
 800f8ba:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f8bc:	f002 fdd2 	bl	8012464 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f8c6:	2313      	movs	r3, #19
 800f8c8:	e001      	b.n	800f8ce <Send+0x1a6>
        }
    }
    return status;
 800f8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3730      	adds	r7, #48	; 0x30
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	2000095c 	.word	0x2000095c
 800f8dc:	20000454 	.word	0x20000454
 800f8e0:	20000994 	.word	0x20000994
 800f8e4:	20000995 	.word	0x20000995

0800f8e8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	2bff      	cmp	r3, #255	; 0xff
 800f902:	d129      	bne.n	800f958 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f904:	2000      	movs	r0, #0
 800f906:	f7ff f941 	bl	800eb8c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f90a:	4b1a      	ldr	r3, [pc, #104]	; (800f974 <SendReJoinReq+0x8c>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f912:	4b18      	ldr	r3, [pc, #96]	; (800f974 <SendReJoinReq+0x8c>)
 800f914:	4a18      	ldr	r2, [pc, #96]	; (800f978 <SendReJoinReq+0x90>)
 800f916:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f91a:	4b16      	ldr	r3, [pc, #88]	; (800f974 <SendReJoinReq+0x8c>)
 800f91c:	22ff      	movs	r2, #255	; 0xff
 800f91e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f922:	7b3b      	ldrb	r3, [r7, #12]
 800f924:	f36f 1347 	bfc	r3, #5, #3
 800f928:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f92a:	7b3a      	ldrb	r2, [r7, #12]
 800f92c:	4b11      	ldr	r3, [pc, #68]	; (800f974 <SendReJoinReq+0x8c>)
 800f92e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f932:	f7fc fc85 	bl	800c240 <SecureElementGetJoinEui>
 800f936:	4603      	mov	r3, r0
 800f938:	2208      	movs	r2, #8
 800f93a:	4619      	mov	r1, r3
 800f93c:	480f      	ldr	r0, [pc, #60]	; (800f97c <SendReJoinReq+0x94>)
 800f93e:	f006 fd9e 	bl	801647e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800f942:	f7fc fc5b 	bl	800c1fc <SecureElementGetDevEui>
 800f946:	4603      	mov	r3, r0
 800f948:	2208      	movs	r2, #8
 800f94a:	4619      	mov	r1, r3
 800f94c:	480c      	ldr	r0, [pc, #48]	; (800f980 <SendReJoinReq+0x98>)
 800f94e:	f006 fd96 	bl	801647e <memcpy1>

            allowDelayedTx = false;
 800f952:	2300      	movs	r3, #0
 800f954:	73fb      	strb	r3, [r7, #15]

            break;
 800f956:	e002      	b.n	800f95e <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f958:	2302      	movs	r3, #2
 800f95a:	73bb      	strb	r3, [r7, #14]
            break;
 800f95c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	4618      	mov	r0, r3
 800f962:	f000 f8ff 	bl	800fb64 <ScheduleTx>
 800f966:	4603      	mov	r3, r0
 800f968:	73bb      	strb	r3, [r7, #14]
    return status;
 800f96a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	20000454 	.word	0x20000454
 800f978:	20000456 	.word	0x20000456
 800f97c:	20000562 	.word	0x20000562
 800f980:	2000056a 	.word	0x2000056a

0800f984 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f988:	f002 fb49 	bl	801201e <LoRaMacClassBIsBeaconExpected>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f992:	230e      	movs	r3, #14
 800f994:	e013      	b.n	800f9be <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f996:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <CheckForClassBCollision+0x40>)
 800f998:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d10d      	bne.n	800f9bc <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f9a0:	f002 fb44 	bl	801202c <LoRaMacClassBIsPingExpected>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f9aa:	230f      	movs	r3, #15
 800f9ac:	e007      	b.n	800f9be <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f9ae:	f002 fb44 	bl	801203a <LoRaMacClassBIsMulticastExpected>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d001      	beq.n	800f9bc <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f9b8:	230f      	movs	r3, #15
 800f9ba:	e000      	b.n	800f9be <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f9bc:	2300      	movs	r3, #0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000095c 	.word	0x2000095c

0800f9c8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f9c8:	b590      	push	{r4, r7, lr}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9ce:	4b2d      	ldr	r3, [pc, #180]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9d0:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f9d4:	4b2b      	ldr	r3, [pc, #172]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9d6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f9da:	4b2a      	ldr	r3, [pc, #168]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9dc:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800f9e0:	4b28      	ldr	r3, [pc, #160]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9e2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f9e6:	4b27      	ldr	r3, [pc, #156]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f9ec:	b25b      	sxtb	r3, r3
 800f9ee:	f004 fba3 	bl	8014138 <RegionApplyDrOffset>
 800f9f2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f9f4:	b259      	sxtb	r1, r3
 800f9f6:	4b23      	ldr	r3, [pc, #140]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9f8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f9fc:	4b21      	ldr	r3, [pc, #132]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800f9fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa00:	4821      	ldr	r0, [pc, #132]	; (800fa88 <ComputeRxWindowParameters+0xc0>)
 800fa02:	9000      	str	r0, [sp, #0]
 800fa04:	4620      	mov	r0, r4
 800fa06:	f004 faa7 	bl	8013f58 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fa0a:	4b1e      	ldr	r3, [pc, #120]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa0c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fa10:	4b1c      	ldr	r3, [pc, #112]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa12:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fa16:	b259      	sxtb	r1, r3
 800fa18:	4b1a      	ldr	r3, [pc, #104]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa1a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fa1e:	4b19      	ldr	r3, [pc, #100]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa22:	4c1a      	ldr	r4, [pc, #104]	; (800fa8c <ComputeRxWindowParameters+0xc4>)
 800fa24:	9400      	str	r4, [sp, #0]
 800fa26:	f004 fa97 	bl	8013f58 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fa2a:	4b16      	ldr	r3, [pc, #88]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa2e:	4a18      	ldr	r2, [pc, #96]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa30:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fa34:	4413      	add	r3, r2
 800fa36:	4a16      	ldr	r2, [pc, #88]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa38:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fa3c:	4b11      	ldr	r3, [pc, #68]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa40:	4a13      	ldr	r2, [pc, #76]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa42:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fa46:	4413      	add	r3, r2
 800fa48:	4a11      	ldr	r2, [pc, #68]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa4a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa4e:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa50:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d111      	bne.n	800fa7c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fa58:	4b0a      	ldr	r3, [pc, #40]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa5c:	4a0c      	ldr	r2, [pc, #48]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa5e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fa62:	4413      	add	r3, r2
 800fa64:	4a0a      	ldr	r2, [pc, #40]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa66:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fa6a:	4b06      	ldr	r3, [pc, #24]	; (800fa84 <ComputeRxWindowParameters+0xbc>)
 800fa6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa6e:	4a08      	ldr	r2, [pc, #32]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa70:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 800fa74:	4413      	add	r3, r2
 800fa76:	4a06      	ldr	r2, [pc, #24]	; (800fa90 <ComputeRxWindowParameters+0xc8>)
 800fa78:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 800fa7c:	bf00      	nop
 800fa7e:	3704      	adds	r7, #4
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd90      	pop	{r4, r7, pc}
 800fa84:	2000095c 	.word	0x2000095c
 800fa88:	2000080c 	.word	0x2000080c
 800fa8c:	20000820 	.word	0x20000820
 800fa90:	20000454 	.word	0x20000454

0800fa94 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fa9e:	4b13      	ldr	r3, [pc, #76]	; (800faec <VerifyTxFrame+0x58>)
 800faa0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d01b      	beq.n	800fae0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800faa8:	1d3b      	adds	r3, r7, #4
 800faaa:	4618      	mov	r0, r3
 800faac:	f002 fd20 	bl	80124f0 <LoRaMacCommandsGetSizeSerializedCmds>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fab6:	2313      	movs	r3, #19
 800fab8:	e013      	b.n	800fae2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800faba:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <VerifyTxFrame+0x5c>)
 800fabc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fac0:	4a0a      	ldr	r2, [pc, #40]	; (800faec <VerifyTxFrame+0x58>)
 800fac2:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	b2d2      	uxtb	r2, r2
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff f956 	bl	800ed7c <ValidatePayloadLength>
 800fad0:	4603      	mov	r3, r0
 800fad2:	f083 0301 	eor.w	r3, r3, #1
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d001      	beq.n	800fae0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fadc:	2308      	movs	r3, #8
 800fade:	e000      	b.n	800fae2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3708      	adds	r7, #8
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	2000095c 	.word	0x2000095c
 800faf0:	20000454 	.word	0x20000454

0800faf4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fafa:	4b18      	ldr	r3, [pc, #96]	; (800fb5c <SerializeTxFrame+0x68>)
 800fafc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d002      	beq.n	800fb0a <SerializeTxFrame+0x16>
 800fb04:	2b04      	cmp	r3, #4
 800fb06:	d011      	beq.n	800fb2c <SerializeTxFrame+0x38>
 800fb08:	e021      	b.n	800fb4e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fb0a:	4815      	ldr	r0, [pc, #84]	; (800fb60 <SerializeTxFrame+0x6c>)
 800fb0c:	f004 f823 	bl	8013b56 <LoRaMacSerializerJoinRequest>
 800fb10:	4603      	mov	r3, r0
 800fb12:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb1a:	2311      	movs	r3, #17
 800fb1c:	e01a      	b.n	800fb54 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	; (800fb5c <SerializeTxFrame+0x68>)
 800fb20:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	4b0d      	ldr	r3, [pc, #52]	; (800fb5c <SerializeTxFrame+0x68>)
 800fb28:	801a      	strh	r2, [r3, #0]
            break;
 800fb2a:	e012      	b.n	800fb52 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fb2c:	480c      	ldr	r0, [pc, #48]	; (800fb60 <SerializeTxFrame+0x6c>)
 800fb2e:	f004 f894 	bl	8013c5a <LoRaMacSerializerData>
 800fb32:	4603      	mov	r3, r0
 800fb34:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d001      	beq.n	800fb40 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fb3c:	2311      	movs	r3, #17
 800fb3e:	e009      	b.n	800fb54 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fb40:	4b06      	ldr	r3, [pc, #24]	; (800fb5c <SerializeTxFrame+0x68>)
 800fb42:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	4b04      	ldr	r3, [pc, #16]	; (800fb5c <SerializeTxFrame+0x68>)
 800fb4a:	801a      	strh	r2, [r3, #0]
            break;
 800fb4c:	e001      	b.n	800fb52 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e000      	b.n	800fb54 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20000454 	.word	0x20000454
 800fb60:	2000055c 	.word	0x2000055c

0800fb64 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b090      	sub	sp, #64	; 0x40
 800fb68:	af02      	add	r7, sp, #8
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fb74:	f7ff ff06 	bl	800f984 <CheckForClassBCollision>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <ScheduleTx+0x28>
    {
        return status;
 800fb86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb8a:	e08f      	b.n	800fcac <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 800fb8c:	f000 f8fa 	bl	800fd84 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fb90:	f7ff ffb0 	bl	800faf4 <SerializeTxFrame>
 800fb94:	4603      	mov	r3, r0
 800fb96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d002      	beq.n	800fba8 <ScheduleTx+0x44>
    {
        return status;
 800fba2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fba6:	e081      	b.n	800fcac <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fba8:	4b42      	ldr	r3, [pc, #264]	; (800fcb4 <ScheduleTx+0x150>)
 800fbaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbac:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbae:	4b41      	ldr	r3, [pc, #260]	; (800fcb4 <ScheduleTx+0x150>)
 800fbb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fbb4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fbb6:	4b3f      	ldr	r3, [pc, #252]	; (800fcb4 <ScheduleTx+0x150>)
 800fbb8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800fbbc:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fbbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f009 ff40 	bl	8019a48 <SysTimeGetMcuTime>
 800fbc8:	4638      	mov	r0, r7
 800fbca:	4b3a      	ldr	r3, [pc, #232]	; (800fcb4 <ScheduleTx+0x150>)
 800fbcc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800fbd0:	9200      	str	r2, [sp, #0]
 800fbd2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800fbd6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800fbda:	ca06      	ldmia	r2, {r1, r2}
 800fbdc:	f009 fe95 	bl	801990a <SysTimeSub>
 800fbe0:	f107 0320 	add.w	r3, r7, #32
 800fbe4:	463a      	mov	r2, r7
 800fbe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbea:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fbee:	4b31      	ldr	r3, [pc, #196]	; (800fcb4 <ScheduleTx+0x150>)
 800fbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fbfe:	4b2e      	ldr	r3, [pc, #184]	; (800fcb8 <ScheduleTx+0x154>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc04:	4b2b      	ldr	r3, [pc, #172]	; (800fcb4 <ScheduleTx+0x150>)
 800fc06:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d104      	bne.n	800fc18 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 800fc14:	2300      	movs	r3, #0
 800fc16:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fc18:	4b26      	ldr	r3, [pc, #152]	; (800fcb4 <ScheduleTx+0x150>)
 800fc1a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800fc1e:	f107 0114 	add.w	r1, r7, #20
 800fc22:	4b26      	ldr	r3, [pc, #152]	; (800fcbc <ScheduleTx+0x158>)
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	4b26      	ldr	r3, [pc, #152]	; (800fcc0 <ScheduleTx+0x15c>)
 800fc28:	4a26      	ldr	r2, [pc, #152]	; (800fcc4 <ScheduleTx+0x160>)
 800fc2a:	f004 fa5b 	bl	80140e4 <RegionNextChannel>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 800fc34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d022      	beq.n	800fc82 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800fc3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc40:	2b0b      	cmp	r3, #11
 800fc42:	d11b      	bne.n	800fc7c <ScheduleTx+0x118>
 800fc44:	7bfb      	ldrb	r3, [r7, #15]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d018      	beq.n	800fc7c <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	; (800fcb8 <ScheduleTx+0x154>)
 800fc4c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d011      	beq.n	800fc78 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fc54:	4b18      	ldr	r3, [pc, #96]	; (800fcb8 <ScheduleTx+0x154>)
 800fc56:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc5a:	f043 0320 	orr.w	r3, r3, #32
 800fc5e:	4a16      	ldr	r2, [pc, #88]	; (800fcb8 <ScheduleTx+0x154>)
 800fc60:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fc64:	4b14      	ldr	r3, [pc, #80]	; (800fcb8 <ScheduleTx+0x154>)
 800fc66:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4816      	ldr	r0, [pc, #88]	; (800fcc8 <ScheduleTx+0x164>)
 800fc6e:	f00a fb87 	bl	801a380 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800fc72:	4815      	ldr	r0, [pc, #84]	; (800fcc8 <ScheduleTx+0x164>)
 800fc74:	f00a faa6 	bl	801a1c4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	e017      	b.n	800fcac <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fc7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc80:	e014      	b.n	800fcac <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fc82:	f7ff fea1 	bl	800f9c8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fc86:	f7ff ff05 	bl	800fa94 <VerifyTxFrame>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 800fc90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <ScheduleTx+0x13a>
    {
        return status;
 800fc98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc9c:	e006      	b.n	800fcac <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fc9e:	4b06      	ldr	r3, [pc, #24]	; (800fcb8 <ScheduleTx+0x154>)
 800fca0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 800fca4:	4618      	mov	r0, r3
 800fca6:	f000 fb1d 	bl	80102e4 <SendFrameOnChannel>
 800fcaa:	4603      	mov	r3, r0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3738      	adds	r7, #56	; 0x38
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	2000095c 	.word	0x2000095c
 800fcb8:	20000454 	.word	0x20000454
 800fcbc:	2000098c 	.word	0x2000098c
 800fcc0:	200008d8 	.word	0x200008d8
 800fcc4:	20000869 	.word	0x20000869
 800fcc8:	200007bc 	.word	0x200007bc

0800fccc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	460a      	mov	r2, r1
 800fcd6:	71fb      	strb	r3, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fcdc:	2313      	movs	r3, #19
 800fcde:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fce0:	2300      	movs	r3, #0
 800fce2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fce4:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <SecureFrame+0xb0>)
 800fce6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <SecureFrame+0x28>
 800fcee:	2b04      	cmp	r3, #4
 800fcf0:	d011      	beq.n	800fd16 <SecureFrame+0x4a>
 800fcf2:	e03b      	b.n	800fd6c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fcf4:	4822      	ldr	r0, [pc, #136]	; (800fd80 <SecureFrame+0xb4>)
 800fcf6:	f003 faf7 	bl	80132e8 <LoRaMacCryptoPrepareJoinRequest>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd04:	2311      	movs	r3, #17
 800fd06:	e034      	b.n	800fd72 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd08:	4b1c      	ldr	r3, [pc, #112]	; (800fd7c <SecureFrame+0xb0>)
 800fd0a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	4b1a      	ldr	r3, [pc, #104]	; (800fd7c <SecureFrame+0xb0>)
 800fd12:	801a      	strh	r2, [r3, #0]
            break;
 800fd14:	e02c      	b.n	800fd70 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fd16:	f107 0308 	add.w	r3, r7, #8
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f003 fa0a 	bl	8013134 <LoRaMacCryptoGetFCntUp>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fd26:	2312      	movs	r3, #18
 800fd28:	e023      	b.n	800fd72 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fd2a:	4b14      	ldr	r3, [pc, #80]	; (800fd7c <SecureFrame+0xb0>)
 800fd2c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d104      	bne.n	800fd3e <SecureFrame+0x72>
 800fd34:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <SecureFrame+0xb0>)
 800fd36:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d902      	bls.n	800fd44 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	3b01      	subs	r3, #1
 800fd42:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fd44:	68b8      	ldr	r0, [r7, #8]
 800fd46:	79ba      	ldrb	r2, [r7, #6]
 800fd48:	79f9      	ldrb	r1, [r7, #7]
 800fd4a:	4b0d      	ldr	r3, [pc, #52]	; (800fd80 <SecureFrame+0xb4>)
 800fd4c:	f003 fbe4 	bl	8013518 <LoRaMacCryptoSecureMessage>
 800fd50:	4603      	mov	r3, r0
 800fd52:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fd54:	7bfb      	ldrb	r3, [r7, #15]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d001      	beq.n	800fd5e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd5a:	2311      	movs	r3, #17
 800fd5c:	e009      	b.n	800fd72 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fd5e:	4b07      	ldr	r3, [pc, #28]	; (800fd7c <SecureFrame+0xb0>)
 800fd60:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <SecureFrame+0xb0>)
 800fd68:	801a      	strh	r2, [r3, #0]
            break;
 800fd6a:	e001      	b.n	800fd70 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	e000      	b.n	800fd72 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20000454 	.word	0x20000454
 800fd80:	2000055c 	.word	0x2000055c

0800fd84 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fd88:	4b09      	ldr	r3, [pc, #36]	; (800fdb0 <CalculateBackOff+0x2c>)
 800fd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10a      	bne.n	800fda6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fd90:	4b07      	ldr	r3, [pc, #28]	; (800fdb0 <CalculateBackOff+0x2c>)
 800fd92:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800fd96:	3b01      	subs	r3, #1
 800fd98:	4a06      	ldr	r2, [pc, #24]	; (800fdb4 <CalculateBackOff+0x30>)
 800fd9a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 800fd9e:	fb02 f303 	mul.w	r3, r2, r3
 800fda2:	4a03      	ldr	r2, [pc, #12]	; (800fdb0 <CalculateBackOff+0x2c>)
 800fda4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800fda6:	bf00      	nop
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bc80      	pop	{r7}
 800fdac:	4770      	bx	lr
 800fdae:	bf00      	nop
 800fdb0:	2000095c 	.word	0x2000095c
 800fdb4:	20000454 	.word	0x20000454

0800fdb8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	7139      	strb	r1, [r7, #4]
 800fdc2:	71fb      	strb	r3, [r7, #7]
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <RemoveMacCommands+0x1c>
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d10d      	bne.n	800fdf0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fdd4:	79bb      	ldrb	r3, [r7, #6]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d108      	bne.n	800fdec <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fdda:	793b      	ldrb	r3, [r7, #4]
 800fddc:	f003 0320 	and.w	r3, r3, #32
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d004      	beq.n	800fdf0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fde6:	f002 fb61 	bl	80124ac <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fdea:	e001      	b.n	800fdf0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fdec:	f002 fb5e 	bl	80124ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fdf0:	bf00      	nop
 800fdf2:	3708      	adds	r7, #8
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 800fdf8:	b5b0      	push	{r4, r5, r7, lr}
 800fdfa:	b08e      	sub	sp, #56	; 0x38
 800fdfc:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fdfe:	4b68      	ldr	r3, [pc, #416]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fe06:	4b66      	ldr	r3, [pc, #408]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fe0c:	4b65      	ldr	r3, [pc, #404]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 800fe14:	4b63      	ldr	r3, [pc, #396]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fe1c:	4b61      	ldr	r3, [pc, #388]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fe1e:	2201      	movs	r2, #1
 800fe20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 800fe24:	4b5f      	ldr	r3, [pc, #380]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 800fe2c:	4b5c      	ldr	r3, [pc, #368]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fe34:	4b5a      	ldr	r3, [pc, #360]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe36:	2201      	movs	r2, #1
 800fe38:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fe3c:	4b58      	ldr	r3, [pc, #352]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe3e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 800fe42:	4b57      	ldr	r3, [pc, #348]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fe48:	4b55      	ldr	r3, [pc, #340]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe4a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 800fe4e:	4b54      	ldr	r3, [pc, #336]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fe54:	4b52      	ldr	r3, [pc, #328]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe56:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 800fe5a:	4b51      	ldr	r3, [pc, #324]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fe60:	4b4f      	ldr	r3, [pc, #316]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe62:	4a4f      	ldr	r2, [pc, #316]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe64:	3364      	adds	r3, #100	; 0x64
 800fe66:	32a4      	adds	r2, #164	; 0xa4
 800fe68:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe6c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fe70:	4b4b      	ldr	r3, [pc, #300]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe72:	4a4b      	ldr	r2, [pc, #300]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe74:	336c      	adds	r3, #108	; 0x6c
 800fe76:	32ac      	adds	r2, #172	; 0xac
 800fe78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe7c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fe80:	4b47      	ldr	r3, [pc, #284]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe82:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 800fe86:	4b46      	ldr	r3, [pc, #280]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fe8c:	4b44      	ldr	r3, [pc, #272]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe8e:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 800fe92:	4b43      	ldr	r3, [pc, #268]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe94:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fe98:	4b41      	ldr	r3, [pc, #260]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fe9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fe9e:	4a40      	ldr	r2, [pc, #256]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fea0:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fea2:	4b3f      	ldr	r3, [pc, #252]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fea4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fea8:	4a3d      	ldr	r2, [pc, #244]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800feaa:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 800feac:	4b3d      	ldr	r3, [pc, #244]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 800feb4:	4b3a      	ldr	r3, [pc, #232]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800febc:	2301      	movs	r3, #1
 800febe:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fec0:	4b39      	ldr	r3, [pc, #228]	; (800ffa8 <ResetMacParameters+0x1b0>)
 800fec2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fec4:	4b39      	ldr	r3, [pc, #228]	; (800ffac <ResetMacParameters+0x1b4>)
 800fec6:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fec8:	4b35      	ldr	r3, [pc, #212]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800feca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fece:	1d3a      	adds	r2, r7, #4
 800fed0:	4611      	mov	r1, r2
 800fed2:	4618      	mov	r0, r3
 800fed4:	f003 fff2 	bl	8013ebc <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fed8:	4b32      	ldr	r3, [pc, #200]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800feda:	2200      	movs	r2, #0
 800fedc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fee0:	4b30      	ldr	r3, [pc, #192]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fee2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 800fee6:	4b2f      	ldr	r3, [pc, #188]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fee8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800feec:	4b2c      	ldr	r3, [pc, #176]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800feee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fef0:	4a2c      	ldr	r2, [pc, #176]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fef2:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fef6:	4b2a      	ldr	r3, [pc, #168]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800fef8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fefc:	4b29      	ldr	r3, [pc, #164]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800fefe:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ff02:	4b27      	ldr	r3, [pc, #156]	; (800ffa0 <ResetMacParameters+0x1a8>)
 800ff04:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ff08:	4b26      	ldr	r3, [pc, #152]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff0a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ff0e:	4b25      	ldr	r3, [pc, #148]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ff16:	4b23      	ldr	r3, [pc, #140]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ff1e:	4a21      	ldr	r2, [pc, #132]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff20:	4b20      	ldr	r3, [pc, #128]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff22:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 800ff26:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 800ff2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff2e:	682b      	ldr	r3, [r5, #0]
 800ff30:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ff32:	4b1c      	ldr	r3, [pc, #112]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff34:	2201      	movs	r2, #1
 800ff36:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff3a:	4b1a      	ldr	r3, [pc, #104]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800ff46:	2300      	movs	r3, #0
 800ff48:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 800ff4a:	4b16      	ldr	r3, [pc, #88]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff4c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d009      	beq.n	800ff68 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800ff54:	4b13      	ldr	r3, [pc, #76]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff56:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800ff5e:	4b11      	ldr	r3, [pc, #68]	; (800ffa4 <ResetMacParameters+0x1ac>)
 800ff60:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800ff68:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <ResetMacParameters+0x1b8>)
 800ff6a:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800ff6c:	4b11      	ldr	r3, [pc, #68]	; (800ffb4 <ResetMacParameters+0x1bc>)
 800ff6e:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800ff70:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <ResetMacParameters+0x1c0>)
 800ff72:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800ff74:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <ResetMacParameters+0x1c4>)
 800ff76:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800ff78:	4b11      	ldr	r3, [pc, #68]	; (800ffc0 <ResetMacParameters+0x1c8>)
 800ff7a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800ff7c:	4b11      	ldr	r3, [pc, #68]	; (800ffc4 <ResetMacParameters+0x1cc>)
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800ff80:	4b11      	ldr	r3, [pc, #68]	; (800ffc8 <ResetMacParameters+0x1d0>)
 800ff82:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800ff84:	4b11      	ldr	r3, [pc, #68]	; (800ffcc <ResetMacParameters+0x1d4>)
 800ff86:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800ff88:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ff8c:	f107 0310 	add.w	r3, r7, #16
 800ff90:	4a0f      	ldr	r2, [pc, #60]	; (800ffd0 <ResetMacParameters+0x1d8>)
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 ffec 	bl	8011f70 <LoRaMacClassBInit>
}
 800ff98:	bf00      	nop
 800ff9a:	3738      	adds	r7, #56	; 0x38
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bdb0      	pop	{r4, r5, r7, pc}
 800ffa0:	2000095c 	.word	0x2000095c
 800ffa4:	20000454 	.word	0x20000454
 800ffa8:	20000b34 	.word	0x20000b34
 800ffac:	20000bc8 	.word	0x20000bc8
 800ffb0:	200008b4 	.word	0x200008b4
 800ffb4:	20000870 	.word	0x20000870
 800ffb8:	200008a0 	.word	0x200008a0
 800ffbc:	200008d5 	.word	0x200008d5
 800ffc0:	20000a28 	.word	0x20000a28
 800ffc4:	2000099c 	.word	0x2000099c
 800ffc8:	200009a0 	.word	0x200009a0
 800ffcc:	20000a2c 	.word	0x20000a2c
 800ffd0:	20000c90 	.word	0x20000c90

0800ffd4 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f00a f95e 	bl	801a2a0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800ffe4:	4b0e      	ldr	r3, [pc, #56]	; (8010020 <RxWindowSetup+0x4c>)
 800ffe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffe8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ffea:	4b0e      	ldr	r3, [pc, #56]	; (8010024 <RxWindowSetup+0x50>)
 800ffec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fff0:	4a0d      	ldr	r2, [pc, #52]	; (8010028 <RxWindowSetup+0x54>)
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	4618      	mov	r0, r3
 800fff6:	f003 ffc9 	bl	8013f8c <RegionRxConfig>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00a      	beq.n	8010016 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <RxWindowSetup+0x4c>)
 8010002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010004:	4a07      	ldr	r2, [pc, #28]	; (8010024 <RxWindowSetup+0x50>)
 8010006:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8010008:	4610      	mov	r0, r2
 801000a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	7cda      	ldrb	r2, [r3, #19]
 8010010:	4b06      	ldr	r3, [pc, #24]	; (801002c <RxWindowSetup+0x58>)
 8010012:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010016:	bf00      	nop
 8010018:	3708      	adds	r7, #8
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	0801ba68 	.word	0x0801ba68
 8010024:	2000095c 	.word	0x2000095c
 8010028:	20000874 	.word	0x20000874
 801002c:	20000454 	.word	0x20000454

08010030 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010030:	b590      	push	{r4, r7, lr}
 8010032:	b083      	sub	sp, #12
 8010034:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010036:	4b18      	ldr	r3, [pc, #96]	; (8010098 <OpenContinuousRxCWindow+0x68>)
 8010038:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801003c:	4b16      	ldr	r3, [pc, #88]	; (8010098 <OpenContinuousRxCWindow+0x68>)
 801003e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010042:	b259      	sxtb	r1, r3
 8010044:	4b14      	ldr	r3, [pc, #80]	; (8010098 <OpenContinuousRxCWindow+0x68>)
 8010046:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801004a:	4b13      	ldr	r3, [pc, #76]	; (8010098 <OpenContinuousRxCWindow+0x68>)
 801004c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801004e:	4c13      	ldr	r4, [pc, #76]	; (801009c <OpenContinuousRxCWindow+0x6c>)
 8010050:	9400      	str	r4, [sp, #0]
 8010052:	f003 ff81 	bl	8013f58 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010056:	4b12      	ldr	r3, [pc, #72]	; (80100a0 <OpenContinuousRxCWindow+0x70>)
 8010058:	2202      	movs	r2, #2
 801005a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801005e:	4b10      	ldr	r3, [pc, #64]	; (80100a0 <OpenContinuousRxCWindow+0x70>)
 8010060:	2201      	movs	r2, #1
 8010062:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <OpenContinuousRxCWindow+0x68>)
 8010068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801006c:	4a0d      	ldr	r2, [pc, #52]	; (80100a4 <OpenContinuousRxCWindow+0x74>)
 801006e:	490b      	ldr	r1, [pc, #44]	; (801009c <OpenContinuousRxCWindow+0x6c>)
 8010070:	4618      	mov	r0, r3
 8010072:	f003 ff8b 	bl	8013f8c <RegionRxConfig>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d009      	beq.n	8010090 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 801007c:	4b0a      	ldr	r3, [pc, #40]	; (80100a8 <OpenContinuousRxCWindow+0x78>)
 801007e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010080:	2000      	movs	r0, #0
 8010082:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010084:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <OpenContinuousRxCWindow+0x70>)
 8010086:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801008a:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <OpenContinuousRxCWindow+0x70>)
 801008c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8010090:	bf00      	nop
 8010092:	3704      	adds	r7, #4
 8010094:	46bd      	mov	sp, r7
 8010096:	bd90      	pop	{r4, r7, pc}
 8010098:	2000095c 	.word	0x2000095c
 801009c:	20000834 	.word	0x20000834
 80100a0:	20000454 	.word	0x20000454
 80100a4:	20000874 	.word	0x20000874
 80100a8:	0801ba68 	.word	0x0801ba68

080100ac <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	603b      	str	r3, [r7, #0]
 80100b8:	4613      	mov	r3, r2
 80100ba:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80100bc:	4b82      	ldr	r3, [pc, #520]	; (80102c8 <PrepareFrame+0x21c>)
 80100be:	2200      	movs	r2, #0
 80100c0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80100c2:	4b81      	ldr	r3, [pc, #516]	; (80102c8 <PrepareFrame+0x21c>)
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80100ca:	2300      	movs	r3, #0
 80100cc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80100dc:	2300      	movs	r3, #0
 80100de:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80100e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100e2:	461a      	mov	r2, r3
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	4879      	ldr	r0, [pc, #484]	; (80102cc <PrepareFrame+0x220>)
 80100e8:	f006 f9c9 	bl	801647e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80100ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	4b75      	ldr	r3, [pc, #468]	; (80102c8 <PrepareFrame+0x21c>)
 80100f2:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	781a      	ldrb	r2, [r3, #0]
 80100fa:	4b73      	ldr	r3, [pc, #460]	; (80102c8 <PrepareFrame+0x21c>)
 80100fc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b07      	cmp	r3, #7
 801010a:	f000 80b9 	beq.w	8010280 <PrepareFrame+0x1d4>
 801010e:	2b07      	cmp	r3, #7
 8010110:	f300 80d0 	bgt.w	80102b4 <PrepareFrame+0x208>
 8010114:	2b02      	cmp	r3, #2
 8010116:	d006      	beq.n	8010126 <PrepareFrame+0x7a>
 8010118:	2b04      	cmp	r3, #4
 801011a:	f040 80cb 	bne.w	80102b4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801011e:	4b6a      	ldr	r3, [pc, #424]	; (80102c8 <PrepareFrame+0x21c>)
 8010120:	2201      	movs	r2, #1
 8010122:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010126:	4b68      	ldr	r3, [pc, #416]	; (80102c8 <PrepareFrame+0x21c>)
 8010128:	2204      	movs	r2, #4
 801012a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801012e:	4b66      	ldr	r3, [pc, #408]	; (80102c8 <PrepareFrame+0x21c>)
 8010130:	4a67      	ldr	r2, [pc, #412]	; (80102d0 <PrepareFrame+0x224>)
 8010132:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010136:	4b64      	ldr	r3, [pc, #400]	; (80102c8 <PrepareFrame+0x21c>)
 8010138:	22ff      	movs	r2, #255	; 0xff
 801013a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	781a      	ldrb	r2, [r3, #0]
 8010142:	4b61      	ldr	r3, [pc, #388]	; (80102c8 <PrepareFrame+0x21c>)
 8010144:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010148:	4a5f      	ldr	r2, [pc, #380]	; (80102c8 <PrepareFrame+0x21c>)
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010150:	4b60      	ldr	r3, [pc, #384]	; (80102d4 <PrepareFrame+0x228>)
 8010152:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010156:	4a5c      	ldr	r2, [pc, #368]	; (80102c8 <PrepareFrame+0x21c>)
 8010158:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	781a      	ldrb	r2, [r3, #0]
 8010160:	4b59      	ldr	r3, [pc, #356]	; (80102c8 <PrepareFrame+0x21c>)
 8010162:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010166:	4b58      	ldr	r3, [pc, #352]	; (80102c8 <PrepareFrame+0x21c>)
 8010168:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 801016c:	4b56      	ldr	r3, [pc, #344]	; (80102c8 <PrepareFrame+0x21c>)
 801016e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010172:	4b55      	ldr	r3, [pc, #340]	; (80102c8 <PrepareFrame+0x21c>)
 8010174:	4a55      	ldr	r2, [pc, #340]	; (80102cc <PrepareFrame+0x220>)
 8010176:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801017a:	f107 0318 	add.w	r3, r7, #24
 801017e:	4618      	mov	r0, r3
 8010180:	f002 ffd8 	bl	8013134 <LoRaMacCryptoGetFCntUp>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801018a:	2312      	movs	r3, #18
 801018c:	e098      	b.n	80102c0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	b29a      	uxth	r2, r3
 8010192:	4b4d      	ldr	r3, [pc, #308]	; (80102c8 <PrepareFrame+0x21c>)
 8010194:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8010198:	4b4b      	ldr	r3, [pc, #300]	; (80102c8 <PrepareFrame+0x21c>)
 801019a:	2200      	movs	r2, #0
 801019c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 80101a0:	4b49      	ldr	r3, [pc, #292]	; (80102c8 <PrepareFrame+0x21c>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	4a47      	ldr	r2, [pc, #284]	; (80102c8 <PrepareFrame+0x21c>)
 80101ac:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80101b0:	f107 0314 	add.w	r3, r7, #20
 80101b4:	4618      	mov	r0, r3
 80101b6:	f002 f99b 	bl	80124f0 <LoRaMacCommandsGetSizeSerializedCmds>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101c0:	2313      	movs	r3, #19
 80101c2:	e07d      	b.n	80102c0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d076      	beq.n	80102b8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80101ca:	4b42      	ldr	r3, [pc, #264]	; (80102d4 <PrepareFrame+0x228>)
 80101cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fdab 	bl	800ed2c <GetMaxAppPayloadWithoutFOptsLength>
 80101d6:	4603      	mov	r3, r0
 80101d8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80101da:	4b3b      	ldr	r3, [pc, #236]	; (80102c8 <PrepareFrame+0x21c>)
 80101dc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d01d      	beq.n	8010220 <PrepareFrame+0x174>
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	2b0f      	cmp	r3, #15
 80101e8:	d81a      	bhi.n	8010220 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80101ea:	f107 0314 	add.w	r3, r7, #20
 80101ee:	4a3a      	ldr	r2, [pc, #232]	; (80102d8 <PrepareFrame+0x22c>)
 80101f0:	4619      	mov	r1, r3
 80101f2:	200f      	movs	r0, #15
 80101f4:	f002 f992 	bl	801251c <LoRaMacCommandsSerializeCmds>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d001      	beq.n	8010202 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80101fe:	2313      	movs	r3, #19
 8010200:	e05e      	b.n	80102c0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f003 030f 	and.w	r3, r3, #15
 8010208:	b2d9      	uxtb	r1, r3
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	7813      	ldrb	r3, [r2, #0]
 801020e:	f361 0303 	bfi	r3, r1, #0, #4
 8010212:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	781a      	ldrb	r2, [r3, #0]
 8010218:	4b2b      	ldr	r3, [pc, #172]	; (80102c8 <PrepareFrame+0x21c>)
 801021a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801021e:	e04b      	b.n	80102b8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010220:	4b29      	ldr	r3, [pc, #164]	; (80102c8 <PrepareFrame+0x21c>)
 8010222:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010226:	2b00      	cmp	r3, #0
 8010228:	d010      	beq.n	801024c <PrepareFrame+0x1a0>
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2b0f      	cmp	r3, #15
 801022e:	d90d      	bls.n	801024c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010230:	7ffb      	ldrb	r3, [r7, #31]
 8010232:	f107 0114 	add.w	r1, r7, #20
 8010236:	4a29      	ldr	r2, [pc, #164]	; (80102dc <PrepareFrame+0x230>)
 8010238:	4618      	mov	r0, r3
 801023a:	f002 f96f 	bl	801251c <LoRaMacCommandsSerializeCmds>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010244:	2313      	movs	r3, #19
 8010246:	e03b      	b.n	80102c0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010248:	230a      	movs	r3, #10
 801024a:	e039      	b.n	80102c0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801024c:	7ffb      	ldrb	r3, [r7, #31]
 801024e:	f107 0114 	add.w	r1, r7, #20
 8010252:	4a22      	ldr	r2, [pc, #136]	; (80102dc <PrepareFrame+0x230>)
 8010254:	4618      	mov	r0, r3
 8010256:	f002 f961 	bl	801251c <LoRaMacCommandsSerializeCmds>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d001      	beq.n	8010264 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010260:	2313      	movs	r3, #19
 8010262:	e02d      	b.n	80102c0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010264:	4b18      	ldr	r3, [pc, #96]	; (80102c8 <PrepareFrame+0x21c>)
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801026c:	4b16      	ldr	r3, [pc, #88]	; (80102c8 <PrepareFrame+0x21c>)
 801026e:	4a1b      	ldr	r2, [pc, #108]	; (80102dc <PrepareFrame+0x230>)
 8010270:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	b2da      	uxtb	r2, r3
 8010278:	4b13      	ldr	r3, [pc, #76]	; (80102c8 <PrepareFrame+0x21c>)
 801027a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801027e:	e01b      	b.n	80102b8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d01a      	beq.n	80102bc <PrepareFrame+0x210>
 8010286:	4b10      	ldr	r3, [pc, #64]	; (80102c8 <PrepareFrame+0x21c>)
 8010288:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801028c:	2b00      	cmp	r3, #0
 801028e:	d015      	beq.n	80102bc <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010290:	4813      	ldr	r0, [pc, #76]	; (80102e0 <PrepareFrame+0x234>)
 8010292:	4b0d      	ldr	r3, [pc, #52]	; (80102c8 <PrepareFrame+0x21c>)
 8010294:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010298:	b29b      	uxth	r3, r3
 801029a:	461a      	mov	r2, r3
 801029c:	6839      	ldr	r1, [r7, #0]
 801029e:	f006 f8ee 	bl	801647e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80102a2:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <PrepareFrame+0x21c>)
 80102a4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	3301      	adds	r3, #1
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <PrepareFrame+0x21c>)
 80102b0:	801a      	strh	r2, [r3, #0]
            }
            break;
 80102b2:	e003      	b.n	80102bc <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80102b4:	2302      	movs	r3, #2
 80102b6:	e003      	b.n	80102c0 <PrepareFrame+0x214>
            break;
 80102b8:	bf00      	nop
 80102ba:	e000      	b.n	80102be <PrepareFrame+0x212>
            break;
 80102bc:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3720      	adds	r7, #32
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20000454 	.word	0x20000454
 80102cc:	2000058c 	.word	0x2000058c
 80102d0:	20000456 	.word	0x20000456
 80102d4:	2000095c 	.word	0x2000095c
 80102d8:	2000056c 	.word	0x2000056c
 80102dc:	200008dc 	.word	0x200008dc
 80102e0:	20000457 	.word	0x20000457

080102e4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b08a      	sub	sp, #40	; 0x28
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	4603      	mov	r3, r0
 80102ec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80102ee:	2303      	movs	r3, #3
 80102f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80102f4:	2300      	movs	r3, #0
 80102f6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80102f8:	79fb      	ldrb	r3, [r7, #7]
 80102fa:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80102fc:	4b47      	ldr	r3, [pc, #284]	; (801041c <SendFrameOnChannel+0x138>)
 80102fe:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010302:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010304:	4b45      	ldr	r3, [pc, #276]	; (801041c <SendFrameOnChannel+0x138>)
 8010306:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801030a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801030c:	4b43      	ldr	r3, [pc, #268]	; (801041c <SendFrameOnChannel+0x138>)
 801030e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010310:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010312:	4b42      	ldr	r3, [pc, #264]	; (801041c <SendFrameOnChannel+0x138>)
 8010314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010316:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010318:	4b41      	ldr	r3, [pc, #260]	; (8010420 <SendFrameOnChannel+0x13c>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801031e:	4b3f      	ldr	r3, [pc, #252]	; (801041c <SendFrameOnChannel+0x138>)
 8010320:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010324:	f107 020f 	add.w	r2, r7, #15
 8010328:	f107 0110 	add.w	r1, r7, #16
 801032c:	4b3d      	ldr	r3, [pc, #244]	; (8010424 <SendFrameOnChannel+0x140>)
 801032e:	f003 fe42 	bl	8013fb6 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010332:	4b3b      	ldr	r3, [pc, #236]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010334:	2201      	movs	r2, #1
 8010336:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801033a:	4b38      	ldr	r3, [pc, #224]	; (801041c <SendFrameOnChannel+0x138>)
 801033c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010340:	b2da      	uxtb	r2, r3
 8010342:	4b37      	ldr	r3, [pc, #220]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010344:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8010348:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801034c:	4b34      	ldr	r3, [pc, #208]	; (8010420 <SendFrameOnChannel+0x13c>)
 801034e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8010352:	79fb      	ldrb	r3, [r7, #7]
 8010354:	4a32      	ldr	r2, [pc, #200]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010356:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801035a:	4b31      	ldr	r3, [pc, #196]	; (8010420 <SendFrameOnChannel+0x13c>)
 801035c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010360:	4a2f      	ldr	r2, [pc, #188]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010362:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010366:	4b2e      	ldr	r3, [pc, #184]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010368:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 801036c:	4a2c      	ldr	r2, [pc, #176]	; (8010420 <SendFrameOnChannel+0x13c>)
 801036e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010372:	f001 fe69 	bl	8012048 <LoRaMacClassBIsBeaconModeActive>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801037c:	4b28      	ldr	r3, [pc, #160]	; (8010420 <SendFrameOnChannel+0x13c>)
 801037e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8010382:	4618      	mov	r0, r3
 8010384:	f001 fecb 	bl	801211e <LoRaMacClassBIsUplinkCollision>
 8010388:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801038a:	6a3b      	ldr	r3, [r7, #32]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d001      	beq.n	8010394 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010390:	2310      	movs	r3, #16
 8010392:	e03e      	b.n	8010412 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010394:	4b21      	ldr	r3, [pc, #132]	; (801041c <SendFrameOnChannel+0x138>)
 8010396:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801039a:	2b01      	cmp	r3, #1
 801039c:	d101      	bne.n	80103a2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801039e:	f001 fec8 	bl	8012132 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80103a2:	f001 fe62 	bl	801206a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80103a6:	4b1d      	ldr	r3, [pc, #116]	; (801041c <SendFrameOnChannel+0x138>)
 80103a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	4a1c      	ldr	r2, [pc, #112]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103b0:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 80103b4:	4611      	mov	r1, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fc88 	bl	800fccc <SecureFrame>
 80103bc:	4603      	mov	r3, r0
 80103be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80103c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <SendFrameOnChannel+0xec>
    {
        return status;
 80103ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103ce:	e020      	b.n	8010412 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103d0:	4b13      	ldr	r3, [pc, #76]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80103d6:	f043 0302 	orr.w	r3, r3, #2
 80103da:	4a11      	ldr	r2, [pc, #68]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103dc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 80103e0:	4b0f      	ldr	r3, [pc, #60]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103e2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80103e6:	f083 0301 	eor.w	r3, r3, #1
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d007      	beq.n	8010400 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 80103f0:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103f2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80103f6:	3301      	adds	r3, #1
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	4b09      	ldr	r3, [pc, #36]	; (8010420 <SendFrameOnChannel+0x13c>)
 80103fc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010400:	4b09      	ldr	r3, [pc, #36]	; (8010428 <SendFrameOnChannel+0x144>)
 8010402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010404:	4a06      	ldr	r2, [pc, #24]	; (8010420 <SendFrameOnChannel+0x13c>)
 8010406:	8812      	ldrh	r2, [r2, #0]
 8010408:	b2d2      	uxtb	r2, r2
 801040a:	4611      	mov	r1, r2
 801040c:	4807      	ldr	r0, [pc, #28]	; (801042c <SendFrameOnChannel+0x148>)
 801040e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010410:	2300      	movs	r3, #0
}
 8010412:	4618      	mov	r0, r3
 8010414:	3728      	adds	r7, #40	; 0x28
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	2000095c 	.word	0x2000095c
 8010420:	20000454 	.word	0x20000454
 8010424:	2000086c 	.word	0x2000086c
 8010428:	0801ba68 	.word	0x0801ba68
 801042c:	20000456 	.word	0x20000456

08010430 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
 8010436:	4603      	mov	r3, r0
 8010438:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801043a:	4b15      	ldr	r3, [pc, #84]	; (8010490 <SetTxContinuousWave+0x60>)
 801043c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8010440:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010442:	4b14      	ldr	r3, [pc, #80]	; (8010494 <SetTxContinuousWave+0x64>)
 8010444:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010448:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801044a:	4b12      	ldr	r3, [pc, #72]	; (8010494 <SetTxContinuousWave+0x64>)
 801044c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010450:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010452:	4b10      	ldr	r3, [pc, #64]	; (8010494 <SetTxContinuousWave+0x64>)
 8010454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010456:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010458:	4b0e      	ldr	r3, [pc, #56]	; (8010494 <SetTxContinuousWave+0x64>)
 801045a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801045c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801045e:	88fb      	ldrh	r3, [r7, #6]
 8010460:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8010462:	4b0c      	ldr	r3, [pc, #48]	; (8010494 <SetTxContinuousWave+0x64>)
 8010464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010468:	f107 0208 	add.w	r2, r7, #8
 801046c:	4611      	mov	r1, r2
 801046e:	4618      	mov	r0, r3
 8010470:	f003 fe50 	bl	8014114 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010474:	4b06      	ldr	r3, [pc, #24]	; (8010490 <SetTxContinuousWave+0x60>)
 8010476:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801047a:	f043 0302 	orr.w	r3, r3, #2
 801047e:	4a04      	ldr	r2, [pc, #16]	; (8010490 <SetTxContinuousWave+0x60>)
 8010480:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	20000454 	.word	0x20000454
 8010494:	2000095c 	.word	0x2000095c

08010498 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	4603      	mov	r3, r0
 80104a0:	6039      	str	r1, [r7, #0]
 80104a2:	80fb      	strh	r3, [r7, #6]
 80104a4:	4613      	mov	r3, r2
 80104a6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80104a8:	4b09      	ldr	r3, [pc, #36]	; (80104d0 <SetTxContinuousWave1+0x38>)
 80104aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104ac:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80104b0:	88fa      	ldrh	r2, [r7, #6]
 80104b2:	6838      	ldr	r0, [r7, #0]
 80104b4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80104b6:	4b07      	ldr	r3, [pc, #28]	; (80104d4 <SetTxContinuousWave1+0x3c>)
 80104b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80104bc:	f043 0302 	orr.w	r3, r3, #2
 80104c0:	4a04      	ldr	r2, [pc, #16]	; (80104d4 <SetTxContinuousWave1+0x3c>)
 80104c2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	0801ba68 	.word	0x0801ba68
 80104d4:	20000454 	.word	0x20000454

080104d8 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0
    return &Nvm;
 80104dc:	4b02      	ldr	r3, [pc, #8]	; (80104e8 <GetNvmData+0x10>)
}
 80104de:	4618      	mov	r0, r3
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bc80      	pop	{r7}
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	2000095c 	.word	0x2000095c

080104ec <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80104fe:	2303      	movs	r3, #3
 8010500:	e09a      	b.n	8010638 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010502:	4b4f      	ldr	r3, [pc, #316]	; (8010640 <RestoreNvmData+0x154>)
 8010504:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010508:	2b01      	cmp	r3, #1
 801050a:	d001      	beq.n	8010510 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 801050c:	2301      	movs	r3, #1
 801050e:	e093      	b.n	8010638 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2124      	movs	r1, #36	; 0x24
 8010514:	4618      	mov	r0, r3
 8010516:	f006 f807 	bl	8016528 <Crc32>
 801051a:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010520:	68fa      	ldr	r2, [r7, #12]
 8010522:	429a      	cmp	r2, r3
 8010524:	d105      	bne.n	8010532 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2228      	movs	r2, #40	; 0x28
 801052a:	4619      	mov	r1, r3
 801052c:	4845      	ldr	r0, [pc, #276]	; (8010644 <RestoreNvmData+0x158>)
 801052e:	f005 ffa6 	bl	801647e <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	3328      	adds	r3, #40	; 0x28
 8010536:	2114      	movs	r1, #20
 8010538:	4618      	mov	r0, r3
 801053a:	f005 fff5 	bl	8016528 <Crc32>
 801053e:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	429a      	cmp	r2, r3
 8010548:	d106      	bne.n	8010558 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	3328      	adds	r3, #40	; 0x28
 801054e:	2218      	movs	r2, #24
 8010550:	4619      	mov	r1, r3
 8010552:	483d      	ldr	r0, [pc, #244]	; (8010648 <RestoreNvmData+0x15c>)
 8010554:	f005 ff93 	bl	801647e <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	3340      	adds	r3, #64	; 0x40
 801055c:	21d4      	movs	r1, #212	; 0xd4
 801055e:	4618      	mov	r0, r3
 8010560:	f005 ffe2 	bl	8016528 <Crc32>
 8010564:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	429a      	cmp	r2, r3
 8010570:	d11f      	bne.n	80105b2 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	3340      	adds	r3, #64	; 0x40
 8010576:	22d8      	movs	r2, #216	; 0xd8
 8010578:	4619      	mov	r1, r3
 801057a:	4834      	ldr	r0, [pc, #208]	; (801064c <RestoreNvmData+0x160>)
 801057c:	f005 ff7f 	bl	801647e <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010580:	4b2f      	ldr	r3, [pc, #188]	; (8010640 <RestoreNvmData+0x154>)
 8010582:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8010586:	4b2e      	ldr	r3, [pc, #184]	; (8010640 <RestoreNvmData+0x154>)
 8010588:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801058c:	4b2d      	ldr	r3, [pc, #180]	; (8010644 <RestoreNvmData+0x158>)
 801058e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010590:	4a2b      	ldr	r2, [pc, #172]	; (8010640 <RestoreNvmData+0x154>)
 8010592:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010596:	4b2b      	ldr	r3, [pc, #172]	; (8010644 <RestoreNvmData+0x158>)
 8010598:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801059c:	4b28      	ldr	r3, [pc, #160]	; (8010640 <RestoreNvmData+0x154>)
 801059e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 80105a2:	4b27      	ldr	r3, [pc, #156]	; (8010640 <RestoreNvmData+0x154>)
 80105a4:	2201      	movs	r2, #1
 80105a6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80105aa:	4b25      	ldr	r3, [pc, #148]	; (8010640 <RestoreNvmData+0x154>)
 80105ac:	2202      	movs	r2, #2
 80105ae:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80105b8:	21bc      	movs	r1, #188	; 0xbc
 80105ba:	4618      	mov	r0, r3
 80105bc:	f005 ffb4 	bl	8016528 <Crc32>
 80105c0:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d107      	bne.n	80105de <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80105d4:	22c0      	movs	r2, #192	; 0xc0
 80105d6:	4619      	mov	r1, r3
 80105d8:	481d      	ldr	r0, [pc, #116]	; (8010650 <RestoreNvmData+0x164>)
 80105da:	f005 ff50 	bl	801647e <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80105e4:	2190      	movs	r1, #144	; 0x90
 80105e6:	4618      	mov	r0, r3
 80105e8:	f005 ff9e 	bl	8016528 <Crc32>
 80105ec:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d107      	bne.n	801060a <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8010600:	2294      	movs	r2, #148	; 0x94
 8010602:	4619      	mov	r1, r3
 8010604:	4813      	ldr	r0, [pc, #76]	; (8010654 <RestoreNvmData+0x168>)
 8010606:	f005 ff3a 	bl	801647e <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010610:	2114      	movs	r1, #20
 8010612:	4618      	mov	r0, r3
 8010614:	f005 ff88 	bl	8016528 <Crc32>
 8010618:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010620:	68fa      	ldr	r2, [r7, #12]
 8010622:	429a      	cmp	r2, r3
 8010624:	d107      	bne.n	8010636 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801062c:	2218      	movs	r2, #24
 801062e:	4619      	mov	r1, r3
 8010630:	4809      	ldr	r0, [pc, #36]	; (8010658 <RestoreNvmData+0x16c>)
 8010632:	f005 ff24 	bl	801647e <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	20000454 	.word	0x20000454
 8010644:	2000095c 	.word	0x2000095c
 8010648:	20000984 	.word	0x20000984
 801064c:	2000099c 	.word	0x2000099c
 8010650:	20000a74 	.word	0x20000a74
 8010654:	20000b34 	.word	0x20000b34
 8010658:	20000c90 	.word	0x20000c90

0801065c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d002      	beq.n	8010672 <DetermineFrameType+0x16>
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d101      	bne.n	8010676 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010672:	2303      	movs	r3, #3
 8010674:	e03b      	b.n	80106ee <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7b1b      	ldrb	r3, [r3, #12]
 801067a:	f003 030f 	and.w	r3, r3, #15
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b00      	cmp	r3, #0
 8010682:	d008      	beq.n	8010696 <DetermineFrameType+0x3a>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3020 	ldrb.w	r3, [r3, #32]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d003      	beq.n	8010696 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	2200      	movs	r2, #0
 8010692:	701a      	strb	r2, [r3, #0]
 8010694:	e02a      	b.n	80106ec <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801069c:	2b00      	cmp	r3, #0
 801069e:	d103      	bne.n	80106a8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2201      	movs	r2, #1
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	e021      	b.n	80106ec <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	7b1b      	ldrb	r3, [r3, #12]
 80106ac:	f003 030f 	and.w	r3, r3, #15
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d108      	bne.n	80106c8 <DetermineFrameType+0x6c>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d103      	bne.n	80106c8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	2202      	movs	r2, #2
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	e011      	b.n	80106ec <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	7b1b      	ldrb	r3, [r3, #12]
 80106cc:	f003 030f 	and.w	r3, r3, #15
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d108      	bne.n	80106e8 <DetermineFrameType+0x8c>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d003      	beq.n	80106e8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2203      	movs	r2, #3
 80106e4:	701a      	strb	r2, [r3, #0]
 80106e6:	e001      	b.n	80106ec <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80106e8:	2317      	movs	r3, #23
 80106ea:	e000      	b.n	80106ee <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bc80      	pop	{r7}
 80106f6:	4770      	bx	lr

080106f8 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80106fc:	4b12      	ldr	r3, [pc, #72]	; (8010748 <CheckRetransUnconfirmedUplink+0x50>)
 80106fe:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010702:	4b12      	ldr	r3, [pc, #72]	; (801074c <CheckRetransUnconfirmedUplink+0x54>)
 8010704:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8010708:	429a      	cmp	r2, r3
 801070a:	d301      	bcc.n	8010710 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801070c:	2301      	movs	r3, #1
 801070e:	e016      	b.n	801073e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010710:	4b0d      	ldr	r3, [pc, #52]	; (8010748 <CheckRetransUnconfirmedUplink+0x50>)
 8010712:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010716:	f003 0302 	and.w	r3, r3, #2
 801071a:	b2db      	uxtb	r3, r3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00d      	beq.n	801073c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010720:	4b0a      	ldr	r3, [pc, #40]	; (801074c <CheckRetransUnconfirmedUplink+0x54>)
 8010722:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8010726:	2b00      	cmp	r3, #0
 8010728:	d101      	bne.n	801072e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801072a:	2301      	movs	r3, #1
 801072c:	e007      	b.n	801073e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801072e:	4b06      	ldr	r3, [pc, #24]	; (8010748 <CheckRetransUnconfirmedUplink+0x50>)
 8010730:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8010738:	2301      	movs	r3, #1
 801073a:	e000      	b.n	801073e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801073c:	2300      	movs	r3, #0
}
 801073e:	4618      	mov	r0, r3
 8010740:	46bd      	mov	sp, r7
 8010742:	bc80      	pop	{r7}
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	20000454 	.word	0x20000454
 801074c:	2000095c 	.word	0x2000095c

08010750 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010754:	4b0e      	ldr	r3, [pc, #56]	; (8010790 <CheckRetransConfirmedUplink+0x40>)
 8010756:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801075a:	4b0d      	ldr	r3, [pc, #52]	; (8010790 <CheckRetransConfirmedUplink+0x40>)
 801075c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010760:	429a      	cmp	r2, r3
 8010762:	d301      	bcc.n	8010768 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8010764:	2301      	movs	r3, #1
 8010766:	e00f      	b.n	8010788 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010768:	4b09      	ldr	r3, [pc, #36]	; (8010790 <CheckRetransConfirmedUplink+0x40>)
 801076a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801076e:	f003 0302 	and.w	r3, r3, #2
 8010772:	b2db      	uxtb	r3, r3
 8010774:	2b00      	cmp	r3, #0
 8010776:	d006      	beq.n	8010786 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010778:	4b05      	ldr	r3, [pc, #20]	; (8010790 <CheckRetransConfirmedUplink+0x40>)
 801077a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d001      	beq.n	8010786 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010782:	2301      	movs	r3, #1
 8010784:	e000      	b.n	8010788 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	46bd      	mov	sp, r7
 801078c:	bc80      	pop	{r7}
 801078e:	4770      	bx	lr
 8010790:	20000454 	.word	0x20000454

08010794 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8010794:	b480      	push	{r7}
 8010796:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010798:	4b1a      	ldr	r3, [pc, #104]	; (8010804 <StopRetransmission+0x70>)
 801079a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801079e:	f003 0302 	and.w	r3, r3, #2
 80107a2:	b2db      	uxtb	r3, r3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d009      	beq.n	80107bc <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80107a8:	4b16      	ldr	r3, [pc, #88]	; (8010804 <StopRetransmission+0x70>)
 80107aa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00e      	beq.n	80107d0 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80107b2:	4b14      	ldr	r3, [pc, #80]	; (8010804 <StopRetransmission+0x70>)
 80107b4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d009      	beq.n	80107d0 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80107bc:	4b12      	ldr	r3, [pc, #72]	; (8010808 <StopRetransmission+0x74>)
 80107be:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d004      	beq.n	80107d0 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80107c6:	4b10      	ldr	r3, [pc, #64]	; (8010808 <StopRetransmission+0x74>)
 80107c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107ca:	3301      	adds	r3, #1
 80107cc:	4a0e      	ldr	r2, [pc, #56]	; (8010808 <StopRetransmission+0x74>)
 80107ce:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80107d0:	4b0c      	ldr	r3, [pc, #48]	; (8010804 <StopRetransmission+0x70>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 80107d8:	4b0a      	ldr	r3, [pc, #40]	; (8010804 <StopRetransmission+0x70>)
 80107da:	2200      	movs	r2, #0
 80107dc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 80107e0:	4b08      	ldr	r3, [pc, #32]	; (8010804 <StopRetransmission+0x70>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80107e8:	4b06      	ldr	r3, [pc, #24]	; (8010804 <StopRetransmission+0x70>)
 80107ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80107ee:	f023 0302 	bic.w	r3, r3, #2
 80107f2:	4a04      	ldr	r2, [pc, #16]	; (8010804 <StopRetransmission+0x70>)
 80107f4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80107f8:	2301      	movs	r3, #1
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bc80      	pop	{r7}
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	20000454 	.word	0x20000454
 8010808:	2000095c 	.word	0x2000095c

0801080c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	4603      	mov	r3, r0
 8010814:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010816:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <CallNvmDataChangeCallback+0x38>)
 8010818:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00c      	beq.n	801083a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010820:	4b08      	ldr	r3, [pc, #32]	; (8010844 <CallNvmDataChangeCallback+0x38>)
 8010822:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010826:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010828:	2b00      	cmp	r3, #0
 801082a:	d006      	beq.n	801083a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801082c:	4b05      	ldr	r3, [pc, #20]	; (8010844 <CallNvmDataChangeCallback+0x38>)
 801082e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	88fa      	ldrh	r2, [r7, #6]
 8010836:	4610      	mov	r0, r2
 8010838:	4798      	blx	r3
    }
}
 801083a:	bf00      	nop
 801083c:	3708      	adds	r7, #8
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	20000454 	.word	0x20000454

08010848 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b084      	sub	sp, #16
 801084c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801084e:	4b1b      	ldr	r3, [pc, #108]	; (80108bc <AckTimeoutRetriesProcess+0x74>)
 8010850:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8010854:	4b19      	ldr	r3, [pc, #100]	; (80108bc <AckTimeoutRetriesProcess+0x74>)
 8010856:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801085a:	429a      	cmp	r2, r3
 801085c:	d229      	bcs.n	80108b2 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801085e:	4b17      	ldr	r3, [pc, #92]	; (80108bc <AckTimeoutRetriesProcess+0x74>)
 8010860:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010864:	3301      	adds	r3, #1
 8010866:	b2da      	uxtb	r2, r3
 8010868:	4b14      	ldr	r3, [pc, #80]	; (80108bc <AckTimeoutRetriesProcess+0x74>)
 801086a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801086e:	4b13      	ldr	r3, [pc, #76]	; (80108bc <AckTimeoutRetriesProcess+0x74>)
 8010870:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8010874:	f003 0301 	and.w	r3, r3, #1
 8010878:	b2db      	uxtb	r3, r3
 801087a:	2b00      	cmp	r3, #0
 801087c:	d019      	beq.n	80108b2 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801087e:	2322      	movs	r3, #34	; 0x22
 8010880:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010882:	4b0f      	ldr	r3, [pc, #60]	; (80108c0 <AckTimeoutRetriesProcess+0x78>)
 8010884:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010888:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801088a:	4b0d      	ldr	r3, [pc, #52]	; (80108c0 <AckTimeoutRetriesProcess+0x78>)
 801088c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010890:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010892:	4b0b      	ldr	r3, [pc, #44]	; (80108c0 <AckTimeoutRetriesProcess+0x78>)
 8010894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010898:	f107 0208 	add.w	r2, r7, #8
 801089c:	4611      	mov	r1, r2
 801089e:	4618      	mov	r0, r3
 80108a0:	f003 fae2 	bl	8013e68 <RegionGetPhyParam>
 80108a4:	4603      	mov	r3, r0
 80108a6:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	b25a      	sxtb	r2, r3
 80108ac:	4b04      	ldr	r3, [pc, #16]	; (80108c0 <AckTimeoutRetriesProcess+0x78>)
 80108ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80108b2:	bf00      	nop
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20000454 	.word	0x20000454
 80108c0:	2000095c 	.word	0x2000095c

080108c4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80108ca:	4b14      	ldr	r3, [pc, #80]	; (801091c <AckTimeoutRetriesFinalize+0x58>)
 80108cc:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80108d0:	f083 0301 	eor.w	r3, r3, #1
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d015      	beq.n	8010906 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80108da:	2302      	movs	r3, #2
 80108dc:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80108de:	4b10      	ldr	r3, [pc, #64]	; (8010920 <AckTimeoutRetriesFinalize+0x5c>)
 80108e0:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80108e2:	4b10      	ldr	r3, [pc, #64]	; (8010924 <AckTimeoutRetriesFinalize+0x60>)
 80108e4:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80108e6:	4b10      	ldr	r3, [pc, #64]	; (8010928 <AckTimeoutRetriesFinalize+0x64>)
 80108e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108ec:	1d3a      	adds	r2, r7, #4
 80108ee:	4611      	mov	r1, r2
 80108f0:	4618      	mov	r0, r3
 80108f2:	f003 fae3 	bl	8013ebc <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80108f6:	4b09      	ldr	r3, [pc, #36]	; (801091c <AckTimeoutRetriesFinalize+0x58>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 80108fe:	4b07      	ldr	r3, [pc, #28]	; (801091c <AckTimeoutRetriesFinalize+0x58>)
 8010900:	2200      	movs	r2, #0
 8010902:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010906:	4b05      	ldr	r3, [pc, #20]	; (801091c <AckTimeoutRetriesFinalize+0x58>)
 8010908:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801090c:	4b03      	ldr	r3, [pc, #12]	; (801091c <AckTimeoutRetriesFinalize+0x58>)
 801090e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8010912:	bf00      	nop
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	20000454 	.word	0x20000454
 8010920:	20000b34 	.word	0x20000b34
 8010924:	20000bc8 	.word	0x20000bc8
 8010928:	2000095c 	.word	0x2000095c

0801092c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 801092c:	b480      	push	{r7}
 801092e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010930:	4b0b      	ldr	r3, [pc, #44]	; (8010960 <IsRequestPending+0x34>)
 8010932:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010936:	f003 0304 	and.w	r3, r3, #4
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d107      	bne.n	8010950 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010940:	4b07      	ldr	r3, [pc, #28]	; (8010960 <IsRequestPending+0x34>)
 8010942:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8010946:	f003 0301 	and.w	r3, r3, #1
 801094a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801094c:	2b00      	cmp	r3, #0
 801094e:	d001      	beq.n	8010954 <IsRequestPending+0x28>
    {
        return 1;
 8010950:	2301      	movs	r3, #1
 8010952:	e000      	b.n	8010956 <IsRequestPending+0x2a>
    }
    return 0;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	46bd      	mov	sp, r7
 801095a:	bc80      	pop	{r7}
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	20000454 	.word	0x20000454

08010964 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010964:	b590      	push	{r4, r7, lr}
 8010966:	b08f      	sub	sp, #60	; 0x3c
 8010968:	af02      	add	r7, sp, #8
 801096a:	6178      	str	r0, [r7, #20]
 801096c:	6139      	str	r1, [r7, #16]
 801096e:	4613      	mov	r3, r2
 8010970:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <LoRaMacInitialization+0x1a>
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801097e:	2303      	movs	r3, #3
 8010980:	e275      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00b      	beq.n	80109a2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801098e:	2b00      	cmp	r3, #0
 8010990:	d007      	beq.n	80109a2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010996:	2b00      	cmp	r3, #0
 8010998:	d003      	beq.n	80109a2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d101      	bne.n	80109a6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80109a2:	2303      	movs	r3, #3
 80109a4:	e263      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80109a6:	7bfb      	ldrb	r3, [r7, #15]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f003 fa4d 	bl	8013e48 <RegionIsActive>
 80109ae:	4603      	mov	r3, r0
 80109b0:	f083 0301 	eor.w	r3, r3, #1
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d001      	beq.n	80109be <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80109ba:	2309      	movs	r3, #9
 80109bc:	e257      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f001 fef6 	bl	80127b0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80109c4:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80109c8:	2100      	movs	r1, #0
 80109ca:	48c7      	ldr	r0, [pc, #796]	; (8010ce8 <LoRaMacInitialization+0x384>)
 80109cc:	f005 fd92 	bl	80164f4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80109d0:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80109d4:	2100      	movs	r1, #0
 80109d6:	48c5      	ldr	r0, [pc, #788]	; (8010cec <LoRaMacInitialization+0x388>)
 80109d8:	f005 fd8c 	bl	80164f4 <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80109dc:	4bc3      	ldr	r3, [pc, #780]	; (8010cec <LoRaMacInitialization+0x388>)
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 80109e4:	4bc1      	ldr	r3, [pc, #772]	; (8010cec <LoRaMacInitialization+0x388>)
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 80109ec:	4abe      	ldr	r2, [pc, #760]	; (8010ce8 <LoRaMacInitialization+0x384>)
 80109ee:	7bfb      	ldrb	r3, [r7, #15]
 80109f0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80109f4:	4bbc      	ldr	r3, [pc, #752]	; (8010ce8 <LoRaMacInitialization+0x384>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80109fc:	4bba      	ldr	r3, [pc, #744]	; (8010ce8 <LoRaMacInitialization+0x384>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010a04:	4bb8      	ldr	r3, [pc, #736]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a06:	4aba      	ldr	r2, [pc, #744]	; (8010cf0 <LoRaMacInitialization+0x38c>)
 8010a08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010a0c:	230f      	movs	r3, #15
 8010a0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a12:	4bb5      	ldr	r3, [pc, #724]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a18:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f003 fa22 	bl	8013e68 <RegionGetPhyParam>
 8010a24:	4603      	mov	r3, r0
 8010a26:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	bf14      	ite	ne
 8010a2e:	2301      	movne	r3, #1
 8010a30:	2300      	moveq	r3, #0
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	4bac      	ldr	r3, [pc, #688]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a36:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010a3a:	230a      	movs	r3, #10
 8010a3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a40:	4ba9      	ldr	r3, [pc, #676]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a4a:	4611      	mov	r1, r2
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f003 fa0b 	bl	8013e68 <RegionGetPhyParam>
 8010a52:	4603      	mov	r3, r0
 8010a54:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a58:	b25a      	sxtb	r2, r3
 8010a5a:	4ba3      	ldr	r3, [pc, #652]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a5c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010a60:	2306      	movs	r3, #6
 8010a62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a66:	4ba0      	ldr	r3, [pc, #640]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f003 f9f8 	bl	8013e68 <RegionGetPhyParam>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7e:	b25a      	sxtb	r2, r3
 8010a80:	4b99      	ldr	r3, [pc, #612]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a82:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010a86:	2310      	movs	r3, #16
 8010a88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a8c:	4b96      	ldr	r3, [pc, #600]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f003 f9e5 	bl	8013e68 <RegionGetPhyParam>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	4a90      	ldr	r2, [pc, #576]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010aaa:	2311      	movs	r3, #17
 8010aac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab0:	4b8d      	ldr	r3, [pc, #564]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ab6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010aba:	4611      	mov	r1, r2
 8010abc:	4618      	mov	r0, r3
 8010abe:	f003 f9d3 	bl	8013e68 <RegionGetPhyParam>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	4a87      	ldr	r2, [pc, #540]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010ace:	2312      	movs	r3, #18
 8010ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ad4:	4b84      	ldr	r3, [pc, #528]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010ade:	4611      	mov	r1, r2
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f003 f9c1 	bl	8013e68 <RegionGetPhyParam>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	4a7e      	ldr	r2, [pc, #504]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010af2:	2313      	movs	r3, #19
 8010af4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010af8:	4b7b      	ldr	r3, [pc, #492]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b02:	4611      	mov	r1, r2
 8010b04:	4618      	mov	r0, r3
 8010b06:	f003 f9af 	bl	8013e68 <RegionGetPhyParam>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b10:	4a75      	ldr	r2, [pc, #468]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010b16:	2314      	movs	r3, #20
 8010b18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b1c:	4b72      	ldr	r3, [pc, #456]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b26:	4611      	mov	r1, r2
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f003 f99d 	bl	8013e68 <RegionGetPhyParam>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	4a6c      	ldr	r2, [pc, #432]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010b3a:	2317      	movs	r3, #23
 8010b3c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b40:	4b69      	ldr	r3, [pc, #420]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f003 f98b 	bl	8013e68 <RegionGetPhyParam>
 8010b52:	4603      	mov	r3, r0
 8010b54:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	4b63      	ldr	r3, [pc, #396]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010b60:	2318      	movs	r3, #24
 8010b62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b66:	4b60      	ldr	r3, [pc, #384]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b70:	4611      	mov	r1, r2
 8010b72:	4618      	mov	r0, r3
 8010b74:	f003 f978 	bl	8013e68 <RegionGetPhyParam>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7e:	4a5a      	ldr	r2, [pc, #360]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b80:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b86:	4a58      	ldr	r2, [pc, #352]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b88:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010b8c:	2319      	movs	r3, #25
 8010b8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b92:	4b55      	ldr	r3, [pc, #340]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b98:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f003 f962 	bl	8013e68 <RegionGetPhyParam>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	b2da      	uxtb	r2, r3
 8010bac:	4b4e      	ldr	r3, [pc, #312]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010bae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	4b4c      	ldr	r3, [pc, #304]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010bb8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010bbc:	231e      	movs	r3, #30
 8010bbe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bc2:	4b49      	ldr	r3, [pc, #292]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bcc:	4611      	mov	r1, r2
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f003 f94a 	bl	8013e68 <RegionGetPhyParam>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	4b42      	ldr	r3, [pc, #264]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010bde:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010be2:	231f      	movs	r3, #31
 8010be4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010be8:	4b3f      	ldr	r3, [pc, #252]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010bf2:	4611      	mov	r1, r2
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f003 f937 	bl	8013e68 <RegionGetPhyParam>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	4b39      	ldr	r3, [pc, #228]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c04:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010c08:	2320      	movs	r3, #32
 8010c0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c0e:	4b36      	ldr	r3, [pc, #216]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c18:	4611      	mov	r1, r2
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f003 f924 	bl	8013e68 <RegionGetPhyParam>
 8010c20:	4603      	mov	r3, r0
 8010c22:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	4a30      	ldr	r2, [pc, #192]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c28:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010c2c:	2321      	movs	r3, #33	; 0x21
 8010c2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c32:	4b2d      	ldr	r3, [pc, #180]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f003 f912 	bl	8013e68 <RegionGetPhyParam>
 8010c44:	4603      	mov	r3, r0
 8010c46:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4a:	4a27      	ldr	r2, [pc, #156]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c4c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010c50:	230b      	movs	r3, #11
 8010c52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c56:	4b24      	ldr	r3, [pc, #144]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f003 f900 	bl	8013e68 <RegionGetPhyParam>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	4b1e      	ldr	r3, [pc, #120]	; (8010cec <LoRaMacInitialization+0x388>)
 8010c72:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010c76:	230c      	movs	r3, #12
 8010c78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010c86:	4611      	mov	r1, r2
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f003 f8ed 	bl	8013e68 <RegionGetPhyParam>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	4b15      	ldr	r3, [pc, #84]	; (8010cec <LoRaMacInitialization+0x388>)
 8010c98:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010c9c:	4b12      	ldr	r3, [pc, #72]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010c9e:	2201      	movs	r2, #1
 8010ca0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010ca4:	4b10      	ldr	r3, [pc, #64]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010ca6:	220a      	movs	r2, #10
 8010ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010cac:	4b0e      	ldr	r3, [pc, #56]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cae:	2206      	movs	r2, #6
 8010cb0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010cb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cba:	4a0b      	ldr	r2, [pc, #44]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cbc:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010cbe:	4b0a      	ldr	r3, [pc, #40]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cc0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010cca:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010cd0:	4a05      	ldr	r2, [pc, #20]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010cd4:	4b04      	ldr	r3, [pc, #16]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cda:	4a03      	ldr	r2, [pc, #12]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010cdc:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010cde:	4b02      	ldr	r3, [pc, #8]	; (8010ce8 <LoRaMacInitialization+0x384>)
 8010ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ce4:	e006      	b.n	8010cf4 <LoRaMacInitialization+0x390>
 8010ce6:	bf00      	nop
 8010ce8:	2000095c 	.word	0x2000095c
 8010cec:	20000454 	.word	0x20000454
 8010cf0:	01000300 	.word	0x01000300
 8010cf4:	4a60      	ldr	r2, [pc, #384]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010cf6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010cf8:	4b5f      	ldr	r3, [pc, #380]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010cfe:	4a5e      	ldr	r2, [pc, #376]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d00:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010d02:	4b5d      	ldr	r3, [pc, #372]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010d08:	4a5b      	ldr	r2, [pc, #364]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d0a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010d0c:	4b5a      	ldr	r3, [pc, #360]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d0e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8010d12:	4b59      	ldr	r3, [pc, #356]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d1e:	4b57      	ldr	r3, [pc, #348]	; (8010e7c <LoRaMacInitialization+0x518>)
 8010d20:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d22:	4b57      	ldr	r3, [pc, #348]	; (8010e80 <LoRaMacInitialization+0x51c>)
 8010d24:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010d26:	4b54      	ldr	r3, [pc, #336]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010d2c:	f107 0218 	add.w	r2, r7, #24
 8010d30:	4611      	mov	r1, r2
 8010d32:	4618      	mov	r0, r3
 8010d34:	f003 f8c2 	bl	8013ebc <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8010d38:	4a52      	ldr	r2, [pc, #328]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8010d40:	f7ff f85a 	bl	800fdf8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010d44:	4b4c      	ldr	r3, [pc, #304]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d46:	2201      	movs	r2, #1
 8010d48:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 8010d4c:	4a4d      	ldr	r2, [pc, #308]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8010d54:	4b4b      	ldr	r3, [pc, #300]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010d56:	2200      	movs	r2, #0
 8010d58:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010d5c:	4b49      	ldr	r3, [pc, #292]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010d5e:	2201      	movs	r2, #1
 8010d60:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010d64:	4b44      	ldr	r3, [pc, #272]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010d6a:	4b43      	ldr	r3, [pc, #268]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010d70:	2300      	movs	r3, #0
 8010d72:	9300      	str	r3, [sp, #0]
 8010d74:	4b44      	ldr	r3, [pc, #272]	; (8010e88 <LoRaMacInitialization+0x524>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	f04f 31ff 	mov.w	r1, #4294967295
 8010d7c:	4843      	ldr	r0, [pc, #268]	; (8010e8c <LoRaMacInitialization+0x528>)
 8010d7e:	f009 f9eb 	bl	801a158 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010d82:	2300      	movs	r3, #0
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	4b42      	ldr	r3, [pc, #264]	; (8010e90 <LoRaMacInitialization+0x52c>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8010d8e:	4841      	ldr	r0, [pc, #260]	; (8010e94 <LoRaMacInitialization+0x530>)
 8010d90:	f009 f9e2 	bl	801a158 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010d94:	2300      	movs	r3, #0
 8010d96:	9300      	str	r3, [sp, #0]
 8010d98:	4b3f      	ldr	r3, [pc, #252]	; (8010e98 <LoRaMacInitialization+0x534>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8010da0:	483e      	ldr	r0, [pc, #248]	; (8010e9c <LoRaMacInitialization+0x538>)
 8010da2:	f009 f9d9 	bl	801a158 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010da6:	2300      	movs	r3, #0
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	4b3d      	ldr	r3, [pc, #244]	; (8010ea0 <LoRaMacInitialization+0x53c>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	f04f 31ff 	mov.w	r1, #4294967295
 8010db2:	483c      	ldr	r0, [pc, #240]	; (8010ea4 <LoRaMacInitialization+0x540>)
 8010db4:	f009 f9d0 	bl	801a158 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010db8:	4c2f      	ldr	r4, [pc, #188]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010dba:	463b      	mov	r3, r7
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f008 fe43 	bl	8019a48 <SysTimeGetMcuTime>
 8010dc2:	f504 7382 	add.w	r3, r4, #260	; 0x104
 8010dc6:	463a      	mov	r2, r7
 8010dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dcc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010dd0:	4b2c      	ldr	r3, [pc, #176]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010dd2:	4a35      	ldr	r2, [pc, #212]	; (8010ea8 <LoRaMacInitialization+0x544>)
 8010dd4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010dd8:	4b2a      	ldr	r3, [pc, #168]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010dda:	4a34      	ldr	r2, [pc, #208]	; (8010eac <LoRaMacInitialization+0x548>)
 8010ddc:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010de0:	4b28      	ldr	r3, [pc, #160]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010de2:	4a33      	ldr	r2, [pc, #204]	; (8010eb0 <LoRaMacInitialization+0x54c>)
 8010de4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010de8:	4b26      	ldr	r3, [pc, #152]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010dea:	4a32      	ldr	r2, [pc, #200]	; (8010eb4 <LoRaMacInitialization+0x550>)
 8010dec:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010df0:	4b24      	ldr	r3, [pc, #144]	; (8010e84 <LoRaMacInitialization+0x520>)
 8010df2:	4a31      	ldr	r2, [pc, #196]	; (8010eb8 <LoRaMacInitialization+0x554>)
 8010df4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010df8:	4b30      	ldr	r3, [pc, #192]	; (8010ebc <LoRaMacInitialization+0x558>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4830      	ldr	r0, [pc, #192]	; (8010ec0 <LoRaMacInitialization+0x55c>)
 8010dfe:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	689b      	ldr	r3, [r3, #8]
 8010e04:	4619      	mov	r1, r3
 8010e06:	482f      	ldr	r0, [pc, #188]	; (8010ec4 <LoRaMacInitialization+0x560>)
 8010e08:	f7fa ff3e 	bl	800bc88 <SecureElementInit>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d001      	beq.n	8010e16 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e12:	2311      	movs	r3, #17
 8010e14:	e02b      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010e16:	4818      	ldr	r0, [pc, #96]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010e18:	f002 f950 	bl	80130bc <LoRaMacCryptoInit>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d001      	beq.n	8010e26 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e22:	2311      	movs	r3, #17
 8010e24:	e023      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010e26:	f001 fa95 	bl	8012354 <LoRaMacCommandsInit>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e30:	2313      	movs	r3, #19
 8010e32:	e01c      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010e34:	4824      	ldr	r0, [pc, #144]	; (8010ec8 <LoRaMacInitialization+0x564>)
 8010e36:	f002 f9ff 	bl	8013238 <LoRaMacCryptoSetMulticastReference>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d001      	beq.n	8010e44 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e40:	2311      	movs	r3, #17
 8010e42:	e014      	b.n	8010e6e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010e44:	4b1d      	ldr	r3, [pc, #116]	; (8010ebc <LoRaMacInitialization+0x558>)
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	4798      	blx	r3
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f005 faf1 	bl	8016434 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010e52:	4b1a      	ldr	r3, [pc, #104]	; (8010ebc <LoRaMacInitialization+0x558>)
 8010e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e56:	4a08      	ldr	r2, [pc, #32]	; (8010e78 <LoRaMacInitialization+0x514>)
 8010e58:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	4798      	blx	r3
    Radio.Sleep( );
 8010e60:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <LoRaMacInitialization+0x558>)
 8010e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e64:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010e66:	2001      	movs	r0, #1
 8010e68:	f7fd faaa 	bl	800e3c0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010e6c:	2300      	movs	r3, #0
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3734      	adds	r7, #52	; 0x34
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd90      	pop	{r4, r7, pc}
 8010e76:	bf00      	nop
 8010e78:	2000095c 	.word	0x2000095c
 8010e7c:	20000b34 	.word	0x20000b34
 8010e80:	20000bc8 	.word	0x20000bc8
 8010e84:	20000454 	.word	0x20000454
 8010e88:	0800e949 	.word	0x0800e949
 8010e8c:	200007bc 	.word	0x200007bc
 8010e90:	0800e9bd 	.word	0x0800e9bd
 8010e94:	200007d4 	.word	0x200007d4
 8010e98:	0800ea29 	.word	0x0800ea29
 8010e9c:	200007ec 	.word	0x200007ec
 8010ea0:	0800ea9d 	.word	0x0800ea9d
 8010ea4:	2000084c 	.word	0x2000084c
 8010ea8:	0800d54d 	.word	0x0800d54d
 8010eac:	0800d5c5 	.word	0x0800d5c5
 8010eb0:	0800d69d 	.word	0x0800d69d
 8010eb4:	0800d651 	.word	0x0800d651
 8010eb8:	0800d6d9 	.word	0x0800d6d9
 8010ebc:	0801ba68 	.word	0x0801ba68
 8010ec0:	200007a0 	.word	0x200007a0
 8010ec4:	20000a74 	.word	0x20000a74
 8010ec8:	20000a2c 	.word	0x20000a2c

08010ecc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010ecc:	b480      	push	{r7}
 8010ece:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010ed0:	4b04      	ldr	r3, [pc, #16]	; (8010ee4 <LoRaMacStart+0x18>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bc80      	pop	{r7}
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	20000454 	.word	0x20000454

08010ee8 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b08a      	sub	sp, #40	; 0x28
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	6039      	str	r1, [r7, #0]
 8010ef2:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010ef4:	4b3e      	ldr	r3, [pc, #248]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ef8:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010efa:	4b3d      	ldr	r3, [pc, #244]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010efc:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8010f00:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010f02:	4b3b      	ldr	r3, [pc, #236]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f04:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8010f08:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d101      	bne.n	8010f18 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f14:	2303      	movs	r3, #3
 8010f16:	e066      	b.n	8010fe6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8010f18:	4b35      	ldr	r3, [pc, #212]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010f1e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8010f20:	2300      	movs	r3, #0
 8010f22:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010f24:	4b32      	ldr	r3, [pc, #200]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f26:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8010f2a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010f2c:	4b30      	ldr	r3, [pc, #192]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f30:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010f32:	4b30      	ldr	r3, [pc, #192]	; (8010ff4 <LoRaMacQueryTxPossible+0x10c>)
 8010f34:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8010f38:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010f3a:	4b2e      	ldr	r3, [pc, #184]	; (8010ff4 <LoRaMacQueryTxPossible+0x10c>)
 8010f3c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8010f40:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010f42:	4b2b      	ldr	r3, [pc, #172]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f44:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010f48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010f4c:	4b28      	ldr	r3, [pc, #160]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f4e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010f52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010f56:	4b26      	ldr	r3, [pc, #152]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010f60:	4b23      	ldr	r3, [pc, #140]	; (8010ff0 <LoRaMacQueryTxPossible+0x108>)
 8010f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010f6a:	f107 0310 	add.w	r3, r7, #16
 8010f6e:	f107 020e 	add.w	r2, r7, #14
 8010f72:	f107 010f 	add.w	r1, r7, #15
 8010f76:	f107 0014 	add.w	r0, r7, #20
 8010f7a:	f000 ffe1 	bl	8011f40 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fd fed2 	bl	800ed2c <GetMaxAppPayloadWithoutFOptsLength>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010f90:	f107 0308 	add.w	r3, r7, #8
 8010f94:	4618      	mov	r0, r3
 8010f96:	f001 faab 	bl	80124f0 <LoRaMacCommandsGetSizeSerializedCmds>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010fa0:	2313      	movs	r3, #19
 8010fa2:	e020      	b.n	8010fe6 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	2b0f      	cmp	r3, #15
 8010fa8:	d819      	bhi.n	8010fde <LoRaMacQueryTxPossible+0xf6>
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	785b      	ldrb	r3, [r3, #1]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d313      	bcc.n	8010fde <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	785a      	ldrb	r2, [r3, #1]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	b2da      	uxtb	r2, r3
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	785b      	ldrb	r3, [r3, #1]
 8010fca:	4619      	mov	r1, r3
 8010fcc:	79fa      	ldrb	r2, [r7, #7]
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	4299      	cmp	r1, r3
 8010fd4:	d301      	bcc.n	8010fda <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e005      	b.n	8010fe6 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010fda:	2308      	movs	r3, #8
 8010fdc:	e003      	b.n	8010fe6 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010fe4:	2308      	movs	r3, #8
    }
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3728      	adds	r7, #40	; 0x28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	2000095c 	.word	0x2000095c
 8010ff4:	20000454 	.word	0x20000454

08010ff8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010ff8:	b590      	push	{r4, r7, lr}
 8010ffa:	b087      	sub	sp, #28
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011000:	2300      	movs	r3, #0
 8011002:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d101      	bne.n	801100e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801100a:	2303      	movs	r3, #3
 801100c:	e14b      	b.n	80112a6 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2b28      	cmp	r3, #40	; 0x28
 8011014:	f200 8140 	bhi.w	8011298 <LoRaMacMibGetRequestConfirm+0x2a0>
 8011018:	a201      	add	r2, pc, #4	; (adr r2, 8011020 <LoRaMacMibGetRequestConfirm+0x28>)
 801101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101e:	bf00      	nop
 8011020:	080110c5 	.word	0x080110c5
 8011024:	080110d1 	.word	0x080110d1
 8011028:	080110dd 	.word	0x080110dd
 801102c:	080110e9 	.word	0x080110e9
 8011030:	080110f5 	.word	0x080110f5
 8011034:	08011101 	.word	0x08011101
 8011038:	0801110d 	.word	0x0801110d
 801103c:	08011299 	.word	0x08011299
 8011040:	08011299 	.word	0x08011299
 8011044:	08011299 	.word	0x08011299
 8011048:	08011299 	.word	0x08011299
 801104c:	08011299 	.word	0x08011299
 8011050:	08011299 	.word	0x08011299
 8011054:	08011299 	.word	0x08011299
 8011058:	08011299 	.word	0x08011299
 801105c:	08011119 	.word	0x08011119
 8011060:	08011125 	.word	0x08011125
 8011064:	08011131 	.word	0x08011131
 8011068:	08011153 	.word	0x08011153
 801106c:	08011165 	.word	0x08011165
 8011070:	08011177 	.word	0x08011177
 8011074:	08011189 	.word	0x08011189
 8011078:	080111bd 	.word	0x080111bd
 801107c:	0801119b 	.word	0x0801119b
 8011080:	080111df 	.word	0x080111df
 8011084:	080111eb 	.word	0x080111eb
 8011088:	080111f5 	.word	0x080111f5
 801108c:	080111ff 	.word	0x080111ff
 8011090:	08011209 	.word	0x08011209
 8011094:	08011213 	.word	0x08011213
 8011098:	0801121d 	.word	0x0801121d
 801109c:	08011229 	.word	0x08011229
 80110a0:	08011241 	.word	0x08011241
 80110a4:	08011235 	.word	0x08011235
 80110a8:	0801124d 	.word	0x0801124d
 80110ac:	08011257 	.word	0x08011257
 80110b0:	08011263 	.word	0x08011263
 80110b4:	08011279 	.word	0x08011279
 80110b8:	0801126d 	.word	0x0801126d
 80110bc:	08011299 	.word	0x08011299
 80110c0:	08011285 	.word	0x08011285
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80110c4:	4b7a      	ldr	r3, [pc, #488]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110c6:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	711a      	strb	r2, [r3, #4]
            break;
 80110ce:	e0e9      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80110d0:	4b77      	ldr	r3, [pc, #476]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110d2:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	711a      	strb	r2, [r3, #4]
            break;
 80110da:	e0e3      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80110dc:	f7fb f88e 	bl	800c1fc <SecureElementGetDevEui>
 80110e0:	4602      	mov	r2, r0
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	605a      	str	r2, [r3, #4]
            break;
 80110e6:	e0dd      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80110e8:	f7fb f8aa 	bl	800c240 <SecureElementGetJoinEui>
 80110ec:	4602      	mov	r2, r0
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	605a      	str	r2, [r3, #4]
            break;
 80110f2:	e0d7      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80110f4:	4b6e      	ldr	r3, [pc, #440]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80110f6:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	711a      	strb	r2, [r3, #4]
            break;
 80110fe:	e0d1      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011100:	4b6b      	ldr	r3, [pc, #428]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011102:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	605a      	str	r2, [r3, #4]
            break;
 801110a:	e0cb      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 801110c:	4b68      	ldr	r3, [pc, #416]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801110e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	605a      	str	r2, [r3, #4]
            break;
 8011116:	e0c5      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011118:	4b65      	ldr	r3, [pc, #404]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801111a:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	711a      	strb	r2, [r3, #4]
            break;
 8011122:	e0bf      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011124:	4b62      	ldr	r3, [pc, #392]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011126:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	711a      	strb	r2, [r3, #4]
            break;
 801112e:	e0b9      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011130:	231d      	movs	r3, #29
 8011132:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011134:	4b5e      	ldr	r3, [pc, #376]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801113a:	f107 0210 	add.w	r2, r7, #16
 801113e:	4611      	mov	r1, r2
 8011140:	4618      	mov	r0, r3
 8011142:	f002 fe91 	bl	8013e68 <RegionGetPhyParam>
 8011146:	4603      	mov	r3, r0
 8011148:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	605a      	str	r2, [r3, #4]
            break;
 8011150:	e0a8      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4a56      	ldr	r2, [pc, #344]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011156:	3304      	adds	r3, #4
 8011158:	3264      	adds	r2, #100	; 0x64
 801115a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801115e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011162:	e09f      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4a52      	ldr	r2, [pc, #328]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011168:	3304      	adds	r3, #4
 801116a:	32a4      	adds	r2, #164	; 0xa4
 801116c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011170:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011174:	e096      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4a4d      	ldr	r2, [pc, #308]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801117a:	3304      	adds	r3, #4
 801117c:	326c      	adds	r2, #108	; 0x6c
 801117e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011182:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011186:	e08d      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4a49      	ldr	r2, [pc, #292]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801118c:	3304      	adds	r3, #4
 801118e:	32ac      	adds	r2, #172	; 0xac
 8011190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011194:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011198:	e084      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801119a:	231b      	movs	r3, #27
 801119c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801119e:	4b44      	ldr	r3, [pc, #272]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111a4:	f107 0210 	add.w	r2, r7, #16
 80111a8:	4611      	mov	r1, r2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f002 fe5c 	bl	8013e68 <RegionGetPhyParam>
 80111b0:	4603      	mov	r3, r0
 80111b2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	605a      	str	r2, [r3, #4]
            break;
 80111ba:	e073      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80111bc:	231a      	movs	r3, #26
 80111be:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80111c0:	4b3b      	ldr	r3, [pc, #236]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80111c6:	f107 0210 	add.w	r2, r7, #16
 80111ca:	4611      	mov	r1, r2
 80111cc:	4618      	mov	r0, r3
 80111ce:	f002 fe4b 	bl	8013e68 <RegionGetPhyParam>
 80111d2:	4603      	mov	r3, r0
 80111d4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	605a      	str	r2, [r3, #4]
            break;
 80111dc:	e062      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80111de:	4b34      	ldr	r3, [pc, #208]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111e0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	711a      	strb	r2, [r3, #4]
            break;
 80111e8:	e05c      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80111ea:	4b31      	ldr	r3, [pc, #196]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	605a      	str	r2, [r3, #4]
            break;
 80111f2:	e057      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80111f4:	4b2e      	ldr	r3, [pc, #184]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80111f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	605a      	str	r2, [r3, #4]
            break;
 80111fc:	e052      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80111fe:	4b2c      	ldr	r3, [pc, #176]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	605a      	str	r2, [r3, #4]
            break;
 8011206:	e04d      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011208:	4b29      	ldr	r3, [pc, #164]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801120a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	605a      	str	r2, [r3, #4]
            break;
 8011210:	e048      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8011212:	4b27      	ldr	r3, [pc, #156]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	605a      	str	r2, [r3, #4]
            break;
 801121a:	e043      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801121c:	4b24      	ldr	r3, [pc, #144]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801121e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	711a      	strb	r2, [r3, #4]
            break;
 8011226:	e03d      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011228:	4b21      	ldr	r3, [pc, #132]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801122a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	711a      	strb	r2, [r3, #4]
            break;
 8011232:	e037      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011234:	4b1e      	ldr	r3, [pc, #120]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011236:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	711a      	strb	r2, [r3, #4]
            break;
 801123e:	e031      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011240:	4b1b      	ldr	r3, [pc, #108]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011242:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	711a      	strb	r2, [r3, #4]
            break;
 801124a:	e02b      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801124c:	4b18      	ldr	r3, [pc, #96]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801124e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	605a      	str	r2, [r3, #4]
            break;
 8011254:	e026      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011256:	4b16      	ldr	r3, [pc, #88]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011258:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	711a      	strb	r2, [r3, #4]
            break;
 8011260:	e020      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011262:	4b13      	ldr	r3, [pc, #76]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011264:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	605a      	str	r2, [r3, #4]
            break;
 801126a:	e01b      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 801126c:	f7ff f934 	bl	80104d8 <GetNvmData>
 8011270:	4602      	mov	r2, r0
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	605a      	str	r2, [r3, #4]
            break;
 8011276:	e015      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011278:	4b0d      	ldr	r3, [pc, #52]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801127a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	605a      	str	r2, [r3, #4]
            break;
 8011282:	e00f      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a0a      	ldr	r2, [pc, #40]	; (80112b0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8011288:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 801128c:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801128e:	687c      	ldr	r4, [r7, #4]
 8011290:	f002 ff74 	bl	801417c <RegionGetVersion>
 8011294:	60a0      	str	r0, [r4, #8]
            break;
 8011296:	e005      	b.n	80112a4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 fefd 	bl	8012098 <LoRaMacClassBMibGetRequestConfirm>
 801129e:	4603      	mov	r3, r0
 80112a0:	75fb      	strb	r3, [r7, #23]
            break;
 80112a2:	bf00      	nop
        }
    }
    return status;
 80112a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	371c      	adds	r7, #28
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd90      	pop	{r4, r7, pc}
 80112ae:	bf00      	nop
 80112b0:	2000095c 	.word	0x2000095c

080112b4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b086      	sub	sp, #24
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d101      	bne.n	80112ca <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80112c6:	2303      	movs	r3, #3
 80112c8:	e32b      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80112ca:	4bbe      	ldr	r3, [pc, #760]	; (80115c4 <LoRaMacMibSetRequestConfirm+0x310>)
 80112cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80112d0:	f003 0302 	and.w	r3, r3, #2
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80112d8:	2301      	movs	r3, #1
 80112da:	e322      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	2b27      	cmp	r3, #39	; 0x27
 80112e2:	f200 82fc 	bhi.w	80118de <LoRaMacMibSetRequestConfirm+0x62a>
 80112e6:	a201      	add	r2, pc, #4	; (adr r2, 80112ec <LoRaMacMibSetRequestConfirm+0x38>)
 80112e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ec:	0801138d 	.word	0x0801138d
 80112f0:	0801139d 	.word	0x0801139d
 80112f4:	080113b7 	.word	0x080113b7
 80112f8:	080113cf 	.word	0x080113cf
 80112fc:	080113e7 	.word	0x080113e7
 8011300:	080113f3 	.word	0x080113f3
 8011304:	080113ff 	.word	0x080113ff
 8011308:	0801140b 	.word	0x0801140b
 801130c:	08011431 	.word	0x08011431
 8011310:	08011457 	.word	0x08011457
 8011314:	0801147d 	.word	0x0801147d
 8011318:	080114a3 	.word	0x080114a3
 801131c:	080114c9 	.word	0x080114c9
 8011320:	080114ef 	.word	0x080114ef
 8011324:	08011515 	.word	0x08011515
 8011328:	0801153b 	.word	0x0801153b
 801132c:	0801155b 	.word	0x0801155b
 8011330:	080118df 	.word	0x080118df
 8011334:	08011567 	.word	0x08011567
 8011338:	080115e3 	.word	0x080115e3
 801133c:	08011623 	.word	0x08011623
 8011340:	08011685 	.word	0x08011685
 8011344:	080116f5 	.word	0x080116f5
 8011348:	080116c5 	.word	0x080116c5
 801134c:	08011725 	.word	0x08011725
 8011350:	08011747 	.word	0x08011747
 8011354:	08011751 	.word	0x08011751
 8011358:	0801175b 	.word	0x0801175b
 801135c:	08011765 	.word	0x08011765
 8011360:	0801176f 	.word	0x0801176f
 8011364:	08011779 	.word	0x08011779
 8011368:	080117ab 	.word	0x080117ab
 801136c:	08011817 	.word	0x08011817
 8011370:	080117e5 	.word	0x080117e5
 8011374:	08011849 	.word	0x08011849
 8011378:	0801185f 	.word	0x0801185f
 801137c:	08011877 	.word	0x08011877
 8011380:	08011881 	.word	0x08011881
 8011384:	0801188d 	.word	0x0801188d
 8011388:	080118b5 	.word	0x080118b5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	791b      	ldrb	r3, [r3, #4]
 8011390:	4618      	mov	r0, r3
 8011392:	f7fd fbfb 	bl	800eb8c <SwitchClass>
 8011396:	4603      	mov	r3, r0
 8011398:	75fb      	strb	r3, [r7, #23]
            break;
 801139a:	e2c1      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	791b      	ldrb	r3, [r3, #4]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d005      	beq.n	80113b0 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	791a      	ldrb	r2, [r3, #4]
 80113a8:	4b87      	ldr	r3, [pc, #540]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 80113aa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80113ae:	e2b7      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113b0:	2303      	movs	r3, #3
 80113b2:	75fb      	strb	r3, [r7, #23]
            break;
 80113b4:	e2b4      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fa ff06 	bl	800c1cc <SecureElementSetDevEui>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f000 8291 	beq.w	80118ea <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113c8:	2303      	movs	r3, #3
 80113ca:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113cc:	e28d      	b.n	80118ea <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fa ff1c 	bl	800c210 <SecureElementSetJoinEui>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f000 8287 	beq.w	80118ee <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113e0:	2303      	movs	r3, #3
 80113e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113e4:	e283      	b.n	80118ee <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	791a      	ldrb	r2, [r3, #4]
 80113ea:	4b77      	ldr	r3, [pc, #476]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 80113ec:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 80113f0:	e296      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4a74      	ldr	r2, [pc, #464]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 80113f8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 80113fc:	e290      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	4a71      	ldr	r2, [pc, #452]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 8011404:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8011408:	e28a      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00b      	beq.n	801142a <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	4619      	mov	r1, r3
 8011418:	2000      	movs	r0, #0
 801141a:	f001 ff35 	bl	8013288 <LoRaMacCryptoSetKey>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	f000 8266 	beq.w	80118f2 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011426:	2311      	movs	r3, #17
 8011428:	e27b      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801142a:	2303      	movs	r3, #3
 801142c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801142e:	e260      	b.n	80118f2 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00b      	beq.n	8011450 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	4619      	mov	r1, r3
 801143e:	2001      	movs	r0, #1
 8011440:	f001 ff22 	bl	8013288 <LoRaMacCryptoSetKey>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	f000 8255 	beq.w	80118f6 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801144c:	2311      	movs	r3, #17
 801144e:	e268      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011450:	2303      	movs	r3, #3
 8011452:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011454:	e24f      	b.n	80118f6 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00b      	beq.n	8011476 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	4619      	mov	r1, r3
 8011464:	2002      	movs	r0, #2
 8011466:	f001 ff0f 	bl	8013288 <LoRaMacCryptoSetKey>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 8244 	beq.w	80118fa <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011472:	2311      	movs	r3, #17
 8011474:	e255      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011476:	2303      	movs	r3, #3
 8011478:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801147a:	e23e      	b.n	80118fa <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00b      	beq.n	801149c <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	4619      	mov	r1, r3
 801148a:	2003      	movs	r0, #3
 801148c:	f001 fefc 	bl	8013288 <LoRaMacCryptoSetKey>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	f000 8233 	beq.w	80118fe <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011498:	2311      	movs	r3, #17
 801149a:	e242      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801149c:	2303      	movs	r3, #3
 801149e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114a0:	e22d      	b.n	80118fe <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00b      	beq.n	80114c2 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	4619      	mov	r1, r3
 80114b0:	207f      	movs	r0, #127	; 0x7f
 80114b2:	f001 fee9 	bl	8013288 <LoRaMacCryptoSetKey>
 80114b6:	4603      	mov	r3, r0
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 8222 	beq.w	8011902 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114be:	2311      	movs	r3, #17
 80114c0:	e22f      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114c2:	2303      	movs	r3, #3
 80114c4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114c6:	e21c      	b.n	8011902 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00b      	beq.n	80114e8 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	4619      	mov	r1, r3
 80114d6:	2080      	movs	r0, #128	; 0x80
 80114d8:	f001 fed6 	bl	8013288 <LoRaMacCryptoSetKey>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	f000 8211 	beq.w	8011906 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114e4:	2311      	movs	r3, #17
 80114e6:	e21c      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114e8:	2303      	movs	r3, #3
 80114ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114ec:	e20b      	b.n	8011906 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00b      	beq.n	801150e <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	4619      	mov	r1, r3
 80114fc:	2081      	movs	r0, #129	; 0x81
 80114fe:	f001 fec3 	bl	8013288 <LoRaMacCryptoSetKey>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 8200 	beq.w	801190a <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801150a:	2311      	movs	r3, #17
 801150c:	e209      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801150e:	2303      	movs	r3, #3
 8011510:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011512:	e1fa      	b.n	801190a <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d00b      	beq.n	8011534 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	4619      	mov	r1, r3
 8011522:	2082      	movs	r0, #130	; 0x82
 8011524:	f001 feb0 	bl	8013288 <LoRaMacCryptoSetKey>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	f000 81ef 	beq.w	801190e <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011530:	2311      	movs	r3, #17
 8011532:	e1f6      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011534:	2303      	movs	r3, #3
 8011536:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011538:	e1e9      	b.n	801190e <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	791a      	ldrb	r2, [r3, #4]
 801153e:	4b22      	ldr	r3, [pc, #136]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 8011540:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011544:	4b21      	ldr	r3, [pc, #132]	; (80115cc <LoRaMacMibSetRequestConfirm+0x318>)
 8011546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011548:	4a1f      	ldr	r2, [pc, #124]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 801154a:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801154e:	4610      	mov	r0, r2
 8011550:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011552:	4b1e      	ldr	r3, [pc, #120]	; (80115cc <LoRaMacMibSetRequestConfirm+0x318>)
 8011554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011556:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011558:	e1e2      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	791a      	ldrb	r2, [r3, #4]
 801155e:	4b1a      	ldr	r3, [pc, #104]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 8011560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011564:	e1dc      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7a1b      	ldrb	r3, [r3, #8]
 801156a:	b25b      	sxtb	r3, r3
 801156c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801156e:	4b16      	ldr	r3, [pc, #88]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 8011570:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011574:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011576:	4b14      	ldr	r3, [pc, #80]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 8011578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801157c:	f107 0108 	add.w	r1, r7, #8
 8011580:	2207      	movs	r2, #7
 8011582:	4618      	mov	r0, r3
 8011584:	f002 fcac 	bl	8013ee0 <RegionVerify>
 8011588:	4603      	mov	r3, r0
 801158a:	f083 0301 	eor.w	r3, r3, #1
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <LoRaMacMibSetRequestConfirm+0x2e6>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011594:	2303      	movs	r3, #3
 8011596:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011598:	e1c2      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80115a0:	4b09      	ldr	r3, [pc, #36]	; (80115c8 <LoRaMacMibSetRequestConfirm+0x314>)
 80115a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115a6:	f107 0108 	add.w	r1, r7, #8
 80115aa:	2200      	movs	r2, #0
 80115ac:	4618      	mov	r0, r3
 80115ae:	f002 fc97 	bl	8013ee0 <RegionVerify>
 80115b2:	4603      	mov	r3, r0
 80115b4:	f083 0301 	eor.w	r3, r3, #1
 80115b8:	b2db      	uxtb	r3, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d008      	beq.n	80115d0 <LoRaMacMibSetRequestConfirm+0x31c>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115be:	2303      	movs	r3, #3
 80115c0:	75fb      	strb	r3, [r7, #23]
            break;
 80115c2:	e1ad      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
 80115c4:	20000454 	.word	0x20000454
 80115c8:	2000095c 	.word	0x2000095c
 80115cc:	0801ba68 	.word	0x0801ba68
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80115d0:	4bb6      	ldr	r3, [pc, #728]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	3364      	adds	r3, #100	; 0x64
 80115d6:	3204      	adds	r2, #4
 80115d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115dc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80115e0:	e19e      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7a1b      	ldrb	r3, [r3, #8]
 80115e6:	b25b      	sxtb	r3, r3
 80115e8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115ea:	4bb0      	ldr	r3, [pc, #704]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115ec:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80115f0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115f2:	4bae      	ldr	r3, [pc, #696]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80115f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80115f8:	f107 0108 	add.w	r1, r7, #8
 80115fc:	2207      	movs	r2, #7
 80115fe:	4618      	mov	r0, r3
 8011600:	f002 fc6e 	bl	8013ee0 <RegionVerify>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d008      	beq.n	801161c <LoRaMacMibSetRequestConfirm+0x368>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801160a:	4ba8      	ldr	r3, [pc, #672]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	33a4      	adds	r3, #164	; 0xa4
 8011610:	3204      	adds	r2, #4
 8011612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011616:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801161a:	e181      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801161c:	2303      	movs	r3, #3
 801161e:	75fb      	strb	r3, [r7, #23]
            break;
 8011620:	e17e      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	7a1b      	ldrb	r3, [r3, #8]
 8011626:	b25b      	sxtb	r3, r3
 8011628:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801162a:	4ba0      	ldr	r3, [pc, #640]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801162c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011630:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011632:	4b9e      	ldr	r3, [pc, #632]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011638:	f107 0108 	add.w	r1, r7, #8
 801163c:	2207      	movs	r2, #7
 801163e:	4618      	mov	r0, r3
 8011640:	f002 fc4e 	bl	8013ee0 <RegionVerify>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d019      	beq.n	801167e <LoRaMacMibSetRequestConfirm+0x3ca>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801164a:	4b98      	ldr	r3, [pc, #608]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	336c      	adds	r3, #108	; 0x6c
 8011650:	3204      	adds	r2, #4
 8011652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011656:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 801165a:	4b94      	ldr	r3, [pc, #592]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801165c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011660:	2b02      	cmp	r3, #2
 8011662:	f040 8156 	bne.w	8011912 <LoRaMacMibSetRequestConfirm+0x65e>
 8011666:	4b91      	ldr	r3, [pc, #580]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011668:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 8150 	beq.w	8011912 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011672:	4b8f      	ldr	r3, [pc, #572]	; (80118b0 <LoRaMacMibSetRequestConfirm+0x5fc>)
 8011674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011676:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011678:	f7fe fcda 	bl	8010030 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801167c:	e149      	b.n	8011912 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801167e:	2303      	movs	r3, #3
 8011680:	75fb      	strb	r3, [r7, #23]
            break;
 8011682:	e146      	b.n	8011912 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	7a1b      	ldrb	r3, [r3, #8]
 8011688:	b25b      	sxtb	r3, r3
 801168a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801168c:	4b87      	ldr	r3, [pc, #540]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801168e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011692:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011694:	4b85      	ldr	r3, [pc, #532]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801169a:	f107 0108 	add.w	r1, r7, #8
 801169e:	2207      	movs	r2, #7
 80116a0:	4618      	mov	r0, r3
 80116a2:	f002 fc1d 	bl	8013ee0 <RegionVerify>
 80116a6:	4603      	mov	r3, r0
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d008      	beq.n	80116be <LoRaMacMibSetRequestConfirm+0x40a>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80116ac:	4b7f      	ldr	r3, [pc, #508]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116ae:	687a      	ldr	r2, [r7, #4]
 80116b0:	33ac      	adds	r3, #172	; 0xac
 80116b2:	3204      	adds	r2, #4
 80116b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116b8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116bc:	e130      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116be:	2303      	movs	r3, #3
 80116c0:	75fb      	strb	r3, [r7, #23]
            break;
 80116c2:	e12d      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80116ca:	2301      	movs	r3, #1
 80116cc:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116ce:	4b77      	ldr	r3, [pc, #476]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80116d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116d4:	f107 020c 	add.w	r2, r7, #12
 80116d8:	4611      	mov	r1, r2
 80116da:	4618      	mov	r0, r3
 80116dc:	f002 fc29 	bl	8013f32 <RegionChanMaskSet>
 80116e0:	4603      	mov	r3, r0
 80116e2:	f083 0301 	eor.w	r3, r3, #1
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 8114 	beq.w	8011916 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116ee:	2303      	movs	r3, #3
 80116f0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116f2:	e110      	b.n	8011916 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80116fa:	2300      	movs	r3, #0
 80116fc:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116fe:	4b6b      	ldr	r3, [pc, #428]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011704:	f107 020c 	add.w	r2, r7, #12
 8011708:	4611      	mov	r1, r2
 801170a:	4618      	mov	r0, r3
 801170c:	f002 fc11 	bl	8013f32 <RegionChanMaskSet>
 8011710:	4603      	mov	r3, r0
 8011712:	f083 0301 	eor.w	r3, r3, #1
 8011716:	b2db      	uxtb	r3, r3
 8011718:	2b00      	cmp	r3, #0
 801171a:	f000 80fe 	beq.w	801191a <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801171e:	2303      	movs	r3, #3
 8011720:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011722:	e0fa      	b.n	801191a <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	791b      	ldrb	r3, [r3, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d009      	beq.n	8011740 <LoRaMacMibSetRequestConfirm+0x48c>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011730:	2b0f      	cmp	r3, #15
 8011732:	d805      	bhi.n	8011740 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	791a      	ldrb	r2, [r3, #4]
 8011738:	4b5c      	ldr	r3, [pc, #368]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801173a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801173e:	e0ef      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011740:	2303      	movs	r3, #3
 8011742:	75fb      	strb	r3, [r7, #23]
            break;
 8011744:	e0ec      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	4a58      	ldr	r2, [pc, #352]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801174c:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801174e:	e0e7      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	4a55      	ldr	r2, [pc, #340]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011756:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011758:	e0e2      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	4a53      	ldr	r2, [pc, #332]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011760:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011762:	e0dd      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	4a50      	ldr	r2, [pc, #320]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801176a:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 801176c:	e0d8      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	4a4e      	ldr	r2, [pc, #312]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011774:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011776:	e0d3      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801177e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011780:	4b4a      	ldr	r3, [pc, #296]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011786:	f107 0108 	add.w	r1, r7, #8
 801178a:	2206      	movs	r2, #6
 801178c:	4618      	mov	r0, r3
 801178e:	f002 fba7 	bl	8013ee0 <RegionVerify>
 8011792:	4603      	mov	r3, r0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d005      	beq.n	80117a4 <LoRaMacMibSetRequestConfirm+0x4f0>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011798:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801179c:	4b43      	ldr	r3, [pc, #268]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801179e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117a2:	e0bd      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117a4:	2303      	movs	r3, #3
 80117a6:	75fb      	strb	r3, [r7, #23]
            break;
 80117a8:	e0ba      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117b0:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80117b2:	4b3e      	ldr	r3, [pc, #248]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80117b8:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80117ba:	4b3c      	ldr	r3, [pc, #240]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117c0:	f107 0108 	add.w	r1, r7, #8
 80117c4:	2205      	movs	r2, #5
 80117c6:	4618      	mov	r0, r3
 80117c8:	f002 fb8a 	bl	8013ee0 <RegionVerify>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d005      	beq.n	80117de <LoRaMacMibSetRequestConfirm+0x52a>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80117d2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117d6:	4b35      	ldr	r3, [pc, #212]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117dc:	e0a0      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117de:	2303      	movs	r3, #3
 80117e0:	75fb      	strb	r3, [r7, #23]
            break;
 80117e2:	e09d      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117ea:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80117ec:	4b2f      	ldr	r3, [pc, #188]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 80117ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117f2:	f107 0108 	add.w	r1, r7, #8
 80117f6:	220a      	movs	r2, #10
 80117f8:	4618      	mov	r0, r3
 80117fa:	f002 fb71 	bl	8013ee0 <RegionVerify>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d005      	beq.n	8011810 <LoRaMacMibSetRequestConfirm+0x55c>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011804:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011808:	4b28      	ldr	r3, [pc, #160]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801180a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801180e:	e087      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011810:	2303      	movs	r3, #3
 8011812:	75fb      	strb	r3, [r7, #23]
            break;
 8011814:	e084      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801181c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801181e:	4b23      	ldr	r3, [pc, #140]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011824:	f107 0108 	add.w	r1, r7, #8
 8011828:	2209      	movs	r2, #9
 801182a:	4618      	mov	r0, r3
 801182c:	f002 fb58 	bl	8013ee0 <RegionVerify>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d005      	beq.n	8011842 <LoRaMacMibSetRequestConfirm+0x58e>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011836:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801183a:	4b1c      	ldr	r3, [pc, #112]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801183c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011840:	e06e      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011842:	2303      	movs	r3, #3
 8011844:	75fb      	strb	r3, [r7, #23]
            break;
 8011846:	e06b      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	4a17      	ldr	r2, [pc, #92]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801184e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8011852:	4b16      	ldr	r3, [pc, #88]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011858:	4a14      	ldr	r2, [pc, #80]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801185a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 801185c:	e060      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	791a      	ldrb	r2, [r3, #4]
 8011862:	4b12      	ldr	r3, [pc, #72]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011864:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8011868:	4b10      	ldr	r3, [pc, #64]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801186a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801186e:	4b0f      	ldr	r3, [pc, #60]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011874:	e054      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	4a0c      	ldr	r2, [pc, #48]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 801187c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 801187e:	e04f      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	4a09      	ldr	r2, [pc, #36]	; (80118ac <LoRaMacMibSetRequestConfirm+0x5f8>)
 8011886:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 801188a:	e049      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d007      	beq.n	80118a4 <LoRaMacMibSetRequestConfirm+0x5f0>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	4618      	mov	r0, r3
 801189a:	f7fe fe27 	bl	80104ec <RestoreNvmData>
 801189e:	4603      	mov	r3, r0
 80118a0:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118a2:	e03d      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118a4:	2303      	movs	r3, #3
 80118a6:	75fb      	strb	r3, [r7, #23]
            break;
 80118a8:	e03a      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
 80118aa:	bf00      	nop
 80118ac:	2000095c 	.word	0x2000095c
 80118b0:	0801ba68 	.word	0x0801ba68
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	799b      	ldrb	r3, [r3, #6]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d80d      	bhi.n	80118d8 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80118bc:	4a1b      	ldr	r2, [pc, #108]	; (801192c <LoRaMacMibSetRequestConfirm+0x678>)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6858      	ldr	r0, [r3, #4]
 80118ca:	f001 fc23 	bl	8013114 <LoRaMacCryptoSetLrWanVersion>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d024      	beq.n	801191e <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118d4:	2311      	movs	r3, #17
 80118d6:	e024      	b.n	8011922 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118d8:	2303      	movs	r3, #3
 80118da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118dc:	e01f      	b.n	801191e <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 fbe4 	bl	80120ac <LoRaMacMibClassBSetRequestConfirm>
 80118e4:	4603      	mov	r3, r0
 80118e6:	75fb      	strb	r3, [r7, #23]
            break;
 80118e8:	e01a      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ea:	bf00      	nop
 80118ec:	e018      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118ee:	bf00      	nop
 80118f0:	e016      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118f2:	bf00      	nop
 80118f4:	e014      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118f6:	bf00      	nop
 80118f8:	e012      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118fa:	bf00      	nop
 80118fc:	e010      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 80118fe:	bf00      	nop
 8011900:	e00e      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011902:	bf00      	nop
 8011904:	e00c      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011906:	bf00      	nop
 8011908:	e00a      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801190a:	bf00      	nop
 801190c:	e008      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801190e:	bf00      	nop
 8011910:	e006      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011912:	bf00      	nop
 8011914:	e004      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8011916:	bf00      	nop
 8011918:	e002      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801191a:	bf00      	nop
 801191c:	e000      	b.n	8011920 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801191e:	bf00      	nop
        }
    }
    return status;
 8011920:	7dfb      	ldrb	r3, [r7, #23]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3718      	adds	r7, #24
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	2000095c 	.word	0x2000095c

08011930 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b086      	sub	sp, #24
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011938:	2302      	movs	r3, #2
 801193a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801193c:	2300      	movs	r3, #0
 801193e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011946:	2303      	movs	r3, #3
 8011948:	e127      	b.n	8011b9a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801194a:	f7fc fd23 	bl	800e394 <LoRaMacIsBusy>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d001      	beq.n	8011958 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011954:	2301      	movs	r3, #1
 8011956:	e120      	b.n	8011b9a <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011958:	f001 f8a6 	bl	8012aa8 <LoRaMacConfirmQueueIsFull>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d001      	beq.n	8011966 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011962:	2301      	movs	r3, #1
 8011964:	e119      	b.n	8011b9a <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011966:	f001 f893 	bl	8012a90 <LoRaMacConfirmQueueGetCnt>
 801196a:	4603      	mov	r3, r0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d104      	bne.n	801197a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011970:	2214      	movs	r2, #20
 8011972:	2100      	movs	r1, #0
 8011974:	488b      	ldr	r0, [pc, #556]	; (8011ba4 <LoRaMacMlmeRequest+0x274>)
 8011976:	f004 fdbd 	bl	80164f4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801197a:	4b8b      	ldr	r3, [pc, #556]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 801197c:	2201      	movs	r2, #1
 801197e:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011982:	4a89      	ldr	r2, [pc, #548]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 8011984:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011988:	f043 0304 	orr.w	r3, r3, #4
 801198c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011996:	2301      	movs	r3, #1
 8011998:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 801199a:	2300      	movs	r3, #0
 801199c:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	3b01      	subs	r3, #1
 80119a4:	2b0d      	cmp	r3, #13
 80119a6:	f200 80ce 	bhi.w	8011b46 <LoRaMacMlmeRequest+0x216>
 80119aa:	a201      	add	r2, pc, #4	; (adr r2, 80119b0 <LoRaMacMlmeRequest+0x80>)
 80119ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b0:	080119e9 	.word	0x080119e9
 80119b4:	08011b47 	.word	0x08011b47
 80119b8:	08011b47 	.word	0x08011b47
 80119bc:	08011a53 	.word	0x08011a53
 80119c0:	08011a71 	.word	0x08011a71
 80119c4:	08011a81 	.word	0x08011a81
 80119c8:	08011b47 	.word	0x08011b47
 80119cc:	08011b47 	.word	0x08011b47
 80119d0:	08011b47 	.word	0x08011b47
 80119d4:	08011a9d 	.word	0x08011a9d
 80119d8:	08011b47 	.word	0x08011b47
 80119dc:	08011b1b 	.word	0x08011b1b
 80119e0:	08011abb 	.word	0x08011abb
 80119e4:	08011afd 	.word	0x08011afd
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80119e8:	4b6f      	ldr	r3, [pc, #444]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 80119ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119ee:	f003 0320 	and.w	r3, r3, #32
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d001      	beq.n	80119fa <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80119f6:	2301      	movs	r3, #1
 80119f8:	e0cf      	b.n	8011b9a <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 80119fa:	f7fe f9fd 	bl	800fdf8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80119fe:	4b6b      	ldr	r3, [pc, #428]	; (8011bac <LoRaMacMlmeRequest+0x27c>)
 8011a00:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	791b      	ldrb	r3, [r3, #4]
 8011a08:	b25b      	sxtb	r3, r3
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f002 fb4f 	bl	80140b0 <RegionAlternateDr>
 8011a12:	4603      	mov	r3, r0
 8011a14:	461a      	mov	r2, r3
 8011a16:	4b65      	ldr	r3, [pc, #404]	; (8011bac <LoRaMacMlmeRequest+0x27c>)
 8011a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011a1c:	2307      	movs	r3, #7
 8011a1e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011a20:	20ff      	movs	r0, #255	; 0xff
 8011a22:	f7fd ff61 	bl	800f8e8 <SendReJoinReq>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 808c 	beq.w	8011b4a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011a32:	4b5e      	ldr	r3, [pc, #376]	; (8011bac <LoRaMacMlmeRequest+0x27c>)
 8011a34:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	791b      	ldrb	r3, [r3, #4]
 8011a3c:	b25b      	sxtb	r3, r3
 8011a3e:	2201      	movs	r2, #1
 8011a40:	4619      	mov	r1, r3
 8011a42:	f002 fb35 	bl	80140b0 <RegionAlternateDr>
 8011a46:	4603      	mov	r3, r0
 8011a48:	461a      	mov	r2, r3
 8011a4a:	4b58      	ldr	r3, [pc, #352]	; (8011bac <LoRaMacMlmeRequest+0x27c>)
 8011a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8011a50:	e07b      	b.n	8011b4a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011a56:	f107 030c 	add.w	r3, r7, #12
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	2002      	movs	r0, #2
 8011a60:	f000 fc88 	bl	8012374 <LoRaMacCommandsAddCmd>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d071      	beq.n	8011b4e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011a6a:	2313      	movs	r3, #19
 8011a6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a6e:	e06e      	b.n	8011b4e <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	889b      	ldrh	r3, [r3, #4]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fcdb 	bl	8010430 <SetTxContinuousWave>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	75fb      	strb	r3, [r7, #23]
            break;
 8011a7e:	e06d      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8898      	ldrh	r0, [r3, #4]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6899      	ldr	r1, [r3, #8]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	461a      	mov	r2, r3
 8011a92:	f7fe fd01 	bl	8010498 <SetTxContinuousWave1>
 8011a96:	4603      	mov	r3, r0
 8011a98:	75fb      	strb	r3, [r7, #23]
            break;
 8011a9a:	e05f      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011aa0:	f107 030c 	add.w	r3, r7, #12
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	4619      	mov	r1, r3
 8011aa8:	200d      	movs	r0, #13
 8011aaa:	f000 fc63 	bl	8012374 <LoRaMacCommandsAddCmd>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d04e      	beq.n	8011b52 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ab4:	2313      	movs	r3, #19
 8011ab6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ab8:	e04b      	b.n	8011b52 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011aba:	4b3c      	ldr	r3, [pc, #240]	; (8011bac <LoRaMacMlmeRequest+0x27c>)
 8011abc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d148      	bne.n	8011b56 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	791b      	ldrb	r3, [r3, #4]
 8011ac8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	791b      	ldrb	r3, [r3, #4]
 8011ace:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f000 fabe 	bl	8012056 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011ada:	7dbb      	ldrb	r3, [r7, #22]
 8011adc:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ae2:	f107 030c 	add.w	r3, r7, #12
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	4619      	mov	r1, r3
 8011aea:	2010      	movs	r0, #16
 8011aec:	f000 fc42 	bl	8012374 <LoRaMacCommandsAddCmd>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d02f      	beq.n	8011b56 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011af6:	2313      	movs	r3, #19
 8011af8:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011afa:	e02c      	b.n	8011b56 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011b00:	f107 030c 	add.w	r3, r7, #12
 8011b04:	2200      	movs	r2, #0
 8011b06:	4619      	mov	r1, r3
 8011b08:	2012      	movs	r0, #18
 8011b0a:	f000 fc33 	bl	8012374 <LoRaMacCommandsAddCmd>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d022      	beq.n	8011b5a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b14:	2313      	movs	r3, #19
 8011b16:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b18:	e01f      	b.n	8011b5a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011b1e:	f000 fa50 	bl	8011fc2 <LoRaMacClassBIsAcquisitionInProgress>
 8011b22:	4603      	mov	r3, r0
 8011b24:	f083 0301 	eor.w	r3, r3, #1
 8011b28:	b2db      	uxtb	r3, r3
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d008      	beq.n	8011b40 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011b2e:	2000      	movs	r0, #0
 8011b30:	f000 fa29 	bl	8011f86 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011b34:	2000      	movs	r0, #0
 8011b36:	f000 fa4b 	bl	8011fd0 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011b3e:	e00d      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8011b40:	2301      	movs	r3, #1
 8011b42:	75fb      	strb	r3, [r7, #23]
            break;
 8011b44:	e00a      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8011b46:	bf00      	nop
 8011b48:	e008      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
            break;
 8011b4a:	bf00      	nop
 8011b4c:	e006      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
            break;
 8011b4e:	bf00      	nop
 8011b50:	e004      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
            break;
 8011b52:	bf00      	nop
 8011b54:	e002      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
            break;
 8011b56:	bf00      	nop
 8011b58:	e000      	b.n	8011b5c <LoRaMacMlmeRequest+0x22c>
            break;
 8011b5a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011b5c:	4b12      	ldr	r3, [pc, #72]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 8011b5e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011b66:	7dfb      	ldrb	r3, [r7, #23]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d010      	beq.n	8011b8e <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011b6c:	f000 ff90 	bl	8012a90 <LoRaMacConfirmQueueGetCnt>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d110      	bne.n	8011b98 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 8011b76:	4b0c      	ldr	r3, [pc, #48]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b7e:	4a0a      	ldr	r2, [pc, #40]	; (8011ba8 <LoRaMacMlmeRequest+0x278>)
 8011b80:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b84:	f36f 0382 	bfc	r3, #2, #1
 8011b88:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011b8c:	e004      	b.n	8011b98 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011b8e:	f107 0310 	add.w	r3, r7, #16
 8011b92:	4618      	mov	r0, r3
 8011b94:	f000 fe2e 	bl	80127f4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3718      	adds	r7, #24
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	200008a0 	.word	0x200008a0
 8011ba8:	20000454 	.word	0x20000454
 8011bac:	2000095c 	.word	0x2000095c

08011bb0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b08c      	sub	sp, #48	; 0x30
 8011bb4:	af02      	add	r7, sp, #8
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d101      	bne.n	8011bde <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bda:	2303      	movs	r3, #3
 8011bdc:	e0d4      	b.n	8011d88 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 8011bde:	f7fc fbd9 	bl	800e394 <LoRaMacIsBusy>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d001      	beq.n	8011bec <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011be8:	2301      	movs	r3, #1
 8011bea:	e0cd      	b.n	8011d88 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011bec:	2300      	movs	r3, #0
 8011bee:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011bf0:	2214      	movs	r2, #20
 8011bf2:	2100      	movs	r1, #0
 8011bf4:	4866      	ldr	r0, [pc, #408]	; (8011d90 <LoRaMacMcpsRequest+0x1e0>)
 8011bf6:	f004 fc7d 	bl	80164f4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011bfa:	4b66      	ldr	r3, [pc, #408]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011c02:	4b64      	ldr	r3, [pc, #400]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011c04:	2201      	movs	r2, #1
 8011c06:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b03      	cmp	r3, #3
 8011c10:	d03d      	beq.n	8011c8e <LoRaMacMcpsRequest+0xde>
 8011c12:	2b03      	cmp	r3, #3
 8011c14:	dc4f      	bgt.n	8011cb6 <LoRaMacMcpsRequest+0x106>
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d002      	beq.n	8011c20 <LoRaMacMcpsRequest+0x70>
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d019      	beq.n	8011c52 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011c1e:	e04a      	b.n	8011cb6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011c20:	2301      	movs	r3, #1
 8011c22:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c24:	4b5b      	ldr	r3, [pc, #364]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011c26:	2201      	movs	r2, #1
 8011c28:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011c2c:	7b3b      	ldrb	r3, [r7, #12]
 8011c2e:	2202      	movs	r2, #2
 8011c30:	f362 1347 	bfi	r3, r2, #5, #3
 8011c34:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	791b      	ldrb	r3, [r3, #4]
 8011c3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	899b      	ldrh	r3, [r3, #12]
 8011c48:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	7b9b      	ldrb	r3, [r3, #14]
 8011c4e:	777b      	strb	r3, [r7, #29]
            break;
 8011c50:	e032      	b.n	8011cb8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c52:	2301      	movs	r3, #1
 8011c54:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	7bdb      	ldrb	r3, [r3, #15]
 8011c5a:	2b08      	cmp	r3, #8
 8011c5c:	bf28      	it	cs
 8011c5e:	2308      	movcs	r3, #8
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	4b4c      	ldr	r3, [pc, #304]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011c64:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011c68:	7b3b      	ldrb	r3, [r7, #12]
 8011c6a:	2204      	movs	r2, #4
 8011c6c:	f362 1347 	bfi	r3, r2, #5, #3
 8011c70:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	791b      	ldrb	r3, [r3, #4]
 8011c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	899b      	ldrh	r3, [r3, #12]
 8011c84:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7b9b      	ldrb	r3, [r3, #14]
 8011c8a:	777b      	strb	r3, [r7, #29]
            break;
 8011c8c:	e014      	b.n	8011cb8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011c92:	4b40      	ldr	r3, [pc, #256]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011c94:	2201      	movs	r2, #1
 8011c96:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011c9a:	7b3b      	ldrb	r3, [r7, #12]
 8011c9c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8011ca0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	891b      	ldrh	r3, [r3, #8]
 8011cac:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7a9b      	ldrb	r3, [r3, #10]
 8011cb2:	777b      	strb	r3, [r7, #29]
            break;
 8011cb4:	e000      	b.n	8011cb8 <LoRaMacMcpsRequest+0x108>
            break;
 8011cb6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011cb8:	2302      	movs	r3, #2
 8011cba:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011cbc:	4b36      	ldr	r3, [pc, #216]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011cbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011cc2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cc4:	4b34      	ldr	r3, [pc, #208]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cca:	f107 0214 	add.w	r2, r7, #20
 8011cce:	4611      	mov	r1, r2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f002 f8c9 	bl	8013e68 <RegionGetPhyParam>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	b25b      	sxtb	r3, r3
 8011cde:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	bfb8      	it	lt
 8011ce6:	4613      	movlt	r3, r2
 8011ce8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011cea:	7f3b      	ldrb	r3, [r7, #28]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d044      	beq.n	8011d7a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011cf0:	4b29      	ldr	r3, [pc, #164]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011cf2:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8011cf6:	f083 0301 	eor.w	r3, r3, #1
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d019      	beq.n	8011d34 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011d00:	7f7b      	ldrb	r3, [r7, #29]
 8011d02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d04:	4b24      	ldr	r3, [pc, #144]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011d06:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011d0a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011d0c:	4b22      	ldr	r3, [pc, #136]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d12:	f107 0108 	add.w	r1, r7, #8
 8011d16:	2205      	movs	r2, #5
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f002 f8e1 	bl	8013ee0 <RegionVerify>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d005      	beq.n	8011d30 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011d24:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d28:	4b1b      	ldr	r3, [pc, #108]	; (8011d98 <LoRaMacMcpsRequest+0x1e8>)
 8011d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8011d2e:	e001      	b.n	8011d34 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d30:	2303      	movs	r3, #3
 8011d32:	e029      	b.n	8011d88 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8011d34:	8bfa      	ldrh	r2, [r7, #30]
 8011d36:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8011d3a:	f107 000c 	add.w	r0, r7, #12
 8011d3e:	78fb      	ldrb	r3, [r7, #3]
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	4613      	mov	r3, r2
 8011d44:	6a3a      	ldr	r2, [r7, #32]
 8011d46:	f7fd fcef 	bl	800f728 <Send>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8011d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	781a      	ldrb	r2, [r3, #0]
 8011d5c:	4b0d      	ldr	r3, [pc, #52]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011d5e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011d62:	4a0c      	ldr	r2, [pc, #48]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011d64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d68:	f043 0301 	orr.w	r3, r3, #1
 8011d6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011d70:	e003      	b.n	8011d7a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011d72:	4b08      	ldr	r3, [pc, #32]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011d74:	2200      	movs	r2, #0
 8011d76:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011d7a:	4b06      	ldr	r3, [pc, #24]	; (8011d94 <LoRaMacMcpsRequest+0x1e4>)
 8011d7c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	611a      	str	r2, [r3, #16]

    return status;
 8011d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3728      	adds	r7, #40	; 0x28
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	2000088c 	.word	0x2000088c
 8011d94:	20000454 	.word	0x20000454
 8011d98:	2000095c 	.word	0x2000095c

08011d9c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	4603      	mov	r3, r0
 8011da4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011da6:	79fb      	ldrb	r3, [r7, #7]
 8011da8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011daa:	4b0a      	ldr	r3, [pc, #40]	; (8011dd4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011db0:	f107 010c 	add.w	r1, r7, #12
 8011db4:	220f      	movs	r2, #15
 8011db6:	4618      	mov	r0, r3
 8011db8:	f002 f892 	bl	8013ee0 <RegionVerify>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d003      	beq.n	8011dca <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011dc2:	4a04      	ldr	r2, [pc, #16]	; (8011dd4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8011dc4:	79fb      	ldrb	r3, [r7, #7]
 8011dc6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 8011dca:	bf00      	nop
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	2000095c 	.word	0x2000095c

08011dd8 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b08c      	sub	sp, #48	; 0x30
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	607a      	str	r2, [r7, #4]
 8011de4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011de6:	2300      	movs	r3, #0
 8011de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	7c1b      	ldrb	r3, [r3, #16]
 8011df0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	7c5b      	ldrb	r3, [r3, #17]
 8011df8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	689a      	ldr	r2, [r3, #8]
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	795b      	ldrb	r3, [r3, #5]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f000 808b 	beq.w	8011f24 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011e0e:	2302      	movs	r3, #2
 8011e10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	7c9b      	ldrb	r3, [r3, #18]
 8011e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	7cdb      	ldrb	r3, [r3, #19]
 8011e20:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f002 f81e 	bl	8013e68 <RegionGetPhyParam>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011e36:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8011e3a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	bfb8      	it	lt
 8011e42:	4613      	movlt	r3, r2
 8011e44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8011e48:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011e4c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d106      	bne.n	8011e62 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2200      	movs	r2, #0
 8011e58:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e60:	e060      	b.n	8011f24 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	68fa      	ldr	r2, [r7, #12]
 8011e68:	8992      	ldrh	r2, [r2, #12]
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d303      	bcc.n	8011e76 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e74:	e002      	b.n	8011e7c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011e76:	2300      	movs	r3, #0
 8011e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	8992      	ldrh	r2, [r2, #12]
 8011e84:	4611      	mov	r1, r2
 8011e86:	68fa      	ldr	r2, [r7, #12]
 8011e88:	89d2      	ldrh	r2, [r2, #14]
 8011e8a:	440a      	add	r2, r1
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d349      	bcc.n	8011f24 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011e90:	2308      	movs	r3, #8
 8011e92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	7cdb      	ldrb	r3, [r3, #19]
 8011e9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011e9e:	4611      	mov	r1, r2
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f001 ffe1 	bl	8013e68 <RegionGetPhyParam>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011eaa:	6a3b      	ldr	r3, [r7, #32]
 8011eac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	89d2      	ldrh	r2, [r2, #14]
 8011eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ebc:	fb02 f201 	mul.w	r2, r2, r1
 8011ec0:	1a9b      	subs	r3, r3, r2
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d12e      	bne.n	8011f24 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011ec6:	2322      	movs	r3, #34	; 0x22
 8011ec8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8011ecc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8011ed0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	7c9b      	ldrb	r3, [r3, #18]
 8011ed8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	7cdb      	ldrb	r3, [r3, #19]
 8011ee0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011ee4:	4611      	mov	r1, r2
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f001 ffbe 	bl	8013e68 <RegionGetPhyParam>
 8011eec:	4603      	mov	r3, r0
 8011eee:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011ef0:	6a3b      	ldr	r3, [r7, #32]
 8011ef2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8011ef6:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8011efa:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d110      	bne.n	8011f24 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011f02:	2300      	movs	r3, #0
 8011f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	791b      	ldrb	r3, [r3, #4]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d009      	beq.n	8011f24 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011f10:	2302      	movs	r3, #2
 8011f12:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	7cdb      	ldrb	r3, [r3, #19]
 8011f18:	f107 0214 	add.w	r2, r7, #20
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f001 ffcc 	bl	8013ebc <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8011f2a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f32:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3730      	adds	r7, #48	; 0x30
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	789b      	ldrb	r3, [r3, #2]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d107      	bne.n	8011f66 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	68b9      	ldr	r1, [r7, #8]
 8011f5c:	68f8      	ldr	r0, [r7, #12]
 8011f5e:	f7ff ff3b 	bl	8011dd8 <CalcNextV10X>
 8011f62:	4603      	mov	r3, r0
 8011f64:	e000      	b.n	8011f68 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}

08011f70 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f7c:	bf00      	nop
 8011f7e:	3714      	adds	r7, #20
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bc80      	pop	{r7}
 8011f84:	4770      	bx	lr

08011f86 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011f86:	b480      	push	{r7}
 8011f88:	b083      	sub	sp, #12
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011f90:	bf00      	nop
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bc80      	pop	{r7}
 8011f98:	4770      	bx	lr

08011f9a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011f9a:	b480      	push	{r7}
 8011f9c:	b083      	sub	sp, #12
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fa4:	bf00      	nop
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bc80      	pop	{r7}
 8011fac:	4770      	bx	lr

08011fae <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011fae:	b480      	push	{r7}
 8011fb0:	b083      	sub	sp, #12
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fb8:	bf00      	nop
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bc80      	pop	{r7}
 8011fc0:	4770      	bx	lr

08011fc2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011fc6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bc80      	pop	{r7}
 8011fce:	4770      	bx	lr

08011fd0 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bc80      	pop	{r7}
 8011fe0:	4770      	bx	lr

08011fe2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011fe2:	b480      	push	{r7}
 8011fe4:	b083      	sub	sp, #12
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011fea:	bf00      	nop
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bc80      	pop	{r7}
 8011ff2:	4770      	bx	lr

08011ff4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ffc:	bf00      	nop
 8011ffe:	370c      	adds	r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	bc80      	pop	{r7}
 8012004:	4770      	bx	lr

08012006 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012006:	b480      	push	{r7}
 8012008:	b083      	sub	sp, #12
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	460b      	mov	r3, r1
 8012010:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012012:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012014:	4618      	mov	r0, r3
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	bc80      	pop	{r7}
 801201c:	4770      	bx	lr

0801201e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801201e:	b480      	push	{r7}
 8012020:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012022:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012024:	4618      	mov	r0, r3
 8012026:	46bd      	mov	sp, r7
 8012028:	bc80      	pop	{r7}
 801202a:	4770      	bx	lr

0801202c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801202c:	b480      	push	{r7}
 801202e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012030:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012032:	4618      	mov	r0, r3
 8012034:	46bd      	mov	sp, r7
 8012036:	bc80      	pop	{r7}
 8012038:	4770      	bx	lr

0801203a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801203a:	b480      	push	{r7}
 801203c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801203e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012040:	4618      	mov	r0, r3
 8012042:	46bd      	mov	sp, r7
 8012044:	bc80      	pop	{r7}
 8012046:	4770      	bx	lr

08012048 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012048:	b480      	push	{r7}
 801204a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801204c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801204e:	4618      	mov	r0, r3
 8012050:	46bd      	mov	sp, r7
 8012052:	bc80      	pop	{r7}
 8012054:	4770      	bx	lr

08012056 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012056:	b480      	push	{r7}
 8012058:	b083      	sub	sp, #12
 801205a:	af00      	add	r7, sp, #0
 801205c:	4603      	mov	r3, r0
 801205e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	bc80      	pop	{r7}
 8012068:	4770      	bx	lr

0801206a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801206a:	b480      	push	{r7}
 801206c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801206e:	bf00      	nop
 8012070:	46bd      	mov	sp, r7
 8012072:	bc80      	pop	{r7}
 8012074:	4770      	bx	lr

08012076 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012076:	b480      	push	{r7}
 8012078:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801207a:	bf00      	nop
 801207c:	46bd      	mov	sp, r7
 801207e:	bc80      	pop	{r7}
 8012080:	4770      	bx	lr

08012082 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012082:	b480      	push	{r7}
 8012084:	b083      	sub	sp, #12
 8012086:	af00      	add	r7, sp, #0
 8012088:	4603      	mov	r3, r0
 801208a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801208c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	bc80      	pop	{r7}
 8012096:	4770      	bx	lr

08012098 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80120a0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	370c      	adds	r7, #12
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bc80      	pop	{r7}
 80120aa:	4770      	bx	lr

080120ac <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80120b4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bc80      	pop	{r7}
 80120be:	4770      	bx	lr

080120c0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80120c0:	b480      	push	{r7}
 80120c2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120c4:	bf00      	nop
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bc80      	pop	{r7}
 80120ca:	4770      	bx	lr

080120cc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	6039      	str	r1, [r7, #0]
 80120d6:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80120d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120da:	4618      	mov	r0, r3
 80120dc:	370c      	adds	r7, #12
 80120de:	46bd      	mov	sp, r7
 80120e0:	bc80      	pop	{r7}
 80120e2:	4770      	bx	lr

080120e4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	4603      	mov	r3, r0
 80120ec:	603a      	str	r2, [r7, #0]
 80120ee:	80fb      	strh	r3, [r7, #6]
 80120f0:	460b      	mov	r3, r1
 80120f2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120f4:	bf00      	nop
 80120f6:	370c      	adds	r7, #12
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bc80      	pop	{r7}
 80120fc:	4770      	bx	lr

080120fe <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80120fe:	b480      	push	{r7}
 8012100:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012102:	bf00      	nop
 8012104:	46bd      	mov	sp, r7
 8012106:	bc80      	pop	{r7}
 8012108:	4770      	bx	lr

0801210a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012112:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012114:	4618      	mov	r0, r3
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	bc80      	pop	{r7}
 801211c:	4770      	bx	lr

0801211e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801211e:	b480      	push	{r7}
 8012120:	b083      	sub	sp, #12
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012126:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012128:	4618      	mov	r0, r3
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	bc80      	pop	{r7}
 8012130:	4770      	bx	lr

08012132 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8012132:	b480      	push	{r7}
 8012134:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012136:	bf00      	nop
 8012138:	46bd      	mov	sp, r7
 801213a:	bc80      	pop	{r7}
 801213c:	4770      	bx	lr

0801213e <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 801213e:	b480      	push	{r7}
 8012140:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012142:	bf00      	nop
 8012144:	46bd      	mov	sp, r7
 8012146:	bc80      	pop	{r7}
 8012148:	4770      	bx	lr

0801214a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801214a:	b480      	push	{r7}
 801214c:	b085      	sub	sp, #20
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012156:	2300      	movs	r3, #0
 8012158:	81fb      	strh	r3, [r7, #14]
 801215a:	e00a      	b.n	8012172 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801215c:	89fb      	ldrh	r3, [r7, #14]
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	4413      	add	r3, r2
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d001      	beq.n	801216c <IsSlotFree+0x22>
        {
            return false;
 8012168:	2300      	movs	r3, #0
 801216a:	e006      	b.n	801217a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801216c:	89fb      	ldrh	r3, [r7, #14]
 801216e:	3301      	adds	r3, #1
 8012170:	81fb      	strh	r3, [r7, #14]
 8012172:	89fb      	ldrh	r3, [r7, #14]
 8012174:	2b0f      	cmp	r3, #15
 8012176:	d9f1      	bls.n	801215c <IsSlotFree+0x12>
        }
    }
    return true;
 8012178:	2301      	movs	r3, #1
}
 801217a:	4618      	mov	r0, r3
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	bc80      	pop	{r7}
 8012182:	4770      	bx	lr

08012184 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801218e:	e007      	b.n	80121a0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012190:	79fb      	ldrb	r3, [r7, #7]
 8012192:	3301      	adds	r3, #1
 8012194:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	2b0f      	cmp	r3, #15
 801219a:	d101      	bne.n	80121a0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	e012      	b.n	80121c6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80121a0:	79fb      	ldrb	r3, [r7, #7]
 80121a2:	011b      	lsls	r3, r3, #4
 80121a4:	3308      	adds	r3, #8
 80121a6:	4a0a      	ldr	r2, [pc, #40]	; (80121d0 <MallocNewMacCommandSlot+0x4c>)
 80121a8:	4413      	add	r3, r2
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff ffcd 	bl	801214a <IsSlotFree>
 80121b0:	4603      	mov	r3, r0
 80121b2:	f083 0301 	eor.w	r3, r3, #1
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1e9      	bne.n	8012190 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80121bc:	79fb      	ldrb	r3, [r7, #7]
 80121be:	011b      	lsls	r3, r3, #4
 80121c0:	3308      	adds	r3, #8
 80121c2:	4a03      	ldr	r2, [pc, #12]	; (80121d0 <MallocNewMacCommandSlot+0x4c>)
 80121c4:	4413      	add	r3, r2
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3708      	adds	r7, #8
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	20000cac 	.word	0x20000cac

080121d4 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d101      	bne.n	80121e6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80121e2:	2300      	movs	r3, #0
 80121e4:	e005      	b.n	80121f2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80121e6:	2210      	movs	r2, #16
 80121e8:	2100      	movs	r1, #0
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f004 f982 	bl	80164f4 <memset1>

    return true;
 80121f0:	2301      	movs	r3, #1
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3708      	adds	r7, #8
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}

080121fa <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80121fa:	b480      	push	{r7}
 80121fc:	b083      	sub	sp, #12
 80121fe:	af00      	add	r7, sp, #0
 8012200:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <LinkedListInit+0x12>
    {
        return false;
 8012208:	2300      	movs	r3, #0
 801220a:	e006      	b.n	801221a <LinkedListInit+0x20>
    }

    list->First = NULL;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2200      	movs	r2, #0
 8012210:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	605a      	str	r2, [r3, #4]

    return true;
 8012218:	2301      	movs	r3, #1
}
 801221a:	4618      	mov	r0, r3
 801221c:	370c      	adds	r7, #12
 801221e:	46bd      	mov	sp, r7
 8012220:	bc80      	pop	{r7}
 8012222:	4770      	bx	lr

08012224 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8012224:	b480      	push	{r7}
 8012226:	b083      	sub	sp, #12
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d002      	beq.n	801223a <LinkedListAdd+0x16>
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <LinkedListAdd+0x1a>
    {
        return false;
 801223a:	2300      	movs	r3, #0
 801223c:	e015      	b.n	801226a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d102      	bne.n	801224c <LinkedListAdd+0x28>
    {
        list->First = element;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d003      	beq.n	801225c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2200      	movs	r2, #0
 8012260:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	683a      	ldr	r2, [r7, #0]
 8012266:	605a      	str	r2, [r3, #4]

    return true;
 8012268:	2301      	movs	r3, #1
}
 801226a:	4618      	mov	r0, r3
 801226c:	370c      	adds	r7, #12
 801226e:	46bd      	mov	sp, r7
 8012270:	bc80      	pop	{r7}
 8012272:	4770      	bx	lr

08012274 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012274:	b480      	push	{r7}
 8012276:	b085      	sub	sp, #20
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <LinkedListGetPrevious+0x16>
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d101      	bne.n	801228e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	e016      	b.n	80122bc <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012294:	683a      	ldr	r2, [r7, #0]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	429a      	cmp	r2, r3
 801229a:	d00c      	beq.n	80122b6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801229c:	e002      	b.n	80122a4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d007      	beq.n	80122ba <LinkedListGetPrevious+0x46>
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d1f4      	bne.n	801229e <LinkedListGetPrevious+0x2a>
 80122b4:	e001      	b.n	80122ba <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80122b6:	2300      	movs	r3, #0
 80122b8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80122ba:	68fb      	ldr	r3, [r7, #12]
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3714      	adds	r7, #20
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bc80      	pop	{r7}
 80122c4:	4770      	bx	lr

080122c6 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80122c6:	b580      	push	{r7, lr}
 80122c8:	b084      	sub	sp, #16
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
 80122ce:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <LinkedListRemove+0x16>
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d101      	bne.n	80122e0 <LinkedListRemove+0x1a>
    {
        return false;
 80122dc:	2300      	movs	r3, #0
 80122de:	e020      	b.n	8012322 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f7ff ffc6 	bl	8012274 <LinkedListGetPrevious>
 80122e8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	683a      	ldr	r2, [r7, #0]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d103      	bne.n	80122fc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	429a      	cmp	r2, r3
 8012304:	d102      	bne.n	801230c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	2200      	movs	r2, #0
 801231e:	601a      	str	r2, [r3, #0]

    return true;
 8012320:	2301      	movs	r3, #1
}
 8012322:	4618      	mov	r0, r3
 8012324:	3710      	adds	r7, #16
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}

0801232a <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801232a:	b480      	push	{r7}
 801232c:	b083      	sub	sp, #12
 801232e:	af00      	add	r7, sp, #0
 8012330:	4603      	mov	r3, r0
 8012332:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	2b05      	cmp	r3, #5
 8012338:	d004      	beq.n	8012344 <IsSticky+0x1a>
 801233a:	2b05      	cmp	r3, #5
 801233c:	db04      	blt.n	8012348 <IsSticky+0x1e>
 801233e:	3b08      	subs	r3, #8
 8012340:	2b02      	cmp	r3, #2
 8012342:	d801      	bhi.n	8012348 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8012344:	2301      	movs	r3, #1
 8012346:	e000      	b.n	801234a <IsSticky+0x20>
        default:
            return false;
 8012348:	2300      	movs	r3, #0
    }
}
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	bc80      	pop	{r7}
 8012352:	4770      	bx	lr

08012354 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012358:	22fc      	movs	r2, #252	; 0xfc
 801235a:	2100      	movs	r1, #0
 801235c:	4804      	ldr	r0, [pc, #16]	; (8012370 <LoRaMacCommandsInit+0x1c>)
 801235e:	f004 f8c9 	bl	80164f4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012362:	4803      	ldr	r0, [pc, #12]	; (8012370 <LoRaMacCommandsInit+0x1c>)
 8012364:	f7ff ff49 	bl	80121fa <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	20000cac 	.word	0x20000cac

08012374 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b086      	sub	sp, #24
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d101      	bne.n	801238c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012388:	2301      	movs	r3, #1
 801238a:	e033      	b.n	80123f4 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801238c:	f7ff fefa 	bl	8012184 <MallocNewMacCommandSlot>
 8012390:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d101      	bne.n	801239c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012398:	2302      	movs	r3, #2
 801239a:	e02b      	b.n	80123f4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801239c:	6979      	ldr	r1, [r7, #20]
 801239e:	4817      	ldr	r0, [pc, #92]	; (80123fc <LoRaMacCommandsAddCmd+0x88>)
 80123a0:	f7ff ff40 	bl	8012224 <LinkedListAdd>
 80123a4:	4603      	mov	r3, r0
 80123a6:	f083 0301 	eor.w	r3, r3, #1
 80123aa:	b2db      	uxtb	r3, r3
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80123b0:	2305      	movs	r3, #5
 80123b2:	e01f      	b.n	80123f4 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	7bfa      	ldrb	r2, [r7, #15]
 80123b8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	3305      	adds	r3, #5
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	b292      	uxth	r2, r2
 80123c8:	68b9      	ldr	r1, [r7, #8]
 80123ca:	4618      	mov	r0, r3
 80123cc:	f004 f857 	bl	801647e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff ffa9 	bl	801232a <IsSticky>
 80123d8:	4603      	mov	r3, r0
 80123da:	461a      	mov	r2, r3
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80123e0:	4b06      	ldr	r3, [pc, #24]	; (80123fc <LoRaMacCommandsAddCmd+0x88>)
 80123e2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4413      	add	r3, r2
 80123ea:	3301      	adds	r3, #1
 80123ec:	4a03      	ldr	r2, [pc, #12]	; (80123fc <LoRaMacCommandsAddCmd+0x88>)
 80123ee:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80123f2:	2300      	movs	r3, #0
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3718      	adds	r7, #24
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	20000cac 	.word	0x20000cac

08012400 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d101      	bne.n	8012412 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801240e:	2301      	movs	r3, #1
 8012410:	e021      	b.n	8012456 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012412:	6879      	ldr	r1, [r7, #4]
 8012414:	4812      	ldr	r0, [pc, #72]	; (8012460 <LoRaMacCommandsRemoveCmd+0x60>)
 8012416:	f7ff ff56 	bl	80122c6 <LinkedListRemove>
 801241a:	4603      	mov	r3, r0
 801241c:	f083 0301 	eor.w	r3, r3, #1
 8012420:	b2db      	uxtb	r3, r3
 8012422:	2b00      	cmp	r3, #0
 8012424:	d001      	beq.n	801242a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012426:	2303      	movs	r3, #3
 8012428:	e015      	b.n	8012456 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801242a:	4b0d      	ldr	r3, [pc, #52]	; (8012460 <LoRaMacCommandsRemoveCmd+0x60>)
 801242c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	3b01      	subs	r3, #1
 8012438:	4a09      	ldr	r2, [pc, #36]	; (8012460 <LoRaMacCommandsRemoveCmd+0x60>)
 801243a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff fec8 	bl	80121d4 <FreeMacCommandSlot>
 8012444:	4603      	mov	r3, r0
 8012446:	f083 0301 	eor.w	r3, r3, #1
 801244a:	b2db      	uxtb	r3, r3
 801244c:	2b00      	cmp	r3, #0
 801244e:	d001      	beq.n	8012454 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012450:	2305      	movs	r3, #5
 8012452:	e000      	b.n	8012456 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	20000cac 	.word	0x20000cac

08012464 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801246a:	4b0f      	ldr	r3, [pc, #60]	; (80124a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012470:	e012      	b.n	8012498 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	7b1b      	ldrb	r3, [r3, #12]
 8012476:	f083 0301 	eor.w	r3, r3, #1
 801247a:	b2db      	uxtb	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	d008      	beq.n	8012492 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7ff ffba 	bl	8012400 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	607b      	str	r3, [r7, #4]
 8012490:	e002      	b.n	8012498 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1e9      	bne.n	8012472 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	20000cac 	.word	0x20000cac

080124ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80124b2:	4b0e      	ldr	r3, [pc, #56]	; (80124ec <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80124b8:	e00f      	b.n	80124da <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	791b      	ldrb	r3, [r3, #4]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7ff ff30 	bl	801232a <IsSticky>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff ff95 	bl	8012400 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d1ec      	bne.n	80124ba <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80124e0:	2300      	movs	r3, #0
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	20000cac 	.word	0x20000cac

080124f0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80124fe:	2301      	movs	r3, #1
 8012500:	e005      	b.n	801250e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012502:	4b05      	ldr	r3, [pc, #20]	; (8012518 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012504:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	370c      	adds	r7, #12
 8012512:	46bd      	mov	sp, r7
 8012514:	bc80      	pop	{r7}
 8012516:	4770      	bx	lr
 8012518:	20000cac 	.word	0x20000cac

0801251c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b088      	sub	sp, #32
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012528:	4b25      	ldr	r3, [pc, #148]	; (80125c0 <LoRaMacCommandsSerializeCmds+0xa4>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <LoRaMacCommandsSerializeCmds+0x22>
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d126      	bne.n	801258c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801253e:	2301      	movs	r3, #1
 8012540:	e039      	b.n	80125b6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012542:	7efb      	ldrb	r3, [r7, #27]
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	1ad2      	subs	r2, r2, r3
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	689b      	ldr	r3, [r3, #8]
 801254c:	3301      	adds	r3, #1
 801254e:	429a      	cmp	r2, r3
 8012550:	d320      	bcc.n	8012594 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012552:	7efb      	ldrb	r3, [r7, #27]
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	76fa      	strb	r2, [r7, #27]
 8012558:	461a      	mov	r2, r3
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4413      	add	r3, r2
 801255e:	69fa      	ldr	r2, [r7, #28]
 8012560:	7912      	ldrb	r2, [r2, #4]
 8012562:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012564:	7efb      	ldrb	r3, [r7, #27]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	18d0      	adds	r0, r2, r3
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	1d59      	adds	r1, r3, #5
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	689b      	ldr	r3, [r3, #8]
 8012572:	b29b      	uxth	r3, r3
 8012574:	461a      	mov	r2, r3
 8012576:	f003 ff82 	bl	801647e <memcpy1>
            itr += curElement->PayloadSize;
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	b2da      	uxtb	r2, r3
 8012580:	7efb      	ldrb	r3, [r7, #27]
 8012582:	4413      	add	r3, r2
 8012584:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d1d7      	bne.n	8012542 <LoRaMacCommandsSerializeCmds+0x26>
 8012592:	e009      	b.n	80125a8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012594:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012596:	e007      	b.n	80125a8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012598:	69fb      	ldr	r3, [r7, #28]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801259e:	69f8      	ldr	r0, [r7, #28]
 80125a0:	f7ff ff2e 	bl	8012400 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1f4      	bne.n	8012598 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80125ae:	68b8      	ldr	r0, [r7, #8]
 80125b0:	f7ff ff9e 	bl	80124f0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80125b4:	2300      	movs	r3, #0
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3720      	adds	r7, #32
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	20000cac 	.word	0x20000cac

080125c4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80125d2:	2301      	movs	r3, #1
 80125d4:	e016      	b.n	8012604 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80125d6:	4b0e      	ldr	r3, [pc, #56]	; (8012610 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2200      	movs	r2, #0
 80125e0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80125e2:	e00b      	b.n	80125fc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	7b1b      	ldrb	r3, [r3, #12]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d004      	beq.n	80125f6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2201      	movs	r2, #1
 80125f0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80125f2:	2300      	movs	r3, #0
 80125f4:	e006      	b.n	8012604 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d1f0      	bne.n	80125e4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012602:	2300      	movs	r3, #0
}
 8012604:	4618      	mov	r0, r3
 8012606:	3714      	adds	r7, #20
 8012608:	46bd      	mov	sp, r7
 801260a:	bc80      	pop	{r7}
 801260c:	4770      	bx	lr
 801260e:	bf00      	nop
 8012610:	20000cac 	.word	0x20000cac

08012614 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	4603      	mov	r3, r0
 801261c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012622:	79fb      	ldrb	r3, [r7, #7]
 8012624:	3b02      	subs	r3, #2
 8012626:	2b11      	cmp	r3, #17
 8012628:	d850      	bhi.n	80126cc <LoRaMacCommandsGetCmdSize+0xb8>
 801262a:	a201      	add	r2, pc, #4	; (adr r2, 8012630 <LoRaMacCommandsGetCmdSize+0x1c>)
 801262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012630:	08012679 	.word	0x08012679
 8012634:	0801267f 	.word	0x0801267f
 8012638:	08012685 	.word	0x08012685
 801263c:	0801268b 	.word	0x0801268b
 8012640:	08012691 	.word	0x08012691
 8012644:	08012697 	.word	0x08012697
 8012648:	0801269d 	.word	0x0801269d
 801264c:	080126a3 	.word	0x080126a3
 8012650:	080126a9 	.word	0x080126a9
 8012654:	080126cd 	.word	0x080126cd
 8012658:	080126cd 	.word	0x080126cd
 801265c:	080126af 	.word	0x080126af
 8012660:	080126cd 	.word	0x080126cd
 8012664:	080126cd 	.word	0x080126cd
 8012668:	080126b5 	.word	0x080126b5
 801266c:	080126bb 	.word	0x080126bb
 8012670:	080126c1 	.word	0x080126c1
 8012674:	080126c7 	.word	0x080126c7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012678:	2303      	movs	r3, #3
 801267a:	73fb      	strb	r3, [r7, #15]
            break;
 801267c:	e027      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801267e:	2305      	movs	r3, #5
 8012680:	73fb      	strb	r3, [r7, #15]
            break;
 8012682:	e024      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012684:	2302      	movs	r3, #2
 8012686:	73fb      	strb	r3, [r7, #15]
            break;
 8012688:	e021      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801268a:	2305      	movs	r3, #5
 801268c:	73fb      	strb	r3, [r7, #15]
            break;
 801268e:	e01e      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012690:	2301      	movs	r3, #1
 8012692:	73fb      	strb	r3, [r7, #15]
            break;
 8012694:	e01b      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012696:	2306      	movs	r3, #6
 8012698:	73fb      	strb	r3, [r7, #15]
            break;
 801269a:	e018      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801269c:	2302      	movs	r3, #2
 801269e:	73fb      	strb	r3, [r7, #15]
            break;
 80126a0:	e015      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80126a2:	2302      	movs	r3, #2
 80126a4:	73fb      	strb	r3, [r7, #15]
            break;
 80126a6:	e012      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80126a8:	2305      	movs	r3, #5
 80126aa:	73fb      	strb	r3, [r7, #15]
            break;
 80126ac:	e00f      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80126ae:	2306      	movs	r3, #6
 80126b0:	73fb      	strb	r3, [r7, #15]
            break;
 80126b2:	e00c      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80126b4:	2301      	movs	r3, #1
 80126b6:	73fb      	strb	r3, [r7, #15]
            break;
 80126b8:	e009      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80126ba:	2305      	movs	r3, #5
 80126bc:	73fb      	strb	r3, [r7, #15]
            break;
 80126be:	e006      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80126c0:	2304      	movs	r3, #4
 80126c2:	73fb      	strb	r3, [r7, #15]
            break;
 80126c4:	e003      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80126c6:	2304      	movs	r3, #4
 80126c8:	73fb      	strb	r3, [r7, #15]
            break;
 80126ca:	e000      	b.n	80126ce <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80126cc:	bf00      	nop
        }
    }
    return cidSize;
 80126ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3714      	adds	r7, #20
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bc80      	pop	{r7}
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop

080126dc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	4a07      	ldr	r2, [pc, #28]	; (8012704 <IncreaseBufferPointer+0x28>)
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d102      	bne.n	80126f2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80126ec:	4b06      	ldr	r3, [pc, #24]	; (8012708 <IncreaseBufferPointer+0x2c>)
 80126ee:	607b      	str	r3, [r7, #4]
 80126f0:	e002      	b.n	80126f8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	3304      	adds	r3, #4
 80126f6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80126f8:	687b      	ldr	r3, [r7, #4]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	370c      	adds	r7, #12
 80126fe:	46bd      	mov	sp, r7
 8012700:	bc80      	pop	{r7}
 8012702:	4770      	bx	lr
 8012704:	20000dc4 	.word	0x20000dc4
 8012708:	20000db4 	.word	0x20000db4

0801270c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	4603      	mov	r3, r0
 8012714:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012716:	79fb      	ldrb	r3, [r7, #7]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d101      	bne.n	8012720 <IsListEmpty+0x14>
    {
        return true;
 801271c:	2301      	movs	r3, #1
 801271e:	e000      	b.n	8012722 <IsListEmpty+0x16>
    }
    return false;
 8012720:	2300      	movs	r3, #0
}
 8012722:	4618      	mov	r0, r3
 8012724:	370c      	adds	r7, #12
 8012726:	46bd      	mov	sp, r7
 8012728:	bc80      	pop	{r7}
 801272a:	4770      	bx	lr

0801272c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801272c:	b480      	push	{r7}
 801272e:	b083      	sub	sp, #12
 8012730:	af00      	add	r7, sp, #0
 8012732:	4603      	mov	r3, r0
 8012734:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012736:	79fb      	ldrb	r3, [r7, #7]
 8012738:	2b04      	cmp	r3, #4
 801273a:	d901      	bls.n	8012740 <IsListFull+0x14>
    {
        return true;
 801273c:	2301      	movs	r3, #1
 801273e:	e000      	b.n	8012742 <IsListFull+0x16>
    }
    return false;
 8012740:	2300      	movs	r3, #0
}
 8012742:	4618      	mov	r0, r3
 8012744:	370c      	adds	r7, #12
 8012746:	46bd      	mov	sp, r7
 8012748:	bc80      	pop	{r7}
 801274a:	4770      	bx	lr

0801274c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b086      	sub	sp, #24
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	607a      	str	r2, [r7, #4]
 8012758:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801275e:	4b13      	ldr	r3, [pc, #76]	; (80127ac <GetElement+0x60>)
 8012760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012764:	4618      	mov	r0, r3
 8012766:	f7ff ffd1 	bl	801270c <IsListEmpty>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <GetElement+0x28>
    {
        return NULL;
 8012770:	2300      	movs	r3, #0
 8012772:	e017      	b.n	80127a4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012774:	2300      	movs	r3, #0
 8012776:	74fb      	strb	r3, [r7, #19]
 8012778:	e00d      	b.n	8012796 <GetElement+0x4a>
    {
        if( element->Request == request )
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	7bfa      	ldrb	r2, [r7, #15]
 8012780:	429a      	cmp	r2, r3
 8012782:	d101      	bne.n	8012788 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	e00d      	b.n	80127a4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012788:	6978      	ldr	r0, [r7, #20]
 801278a:	f7ff ffa7 	bl	80126dc <IncreaseBufferPointer>
 801278e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012790:	7cfb      	ldrb	r3, [r7, #19]
 8012792:	3301      	adds	r3, #1
 8012794:	74fb      	strb	r3, [r7, #19]
 8012796:	4b05      	ldr	r3, [pc, #20]	; (80127ac <GetElement+0x60>)
 8012798:	f893 3020 	ldrb.w	r3, [r3, #32]
 801279c:	7cfa      	ldrb	r2, [r7, #19]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d3eb      	bcc.n	801277a <GetElement+0x2e>
    }

    return NULL;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3718      	adds	r7, #24
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	20000da8 	.word	0x20000da8

080127b0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80127b8:	4a0c      	ldr	r2, [pc, #48]	; (80127ec <LoRaMacConfirmQueueInit+0x3c>)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80127be:	4b0b      	ldr	r3, [pc, #44]	; (80127ec <LoRaMacConfirmQueueInit+0x3c>)
 80127c0:	2200      	movs	r2, #0
 80127c2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80127c6:	4b09      	ldr	r3, [pc, #36]	; (80127ec <LoRaMacConfirmQueueInit+0x3c>)
 80127c8:	4a09      	ldr	r2, [pc, #36]	; (80127f0 <LoRaMacConfirmQueueInit+0x40>)
 80127ca:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80127cc:	4b07      	ldr	r3, [pc, #28]	; (80127ec <LoRaMacConfirmQueueInit+0x3c>)
 80127ce:	4a08      	ldr	r2, [pc, #32]	; (80127f0 <LoRaMacConfirmQueueInit+0x40>)
 80127d0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80127d2:	2214      	movs	r2, #20
 80127d4:	21ff      	movs	r1, #255	; 0xff
 80127d6:	4806      	ldr	r0, [pc, #24]	; (80127f0 <LoRaMacConfirmQueueInit+0x40>)
 80127d8:	f003 fe8c 	bl	80164f4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80127dc:	4b03      	ldr	r3, [pc, #12]	; (80127ec <LoRaMacConfirmQueueInit+0x3c>)
 80127de:	2201      	movs	r2, #1
 80127e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}
 80127ec:	20000da8 	.word	0x20000da8
 80127f0:	20000db4 	.word	0x20000db4

080127f4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80127fc:	4b19      	ldr	r3, [pc, #100]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 80127fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff ff92 	bl	801272c <IsListFull>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d001      	beq.n	8012812 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801280e:	2300      	movs	r3, #0
 8012810:	e023      	b.n	801285a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012812:	4b14      	ldr	r3, [pc, #80]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	7812      	ldrb	r2, [r2, #0]
 801281a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801281c:	4b11      	ldr	r3, [pc, #68]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 801281e:	689b      	ldr	r3, [r3, #8]
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	7852      	ldrb	r2, [r2, #1]
 8012824:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012826:	4b0f      	ldr	r3, [pc, #60]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 8012828:	689b      	ldr	r3, [r3, #8]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	78d2      	ldrb	r2, [r2, #3]
 801282e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012830:	4b0c      	ldr	r3, [pc, #48]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 8012832:	689b      	ldr	r3, [r3, #8]
 8012834:	2200      	movs	r2, #0
 8012836:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012838:	4b0a      	ldr	r3, [pc, #40]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 801283a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801283e:	3301      	adds	r3, #1
 8012840:	b2da      	uxtb	r2, r3
 8012842:	4b08      	ldr	r3, [pc, #32]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 8012844:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012848:	4b06      	ldr	r3, [pc, #24]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff ff45 	bl	80126dc <IncreaseBufferPointer>
 8012852:	4603      	mov	r3, r0
 8012854:	4a03      	ldr	r2, [pc, #12]	; (8012864 <LoRaMacConfirmQueueAdd+0x70>)
 8012856:	6093      	str	r3, [r2, #8]

    return true;
 8012858:	2301      	movs	r3, #1
}
 801285a:	4618      	mov	r0, r3
 801285c:	3708      	adds	r7, #8
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20000da8 	.word	0x20000da8

08012868 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801286c:	4b0e      	ldr	r3, [pc, #56]	; (80128a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801286e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012872:	4618      	mov	r0, r3
 8012874:	f7ff ff4a 	bl	801270c <IsListEmpty>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d001      	beq.n	8012882 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801287e:	2300      	movs	r3, #0
 8012880:	e010      	b.n	80128a4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012882:	4b09      	ldr	r3, [pc, #36]	; (80128a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012888:	3b01      	subs	r3, #1
 801288a:	b2da      	uxtb	r2, r3
 801288c:	4b06      	ldr	r3, [pc, #24]	; (80128a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801288e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012892:	4b05      	ldr	r3, [pc, #20]	; (80128a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	4618      	mov	r0, r3
 8012898:	f7ff ff20 	bl	80126dc <IncreaseBufferPointer>
 801289c:	4603      	mov	r3, r0
 801289e:	4a02      	ldr	r2, [pc, #8]	; (80128a8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80128a0:	6053      	str	r3, [r2, #4]

    return true;
 80128a2:	2301      	movs	r3, #1
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	20000da8 	.word	0x20000da8

080128ac <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	460a      	mov	r2, r1
 80128b6:	71fb      	strb	r3, [r7, #7]
 80128b8:	4613      	mov	r3, r2
 80128ba:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80128bc:	2300      	movs	r3, #0
 80128be:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80128c0:	4b10      	ldr	r3, [pc, #64]	; (8012904 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff ff20 	bl	801270c <IsListEmpty>
 80128cc:	4603      	mov	r3, r0
 80128ce:	f083 0301 	eor.w	r3, r3, #1
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d011      	beq.n	80128fc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80128d8:	4b0a      	ldr	r3, [pc, #40]	; (8012904 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128da:	6859      	ldr	r1, [r3, #4]
 80128dc:	4b09      	ldr	r3, [pc, #36]	; (8012904 <LoRaMacConfirmQueueSetStatus+0x58>)
 80128de:	689a      	ldr	r2, [r3, #8]
 80128e0:	79bb      	ldrb	r3, [r7, #6]
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7ff ff32 	bl	801274c <GetElement>
 80128e8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d005      	beq.n	80128fc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	79fa      	ldrb	r2, [r7, #7]
 80128f4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2201      	movs	r2, #1
 80128fa:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80128fc:	bf00      	nop
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	20000da8 	.word	0x20000da8

08012908 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	4603      	mov	r3, r0
 8012910:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012912:	2300      	movs	r3, #0
 8012914:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012916:	4b10      	ldr	r3, [pc, #64]	; (8012958 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012918:	f893 3020 	ldrb.w	r3, [r3, #32]
 801291c:	4618      	mov	r0, r3
 801291e:	f7ff fef5 	bl	801270c <IsListEmpty>
 8012922:	4603      	mov	r3, r0
 8012924:	f083 0301 	eor.w	r3, r3, #1
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d00e      	beq.n	801294c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801292e:	4b0a      	ldr	r3, [pc, #40]	; (8012958 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012930:	6859      	ldr	r1, [r3, #4]
 8012932:	4b09      	ldr	r3, [pc, #36]	; (8012958 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012934:	689a      	ldr	r2, [r3, #8]
 8012936:	79fb      	ldrb	r3, [r7, #7]
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff ff07 	bl	801274c <GetElement>
 801293e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d002      	beq.n	801294c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	785b      	ldrb	r3, [r3, #1]
 801294a:	e000      	b.n	801294e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801294c:	2301      	movs	r3, #1
}
 801294e:	4618      	mov	r0, r3
 8012950:	3710      	adds	r7, #16
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
 8012956:	bf00      	nop
 8012958:	20000da8 	.word	0x20000da8

0801295c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	4603      	mov	r3, r0
 8012964:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012966:	4b16      	ldr	r3, [pc, #88]	; (80129c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801296c:	4a14      	ldr	r2, [pc, #80]	; (80129c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801296e:	79fb      	ldrb	r3, [r7, #7]
 8012970:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012974:	4b12      	ldr	r3, [pc, #72]	; (80129c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012976:	f893 3020 	ldrb.w	r3, [r3, #32]
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff fec6 	bl	801270c <IsListEmpty>
 8012980:	4603      	mov	r3, r0
 8012982:	f083 0301 	eor.w	r3, r3, #1
 8012986:	b2db      	uxtb	r3, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d015      	beq.n	80129b8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	79fa      	ldrb	r2, [r7, #7]
 8012990:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	78db      	ldrb	r3, [r3, #3]
 8012996:	f083 0301 	eor.w	r3, r3, #1
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d002      	beq.n	80129a6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2201      	movs	r2, #1
 80129a4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f7ff fe98 	bl	80126dc <IncreaseBufferPointer>
 80129ac:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80129ae:	4b04      	ldr	r3, [pc, #16]	; (80129c0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80129b0:	689b      	ldr	r3, [r3, #8]
 80129b2:	68fa      	ldr	r2, [r7, #12]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d1e9      	bne.n	801298c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80129b8:	bf00      	nop
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20000da8 	.word	0x20000da8

080129c4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	4603      	mov	r3, r0
 80129cc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80129ce:	4b09      	ldr	r3, [pc, #36]	; (80129f4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80129d0:	6859      	ldr	r1, [r3, #4]
 80129d2:	4b08      	ldr	r3, [pc, #32]	; (80129f4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80129d4:	689a      	ldr	r2, [r3, #8]
 80129d6:	79fb      	ldrb	r3, [r7, #7]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff feb7 	bl	801274c <GetElement>
 80129de:	4603      	mov	r3, r0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d001      	beq.n	80129e8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80129e4:	2301      	movs	r3, #1
 80129e6:	e000      	b.n	80129ea <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	20000da8 	.word	0x20000da8

080129f8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012a00:	4b22      	ldr	r3, [pc, #136]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a06:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	73fb      	strb	r3, [r7, #15]
 8012a10:	e032      	b.n	8012a78 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012a12:	4b1e      	ldr	r3, [pc, #120]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	781a      	ldrb	r2, [r3, #0]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012a1c:	4b1b      	ldr	r3, [pc, #108]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	785a      	ldrb	r2, [r3, #1]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012a26:	4b19      	ldr	r3, [pc, #100]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	789b      	ldrb	r3, [r3, #2]
 8012a2c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012a2e:	7b7b      	ldrb	r3, [r7, #13]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d005      	beq.n	8012a40 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012a34:	4b15      	ldr	r3, [pc, #84]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	689b      	ldr	r3, [r3, #8]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	4798      	blx	r3
 8012a3e:	e00b      	b.n	8012a58 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012a40:	4b12      	ldr	r3, [pc, #72]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012a48:	4b10      	ldr	r3, [pc, #64]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	785b      	ldrb	r3, [r3, #1]
 8012a4e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012a50:	4b0e      	ldr	r3, [pc, #56]	; (8012a8c <LoRaMacConfirmQueueHandleCb+0x94>)
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	78db      	ldrb	r3, [r3, #3]
 8012a56:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012a58:	f7ff ff06 	bl	8012868 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012a5c:	7b7b      	ldrb	r3, [r7, #13]
 8012a5e:	f083 0301 	eor.w	r3, r3, #1
 8012a62:	b2db      	uxtb	r3, r3
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d004      	beq.n	8012a72 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012a68:	f107 0308 	add.w	r3, r7, #8
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff fec1 	bl	80127f4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012a72:	7bfb      	ldrb	r3, [r7, #15]
 8012a74:	3301      	adds	r3, #1
 8012a76:	73fb      	strb	r3, [r7, #15]
 8012a78:	7bfa      	ldrb	r2, [r7, #15]
 8012a7a:	7bbb      	ldrb	r3, [r7, #14]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d3c8      	bcc.n	8012a12 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8012a80:	bf00      	nop
 8012a82:	bf00      	nop
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	20000da8 	.word	0x20000da8

08012a90 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012a90:	b480      	push	{r7}
 8012a92:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012a94:	4b03      	ldr	r3, [pc, #12]	; (8012aa4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012a96:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bc80      	pop	{r7}
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	20000da8 	.word	0x20000da8

08012aa8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012aac:	4b06      	ldr	r3, [pc, #24]	; (8012ac8 <LoRaMacConfirmQueueIsFull+0x20>)
 8012aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7ff fe3a 	bl	801272c <IsListFull>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d001      	beq.n	8012ac2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e000      	b.n	8012ac4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012ac2:	2300      	movs	r3, #0
    }
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	20000da8 	.word	0x20000da8

08012acc <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b08e      	sub	sp, #56	; 0x38
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	607b      	str	r3, [r7, #4]
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	817b      	strh	r3, [r7, #10]
 8012ada:	4613      	mov	r3, r2
 8012adc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ae4:	230a      	movs	r3, #10
 8012ae6:	e087      	b.n	8012bf8 <PayloadEncrypt+0x12c>
    }

    uint8_t bufferIndex = 0;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8012aee:	2301      	movs	r3, #1
 8012af0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8012af2:	2300      	movs	r3, #0
 8012af4:	623b      	str	r3, [r7, #32]
 8012af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012afa:	2200      	movs	r2, #0
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	605a      	str	r2, [r3, #4]
 8012b00:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012b02:	2300      	movs	r3, #0
 8012b04:	613b      	str	r3, [r7, #16]
 8012b06:	f107 0314 	add.w	r3, r7, #20
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	601a      	str	r2, [r3, #0]
 8012b0e:	605a      	str	r2, [r3, #4]
 8012b10:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012b12:	2301      	movs	r3, #1
 8012b14:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012b16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8012b1a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	0a1b      	lsrs	r3, r3, #8
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	0c1b      	lsrs	r3, r3, #16
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	0e1b      	lsrs	r3, r3, #24
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b42:	0a1b      	lsrs	r3, r3, #8
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b4a:	0c1b      	lsrs	r3, r3, #16
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b52:	0e1b      	lsrs	r3, r3, #24
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012b58:	e049      	b.n	8012bee <PayloadEncrypt+0x122>
    {
        aBlock[15] = ctr & 0xFF;
 8012b5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012b60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b62:	3301      	adds	r3, #1
 8012b64:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012b66:	f107 0320 	add.w	r3, r7, #32
 8012b6a:	7a7a      	ldrb	r2, [r7, #9]
 8012b6c:	f107 0010 	add.w	r0, r7, #16
 8012b70:	2110      	movs	r1, #16
 8012b72:	f7f9 f9fa 	bl	800bf6a <SecureElementAesEncrypt>
 8012b76:	4603      	mov	r3, r0
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d001      	beq.n	8012b80 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012b7c:	230f      	movs	r3, #15
 8012b7e:	e03b      	b.n	8012bf8 <PayloadEncrypt+0x12c>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012b80:	2300      	movs	r3, #0
 8012b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b86:	e01f      	b.n	8012bc8 <PayloadEncrypt+0xfc>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012b88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b90:	4413      	add	r3, r2
 8012b92:	461a      	mov	r2, r3
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4413      	add	r3, r2
 8012b98:	7819      	ldrb	r1, [r3, #0]
 8012b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b9e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8012ba2:	4413      	add	r3, r2
 8012ba4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012ba8:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8012bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012bb0:	4403      	add	r3, r0
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	4403      	add	r3, r0
 8012bb8:	404a      	eors	r2, r1
 8012bba:	b2d2      	uxtb	r2, r2
 8012bbc:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012bcc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012bd0:	2a10      	cmp	r2, #16
 8012bd2:	bfa8      	it	ge
 8012bd4:	2210      	movge	r2, #16
 8012bd6:	b212      	sxth	r2, r2
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	dbd5      	blt.n	8012b88 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012bdc:	897b      	ldrh	r3, [r7, #10]
 8012bde:	3b10      	subs	r3, #16
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012be8:	3310      	adds	r3, #16
 8012bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8012bee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	dcb1      	bgt.n	8012b5a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012bf6:	2300      	movs	r3, #0
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3738      	adds	r7, #56	; 0x38
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012c00:	b490      	push	{r4, r7}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	4604      	mov	r4, r0
 8012c08:	4608      	mov	r0, r1
 8012c0a:	4611      	mov	r1, r2
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	4623      	mov	r3, r4
 8012c10:	80fb      	strh	r3, [r7, #6]
 8012c12:	4603      	mov	r3, r0
 8012c14:	717b      	strb	r3, [r7, #5]
 8012c16:	460b      	mov	r3, r1
 8012c18:	713b      	strb	r3, [r7, #4]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d101      	bne.n	8012c28 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c24:	230a      	movs	r3, #10
 8012c26:	e04e      	b.n	8012cc6 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	2249      	movs	r2, #73	; 0x49
 8012c2c:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8012c2e:	69bb      	ldr	r3, [r7, #24]
 8012c30:	3301      	adds	r3, #1
 8012c32:	2200      	movs	r2, #0
 8012c34:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012c36:	69bb      	ldr	r3, [r7, #24]
 8012c38:	3302      	adds	r3, #2
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012c3e:	69bb      	ldr	r3, [r7, #24]
 8012c40:	3303      	adds	r3, #3
 8012c42:	2200      	movs	r2, #0
 8012c44:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012c46:	69bb      	ldr	r3, [r7, #24]
 8012c48:	3304      	adds	r3, #4
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	3305      	adds	r3, #5
 8012c52:	78fa      	ldrb	r2, [r7, #3]
 8012c54:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	3306      	adds	r3, #6
 8012c5a:	693a      	ldr	r2, [r7, #16]
 8012c5c:	b2d2      	uxtb	r2, r2
 8012c5e:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	0a1a      	lsrs	r2, r3, #8
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	3307      	adds	r3, #7
 8012c68:	b2d2      	uxtb	r2, r2
 8012c6a:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	0c1a      	lsrs	r2, r3, #16
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	3308      	adds	r3, #8
 8012c74:	b2d2      	uxtb	r2, r2
 8012c76:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	0e1a      	lsrs	r2, r3, #24
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	3309      	adds	r3, #9
 8012c80:	b2d2      	uxtb	r2, r2
 8012c82:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	330a      	adds	r3, #10
 8012c88:	697a      	ldr	r2, [r7, #20]
 8012c8a:	b2d2      	uxtb	r2, r2
 8012c8c:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	0a1a      	lsrs	r2, r3, #8
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	330b      	adds	r3, #11
 8012c96:	b2d2      	uxtb	r2, r2
 8012c98:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	0c1a      	lsrs	r2, r3, #16
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	330c      	adds	r3, #12
 8012ca2:	b2d2      	uxtb	r2, r2
 8012ca4:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	0e1a      	lsrs	r2, r3, #24
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	330d      	adds	r3, #13
 8012cae:	b2d2      	uxtb	r2, r2
 8012cb0:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	330e      	adds	r3, #14
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	330f      	adds	r3, #15
 8012cbe:	88fa      	ldrh	r2, [r7, #6]
 8012cc0:	b2d2      	uxtb	r2, r2
 8012cc2:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bc90      	pop	{r4, r7}
 8012cce:	4770      	bx	lr

08012cd0 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012cd0:	b590      	push	{r4, r7, lr}
 8012cd2:	b08b      	sub	sp, #44	; 0x2c
 8012cd4:	af04      	add	r7, sp, #16
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	4608      	mov	r0, r1
 8012cda:	4611      	mov	r1, r2
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4603      	mov	r3, r0
 8012ce0:	807b      	strh	r3, [r7, #2]
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	707b      	strb	r3, [r7, #1]
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d002      	beq.n	8012cf6 <ComputeCmacB0+0x26>
 8012cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d101      	bne.n	8012cfa <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012cf6:	230a      	movs	r3, #10
 8012cf8:	e024      	b.n	8012d44 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012cfa:	887b      	ldrh	r3, [r7, #2]
 8012cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d00:	d901      	bls.n	8012d06 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012d02:	230e      	movs	r3, #14
 8012d04:	e01e      	b.n	8012d44 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012d06:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8012d0a:	783a      	ldrb	r2, [r7, #0]
 8012d0c:	7879      	ldrb	r1, [r7, #1]
 8012d0e:	8878      	ldrh	r0, [r7, #2]
 8012d10:	f107 0308 	add.w	r3, r7, #8
 8012d14:	9302      	str	r3, [sp, #8]
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	9301      	str	r3, [sp, #4]
 8012d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	4623      	mov	r3, r4
 8012d20:	f7ff ff6e 	bl	8012c00 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012d24:	7879      	ldrb	r1, [r7, #1]
 8012d26:	887a      	ldrh	r2, [r7, #2]
 8012d28:	f107 0008 	add.w	r0, r7, #8
 8012d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	460b      	mov	r3, r1
 8012d32:	6879      	ldr	r1, [r7, #4]
 8012d34:	f7f9 f8cc 	bl	800bed0 <SecureElementComputeAesCmac>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d001      	beq.n	8012d42 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012d3e:	230f      	movs	r3, #15
 8012d40:	e000      	b.n	8012d44 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012d42:	2300      	movs	r3, #0
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	371c      	adds	r7, #28
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd90      	pop	{r4, r7, pc}

08012d4c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012d4c:	b590      	push	{r4, r7, lr}
 8012d4e:	b0cd      	sub	sp, #308	; 0x134
 8012d50:	af04      	add	r7, sp, #16
 8012d52:	1d3c      	adds	r4, r7, #4
 8012d54:	6020      	str	r0, [r4, #0]
 8012d56:	460c      	mov	r4, r1
 8012d58:	4610      	mov	r0, r2
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	1cbb      	adds	r3, r7, #2
 8012d5e:	4622      	mov	r2, r4
 8012d60:	801a      	strh	r2, [r3, #0]
 8012d62:	1c7b      	adds	r3, r7, #1
 8012d64:	4602      	mov	r2, r0
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	463b      	mov	r3, r7
 8012d6a:	460a      	mov	r2, r1
 8012d6c:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012d6e:	1d3b      	adds	r3, r7, #4
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d101      	bne.n	8012d7a <VerifyCmacB0+0x2e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d76:	230a      	movs	r3, #10
 8012d78:	e04b      	b.n	8012e12 <VerifyCmacB0+0xc6>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012d7a:	1cbb      	adds	r3, r7, #2
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d82:	d901      	bls.n	8012d88 <VerifyCmacB0+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012d84:	230e      	movs	r3, #14
 8012d86:	e044      	b.n	8012e12 <VerifyCmacB0+0xc6>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012d88:	f107 030c 	add.w	r3, r7, #12
 8012d8c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8012d90:	2100      	movs	r1, #0
 8012d92:	4618      	mov	r0, r3
 8012d94:	f003 fbae 	bl	80164f4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012d98:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8012d9c:	463b      	mov	r3, r7
 8012d9e:	781a      	ldrb	r2, [r3, #0]
 8012da0:	1c7b      	adds	r3, r7, #1
 8012da2:	7819      	ldrb	r1, [r3, #0]
 8012da4:	1cbb      	adds	r3, r7, #2
 8012da6:	8818      	ldrh	r0, [r3, #0]
 8012da8:	f107 030c 	add.w	r3, r7, #12
 8012dac:	9302      	str	r3, [sp, #8]
 8012dae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8012db2:	9301      	str	r3, [sp, #4]
 8012db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	4623      	mov	r3, r4
 8012dbc:	f7ff ff20 	bl	8012c00 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012dc0:	f107 030c 	add.w	r3, r7, #12
 8012dc4:	3310      	adds	r3, #16
 8012dc6:	1cba      	adds	r2, r7, #2
 8012dc8:	8812      	ldrh	r2, [r2, #0]
 8012dca:	1d39      	adds	r1, r7, #4
 8012dcc:	6809      	ldr	r1, [r1, #0]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f003 fb55 	bl	801647e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012dd4:	2306      	movs	r3, #6
 8012dd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012dda:	1cbb      	adds	r3, r7, #2
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	3310      	adds	r3, #16
 8012de0:	b299      	uxth	r1, r3
 8012de2:	1c7b      	adds	r3, r7, #1
 8012de4:	781b      	ldrb	r3, [r3, #0]
 8012de6:	f107 000c 	add.w	r0, r7, #12
 8012dea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012dee:	f7f9 f88d 	bl	800bf0c <SecureElementVerifyAesCmac>
 8012df2:	4603      	mov	r3, r0
 8012df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d101      	bne.n	8012e04 <VerifyCmacB0+0xb8>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012e00:	2300      	movs	r3, #0
 8012e02:	e006      	b.n	8012e12 <VerifyCmacB0+0xc6>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d101      	bne.n	8012e10 <VerifyCmacB0+0xc4>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	e000      	b.n	8012e12 <VerifyCmacB0+0xc6>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e10:	230f      	movs	r3, #15
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd90      	pop	{r4, r7, pc}

08012e1c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b085      	sub	sp, #20
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	4603      	mov	r3, r0
 8012e24:	6039      	str	r1, [r7, #0]
 8012e26:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012e28:	2300      	movs	r3, #0
 8012e2a:	73fb      	strb	r3, [r7, #15]
 8012e2c:	e011      	b.n	8012e52 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	4a0c      	ldr	r2, [pc, #48]	; (8012e64 <GetKeyAddrItem+0x48>)
 8012e32:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012e36:	79fa      	ldrb	r2, [r7, #7]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d107      	bne.n	8012e4c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012e3c:	7bfb      	ldrb	r3, [r7, #15]
 8012e3e:	009b      	lsls	r3, r3, #2
 8012e40:	4a08      	ldr	r2, [pc, #32]	; (8012e64 <GetKeyAddrItem+0x48>)
 8012e42:	441a      	add	r2, r3
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	e006      	b.n	8012e5a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012e4c:	7bfb      	ldrb	r3, [r7, #15]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	73fb      	strb	r3, [r7, #15]
 8012e52:	7bfb      	ldrb	r3, [r7, #15]
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d9ea      	bls.n	8012e2e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012e58:	230c      	movs	r3, #12
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bc80      	pop	{r7}
 8012e62:	4770      	bx	lr
 8012e64:	20000114 	.word	0x20000114

08012e68 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60b9      	str	r1, [r7, #8]
 8012e70:	607a      	str	r2, [r7, #4]
 8012e72:	461a      	mov	r2, r3
 8012e74:	4603      	mov	r3, r0
 8012e76:	73fb      	strb	r3, [r7, #15]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	613b      	str	r3, [r7, #16]
 8012e80:	f107 0314 	add.w	r3, r7, #20
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
 8012e88:	605a      	str	r2, [r3, #4]
 8012e8a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8012e8c:	7bfb      	ldrb	r3, [r7, #15]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d002      	beq.n	8012e98 <DeriveSessionKey10x+0x30>
 8012e92:	2b03      	cmp	r3, #3
 8012e94:	d003      	beq.n	8012e9e <DeriveSessionKey10x+0x36>
 8012e96:	e005      	b.n	8012ea4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	743b      	strb	r3, [r7, #16]
            break;
 8012e9c:	e004      	b.n	8012ea8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012e9e:	2302      	movs	r3, #2
 8012ea0:	743b      	strb	r3, [r7, #16]
            break;
 8012ea2:	e001      	b.n	8012ea8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012ea4:	230b      	movs	r3, #11
 8012ea6:	e02a      	b.n	8012efe <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	0a1b      	lsrs	r3, r3, #8
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	0c1b      	lsrs	r3, r3, #16
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	0a1b      	lsrs	r3, r3, #8
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	0c1b      	lsrs	r3, r3, #16
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012ed4:	89bb      	ldrh	r3, [r7, #12]
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012eda:	89bb      	ldrh	r3, [r7, #12]
 8012edc:	0a1b      	lsrs	r3, r3, #8
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012ee4:	7bfa      	ldrb	r2, [r7, #15]
 8012ee6:	f107 0310 	add.w	r3, r7, #16
 8012eea:	2101      	movs	r1, #1
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f9 f89a 	bl	800c026 <SecureElementDeriveAndStoreKey>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d001      	beq.n	8012efc <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ef8:	230f      	movs	r3, #15
 8012efa:	e000      	b.n	8012efe <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012efc:	2300      	movs	r3, #0
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3720      	adds	r7, #32
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
	...

08012f08 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	4603      	mov	r3, r0
 8012f10:	6039      	str	r1, [r7, #0]
 8012f12:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d101      	bne.n	8012f1e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f1a:	230a      	movs	r3, #10
 8012f1c:	e03b      	b.n	8012f96 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8012f1e:	79fb      	ldrb	r3, [r7, #7]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	2b03      	cmp	r3, #3
 8012f24:	d834      	bhi.n	8012f90 <GetLastFcntDown+0x88>
 8012f26:	a201      	add	r2, pc, #4	; (adr r2, 8012f2c <GetLastFcntDown+0x24>)
 8012f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f2c:	08012f3d 	.word	0x08012f3d
 8012f30:	08012f55 	.word	0x08012f55
 8012f34:	08012f6d 	.word	0x08012f6d
 8012f38:	08012f85 	.word	0x08012f85
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012f3c:	4b18      	ldr	r3, [pc, #96]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	691a      	ldr	r2, [r3, #16]
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8012f46:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	4b15      	ldr	r3, [pc, #84]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	6912      	ldr	r2, [r2, #16]
 8012f50:	621a      	str	r2, [r3, #32]
            break;
 8012f52:	e01f      	b.n	8012f94 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012f54:	4b12      	ldr	r3, [pc, #72]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	695a      	ldr	r2, [r3, #20]
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8012f5e:	4b10      	ldr	r3, [pc, #64]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	4b0f      	ldr	r3, [pc, #60]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	6952      	ldr	r2, [r2, #20]
 8012f68:	621a      	str	r2, [r3, #32]
            break;
 8012f6a:	e013      	b.n	8012f94 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012f6c:	4b0c      	ldr	r3, [pc, #48]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	699a      	ldr	r2, [r3, #24]
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012f76:	4b0a      	ldr	r3, [pc, #40]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	4b09      	ldr	r3, [pc, #36]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	6992      	ldr	r2, [r2, #24]
 8012f80:	621a      	str	r2, [r3, #32]
            break;
 8012f82:	e007      	b.n	8012f94 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012f84:	4b06      	ldr	r3, [pc, #24]	; (8012fa0 <GetLastFcntDown+0x98>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	69da      	ldr	r2, [r3, #28]
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	601a      	str	r2, [r3, #0]
            break;
 8012f8e:	e001      	b.n	8012f94 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012f90:	2305      	movs	r3, #5
 8012f92:	e000      	b.n	8012f96 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bc80      	pop	{r7}
 8012f9e:	4770      	bx	lr
 8012fa0:	20000dcc 	.word	0x20000dcc

08012fa4 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	4603      	mov	r3, r0
 8012fac:	6039      	str	r1, [r7, #0]
 8012fae:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012fb4:	f107 020c 	add.w	r2, r7, #12
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	4611      	mov	r1, r2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff ffa3 	bl	8012f08 <GetLastFcntDown>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d001      	beq.n	8012fcc <CheckFCntDown+0x28>
    {
        return false;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	e00a      	b.n	8012fe2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	683a      	ldr	r2, [r7, #0]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d803      	bhi.n	8012fdc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8012fd4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fda:	d101      	bne.n	8012fe0 <CheckFCntDown+0x3c>
    {
        return true;
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e000      	b.n	8012fe2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012fe0:	2300      	movs	r3, #0
    }
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}
	...

08012fec <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012ff8:	79fb      	ldrb	r3, [r7, #7]
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	2b03      	cmp	r3, #3
 8012ffe:	d81f      	bhi.n	8013040 <UpdateFCntDown+0x54>
 8013000:	a201      	add	r2, pc, #4	; (adr r2, 8013008 <UpdateFCntDown+0x1c>)
 8013002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013006:	bf00      	nop
 8013008:	08013019 	.word	0x08013019
 801300c:	08013023 	.word	0x08013023
 8013010:	0801302d 	.word	0x0801302d
 8013014:	08013037 	.word	0x08013037
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013018:	4b0c      	ldr	r3, [pc, #48]	; (801304c <UpdateFCntDown+0x60>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	683a      	ldr	r2, [r7, #0]
 801301e:	611a      	str	r2, [r3, #16]
            break;
 8013020:	e00f      	b.n	8013042 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013022:	4b0a      	ldr	r3, [pc, #40]	; (801304c <UpdateFCntDown+0x60>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	683a      	ldr	r2, [r7, #0]
 8013028:	615a      	str	r2, [r3, #20]
            break;
 801302a:	e00a      	b.n	8013042 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801302c:	4b07      	ldr	r3, [pc, #28]	; (801304c <UpdateFCntDown+0x60>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	619a      	str	r2, [r3, #24]
            break;
 8013034:	e005      	b.n	8013042 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013036:	4b05      	ldr	r3, [pc, #20]	; (801304c <UpdateFCntDown+0x60>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	683a      	ldr	r2, [r7, #0]
 801303c:	61da      	str	r2, [r3, #28]
            break;
 801303e:	e000      	b.n	8013042 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013040:	bf00      	nop
    }
}
 8013042:	bf00      	nop
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	bc80      	pop	{r7}
 801304a:	4770      	bx	lr
 801304c:	20000dcc 	.word	0x20000dcc

08013050 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013056:	4b18      	ldr	r3, [pc, #96]	; (80130b8 <ResetFCnts+0x68>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2200      	movs	r2, #0
 801305c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801305e:	4b16      	ldr	r3, [pc, #88]	; (80130b8 <ResetFCnts+0x68>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f04f 32ff 	mov.w	r2, #4294967295
 8013066:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013068:	4b13      	ldr	r3, [pc, #76]	; (80130b8 <ResetFCnts+0x68>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f04f 32ff 	mov.w	r2, #4294967295
 8013070:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013072:	4b11      	ldr	r3, [pc, #68]	; (80130b8 <ResetFCnts+0x68>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f04f 32ff 	mov.w	r2, #4294967295
 801307a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801307c:	4b0e      	ldr	r3, [pc, #56]	; (80130b8 <ResetFCnts+0x68>)
 801307e:	681a      	ldr	r2, [r3, #0]
 8013080:	4b0d      	ldr	r3, [pc, #52]	; (80130b8 <ResetFCnts+0x68>)
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	6992      	ldr	r2, [r2, #24]
 8013086:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013088:	2300      	movs	r3, #0
 801308a:	607b      	str	r3, [r7, #4]
 801308c:	e00b      	b.n	80130a6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801308e:	4b0a      	ldr	r3, [pc, #40]	; (80130b8 <ResetFCnts+0x68>)
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3306      	adds	r3, #6
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	4413      	add	r3, r2
 801309a:	f04f 32ff 	mov.w	r2, #4294967295
 801309e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	3301      	adds	r3, #1
 80130a4:	607b      	str	r3, [r7, #4]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	ddf0      	ble.n	801308e <ResetFCnts+0x3e>
    }
}
 80130ac:	bf00      	nop
 80130ae:	bf00      	nop
 80130b0:	370c      	adds	r7, #12
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bc80      	pop	{r7}
 80130b6:	4770      	bx	lr
 80130b8:	20000dcc 	.word	0x20000dcc

080130bc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d101      	bne.n	80130ce <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80130ca:	2309      	movs	r3, #9
 80130cc:	e01c      	b.n	8013108 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80130ce:	4a10      	ldr	r2, [pc, #64]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80130d4:	4b0e      	ldr	r3, [pc, #56]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2228      	movs	r2, #40	; 0x28
 80130da:	2100      	movs	r1, #0
 80130dc:	4618      	mov	r0, r3
 80130de:	f003 fa09 	bl	80164f4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80130e2:	4b0b      	ldr	r3, [pc, #44]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2201      	movs	r2, #1
 80130e8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80130ea:	4b09      	ldr	r3, [pc, #36]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2201      	movs	r2, #1
 80130f0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80130f2:	4b07      	ldr	r3, [pc, #28]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2201      	movs	r2, #1
 80130f8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80130fa:	4b05      	ldr	r3, [pc, #20]	; (8013110 <LoRaMacCryptoInit+0x54>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2200      	movs	r2, #0
 8013100:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013102:	f7ff ffa5 	bl	8013050 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013106:	2300      	movs	r3, #0
}
 8013108:	4618      	mov	r0, r3
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	20000dcc 	.word	0x20000dcc

08013114 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801311c:	4b04      	ldr	r3, [pc, #16]	; (8013130 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013124:	2300      	movs	r3, #0
}
 8013126:	4618      	mov	r0, r3
 8013128:	370c      	adds	r7, #12
 801312a:	46bd      	mov	sp, r7
 801312c:	bc80      	pop	{r7}
 801312e:	4770      	bx	lr
 8013130:	20000dcc 	.word	0x20000dcc

08013134 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d101      	bne.n	8013146 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013142:	230a      	movs	r3, #10
 8013144:	e006      	b.n	8013154 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013146:	4b06      	ldr	r3, [pc, #24]	; (8013160 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	1c5a      	adds	r2, r3, #1
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013152:	2300      	movs	r3, #0
}
 8013154:	4618      	mov	r0, r3
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	bc80      	pop	{r7}
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	20000dcc 	.word	0x20000dcc

08013164 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013164:	b5b0      	push	{r4, r5, r7, lr}
 8013166:	b088      	sub	sp, #32
 8013168:	af00      	add	r7, sp, #0
 801316a:	60ba      	str	r2, [r7, #8]
 801316c:	607b      	str	r3, [r7, #4]
 801316e:	4603      	mov	r3, r0
 8013170:	73fb      	strb	r3, [r7, #15]
 8013172:	460b      	mov	r3, r1
 8013174:	81bb      	strh	r3, [r7, #12]
    uint32_t lastDown = 0;
 8013176:	2300      	movs	r3, #0
 8013178:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801317a:	2300      	movs	r3, #0
 801317c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801317e:	2313      	movs	r3, #19
 8013180:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <LoRaMacCryptoGetFCntDown+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013188:	230a      	movs	r3, #10
 801318a:	e04f      	b.n	801322c <LoRaMacCryptoGetFCntDown+0xc8>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801318c:	f107 0214 	add.w	r2, r7, #20
 8013190:	7bfb      	ldrb	r3, [r7, #15]
 8013192:	4611      	mov	r1, r2
 8013194:	4618      	mov	r0, r3
 8013196:	f7ff feb7 	bl	8012f08 <GetLastFcntDown>
 801319a:	4603      	mov	r3, r0
 801319c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801319e:	7efb      	ldrb	r3, [r7, #27]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <LoRaMacCryptoGetFCntDown+0x44>
    {
        return cryptoStatus;
 80131a4:	7efb      	ldrb	r3, [r7, #27]
 80131a6:	e041      	b.n	801322c <LoRaMacCryptoGetFCntDown+0xc8>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ae:	d103      	bne.n	80131b8 <LoRaMacCryptoGetFCntDown+0x54>
    {
        *currentDown = frameFcnt;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68ba      	ldr	r2, [r7, #8]
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	e01e      	b.n	80131f6 <LoRaMacCryptoGetFCntDown+0x92>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	68ba      	ldr	r2, [r7, #8]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	dd05      	ble.n	80131d4 <LoRaMacCryptoGetFCntDown+0x70>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80131c8:	697a      	ldr	r2, [r7, #20]
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	441a      	add	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	601a      	str	r2, [r3, #0]
 80131d2:	e010      	b.n	80131f6 <LoRaMacCryptoGetFCntDown+0x92>
        }
        else if( fCntDiff == 0 )
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d104      	bne.n	80131e4 <LoRaMacCryptoGetFCntDown+0x80>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80131da:	697a      	ldr	r2, [r7, #20]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80131e0:	2307      	movs	r3, #7
 80131e2:	e023      	b.n	801322c <LoRaMacCryptoGetFCntDown+0xc8>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	0c1b      	lsrs	r3, r3, #16
 80131e8:	041b      	lsls	r3, r3, #16
 80131ea:	68ba      	ldr	r2, [r7, #8]
 80131ec:	4413      	add	r3, r2
 80131ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80131f6:	4b0f      	ldr	r3, [pc, #60]	; (8013234 <LoRaMacCryptoGetFCntDown+0xd0>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	789b      	ldrb	r3, [r3, #2]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d114      	bne.n	801322a <LoRaMacCryptoGetFCntDown+0xc6>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4618      	mov	r0, r3
 8013206:	f04f 0100 	mov.w	r1, #0
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	461a      	mov	r2, r3
 801320e:	f04f 0300 	mov.w	r3, #0
 8013212:	1a84      	subs	r4, r0, r2
 8013214:	eb61 0503 	sbc.w	r5, r1, r3
 8013218:	89ba      	ldrh	r2, [r7, #12]
 801321a:	f04f 0300 	mov.w	r3, #0
 801321e:	4294      	cmp	r4, r2
 8013220:	eb75 0303 	sbcs.w	r3, r5, r3
 8013224:	db01      	blt.n	801322a <LoRaMacCryptoGetFCntDown+0xc6>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8013226:	2308      	movs	r3, #8
 8013228:	e000      	b.n	801322c <LoRaMacCryptoGetFCntDown+0xc8>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3720      	adds	r7, #32
 8013230:	46bd      	mov	sp, r7
 8013232:	bdb0      	pop	{r4, r5, r7, pc}
 8013234:	20000dcc 	.word	0x20000dcc

08013238 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d101      	bne.n	801324a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013246:	230a      	movs	r3, #10
 8013248:	e017      	b.n	801327a <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801324a:	2300      	movs	r3, #0
 801324c:	60fb      	str	r3, [r7, #12]
 801324e:	e010      	b.n	8013272 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013250:	4b0c      	ldr	r3, [pc, #48]	; (8013284 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013252:	6819      	ldr	r1, [r3, #0]
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	222c      	movs	r2, #44	; 0x2c
 8013258:	fb02 f303 	mul.w	r3, r2, r3
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	4413      	add	r3, r2
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	3206      	adds	r2, #6
 8013264:	0092      	lsls	r2, r2, #2
 8013266:	440a      	add	r2, r1
 8013268:	3204      	adds	r2, #4
 801326a:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	3301      	adds	r3, #1
 8013270:	60fb      	str	r3, [r7, #12]
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	ddeb      	ble.n	8013250 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013278:	2300      	movs	r3, #0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	bc80      	pop	{r7}
 8013282:	4770      	bx	lr
 8013284:	20000dcc 	.word	0x20000dcc

08013288 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	4603      	mov	r3, r0
 8013290:	6039      	str	r1, [r7, #0]
 8013292:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013294:	79fb      	ldrb	r3, [r7, #7]
 8013296:	6839      	ldr	r1, [r7, #0]
 8013298:	4618      	mov	r0, r3
 801329a:	f7f8 fdbb 	bl	800be14 <SecureElementSetKey>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d001      	beq.n	80132a8 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132a4:	230f      	movs	r3, #15
 80132a6:	e018      	b.n	80132da <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80132a8:	79fb      	ldrb	r3, [r7, #7]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d114      	bne.n	80132d8 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80132ae:	4b0d      	ldr	r3, [pc, #52]	; (80132e4 <LoRaMacCryptoSetKey+0x5c>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	789b      	ldrb	r3, [r3, #2]
 80132b4:	79fa      	ldrb	r2, [r7, #7]
 80132b6:	4611      	mov	r1, r2
 80132b8:	4618      	mov	r0, r3
 80132ba:	f000 fa3f 	bl	801373c <LoRaMacCryptoDeriveMcRootKey>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132c4:	230f      	movs	r3, #15
 80132c6:	e008      	b.n	80132da <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80132c8:	2004      	movs	r0, #4
 80132ca:	f000 fa62 	bl	8013792 <LoRaMacCryptoDeriveMcKEKey>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80132d4:	230f      	movs	r3, #15
 80132d6:	e000      	b.n	80132da <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80132d8:	2300      	movs	r3, #0
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	20000dcc 	.word	0x20000dcc

080132e8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b086      	sub	sp, #24
 80132ec:	af02      	add	r7, sp, #8
 80132ee:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d101      	bne.n	80132fa <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132f6:	230a      	movs	r3, #10
 80132f8:	e033      	b.n	8013362 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80132fa:	2301      	movs	r3, #1
 80132fc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80132fe:	2300      	movs	r3, #0
 8013300:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8013302:	f107 0308 	add.w	r3, r7, #8
 8013306:	4618      	mov	r0, r3
 8013308:	f7f8 ff4a 	bl	800c1a0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 801330c:	68ba      	ldr	r2, [r7, #8]
 801330e:	4b17      	ldr	r3, [pc, #92]	; (801336c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	b292      	uxth	r2, r2
 8013314:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013316:	4b15      	ldr	r3, [pc, #84]	; (801336c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	889a      	ldrh	r2, [r3, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f000 fc18 	bl	8013b56 <LoRaMacSerializerJoinRequest>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	d001      	beq.n	8013330 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801332c:	2311      	movs	r3, #17
 801332e:	e018      	b.n	8013362 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6819      	ldr	r1, [r3, #0]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	3318      	adds	r3, #24
 8013338:	7bfa      	ldrb	r2, [r7, #15]
 801333a:	9300      	str	r3, [sp, #0]
 801333c:	4613      	mov	r3, r2
 801333e:	2213      	movs	r2, #19
 8013340:	2000      	movs	r0, #0
 8013342:	f7f8 fdc5 	bl	800bed0 <SecureElementComputeAesCmac>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d001      	beq.n	8013350 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801334c:	230f      	movs	r3, #15
 801334e:	e008      	b.n	8013362 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 fc00 	bl	8013b56 <LoRaMacSerializerJoinRequest>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d001      	beq.n	8013360 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801335c:	2311      	movs	r3, #17
 801335e:	e000      	b.n	8013362 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013360:	2300      	movs	r3, #0
}
 8013362:	4618      	mov	r0, r3
 8013364:	3710      	adds	r7, #16
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	20000dcc 	.word	0x20000dcc

08013370 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013370:	b590      	push	{r4, r7, lr}
 8013372:	b097      	sub	sp, #92	; 0x5c
 8013374:	af04      	add	r7, sp, #16
 8013376:	4603      	mov	r3, r0
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d002      	beq.n	801338a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d101      	bne.n	801338e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801338a:	230a      	movs	r3, #10
 801338c:	e0bd      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801338e:	2313      	movs	r3, #19
 8013390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013394:	2300      	movs	r3, #0
 8013396:	61bb      	str	r3, [r7, #24]
 8013398:	f107 031c 	add.w	r3, r7, #28
 801339c:	221d      	movs	r2, #29
 801339e:	2100      	movs	r1, #0
 80133a0:	4618      	mov	r0, r3
 80133a2:	f007 fc25 	bl	801abf0 <memset>
    uint8_t versionMinor         = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80133aa:	4b5a      	ldr	r3, [pc, #360]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	889b      	ldrh	r3, [r3, #4]
 80133b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681c      	ldr	r4, [r3, #0]
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	791b      	ldrb	r3, [r3, #4]
 80133bc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80133c0:	7bf8      	ldrb	r0, [r7, #15]
 80133c2:	f107 0217 	add.w	r2, r7, #23
 80133c6:	9202      	str	r2, [sp, #8]
 80133c8:	f107 0218 	add.w	r2, r7, #24
 80133cc:	9201      	str	r2, [sp, #4]
 80133ce:	9300      	str	r3, [sp, #0]
 80133d0:	4623      	mov	r3, r4
 80133d2:	460a      	mov	r2, r1
 80133d4:	68b9      	ldr	r1, [r7, #8]
 80133d6:	f7f8 fe66 	bl	800c0a6 <SecureElementProcessJoinAccept>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133e0:	230f      	movs	r3, #15
 80133e2:	e092      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6818      	ldr	r0, [r3, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	791b      	ldrb	r3, [r3, #4]
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	f107 0318 	add.w	r3, r7, #24
 80133f2:	4619      	mov	r1, r3
 80133f4:	f003 f843 	bl	801647e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 f9ed 	bl	80137d8 <LoRaMacParserJoinAccept>
 80133fe:	4603      	mov	r3, r0
 8013400:	2b00      	cmp	r3, #0
 8013402:	d001      	beq.n	8013408 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013404:	2310      	movs	r3, #16
 8013406:	e080      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	799b      	ldrb	r3, [r3, #6]
 801340c:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	79db      	ldrb	r3, [r3, #7]
 8013412:	021b      	lsls	r3, r3, #8
 8013414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013416:	4313      	orrs	r3, r2
 8013418:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	7a1b      	ldrb	r3, [r3, #8]
 801341e:	041b      	lsls	r3, r3, #16
 8013420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013422:	4313      	orrs	r3, r2
 8013424:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013426:	4b3b      	ldr	r3, [pc, #236]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	689b      	ldr	r3, [r3, #8]
 801342c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801342e:	429a      	cmp	r2, r3
 8013430:	d010      	beq.n	8013454 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013432:	4b38      	ldr	r3, [pc, #224]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013438:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	2100      	movs	r1, #0
 801343e:	4618      	mov	r0, r3
 8013440:	f000 f97c 	bl	801373c <LoRaMacCryptoDeriveMcRootKey>
 8013444:	4603      	mov	r3, r0
 8013446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801344a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801344e:	2b00      	cmp	r3, #0
 8013450:	d005      	beq.n	801345e <LoRaMacCryptoHandleJoinAccept+0xee>
 8013452:	e001      	b.n	8013458 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013454:	2303      	movs	r3, #3
 8013456:	e058      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013458:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801345c:	e055      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801345e:	2004      	movs	r0, #4
 8013460:	f000 f997 	bl	8013792 <LoRaMacCryptoDeriveMcKEKey>
 8013464:	4603      	mov	r3, r0
 8013466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801346a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013472:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013476:	e048      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	7a5b      	ldrb	r3, [r3, #9]
 801347c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	7a9b      	ldrb	r3, [r3, #10]
 8013482:	021b      	lsls	r3, r3, #8
 8013484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013486:	4313      	orrs	r3, r2
 8013488:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	7adb      	ldrb	r3, [r3, #11]
 801348e:	041b      	lsls	r3, r3, #16
 8013490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013492:	4313      	orrs	r3, r2
 8013494:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013496:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801349a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801349c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801349e:	2003      	movs	r0, #3
 80134a0:	f7ff fce2 	bl	8012e68 <DeriveSessionKey10x>
 80134a4:	4603      	mov	r3, r0
 80134a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d002      	beq.n	80134b8 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 80134b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134b6:	e028      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80134b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80134bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80134be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80134c0:	2002      	movs	r0, #2
 80134c2:	f7ff fcd1 	bl	8012e68 <DeriveSessionKey10x>
 80134c6:	4603      	mov	r3, r0
 80134c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80134cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d002      	beq.n	80134da <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80134d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80134d8:	e017      	b.n	801350a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80134da:	4b0e      	ldr	r3, [pc, #56]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	7dfa      	ldrb	r2, [r7, #23]
 80134e0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80134e2:	4b0c      	ldr	r3, [pc, #48]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2200      	movs	r2, #0
 80134e8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80134ea:	4b0a      	ldr	r3, [pc, #40]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f04f 32ff 	mov.w	r2, #4294967295
 80134f2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134f4:	4b07      	ldr	r3, [pc, #28]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f04f 32ff 	mov.w	r2, #4294967295
 80134fc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80134fe:	4b05      	ldr	r3, [pc, #20]	; (8013514 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f04f 32ff 	mov.w	r2, #4294967295
 8013506:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013508:	2300      	movs	r3, #0
}
 801350a:	4618      	mov	r0, r3
 801350c:	374c      	adds	r7, #76	; 0x4c
 801350e:	46bd      	mov	sp, r7
 8013510:	bd90      	pop	{r4, r7, pc}
 8013512:	bf00      	nop
 8013514:	20000dcc 	.word	0x20000dcc

08013518 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b08b      	sub	sp, #44	; 0x2c
 801351c:	af04      	add	r7, sp, #16
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	607b      	str	r3, [r7, #4]
 8013522:	460b      	mov	r3, r1
 8013524:	72fb      	strb	r3, [r7, #11]
 8013526:	4613      	mov	r3, r2
 8013528:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801352a:	2313      	movs	r3, #19
 801352c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801352e:	2303      	movs	r3, #3
 8013530:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d101      	bne.n	801353c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013538:	230a      	movs	r3, #10
 801353a:	e05f      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801353c:	4b31      	ldr	r3, [pc, #196]	; (8013604 <LoRaMacCryptoSecureMessage+0xec>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	429a      	cmp	r2, r3
 8013546:	d201      	bcs.n	801354c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013548:	2306      	movs	r3, #6
 801354a:	e057      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013556:	2302      	movs	r3, #2
 8013558:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801355a:	4b2a      	ldr	r3, [pc, #168]	; (8013604 <LoRaMacCryptoSecureMessage+0xec>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	68fa      	ldr	r2, [r7, #12]
 8013562:	429a      	cmp	r2, r3
 8013564:	d916      	bls.n	8013594 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013570:	b219      	sxth	r1, r3
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	689c      	ldr	r4, [r3, #8]
 8013576:	7dfa      	ldrb	r2, [r7, #23]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	9301      	str	r3, [sp, #4]
 801357c:	2300      	movs	r3, #0
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	4623      	mov	r3, r4
 8013582:	f7ff faa3 	bl	8012acc <PayloadEncrypt>
 8013586:	4603      	mov	r3, r0
 8013588:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801358a:	7dbb      	ldrb	r3, [r7, #22]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d001      	beq.n	8013594 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013590:	7dbb      	ldrb	r3, [r7, #22]
 8013592:	e033      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 fb60 	bl	8013c5a <LoRaMacSerializerData>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135a0:	2311      	movs	r3, #17
 80135a2:	e02b      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80135a4:	2302      	movs	r3, #2
 80135a6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6818      	ldr	r0, [r3, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	791b      	ldrb	r3, [r3, #4]
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	3b04      	subs	r3, #4
 80135b4:	b299      	uxth	r1, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	322c      	adds	r2, #44	; 0x2c
 80135be:	7dfc      	ldrb	r4, [r7, #23]
 80135c0:	9203      	str	r2, [sp, #12]
 80135c2:	68fa      	ldr	r2, [r7, #12]
 80135c4:	9202      	str	r2, [sp, #8]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	2300      	movs	r3, #0
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	2300      	movs	r3, #0
 80135ce:	4622      	mov	r2, r4
 80135d0:	f7ff fb7e 	bl	8012cd0 <ComputeCmacB0>
 80135d4:	4603      	mov	r3, r0
 80135d6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80135d8:	7dbb      	ldrb	r3, [r7, #22]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d001      	beq.n	80135e2 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80135de:	7dbb      	ldrb	r3, [r7, #22]
 80135e0:	e00c      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 fb39 	bl	8013c5a <LoRaMacSerializerData>
 80135e8:	4603      	mov	r3, r0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d001      	beq.n	80135f2 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80135ee:	2311      	movs	r3, #17
 80135f0:	e004      	b.n	80135fc <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80135f2:	4b04      	ldr	r3, [pc, #16]	; (8013604 <LoRaMacCryptoSecureMessage+0xec>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	371c      	adds	r7, #28
 8013600:	46bd      	mov	sp, r7
 8013602:	bd90      	pop	{r4, r7, pc}
 8013604:	20000dcc 	.word	0x20000dcc

08013608 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013608:	b590      	push	{r4, r7, lr}
 801360a:	b08b      	sub	sp, #44	; 0x2c
 801360c:	af04      	add	r7, sp, #16
 801360e:	60b9      	str	r1, [r7, #8]
 8013610:	607b      	str	r3, [r7, #4]
 8013612:	4603      	mov	r3, r0
 8013614:	73fb      	strb	r3, [r7, #15]
 8013616:	4613      	mov	r3, r2
 8013618:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013620:	230a      	movs	r3, #10
 8013622:	e084      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013624:	7bbb      	ldrb	r3, [r7, #14]
 8013626:	6879      	ldr	r1, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	f7ff fcbb 	bl	8012fa4 <CheckFCntDown>
 801362e:	4603      	mov	r3, r0
 8013630:	f083 0301 	eor.w	r3, r3, #1
 8013634:	b2db      	uxtb	r3, r3
 8013636:	2b00      	cmp	r3, #0
 8013638:	d001      	beq.n	801363e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801363a:	2306      	movs	r3, #6
 801363c:	e077      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801363e:	2313      	movs	r3, #19
 8013640:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013642:	2303      	movs	r3, #3
 8013644:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013646:	2302      	movs	r3, #2
 8013648:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801364a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801364c:	f000 f98f 	bl	801396e <LoRaMacParserData>
 8013650:	4603      	mov	r3, r0
 8013652:	2b00      	cmp	r3, #0
 8013654:	d001      	beq.n	801365a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013656:	2310      	movs	r3, #16
 8013658:	e069      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801365a:	f107 0210 	add.w	r2, r7, #16
 801365e:	7bfb      	ldrb	r3, [r7, #15]
 8013660:	4611      	mov	r1, r2
 8013662:	4618      	mov	r0, r3
 8013664:	f7ff fbda 	bl	8012e1c <GetKeyAddrItem>
 8013668:	4603      	mov	r3, r0
 801366a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801366c:	7d7b      	ldrb	r3, [r7, #21]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013672:	7d7b      	ldrb	r3, [r7, #21]
 8013674:	e05b      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	785b      	ldrb	r3, [r3, #1]
 801367a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	789b      	ldrb	r3, [r3, #2]
 8013680:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013684:	689b      	ldr	r3, [r3, #8]
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	429a      	cmp	r2, r3
 801368a:	d001      	beq.n	8013690 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801368c:	2302      	movs	r3, #2
 801368e:	e04e      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	7b1b      	ldrb	r3, [r3, #12]
 8013694:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013698:	b2db      	uxtb	r3, r3
 801369a:	2b00      	cmp	r3, #0
 801369c:	bf14      	ite	ne
 801369e:	2301      	movne	r3, #1
 80136a0:	2300      	moveq	r3, #0
 80136a2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80136a4:	4b24      	ldr	r3, [pc, #144]	; (8013738 <LoRaMacCryptoUnsecureMessage+0x130>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	789b      	ldrb	r3, [r3, #2]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d101      	bne.n	80136b2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80136ae:	2300      	movs	r3, #0
 80136b0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80136b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b4:	6818      	ldr	r0, [r3, #0]
 80136b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b8:	791b      	ldrb	r3, [r3, #4]
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	3b04      	subs	r3, #4
 80136be:	b299      	uxth	r1, r3
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c4:	7dbc      	ldrb	r4, [r7, #22]
 80136c6:	7d3a      	ldrb	r2, [r7, #20]
 80136c8:	9303      	str	r3, [sp, #12]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	9302      	str	r3, [sp, #8]
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	9301      	str	r3, [sp, #4]
 80136d2:	2301      	movs	r3, #1
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	4623      	mov	r3, r4
 80136d8:	f7ff fb38 	bl	8012d4c <VerifyCmacB0>
 80136dc:	4603      	mov	r3, r0
 80136de:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136e0:	7d7b      	ldrb	r3, [r7, #21]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d001      	beq.n	80136ea <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80136e6:	7d7b      	ldrb	r3, [r7, #21]
 80136e8:	e021      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80136ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d101      	bne.n	80136f8 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80136f4:	2302      	movs	r3, #2
 80136f6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013702:	b219      	sxth	r1, r3
 8013704:	7dfa      	ldrb	r2, [r7, #23]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	9301      	str	r3, [sp, #4]
 801370a:	2301      	movs	r3, #1
 801370c:	9300      	str	r3, [sp, #0]
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	f7ff f9dc 	bl	8012acc <PayloadEncrypt>
 8013714:	4603      	mov	r3, r0
 8013716:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013718:	7d7b      	ldrb	r3, [r7, #21]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d001      	beq.n	8013722 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801371e:	7d7b      	ldrb	r3, [r7, #21]
 8013720:	e005      	b.n	801372e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013722:	7bbb      	ldrb	r3, [r7, #14]
 8013724:	6879      	ldr	r1, [r7, #4]
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff fc60 	bl	8012fec <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801372c:	2300      	movs	r3, #0
}
 801372e:	4618      	mov	r0, r3
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	bd90      	pop	{r4, r7, pc}
 8013736:	bf00      	nop
 8013738:	20000dcc 	.word	0x20000dcc

0801373c <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b086      	sub	sp, #24
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	460a      	mov	r2, r1
 8013746:	71fb      	strb	r3, [r7, #7]
 8013748:	4613      	mov	r3, r2
 801374a:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801374c:	79bb      	ldrb	r3, [r7, #6]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d001      	beq.n	8013756 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013752:	230b      	movs	r3, #11
 8013754:	e019      	b.n	801378a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013756:	2300      	movs	r3, #0
 8013758:	60bb      	str	r3, [r7, #8]
 801375a:	f107 030c 	add.w	r3, r7, #12
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	605a      	str	r2, [r3, #4]
 8013764:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013766:	79fb      	ldrb	r3, [r7, #7]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d101      	bne.n	8013770 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 801376c:	2320      	movs	r3, #32
 801376e:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013770:	79b9      	ldrb	r1, [r7, #6]
 8013772:	f107 0308 	add.w	r3, r7, #8
 8013776:	2204      	movs	r2, #4
 8013778:	4618      	mov	r0, r3
 801377a:	f7f8 fc54 	bl	800c026 <SecureElementDeriveAndStoreKey>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d001      	beq.n	8013788 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013784:	230f      	movs	r3, #15
 8013786:	e000      	b.n	801378a <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b086      	sub	sp, #24
 8013796:	af00      	add	r7, sp, #0
 8013798:	4603      	mov	r3, r0
 801379a:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 801379c:	79fb      	ldrb	r3, [r7, #7]
 801379e:	2b04      	cmp	r3, #4
 80137a0:	d001      	beq.n	80137a6 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80137a2:	230b      	movs	r3, #11
 80137a4:	e014      	b.n	80137d0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 80137a6:	2300      	movs	r3, #0
 80137a8:	60bb      	str	r3, [r7, #8]
 80137aa:	f107 030c 	add.w	r3, r7, #12
 80137ae:	2200      	movs	r2, #0
 80137b0:	601a      	str	r2, [r3, #0]
 80137b2:	605a      	str	r2, [r3, #4]
 80137b4:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80137b6:	79f9      	ldrb	r1, [r7, #7]
 80137b8:	f107 0308 	add.w	r3, r7, #8
 80137bc:	227f      	movs	r2, #127	; 0x7f
 80137be:	4618      	mov	r0, r3
 80137c0:	f7f8 fc31 	bl	800c026 <SecureElementDeriveAndStoreKey>
 80137c4:	4603      	mov	r3, r0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80137ca:	230f      	movs	r3, #15
 80137cc:	e000      	b.n	80137d0 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80137ce:	2300      	movs	r3, #0
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3718      	adds	r7, #24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <LoRaMacParserJoinAccept+0x16>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d101      	bne.n	80137f2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80137ee:	2302      	movs	r3, #2
 80137f0:	e0b9      	b.n	8013966 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	89fb      	ldrh	r3, [r7, #14]
 80137fc:	1c59      	adds	r1, r3, #1
 80137fe:	81f9      	strh	r1, [r7, #14]
 8013800:	4413      	add	r3, r2
 8013802:	781a      	ldrb	r2, [r3, #0]
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	1d98      	adds	r0, r3, #6
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	89fb      	ldrh	r3, [r7, #14]
 8013812:	4413      	add	r3, r2
 8013814:	2203      	movs	r2, #3
 8013816:	4619      	mov	r1, r3
 8013818:	f002 fe31 	bl	801647e <memcpy1>
    bufItr = bufItr + 3;
 801381c:	89fb      	ldrh	r3, [r7, #14]
 801381e:	3303      	adds	r3, #3
 8013820:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f103 0009 	add.w	r0, r3, #9
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	89fb      	ldrh	r3, [r7, #14]
 801382e:	4413      	add	r3, r2
 8013830:	2203      	movs	r2, #3
 8013832:	4619      	mov	r1, r3
 8013834:	f002 fe23 	bl	801647e <memcpy1>
    bufItr = bufItr + 3;
 8013838:	89fb      	ldrh	r3, [r7, #14]
 801383a:	3303      	adds	r3, #3
 801383c:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	89fb      	ldrh	r3, [r7, #14]
 8013844:	1c59      	adds	r1, r3, #1
 8013846:	81f9      	strh	r1, [r7, #14]
 8013848:	4413      	add	r3, r2
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	461a      	mov	r2, r3
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	89fb      	ldrh	r3, [r7, #14]
 8013858:	1c59      	adds	r1, r3, #1
 801385a:	81f9      	strh	r1, [r7, #14]
 801385c:	4413      	add	r3, r2
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	021a      	lsls	r2, r3, #8
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	431a      	orrs	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	89fb      	ldrh	r3, [r7, #14]
 8013872:	1c59      	adds	r1, r3, #1
 8013874:	81f9      	strh	r1, [r7, #14]
 8013876:	4413      	add	r3, r2
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	041a      	lsls	r2, r3, #16
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	431a      	orrs	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	1c59      	adds	r1, r3, #1
 801388e:	81f9      	strh	r1, [r7, #14]
 8013890:	4413      	add	r3, r2
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	061a      	lsls	r2, r3, #24
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	431a      	orrs	r2, r3
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	89fb      	ldrh	r3, [r7, #14]
 80138a6:	1c59      	adds	r1, r3, #1
 80138a8:	81f9      	strh	r1, [r7, #14]
 80138aa:	4413      	add	r3, r2
 80138ac:	781a      	ldrb	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681a      	ldr	r2, [r3, #0]
 80138b6:	89fb      	ldrh	r3, [r7, #14]
 80138b8:	1c59      	adds	r1, r3, #1
 80138ba:	81f9      	strh	r1, [r7, #14]
 80138bc:	4413      	add	r3, r2
 80138be:	781a      	ldrb	r2, [r3, #0]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	791b      	ldrb	r3, [r3, #4]
 80138c8:	1f1a      	subs	r2, r3, #4
 80138ca:	89fb      	ldrh	r3, [r7, #14]
 80138cc:	1ad3      	subs	r3, r2, r3
 80138ce:	2b10      	cmp	r3, #16
 80138d0:	d10e      	bne.n	80138f0 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f103 0012 	add.w	r0, r3, #18
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681a      	ldr	r2, [r3, #0]
 80138dc:	89fb      	ldrh	r3, [r7, #14]
 80138de:	4413      	add	r3, r2
 80138e0:	2210      	movs	r2, #16
 80138e2:	4619      	mov	r1, r3
 80138e4:	f002 fdcb 	bl	801647e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80138e8:	89fb      	ldrh	r3, [r7, #14]
 80138ea:	3310      	adds	r3, #16
 80138ec:	81fb      	strh	r3, [r7, #14]
 80138ee:	e008      	b.n	8013902 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	791b      	ldrb	r3, [r3, #4]
 80138f4:	1f1a      	subs	r2, r3, #4
 80138f6:	89fb      	ldrh	r3, [r7, #14]
 80138f8:	1ad3      	subs	r3, r2, r3
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	dd01      	ble.n	8013902 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80138fe:	2301      	movs	r3, #1
 8013900:	e031      	b.n	8013966 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	89fb      	ldrh	r3, [r7, #14]
 8013908:	1c59      	adds	r1, r3, #1
 801390a:	81f9      	strh	r1, [r7, #14]
 801390c:	4413      	add	r3, r2
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	461a      	mov	r2, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	89fb      	ldrh	r3, [r7, #14]
 801391c:	1c59      	adds	r1, r3, #1
 801391e:	81f9      	strh	r1, [r7, #14]
 8013920:	4413      	add	r3, r2
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	021a      	lsls	r2, r3, #8
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801392a:	431a      	orrs	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	89fb      	ldrh	r3, [r7, #14]
 8013936:	1c59      	adds	r1, r3, #1
 8013938:	81f9      	strh	r1, [r7, #14]
 801393a:	4413      	add	r3, r2
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	041a      	lsls	r2, r3, #16
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013944:	431a      	orrs	r2, r3
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	89fb      	ldrh	r3, [r7, #14]
 8013950:	1c59      	adds	r1, r3, #1
 8013952:	81f9      	strh	r1, [r7, #14]
 8013954:	4413      	add	r3, r2
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	061a      	lsls	r2, r3, #24
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395e:	431a      	orrs	r2, r3
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013964:	2300      	movs	r3, #0
}
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801396e:	b580      	push	{r7, lr}
 8013970:	b084      	sub	sp, #16
 8013972:	af00      	add	r7, sp, #0
 8013974:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d003      	beq.n	8013984 <LoRaMacParserData+0x16>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d101      	bne.n	8013988 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013984:	2302      	movs	r3, #2
 8013986:	e0e2      	b.n	8013b4e <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8013988:	2300      	movs	r3, #0
 801398a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	89fb      	ldrh	r3, [r7, #14]
 8013992:	1c59      	adds	r1, r3, #1
 8013994:	81f9      	strh	r1, [r7, #14]
 8013996:	4413      	add	r3, r2
 8013998:	781a      	ldrb	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	89fb      	ldrh	r3, [r7, #14]
 80139a4:	1c59      	adds	r1, r3, #1
 80139a6:	81f9      	strh	r1, [r7, #14]
 80139a8:	4413      	add	r3, r2
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	461a      	mov	r2, r3
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	89fb      	ldrh	r3, [r7, #14]
 80139b8:	1c59      	adds	r1, r3, #1
 80139ba:	81f9      	strh	r1, [r7, #14]
 80139bc:	4413      	add	r3, r2
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	021a      	lsls	r2, r3, #8
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	431a      	orrs	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	89fb      	ldrh	r3, [r7, #14]
 80139d2:	1c59      	adds	r1, r3, #1
 80139d4:	81f9      	strh	r1, [r7, #14]
 80139d6:	4413      	add	r3, r2
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	041a      	lsls	r2, r3, #16
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	431a      	orrs	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	89fb      	ldrh	r3, [r7, #14]
 80139ec:	1c59      	adds	r1, r3, #1
 80139ee:	81f9      	strh	r1, [r7, #14]
 80139f0:	4413      	add	r3, r2
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	061a      	lsls	r2, r3, #24
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	689b      	ldr	r3, [r3, #8]
 80139fa:	431a      	orrs	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	89fb      	ldrh	r3, [r7, #14]
 8013a06:	1c59      	adds	r1, r3, #1
 8013a08:	81f9      	strh	r1, [r7, #14]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	781a      	ldrb	r2, [r3, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681a      	ldr	r2, [r3, #0]
 8013a16:	89fb      	ldrh	r3, [r7, #14]
 8013a18:	1c59      	adds	r1, r3, #1
 8013a1a:	81f9      	strh	r1, [r7, #14]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	89fb      	ldrh	r3, [r7, #14]
 8013a2c:	1c59      	adds	r1, r3, #1
 8013a2e:	81f9      	strh	r1, [r7, #14]
 8013a30:	4413      	add	r3, r2
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	0219      	lsls	r1, r3, #8
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	89db      	ldrh	r3, [r3, #14]
 8013a3a:	b21a      	sxth	r2, r3
 8013a3c:	b20b      	sxth	r3, r1
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	b21b      	sxth	r3, r3
 8013a42:	b29a      	uxth	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f103 0010 	add.w	r0, r3, #16
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	89fb      	ldrh	r3, [r7, #14]
 8013a54:	18d1      	adds	r1, r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	7b1b      	ldrb	r3, [r3, #12]
 8013a5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a5e:	b2db      	uxtb	r3, r3
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	461a      	mov	r2, r3
 8013a64:	f002 fd0b 	bl	801647e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	7b1b      	ldrb	r3, [r3, #12]
 8013a6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013a70:	b2db      	uxtb	r3, r3
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	89fb      	ldrh	r3, [r7, #14]
 8013a76:	4413      	add	r3, r2
 8013a78:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	791b      	ldrb	r3, [r3, #4]
 8013a8e:	461a      	mov	r2, r3
 8013a90:	89fb      	ldrh	r3, [r7, #14]
 8013a92:	1ad3      	subs	r3, r2, r3
 8013a94:	2b04      	cmp	r3, #4
 8013a96:	dd28      	ble.n	8013aea <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	89fb      	ldrh	r3, [r7, #14]
 8013a9e:	1c59      	adds	r1, r3, #1
 8013aa0:	81f9      	strh	r1, [r7, #14]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	781a      	ldrb	r2, [r3, #0]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	791a      	ldrb	r2, [r3, #4]
 8013ab0:	89fb      	ldrh	r3, [r7, #14]
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	1ad3      	subs	r3, r2, r3
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	3b04      	subs	r3, #4
 8013aba:	b2da      	uxtb	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	89fb      	ldrh	r3, [r7, #14]
 8013acc:	18d1      	adds	r1, r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	f002 fcd1 	bl	801647e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	89fb      	ldrh	r3, [r7, #14]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	791b      	ldrb	r3, [r3, #4]
 8013af2:	3b04      	subs	r3, #4
 8013af4:	4413      	add	r3, r2
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	461a      	mov	r2, r3
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6819      	ldr	r1, [r3, #0]
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	791b      	ldrb	r3, [r3, #4]
 8013b0a:	3b03      	subs	r3, #3
 8013b0c:	440b      	add	r3, r1
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	021b      	lsls	r3, r3, #8
 8013b12:	431a      	orrs	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6819      	ldr	r1, [r3, #0]
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	791b      	ldrb	r3, [r3, #4]
 8013b24:	3b02      	subs	r3, #2
 8013b26:	440b      	add	r3, r1
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	041b      	lsls	r3, r3, #16
 8013b2c:	431a      	orrs	r2, r3
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6819      	ldr	r1, [r3, #0]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	791b      	ldrb	r3, [r3, #4]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	440b      	add	r3, r1
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	061b      	lsls	r3, r3, #24
 8013b46:	431a      	orrs	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}

08013b56 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013b56:	b580      	push	{r7, lr}
 8013b58:	b084      	sub	sp, #16
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d003      	beq.n	8013b6c <LoRaMacSerializerJoinRequest+0x16>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d101      	bne.n	8013b70 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	e070      	b.n	8013c52 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013b70:	2300      	movs	r3, #0
 8013b72:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	791b      	ldrb	r3, [r3, #4]
 8013b78:	2b16      	cmp	r3, #22
 8013b7a:	d801      	bhi.n	8013b80 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013b7c:	2302      	movs	r3, #2
 8013b7e:	e068      	b.n	8013c52 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	89fb      	ldrh	r3, [r7, #14]
 8013b86:	1c59      	adds	r1, r3, #1
 8013b88:	81f9      	strh	r1, [r7, #14]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	7952      	ldrb	r2, [r2, #5]
 8013b90:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	89fb      	ldrh	r3, [r7, #14]
 8013b98:	18d0      	adds	r0, r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	3306      	adds	r3, #6
 8013b9e:	2208      	movs	r2, #8
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	f002 fc87 	bl	80164b4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013ba6:	89fb      	ldrh	r3, [r7, #14]
 8013ba8:	3308      	adds	r3, #8
 8013baa:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	89fb      	ldrh	r3, [r7, #14]
 8013bb2:	18d0      	adds	r0, r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	330e      	adds	r3, #14
 8013bb8:	2208      	movs	r2, #8
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f002 fc7a 	bl	80164b4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013bc0:	89fb      	ldrh	r3, [r7, #14]
 8013bc2:	3308      	adds	r3, #8
 8013bc4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	8ad9      	ldrh	r1, [r3, #22]
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	89fb      	ldrh	r3, [r7, #14]
 8013bd0:	1c58      	adds	r0, r3, #1
 8013bd2:	81f8      	strh	r0, [r7, #14]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	b2ca      	uxtb	r2, r1
 8013bd8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	8adb      	ldrh	r3, [r3, #22]
 8013bde:	0a1b      	lsrs	r3, r3, #8
 8013be0:	b299      	uxth	r1, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681a      	ldr	r2, [r3, #0]
 8013be6:	89fb      	ldrh	r3, [r7, #14]
 8013be8:	1c58      	adds	r0, r3, #1
 8013bea:	81f8      	strh	r0, [r7, #14]
 8013bec:	4413      	add	r3, r2
 8013bee:	b2ca      	uxtb	r2, r1
 8013bf0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6999      	ldr	r1, [r3, #24]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	89fb      	ldrh	r3, [r7, #14]
 8013bfc:	1c58      	adds	r0, r3, #1
 8013bfe:	81f8      	strh	r0, [r7, #14]
 8013c00:	4413      	add	r3, r2
 8013c02:	b2ca      	uxtb	r2, r1
 8013c04:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	699b      	ldr	r3, [r3, #24]
 8013c0a:	0a19      	lsrs	r1, r3, #8
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	89fb      	ldrh	r3, [r7, #14]
 8013c12:	1c58      	adds	r0, r3, #1
 8013c14:	81f8      	strh	r0, [r7, #14]
 8013c16:	4413      	add	r3, r2
 8013c18:	b2ca      	uxtb	r2, r1
 8013c1a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	699b      	ldr	r3, [r3, #24]
 8013c20:	0c19      	lsrs	r1, r3, #16
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	89fb      	ldrh	r3, [r7, #14]
 8013c28:	1c58      	adds	r0, r3, #1
 8013c2a:	81f8      	strh	r0, [r7, #14]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	b2ca      	uxtb	r2, r1
 8013c30:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	699b      	ldr	r3, [r3, #24]
 8013c36:	0e19      	lsrs	r1, r3, #24
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681a      	ldr	r2, [r3, #0]
 8013c3c:	89fb      	ldrh	r3, [r7, #14]
 8013c3e:	1c58      	adds	r0, r3, #1
 8013c40:	81f8      	strh	r0, [r7, #14]
 8013c42:	4413      	add	r3, r2
 8013c44:	b2ca      	uxtb	r2, r1
 8013c46:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013c48:	89fb      	ldrh	r3, [r7, #14]
 8013c4a:	b2da      	uxtb	r2, r3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b084      	sub	sp, #16
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d003      	beq.n	8013c70 <LoRaMacSerializerData+0x16>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013c70:	2301      	movs	r3, #1
 8013c72:	e0e5      	b.n	8013e40 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013c78:	2308      	movs	r3, #8
 8013c7a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	7b1b      	ldrb	r3, [r3, #12]
 8013c80:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c84:	b2db      	uxtb	r3, r3
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	89bb      	ldrh	r3, [r7, #12]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013c98:	89bb      	ldrh	r3, [r7, #12]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	89bb      	ldrh	r3, [r7, #12]
 8013ca8:	4413      	add	r3, r2
 8013caa:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013cac:	89bb      	ldrh	r3, [r7, #12]
 8013cae:	3304      	adds	r3, #4
 8013cb0:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	791b      	ldrb	r3, [r3, #4]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	89ba      	ldrh	r2, [r7, #12]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d901      	bls.n	8013cc2 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013cbe:	2302      	movs	r3, #2
 8013cc0:	e0be      	b.n	8013e40 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	89fb      	ldrh	r3, [r7, #14]
 8013cc8:	1c59      	adds	r1, r3, #1
 8013cca:	81f9      	strh	r1, [r7, #14]
 8013ccc:	4413      	add	r3, r2
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	7952      	ldrb	r2, [r2, #5]
 8013cd2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6899      	ldr	r1, [r3, #8]
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	89fb      	ldrh	r3, [r7, #14]
 8013cde:	1c58      	adds	r0, r3, #1
 8013ce0:	81f8      	strh	r0, [r7, #14]
 8013ce2:	4413      	add	r3, r2
 8013ce4:	b2ca      	uxtb	r2, r1
 8013ce6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	0a19      	lsrs	r1, r3, #8
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	89fb      	ldrh	r3, [r7, #14]
 8013cf4:	1c58      	adds	r0, r3, #1
 8013cf6:	81f8      	strh	r0, [r7, #14]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	b2ca      	uxtb	r2, r1
 8013cfc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	0c19      	lsrs	r1, r3, #16
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	89fb      	ldrh	r3, [r7, #14]
 8013d0a:	1c58      	adds	r0, r3, #1
 8013d0c:	81f8      	strh	r0, [r7, #14]
 8013d0e:	4413      	add	r3, r2
 8013d10:	b2ca      	uxtb	r2, r1
 8013d12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	689b      	ldr	r3, [r3, #8]
 8013d18:	0e19      	lsrs	r1, r3, #24
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681a      	ldr	r2, [r3, #0]
 8013d1e:	89fb      	ldrh	r3, [r7, #14]
 8013d20:	1c58      	adds	r0, r3, #1
 8013d22:	81f8      	strh	r0, [r7, #14]
 8013d24:	4413      	add	r3, r2
 8013d26:	b2ca      	uxtb	r2, r1
 8013d28:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	89fb      	ldrh	r3, [r7, #14]
 8013d30:	1c59      	adds	r1, r3, #1
 8013d32:	81f9      	strh	r1, [r7, #14]
 8013d34:	4413      	add	r3, r2
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	7b12      	ldrb	r2, [r2, #12]
 8013d3a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	89d9      	ldrh	r1, [r3, #14]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	89fb      	ldrh	r3, [r7, #14]
 8013d46:	1c58      	adds	r0, r3, #1
 8013d48:	81f8      	strh	r0, [r7, #14]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	b2ca      	uxtb	r2, r1
 8013d4e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	89db      	ldrh	r3, [r3, #14]
 8013d54:	0a1b      	lsrs	r3, r3, #8
 8013d56:	b299      	uxth	r1, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	89fb      	ldrh	r3, [r7, #14]
 8013d5e:	1c58      	adds	r0, r3, #1
 8013d60:	81f8      	strh	r0, [r7, #14]
 8013d62:	4413      	add	r3, r2
 8013d64:	b2ca      	uxtb	r2, r1
 8013d66:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	89fb      	ldrh	r3, [r7, #14]
 8013d6e:	18d0      	adds	r0, r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f103 0110 	add.w	r1, r3, #16
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	7b1b      	ldrb	r3, [r3, #12]
 8013d7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	461a      	mov	r2, r3
 8013d84:	f002 fb7b 	bl	801647e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	7b1b      	ldrb	r3, [r3, #12]
 8013d8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013d90:	b2db      	uxtb	r3, r3
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	89fb      	ldrh	r3, [r7, #14]
 8013d96:	4413      	add	r3, r2
 8013d98:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d009      	beq.n	8013db8 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	89fb      	ldrh	r3, [r7, #14]
 8013daa:	1c59      	adds	r1, r3, #1
 8013dac:	81f9      	strh	r1, [r7, #14]
 8013dae:	4413      	add	r3, r2
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013db6:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	89fb      	ldrh	r3, [r7, #14]
 8013dbe:	18d0      	adds	r0, r2, r3
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	461a      	mov	r2, r3
 8013dce:	f002 fb56 	bl	801647e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	89fb      	ldrh	r3, [r7, #14]
 8013ddc:	4413      	add	r3, r2
 8013dde:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	1c58      	adds	r0, r3, #1
 8013dec:	81f8      	strh	r0, [r7, #14]
 8013dee:	4413      	add	r3, r2
 8013df0:	b2ca      	uxtb	r2, r1
 8013df2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df8:	0a19      	lsrs	r1, r3, #8
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	89fb      	ldrh	r3, [r7, #14]
 8013e00:	1c58      	adds	r0, r3, #1
 8013e02:	81f8      	strh	r0, [r7, #14]
 8013e04:	4413      	add	r3, r2
 8013e06:	b2ca      	uxtb	r2, r1
 8013e08:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0e:	0c19      	lsrs	r1, r3, #16
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681a      	ldr	r2, [r3, #0]
 8013e14:	89fb      	ldrh	r3, [r7, #14]
 8013e16:	1c58      	adds	r0, r3, #1
 8013e18:	81f8      	strh	r0, [r7, #14]
 8013e1a:	4413      	add	r3, r2
 8013e1c:	b2ca      	uxtb	r2, r1
 8013e1e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e24:	0e19      	lsrs	r1, r3, #24
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	89fb      	ldrh	r3, [r7, #14]
 8013e2c:	1c58      	adds	r0, r3, #1
 8013e2e:	81f8      	strh	r0, [r7, #14]
 8013e30:	4413      	add	r3, r2
 8013e32:	b2ca      	uxtb	r2, r1
 8013e34:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013e36:	89fb      	ldrh	r3, [r7, #14]
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013e3e:	2300      	movs	r3, #0
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	4603      	mov	r3, r0
 8013e50:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e52:	79fb      	ldrb	r3, [r7, #7]
 8013e54:	2b05      	cmp	r3, #5
 8013e56:	d101      	bne.n	8013e5c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013e58:	2301      	movs	r3, #1
 8013e5a:	e000      	b.n	8013e5e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013e5c:	2300      	movs	r3, #0
        }
    }
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	370c      	adds	r7, #12
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bc80      	pop	{r7}
 8013e66:	4770      	bx	lr

08013e68 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	4603      	mov	r3, r0
 8013e70:	6039      	str	r1, [r7, #0]
 8013e72:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013e74:	2300      	movs	r3, #0
 8013e76:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013e78:	79fb      	ldrb	r3, [r7, #7]
 8013e7a:	2b05      	cmp	r3, #5
 8013e7c:	d105      	bne.n	8013e8a <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013e7e:	6838      	ldr	r0, [r7, #0]
 8013e80:	f001 f992 	bl	80151a8 <RegionEU868GetPhyParam>
 8013e84:	4603      	mov	r3, r0
 8013e86:	60fb      	str	r3, [r7, #12]
 8013e88:	e001      	b.n	8013e8e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	60fb      	str	r3, [r7, #12]
 8013e8e:	2300      	movs	r3, #0
 8013e90:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b082      	sub	sp, #8
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	6039      	str	r1, [r7, #0]
 8013ea4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ea6:	79fb      	ldrb	r3, [r7, #7]
 8013ea8:	2b05      	cmp	r3, #5
 8013eaa:	d103      	bne.n	8013eb4 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8013eac:	6838      	ldr	r0, [r7, #0]
 8013eae:	f001 fac5 	bl	801543c <RegionEU868SetBandTxDone>
 8013eb2:	e000      	b.n	8013eb6 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013eb4:	bf00      	nop
        }
    }
}
 8013eb6:	3708      	adds	r7, #8
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	6039      	str	r1, [r7, #0]
 8013ec6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ec8:	79fb      	ldrb	r3, [r7, #7]
 8013eca:	2b05      	cmp	r3, #5
 8013ecc:	d103      	bne.n	8013ed6 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8013ece:	6838      	ldr	r0, [r7, #0]
 8013ed0:	f001 fae0 	bl	8015494 <RegionEU868InitDefaults>
 8013ed4:	e000      	b.n	8013ed8 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013ed6:	bf00      	nop
        }
    }
}
 8013ed8:	bf00      	nop
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	6039      	str	r1, [r7, #0]
 8013eea:	71fb      	strb	r3, [r7, #7]
 8013eec:	4613      	mov	r3, r2
 8013eee:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013ef0:	79fb      	ldrb	r3, [r7, #7]
 8013ef2:	2b05      	cmp	r3, #5
 8013ef4:	d106      	bne.n	8013f04 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013ef6:	79bb      	ldrb	r3, [r7, #6]
 8013ef8:	4619      	mov	r1, r3
 8013efa:	6838      	ldr	r0, [r7, #0]
 8013efc:	f001 fb66 	bl	80155cc <RegionEU868Verify>
 8013f00:	4603      	mov	r3, r0
 8013f02:	e000      	b.n	8013f06 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8013f04:	2300      	movs	r3, #0
        }
    }
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b082      	sub	sp, #8
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	4603      	mov	r3, r0
 8013f16:	6039      	str	r1, [r7, #0]
 8013f18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f1a:	79fb      	ldrb	r3, [r7, #7]
 8013f1c:	2b05      	cmp	r3, #5
 8013f1e:	d103      	bne.n	8013f28 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8013f20:	6838      	ldr	r0, [r7, #0]
 8013f22:	f001 fbcf 	bl	80156c4 <RegionEU868ApplyCFList>
 8013f26:	e000      	b.n	8013f2a <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013f28:	bf00      	nop
        }
    }
}
 8013f2a:	bf00      	nop
 8013f2c:	3708      	adds	r7, #8
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}

08013f32 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013f32:	b580      	push	{r7, lr}
 8013f34:	b082      	sub	sp, #8
 8013f36:	af00      	add	r7, sp, #0
 8013f38:	4603      	mov	r3, r0
 8013f3a:	6039      	str	r1, [r7, #0]
 8013f3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013f3e:	79fb      	ldrb	r3, [r7, #7]
 8013f40:	2b05      	cmp	r3, #5
 8013f42:	d104      	bne.n	8013f4e <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013f44:	6838      	ldr	r0, [r7, #0]
 8013f46:	f001 fc31 	bl	80157ac <RegionEU868ChanMaskSet>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	e000      	b.n	8013f50 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013f4e:	2300      	movs	r3, #0
        }
    }
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3708      	adds	r7, #8
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	603b      	str	r3, [r7, #0]
 8013f60:	4603      	mov	r3, r0
 8013f62:	71fb      	strb	r3, [r7, #7]
 8013f64:	460b      	mov	r3, r1
 8013f66:	71bb      	strb	r3, [r7, #6]
 8013f68:	4613      	mov	r3, r2
 8013f6a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013f6c:	79fb      	ldrb	r3, [r7, #7]
 8013f6e:	2b05      	cmp	r3, #5
 8013f70:	d107      	bne.n	8013f82 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013f72:	7979      	ldrb	r1, [r7, #5]
 8013f74:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	683a      	ldr	r2, [r7, #0]
 8013f7c:	f001 fc40 	bl	8015800 <RegionEU868ComputeRxWindowParameters>
 8013f80:	e000      	b.n	8013f84 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013f82:	bf00      	nop
        }
    }
}
 8013f84:	bf00      	nop
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b084      	sub	sp, #16
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	4603      	mov	r3, r0
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	607a      	str	r2, [r7, #4]
 8013f98:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013f9a:	7bfb      	ldrb	r3, [r7, #15]
 8013f9c:	2b05      	cmp	r3, #5
 8013f9e:	d105      	bne.n	8013fac <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013fa0:	6879      	ldr	r1, [r7, #4]
 8013fa2:	68b8      	ldr	r0, [r7, #8]
 8013fa4:	f001 fc86 	bl	80158b4 <RegionEU868RxConfig>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	e000      	b.n	8013fae <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013fac:	2300      	movs	r3, #0
        }
    }
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b084      	sub	sp, #16
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	603b      	str	r3, [r7, #0]
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013fc6:	7bfb      	ldrb	r3, [r7, #15]
 8013fc8:	2b05      	cmp	r3, #5
 8013fca:	d106      	bne.n	8013fda <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013fcc:	683a      	ldr	r2, [r7, #0]
 8013fce:	6879      	ldr	r1, [r7, #4]
 8013fd0:	68b8      	ldr	r0, [r7, #8]
 8013fd2:	f001 fd3f 	bl	8015a54 <RegionEU868TxConfig>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	e000      	b.n	8013fdc <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013fda:	2300      	movs	r3, #0
        }
    }
}
 8013fdc:	4618      	mov	r0, r3
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af02      	add	r7, sp, #8
 8013fea:	60b9      	str	r1, [r7, #8]
 8013fec:	607a      	str	r2, [r7, #4]
 8013fee:	603b      	str	r3, [r7, #0]
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013ff4:	7bfb      	ldrb	r3, [r7, #15]
 8013ff6:	2b05      	cmp	r3, #5
 8013ff8:	d109      	bne.n	801400e <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	6879      	ldr	r1, [r7, #4]
 8014004:	68b8      	ldr	r0, [r7, #8]
 8014006:	f001 fdf5 	bl	8015bf4 <RegionEU868LinkAdrReq>
 801400a:	4603      	mov	r3, r0
 801400c:	e000      	b.n	8014010 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801400e:	2300      	movs	r3, #0
        }
    }
}
 8014010:	4618      	mov	r0, r3
 8014012:	3710      	adds	r7, #16
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	4603      	mov	r3, r0
 8014020:	6039      	str	r1, [r7, #0]
 8014022:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014024:	79fb      	ldrb	r3, [r7, #7]
 8014026:	2b05      	cmp	r3, #5
 8014028:	d104      	bne.n	8014034 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801402a:	6838      	ldr	r0, [r7, #0]
 801402c:	f001 ff04 	bl	8015e38 <RegionEU868RxParamSetupReq>
 8014030:	4603      	mov	r3, r0
 8014032:	e000      	b.n	8014036 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014034:	2300      	movs	r3, #0
        }
    }
}
 8014036:	4618      	mov	r0, r3
 8014038:	3708      	adds	r7, #8
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}

0801403e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801403e:	b580      	push	{r7, lr}
 8014040:	b082      	sub	sp, #8
 8014042:	af00      	add	r7, sp, #0
 8014044:	4603      	mov	r3, r0
 8014046:	6039      	str	r1, [r7, #0]
 8014048:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	2b05      	cmp	r3, #5
 801404e:	d104      	bne.n	801405a <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8014050:	6838      	ldr	r0, [r7, #0]
 8014052:	f001 ff2f 	bl	8015eb4 <RegionEU868NewChannelReq>
 8014056:	4603      	mov	r3, r0
 8014058:	e000      	b.n	801405c <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801405a:	2300      	movs	r3, #0
        }
    }
}
 801405c:	4618      	mov	r0, r3
 801405e:	3708      	adds	r7, #8
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b082      	sub	sp, #8
 8014068:	af00      	add	r7, sp, #0
 801406a:	4603      	mov	r3, r0
 801406c:	6039      	str	r1, [r7, #0]
 801406e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014070:	79fb      	ldrb	r3, [r7, #7]
 8014072:	2b05      	cmp	r3, #5
 8014074:	d104      	bne.n	8014080 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014076:	6838      	ldr	r0, [r7, #0]
 8014078:	f001 ff7a 	bl	8015f70 <RegionEU868TxParamSetupReq>
 801407c:	4603      	mov	r3, r0
 801407e:	e000      	b.n	8014082 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014080:	2300      	movs	r3, #0
        }
    }
}
 8014082:	4618      	mov	r0, r3
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b082      	sub	sp, #8
 801408e:	af00      	add	r7, sp, #0
 8014090:	4603      	mov	r3, r0
 8014092:	6039      	str	r1, [r7, #0]
 8014094:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	2b05      	cmp	r3, #5
 801409a:	d104      	bne.n	80140a6 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801409c:	6838      	ldr	r0, [r7, #0]
 801409e:	f001 ff73 	bl	8015f88 <RegionEU868DlChannelReq>
 80140a2:	4603      	mov	r3, r0
 80140a4:	e000      	b.n	80140a8 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80140a6:	2300      	movs	r3, #0
        }
    }
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	71fb      	strb	r3, [r7, #7]
 80140ba:	460b      	mov	r3, r1
 80140bc:	71bb      	strb	r3, [r7, #6]
 80140be:	4613      	mov	r3, r2
 80140c0:	717b      	strb	r3, [r7, #5]
    switch( region )
 80140c2:	79fb      	ldrb	r3, [r7, #7]
 80140c4:	2b05      	cmp	r3, #5
 80140c6:	d108      	bne.n	80140da <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80140c8:	797a      	ldrb	r2, [r7, #5]
 80140ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80140ce:	4611      	mov	r1, r2
 80140d0:	4618      	mov	r0, r3
 80140d2:	f001 ff9d 	bl	8016010 <RegionEU868AlternateDr>
 80140d6:	4603      	mov	r3, r0
 80140d8:	e000      	b.n	80140dc <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80140da:	2300      	movs	r3, #0
        }
    }
}
 80140dc:	4618      	mov	r0, r3
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60b9      	str	r1, [r7, #8]
 80140ec:	607a      	str	r2, [r7, #4]
 80140ee:	603b      	str	r3, [r7, #0]
 80140f0:	4603      	mov	r3, r0
 80140f2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80140f4:	7bfb      	ldrb	r3, [r7, #15]
 80140f6:	2b05      	cmp	r3, #5
 80140f8:	d107      	bne.n	801410a <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	683a      	ldr	r2, [r7, #0]
 80140fe:	6879      	ldr	r1, [r7, #4]
 8014100:	68b8      	ldr	r0, [r7, #8]
 8014102:	f001 ff95 	bl	8016030 <RegionEU868NextChannel>
 8014106:	4603      	mov	r3, r0
 8014108:	e000      	b.n	801410c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801410a:	2309      	movs	r3, #9
        }
    }
}
 801410c:	4618      	mov	r0, r3
 801410e:	3710      	adds	r7, #16
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	4603      	mov	r3, r0
 801411c:	6039      	str	r1, [r7, #0]
 801411e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014120:	79fb      	ldrb	r3, [r7, #7]
 8014122:	2b05      	cmp	r3, #5
 8014124:	d103      	bne.n	801412e <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8014126:	6838      	ldr	r0, [r7, #0]
 8014128:	f002 f8fa 	bl	8016320 <RegionEU868SetContinuousWave>
 801412c:	e000      	b.n	8014130 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801412e:	bf00      	nop
        }
    }
}
 8014130:	bf00      	nop
 8014132:	3708      	adds	r7, #8
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014138:	b590      	push	{r4, r7, lr}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
 801413e:	4604      	mov	r4, r0
 8014140:	4608      	mov	r0, r1
 8014142:	4611      	mov	r1, r2
 8014144:	461a      	mov	r2, r3
 8014146:	4623      	mov	r3, r4
 8014148:	71fb      	strb	r3, [r7, #7]
 801414a:	4603      	mov	r3, r0
 801414c:	71bb      	strb	r3, [r7, #6]
 801414e:	460b      	mov	r3, r1
 8014150:	717b      	strb	r3, [r7, #5]
 8014152:	4613      	mov	r3, r2
 8014154:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014156:	79fb      	ldrb	r3, [r7, #7]
 8014158:	2b05      	cmp	r3, #5
 801415a:	d109      	bne.n	8014170 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801415c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014160:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014164:	79bb      	ldrb	r3, [r7, #6]
 8014166:	4618      	mov	r0, r3
 8014168:	f002 f928 	bl	80163bc <RegionEU868ApplyDrOffset>
 801416c:	4603      	mov	r3, r0
 801416e:	e000      	b.n	8014172 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014170:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014172:	4618      	mov	r0, r3
 8014174:	370c      	adds	r7, #12
 8014176:	46bd      	mov	sp, r7
 8014178:	bd90      	pop	{r4, r7, pc}
	...

0801417c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801417c:	b480      	push	{r7}
 801417e:	b083      	sub	sp, #12
 8014180:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014182:	4b04      	ldr	r3, [pc, #16]	; (8014194 <RegionGetVersion+0x18>)
 8014184:	607b      	str	r3, [r7, #4]

    return version;
 8014186:	687b      	ldr	r3, [r7, #4]
}
 8014188:	4618      	mov	r0, r3
 801418a:	370c      	adds	r7, #12
 801418c:	46bd      	mov	sp, r7
 801418e:	bc80      	pop	{r7}
 8014190:	4770      	bx	lr
 8014192:	bf00      	nop
 8014194:	01000300 	.word	0x01000300

08014198 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014198:	b480      	push	{r7}
 801419a:	b087      	sub	sp, #28
 801419c:	af00      	add	r7, sp, #0
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	4608      	mov	r0, r1
 80141a2:	4639      	mov	r1, r7
 80141a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80141a8:	4603      	mov	r3, r0
 80141aa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	881b      	ldrh	r3, [r3, #0]
 80141b0:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80141b2:	7afb      	ldrb	r3, [r7, #11]
 80141b4:	f083 0301 	eor.w	r3, r3, #1
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d01b      	beq.n	80141f6 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80141be:	f242 7310 	movw	r3, #10000	; 0x2710
 80141c2:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80141ca:	d202      	bcs.n	80141d2 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80141cc:	2364      	movs	r3, #100	; 0x64
 80141ce:	82bb      	strh	r3, [r7, #20]
 80141d0:	e00b      	b.n	80141ea <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80141d8:	4293      	cmp	r3, r2
 80141da:	d803      	bhi.n	80141e4 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80141dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80141e0:	82bb      	strh	r3, [r7, #20]
 80141e2:	e002      	b.n	80141ea <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80141e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80141e8:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80141ea:	8aba      	ldrh	r2, [r7, #20]
 80141ec:	8afb      	ldrh	r3, [r7, #22]
 80141ee:	4293      	cmp	r3, r2
 80141f0:	bf38      	it	cc
 80141f2:	4613      	movcc	r3, r2
 80141f4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80141f6:	8afb      	ldrh	r3, [r7, #22]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d101      	bne.n	8014200 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80141fc:	2301      	movs	r3, #1
 80141fe:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014200:	8afb      	ldrh	r3, [r7, #22]
}
 8014202:	4618      	mov	r0, r3
 8014204:	371c      	adds	r7, #28
 8014206:	46bd      	mov	sp, r7
 8014208:	bc80      	pop	{r7}
 801420a:	4770      	bx	lr

0801420c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b08e      	sub	sp, #56	; 0x38
 8014210:	af02      	add	r7, sp, #8
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	4608      	mov	r0, r1
 8014216:	4639      	mov	r1, r7
 8014218:	e881 000c 	stmia.w	r1, {r2, r3}
 801421c:	4603      	mov	r3, r0
 801421e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014226:	4b4b      	ldr	r3, [pc, #300]	; (8014354 <SetMaxTimeCredits+0x148>)
 8014228:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801422a:	463b      	mov	r3, r7
 801422c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014230:	f005 fc2a 	bl	8019a88 <SysTimeToMs>
 8014234:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014236:	f107 0314 	add.w	r3, r7, #20
 801423a:	2200      	movs	r2, #0
 801423c:	601a      	str	r2, [r3, #0]
 801423e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014240:	7af9      	ldrb	r1, [r7, #11]
 8014242:	463b      	mov	r3, r7
 8014244:	cb0c      	ldmia	r3, {r2, r3}
 8014246:	68f8      	ldr	r0, [r7, #12]
 8014248:	f7ff ffa6 	bl	8014198 <GetDutyCycle>
 801424c:	4603      	mov	r3, r0
 801424e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014250:	7afb      	ldrb	r3, [r7, #11]
 8014252:	f083 0301 	eor.w	r3, r3, #1
 8014256:	b2db      	uxtb	r3, r3
 8014258:	2b00      	cmp	r3, #0
 801425a:	d062      	beq.n	8014322 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801425c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801425e:	2b64      	cmp	r3, #100	; 0x64
 8014260:	d105      	bne.n	801426e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014262:	4b3c      	ldr	r3, [pc, #240]	; (8014354 <SetMaxTimeCredits+0x148>)
 8014264:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801426a:	609a      	str	r2, [r3, #8]
 801426c:	e00b      	b.n	8014286 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801426e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014274:	d105      	bne.n	8014282 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014276:	4b38      	ldr	r3, [pc, #224]	; (8014358 <SetMaxTimeCredits+0x14c>)
 8014278:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801427e:	609a      	str	r2, [r3, #8]
 8014280:	e001      	b.n	8014286 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014282:	4b36      	ldr	r3, [pc, #216]	; (801435c <SetMaxTimeCredits+0x150>)
 8014284:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	689a      	ldr	r2, [r3, #8]
 801428a:	f107 031c 	add.w	r3, r7, #28
 801428e:	4611      	mov	r1, r2
 8014290:	4618      	mov	r0, r3
 8014292:	f005 fc21 	bl	8019ad8 <SysTimeFromMs>
 8014296:	f107 0014 	add.w	r0, r7, #20
 801429a:	6a3b      	ldr	r3, [r7, #32]
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	463a      	mov	r2, r7
 80142a2:	ca06      	ldmia	r2, {r1, r2}
 80142a4:	f005 fb31 	bl	801990a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80142a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80142ac:	f083 0301 	eor.w	r3, r3, #1
 80142b0:	b2db      	uxtb	r3, r3
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d006      	beq.n	80142c4 <SetMaxTimeCredits+0xb8>
 80142b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80142ba:	f083 0301 	eor.w	r3, r3, #1
 80142be:	b2db      	uxtb	r3, r3
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d108      	bne.n	80142d6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80142c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d103      	bne.n	80142d6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80142ce:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80142d0:	4a23      	ldr	r2, [pc, #140]	; (8014360 <SetMaxTimeCredits+0x154>)
 80142d2:	4293      	cmp	r3, r2
 80142d4:	d92f      	bls.n	8014336 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142da:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	4a21      	ldr	r2, [pc, #132]	; (8014364 <SetMaxTimeCredits+0x158>)
 80142e0:	4293      	cmp	r3, r2
 80142e2:	d928      	bls.n	8014336 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80142ea:	3b30      	subs	r3, #48	; 0x30
 80142ec:	4a1e      	ldr	r2, [pc, #120]	; (8014368 <SetMaxTimeCredits+0x15c>)
 80142ee:	fba2 2303 	umull	r2, r3, r2, r3
 80142f2:	0c1b      	lsrs	r3, r3, #16
 80142f4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	4a1c      	ldr	r2, [pc, #112]	; (801436c <SetMaxTimeCredits+0x160>)
 80142fa:	fb02 f303 	mul.w	r3, r2, r3
 80142fe:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014306:	3330      	adds	r3, #48	; 0x30
 8014308:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801430a:	2300      	movs	r3, #0
 801430c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801430e:	f107 0314 	add.w	r3, r7, #20
 8014312:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014316:	f005 fbb7 	bl	8019a88 <SysTimeToMs>
 801431a:	4602      	mov	r2, r0
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	609a      	str	r2, [r3, #8]
 8014320:	e009      	b.n	8014336 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014322:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014326:	f083 0301 	eor.w	r3, r3, #1
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b00      	cmp	r3, #0
 801432e:	d002      	beq.n	8014336 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014334:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d102      	bne.n	8014344 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014342:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014348:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801434a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801434c:	4618      	mov	r0, r3
 801434e:	3730      	adds	r7, #48	; 0x30
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	001b7740 	.word	0x001b7740
 8014358:	0112a880 	.word	0x0112a880
 801435c:	02932e00 	.word	0x02932e00
 8014360:	0001517f 	.word	0x0001517f
 8014364:	0001ec2f 	.word	0x0001ec2f
 8014368:	c22e4507 	.word	0xc22e4507
 801436c:	00015180 	.word	0x00015180

08014370 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b086      	sub	sp, #24
 8014374:	af02      	add	r7, sp, #8
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	4608      	mov	r0, r1
 801437a:	4611      	mov	r1, r2
 801437c:	461a      	mov	r2, r3
 801437e:	4603      	mov	r3, r0
 8014380:	70fb      	strb	r3, [r7, #3]
 8014382:	460b      	mov	r3, r1
 8014384:	70bb      	strb	r3, [r7, #2]
 8014386:	4613      	mov	r3, r2
 8014388:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801438a:	78f9      	ldrb	r1, [r7, #3]
 801438c:	787b      	ldrb	r3, [r7, #1]
 801438e:	9301      	str	r3, [sp, #4]
 8014390:	78bb      	ldrb	r3, [r7, #2]
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	f107 0318 	add.w	r3, r7, #24
 8014398:	cb0c      	ldmia	r3, {r2, r3}
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f7ff ff36 	bl	801420c <SetMaxTimeCredits>
 80143a0:	4603      	mov	r3, r0
 80143a2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80143a4:	78fb      	ldrb	r3, [r7, #3]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00a      	beq.n	80143c0 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f006 f8a2 	bl	801a4f8 <UTIL_TIMER_GetElapsedTime>
 80143b4:	4602      	mov	r2, r0
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	441a      	add	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	68da      	ldr	r2, [r3, #12]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	691b      	ldr	r3, [r3, #16]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d903      	bls.n	80143d4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	691a      	ldr	r2, [r3, #16]
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6a3a      	ldr	r2, [r7, #32]
 80143d8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80143da:	89fb      	ldrh	r3, [r7, #14]
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3710      	adds	r7, #16
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80143e4:	b480      	push	{r7}
 80143e6:	b085      	sub	sp, #20
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	460a      	mov	r2, r1
 80143ee:	80fb      	strh	r3, [r7, #6]
 80143f0:	4613      	mov	r3, r2
 80143f2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80143f4:	2300      	movs	r3, #0
 80143f6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80143f8:	2300      	movs	r3, #0
 80143fa:	73bb      	strb	r3, [r7, #14]
 80143fc:	e011      	b.n	8014422 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80143fe:	88fa      	ldrh	r2, [r7, #6]
 8014400:	7bbb      	ldrb	r3, [r7, #14]
 8014402:	2101      	movs	r1, #1
 8014404:	fa01 f303 	lsl.w	r3, r1, r3
 8014408:	401a      	ands	r2, r3
 801440a:	7bbb      	ldrb	r3, [r7, #14]
 801440c:	2101      	movs	r1, #1
 801440e:	fa01 f303 	lsl.w	r3, r1, r3
 8014412:	429a      	cmp	r2, r3
 8014414:	d102      	bne.n	801441c <CountChannels+0x38>
        {
            nbActiveBits++;
 8014416:	7bfb      	ldrb	r3, [r7, #15]
 8014418:	3301      	adds	r3, #1
 801441a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801441c:	7bbb      	ldrb	r3, [r7, #14]
 801441e:	3301      	adds	r3, #1
 8014420:	73bb      	strb	r3, [r7, #14]
 8014422:	7bba      	ldrb	r2, [r7, #14]
 8014424:	797b      	ldrb	r3, [r7, #5]
 8014426:	429a      	cmp	r2, r3
 8014428:	d3e9      	bcc.n	80143fe <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801442a:	7bfb      	ldrb	r3, [r7, #15]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3714      	adds	r7, #20
 8014430:	46bd      	mov	sp, r7
 8014432:	bc80      	pop	{r7}
 8014434:	4770      	bx	lr

08014436 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014436:	b580      	push	{r7, lr}
 8014438:	b084      	sub	sp, #16
 801443a:	af00      	add	r7, sp, #0
 801443c:	6039      	str	r1, [r7, #0]
 801443e:	4611      	mov	r1, r2
 8014440:	461a      	mov	r2, r3
 8014442:	4603      	mov	r3, r0
 8014444:	71fb      	strb	r3, [r7, #7]
 8014446:	460b      	mov	r3, r1
 8014448:	71bb      	strb	r3, [r7, #6]
 801444a:	4613      	mov	r3, r2
 801444c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801444e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014452:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014456:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801445a:	4618      	mov	r0, r3
 801445c:	f000 f85d 	bl	801451a <RegionCommonValueInRange>
 8014460:	4603      	mov	r3, r0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014466:	2300      	movs	r3, #0
 8014468:	e053      	b.n	8014512 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801446a:	2300      	movs	r3, #0
 801446c:	73fb      	strb	r3, [r7, #15]
 801446e:	2300      	movs	r3, #0
 8014470:	73bb      	strb	r3, [r7, #14]
 8014472:	e049      	b.n	8014508 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014474:	2300      	movs	r3, #0
 8014476:	737b      	strb	r3, [r7, #13]
 8014478:	e03d      	b.n	80144f6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801447a:	7bbb      	ldrb	r3, [r7, #14]
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	683a      	ldr	r2, [r7, #0]
 8014480:	4413      	add	r3, r2
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	461a      	mov	r2, r3
 8014486:	7b7b      	ldrb	r3, [r7, #13]
 8014488:	fa42 f303 	asr.w	r3, r2, r3
 801448c:	f003 0301 	and.w	r3, r3, #1
 8014490:	2b00      	cmp	r3, #0
 8014492:	d02d      	beq.n	80144f0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014494:	7bfa      	ldrb	r2, [r7, #15]
 8014496:	7b7b      	ldrb	r3, [r7, #13]
 8014498:	4413      	add	r3, r2
 801449a:	461a      	mov	r2, r3
 801449c:	4613      	mov	r3, r2
 801449e:	005b      	lsls	r3, r3, #1
 80144a0:	4413      	add	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	461a      	mov	r2, r3
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	4413      	add	r3, r2
 80144aa:	7a1b      	ldrb	r3, [r3, #8]
 80144ac:	f343 0303 	sbfx	r3, r3, #0, #4
 80144b0:	b25b      	sxtb	r3, r3
 80144b2:	f003 030f 	and.w	r3, r3, #15
 80144b6:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80144b8:	7bfa      	ldrb	r2, [r7, #15]
 80144ba:	7b7b      	ldrb	r3, [r7, #13]
 80144bc:	4413      	add	r3, r2
 80144be:	461a      	mov	r2, r3
 80144c0:	4613      	mov	r3, r2
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	4413      	add	r3, r2
 80144c6:	009b      	lsls	r3, r3, #2
 80144c8:	461a      	mov	r2, r3
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	4413      	add	r3, r2
 80144ce:	7a1b      	ldrb	r3, [r3, #8]
 80144d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80144d4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80144d6:	f003 030f 	and.w	r3, r3, #15
 80144da:	b25a      	sxtb	r2, r3
 80144dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 f81a 	bl	801451a <RegionCommonValueInRange>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b01      	cmp	r3, #1
 80144ea:	d101      	bne.n	80144f0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e010      	b.n	8014512 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80144f0:	7b7b      	ldrb	r3, [r7, #13]
 80144f2:	3301      	adds	r3, #1
 80144f4:	737b      	strb	r3, [r7, #13]
 80144f6:	7b7b      	ldrb	r3, [r7, #13]
 80144f8:	2b0f      	cmp	r3, #15
 80144fa:	d9be      	bls.n	801447a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
 80144fe:	3310      	adds	r3, #16
 8014500:	73fb      	strb	r3, [r7, #15]
 8014502:	7bbb      	ldrb	r3, [r7, #14]
 8014504:	3301      	adds	r3, #1
 8014506:	73bb      	strb	r3, [r7, #14]
 8014508:	7bfa      	ldrb	r2, [r7, #15]
 801450a:	79fb      	ldrb	r3, [r7, #7]
 801450c:	429a      	cmp	r2, r3
 801450e:	d3b1      	bcc.n	8014474 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014510:	2300      	movs	r3, #0
}
 8014512:	4618      	mov	r0, r3
 8014514:	3710      	adds	r7, #16
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801451a:	b480      	push	{r7}
 801451c:	b083      	sub	sp, #12
 801451e:	af00      	add	r7, sp, #0
 8014520:	4603      	mov	r3, r0
 8014522:	71fb      	strb	r3, [r7, #7]
 8014524:	460b      	mov	r3, r1
 8014526:	71bb      	strb	r3, [r7, #6]
 8014528:	4613      	mov	r3, r2
 801452a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801452c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014530:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014534:	429a      	cmp	r2, r3
 8014536:	db07      	blt.n	8014548 <RegionCommonValueInRange+0x2e>
 8014538:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801453c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014540:	429a      	cmp	r2, r3
 8014542:	dc01      	bgt.n	8014548 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014544:	2301      	movs	r3, #1
 8014546:	e000      	b.n	801454a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	370c      	adds	r7, #12
 801454e:	46bd      	mov	sp, r7
 8014550:	bc80      	pop	{r7}
 8014552:	4770      	bx	lr

08014554 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014554:	b480      	push	{r7}
 8014556:	b085      	sub	sp, #20
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	460b      	mov	r3, r1
 801455e:	70fb      	strb	r3, [r7, #3]
 8014560:	4613      	mov	r3, r2
 8014562:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	091b      	lsrs	r3, r3, #4
 8014568:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801456a:	78bb      	ldrb	r3, [r7, #2]
 801456c:	091b      	lsrs	r3, r3, #4
 801456e:	b2db      	uxtb	r3, r3
 8014570:	7bfa      	ldrb	r2, [r7, #15]
 8014572:	429a      	cmp	r2, r3
 8014574:	d803      	bhi.n	801457e <RegionCommonChanDisable+0x2a>
 8014576:	78fa      	ldrb	r2, [r7, #3]
 8014578:	78bb      	ldrb	r3, [r7, #2]
 801457a:	429a      	cmp	r2, r3
 801457c:	d301      	bcc.n	8014582 <RegionCommonChanDisable+0x2e>
    {
        return false;
 801457e:	2300      	movs	r3, #0
 8014580:	e017      	b.n	80145b2 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014582:	7bfb      	ldrb	r3, [r7, #15]
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	4413      	add	r3, r2
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	b21a      	sxth	r2, r3
 801458e:	78fb      	ldrb	r3, [r7, #3]
 8014590:	f003 030f 	and.w	r3, r3, #15
 8014594:	2101      	movs	r1, #1
 8014596:	fa01 f303 	lsl.w	r3, r1, r3
 801459a:	b21b      	sxth	r3, r3
 801459c:	43db      	mvns	r3, r3
 801459e:	b21b      	sxth	r3, r3
 80145a0:	4013      	ands	r3, r2
 80145a2:	b219      	sxth	r1, r3
 80145a4:	7bfb      	ldrb	r3, [r7, #15]
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	4413      	add	r3, r2
 80145ac:	b28a      	uxth	r2, r1
 80145ae:	801a      	strh	r2, [r3, #0]

    return true;
 80145b0:	2301      	movs	r3, #1
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3714      	adds	r7, #20
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bc80      	pop	{r7}
 80145ba:	4770      	bx	lr

080145bc <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
 80145c8:	4613      	mov	r3, r2
 80145ca:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d101      	bne.n	80145da <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80145d6:	2300      	movs	r3, #0
 80145d8:	e018      	b.n	801460c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80145da:	78fb      	ldrb	r3, [r7, #3]
 80145dc:	73bb      	strb	r3, [r7, #14]
 80145de:	e010      	b.n	8014602 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80145e0:	7bbb      	ldrb	r3, [r7, #14]
 80145e2:	005b      	lsls	r3, r3, #1
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	4413      	add	r3, r2
 80145e8:	881b      	ldrh	r3, [r3, #0]
 80145ea:	2110      	movs	r1, #16
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff fef9 	bl	80143e4 <CountChannels>
 80145f2:	4603      	mov	r3, r0
 80145f4:	461a      	mov	r2, r3
 80145f6:	7bfb      	ldrb	r3, [r7, #15]
 80145f8:	4413      	add	r3, r2
 80145fa:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80145fc:	7bbb      	ldrb	r3, [r7, #14]
 80145fe:	3301      	adds	r3, #1
 8014600:	73bb      	strb	r3, [r7, #14]
 8014602:	7bba      	ldrb	r2, [r7, #14]
 8014604:	78bb      	ldrb	r3, [r7, #2]
 8014606:	429a      	cmp	r2, r3
 8014608:	d3ea      	bcc.n	80145e0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801460a:	7bfb      	ldrb	r3, [r7, #15]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014614:	b480      	push	{r7}
 8014616:	b087      	sub	sp, #28
 8014618:	af00      	add	r7, sp, #0
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	60b9      	str	r1, [r7, #8]
 801461e:	4613      	mov	r3, r2
 8014620:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d016      	beq.n	8014656 <RegionCommonChanMaskCopy+0x42>
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d013      	beq.n	8014656 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801462e:	2300      	movs	r3, #0
 8014630:	75fb      	strb	r3, [r7, #23]
 8014632:	e00c      	b.n	801464e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014634:	7dfb      	ldrb	r3, [r7, #23]
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	441a      	add	r2, r3
 801463c:	7dfb      	ldrb	r3, [r7, #23]
 801463e:	005b      	lsls	r3, r3, #1
 8014640:	68f9      	ldr	r1, [r7, #12]
 8014642:	440b      	add	r3, r1
 8014644:	8812      	ldrh	r2, [r2, #0]
 8014646:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014648:	7dfb      	ldrb	r3, [r7, #23]
 801464a:	3301      	adds	r3, #1
 801464c:	75fb      	strb	r3, [r7, #23]
 801464e:	7dfa      	ldrb	r2, [r7, #23]
 8014650:	79fb      	ldrb	r3, [r7, #7]
 8014652:	429a      	cmp	r2, r3
 8014654:	d3ee      	bcc.n	8014634 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014656:	bf00      	nop
 8014658:	371c      	adds	r7, #28
 801465a:	46bd      	mov	sp, r7
 801465c:	bc80      	pop	{r7}
 801465e:	4770      	bx	lr

08014660 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014660:	b082      	sub	sp, #8
 8014662:	b580      	push	{r7, lr}
 8014664:	b086      	sub	sp, #24
 8014666:	af00      	add	r7, sp, #0
 8014668:	60f8      	str	r0, [r7, #12]
 801466a:	60b9      	str	r1, [r7, #8]
 801466c:	627b      	str	r3, [r7, #36]	; 0x24
 801466e:	4613      	mov	r3, r2
 8014670:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014672:	79f9      	ldrb	r1, [r7, #7]
 8014674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014678:	cb0c      	ldmia	r3, {r2, r3}
 801467a:	68f8      	ldr	r0, [r7, #12]
 801467c:	f7ff fd8c 	bl	8014198 <GetDutyCycle>
 8014680:	4603      	mov	r3, r0
 8014682:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	68da      	ldr	r2, [r3, #12]
 8014688:	8afb      	ldrh	r3, [r7, #22]
 801468a:	68b9      	ldr	r1, [r7, #8]
 801468c:	fb01 f303 	mul.w	r3, r1, r3
 8014690:	429a      	cmp	r2, r3
 8014692:	d909      	bls.n	80146a8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	68da      	ldr	r2, [r3, #12]
 8014698:	8afb      	ldrh	r3, [r7, #22]
 801469a:	68b9      	ldr	r1, [r7, #8]
 801469c:	fb01 f303 	mul.w	r3, r1, r3
 80146a0:	1ad2      	subs	r2, r2, r3
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80146a6:	e002      	b.n	80146ae <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	2200      	movs	r2, #0
 80146ac:	60da      	str	r2, [r3, #12]
}
 80146ae:	bf00      	nop
 80146b0:	3718      	adds	r7, #24
 80146b2:	46bd      	mov	sp, r7
 80146b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80146b8:	b002      	add	sp, #8
 80146ba:	4770      	bx	lr

080146bc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80146bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146be:	b08f      	sub	sp, #60	; 0x3c
 80146c0:	af04      	add	r7, sp, #16
 80146c2:	6039      	str	r1, [r7, #0]
 80146c4:	4611      	mov	r1, r2
 80146c6:	461a      	mov	r2, r3
 80146c8:	4603      	mov	r3, r0
 80146ca:	71fb      	strb	r3, [r7, #7]
 80146cc:	460b      	mov	r3, r1
 80146ce:	71bb      	strb	r3, [r7, #6]
 80146d0:	4613      	mov	r3, r2
 80146d2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80146d4:	f04f 33ff 	mov.w	r3, #4294967295
 80146d8:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80146da:	f005 fefb 	bl	801a4d4 <UTIL_TIMER_GetCurrentTime>
 80146de:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80146e0:	2300      	movs	r3, #0
 80146e2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80146e4:	2301      	movs	r3, #1
 80146e6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80146e8:	2300      	movs	r3, #0
 80146ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80146ee:	2300      	movs	r3, #0
 80146f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80146f4:	e0ba      	b.n	801486c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80146f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80146fa:	4613      	mov	r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4413      	add	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	461a      	mov	r2, r3
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	189c      	adds	r4, r3, r2
 8014708:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801470c:	797a      	ldrb	r2, [r7, #5]
 801470e:	79fd      	ldrb	r5, [r7, #7]
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	9302      	str	r3, [sp, #8]
 8014714:	46ec      	mov	ip, sp
 8014716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801471a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801471e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014722:	4633      	mov	r3, r6
 8014724:	4629      	mov	r1, r5
 8014726:	4620      	mov	r0, r4
 8014728:	f7ff fe22 	bl	8014370 <UpdateTimeCredits>
 801472c:	4603      	mov	r3, r0
 801472e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014730:	8afa      	ldrh	r2, [r7, #22]
 8014732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014734:	fb02 f303 	mul.w	r3, r2, r3
 8014738:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801473a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801473e:	4613      	mov	r3, r2
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	4413      	add	r3, r2
 8014744:	00db      	lsls	r3, r3, #3
 8014746:	461a      	mov	r2, r3
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	4413      	add	r3, r2
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	69ba      	ldr	r2, [r7, #24]
 8014750:	429a      	cmp	r2, r3
 8014752:	d308      	bcc.n	8014766 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014754:	797b      	ldrb	r3, [r7, #5]
 8014756:	f083 0301 	eor.w	r3, r3, #1
 801475a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801475c:	2b00      	cmp	r3, #0
 801475e:	d013      	beq.n	8014788 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014760:	79fb      	ldrb	r3, [r7, #7]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d010      	beq.n	8014788 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014766:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801476a:	4613      	mov	r3, r2
 801476c:	005b      	lsls	r3, r3, #1
 801476e:	4413      	add	r3, r2
 8014770:	00db      	lsls	r3, r3, #3
 8014772:	461a      	mov	r2, r3
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	4413      	add	r3, r2
 8014778:	2201      	movs	r2, #1
 801477a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801477c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014780:	3301      	adds	r3, #1
 8014782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014786:	e06c      	b.n	8014862 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014788:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801478c:	4613      	mov	r3, r2
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4413      	add	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	461a      	mov	r2, r3
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	4413      	add	r3, r2
 801479a:	2200      	movs	r2, #0
 801479c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801479e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80147a2:	4613      	mov	r3, r2
 80147a4:	005b      	lsls	r3, r3, #1
 80147a6:	4413      	add	r3, r2
 80147a8:	00db      	lsls	r3, r3, #3
 80147aa:	461a      	mov	r2, r3
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	4413      	add	r3, r2
 80147b0:	691b      	ldr	r3, [r3, #16]
 80147b2:	69ba      	ldr	r2, [r7, #24]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d215      	bcs.n	80147e4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80147b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	461a      	mov	r2, r3
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	4413      	add	r3, r2
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	69ba      	ldr	r2, [r7, #24]
 80147ce:	1ad3      	subs	r3, r2, r3
 80147d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147d2:	4293      	cmp	r3, r2
 80147d4:	bf28      	it	cs
 80147d6:	4613      	movcs	r3, r2
 80147d8:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80147da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147de:	3301      	adds	r3, #1
 80147e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80147e4:	79fb      	ldrb	r3, [r7, #7]
 80147e6:	f083 0301 	eor.w	r3, r3, #1
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d038      	beq.n	8014862 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80147f0:	2300      	movs	r3, #0
 80147f2:	60fb      	str	r3, [r7, #12]
 80147f4:	2300      	movs	r3, #0
 80147f6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80147f8:	8afb      	ldrh	r3, [r7, #22]
 80147fa:	2b64      	cmp	r3, #100	; 0x64
 80147fc:	d103      	bne.n	8014806 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80147fe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014802:	60fb      	str	r3, [r7, #12]
 8014804:	e009      	b.n	801481a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014806:	8afb      	ldrh	r3, [r7, #22]
 8014808:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801480c:	d103      	bne.n	8014816 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801480e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8014812:	60fb      	str	r3, [r7, #12]
 8014814:	e001      	b.n	801481a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014816:	4b1e      	ldr	r3, [pc, #120]	; (8014890 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014818:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801481a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801481c:	4a1c      	ldr	r2, [pc, #112]	; (8014890 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801481e:	4293      	cmp	r3, r2
 8014820:	d90e      	bls.n	8014840 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014826:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801482a:	3b30      	subs	r3, #48	; 0x30
 801482c:	4919      	ldr	r1, [pc, #100]	; (8014894 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801482e:	fba1 1303 	umull	r1, r3, r1, r3
 8014832:	0c1b      	lsrs	r3, r3, #16
 8014834:	3301      	adds	r3, #1
 8014836:	4918      	ldr	r1, [pc, #96]	; (8014898 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014838:	fb01 f303 	mul.w	r3, r1, r3
 801483c:	4413      	add	r3, r2
 801483e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014840:	f107 000c 	add.w	r0, r7, #12
 8014844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014846:	9300      	str	r3, [sp, #0]
 8014848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801484a:	f107 020c 	add.w	r2, r7, #12
 801484e:	ca06      	ldmia	r2, {r1, r2}
 8014850:	f005 f85b 	bl	801990a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014854:	f107 030c 	add.w	r3, r7, #12
 8014858:	e893 0003 	ldmia.w	r3, {r0, r1}
 801485c:	f005 f914 	bl	8019a88 <SysTimeToMs>
 8014860:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014862:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014866:	3301      	adds	r3, #1
 8014868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801486c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014870:	79bb      	ldrb	r3, [r7, #6]
 8014872:	429a      	cmp	r2, r3
 8014874:	f4ff af3f 	bcc.w	80146f6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 8014878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801487c:	2b00      	cmp	r3, #0
 801487e:	d102      	bne.n	8014886 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014880:	f04f 33ff 	mov.w	r3, #4294967295
 8014884:	e000      	b.n	8014888 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014888:	4618      	mov	r0, r3
 801488a:	372c      	adds	r7, #44	; 0x2c
 801488c:	46bd      	mov	sp, r7
 801488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014890:	0001ec30 	.word	0x0001ec30
 8014894:	c22e4507 	.word	0xc22e4507
 8014898:	00015180 	.word	0x00015180

0801489c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801489c:	b480      	push	{r7}
 801489e:	b085      	sub	sp, #20
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80148a6:	2300      	movs	r3, #0
 80148a8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	2b03      	cmp	r3, #3
 80148b0:	d13f      	bne.n	8014932 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	3301      	adds	r3, #1
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	b25a      	sxtb	r2, r3
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148c4:	f003 030f 	and.w	r3, r3, #15
 80148c8:	b25a      	sxtb	r2, r3
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	091b      	lsrs	r3, r3, #4
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	b25a      	sxtb	r2, r3
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	3302      	adds	r3, #2
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	889b      	ldrh	r3, [r3, #4]
 80148f0:	b21a      	sxth	r2, r3
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	3303      	adds	r3, #3
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	021b      	lsls	r3, r3, #8
 80148fa:	b21b      	sxth	r3, r3
 80148fc:	4313      	orrs	r3, r2
 80148fe:	b21b      	sxth	r3, r3
 8014900:	b29a      	uxth	r2, r3
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	791a      	ldrb	r2, [r3, #4]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	091b      	lsrs	r3, r3, #4
 8014914:	b2db      	uxtb	r3, r3
 8014916:	f003 0307 	and.w	r3, r3, #7
 801491a:	b2da      	uxtb	r2, r3
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	f003 030f 	and.w	r3, r3, #15
 8014928:	b2da      	uxtb	r2, r3
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801492e:	2305      	movs	r3, #5
 8014930:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014932:	7bfb      	ldrb	r3, [r7, #15]
}
 8014934:	4618      	mov	r0, r3
 8014936:	3714      	adds	r7, #20
 8014938:	46bd      	mov	sp, r7
 801493a:	bc80      	pop	{r7}
 801493c:	4770      	bx	lr

0801493e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801493e:	b5b0      	push	{r4, r5, r7, lr}
 8014940:	b088      	sub	sp, #32
 8014942:	af02      	add	r7, sp, #8
 8014944:	60f8      	str	r0, [r7, #12]
 8014946:	60b9      	str	r1, [r7, #8]
 8014948:	607a      	str	r2, [r7, #4]
 801494a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	791b      	ldrb	r3, [r3, #4]
 8014950:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	799b      	ldrb	r3, [r3, #6]
 8014956:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	79db      	ldrb	r3, [r3, #7]
 801495c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7a1b      	ldrb	r3, [r3, #8]
 8014962:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	795b      	ldrb	r3, [r3, #5]
 8014968:	f083 0301 	eor.w	r3, r3, #1
 801496c:	b2db      	uxtb	r3, r3
 801496e:	2b00      	cmp	r3, #0
 8014970:	d008      	beq.n	8014984 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	7adb      	ldrb	r3, [r3, #11]
 8014976:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	7a5b      	ldrb	r3, [r3, #9]
 801497c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	7a9b      	ldrb	r3, [r3, #10]
 8014982:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014984:	7dfb      	ldrb	r3, [r7, #23]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d03a      	beq.n	8014a00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	7b18      	ldrb	r0, [r3, #12]
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	6919      	ldr	r1, [r3, #16]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	6992      	ldr	r2, [r2, #24]
 80149a2:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80149a6:	9201      	str	r2, [sp, #4]
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	462b      	mov	r3, r5
 80149ac:	4622      	mov	r2, r4
 80149ae:	f7ff fd42 	bl	8014436 <RegionCommonChanVerifyDr>
 80149b2:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80149b4:	f083 0301 	eor.w	r3, r3, #1
 80149b8:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d003      	beq.n	80149c6 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 80149be:	7dfb      	ldrb	r3, [r7, #23]
 80149c0:	f023 0302 	bic.w	r3, r3, #2
 80149c4:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80149d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7ff fd9f 	bl	801451a <RegionCommonValueInRange>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d10e      	bne.n	8014a00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80149e8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	da03      	bge.n	80149f8 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	7f5b      	ldrb	r3, [r3, #29]
 80149f4:	757b      	strb	r3, [r7, #21]
 80149f6:	e003      	b.n	8014a00 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80149f8:	7dfb      	ldrb	r3, [r7, #23]
 80149fa:	f023 0304 	bic.w	r3, r3, #4
 80149fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8014a00:	7dfb      	ldrb	r3, [r7, #23]
 8014a02:	2b07      	cmp	r3, #7
 8014a04:	d105      	bne.n	8014a12 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8014a06:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	7dba      	ldrb	r2, [r7, #22]
 8014a16:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	7d7a      	ldrb	r2, [r7, #21]
 8014a1c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8014a1e:	7d3a      	ldrb	r2, [r7, #20]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	701a      	strb	r2, [r3, #0]

    return status;
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3718      	adds	r7, #24
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014a30 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8014a30:	b480      	push	{r7}
 8014a32:	b083      	sub	sp, #12
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	4603      	mov	r3, r0
 8014a38:	6039      	str	r1, [r7, #0]
 8014a3a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014a3c:	79fb      	ldrb	r3, [r7, #7]
 8014a3e:	4a06      	ldr	r2, [pc, #24]	; (8014a58 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014a40:	fa02 f303 	lsl.w	r3, r2, r3
 8014a44:	461a      	mov	r2, r3
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	370c      	adds	r7, #12
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bc80      	pop	{r7}
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	000f4240 	.word	0x000f4240

08014a5c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b083      	sub	sp, #12
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	4603      	mov	r3, r0
 8014a64:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8014a66:	79fb      	ldrb	r3, [r7, #7]
 8014a68:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014a6c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bc80      	pop	{r7}
 8014a78:	4770      	bx	lr
	...

08014a7c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	607a      	str	r2, [r7, #4]
 8014a86:	603b      	str	r3, [r7, #0]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014a8c:	7afa      	ldrb	r2, [r7, #11]
 8014a8e:	7afb      	ldrb	r3, [r7, #11]
 8014a90:	3b04      	subs	r3, #4
 8014a92:	4619      	mov	r1, r3
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	fb03 f101 	mul.w	r1, r3, r1
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014aa0:	fb00 f303 	mul.w	r3, r0, r3
 8014aa4:	440b      	add	r3, r1
 8014aa6:	005b      	lsls	r3, r3, #1
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d013      	beq.n	8014ad4 <RegionCommonComputeRxWindowParameters+0x58>
 8014aac:	7afb      	ldrb	r3, [r7, #11]
 8014aae:	3b04      	subs	r3, #4
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	fb03 f101 	mul.w	r1, r3, r1
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014abe:	fb00 f303 	mul.w	r3, r0, r3
 8014ac2:	440b      	add	r3, r1
 8014ac4:	0059      	lsls	r1, r3, #1
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	440b      	add	r3, r1
 8014aca:	1e59      	subs	r1, r3, #1
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8014ad2:	e00f      	b.n	8014af4 <RegionCommonComputeRxWindowParameters+0x78>
 8014ad4:	7afb      	ldrb	r3, [r7, #11]
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	4619      	mov	r1, r3
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	fb03 f101 	mul.w	r1, r3, r1
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ae6:	fb00 f303 	mul.w	r3, r0, r3
 8014aea:	440b      	add	r3, r1
 8014aec:	0059      	lsls	r1, r3, #1
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8014af4:	429a      	cmp	r2, r3
 8014af6:	bf38      	it	cc
 8014af8:	461a      	movcc	r2, r3
 8014afa:	69bb      	ldr	r3, [r7, #24]
 8014afc:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	4619      	mov	r1, r3
 8014b04:	69bb      	ldr	r3, [r7, #24]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	fb02 f303 	mul.w	r3, r2, r3
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d007      	beq.n	8014b22 <RegionCommonComputeRxWindowParameters+0xa6>
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	fb02 f303 	mul.w	r3, r2, r3
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	085b      	lsrs	r3, r3, #1
 8014b20:	e005      	b.n	8014b2e <RegionCommonComputeRxWindowParameters+0xb2>
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	fb02 f303 	mul.w	r3, r2, r3
 8014b2c:	085b      	lsrs	r3, r3, #1
 8014b2e:	1acb      	subs	r3, r1, r3
 8014b30:	683a      	ldr	r2, [r7, #0]
 8014b32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b36:	fb01 f202 	mul.w	r2, r1, r2
 8014b3a:	1a9b      	subs	r3, r3, r2
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	dd27      	ble.n	8014b90 <RegionCommonComputeRxWindowParameters+0x114>
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4619      	mov	r1, r3
 8014b46:	69bb      	ldr	r3, [r7, #24]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	68fa      	ldr	r2, [r7, #12]
 8014b4c:	fb02 f303 	mul.w	r3, r2, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d007      	beq.n	8014b64 <RegionCommonComputeRxWindowParameters+0xe8>
 8014b54:	69bb      	ldr	r3, [r7, #24]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	fb02 f303 	mul.w	r3, r2, r3
 8014b5e:	3301      	adds	r3, #1
 8014b60:	085b      	lsrs	r3, r3, #1
 8014b62:	e005      	b.n	8014b70 <RegionCommonComputeRxWindowParameters+0xf4>
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	68fa      	ldr	r2, [r7, #12]
 8014b6a:	fb02 f303 	mul.w	r3, r2, r3
 8014b6e:	085b      	lsrs	r3, r3, #1
 8014b70:	1acb      	subs	r3, r1, r3
 8014b72:	683a      	ldr	r2, [r7, #0]
 8014b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014b78:	fb01 f202 	mul.w	r2, r1, r2
 8014b7c:	1a9b      	subs	r3, r3, r2
 8014b7e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8014b82:	4a19      	ldr	r2, [pc, #100]	; (8014be8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014b84:	fb82 1203 	smull	r1, r2, r2, r3
 8014b88:	1192      	asrs	r2, r2, #6
 8014b8a:	17db      	asrs	r3, r3, #31
 8014b8c:	1ad3      	subs	r3, r2, r3
 8014b8e:	e024      	b.n	8014bda <RegionCommonComputeRxWindowParameters+0x15e>
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	4619      	mov	r1, r3
 8014b96:	69bb      	ldr	r3, [r7, #24]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	fb02 f303 	mul.w	r3, r2, r3
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d007      	beq.n	8014bb4 <RegionCommonComputeRxWindowParameters+0x138>
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	fb02 f303 	mul.w	r3, r2, r3
 8014bae:	3301      	adds	r3, #1
 8014bb0:	085b      	lsrs	r3, r3, #1
 8014bb2:	e005      	b.n	8014bc0 <RegionCommonComputeRxWindowParameters+0x144>
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68fa      	ldr	r2, [r7, #12]
 8014bba:	fb02 f303 	mul.w	r3, r2, r3
 8014bbe:	085b      	lsrs	r3, r3, #1
 8014bc0:	1acb      	subs	r3, r1, r3
 8014bc2:	683a      	ldr	r2, [r7, #0]
 8014bc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014bc8:	fb01 f202 	mul.w	r2, r1, r2
 8014bcc:	1a9b      	subs	r3, r3, r2
 8014bce:	4a06      	ldr	r2, [pc, #24]	; (8014be8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8014bd4:	1192      	asrs	r2, r2, #6
 8014bd6:	17db      	asrs	r3, r3, #31
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	69fa      	ldr	r2, [r7, #28]
 8014bdc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014bde:	bf00      	nop
 8014be0:	3714      	adds	r7, #20
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bc80      	pop	{r7}
 8014be6:	4770      	bx	lr
 8014be8:	10624dd3 	.word	0x10624dd3

08014bec <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b086      	sub	sp, #24
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4618      	mov	r0, r3
 8014c06:	f7eb fde1 	bl	80007cc <__aeabi_ui2f>
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	68b8      	ldr	r0, [r7, #8]
 8014c10:	f7eb fd2a 	bl	8000668 <__aeabi_fsub>
 8014c14:	4603      	mov	r3, r0
 8014c16:	6879      	ldr	r1, [r7, #4]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7eb fd25 	bl	8000668 <__aeabi_fsub>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7eb fc15 	bl	8000450 <__aeabi_f2d>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	4610      	mov	r0, r2
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	f005 ffe7 	bl	801ac00 <floor>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4610      	mov	r0, r2
 8014c38:	4619      	mov	r1, r3
 8014c3a:	f7eb fce9 	bl	8000610 <__aeabi_d2iz>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c46:	4618      	mov	r0, r3
 8014c48:	3718      	adds	r7, #24
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}

08014c4e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014c4e:	b590      	push	{r4, r7, lr}
 8014c50:	b087      	sub	sp, #28
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	60f8      	str	r0, [r7, #12]
 8014c56:	60b9      	str	r1, [r7, #8]
 8014c58:	607a      	str	r2, [r7, #4]
 8014c5a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014c60:	2300      	movs	r3, #0
 8014c62:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014c64:	2300      	movs	r3, #0
 8014c66:	757b      	strb	r3, [r7, #21]
 8014c68:	2300      	movs	r3, #0
 8014c6a:	753b      	strb	r3, [r7, #20]
 8014c6c:	e09c      	b.n	8014da8 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014c6e:	2300      	movs	r3, #0
 8014c70:	74fb      	strb	r3, [r7, #19]
 8014c72:	e08f      	b.n	8014d94 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	685a      	ldr	r2, [r3, #4]
 8014c78:	7d3b      	ldrb	r3, [r7, #20]
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	4413      	add	r3, r2
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	461a      	mov	r2, r3
 8014c82:	7cfb      	ldrb	r3, [r7, #19]
 8014c84:	fa42 f303 	asr.w	r3, r2, r3
 8014c88:	f003 0301 	and.w	r3, r3, #1
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d07e      	beq.n	8014d8e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	689a      	ldr	r2, [r3, #8]
 8014c94:	7d79      	ldrb	r1, [r7, #21]
 8014c96:	7cfb      	ldrb	r3, [r7, #19]
 8014c98:	440b      	add	r3, r1
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	005b      	lsls	r3, r3, #1
 8014ca0:	440b      	add	r3, r1
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	4413      	add	r3, r2
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d06b      	beq.n	8014d84 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	f083 0301 	eor.w	r3, r3, #1
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d011      	beq.n	8014cde <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00d      	beq.n	8014cde <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	695a      	ldr	r2, [r3, #20]
 8014cc6:	7d3b      	ldrb	r3, [r7, #20]
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	4413      	add	r3, r2
 8014ccc:	881b      	ldrh	r3, [r3, #0]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	7cfb      	ldrb	r3, [r7, #19]
 8014cd2:	fa42 f303 	asr.w	r3, r2, r3
 8014cd6:	f003 0301 	and.w	r3, r3, #1
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d054      	beq.n	8014d88 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	785b      	ldrb	r3, [r3, #1]
 8014ce2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	689a      	ldr	r2, [r3, #8]
 8014ce8:	7d79      	ldrb	r1, [r7, #21]
 8014cea:	7cfb      	ldrb	r3, [r7, #19]
 8014cec:	440b      	add	r3, r1
 8014cee:	4619      	mov	r1, r3
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	005b      	lsls	r3, r3, #1
 8014cf4:	440b      	add	r3, r1
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	4413      	add	r3, r2
 8014cfa:	7a1b      	ldrb	r3, [r3, #8]
 8014cfc:	f343 0303 	sbfx	r3, r3, #0, #4
 8014d00:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014d02:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	689a      	ldr	r2, [r3, #8]
 8014d08:	7d79      	ldrb	r1, [r7, #21]
 8014d0a:	7cfb      	ldrb	r3, [r7, #19]
 8014d0c:	440b      	add	r3, r1
 8014d0e:	4619      	mov	r1, r3
 8014d10:	460b      	mov	r3, r1
 8014d12:	005b      	lsls	r3, r3, #1
 8014d14:	440b      	add	r3, r1
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	4413      	add	r3, r2
 8014d1a:	7a1b      	ldrb	r3, [r3, #8]
 8014d1c:	f343 1303 	sbfx	r3, r3, #4, #4
 8014d20:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014d22:	461a      	mov	r2, r3
 8014d24:	4621      	mov	r1, r4
 8014d26:	f7ff fbf8 	bl	801451a <RegionCommonValueInRange>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d02d      	beq.n	8014d8c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	68da      	ldr	r2, [r3, #12]
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	6899      	ldr	r1, [r3, #8]
 8014d38:	7d78      	ldrb	r0, [r7, #21]
 8014d3a:	7cfb      	ldrb	r3, [r7, #19]
 8014d3c:	4403      	add	r3, r0
 8014d3e:	4618      	mov	r0, r3
 8014d40:	4603      	mov	r3, r0
 8014d42:	005b      	lsls	r3, r3, #1
 8014d44:	4403      	add	r3, r0
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	440b      	add	r3, r1
 8014d4a:	7a5b      	ldrb	r3, [r3, #9]
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	460b      	mov	r3, r1
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	440b      	add	r3, r1
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	4413      	add	r3, r2
 8014d58:	7d1b      	ldrb	r3, [r3, #20]
 8014d5a:	f083 0301 	eor.w	r3, r3, #1
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d003      	beq.n	8014d6c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014d64:	7dbb      	ldrb	r3, [r7, #22]
 8014d66:	3301      	adds	r3, #1
 8014d68:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014d6a:	e010      	b.n	8014d8e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014d6c:	7dfb      	ldrb	r3, [r7, #23]
 8014d6e:	1c5a      	adds	r2, r3, #1
 8014d70:	75fa      	strb	r2, [r7, #23]
 8014d72:	461a      	mov	r2, r3
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	4413      	add	r3, r2
 8014d78:	7d79      	ldrb	r1, [r7, #21]
 8014d7a:	7cfa      	ldrb	r2, [r7, #19]
 8014d7c:	440a      	add	r2, r1
 8014d7e:	b2d2      	uxtb	r2, r2
 8014d80:	701a      	strb	r2, [r3, #0]
 8014d82:	e004      	b.n	8014d8e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d84:	bf00      	nop
 8014d86:	e002      	b.n	8014d8e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014d88:	bf00      	nop
 8014d8a:	e000      	b.n	8014d8e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014d8c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014d8e:	7cfb      	ldrb	r3, [r7, #19]
 8014d90:	3301      	adds	r3, #1
 8014d92:	74fb      	strb	r3, [r7, #19]
 8014d94:	7cfb      	ldrb	r3, [r7, #19]
 8014d96:	2b0f      	cmp	r3, #15
 8014d98:	f67f af6c 	bls.w	8014c74 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014d9c:	7d7b      	ldrb	r3, [r7, #21]
 8014d9e:	3310      	adds	r3, #16
 8014da0:	757b      	strb	r3, [r7, #21]
 8014da2:	7d3b      	ldrb	r3, [r7, #20]
 8014da4:	3301      	adds	r3, #1
 8014da6:	753b      	strb	r3, [r7, #20]
 8014da8:	7d7b      	ldrb	r3, [r7, #21]
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	8a1b      	ldrh	r3, [r3, #16]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	f4ff af5c 	bcc.w	8014c6e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	7dfa      	ldrb	r2, [r7, #23]
 8014dba:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	7dba      	ldrb	r2, [r7, #22]
 8014dc0:	701a      	strb	r2, [r3, #0]
}
 8014dc2:	bf00      	nop
 8014dc4:	371c      	adds	r7, #28
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd90      	pop	{r4, r7, pc}

08014dca <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dcc:	b08b      	sub	sp, #44	; 0x2c
 8014dce:	af04      	add	r7, sp, #16
 8014dd0:	60f8      	str	r0, [r7, #12]
 8014dd2:	60b9      	str	r1, [r7, #8]
 8014dd4:	607a      	str	r2, [r7, #4]
 8014dd6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f005 fb8b 	bl	801a4f8 <UTIL_TIMER_GetElapsedTime>
 8014de2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	1ad2      	subs	r2, r2, r3
 8014dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dee:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df2:	2201      	movs	r2, #1
 8014df4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	685b      	ldr	r3, [r3, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d004      	beq.n	8014e0e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014e08:	697a      	ldr	r2, [r7, #20]
 8014e0a:	429a      	cmp	r2, r3
 8014e0c:	d32b      	bcc.n	8014e66 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	2200      	movs	r2, #0
 8014e12:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	69db      	ldr	r3, [r3, #28]
 8014e18:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014e1e:	68dd      	ldr	r5, [r3, #12]
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	7a5e      	ldrb	r6, [r3, #9]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	7d1b      	ldrb	r3, [r3, #20]
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	6992      	ldr	r2, [r2, #24]
 8014e32:	9203      	str	r2, [sp, #12]
 8014e34:	68fa      	ldr	r2, [r7, #12]
 8014e36:	f10d 0e04 	add.w	lr, sp, #4
 8014e3a:	320c      	adds	r2, #12
 8014e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e40:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	4663      	mov	r3, ip
 8014e48:	4632      	mov	r2, r6
 8014e4a:	4629      	mov	r1, r5
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	f7ff fc35 	bl	80146bc <RegionCommonUpdateBandTimeOff>
 8014e52:	4602      	mov	r2, r0
 8014e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e56:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	69d8      	ldr	r0, [r3, #28]
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e5e:	683a      	ldr	r2, [r7, #0]
 8014e60:	6879      	ldr	r1, [r7, #4]
 8014e62:	f7ff fef4 	bl	8014c4e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d004      	beq.n	8014e78 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e70:	2200      	movs	r2, #0
 8014e72:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014e74:	2300      	movs	r3, #0
 8014e76:	e006      	b.n	8014e86 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d001      	beq.n	8014e84 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014e80:	230b      	movs	r3, #11
 8014e82:	e000      	b.n	8014e86 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e84:	230c      	movs	r3, #12
    }
}
 8014e86:	4618      	mov	r0, r3
 8014e88:	371c      	adds	r7, #28
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e8e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014e8e:	b5b0      	push	{r4, r5, r7, lr}
 8014e90:	b086      	sub	sp, #24
 8014e92:	af02      	add	r7, sp, #8
 8014e94:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f993 2000 	ldrsb.w	r2, [r3]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d103      	bne.n	8014eb4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014eb2:	e026      	b.n	8014f02 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014eb4:	7bfb      	ldrb	r3, [r7, #15]
 8014eb6:	3b01      	subs	r3, #1
 8014eb8:	b2db      	uxtb	r3, r3
 8014eba:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014ec2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d019      	beq.n	8014efe <RegionCommonGetNextLowerTxDr+0x70>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	78d8      	ldrb	r0, [r3, #3]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	6859      	ldr	r1, [r3, #4]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	6892      	ldr	r2, [r2, #8]
 8014ee2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014ee6:	9201      	str	r2, [sp, #4]
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	462b      	mov	r3, r5
 8014eec:	4622      	mov	r2, r4
 8014eee:	f7ff faa2 	bl	8014436 <RegionCommonChanVerifyDr>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	f083 0301 	eor.w	r3, r3, #1
 8014ef8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1da      	bne.n	8014eb4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bdb0      	pop	{r4, r5, r7, pc}

08014f0a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014f0a:	b480      	push	{r7}
 8014f0c:	b083      	sub	sp, #12
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	4603      	mov	r3, r0
 8014f12:	460a      	mov	r2, r1
 8014f14:	71fb      	strb	r3, [r7, #7]
 8014f16:	4613      	mov	r3, r2
 8014f18:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014f1a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f22:	4293      	cmp	r3, r2
 8014f24:	bfb8      	it	lt
 8014f26:	4613      	movlt	r3, r2
 8014f28:	b25b      	sxtb	r3, r3
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bc80      	pop	{r7}
 8014f32:	4770      	bx	lr

08014f34 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014f34:	b480      	push	{r7}
 8014f36:	b083      	sub	sp, #12
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	683a      	ldr	r2, [r7, #0]
 8014f44:	4413      	add	r3, r2
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	4a07      	ldr	r2, [pc, #28]	; (8014f68 <RegionCommonGetBandwidth+0x34>)
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d004      	beq.n	8014f58 <RegionCommonGetBandwidth+0x24>
 8014f4e:	4a07      	ldr	r2, [pc, #28]	; (8014f6c <RegionCommonGetBandwidth+0x38>)
 8014f50:	4293      	cmp	r3, r2
 8014f52:	d003      	beq.n	8014f5c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014f54:	2300      	movs	r3, #0
 8014f56:	e002      	b.n	8014f5e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e000      	b.n	8014f5e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014f5c:	2302      	movs	r3, #2
    }
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	370c      	adds	r7, #12
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bc80      	pop	{r7}
 8014f66:	4770      	bx	lr
 8014f68:	0003d090 	.word	0x0003d090
 8014f6c:	0007a120 	.word	0x0007a120

08014f70 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014f70:	b5b0      	push	{r4, r5, r7, lr}
 8014f72:	b08c      	sub	sp, #48	; 0x30
 8014f74:	af04      	add	r7, sp, #16
 8014f76:	4603      	mov	r3, r0
 8014f78:	6039      	str	r1, [r7, #0]
 8014f7a:	71fb      	strb	r3, [r7, #7]
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8014f80:	4b17      	ldr	r3, [pc, #92]	; (8014fe0 <RegionCommonRxConfigPrint+0x70>)
 8014f82:	f107 0408 	add.w	r4, r7, #8
 8014f86:	461d      	mov	r5, r3
 8014f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f90:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8014f94:	79fb      	ldrb	r3, [r7, #7]
 8014f96:	2b05      	cmp	r3, #5
 8014f98:	d813      	bhi.n	8014fc2 <RegionCommonRxConfigPrint+0x52>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8014f9a:	79fb      	ldrb	r3, [r7, #7]
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	f107 0220 	add.w	r2, r7, #32
 8014fa2:	4413      	add	r3, r2
 8014fa4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8014fa8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014fac:	9202      	str	r2, [sp, #8]
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	9201      	str	r2, [sp, #4]
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	4b0b      	ldr	r3, [pc, #44]	; (8014fe4 <RegionCommonRxConfigPrint+0x74>)
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	2100      	movs	r1, #0
 8014fba:	2002      	movs	r0, #2
 8014fbc:	f005 fb7a 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014fc0:	e00a      	b.n	8014fd8 <RegionCommonRxConfigPrint+0x68>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014fc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	4b06      	ldr	r3, [pc, #24]	; (8014fe8 <RegionCommonRxConfigPrint+0x78>)
 8014fce:	2201      	movs	r2, #1
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	2002      	movs	r0, #2
 8014fd4:	f005 fb6e 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 8014fd8:	bf00      	nop
 8014fda:	3720      	adds	r7, #32
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bdb0      	pop	{r4, r5, r7, pc}
 8014fe0:	0801b4a8 	.word	0x0801b4a8
 8014fe4:	0801b46c 	.word	0x0801b46c
 8014fe8:	0801b48c 	.word	0x0801b48c

08014fec <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af02      	add	r7, sp, #8
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ffc:	9301      	str	r3, [sp, #4]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	9300      	str	r3, [sp, #0]
 8015002:	4b05      	ldr	r3, [pc, #20]	; (8015018 <RegionCommonTxConfigPrint+0x2c>)
 8015004:	2201      	movs	r2, #1
 8015006:	2100      	movs	r1, #0
 8015008:	2002      	movs	r0, #2
 801500a:	f005 fb53 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
}
 801500e:	bf00      	nop
 8015010:	3708      	adds	r7, #8
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	0801b4c0 	.word	0x0801b4c0

0801501c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015026:	4b2d      	ldr	r3, [pc, #180]	; (80150dc <VerifyRfFreq+0xc0>)
 8015028:	6a1b      	ldr	r3, [r3, #32]
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	4798      	blx	r3
 801502e:	4603      	mov	r3, r0
 8015030:	f083 0301 	eor.w	r3, r3, #1
 8015034:	b2db      	uxtb	r3, r3
 8015036:	2b00      	cmp	r3, #0
 8015038:	d001      	beq.n	801503e <VerifyRfFreq+0x22>
    {
        return false;
 801503a:	2300      	movs	r3, #0
 801503c:	e04a      	b.n	80150d4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4a27      	ldr	r2, [pc, #156]	; (80150e0 <VerifyRfFreq+0xc4>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d307      	bcc.n	8015056 <VerifyRfFreq+0x3a>
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	4a26      	ldr	r2, [pc, #152]	; (80150e4 <VerifyRfFreq+0xc8>)
 801504a:	4293      	cmp	r3, r2
 801504c:	d803      	bhi.n	8015056 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	2202      	movs	r2, #2
 8015052:	701a      	strb	r2, [r3, #0]
 8015054:	e03d      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	4a22      	ldr	r2, [pc, #136]	; (80150e4 <VerifyRfFreq+0xc8>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d907      	bls.n	801506e <VerifyRfFreq+0x52>
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4a21      	ldr	r2, [pc, #132]	; (80150e8 <VerifyRfFreq+0xcc>)
 8015062:	4293      	cmp	r3, r2
 8015064:	d803      	bhi.n	801506e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	2200      	movs	r2, #0
 801506a:	701a      	strb	r2, [r3, #0]
 801506c:	e031      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	4a1d      	ldr	r2, [pc, #116]	; (80150e8 <VerifyRfFreq+0xcc>)
 8015072:	4293      	cmp	r3, r2
 8015074:	d907      	bls.n	8015086 <VerifyRfFreq+0x6a>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	4a1c      	ldr	r2, [pc, #112]	; (80150ec <VerifyRfFreq+0xd0>)
 801507a:	4293      	cmp	r3, r2
 801507c:	d803      	bhi.n	8015086 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801507e:	683b      	ldr	r3, [r7, #0]
 8015080:	2201      	movs	r2, #1
 8015082:	701a      	strb	r2, [r3, #0]
 8015084:	e025      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4a19      	ldr	r2, [pc, #100]	; (80150f0 <VerifyRfFreq+0xd4>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d907      	bls.n	801509e <VerifyRfFreq+0x82>
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	4a18      	ldr	r2, [pc, #96]	; (80150f4 <VerifyRfFreq+0xd8>)
 8015092:	4293      	cmp	r3, r2
 8015094:	d803      	bhi.n	801509e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	2205      	movs	r2, #5
 801509a:	701a      	strb	r2, [r3, #0]
 801509c:	e019      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	4a15      	ldr	r2, [pc, #84]	; (80150f8 <VerifyRfFreq+0xdc>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d907      	bls.n	80150b6 <VerifyRfFreq+0x9a>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4a14      	ldr	r2, [pc, #80]	; (80150fc <VerifyRfFreq+0xe0>)
 80150aa:	4293      	cmp	r3, r2
 80150ac:	d803      	bhi.n	80150b6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	2203      	movs	r2, #3
 80150b2:	701a      	strb	r2, [r3, #0]
 80150b4:	e00d      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4a11      	ldr	r2, [pc, #68]	; (8015100 <VerifyRfFreq+0xe4>)
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d307      	bcc.n	80150ce <VerifyRfFreq+0xb2>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4a10      	ldr	r2, [pc, #64]	; (8015104 <VerifyRfFreq+0xe8>)
 80150c2:	4293      	cmp	r3, r2
 80150c4:	d803      	bhi.n	80150ce <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	2204      	movs	r2, #4
 80150ca:	701a      	strb	r2, [r3, #0]
 80150cc:	e001      	b.n	80150d2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80150ce:	2300      	movs	r3, #0
 80150d0:	e000      	b.n	80150d4 <VerifyRfFreq+0xb8>
    }
    return true;
 80150d2:	2301      	movs	r3, #1
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	0801ba68 	.word	0x0801ba68
 80150e0:	337055c0 	.word	0x337055c0
 80150e4:	338eda3f 	.word	0x338eda3f
 80150e8:	33bca100 	.word	0x33bca100
 80150ec:	33c5c8c0 	.word	0x33c5c8c0
 80150f0:	33c74f5f 	.word	0x33c74f5f
 80150f4:	33cef080 	.word	0x33cef080
 80150f8:	33d1fdbf 	.word	0x33d1fdbf
 80150fc:	33d5ce50 	.word	0x33d5ce50
 8015100:	33d691a0 	.word	0x33d691a0
 8015104:	33db2580 	.word	0x33db2580

08015108 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015108:	b590      	push	{r4, r7, lr}
 801510a:	b08b      	sub	sp, #44	; 0x2c
 801510c:	af04      	add	r7, sp, #16
 801510e:	4603      	mov	r3, r0
 8015110:	460a      	mov	r2, r1
 8015112:	71fb      	strb	r3, [r7, #7]
 8015114:	4613      	mov	r3, r2
 8015116:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801511c:	4a1f      	ldr	r2, [pc, #124]	; (801519c <GetTimeOnAir+0x94>)
 801511e:	5cd3      	ldrb	r3, [r2, r3]
 8015120:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015126:	491e      	ldr	r1, [pc, #120]	; (80151a0 <GetTimeOnAir+0x98>)
 8015128:	4618      	mov	r0, r3
 801512a:	f7ff ff03 	bl	8014f34 <RegionCommonGetBandwidth>
 801512e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015130:	2300      	movs	r3, #0
 8015132:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015138:	2b07      	cmp	r3, #7
 801513a:	d118      	bne.n	801516e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801513c:	4b19      	ldr	r3, [pc, #100]	; (80151a4 <GetTimeOnAir+0x9c>)
 801513e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015148:	fb02 f303 	mul.w	r3, r2, r3
 801514c:	4619      	mov	r1, r3
 801514e:	88bb      	ldrh	r3, [r7, #4]
 8015150:	b2db      	uxtb	r3, r3
 8015152:	2201      	movs	r2, #1
 8015154:	9203      	str	r2, [sp, #12]
 8015156:	9302      	str	r3, [sp, #8]
 8015158:	2300      	movs	r3, #0
 801515a:	9301      	str	r3, [sp, #4]
 801515c:	2305      	movs	r3, #5
 801515e:	9300      	str	r3, [sp, #0]
 8015160:	2300      	movs	r3, #0
 8015162:	460a      	mov	r2, r1
 8015164:	68f9      	ldr	r1, [r7, #12]
 8015166:	2000      	movs	r0, #0
 8015168:	47a0      	blx	r4
 801516a:	6178      	str	r0, [r7, #20]
 801516c:	e011      	b.n	8015192 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801516e:	4b0d      	ldr	r3, [pc, #52]	; (80151a4 <GetTimeOnAir+0x9c>)
 8015170:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015172:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015176:	88bb      	ldrh	r3, [r7, #4]
 8015178:	b2db      	uxtb	r3, r3
 801517a:	2101      	movs	r1, #1
 801517c:	9103      	str	r1, [sp, #12]
 801517e:	9302      	str	r3, [sp, #8]
 8015180:	2300      	movs	r3, #0
 8015182:	9301      	str	r3, [sp, #4]
 8015184:	2308      	movs	r3, #8
 8015186:	9300      	str	r3, [sp, #0]
 8015188:	2301      	movs	r3, #1
 801518a:	68f9      	ldr	r1, [r7, #12]
 801518c:	2001      	movs	r0, #1
 801518e:	47a0      	blx	r4
 8015190:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015192:	697b      	ldr	r3, [r7, #20]
}
 8015194:	4618      	mov	r0, r3
 8015196:	371c      	adds	r7, #28
 8015198:	46bd      	mov	sp, r7
 801519a:	bd90      	pop	{r4, r7, pc}
 801519c:	0801ba30 	.word	0x0801ba30
 80151a0:	0801ba38 	.word	0x0801ba38
 80151a4:	0801ba68 	.word	0x0801ba68

080151a8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b088      	sub	sp, #32
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80151b0:	2300      	movs	r3, #0
 80151b2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	3b01      	subs	r3, #1
 80151ba:	2b38      	cmp	r3, #56	; 0x38
 80151bc:	f200 8125 	bhi.w	801540a <RegionEU868GetPhyParam+0x262>
 80151c0:	a201      	add	r2, pc, #4	; (adr r2, 80151c8 <RegionEU868GetPhyParam+0x20>)
 80151c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151c6:	bf00      	nop
 80151c8:	080152ad 	.word	0x080152ad
 80151cc:	080152b3 	.word	0x080152b3
 80151d0:	0801540b 	.word	0x0801540b
 80151d4:	0801540b 	.word	0x0801540b
 80151d8:	0801540b 	.word	0x0801540b
 80151dc:	080152b9 	.word	0x080152b9
 80151e0:	0801540b 	.word	0x0801540b
 80151e4:	080152f1 	.word	0x080152f1
 80151e8:	0801540b 	.word	0x0801540b
 80151ec:	080152f7 	.word	0x080152f7
 80151f0:	080152fd 	.word	0x080152fd
 80151f4:	08015303 	.word	0x08015303
 80151f8:	08015309 	.word	0x08015309
 80151fc:	08015319 	.word	0x08015319
 8015200:	08015329 	.word	0x08015329
 8015204:	0801532f 	.word	0x0801532f
 8015208:	08015337 	.word	0x08015337
 801520c:	0801533f 	.word	0x0801533f
 8015210:	08015347 	.word	0x08015347
 8015214:	0801534f 	.word	0x0801534f
 8015218:	08015357 	.word	0x08015357
 801521c:	0801535f 	.word	0x0801535f
 8015220:	08015373 	.word	0x08015373
 8015224:	08015379 	.word	0x08015379
 8015228:	0801537f 	.word	0x0801537f
 801522c:	08015385 	.word	0x08015385
 8015230:	0801538f 	.word	0x0801538f
 8015234:	08015399 	.word	0x08015399
 8015238:	0801539f 	.word	0x0801539f
 801523c:	080153a7 	.word	0x080153a7
 8015240:	080153ad 	.word	0x080153ad
 8015244:	080153b3 	.word	0x080153b3
 8015248:	080153bb 	.word	0x080153bb
 801524c:	080152bf 	.word	0x080152bf
 8015250:	0801540b 	.word	0x0801540b
 8015254:	0801540b 	.word	0x0801540b
 8015258:	0801540b 	.word	0x0801540b
 801525c:	0801540b 	.word	0x0801540b
 8015260:	0801540b 	.word	0x0801540b
 8015264:	0801540b 	.word	0x0801540b
 8015268:	0801540b 	.word	0x0801540b
 801526c:	0801540b 	.word	0x0801540b
 8015270:	0801540b 	.word	0x0801540b
 8015274:	0801540b 	.word	0x0801540b
 8015278:	0801540b 	.word	0x0801540b
 801527c:	0801540b 	.word	0x0801540b
 8015280:	0801540b 	.word	0x0801540b
 8015284:	080153c1 	.word	0x080153c1
 8015288:	080153c7 	.word	0x080153c7
 801528c:	080153d5 	.word	0x080153d5
 8015290:	0801540b 	.word	0x0801540b
 8015294:	0801540b 	.word	0x0801540b
 8015298:	080153db 	.word	0x080153db
 801529c:	080153e1 	.word	0x080153e1
 80152a0:	0801540b 	.word	0x0801540b
 80152a4:	080153e7 	.word	0x080153e7
 80152a8:	080153f7 	.word	0x080153f7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80152ac:	2300      	movs	r3, #0
 80152ae:	61bb      	str	r3, [r7, #24]
            break;
 80152b0:	e0ac      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80152b2:	2300      	movs	r3, #0
 80152b4:	61bb      	str	r3, [r7, #24]
            break;
 80152b6:	e0a9      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80152b8:	2300      	movs	r3, #0
 80152ba:	61bb      	str	r3, [r7, #24]
            break;
 80152bc:	e0a6      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152c4:	733b      	strb	r3, [r7, #12]
 80152c6:	2307      	movs	r3, #7
 80152c8:	737b      	strb	r3, [r7, #13]
 80152ca:	2300      	movs	r3, #0
 80152cc:	73bb      	strb	r3, [r7, #14]
 80152ce:	2310      	movs	r3, #16
 80152d0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80152d2:	4b52      	ldr	r3, [pc, #328]	; (801541c <RegionEU868GetPhyParam+0x274>)
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	33c0      	adds	r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152d8:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80152da:	4b50      	ldr	r3, [pc, #320]	; (801541c <RegionEU868GetPhyParam+0x274>)
 80152dc:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80152de:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80152e0:	f107 030c 	add.w	r3, r7, #12
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7ff fdd2 	bl	8014e8e <RegionCommonGetNextLowerTxDr>
 80152ea:	4603      	mov	r3, r0
 80152ec:	61bb      	str	r3, [r7, #24]
            break;
 80152ee:	e08d      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80152f0:	2300      	movs	r3, #0
 80152f2:	61bb      	str	r3, [r7, #24]
            break;
 80152f4:	e08a      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80152f6:	2300      	movs	r3, #0
 80152f8:	61bb      	str	r3, [r7, #24]
            break;
 80152fa:	e087      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80152fc:	2340      	movs	r3, #64	; 0x40
 80152fe:	61bb      	str	r3, [r7, #24]
            break;
 8015300:	e084      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015302:	2320      	movs	r3, #32
 8015304:	61bb      	str	r3, [r7, #24]
            break;
 8015306:	e081      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801530e:	461a      	mov	r2, r3
 8015310:	4b43      	ldr	r3, [pc, #268]	; (8015420 <RegionEU868GetPhyParam+0x278>)
 8015312:	5c9b      	ldrb	r3, [r3, r2]
 8015314:	61bb      	str	r3, [r7, #24]
            break;
 8015316:	e079      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801531e:	461a      	mov	r2, r3
 8015320:	4b40      	ldr	r3, [pc, #256]	; (8015424 <RegionEU868GetPhyParam+0x27c>)
 8015322:	5c9b      	ldrb	r3, [r3, r2]
 8015324:	61bb      	str	r3, [r7, #24]
            break;
 8015326:	e071      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015328:	2301      	movs	r3, #1
 801532a:	61bb      	str	r3, [r7, #24]
            break;
 801532c:	e06e      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801532e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015332:	61bb      	str	r3, [r7, #24]
            break;
 8015334:	e06a      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801533a:	61bb      	str	r3, [r7, #24]
            break;
 801533c:	e066      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801533e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015342:	61bb      	str	r3, [r7, #24]
            break;
 8015344:	e062      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015346:	f241 3388 	movw	r3, #5000	; 0x1388
 801534a:	61bb      	str	r3, [r7, #24]
            break;
 801534c:	e05e      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801534e:	f241 7370 	movw	r3, #6000	; 0x1770
 8015352:	61bb      	str	r3, [r7, #24]
            break;
 8015354:	e05a      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8015356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801535a:	61bb      	str	r3, [r7, #24]
            break;
 801535c:	e056      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801535e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015362:	4831      	ldr	r0, [pc, #196]	; (8015428 <RegionEU868GetPhyParam+0x280>)
 8015364:	f001 f874 	bl	8016450 <randr>
 8015368:	4603      	mov	r3, r0
 801536a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801536e:	61bb      	str	r3, [r7, #24]
            break;
 8015370:	e04c      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015372:	2300      	movs	r3, #0
 8015374:	61bb      	str	r3, [r7, #24]
            break;
 8015376:	e049      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8015378:	4b2c      	ldr	r3, [pc, #176]	; (801542c <RegionEU868GetPhyParam+0x284>)
 801537a:	61bb      	str	r3, [r7, #24]
            break;
 801537c:	e046      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801537e:	2300      	movs	r3, #0
 8015380:	61bb      	str	r3, [r7, #24]
            break;
 8015382:	e043      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015384:	4b25      	ldr	r3, [pc, #148]	; (801541c <RegionEU868GetPhyParam+0x274>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	33c0      	adds	r3, #192	; 0xc0
 801538a:	61bb      	str	r3, [r7, #24]
            break;
 801538c:	e03e      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801538e:	4b23      	ldr	r3, [pc, #140]	; (801541c <RegionEU868GetPhyParam+0x274>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	33c2      	adds	r3, #194	; 0xc2
 8015394:	61bb      	str	r3, [r7, #24]
            break;
 8015396:	e039      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015398:	2310      	movs	r3, #16
 801539a:	61bb      	str	r3, [r7, #24]
            break;
 801539c:	e036      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801539e:	4b1f      	ldr	r3, [pc, #124]	; (801541c <RegionEU868GetPhyParam+0x274>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	61bb      	str	r3, [r7, #24]
            break;
 80153a4:	e032      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80153a6:	2300      	movs	r3, #0
 80153a8:	61bb      	str	r3, [r7, #24]
            break;
 80153aa:	e02f      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80153ac:	2300      	movs	r3, #0
 80153ae:	61bb      	str	r3, [r7, #24]
            break;
 80153b0:	e02c      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80153b2:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80153b6:	61bb      	str	r3, [r7, #24]
            break;
 80153b8:	e028      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80153ba:	4b1d      	ldr	r3, [pc, #116]	; (8015430 <RegionEU868GetPhyParam+0x288>)
 80153bc:	61bb      	str	r3, [r7, #24]
            break;
 80153be:	e025      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80153c0:	4b1a      	ldr	r3, [pc, #104]	; (801542c <RegionEU868GetPhyParam+0x284>)
 80153c2:	61bb      	str	r3, [r7, #24]
            break;
 80153c4:	e022      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80153c6:	2311      	movs	r3, #17
 80153c8:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80153ca:	2302      	movs	r3, #2
 80153cc:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80153ce:	2300      	movs	r3, #0
 80153d0:	76bb      	strb	r3, [r7, #26]
            break;
 80153d2:	e01b      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80153d4:	2303      	movs	r3, #3
 80153d6:	61bb      	str	r3, [r7, #24]
            break;
 80153d8:	e018      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80153da:	4b14      	ldr	r3, [pc, #80]	; (801542c <RegionEU868GetPhyParam+0x284>)
 80153dc:	61bb      	str	r3, [r7, #24]
            break;
 80153de:	e015      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80153e0:	2303      	movs	r3, #3
 80153e2:	61bb      	str	r3, [r7, #24]
            break;
 80153e4:	e012      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153ec:	461a      	mov	r2, r3
 80153ee:	4b11      	ldr	r3, [pc, #68]	; (8015434 <RegionEU868GetPhyParam+0x28c>)
 80153f0:	5c9b      	ldrb	r3, [r3, r2]
 80153f2:	61bb      	str	r3, [r7, #24]
            break;
 80153f4:	e00a      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80153fc:	490e      	ldr	r1, [pc, #56]	; (8015438 <RegionEU868GetPhyParam+0x290>)
 80153fe:	4618      	mov	r0, r3
 8015400:	f7ff fd98 	bl	8014f34 <RegionCommonGetBandwidth>
 8015404:	4603      	mov	r3, r0
 8015406:	61bb      	str	r3, [r7, #24]
            break;
 8015408:	e000      	b.n	801540c <RegionEU868GetPhyParam+0x264>
        }
        default:
        {
            break;
 801540a:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	61fb      	str	r3, [r7, #28]
 8015410:	2300      	movs	r3, #0
 8015412:	69fb      	ldr	r3, [r7, #28]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3720      	adds	r7, #32
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	20000dd4 	.word	0x20000dd4
 8015420:	0801ba58 	.word	0x0801ba58
 8015424:	0801ba60 	.word	0x0801ba60
 8015428:	fffffc18 	.word	0xfffffc18
 801542c:	33d3e608 	.word	0x33d3e608
 8015430:	4009999a 	.word	0x4009999a
 8015434:	0801ba30 	.word	0x0801ba30
 8015438:	0801ba38 	.word	0x0801ba38

0801543c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801543c:	b590      	push	{r4, r7, lr}
 801543e:	b085      	sub	sp, #20
 8015440:	af02      	add	r7, sp, #8
 8015442:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015444:	4b11      	ldr	r3, [pc, #68]	; (801548c <RegionEU868SetBandTxDone+0x50>)
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	4b11      	ldr	r3, [pc, #68]	; (8015490 <RegionEU868SetBandTxDone+0x54>)
 801544a:	6819      	ldr	r1, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	4618      	mov	r0, r3
 8015452:	4603      	mov	r3, r0
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4403      	add	r3, r0
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	440b      	add	r3, r1
 801545c:	3309      	adds	r3, #9
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	4619      	mov	r1, r3
 8015462:	460b      	mov	r3, r1
 8015464:	005b      	lsls	r3, r3, #1
 8015466:	440b      	add	r3, r1
 8015468:	00db      	lsls	r3, r3, #3
 801546a:	18d0      	adds	r0, r2, r3
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6899      	ldr	r1, [r3, #8]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	785c      	ldrb	r4, [r3, #1]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	691a      	ldr	r2, [r3, #16]
 8015478:	9200      	str	r2, [sp, #0]
 801547a:	68db      	ldr	r3, [r3, #12]
 801547c:	4622      	mov	r2, r4
 801547e:	f7ff f8ef 	bl	8014660 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 8015482:	bf00      	nop
 8015484:	370c      	adds	r7, #12
 8015486:	46bd      	mov	sp, r7
 8015488:	bd90      	pop	{r4, r7, pc}
 801548a:	bf00      	nop
 801548c:	20000dd0 	.word	0x20000dd0
 8015490:	20000dd4 	.word	0x20000dd4

08015494 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b0b0      	sub	sp, #192	; 0xc0
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801549c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80154a0:	2290      	movs	r2, #144	; 0x90
 80154a2:	2100      	movs	r1, #0
 80154a4:	4618      	mov	r0, r3
 80154a6:	f005 fba3 	bl	801abf0 <memset>
 80154aa:	2364      	movs	r3, #100	; 0x64
 80154ac:	863b      	strh	r3, [r7, #48]	; 0x30
 80154ae:	2364      	movs	r3, #100	; 0x64
 80154b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80154b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80154b8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80154bc:	230a      	movs	r3, #10
 80154be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80154c2:	2364      	movs	r3, #100	; 0x64
 80154c4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80154c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80154cc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	7a1b      	ldrb	r3, [r3, #8]
 80154d4:	2b02      	cmp	r3, #2
 80154d6:	d05c      	beq.n	8015592 <RegionEU868InitDefaults+0xfe>
 80154d8:	2b02      	cmp	r3, #2
 80154da:	dc69      	bgt.n	80155b0 <RegionEU868InitDefaults+0x11c>
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d002      	beq.n	80154e6 <RegionEU868InitDefaults+0x52>
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d03e      	beq.n	8015562 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80154e4:	e064      	b.n	80155b0 <RegionEU868InitDefaults+0x11c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d061      	beq.n	80155b2 <RegionEU868InitDefaults+0x11e>
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d05d      	beq.n	80155b2 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	4a2f      	ldr	r2, [pc, #188]	; (80155b8 <RegionEU868InitDefaults+0x124>)
 80154fc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	4a2e      	ldr	r2, [pc, #184]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015504:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015506:	4b2c      	ldr	r3, [pc, #176]	; (80155b8 <RegionEU868InitDefaults+0x124>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	4618      	mov	r0, r3
 801550c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015510:	2290      	movs	r2, #144	; 0x90
 8015512:	4619      	mov	r1, r3
 8015514:	f000 ffb3 	bl	801647e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015518:	4b28      	ldr	r3, [pc, #160]	; (80155bc <RegionEU868InitDefaults+0x128>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	4a28      	ldr	r2, [pc, #160]	; (80155c0 <RegionEU868InitDefaults+0x12c>)
 801551e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015524:	4b25      	ldr	r3, [pc, #148]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	4a26      	ldr	r2, [pc, #152]	; (80155c4 <RegionEU868InitDefaults+0x130>)
 801552a:	330c      	adds	r3, #12
 801552c:	ca07      	ldmia	r2, {r0, r1, r2}
 801552e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015532:	4b22      	ldr	r3, [pc, #136]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	4a24      	ldr	r2, [pc, #144]	; (80155c8 <RegionEU868InitDefaults+0x134>)
 8015538:	3318      	adds	r3, #24
 801553a:	ca07      	ldmia	r2, {r0, r1, r2}
 801553c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015540:	4b1e      	ldr	r3, [pc, #120]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	2207      	movs	r2, #7
 8015546:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801554a:	4b1c      	ldr	r3, [pc, #112]	; (80155bc <RegionEU868InitDefaults+0x128>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015552:	4b1a      	ldr	r3, [pc, #104]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	33c2      	adds	r3, #194	; 0xc2
 8015558:	2201      	movs	r2, #1
 801555a:	4619      	mov	r1, r3
 801555c:	f7ff f85a 	bl	8014614 <RegionCommonChanMaskCopy>
 8015560:	e027      	b.n	80155b2 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015562:	4b16      	ldr	r3, [pc, #88]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	2200      	movs	r2, #0
 8015568:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801556a:	4b14      	ldr	r3, [pc, #80]	; (80155bc <RegionEU868InitDefaults+0x128>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2200      	movs	r2, #0
 8015570:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015572:	4b12      	ldr	r3, [pc, #72]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	2200      	movs	r2, #0
 8015578:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801557a:	4b10      	ldr	r3, [pc, #64]	; (80155bc <RegionEU868InitDefaults+0x128>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8015582:	4b0e      	ldr	r3, [pc, #56]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	33c2      	adds	r3, #194	; 0xc2
 8015588:	2201      	movs	r2, #1
 801558a:	4619      	mov	r1, r3
 801558c:	f7ff f842 	bl	8014614 <RegionCommonChanMaskCopy>
            break;
 8015590:	e00f      	b.n	80155b2 <RegionEU868InitDefaults+0x11e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015592:	4b0a      	ldr	r3, [pc, #40]	; (80155bc <RegionEU868InitDefaults+0x128>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 801559a:	4b08      	ldr	r3, [pc, #32]	; (80155bc <RegionEU868InitDefaults+0x128>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 80155a2:	4b06      	ldr	r3, [pc, #24]	; (80155bc <RegionEU868InitDefaults+0x128>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	430a      	orrs	r2, r1
 80155a8:	b292      	uxth	r2, r2
 80155aa:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 80155ae:	e000      	b.n	80155b2 <RegionEU868InitDefaults+0x11e>
            break;
 80155b0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80155b2:	37c0      	adds	r7, #192	; 0xc0
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	20000dd0 	.word	0x20000dd0
 80155bc:	20000dd4 	.word	0x20000dd4
 80155c0:	0801b4dc 	.word	0x0801b4dc
 80155c4:	0801b4e8 	.word	0x0801b4e8
 80155c8:	0801b4f4 	.word	0x0801b4f4

080155cc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b084      	sub	sp, #16
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	460b      	mov	r3, r1
 80155d6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80155d8:	78fb      	ldrb	r3, [r7, #3]
 80155da:	2b0f      	cmp	r3, #15
 80155dc:	d86c      	bhi.n	80156b8 <RegionEU868Verify+0xec>
 80155de:	a201      	add	r2, pc, #4	; (adr r2, 80155e4 <RegionEU868Verify+0x18>)
 80155e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155e4:	08015625 	.word	0x08015625
 80155e8:	080156b9 	.word	0x080156b9
 80155ec:	080156b9 	.word	0x080156b9
 80155f0:	080156b9 	.word	0x080156b9
 80155f4:	080156b9 	.word	0x080156b9
 80155f8:	0801563d 	.word	0x0801563d
 80155fc:	0801565b 	.word	0x0801565b
 8015600:	08015679 	.word	0x08015679
 8015604:	080156b9 	.word	0x080156b9
 8015608:	08015697 	.word	0x08015697
 801560c:	08015697 	.word	0x08015697
 8015610:	080156b9 	.word	0x080156b9
 8015614:	080156b9 	.word	0x080156b9
 8015618:	080156b9 	.word	0x080156b9
 801561c:	080156b9 	.word	0x080156b9
 8015620:	080156b5 	.word	0x080156b5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f107 020f 	add.w	r2, r7, #15
 8015630:	4611      	mov	r1, r2
 8015632:	4618      	mov	r0, r3
 8015634:	f7ff fcf2 	bl	801501c <VerifyRfFreq>
 8015638:	4603      	mov	r3, r0
 801563a:	e03e      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f993 3000 	ldrsb.w	r3, [r3]
 8015642:	2207      	movs	r2, #7
 8015644:	2100      	movs	r1, #0
 8015646:	4618      	mov	r0, r3
 8015648:	f7fe ff67 	bl	801451a <RegionCommonValueInRange>
 801564c:	4603      	mov	r3, r0
 801564e:	2b00      	cmp	r3, #0
 8015650:	bf14      	ite	ne
 8015652:	2301      	movne	r3, #1
 8015654:	2300      	moveq	r3, #0
 8015656:	b2db      	uxtb	r3, r3
 8015658:	e02f      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f993 3000 	ldrsb.w	r3, [r3]
 8015660:	2205      	movs	r2, #5
 8015662:	2100      	movs	r1, #0
 8015664:	4618      	mov	r0, r3
 8015666:	f7fe ff58 	bl	801451a <RegionCommonValueInRange>
 801566a:	4603      	mov	r3, r0
 801566c:	2b00      	cmp	r3, #0
 801566e:	bf14      	ite	ne
 8015670:	2301      	movne	r3, #1
 8015672:	2300      	moveq	r3, #0
 8015674:	b2db      	uxtb	r3, r3
 8015676:	e020      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f993 3000 	ldrsb.w	r3, [r3]
 801567e:	2207      	movs	r2, #7
 8015680:	2100      	movs	r1, #0
 8015682:	4618      	mov	r0, r3
 8015684:	f7fe ff49 	bl	801451a <RegionCommonValueInRange>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	bf14      	ite	ne
 801568e:	2301      	movne	r3, #1
 8015690:	2300      	moveq	r3, #0
 8015692:	b2db      	uxtb	r3, r3
 8015694:	e011      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f993 3000 	ldrsb.w	r3, [r3]
 801569c:	2207      	movs	r2, #7
 801569e:	2100      	movs	r1, #0
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7fe ff3a 	bl	801451a <RegionCommonValueInRange>
 80156a6:	4603      	mov	r3, r0
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	bf14      	ite	ne
 80156ac:	2301      	movne	r3, #1
 80156ae:	2300      	moveq	r3, #0
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	e002      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80156b4:	2301      	movs	r3, #1
 80156b6:	e000      	b.n	80156ba <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80156b8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3710      	adds	r7, #16
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop

080156c4 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08a      	sub	sp, #40	; 0x28
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80156cc:	2350      	movs	r3, #80	; 0x50
 80156ce:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	791b      	ldrb	r3, [r3, #4]
 80156d6:	2b10      	cmp	r3, #16
 80156d8:	d162      	bne.n	80157a0 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	330f      	adds	r3, #15
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d15e      	bne.n	80157a4 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80156e6:	2300      	movs	r3, #0
 80156e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156ec:	2303      	movs	r3, #3
 80156ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156f2:	e050      	b.n	8015796 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80156f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156f8:	2b07      	cmp	r3, #7
 80156fa:	d824      	bhi.n	8015746 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681a      	ldr	r2, [r3, #0]
 8015700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015704:	4413      	add	r3, r2
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801570a:	69ba      	ldr	r2, [r7, #24]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6819      	ldr	r1, [r3, #0]
 8015710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015714:	3301      	adds	r3, #1
 8015716:	440b      	add	r3, r1
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	021b      	lsls	r3, r3, #8
 801571c:	4313      	orrs	r3, r2
 801571e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015720:	69ba      	ldr	r2, [r7, #24]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6819      	ldr	r1, [r3, #0]
 8015726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801572a:	3302      	adds	r3, #2
 801572c:	440b      	add	r3, r1
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	041b      	lsls	r3, r3, #16
 8015732:	4313      	orrs	r3, r2
 8015734:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015736:	69bb      	ldr	r3, [r7, #24]
 8015738:	2264      	movs	r2, #100	; 0x64
 801573a:	fb02 f303 	mul.w	r3, r2, r3
 801573e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015740:	2300      	movs	r3, #0
 8015742:	61fb      	str	r3, [r7, #28]
 8015744:	e006      	b.n	8015754 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015746:	2300      	movs	r3, #0
 8015748:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801574a:	2300      	movs	r3, #0
 801574c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015750:	2300      	movs	r3, #0
 8015752:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d00b      	beq.n	8015772 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801575a:	f107 0318 	add.w	r3, r7, #24
 801575e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015764:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015766:	f107 0310 	add.w	r3, r7, #16
 801576a:	4618      	mov	r0, r3
 801576c:	f000 fd0e 	bl	801618c <RegionEU868ChannelAdd>
 8015770:	e007      	b.n	8015782 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015776:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015778:	f107 030c 	add.w	r3, r7, #12
 801577c:	4618      	mov	r0, r3
 801577e:	f000 fda7 	bl	80162d0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015786:	3303      	adds	r3, #3
 8015788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801578c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015790:	3301      	adds	r3, #1
 8015792:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015796:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801579a:	2b0f      	cmp	r3, #15
 801579c:	d9aa      	bls.n	80156f4 <RegionEU868ApplyCFList+0x30>
 801579e:	e002      	b.n	80157a6 <RegionEU868ApplyCFList+0xe2>
        return;
 80157a0:	bf00      	nop
 80157a2:	e000      	b.n	80157a6 <RegionEU868ApplyCFList+0xe2>
        return;
 80157a4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80157a6:	3728      	adds	r7, #40	; 0x28
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}

080157ac <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	791b      	ldrb	r3, [r3, #4]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d002      	beq.n	80157c2 <RegionEU868ChanMaskSet+0x16>
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d00b      	beq.n	80157d8 <RegionEU868ChanMaskSet+0x2c>
 80157c0:	e015      	b.n	80157ee <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80157c2:	4b0e      	ldr	r3, [pc, #56]	; (80157fc <RegionEU868ChanMaskSet+0x50>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2201      	movs	r2, #1
 80157d0:	4619      	mov	r1, r3
 80157d2:	f7fe ff1f 	bl	8014614 <RegionCommonChanMaskCopy>
            break;
 80157d6:	e00c      	b.n	80157f2 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80157d8:	4b08      	ldr	r3, [pc, #32]	; (80157fc <RegionEU868ChanMaskSet+0x50>)
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	2201      	movs	r2, #1
 80157e6:	4619      	mov	r1, r3
 80157e8:	f7fe ff14 	bl	8014614 <RegionCommonChanMaskCopy>
            break;
 80157ec:	e001      	b.n	80157f2 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80157ee:	2300      	movs	r3, #0
 80157f0:	e000      	b.n	80157f4 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80157f2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80157f4:	4618      	mov	r0, r3
 80157f6:	3708      	adds	r7, #8
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	20000dd4 	.word	0x20000dd4

08015800 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b088      	sub	sp, #32
 8015804:	af02      	add	r7, sp, #8
 8015806:	60ba      	str	r2, [r7, #8]
 8015808:	607b      	str	r3, [r7, #4]
 801580a:	4603      	mov	r3, r0
 801580c:	73fb      	strb	r3, [r7, #15]
 801580e:	460b      	mov	r3, r1
 8015810:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015812:	2300      	movs	r3, #0
 8015814:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801581a:	2b07      	cmp	r3, #7
 801581c:	bfa8      	it	ge
 801581e:	2307      	movge	r3, #7
 8015820:	b25a      	sxtb	r2, r3
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801582c:	491e      	ldr	r1, [pc, #120]	; (80158a8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801582e:	4618      	mov	r0, r3
 8015830:	f7ff fb80 	bl	8014f34 <RegionCommonGetBandwidth>
 8015834:	4603      	mov	r3, r0
 8015836:	b2da      	uxtb	r2, r3
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015842:	2b07      	cmp	r3, #7
 8015844:	d10a      	bne.n	801585c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801584c:	461a      	mov	r2, r3
 801584e:	4b17      	ldr	r3, [pc, #92]	; (80158ac <RegionEU868ComputeRxWindowParameters+0xac>)
 8015850:	5c9b      	ldrb	r3, [r3, r2]
 8015852:	4618      	mov	r0, r3
 8015854:	f7ff f902 	bl	8014a5c <RegionCommonComputeSymbolTimeFsk>
 8015858:	6178      	str	r0, [r7, #20]
 801585a:	e011      	b.n	8015880 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015862:	461a      	mov	r2, r3
 8015864:	4b11      	ldr	r3, [pc, #68]	; (80158ac <RegionEU868ComputeRxWindowParameters+0xac>)
 8015866:	5c9a      	ldrb	r2, [r3, r2]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801586e:	4619      	mov	r1, r3
 8015870:	4b0d      	ldr	r3, [pc, #52]	; (80158a8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015876:	4619      	mov	r1, r3
 8015878:	4610      	mov	r0, r2
 801587a:	f7ff f8d9 	bl	8014a30 <RegionCommonComputeSymbolTimeLoRa>
 801587e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015880:	4b0b      	ldr	r3, [pc, #44]	; (80158b0 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015884:	4798      	blx	r3
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	3308      	adds	r3, #8
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	320c      	adds	r2, #12
 801588e:	7bb9      	ldrb	r1, [r7, #14]
 8015890:	9201      	str	r2, [sp, #4]
 8015892:	9300      	str	r3, [sp, #0]
 8015894:	4603      	mov	r3, r0
 8015896:	68ba      	ldr	r2, [r7, #8]
 8015898:	6978      	ldr	r0, [r7, #20]
 801589a:	f7ff f8ef 	bl	8014a7c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801589e:	bf00      	nop
 80158a0:	3718      	adds	r7, #24
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}
 80158a6:	bf00      	nop
 80158a8:	0801ba38 	.word	0x0801ba38
 80158ac:	0801ba30 	.word	0x0801ba30
 80158b0:	0801ba68 	.word	0x0801ba68

080158b4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80158b4:	b5b0      	push	{r4, r5, r7, lr}
 80158b6:	b090      	sub	sp, #64	; 0x40
 80158b8:	af0a      	add	r7, sp, #40	; 0x28
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	785b      	ldrb	r3, [r3, #1]
 80158c2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80158c4:	2300      	movs	r3, #0
 80158c6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80158c8:	2300      	movs	r3, #0
 80158ca:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	685b      	ldr	r3, [r3, #4]
 80158d0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80158d2:	4b5a      	ldr	r3, [pc, #360]	; (8015a3c <RegionEU868RxConfig+0x188>)
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	4798      	blx	r3
 80158d8:	4603      	mov	r3, r0
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d001      	beq.n	80158e2 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80158de:	2300      	movs	r3, #0
 80158e0:	e0a8      	b.n	8015a34 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	7cdb      	ldrb	r3, [r3, #19]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d126      	bne.n	8015938 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80158ea:	4b55      	ldr	r3, [pc, #340]	; (8015a40 <RegionEU868RxConfig+0x18c>)
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	4619      	mov	r1, r3
 80158f4:	460b      	mov	r3, r1
 80158f6:	005b      	lsls	r3, r3, #1
 80158f8:	440b      	add	r3, r1
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	4413      	add	r3, r2
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015902:	4b4f      	ldr	r3, [pc, #316]	; (8015a40 <RegionEU868RxConfig+0x18c>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	781b      	ldrb	r3, [r3, #0]
 801590a:	4619      	mov	r1, r3
 801590c:	460b      	mov	r3, r1
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	440b      	add	r3, r1
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	4413      	add	r3, r2
 8015916:	3304      	adds	r3, #4
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d00c      	beq.n	8015938 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801591e:	4b48      	ldr	r3, [pc, #288]	; (8015a40 <RegionEU868RxConfig+0x18c>)
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	4619      	mov	r1, r3
 8015928:	460b      	mov	r3, r1
 801592a:	005b      	lsls	r3, r3, #1
 801592c:	440b      	add	r3, r1
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	4413      	add	r3, r2
 8015932:	3304      	adds	r3, #4
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801593c:	4a41      	ldr	r2, [pc, #260]	; (8015a44 <RegionEU868RxConfig+0x190>)
 801593e:	5cd3      	ldrb	r3, [r2, r3]
 8015940:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015942:	4b3e      	ldr	r3, [pc, #248]	; (8015a3c <RegionEU868RxConfig+0x188>)
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	6938      	ldr	r0, [r7, #16]
 8015948:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801594a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801594e:	2b07      	cmp	r3, #7
 8015950:	d128      	bne.n	80159a4 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015952:	2300      	movs	r3, #0
 8015954:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015956:	4b39      	ldr	r3, [pc, #228]	; (8015a3c <RegionEU868RxConfig+0x188>)
 8015958:	699c      	ldr	r4, [r3, #24]
 801595a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801595e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015962:	fb02 f303 	mul.w	r3, r2, r3
 8015966:	4619      	mov	r1, r3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	689b      	ldr	r3, [r3, #8]
 801596c:	b29b      	uxth	r3, r3
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	7c92      	ldrb	r2, [r2, #18]
 8015972:	7df8      	ldrb	r0, [r7, #23]
 8015974:	9209      	str	r2, [sp, #36]	; 0x24
 8015976:	2200      	movs	r2, #0
 8015978:	9208      	str	r2, [sp, #32]
 801597a:	2200      	movs	r2, #0
 801597c:	9207      	str	r2, [sp, #28]
 801597e:	2200      	movs	r2, #0
 8015980:	9206      	str	r2, [sp, #24]
 8015982:	2201      	movs	r2, #1
 8015984:	9205      	str	r2, [sp, #20]
 8015986:	2200      	movs	r2, #0
 8015988:	9204      	str	r2, [sp, #16]
 801598a:	2200      	movs	r2, #0
 801598c:	9203      	str	r2, [sp, #12]
 801598e:	9302      	str	r3, [sp, #8]
 8015990:	2305      	movs	r3, #5
 8015992:	9301      	str	r3, [sp, #4]
 8015994:	4b2c      	ldr	r3, [pc, #176]	; (8015a48 <RegionEU868RxConfig+0x194>)
 8015996:	9300      	str	r3, [sp, #0]
 8015998:	2300      	movs	r3, #0
 801599a:	460a      	mov	r2, r1
 801599c:	f24c 3150 	movw	r1, #50000	; 0xc350
 80159a0:	47a0      	blx	r4
 80159a2:	e024      	b.n	80159ee <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80159a4:	2301      	movs	r3, #1
 80159a6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80159a8:	4b24      	ldr	r3, [pc, #144]	; (8015a3c <RegionEU868RxConfig+0x188>)
 80159aa:	699c      	ldr	r4, [r3, #24]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	789b      	ldrb	r3, [r3, #2]
 80159b0:	461d      	mov	r5, r3
 80159b2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	689b      	ldr	r3, [r3, #8]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	7c92      	ldrb	r2, [r2, #18]
 80159c0:	7df8      	ldrb	r0, [r7, #23]
 80159c2:	9209      	str	r2, [sp, #36]	; 0x24
 80159c4:	2201      	movs	r2, #1
 80159c6:	9208      	str	r2, [sp, #32]
 80159c8:	2200      	movs	r2, #0
 80159ca:	9207      	str	r2, [sp, #28]
 80159cc:	2200      	movs	r2, #0
 80159ce:	9206      	str	r2, [sp, #24]
 80159d0:	2200      	movs	r2, #0
 80159d2:	9205      	str	r2, [sp, #20]
 80159d4:	2200      	movs	r2, #0
 80159d6:	9204      	str	r2, [sp, #16]
 80159d8:	2200      	movs	r2, #0
 80159da:	9203      	str	r2, [sp, #12]
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	2308      	movs	r3, #8
 80159e0:	9301      	str	r3, [sp, #4]
 80159e2:	2300      	movs	r3, #0
 80159e4:	9300      	str	r3, [sp, #0]
 80159e6:	2301      	movs	r3, #1
 80159e8:	460a      	mov	r2, r1
 80159ea:	4629      	mov	r1, r5
 80159ec:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	7c5b      	ldrb	r3, [r3, #17]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d005      	beq.n	8015a02 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80159f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159fa:	4a14      	ldr	r2, [pc, #80]	; (8015a4c <RegionEU868RxConfig+0x198>)
 80159fc:	5cd3      	ldrb	r3, [r2, r3]
 80159fe:	75bb      	strb	r3, [r7, #22]
 8015a00:	e004      	b.n	8015a0c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8015a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a06:	4a12      	ldr	r2, [pc, #72]	; (8015a50 <RegionEU868RxConfig+0x19c>)
 8015a08:	5cd3      	ldrb	r3, [r2, r3]
 8015a0a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015a0c:	4b0b      	ldr	r3, [pc, #44]	; (8015a3c <RegionEU868RxConfig+0x188>)
 8015a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a10:	7dba      	ldrb	r2, [r7, #22]
 8015a12:	320d      	adds	r2, #13
 8015a14:	b2d1      	uxtb	r1, r2
 8015a16:	7dfa      	ldrb	r2, [r7, #23]
 8015a18:	4610      	mov	r0, r2
 8015a1a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	7cdb      	ldrb	r3, [r3, #19]
 8015a20:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015a24:	6939      	ldr	r1, [r7, #16]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7ff faa2 	bl	8014f70 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	7bfa      	ldrb	r2, [r7, #15]
 8015a30:	701a      	strb	r2, [r3, #0]
    return true;
 8015a32:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3718      	adds	r7, #24
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8015a3c:	0801ba68 	.word	0x0801ba68
 8015a40:	20000dd4 	.word	0x20000dd4
 8015a44:	0801ba30 	.word	0x0801ba30
 8015a48:	00014585 	.word	0x00014585
 8015a4c:	0801ba60 	.word	0x0801ba60
 8015a50:	0801ba58 	.word	0x0801ba58

08015a54 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015a54:	b590      	push	{r4, r7, lr}
 8015a56:	b093      	sub	sp, #76	; 0x4c
 8015a58:	af0a      	add	r7, sp, #40	; 0x28
 8015a5a:	60f8      	str	r0, [r7, #12]
 8015a5c:	60b9      	str	r1, [r7, #8]
 8015a5e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a66:	461a      	mov	r2, r3
 8015a68:	4b5d      	ldr	r3, [pc, #372]	; (8015be0 <RegionEU868TxConfig+0x18c>)
 8015a6a:	5c9b      	ldrb	r3, [r3, r2]
 8015a6c:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015a74:	4b5b      	ldr	r3, [pc, #364]	; (8015be4 <RegionEU868TxConfig+0x190>)
 8015a76:	681a      	ldr	r2, [r3, #0]
 8015a78:	4b5b      	ldr	r3, [pc, #364]	; (8015be8 <RegionEU868TxConfig+0x194>)
 8015a7a:	6819      	ldr	r1, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	461c      	mov	r4, r3
 8015a82:	4623      	mov	r3, r4
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4423      	add	r3, r4
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	440b      	add	r3, r1
 8015a8c:	3309      	adds	r3, #9
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	4619      	mov	r1, r3
 8015a92:	460b      	mov	r3, r1
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	440b      	add	r3, r1
 8015a98:	00db      	lsls	r3, r3, #3
 8015a9a:	4413      	add	r3, r2
 8015a9c:	3302      	adds	r3, #2
 8015a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	f7ff fa31 	bl	8014f0a <RegionCommonLimitTxPower>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ab2:	494e      	ldr	r1, [pc, #312]	; (8015bec <RegionEU868TxConfig+0x198>)
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff fa3d 	bl	8014f34 <RegionCommonGetBandwidth>
 8015aba:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015abc:	2300      	movs	r3, #0
 8015abe:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6859      	ldr	r1, [r3, #4]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	689a      	ldr	r2, [r3, #8]
 8015ac8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7ff f88d 	bl	8014bec <RegionCommonComputeTxPower>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015ad6:	4b46      	ldr	r3, [pc, #280]	; (8015bf0 <RegionEU868TxConfig+0x19c>)
 8015ad8:	68da      	ldr	r2, [r3, #12]
 8015ada:	4b43      	ldr	r3, [pc, #268]	; (8015be8 <RegionEU868TxConfig+0x194>)
 8015adc:	6819      	ldr	r1, [r3, #0]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	781b      	ldrb	r3, [r3, #0]
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	005b      	lsls	r3, r3, #1
 8015ae8:	4403      	add	r3, r0
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	440b      	add	r3, r1
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	4618      	mov	r0, r3
 8015af2:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015afa:	2b07      	cmp	r3, #7
 8015afc:	d124      	bne.n	8015b48 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015b02:	4b3b      	ldr	r3, [pc, #236]	; (8015bf0 <RegionEU868TxConfig+0x19c>)
 8015b04:	69dc      	ldr	r4, [r3, #28]
 8015b06:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015b0e:	fb02 f303 	mul.w	r3, r2, r3
 8015b12:	461a      	mov	r2, r3
 8015b14:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015b18:	7ff8      	ldrb	r0, [r7, #31]
 8015b1a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8015b1e:	9308      	str	r3, [sp, #32]
 8015b20:	2300      	movs	r3, #0
 8015b22:	9307      	str	r3, [sp, #28]
 8015b24:	2300      	movs	r3, #0
 8015b26:	9306      	str	r3, [sp, #24]
 8015b28:	2300      	movs	r3, #0
 8015b2a:	9305      	str	r3, [sp, #20]
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	9304      	str	r3, [sp, #16]
 8015b30:	2300      	movs	r3, #0
 8015b32:	9303      	str	r3, [sp, #12]
 8015b34:	2305      	movs	r3, #5
 8015b36:	9302      	str	r3, [sp, #8]
 8015b38:	2300      	movs	r3, #0
 8015b3a:	9301      	str	r3, [sp, #4]
 8015b3c:	9200      	str	r2, [sp, #0]
 8015b3e:	69bb      	ldr	r3, [r7, #24]
 8015b40:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8015b44:	47a0      	blx	r4
 8015b46:	e01d      	b.n	8015b84 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015b48:	2301      	movs	r3, #1
 8015b4a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015b4c:	4b28      	ldr	r3, [pc, #160]	; (8015bf0 <RegionEU868TxConfig+0x19c>)
 8015b4e:	69dc      	ldr	r4, [r3, #28]
 8015b50:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015b54:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015b58:	7ff8      	ldrb	r0, [r7, #31]
 8015b5a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8015b5e:	9208      	str	r2, [sp, #32]
 8015b60:	2200      	movs	r2, #0
 8015b62:	9207      	str	r2, [sp, #28]
 8015b64:	2200      	movs	r2, #0
 8015b66:	9206      	str	r2, [sp, #24]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	9205      	str	r2, [sp, #20]
 8015b6c:	2201      	movs	r2, #1
 8015b6e:	9204      	str	r2, [sp, #16]
 8015b70:	2200      	movs	r2, #0
 8015b72:	9203      	str	r2, [sp, #12]
 8015b74:	2208      	movs	r2, #8
 8015b76:	9202      	str	r2, [sp, #8]
 8015b78:	2201      	movs	r2, #1
 8015b7a:	9201      	str	r2, [sp, #4]
 8015b7c:	9300      	str	r3, [sp, #0]
 8015b7e:	69bb      	ldr	r3, [r7, #24]
 8015b80:	2200      	movs	r2, #0
 8015b82:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015b84:	4b18      	ldr	r3, [pc, #96]	; (8015be8 <RegionEU868TxConfig+0x194>)
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	460b      	mov	r3, r1
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	440b      	add	r3, r1
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	4413      	add	r3, r2
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	4610      	mov	r0, r2
 8015ba4:	f7ff fa22 	bl	8014fec <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	899b      	ldrh	r3, [r3, #12]
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	4610      	mov	r0, r2
 8015bb6:	f7ff faa7 	bl	8015108 <GetTimeOnAir>
 8015bba:	4602      	mov	r2, r0
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015bc0:	4b0b      	ldr	r3, [pc, #44]	; (8015bf0 <RegionEU868TxConfig+0x19c>)
 8015bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bc4:	68fa      	ldr	r2, [r7, #12]
 8015bc6:	8992      	ldrh	r2, [r2, #12]
 8015bc8:	b2d1      	uxtb	r1, r2
 8015bca:	7ffa      	ldrb	r2, [r7, #31]
 8015bcc:	4610      	mov	r0, r2
 8015bce:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	7f7a      	ldrb	r2, [r7, #29]
 8015bd4:	701a      	strb	r2, [r3, #0]
    return true;
 8015bd6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3724      	adds	r7, #36	; 0x24
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd90      	pop	{r4, r7, pc}
 8015be0:	0801ba30 	.word	0x0801ba30
 8015be4:	20000dd0 	.word	0x20000dd0
 8015be8:	20000dd4 	.word	0x20000dd4
 8015bec:	0801ba38 	.word	0x0801ba38
 8015bf0:	0801ba68 	.word	0x0801ba68

08015bf4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015bf4:	b590      	push	{r4, r7, lr}
 8015bf6:	b093      	sub	sp, #76	; 0x4c
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]
 8015c00:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015c02:	2307      	movs	r3, #7
 8015c04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015c08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	601a      	str	r2, [r3, #0]
 8015c10:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015c12:	2300      	movs	r3, #0
 8015c14:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015c22:	e085      	b.n	8015d30 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	685a      	ldr	r2, [r3, #4]
 8015c28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015c2c:	4413      	add	r3, r2
 8015c2e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015c32:	4611      	mov	r1, r2
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7fe fe31 	bl	801489c <RegionCommonParseLinkAdrReq>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8015c40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d07b      	beq.n	8015d40 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015c48:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015c4c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015c50:	4413      	add	r3, r2
 8015c52:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015c56:	2307      	movs	r3, #7
 8015c58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c60:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015c62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d109      	bne.n	8015c7e <RegionEU868LinkAdrReq+0x8a>
 8015c6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d106      	bne.n	8015c7e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015c70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c74:	f023 0301 	bic.w	r3, r3, #1
 8015c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015c7c:	e058      	b.n	8015d30 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d003      	beq.n	8015c8e <RegionEU868LinkAdrReq+0x9a>
 8015c86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015c8a:	2b05      	cmp	r3, #5
 8015c8c:	d903      	bls.n	8015c96 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015c92:	2b06      	cmp	r3, #6
 8015c94:	d906      	bls.n	8015ca4 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015c96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015c9a:	f023 0301 	bic.w	r3, r3, #1
 8015c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015ca2:	e045      	b.n	8015d30 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015caa:	e03d      	b.n	8015d28 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015cac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015cb0:	2b06      	cmp	r3, #6
 8015cb2:	d118      	bne.n	8015ce6 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015cb4:	4b5f      	ldr	r3, [pc, #380]	; (8015e34 <RegionEU868LinkAdrReq+0x240>)
 8015cb6:	6819      	ldr	r1, [r3, #0]
 8015cb8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	4413      	add	r3, r2
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	440b      	add	r3, r1
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d028      	beq.n	8015d1e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015ccc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8015cd6:	b21a      	sxth	r2, r3
 8015cd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015cda:	b21b      	sxth	r3, r3
 8015cdc:	4313      	orrs	r3, r2
 8015cde:	b21b      	sxth	r3, r3
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015ce4:	e01b      	b.n	8015d1e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015ce6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ce8:	461a      	mov	r2, r3
 8015cea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015cee:	fa42 f303 	asr.w	r3, r2, r3
 8015cf2:	f003 0301 	and.w	r3, r3, #1
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d011      	beq.n	8015d1e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015cfa:	4b4e      	ldr	r3, [pc, #312]	; (8015e34 <RegionEU868LinkAdrReq+0x240>)
 8015cfc:	6819      	ldr	r1, [r3, #0]
 8015cfe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8015d02:	4613      	mov	r3, r2
 8015d04:	005b      	lsls	r3, r3, #1
 8015d06:	4413      	add	r3, r2
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	440b      	add	r3, r1
 8015d0c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d105      	bne.n	8015d1e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015d12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d16:	f023 0301 	bic.w	r3, r3, #1
 8015d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015d1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015d22:	3301      	adds	r3, #1
 8015d24:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8015d28:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8015d2c:	2b0f      	cmp	r3, #15
 8015d2e:	d9bd      	bls.n	8015cac <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	7a1b      	ldrb	r3, [r3, #8]
 8015d34:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	f4ff af73 	bcc.w	8015c24 <RegionEU868LinkAdrReq+0x30>
 8015d3e:	e000      	b.n	8015d42 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015d40:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015d42:	2302      	movs	r3, #2
 8015d44:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	7a5b      	ldrb	r3, [r3, #9]
 8015d4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7ff fa27 	bl	80151a8 <RegionEU868GetPhyParam>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8015d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015d62:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	7a9b      	ldrb	r3, [r3, #10]
 8015d68:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015d6a:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8015d6e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015d70:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8015d74:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015d76:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015d7a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015d82:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015d8a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	7b5b      	ldrb	r3, [r3, #13]
 8015d90:	b25b      	sxtb	r3, r3
 8015d92:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015d94:	2310      	movs	r3, #16
 8015d96:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015d98:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8015d9c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	b25b      	sxtb	r3, r3
 8015da2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015da6:	2307      	movs	r3, #7
 8015da8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015dac:	4b21      	ldr	r3, [pc, #132]	; (8015e34 <RegionEU868LinkAdrReq+0x240>)
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015db2:	2307      	movs	r3, #7
 8015db4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015db8:	2300      	movs	r3, #0
 8015dba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015dc4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8015dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015dcc:	1c9a      	adds	r2, r3, #2
 8015dce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015dd2:	1c59      	adds	r1, r3, #1
 8015dd4:	f107 0010 	add.w	r0, r7, #16
 8015dd8:	4623      	mov	r3, r4
 8015dda:	f7fe fdb0 	bl	801493e <RegionCommonLinkAdrReqVerifyParams>
 8015dde:	4603      	mov	r3, r0
 8015de0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015de4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015de8:	2b07      	cmp	r3, #7
 8015dea:	d10c      	bne.n	8015e06 <RegionEU868LinkAdrReq+0x212>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015dec:	4b11      	ldr	r3, [pc, #68]	; (8015e34 <RegionEU868LinkAdrReq+0x240>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	33c0      	adds	r3, #192	; 0xc0
 8015df2:	2202      	movs	r2, #2
 8015df4:	2100      	movs	r1, #0
 8015df6:	4618      	mov	r0, r3
 8015df8:	f000 fb7c 	bl	80164f4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015dfc:	4b0d      	ldr	r3, [pc, #52]	; (8015e34 <RegionEU868LinkAdrReq+0x240>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e02:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015e06:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015e0e:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015e16:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015e20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8015e24:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015e26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	374c      	adds	r7, #76	; 0x4c
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd90      	pop	{r4, r7, pc}
 8015e32:	bf00      	nop
 8015e34:	20000dd4 	.word	0x20000dd4

08015e38 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b084      	sub	sp, #16
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015e40:	2307      	movs	r3, #7
 8015e42:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015e44:	2300      	movs	r3, #0
 8015e46:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	685b      	ldr	r3, [r3, #4]
 8015e4c:	f107 020e 	add.w	r2, r7, #14
 8015e50:	4611      	mov	r1, r2
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7ff f8e2 	bl	801501c <VerifyRfFreq>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	f083 0301 	eor.w	r3, r3, #1
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d003      	beq.n	8015e6c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015e64:	7bfb      	ldrb	r3, [r7, #15]
 8015e66:	f023 0301 	bic.w	r3, r3, #1
 8015e6a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8015e72:	2207      	movs	r2, #7
 8015e74:	2100      	movs	r1, #0
 8015e76:	4618      	mov	r0, r3
 8015e78:	f7fe fb4f 	bl	801451a <RegionCommonValueInRange>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d103      	bne.n	8015e8a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015e82:	7bfb      	ldrb	r3, [r7, #15]
 8015e84:	f023 0302 	bic.w	r3, r3, #2
 8015e88:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e90:	2205      	movs	r2, #5
 8015e92:	2100      	movs	r1, #0
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7fe fb40 	bl	801451a <RegionCommonValueInRange>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d103      	bne.n	8015ea8 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015ea0:	7bfb      	ldrb	r3, [r7, #15]
 8015ea2:	f023 0304 	bic.w	r3, r3, #4
 8015ea6:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b086      	sub	sp, #24
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015ebc:	2303      	movs	r3, #3
 8015ebe:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d114      	bne.n	8015ef4 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015ed0:	b2db      	uxtb	r3, r3
 8015ed2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015ed4:	f107 0308 	add.w	r3, r7, #8
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f000 f9f9 	bl	80162d0 <RegionEU868ChannelsRemove>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	f083 0301 	eor.w	r3, r3, #1
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d03b      	beq.n	8015f62 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015eea:	7dfb      	ldrb	r3, [r7, #23]
 8015eec:	f023 0303 	bic.w	r3, r3, #3
 8015ef0:	75fb      	strb	r3, [r7, #23]
 8015ef2:	e036      	b.n	8015f62 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015f04:	f107 030c 	add.w	r3, r7, #12
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f000 f93f 	bl	801618c <RegionEU868ChannelAdd>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	2b06      	cmp	r3, #6
 8015f12:	d820      	bhi.n	8015f56 <RegionEU868NewChannelReq+0xa2>
 8015f14:	a201      	add	r2, pc, #4	; (adr r2, 8015f1c <RegionEU868NewChannelReq+0x68>)
 8015f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f1a:	bf00      	nop
 8015f1c:	08015f61 	.word	0x08015f61
 8015f20:	08015f57 	.word	0x08015f57
 8015f24:	08015f57 	.word	0x08015f57
 8015f28:	08015f57 	.word	0x08015f57
 8015f2c:	08015f39 	.word	0x08015f39
 8015f30:	08015f43 	.word	0x08015f43
 8015f34:	08015f4d 	.word	0x08015f4d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015f38:	7dfb      	ldrb	r3, [r7, #23]
 8015f3a:	f023 0301 	bic.w	r3, r3, #1
 8015f3e:	75fb      	strb	r3, [r7, #23]
                break;
 8015f40:	e00f      	b.n	8015f62 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015f42:	7dfb      	ldrb	r3, [r7, #23]
 8015f44:	f023 0302 	bic.w	r3, r3, #2
 8015f48:	75fb      	strb	r3, [r7, #23]
                break;
 8015f4a:	e00a      	b.n	8015f62 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015f4c:	7dfb      	ldrb	r3, [r7, #23]
 8015f4e:	f023 0303 	bic.w	r3, r3, #3
 8015f52:	75fb      	strb	r3, [r7, #23]
                break;
 8015f54:	e005      	b.n	8015f62 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015f56:	7dfb      	ldrb	r3, [r7, #23]
 8015f58:	f023 0303 	bic.w	r3, r3, #3
 8015f5c:	75fb      	strb	r3, [r7, #23]
                break;
 8015f5e:	e000      	b.n	8015f62 <RegionEU868NewChannelReq+0xae>
                break;
 8015f60:	bf00      	nop
            }
        }
    }

    return status;
 8015f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f66:	4618      	mov	r0, r3
 8015f68:	3718      	adds	r7, #24
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop

08015f70 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015f70:	b480      	push	{r7}
 8015f72:	b083      	sub	sp, #12
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	370c      	adds	r7, #12
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bc80      	pop	{r7}
 8015f84:	4770      	bx	lr
	...

08015f88 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015f90:	2303      	movs	r3, #3
 8015f92:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	f107 020e 	add.w	r2, r7, #14
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ff f83a 	bl	801501c <VerifyRfFreq>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	f083 0301 	eor.w	r3, r3, #1
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d003      	beq.n	8015fbc <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8015fb4:	7bfb      	ldrb	r3, [r7, #15]
 8015fb6:	f023 0301 	bic.w	r3, r3, #1
 8015fba:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015fbc:	4b13      	ldr	r3, [pc, #76]	; (801600c <RegionEU868DlChannelReq+0x84>)
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	460b      	mov	r3, r1
 8015fc8:	005b      	lsls	r3, r3, #1
 8015fca:	440b      	add	r3, r1
 8015fcc:	009b      	lsls	r3, r3, #2
 8015fce:	4413      	add	r3, r2
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d103      	bne.n	8015fde <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8015fd6:	7bfb      	ldrb	r3, [r7, #15]
 8015fd8:	f023 0302 	bic.w	r3, r3, #2
 8015fdc:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015fde:	7bfb      	ldrb	r3, [r7, #15]
 8015fe0:	2b03      	cmp	r3, #3
 8015fe2:	d10d      	bne.n	8016000 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015fe4:	4b09      	ldr	r3, [pc, #36]	; (801600c <RegionEU868DlChannelReq+0x84>)
 8015fe6:	6819      	ldr	r1, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	4618      	mov	r0, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	685a      	ldr	r2, [r3, #4]
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	005b      	lsls	r3, r3, #1
 8015ff6:	4403      	add	r3, r0
 8015ff8:	009b      	lsls	r3, r3, #2
 8015ffa:	440b      	add	r3, r1
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016004:	4618      	mov	r0, r3
 8016006:	3710      	adds	r7, #16
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}
 801600c:	20000dd4 	.word	0x20000dd4

08016010 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016010:	b480      	push	{r7}
 8016012:	b083      	sub	sp, #12
 8016014:	af00      	add	r7, sp, #0
 8016016:	4603      	mov	r3, r0
 8016018:	460a      	mov	r2, r1
 801601a:	71fb      	strb	r3, [r7, #7]
 801601c:	4613      	mov	r3, r2
 801601e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016020:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016024:	4618      	mov	r0, r3
 8016026:	370c      	adds	r7, #12
 8016028:	46bd      	mov	sp, r7
 801602a:	bc80      	pop	{r7}
 801602c:	4770      	bx	lr
	...

08016030 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b09a      	sub	sp, #104	; 0x68
 8016034:	af02      	add	r7, sp, #8
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
 801603c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801603e:	2300      	movs	r3, #0
 8016040:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016044:	2300      	movs	r3, #0
 8016046:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801604a:	2300      	movs	r3, #0
 801604c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801604e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016052:	2200      	movs	r2, #0
 8016054:	601a      	str	r2, [r3, #0]
 8016056:	605a      	str	r2, [r3, #4]
 8016058:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801605a:	230c      	movs	r3, #12
 801605c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016060:	2307      	movs	r3, #7
 8016062:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016064:	4b47      	ldr	r3, [pc, #284]	; (8016184 <RegionEU868NextChannel+0x154>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	33c0      	adds	r3, #192	; 0xc0
 801606a:	2201      	movs	r2, #1
 801606c:	2100      	movs	r1, #0
 801606e:	4618      	mov	r0, r3
 8016070:	f7fe faa4 	bl	80145bc <RegionCommonCountChannels>
 8016074:	4603      	mov	r3, r0
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10a      	bne.n	8016090 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801607a:	4b42      	ldr	r3, [pc, #264]	; (8016184 <RegionEU868NextChannel+0x154>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016082:	4b40      	ldr	r3, [pc, #256]	; (8016184 <RegionEU868NextChannel+0x154>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	f042 0207 	orr.w	r2, r2, #7
 801608a:	b292      	uxth	r2, r2
 801608c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	7a5b      	ldrb	r3, [r3, #9]
 8016094:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801609c:	b2db      	uxtb	r3, r3
 801609e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80160a0:	4b38      	ldr	r3, [pc, #224]	; (8016184 <RegionEU868NextChannel+0x154>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	33c0      	adds	r3, #192	; 0xc0
 80160a6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80160a8:	4b36      	ldr	r3, [pc, #216]	; (8016184 <RegionEU868NextChannel+0x154>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80160ae:	4b36      	ldr	r3, [pc, #216]	; (8016188 <RegionEU868NextChannel+0x158>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80160b4:	2310      	movs	r3, #16
 80160b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80160b8:	f107 0312 	add.w	r3, r7, #18
 80160bc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	7a9b      	ldrb	r3, [r3, #10]
 80160ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80160d2:	2306      	movs	r3, #6
 80160d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160de:	320c      	adds	r2, #12
 80160e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	7d1b      	ldrb	r3, [r3, #20]
 80160ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	8adb      	ldrh	r3, [r3, #22]
 80160fa:	4619      	mov	r1, r3
 80160fc:	4610      	mov	r0, r2
 80160fe:	f7ff f803 	bl	8015108 <GetTimeOnAir>
 8016102:	4603      	mov	r3, r0
 8016104:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016106:	f107 0314 	add.w	r3, r7, #20
 801610a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801610c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016110:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016114:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	460b      	mov	r3, r1
 8016124:	6839      	ldr	r1, [r7, #0]
 8016126:	f7fe fe50 	bl	8014dca <RegionCommonIdentifyChannels>
 801612a:	4603      	mov	r3, r0
 801612c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016134:	2b00      	cmp	r3, #0
 8016136:	d10f      	bne.n	8016158 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016138:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801613c:	3b01      	subs	r3, #1
 801613e:	4619      	mov	r1, r3
 8016140:	2000      	movs	r0, #0
 8016142:	f000 f985 	bl	8016450 <randr>
 8016146:	4603      	mov	r3, r0
 8016148:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801614c:	4413      	add	r3, r2
 801614e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	701a      	strb	r2, [r3, #0]
 8016156:	e00e      	b.n	8016176 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801615c:	2b0c      	cmp	r3, #12
 801615e:	d10a      	bne.n	8016176 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016160:	4b08      	ldr	r3, [pc, #32]	; (8016184 <RegionEU868NextChannel+0x154>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8016168:	4b06      	ldr	r3, [pc, #24]	; (8016184 <RegionEU868NextChannel+0x154>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	f042 0207 	orr.w	r2, r2, #7
 8016170:	b292      	uxth	r2, r2
 8016172:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    }
    return status;
 8016176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801617a:	4618      	mov	r0, r3
 801617c:	3760      	adds	r7, #96	; 0x60
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	20000dd4 	.word	0x20000dd4
 8016188:	20000dd0 	.word	0x20000dd0

0801618c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b084      	sub	sp, #16
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016194:	2300      	movs	r3, #0
 8016196:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016198:	2300      	movs	r3, #0
 801619a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801619c:	2300      	movs	r3, #0
 801619e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	791b      	ldrb	r3, [r3, #4]
 80161a4:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80161a6:	7b7b      	ldrb	r3, [r7, #13]
 80161a8:	2b02      	cmp	r3, #2
 80161aa:	d801      	bhi.n	80161b0 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80161ac:	2306      	movs	r3, #6
 80161ae:	e089      	b.n	80162c4 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80161b0:	7b7b      	ldrb	r3, [r7, #13]
 80161b2:	2b0f      	cmp	r3, #15
 80161b4:	d901      	bls.n	80161ba <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80161b6:	2303      	movs	r3, #3
 80161b8:	e084      	b.n	80162c4 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	7a1b      	ldrb	r3, [r3, #8]
 80161c0:	f343 0303 	sbfx	r3, r3, #0, #4
 80161c4:	b25b      	sxtb	r3, r3
 80161c6:	2207      	movs	r2, #7
 80161c8:	2100      	movs	r1, #0
 80161ca:	4618      	mov	r0, r3
 80161cc:	f7fe f9a5 	bl	801451a <RegionCommonValueInRange>
 80161d0:	4603      	mov	r3, r0
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d101      	bne.n	80161da <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80161d6:	2301      	movs	r3, #1
 80161d8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	7a1b      	ldrb	r3, [r3, #8]
 80161e0:	f343 1303 	sbfx	r3, r3, #4, #4
 80161e4:	b25b      	sxtb	r3, r3
 80161e6:	2207      	movs	r2, #7
 80161e8:	2100      	movs	r1, #0
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fe f995 	bl	801451a <RegionCommonValueInRange>
 80161f0:	4603      	mov	r3, r0
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d101      	bne.n	80161fa <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80161f6:	2301      	movs	r3, #1
 80161f8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	7a1b      	ldrb	r3, [r3, #8]
 8016200:	f343 0303 	sbfx	r3, r3, #0, #4
 8016204:	b25a      	sxtb	r2, r3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	7a1b      	ldrb	r3, [r3, #8]
 801620c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016210:	b25b      	sxtb	r3, r3
 8016212:	429a      	cmp	r2, r3
 8016214:	dd01      	ble.n	801621a <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016216:	2301      	movs	r3, #1
 8016218:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801621a:	7bbb      	ldrb	r3, [r7, #14]
 801621c:	f083 0301 	eor.w	r3, r3, #1
 8016220:	b2db      	uxtb	r3, r3
 8016222:	2b00      	cmp	r3, #0
 8016224:	d010      	beq.n	8016248 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f107 020c 	add.w	r2, r7, #12
 8016230:	4611      	mov	r1, r2
 8016232:	4618      	mov	r0, r3
 8016234:	f7fe fef2 	bl	801501c <VerifyRfFreq>
 8016238:	4603      	mov	r3, r0
 801623a:	f083 0301 	eor.w	r3, r3, #1
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d001      	beq.n	8016248 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016244:	2301      	movs	r3, #1
 8016246:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016248:	7bfb      	ldrb	r3, [r7, #15]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d004      	beq.n	8016258 <RegionEU868ChannelAdd+0xcc>
 801624e:	7bbb      	ldrb	r3, [r7, #14]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d001      	beq.n	8016258 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016254:	2306      	movs	r3, #6
 8016256:	e035      	b.n	80162c4 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016258:	7bfb      	ldrb	r3, [r7, #15]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d001      	beq.n	8016262 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801625e:	2305      	movs	r3, #5
 8016260:	e030      	b.n	80162c4 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016262:	7bbb      	ldrb	r3, [r7, #14]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d001      	beq.n	801626c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016268:	2304      	movs	r3, #4
 801626a:	e02b      	b.n	80162c4 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801626c:	4b17      	ldr	r3, [pc, #92]	; (80162cc <RegionEU868ChannelAdd+0x140>)
 801626e:	6819      	ldr	r1, [r3, #0]
 8016270:	7b7a      	ldrb	r2, [r7, #13]
 8016272:	4613      	mov	r3, r2
 8016274:	005b      	lsls	r3, r3, #1
 8016276:	4413      	add	r3, r2
 8016278:	009b      	lsls	r3, r3, #2
 801627a:	18c8      	adds	r0, r1, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	220c      	movs	r2, #12
 8016282:	4619      	mov	r1, r3
 8016284:	f000 f8fb 	bl	801647e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016288:	4b10      	ldr	r3, [pc, #64]	; (80162cc <RegionEU868ChannelAdd+0x140>)
 801628a:	6819      	ldr	r1, [r3, #0]
 801628c:	7b7a      	ldrb	r2, [r7, #13]
 801628e:	7b38      	ldrb	r0, [r7, #12]
 8016290:	4613      	mov	r3, r2
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	4413      	add	r3, r2
 8016296:	009b      	lsls	r3, r3, #2
 8016298:	440b      	add	r3, r1
 801629a:	3309      	adds	r3, #9
 801629c:	4602      	mov	r2, r0
 801629e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80162a0:	4b0a      	ldr	r3, [pc, #40]	; (80162cc <RegionEU868ChannelAdd+0x140>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80162a8:	b21a      	sxth	r2, r3
 80162aa:	7b7b      	ldrb	r3, [r7, #13]
 80162ac:	2101      	movs	r1, #1
 80162ae:	fa01 f303 	lsl.w	r3, r1, r3
 80162b2:	b21b      	sxth	r3, r3
 80162b4:	4313      	orrs	r3, r2
 80162b6:	b21a      	sxth	r2, r3
 80162b8:	4b04      	ldr	r3, [pc, #16]	; (80162cc <RegionEU868ChannelAdd+0x140>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	b292      	uxth	r2, r2
 80162be:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80162c2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	20000dd4 	.word	0x20000dd4

080162d0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b086      	sub	sp, #24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	781b      	ldrb	r3, [r3, #0]
 80162dc:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80162de:	7dfb      	ldrb	r3, [r7, #23]
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d801      	bhi.n	80162e8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80162e4:	2300      	movs	r3, #0
 80162e6:	e015      	b.n	8016314 <RegionEU868ChannelsRemove+0x44>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80162e8:	4b0c      	ldr	r3, [pc, #48]	; (801631c <RegionEU868ChannelsRemove+0x4c>)
 80162ea:	6819      	ldr	r1, [r3, #0]
 80162ec:	7dfa      	ldrb	r2, [r7, #23]
 80162ee:	4613      	mov	r3, r2
 80162f0:	005b      	lsls	r3, r3, #1
 80162f2:	4413      	add	r3, r2
 80162f4:	009b      	lsls	r3, r3, #2
 80162f6:	440b      	add	r3, r1
 80162f8:	461a      	mov	r2, r3
 80162fa:	2300      	movs	r3, #0
 80162fc:	6013      	str	r3, [r2, #0]
 80162fe:	6053      	str	r3, [r2, #4]
 8016300:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016302:	4b06      	ldr	r3, [pc, #24]	; (801631c <RegionEU868ChannelsRemove+0x4c>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	33c0      	adds	r3, #192	; 0xc0
 8016308:	7df9      	ldrb	r1, [r7, #23]
 801630a:	2210      	movs	r2, #16
 801630c:	4618      	mov	r0, r3
 801630e:	f7fe f921 	bl	8014554 <RegionCommonChanDisable>
 8016312:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016314:	4618      	mov	r0, r3
 8016316:	3718      	adds	r7, #24
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	20000dd4 	.word	0x20000dd4

08016320 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8016320:	b590      	push	{r4, r7, lr}
 8016322:	b085      	sub	sp, #20
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801632e:	4b20      	ldr	r3, [pc, #128]	; (80163b0 <RegionEU868SetContinuousWave+0x90>)
 8016330:	681a      	ldr	r2, [r3, #0]
 8016332:	4b20      	ldr	r3, [pc, #128]	; (80163b4 <RegionEU868SetContinuousWave+0x94>)
 8016334:	6819      	ldr	r1, [r3, #0]
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	461c      	mov	r4, r3
 801633c:	4623      	mov	r3, r4
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4423      	add	r3, r4
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	440b      	add	r3, r1
 8016346:	3309      	adds	r3, #9
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	4619      	mov	r1, r3
 801634c:	460b      	mov	r3, r1
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	440b      	add	r3, r1
 8016352:	00db      	lsls	r3, r3, #3
 8016354:	4413      	add	r3, r2
 8016356:	3302      	adds	r3, #2
 8016358:	f993 3000 	ldrsb.w	r3, [r3]
 801635c:	4619      	mov	r1, r3
 801635e:	f7fe fdd4 	bl	8014f0a <RegionCommonLimitTxPower>
 8016362:	4603      	mov	r3, r0
 8016364:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016366:	2300      	movs	r3, #0
 8016368:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801636a:	4b12      	ldr	r3, [pc, #72]	; (80163b4 <RegionEU868SetContinuousWave+0x94>)
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	4619      	mov	r1, r3
 8016374:	460b      	mov	r3, r1
 8016376:	005b      	lsls	r3, r3, #1
 8016378:	440b      	add	r3, r1
 801637a:	009b      	lsls	r3, r3, #2
 801637c:	4413      	add	r3, r2
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6859      	ldr	r1, [r3, #4]
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	689a      	ldr	r2, [r3, #8]
 801638a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801638e:	4618      	mov	r0, r3
 8016390:	f7fe fc2c 	bl	8014bec <RegionCommonComputeTxPower>
 8016394:	4603      	mov	r3, r0
 8016396:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016398:	4b07      	ldr	r3, [pc, #28]	; (80163b8 <RegionEU868SetContinuousWave+0x98>)
 801639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	8992      	ldrh	r2, [r2, #12]
 80163a0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80163a4:	68b8      	ldr	r0, [r7, #8]
 80163a6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80163a8:	bf00      	nop
 80163aa:	3714      	adds	r7, #20
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd90      	pop	{r4, r7, pc}
 80163b0:	20000dd0 	.word	0x20000dd0
 80163b4:	20000dd4 	.word	0x20000dd4
 80163b8:	0801ba68 	.word	0x0801ba68

080163bc <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80163bc:	b480      	push	{r7}
 80163be:	b085      	sub	sp, #20
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	4603      	mov	r3, r0
 80163c4:	71fb      	strb	r3, [r7, #7]
 80163c6:	460b      	mov	r3, r1
 80163c8:	71bb      	strb	r3, [r7, #6]
 80163ca:	4613      	mov	r3, r2
 80163cc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80163ce:	79ba      	ldrb	r2, [r7, #6]
 80163d0:	797b      	ldrb	r3, [r7, #5]
 80163d2:	1ad3      	subs	r3, r2, r3
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80163d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	da01      	bge.n	80163e4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80163e4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3714      	adds	r7, #20
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bc80      	pop	{r7}
 80163ee:	4770      	bx	lr

080163f0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80163f0:	b480      	push	{r7}
 80163f2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80163f4:	4b0d      	ldr	r3, [pc, #52]	; (801642c <rand1+0x3c>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a0d      	ldr	r2, [pc, #52]	; (8016430 <rand1+0x40>)
 80163fa:	fb02 f303 	mul.w	r3, r2, r3
 80163fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8016402:	3339      	adds	r3, #57	; 0x39
 8016404:	4a09      	ldr	r2, [pc, #36]	; (801642c <rand1+0x3c>)
 8016406:	6013      	str	r3, [r2, #0]
 8016408:	4b08      	ldr	r3, [pc, #32]	; (801642c <rand1+0x3c>)
 801640a:	681a      	ldr	r2, [r3, #0]
 801640c:	2303      	movs	r3, #3
 801640e:	fba3 1302 	umull	r1, r3, r3, r2
 8016412:	1ad1      	subs	r1, r2, r3
 8016414:	0849      	lsrs	r1, r1, #1
 8016416:	440b      	add	r3, r1
 8016418:	0f99      	lsrs	r1, r3, #30
 801641a:	460b      	mov	r3, r1
 801641c:	07db      	lsls	r3, r3, #31
 801641e:	1a5b      	subs	r3, r3, r1
 8016420:	1ad1      	subs	r1, r2, r3
 8016422:	460b      	mov	r3, r1
}
 8016424:	4618      	mov	r0, r3
 8016426:	46bd      	mov	sp, r7
 8016428:	bc80      	pop	{r7}
 801642a:	4770      	bx	lr
 801642c:	2000011c 	.word	0x2000011c
 8016430:	41c64e6d 	.word	0x41c64e6d

08016434 <srand1>:

void srand1( uint32_t seed )
{
 8016434:	b480      	push	{r7}
 8016436:	b083      	sub	sp, #12
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
    next = seed;
 801643c:	4a03      	ldr	r2, [pc, #12]	; (801644c <srand1+0x18>)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	6013      	str	r3, [r2, #0]
}
 8016442:	bf00      	nop
 8016444:	370c      	adds	r7, #12
 8016446:	46bd      	mov	sp, r7
 8016448:	bc80      	pop	{r7}
 801644a:	4770      	bx	lr
 801644c:	2000011c 	.word	0x2000011c

08016450 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801645a:	f7ff ffc9 	bl	80163f0 <rand1>
 801645e:	4602      	mov	r2, r0
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	1acb      	subs	r3, r1, r3
 8016466:	3301      	adds	r3, #1
 8016468:	fb92 f1f3 	sdiv	r1, r2, r3
 801646c:	fb03 f301 	mul.w	r3, r3, r1
 8016470:	1ad2      	subs	r2, r2, r3
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	4413      	add	r3, r2
}
 8016476:	4618      	mov	r0, r3
 8016478:	3708      	adds	r7, #8
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}

0801647e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801647e:	b480      	push	{r7}
 8016480:	b085      	sub	sp, #20
 8016482:	af00      	add	r7, sp, #0
 8016484:	60f8      	str	r0, [r7, #12]
 8016486:	60b9      	str	r1, [r7, #8]
 8016488:	4613      	mov	r3, r2
 801648a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801648c:	e007      	b.n	801649e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801648e:	68ba      	ldr	r2, [r7, #8]
 8016490:	1c53      	adds	r3, r2, #1
 8016492:	60bb      	str	r3, [r7, #8]
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	1c59      	adds	r1, r3, #1
 8016498:	60f9      	str	r1, [r7, #12]
 801649a:	7812      	ldrb	r2, [r2, #0]
 801649c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801649e:	88fb      	ldrh	r3, [r7, #6]
 80164a0:	1e5a      	subs	r2, r3, #1
 80164a2:	80fa      	strh	r2, [r7, #6]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1f2      	bne.n	801648e <memcpy1+0x10>
    }
}
 80164a8:	bf00      	nop
 80164aa:	bf00      	nop
 80164ac:	3714      	adds	r7, #20
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bc80      	pop	{r7}
 80164b2:	4770      	bx	lr

080164b4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80164b4:	b480      	push	{r7}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	60b9      	str	r1, [r7, #8]
 80164be:	4613      	mov	r3, r2
 80164c0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80164c2:	88fb      	ldrh	r3, [r7, #6]
 80164c4:	3b01      	subs	r3, #1
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	4413      	add	r3, r2
 80164ca:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80164cc:	e007      	b.n	80164de <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80164ce:	68ba      	ldr	r2, [r7, #8]
 80164d0:	1c53      	adds	r3, r2, #1
 80164d2:	60bb      	str	r3, [r7, #8]
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	1e59      	subs	r1, r3, #1
 80164d8:	60f9      	str	r1, [r7, #12]
 80164da:	7812      	ldrb	r2, [r2, #0]
 80164dc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80164de:	88fb      	ldrh	r3, [r7, #6]
 80164e0:	1e5a      	subs	r2, r3, #1
 80164e2:	80fa      	strh	r2, [r7, #6]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1f2      	bne.n	80164ce <memcpyr+0x1a>
    }
}
 80164e8:	bf00      	nop
 80164ea:	bf00      	nop
 80164ec:	3714      	adds	r7, #20
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bc80      	pop	{r7}
 80164f2:	4770      	bx	lr

080164f4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	460b      	mov	r3, r1
 80164fe:	70fb      	strb	r3, [r7, #3]
 8016500:	4613      	mov	r3, r2
 8016502:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016504:	e004      	b.n	8016510 <memset1+0x1c>
    {
        *dst++ = value;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	1c5a      	adds	r2, r3, #1
 801650a:	607a      	str	r2, [r7, #4]
 801650c:	78fa      	ldrb	r2, [r7, #3]
 801650e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016510:	883b      	ldrh	r3, [r7, #0]
 8016512:	1e5a      	subs	r2, r3, #1
 8016514:	803a      	strh	r2, [r7, #0]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d1f5      	bne.n	8016506 <memset1+0x12>
    }
}
 801651a:	bf00      	nop
 801651c:	bf00      	nop
 801651e:	370c      	adds	r7, #12
 8016520:	46bd      	mov	sp, r7
 8016522:	bc80      	pop	{r7}
 8016524:	4770      	bx	lr
	...

08016528 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016528:	b480      	push	{r7}
 801652a:	b087      	sub	sp, #28
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	460b      	mov	r3, r1
 8016532:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 8016534:	4b1a      	ldr	r3, [pc, #104]	; (80165a0 <Crc32+0x78>)
 8016536:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016538:	f04f 33ff 	mov.w	r3, #4294967295
 801653c:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d101      	bne.n	8016548 <Crc32+0x20>
    {
        return 0;
 8016544:	2300      	movs	r3, #0
 8016546:	e026      	b.n	8016596 <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016548:	2300      	movs	r3, #0
 801654a:	827b      	strh	r3, [r7, #18]
 801654c:	e01d      	b.n	801658a <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801654e:	8a7b      	ldrh	r3, [r7, #18]
 8016550:	687a      	ldr	r2, [r7, #4]
 8016552:	4413      	add	r3, r2
 8016554:	781b      	ldrb	r3, [r3, #0]
 8016556:	461a      	mov	r2, r3
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	4053      	eors	r3, r2
 801655c:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801655e:	2300      	movs	r3, #0
 8016560:	823b      	strh	r3, [r7, #16]
 8016562:	e00c      	b.n	801657e <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	085a      	lsrs	r2, r3, #1
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	f003 0301 	and.w	r3, r3, #1
 801656e:	4259      	negs	r1, r3
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	400b      	ands	r3, r1
 8016574:	4053      	eors	r3, r2
 8016576:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 8016578:	8a3b      	ldrh	r3, [r7, #16]
 801657a:	3301      	adds	r3, #1
 801657c:	823b      	strh	r3, [r7, #16]
 801657e:	8a3b      	ldrh	r3, [r7, #16]
 8016580:	2b07      	cmp	r3, #7
 8016582:	d9ef      	bls.n	8016564 <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 8016584:	8a7b      	ldrh	r3, [r7, #18]
 8016586:	3301      	adds	r3, #1
 8016588:	827b      	strh	r3, [r7, #18]
 801658a:	8a7a      	ldrh	r2, [r7, #18]
 801658c:	887b      	ldrh	r3, [r7, #2]
 801658e:	429a      	cmp	r2, r3
 8016590:	d3dd      	bcc.n	801654e <Crc32+0x26>
        }
    }

    return ~crc;
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	43db      	mvns	r3, r3
}
 8016596:	4618      	mov	r0, r3
 8016598:	371c      	adds	r7, #28
 801659a:	46bd      	mov	sp, r7
 801659c:	bc80      	pop	{r7}
 801659e:	4770      	bx	lr
 80165a0:	edb88320 	.word	0xedb88320

080165a4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
 80165ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	683a      	ldr	r2, [r7, #0]
 80165b2:	619a      	str	r2, [r3, #24]
}
 80165b4:	bf00      	nop
 80165b6:	370c      	adds	r7, #12
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bc80      	pop	{r7}
 80165bc:	4770      	bx	lr

080165be <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80165be:	b480      	push	{r7}
 80165c0:	b083      	sub	sp, #12
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	6078      	str	r0, [r7, #4]
 80165c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	683a      	ldr	r2, [r7, #0]
 80165cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80165ce:	bf00      	nop
 80165d0:	370c      	adds	r7, #12
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bc80      	pop	{r7}
 80165d6:	4770      	bx	lr

080165d8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b084      	sub	sp, #16
 80165dc:	af02      	add	r7, sp, #8
 80165de:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80165e0:	4a21      	ldr	r2, [pc, #132]	; (8016668 <RadioInit+0x90>)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80165e6:	4b21      	ldr	r3, [pc, #132]	; (801666c <RadioInit+0x94>)
 80165e8:	2200      	movs	r2, #0
 80165ea:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80165ec:	4b1f      	ldr	r3, [pc, #124]	; (801666c <RadioInit+0x94>)
 80165ee:	2200      	movs	r2, #0
 80165f0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80165f2:	4b1e      	ldr	r3, [pc, #120]	; (801666c <RadioInit+0x94>)
 80165f4:	2200      	movs	r2, #0
 80165f6:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 80165f8:	481d      	ldr	r0, [pc, #116]	; (8016670 <RadioInit+0x98>)
 80165fa:	f001 fee3 	bl	80183c4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 80165fe:	2000      	movs	r0, #0
 8016600:	f001 f82a 	bl	8017658 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8016604:	f002 f974 	bl	80188f0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016608:	2100      	movs	r1, #0
 801660a:	2000      	movs	r0, #0
 801660c:	f002 fcca 	bl	8018fa4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8016610:	2204      	movs	r2, #4
 8016612:	2100      	movs	r1, #0
 8016614:	2001      	movs	r0, #1
 8016616:	f002 faf5 	bl	8018c04 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801661a:	2300      	movs	r3, #0
 801661c:	2200      	movs	r2, #0
 801661e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016622:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016626:	f002 fa29 	bl	8018a7c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801662a:	f000 fea1 	bl	8017370 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801662e:	2300      	movs	r3, #0
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	4b10      	ldr	r3, [pc, #64]	; (8016674 <RadioInit+0x9c>)
 8016634:	2200      	movs	r2, #0
 8016636:	f04f 31ff 	mov.w	r1, #4294967295
 801663a:	480f      	ldr	r0, [pc, #60]	; (8016678 <RadioInit+0xa0>)
 801663c:	f003 fd8c 	bl	801a158 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016640:	2300      	movs	r3, #0
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	4b0d      	ldr	r3, [pc, #52]	; (801667c <RadioInit+0xa4>)
 8016646:	2200      	movs	r2, #0
 8016648:	f04f 31ff 	mov.w	r1, #4294967295
 801664c:	480c      	ldr	r0, [pc, #48]	; (8016680 <RadioInit+0xa8>)
 801664e:	f003 fd83 	bl	801a158 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016652:	4809      	ldr	r0, [pc, #36]	; (8016678 <RadioInit+0xa0>)
 8016654:	f003 fe24 	bl	801a2a0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016658:	4809      	ldr	r0, [pc, #36]	; (8016680 <RadioInit+0xa8>)
 801665a:	f003 fe21 	bl	801a2a0 <UTIL_TIMER_Stop>
}
 801665e:	bf00      	nop
 8016660:	3708      	adds	r7, #8
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	20000ed8 	.word	0x20000ed8
 801666c:	200017b8 	.word	0x200017b8
 8016670:	08017751 	.word	0x08017751
 8016674:	080176c5 	.word	0x080176c5
 8016678:	20001810 	.word	0x20001810
 801667c:	080176d9 	.word	0x080176d9
 8016680:	20001828 	.word	0x20001828

08016684 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016684:	b580      	push	{r7, lr}
 8016686:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016688:	f001 fede 	bl	8018448 <SUBGRF_GetOperatingMode>
 801668c:	4603      	mov	r3, r0
 801668e:	2b07      	cmp	r3, #7
 8016690:	d00a      	beq.n	80166a8 <RadioGetStatus+0x24>
 8016692:	2b07      	cmp	r3, #7
 8016694:	dc0a      	bgt.n	80166ac <RadioGetStatus+0x28>
 8016696:	2b04      	cmp	r3, #4
 8016698:	d002      	beq.n	80166a0 <RadioGetStatus+0x1c>
 801669a:	2b05      	cmp	r3, #5
 801669c:	d002      	beq.n	80166a4 <RadioGetStatus+0x20>
 801669e:	e005      	b.n	80166ac <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80166a0:	2302      	movs	r3, #2
 80166a2:	e004      	b.n	80166ae <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80166a4:	2301      	movs	r3, #1
 80166a6:	e002      	b.n	80166ae <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80166a8:	2303      	movs	r3, #3
 80166aa:	e000      	b.n	80166ae <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80166ac:	2300      	movs	r3, #0
    }
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	bd80      	pop	{r7, pc}
	...

080166b4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	4603      	mov	r3, r0
 80166bc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80166be:	4a25      	ldr	r2, [pc, #148]	; (8016754 <RadioSetModem+0xa0>)
 80166c0:	79fb      	ldrb	r3, [r7, #7]
 80166c2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 80166c4:	79fb      	ldrb	r3, [r7, #7]
 80166c6:	4618      	mov	r0, r3
 80166c8:	f003 f831 	bl	801972e <RFW_SetRadioModem>
    switch( modem )
 80166cc:	79fb      	ldrb	r3, [r7, #7]
 80166ce:	3b01      	subs	r3, #1
 80166d0:	2b03      	cmp	r3, #3
 80166d2:	d80b      	bhi.n	80166ec <RadioSetModem+0x38>
 80166d4:	a201      	add	r2, pc, #4	; (adr r2, 80166dc <RadioSetModem+0x28>)
 80166d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166da:	bf00      	nop
 80166dc:	080166fb 	.word	0x080166fb
 80166e0:	08016721 	.word	0x08016721
 80166e4:	0801672f 	.word	0x0801672f
 80166e8:	0801673d 	.word	0x0801673d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80166ec:	2000      	movs	r0, #0
 80166ee:	f002 fa63 	bl	8018bb8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80166f2:	4b18      	ldr	r3, [pc, #96]	; (8016754 <RadioSetModem+0xa0>)
 80166f4:	2200      	movs	r2, #0
 80166f6:	735a      	strb	r2, [r3, #13]
        break;
 80166f8:	e028      	b.n	801674c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80166fa:	2001      	movs	r0, #1
 80166fc:	f002 fa5c 	bl	8018bb8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016700:	4b14      	ldr	r3, [pc, #80]	; (8016754 <RadioSetModem+0xa0>)
 8016702:	7b5a      	ldrb	r2, [r3, #13]
 8016704:	4b13      	ldr	r3, [pc, #76]	; (8016754 <RadioSetModem+0xa0>)
 8016706:	7b1b      	ldrb	r3, [r3, #12]
 8016708:	429a      	cmp	r2, r3
 801670a:	d01e      	beq.n	801674a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801670c:	4b11      	ldr	r3, [pc, #68]	; (8016754 <RadioSetModem+0xa0>)
 801670e:	7b1a      	ldrb	r2, [r3, #12]
 8016710:	4b10      	ldr	r3, [pc, #64]	; (8016754 <RadioSetModem+0xa0>)
 8016712:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016714:	4b0f      	ldr	r3, [pc, #60]	; (8016754 <RadioSetModem+0xa0>)
 8016716:	7b5b      	ldrb	r3, [r3, #13]
 8016718:	4618      	mov	r0, r3
 801671a:	f000 ff9d 	bl	8017658 <RadioSetPublicNetwork>
        }
        break;
 801671e:	e014      	b.n	801674a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016720:	2002      	movs	r0, #2
 8016722:	f002 fa49 	bl	8018bb8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016726:	4b0b      	ldr	r3, [pc, #44]	; (8016754 <RadioSetModem+0xa0>)
 8016728:	2200      	movs	r2, #0
 801672a:	735a      	strb	r2, [r3, #13]
        break;
 801672c:	e00e      	b.n	801674c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801672e:	2002      	movs	r0, #2
 8016730:	f002 fa42 	bl	8018bb8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016734:	4b07      	ldr	r3, [pc, #28]	; (8016754 <RadioSetModem+0xa0>)
 8016736:	2200      	movs	r2, #0
 8016738:	735a      	strb	r2, [r3, #13]
        break;
 801673a:	e007      	b.n	801674c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801673c:	2000      	movs	r0, #0
 801673e:	f002 fa3b 	bl	8018bb8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016742:	4b04      	ldr	r3, [pc, #16]	; (8016754 <RadioSetModem+0xa0>)
 8016744:	2200      	movs	r2, #0
 8016746:	735a      	strb	r2, [r3, #13]
        break;
 8016748:	e000      	b.n	801674c <RadioSetModem+0x98>
        break;
 801674a:	bf00      	nop
    }
}
 801674c:	bf00      	nop
 801674e:	3708      	adds	r7, #8
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	200017b8 	.word	0x200017b8

08016758 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b082      	sub	sp, #8
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f002 f9e7 	bl	8018b34 <SUBGRF_SetRfFrequency>
}
 8016766:	bf00      	nop
 8016768:	3708      	adds	r7, #8
 801676a:	46bd      	mov	sp, r7
 801676c:	bd80      	pop	{r7, pc}

0801676e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801676e:	b580      	push	{r7, lr}
 8016770:	b090      	sub	sp, #64	; 0x40
 8016772:	af0a      	add	r7, sp, #40	; 0x28
 8016774:	60f8      	str	r0, [r7, #12]
 8016776:	60b9      	str	r1, [r7, #8]
 8016778:	603b      	str	r3, [r7, #0]
 801677a:	4613      	mov	r3, r2
 801677c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801677e:	2301      	movs	r3, #1
 8016780:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801678a:	f000 fe04 	bl	8017396 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801678e:	2000      	movs	r0, #0
 8016790:	f7ff ff90 	bl	80166b4 <RadioSetModem>

    RadioSetChannel( freq );
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	f7ff ffdf 	bl	8016758 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801679a:	2301      	movs	r3, #1
 801679c:	9309      	str	r3, [sp, #36]	; 0x24
 801679e:	2300      	movs	r3, #0
 80167a0:	9308      	str	r3, [sp, #32]
 80167a2:	2300      	movs	r3, #0
 80167a4:	9307      	str	r3, [sp, #28]
 80167a6:	2300      	movs	r3, #0
 80167a8:	9306      	str	r3, [sp, #24]
 80167aa:	2300      	movs	r3, #0
 80167ac:	9305      	str	r3, [sp, #20]
 80167ae:	2300      	movs	r3, #0
 80167b0:	9304      	str	r3, [sp, #16]
 80167b2:	2300      	movs	r3, #0
 80167b4:	9303      	str	r3, [sp, #12]
 80167b6:	2300      	movs	r3, #0
 80167b8:	9302      	str	r3, [sp, #8]
 80167ba:	2303      	movs	r3, #3
 80167bc:	9301      	str	r3, [sp, #4]
 80167be:	68bb      	ldr	r3, [r7, #8]
 80167c0:	9300      	str	r3, [sp, #0]
 80167c2:	2300      	movs	r3, #0
 80167c4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80167c8:	68b9      	ldr	r1, [r7, #8]
 80167ca:	2000      	movs	r0, #0
 80167cc:	f000 f840 	bl	8016850 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80167d0:	2000      	movs	r0, #0
 80167d2:	f000 fde7 	bl	80173a4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80167d6:	f000 ff6d 	bl	80176b4 <RadioGetWakeupTime>
 80167da:	4603      	mov	r3, r0
 80167dc:	4618      	mov	r0, r3
 80167de:	f7eb fc08 	bl	8001ff2 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80167e2:	f003 fe77 	bl	801a4d4 <UTIL_TIMER_GetCurrentTime>
 80167e6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80167e8:	e00d      	b.n	8016806 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80167ea:	2000      	movs	r0, #0
 80167ec:	f000 feb2 	bl	8017554 <RadioRssi>
 80167f0:	4603      	mov	r3, r0
 80167f2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80167f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80167f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	dd02      	ble.n	8016806 <RadioIsChannelFree+0x98>
        {
            status = false;
 8016800:	2300      	movs	r3, #0
 8016802:	75fb      	strb	r3, [r7, #23]
            break;
 8016804:	e006      	b.n	8016814 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016806:	6938      	ldr	r0, [r7, #16]
 8016808:	f003 fe76 	bl	801a4f8 <UTIL_TIMER_GetElapsedTime>
 801680c:	4602      	mov	r2, r0
 801680e:	683b      	ldr	r3, [r7, #0]
 8016810:	4293      	cmp	r3, r2
 8016812:	d8ea      	bhi.n	80167ea <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8016814:	f000 fdbf 	bl	8017396 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8016818:	7dfb      	ldrb	r3, [r7, #23]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3718      	adds	r7, #24
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}

08016822 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016822:	b580      	push	{r7, lr}
 8016824:	b082      	sub	sp, #8
 8016826:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016828:	2300      	movs	r3, #0
 801682a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 801682c:	2001      	movs	r0, #1
 801682e:	f7ff ff41 	bl	80166b4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016832:	2300      	movs	r3, #0
 8016834:	2200      	movs	r2, #0
 8016836:	2100      	movs	r1, #0
 8016838:	2000      	movs	r0, #0
 801683a:	f002 f91f 	bl	8018a7c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801683e:	f001 fed4 	bl	80185ea <SUBGRF_GetRandom>
 8016842:	6078      	str	r0, [r7, #4]

    return rnd;
 8016844:	687b      	ldr	r3, [r7, #4]
}
 8016846:	4618      	mov	r0, r3
 8016848:	3708      	adds	r7, #8
 801684a:	46bd      	mov	sp, r7
 801684c:	bd80      	pop	{r7, pc}
	...

08016850 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b08a      	sub	sp, #40	; 0x28
 8016854:	af00      	add	r7, sp, #0
 8016856:	60b9      	str	r1, [r7, #8]
 8016858:	607a      	str	r2, [r7, #4]
 801685a:	461a      	mov	r2, r3
 801685c:	4603      	mov	r3, r0
 801685e:	73fb      	strb	r3, [r7, #15]
 8016860:	4613      	mov	r3, r2
 8016862:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8016864:	4abd      	ldr	r2, [pc, #756]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016866:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801686a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801686c:	f002 ff1d 	bl	80196aa <RFW_DeInit>
    if( rxContinuous == true )
 8016870:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8016874:	2b00      	cmp	r3, #0
 8016876:	d001      	beq.n	801687c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016878:	2300      	movs	r3, #0
 801687a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801687c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016880:	2b00      	cmp	r3, #0
 8016882:	d004      	beq.n	801688e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016884:	4ab6      	ldr	r2, [pc, #728]	; (8016b60 <RadioSetRxConfig+0x310>)
 8016886:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801688a:	7013      	strb	r3, [r2, #0]
 801688c:	e002      	b.n	8016894 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801688e:	4bb4      	ldr	r3, [pc, #720]	; (8016b60 <RadioSetRxConfig+0x310>)
 8016890:	22ff      	movs	r2, #255	; 0xff
 8016892:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016894:	7bfb      	ldrb	r3, [r7, #15]
 8016896:	2b04      	cmp	r3, #4
 8016898:	d009      	beq.n	80168ae <RadioSetRxConfig+0x5e>
 801689a:	2b04      	cmp	r3, #4
 801689c:	f300 81da 	bgt.w	8016c54 <RadioSetRxConfig+0x404>
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	f000 80bf 	beq.w	8016a24 <RadioSetRxConfig+0x1d4>
 80168a6:	2b01      	cmp	r3, #1
 80168a8:	f000 812c 	beq.w	8016b04 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80168ac:	e1d2      	b.n	8016c54 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80168ae:	2001      	movs	r0, #1
 80168b0:	f001 ffe0 	bl	8018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80168b4:	4ba9      	ldr	r3, [pc, #676]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168b6:	2200      	movs	r2, #0
 80168b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80168bc:	4aa7      	ldr	r2, [pc, #668]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80168c2:	4ba6      	ldr	r3, [pc, #664]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168c4:	2209      	movs	r2, #9
 80168c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80168ca:	4ba4      	ldr	r3, [pc, #656]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80168d0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80168d2:	68b8      	ldr	r0, [r7, #8]
 80168d4:	f002 fe1a 	bl	801950c <SUBGRF_GetFskBandwidthRegValue>
 80168d8:	4603      	mov	r3, r0
 80168da:	461a      	mov	r2, r3
 80168dc:	4b9f      	ldr	r3, [pc, #636]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80168e2:	4b9e      	ldr	r3, [pc, #632]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168e4:	2200      	movs	r2, #0
 80168e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80168e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80168ea:	00db      	lsls	r3, r3, #3
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	4b9b      	ldr	r3, [pc, #620]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168f0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80168f2:	4b9a      	ldr	r3, [pc, #616]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168f4:	2200      	movs	r2, #0
 80168f6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80168f8:	4b98      	ldr	r3, [pc, #608]	; (8016b5c <RadioSetRxConfig+0x30c>)
 80168fa:	2210      	movs	r2, #16
 80168fc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80168fe:	4b97      	ldr	r3, [pc, #604]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016900:	2200      	movs	r2, #0
 8016902:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016904:	4b95      	ldr	r3, [pc, #596]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016906:	2200      	movs	r2, #0
 8016908:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801690a:	4b95      	ldr	r3, [pc, #596]	; (8016b60 <RadioSetRxConfig+0x310>)
 801690c:	781a      	ldrb	r2, [r3, #0]
 801690e:	4b93      	ldr	r3, [pc, #588]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016910:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016912:	4b92      	ldr	r3, [pc, #584]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016914:	2201      	movs	r2, #1
 8016916:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016918:	4b90      	ldr	r3, [pc, #576]	; (8016b5c <RadioSetRxConfig+0x30c>)
 801691a:	2200      	movs	r2, #0
 801691c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801691e:	2004      	movs	r0, #4
 8016920:	f7ff fec8 	bl	80166b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016924:	488f      	ldr	r0, [pc, #572]	; (8016b64 <RadioSetRxConfig+0x314>)
 8016926:	f002 f9d3 	bl	8018cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801692a:	488f      	ldr	r0, [pc, #572]	; (8016b68 <RadioSetRxConfig+0x318>)
 801692c:	f002 fa9c 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016930:	4a8e      	ldr	r2, [pc, #568]	; (8016b6c <RadioSetRxConfig+0x31c>)
 8016932:	f107 031c 	add.w	r3, r7, #28
 8016936:	e892 0003 	ldmia.w	r2, {r0, r1}
 801693a:	e883 0003 	stmia.w	r3, {r0, r1}
 801693e:	f107 031c 	add.w	r3, r7, #28
 8016942:	4618      	mov	r0, r3
 8016944:	f001 fdcf 	bl	80184e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016948:	f240 10ff 	movw	r0, #511	; 0x1ff
 801694c:	f001 fe1a 	bl	8018584 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 8016950:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016954:	f000 fe1d 	bl	8017592 <RadioRead>
 8016958:	4603      	mov	r3, r0
 801695a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801695e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016962:	f023 0310 	bic.w	r3, r3, #16
 8016966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801696a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801696e:	4619      	mov	r1, r3
 8016970:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8016974:	f000 fdfb 	bl	801756e <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8016978:	2104      	movs	r1, #4
 801697a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801697e:	f000 fdf6 	bl	801756e <RadioWrite>
            modReg= RadioRead(0x89b);
 8016982:	f640 009b 	movw	r0, #2203	; 0x89b
 8016986:	f000 fe04 	bl	8017592 <RadioRead>
 801698a:	4603      	mov	r3, r0
 801698c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016994:	f023 031c 	bic.w	r3, r3, #28
 8016998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 801699c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169a0:	f043 0308 	orr.w	r3, r3, #8
 80169a4:	b2db      	uxtb	r3, r3
 80169a6:	4619      	mov	r1, r3
 80169a8:	f640 009b 	movw	r0, #2203	; 0x89b
 80169ac:	f000 fddf 	bl	801756e <RadioWrite>
            modReg= RadioRead(0x6d1);
 80169b0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80169b4:	f000 fded 	bl	8017592 <RadioRead>
 80169b8:	4603      	mov	r3, r0
 80169ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80169be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169c2:	f023 0318 	bic.w	r3, r3, #24
 80169c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 80169ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169ce:	f043 0318 	orr.w	r3, r3, #24
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	4619      	mov	r1, r3
 80169d6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80169da:	f000 fdc8 	bl	801756e <RadioWrite>
            modReg= RadioRead(0x6ac);
 80169de:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80169e2:	f000 fdd6 	bl	8017592 <RadioRead>
 80169e6:	4603      	mov	r3, r0
 80169e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80169ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80169f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80169f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169fc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	4619      	mov	r1, r3
 8016a04:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8016a08:	f000 fdb1 	bl	801756e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016a0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016a12:	fb02 f303 	mul.w	r3, r2, r3
 8016a16:	461a      	mov	r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a1e:	4a4f      	ldr	r2, [pc, #316]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a20:	6093      	str	r3, [r2, #8]
            break;
 8016a22:	e118      	b.n	8016c56 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016a24:	2000      	movs	r0, #0
 8016a26:	f001 ff25 	bl	8018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016a2a:	4b4c      	ldr	r3, [pc, #304]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016a32:	4a4a      	ldr	r2, [pc, #296]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016a38:	4b48      	ldr	r3, [pc, #288]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a3a:	220b      	movs	r2, #11
 8016a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016a40:	68b8      	ldr	r0, [r7, #8]
 8016a42:	f002 fd63 	bl	801950c <SUBGRF_GetFskBandwidthRegValue>
 8016a46:	4603      	mov	r3, r0
 8016a48:	461a      	mov	r2, r3
 8016a4a:	4b44      	ldr	r3, [pc, #272]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016a50:	4b42      	ldr	r3, [pc, #264]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016a56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016a58:	00db      	lsls	r3, r3, #3
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	4b3f      	ldr	r3, [pc, #252]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a5e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016a60:	4b3e      	ldr	r3, [pc, #248]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a62:	2204      	movs	r2, #4
 8016a64:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016a66:	4b3d      	ldr	r3, [pc, #244]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a68:	2218      	movs	r2, #24
 8016a6a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016a6c:	4b3b      	ldr	r3, [pc, #236]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a6e:	2200      	movs	r2, #0
 8016a70:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016a72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8016a76:	f083 0301 	eor.w	r3, r3, #1
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	4b37      	ldr	r3, [pc, #220]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016a82:	4b37      	ldr	r3, [pc, #220]	; (8016b60 <RadioSetRxConfig+0x310>)
 8016a84:	781a      	ldrb	r2, [r3, #0]
 8016a86:	4b35      	ldr	r3, [pc, #212]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a88:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016a8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d003      	beq.n	8016a9a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016a92:	4b32      	ldr	r3, [pc, #200]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a94:	22f2      	movs	r2, #242	; 0xf2
 8016a96:	75da      	strb	r2, [r3, #23]
 8016a98:	e002      	b.n	8016aa0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016a9a:	4b30      	ldr	r3, [pc, #192]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016a9c:	2201      	movs	r2, #1
 8016a9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016aa0:	4b2e      	ldr	r3, [pc, #184]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016aa6:	f000 fc76 	bl	8017396 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016aaa:	4b2c      	ldr	r3, [pc, #176]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016aac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	bf14      	ite	ne
 8016ab4:	2301      	movne	r3, #1
 8016ab6:	2300      	moveq	r3, #0
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7ff fdfa 	bl	80166b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ac0:	4828      	ldr	r0, [pc, #160]	; (8016b64 <RadioSetRxConfig+0x314>)
 8016ac2:	f002 f905 	bl	8018cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ac6:	4828      	ldr	r0, [pc, #160]	; (8016b68 <RadioSetRxConfig+0x318>)
 8016ac8:	f002 f9ce 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016acc:	4a28      	ldr	r2, [pc, #160]	; (8016b70 <RadioSetRxConfig+0x320>)
 8016ace:	f107 0314 	add.w	r3, r7, #20
 8016ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ada:	f107 0314 	add.w	r3, r7, #20
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f001 fd01 	bl	80184e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016ae4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016ae8:	f001 fd4c 	bl	8018584 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016aec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016aee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016af2:	fb02 f303 	mul.w	r3, r2, r3
 8016af6:	461a      	mov	r2, r3
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8016afe:	4a17      	ldr	r2, [pc, #92]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b00:	6093      	str	r3, [r2, #8]
            break;
 8016b02:	e0a8      	b.n	8016c56 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016b04:	2000      	movs	r0, #0
 8016b06:	f001 feb5 	bl	8018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016b0a:	4b14      	ldr	r3, [pc, #80]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b0c:	2201      	movs	r2, #1
 8016b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	4b11      	ldr	r3, [pc, #68]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016b1c:	4a15      	ldr	r2, [pc, #84]	; (8016b74 <RadioSetRxConfig+0x324>)
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	4413      	add	r3, r2
 8016b22:	781a      	ldrb	r2, [r3, #0]
 8016b24:	4b0d      	ldr	r3, [pc, #52]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016b2a:	4a0c      	ldr	r2, [pc, #48]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b2c:	7bbb      	ldrb	r3, [r7, #14]
 8016b2e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d105      	bne.n	8016b44 <RadioSetRxConfig+0x2f4>
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2b0b      	cmp	r3, #11
 8016b3c:	d008      	beq.n	8016b50 <RadioSetRxConfig+0x300>
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2b0c      	cmp	r3, #12
 8016b42:	d005      	beq.n	8016b50 <RadioSetRxConfig+0x300>
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d116      	bne.n	8016b78 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2b0c      	cmp	r3, #12
 8016b4e:	d113      	bne.n	8016b78 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016b50:	4b02      	ldr	r3, [pc, #8]	; (8016b5c <RadioSetRxConfig+0x30c>)
 8016b52:	2201      	movs	r2, #1
 8016b54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016b58:	e012      	b.n	8016b80 <RadioSetRxConfig+0x330>
 8016b5a:	bf00      	nop
 8016b5c:	200017b8 	.word	0x200017b8
 8016b60:	20000120 	.word	0x20000120
 8016b64:	200017f0 	.word	0x200017f0
 8016b68:	200017c6 	.word	0x200017c6
 8016b6c:	0801b500 	.word	0x0801b500
 8016b70:	0801b508 	.word	0x0801b508
 8016b74:	0801baec 	.word	0x0801baec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016b78:	4b39      	ldr	r3, [pc, #228]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016b80:	4b37      	ldr	r3, [pc, #220]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016b82:	2201      	movs	r2, #1
 8016b84:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b86:	4b36      	ldr	r3, [pc, #216]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b8c:	2b05      	cmp	r3, #5
 8016b8e:	d004      	beq.n	8016b9a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016b90:	4b33      	ldr	r3, [pc, #204]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016b96:	2b06      	cmp	r3, #6
 8016b98:	d10a      	bne.n	8016bb0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8016b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b9c:	2b0b      	cmp	r3, #11
 8016b9e:	d803      	bhi.n	8016ba8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016ba0:	4b2f      	ldr	r3, [pc, #188]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016ba2:	220c      	movs	r2, #12
 8016ba4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016ba6:	e006      	b.n	8016bb6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016ba8:	4a2d      	ldr	r2, [pc, #180]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016baa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016bae:	e002      	b.n	8016bb6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016bb0:	4a2b      	ldr	r2, [pc, #172]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016bb2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bb4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016bb6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016bba:	4b29      	ldr	r3, [pc, #164]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016bbc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016bbe:	4b29      	ldr	r3, [pc, #164]	; (8016c64 <RadioSetRxConfig+0x414>)
 8016bc0:	781a      	ldrb	r2, [r3, #0]
 8016bc2:	4b27      	ldr	r3, [pc, #156]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016bc4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016bc6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8016bca:	4b25      	ldr	r3, [pc, #148]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016bcc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016bd0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8016bd4:	4b22      	ldr	r3, [pc, #136]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016bda:	f000 fbdc 	bl	8017396 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016bde:	4b20      	ldr	r3, [pc, #128]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	bf14      	ite	ne
 8016be8:	2301      	movne	r3, #1
 8016bea:	2300      	moveq	r3, #0
 8016bec:	b2db      	uxtb	r3, r3
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ff fd60 	bl	80166b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016bf4:	481c      	ldr	r0, [pc, #112]	; (8016c68 <RadioSetRxConfig+0x418>)
 8016bf6:	f002 f86b 	bl	8018cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016bfa:	481c      	ldr	r0, [pc, #112]	; (8016c6c <RadioSetRxConfig+0x41c>)
 8016bfc:	f002 f934 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	4618      	mov	r0, r3
 8016c06:	f001 fe44 	bl	8018892 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016c0a:	4b15      	ldr	r3, [pc, #84]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	d10d      	bne.n	8016c30 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8016c14:	f240 7036 	movw	r0, #1846	; 0x736
 8016c18:	f002 fa82 	bl	8019120 <SUBGRF_ReadRegister>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	f023 0304 	bic.w	r3, r3, #4
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	4619      	mov	r1, r3
 8016c26:	f240 7036 	movw	r0, #1846	; 0x736
 8016c2a:	f002 fa65 	bl	80190f8 <SUBGRF_WriteRegister>
 8016c2e:	e00c      	b.n	8016c4a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8016c30:	f240 7036 	movw	r0, #1846	; 0x736
 8016c34:	f002 fa74 	bl	8019120 <SUBGRF_ReadRegister>
 8016c38:	4603      	mov	r3, r0
 8016c3a:	f043 0304 	orr.w	r3, r3, #4
 8016c3e:	b2db      	uxtb	r3, r3
 8016c40:	4619      	mov	r1, r3
 8016c42:	f240 7036 	movw	r0, #1846	; 0x736
 8016c46:	f002 fa57 	bl	80190f8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016c4a:	4b05      	ldr	r3, [pc, #20]	; (8016c60 <RadioSetRxConfig+0x410>)
 8016c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c50:	609a      	str	r2, [r3, #8]
            break;
 8016c52:	e000      	b.n	8016c56 <RadioSetRxConfig+0x406>
            break;
 8016c54:	bf00      	nop
    }
}
 8016c56:	bf00      	nop
 8016c58:	3728      	adds	r7, #40	; 0x28
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	200017b8 	.word	0x200017b8
 8016c64:	20000120 	.word	0x20000120
 8016c68:	200017f0 	.word	0x200017f0
 8016c6c:	200017c6 	.word	0x200017c6

08016c70 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b086      	sub	sp, #24
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60ba      	str	r2, [r7, #8]
 8016c78:	607b      	str	r3, [r7, #4]
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	73fb      	strb	r3, [r7, #15]
 8016c7e:	460b      	mov	r3, r1
 8016c80:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016c82:	f002 fd12 	bl	80196aa <RFW_DeInit>
    switch( modem )
 8016c86:	7bfb      	ldrb	r3, [r7, #15]
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	f000 80d7 	beq.w	8016e3c <RadioSetTxConfig+0x1cc>
 8016c8e:	2b03      	cmp	r3, #3
 8016c90:	f300 80e6 	bgt.w	8016e60 <RadioSetTxConfig+0x1f0>
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d002      	beq.n	8016c9e <RadioSetTxConfig+0x2e>
 8016c98:	2b01      	cmp	r3, #1
 8016c9a:	d061      	beq.n	8016d60 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8016c9c:	e0e0      	b.n	8016e60 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016c9e:	4b7c      	ldr	r3, [pc, #496]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016ca6:	4a7a      	ldr	r2, [pc, #488]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ca8:	6a3b      	ldr	r3, [r7, #32]
 8016caa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016cac:	4b78      	ldr	r3, [pc, #480]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cae:	220b      	movs	r2, #11
 8016cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f002 fc29 	bl	801950c <SUBGRF_GetFskBandwidthRegValue>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	4b74      	ldr	r3, [pc, #464]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016cc4:	4a72      	ldr	r2, [pc, #456]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cc6:	68bb      	ldr	r3, [r7, #8]
 8016cc8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016cca:	4b71      	ldr	r3, [pc, #452]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ccc:	2200      	movs	r2, #0
 8016cce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016cd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016cd2:	00db      	lsls	r3, r3, #3
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	4b6e      	ldr	r3, [pc, #440]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cd8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016cda:	4b6d      	ldr	r3, [pc, #436]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cdc:	2204      	movs	r2, #4
 8016cde:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016ce0:	4b6b      	ldr	r3, [pc, #428]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ce2:	2218      	movs	r2, #24
 8016ce4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016ce6:	4b6a      	ldr	r3, [pc, #424]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ce8:	2200      	movs	r2, #0
 8016cea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016cec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016cf0:	f083 0301 	eor.w	r3, r3, #1
 8016cf4:	b2db      	uxtb	r3, r3
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	4b65      	ldr	r3, [pc, #404]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016cfa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d003      	beq.n	8016d0c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016d04:	4b62      	ldr	r3, [pc, #392]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d06:	22f2      	movs	r2, #242	; 0xf2
 8016d08:	75da      	strb	r2, [r3, #23]
 8016d0a:	e002      	b.n	8016d12 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016d0c:	4b60      	ldr	r3, [pc, #384]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d0e:	2201      	movs	r2, #1
 8016d10:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016d12:	4b5f      	ldr	r3, [pc, #380]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d14:	2201      	movs	r2, #1
 8016d16:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016d18:	f000 fb3d 	bl	8017396 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016d1c:	4b5c      	ldr	r3, [pc, #368]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	bf14      	ite	ne
 8016d26:	2301      	movne	r3, #1
 8016d28:	2300      	moveq	r3, #0
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7ff fcc1 	bl	80166b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d32:	4858      	ldr	r0, [pc, #352]	; (8016e94 <RadioSetTxConfig+0x224>)
 8016d34:	f001 ffcc 	bl	8018cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d38:	4857      	ldr	r0, [pc, #348]	; (8016e98 <RadioSetTxConfig+0x228>)
 8016d3a:	f002 f895 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016d3e:	4a57      	ldr	r2, [pc, #348]	; (8016e9c <RadioSetTxConfig+0x22c>)
 8016d40:	f107 0310 	add.w	r3, r7, #16
 8016d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d48:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d4c:	f107 0310 	add.w	r3, r7, #16
 8016d50:	4618      	mov	r0, r3
 8016d52:	f001 fbc8 	bl	80184e6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016d5a:	f001 fc13 	bl	8018584 <SUBGRF_SetWhiteningSeed>
            break;
 8016d5e:	e080      	b.n	8016e62 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016d60:	4b4b      	ldr	r3, [pc, #300]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d62:	2201      	movs	r2, #1
 8016d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016d68:	6a3b      	ldr	r3, [r7, #32]
 8016d6a:	b2da      	uxtb	r2, r3
 8016d6c:	4b48      	ldr	r3, [pc, #288]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016d72:	4a4b      	ldr	r2, [pc, #300]	; (8016ea0 <RadioSetTxConfig+0x230>)
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	4413      	add	r3, r2
 8016d78:	781a      	ldrb	r2, [r3, #0]
 8016d7a:	4b45      	ldr	r3, [pc, #276]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016d80:	4a43      	ldr	r2, [pc, #268]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016d82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d86:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d105      	bne.n	8016d9c <RadioSetTxConfig+0x12c>
 8016d90:	6a3b      	ldr	r3, [r7, #32]
 8016d92:	2b0b      	cmp	r3, #11
 8016d94:	d008      	beq.n	8016da8 <RadioSetTxConfig+0x138>
 8016d96:	6a3b      	ldr	r3, [r7, #32]
 8016d98:	2b0c      	cmp	r3, #12
 8016d9a:	d005      	beq.n	8016da8 <RadioSetTxConfig+0x138>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	d107      	bne.n	8016db2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016da2:	6a3b      	ldr	r3, [r7, #32]
 8016da4:	2b0c      	cmp	r3, #12
 8016da6:	d104      	bne.n	8016db2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016da8:	4b39      	ldr	r3, [pc, #228]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016daa:	2201      	movs	r2, #1
 8016dac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8016db0:	e003      	b.n	8016dba <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016db2:	4b37      	ldr	r3, [pc, #220]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016db4:	2200      	movs	r2, #0
 8016db6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016dba:	4b35      	ldr	r3, [pc, #212]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016dbc:	2201      	movs	r2, #1
 8016dbe:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dc0:	4b33      	ldr	r3, [pc, #204]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016dc6:	2b05      	cmp	r3, #5
 8016dc8:	d004      	beq.n	8016dd4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016dca:	4b31      	ldr	r3, [pc, #196]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016dd0:	2b06      	cmp	r3, #6
 8016dd2:	d10a      	bne.n	8016dea <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8016dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dd6:	2b0b      	cmp	r3, #11
 8016dd8:	d803      	bhi.n	8016de2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016dda:	4b2d      	ldr	r3, [pc, #180]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016ddc:	220c      	movs	r2, #12
 8016dde:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016de0:	e006      	b.n	8016df0 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016de2:	4a2b      	ldr	r2, [pc, #172]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016de4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016de6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016de8:	e002      	b.n	8016df0 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016dea:	4a29      	ldr	r2, [pc, #164]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016dec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dee:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016df0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016df4:	4b26      	ldr	r3, [pc, #152]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016df6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016df8:	4b2a      	ldr	r3, [pc, #168]	; (8016ea4 <RadioSetTxConfig+0x234>)
 8016dfa:	781a      	ldrb	r2, [r3, #0]
 8016dfc:	4b24      	ldr	r3, [pc, #144]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016dfe:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016e00:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8016e04:	4b22      	ldr	r3, [pc, #136]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e06:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016e0a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016e0e:	4b20      	ldr	r3, [pc, #128]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8016e14:	f000 fabf 	bl	8017396 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8016e18:	4b1d      	ldr	r3, [pc, #116]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	bf14      	ite	ne
 8016e22:	2301      	movne	r3, #1
 8016e24:	2300      	moveq	r3, #0
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7ff fc43 	bl	80166b4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e2e:	4819      	ldr	r0, [pc, #100]	; (8016e94 <RadioSetTxConfig+0x224>)
 8016e30:	f001 ff4e 	bl	8018cd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e34:	4818      	ldr	r0, [pc, #96]	; (8016e98 <RadioSetTxConfig+0x228>)
 8016e36:	f002 f817 	bl	8018e68 <SUBGRF_SetPacketParams>
            break;
 8016e3a:	e012      	b.n	8016e62 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016e3c:	2003      	movs	r0, #3
 8016e3e:	f7ff fc39 	bl	80166b4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016e42:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e44:	2202      	movs	r2, #2
 8016e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016e4a:	4a11      	ldr	r2, [pc, #68]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e4c:	6a3b      	ldr	r3, [r7, #32]
 8016e4e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016e50:	4b0f      	ldr	r3, [pc, #60]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e52:	2216      	movs	r2, #22
 8016e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e58:	480e      	ldr	r0, [pc, #56]	; (8016e94 <RadioSetTxConfig+0x224>)
 8016e5a:	f001 ff39 	bl	8018cd0 <SUBGRF_SetModulationParams>
            break;
 8016e5e:	e000      	b.n	8016e62 <RadioSetTxConfig+0x1f2>
            break;
 8016e60:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016e66:	4618      	mov	r0, r3
 8016e68:	f002 fa62 	bl	8019330 <SUBGRF_SetRfTxPower>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	461a      	mov	r2, r3
 8016e70:	4b07      	ldr	r3, [pc, #28]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e72:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8016e76:	4b06      	ldr	r3, [pc, #24]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f002 fc28 	bl	80196d2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8016e82:	4a03      	ldr	r2, [pc, #12]	; (8016e90 <RadioSetTxConfig+0x220>)
 8016e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e86:	6053      	str	r3, [r2, #4]
}
 8016e88:	bf00      	nop
 8016e8a:	3718      	adds	r7, #24
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	200017b8 	.word	0x200017b8
 8016e94:	200017f0 	.word	0x200017f0
 8016e98:	200017c6 	.word	0x200017c6
 8016e9c:	0801b508 	.word	0x0801b508
 8016ea0:	0801baec 	.word	0x0801baec
 8016ea4:	20000120 	.word	0x20000120

08016ea8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8016ea8:	b480      	push	{r7}
 8016eaa:	b083      	sub	sp, #12
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
    return true;
 8016eb0:	2301      	movs	r3, #1
}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	370c      	adds	r7, #12
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bc80      	pop	{r7}
 8016eba:	4770      	bx	lr

08016ebc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b085      	sub	sp, #20
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8016eca:	79fb      	ldrb	r3, [r7, #7]
 8016ecc:	2b0a      	cmp	r3, #10
 8016ece:	d83e      	bhi.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
 8016ed0:	a201      	add	r2, pc, #4	; (adr r2, 8016ed8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8016ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed6:	bf00      	nop
 8016ed8:	08016f05 	.word	0x08016f05
 8016edc:	08016f15 	.word	0x08016f15
 8016ee0:	08016f25 	.word	0x08016f25
 8016ee4:	08016f35 	.word	0x08016f35
 8016ee8:	08016f3d 	.word	0x08016f3d
 8016eec:	08016f43 	.word	0x08016f43
 8016ef0:	08016f49 	.word	0x08016f49
 8016ef4:	08016f4f 	.word	0x08016f4f
 8016ef8:	08016f0d 	.word	0x08016f0d
 8016efc:	08016f1d 	.word	0x08016f1d
 8016f00:	08016f2d 	.word	0x08016f2d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8016f04:	f641 6384 	movw	r3, #7812	; 0x1e84
 8016f08:	60fb      	str	r3, [r7, #12]
        break;
 8016f0a:	e020      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8016f0c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8016f10:	60fb      	str	r3, [r7, #12]
        break;
 8016f12:	e01c      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8016f14:	f643 5309 	movw	r3, #15625	; 0x3d09
 8016f18:	60fb      	str	r3, [r7, #12]
        break;
 8016f1a:	e018      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8016f1c:	f245 1361 	movw	r3, #20833	; 0x5161
 8016f20:	60fb      	str	r3, [r7, #12]
        break;
 8016f22:	e014      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8016f24:	f647 2312 	movw	r3, #31250	; 0x7a12
 8016f28:	60fb      	str	r3, [r7, #12]
        break;
 8016f2a:	e010      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8016f2c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8016f30:	60fb      	str	r3, [r7, #12]
        break;
 8016f32:	e00c      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8016f34:	f24f 4324 	movw	r3, #62500	; 0xf424
 8016f38:	60fb      	str	r3, [r7, #12]
        break;
 8016f3a:	e008      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8016f3c:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <RadioGetLoRaBandwidthInHz+0xa0>)
 8016f3e:	60fb      	str	r3, [r7, #12]
        break;
 8016f40:	e005      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8016f42:	4b07      	ldr	r3, [pc, #28]	; (8016f60 <RadioGetLoRaBandwidthInHz+0xa4>)
 8016f44:	60fb      	str	r3, [r7, #12]
        break;
 8016f46:	e002      	b.n	8016f4e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8016f48:	4b06      	ldr	r3, [pc, #24]	; (8016f64 <RadioGetLoRaBandwidthInHz+0xa8>)
 8016f4a:	60fb      	str	r3, [r7, #12]
        break;
 8016f4c:	bf00      	nop
    }

    return bandwidthInHz;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	3714      	adds	r7, #20
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bc80      	pop	{r7}
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop
 8016f5c:	0001e848 	.word	0x0001e848
 8016f60:	0003d090 	.word	0x0003d090
 8016f64:	0007a120 	.word	0x0007a120

08016f68 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b083      	sub	sp, #12
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
 8016f70:	4608      	mov	r0, r1
 8016f72:	4611      	mov	r1, r2
 8016f74:	461a      	mov	r2, r3
 8016f76:	4603      	mov	r3, r0
 8016f78:	70fb      	strb	r3, [r7, #3]
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	803b      	strh	r3, [r7, #0]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8016f82:	883b      	ldrh	r3, [r7, #0]
 8016f84:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f86:	78ba      	ldrb	r2, [r7, #2]
 8016f88:	f082 0201 	eor.w	r2, r2, #1
 8016f8c:	b2d2      	uxtb	r2, r2
 8016f8e:	2a00      	cmp	r2, #0
 8016f90:	d001      	beq.n	8016f96 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8016f92:	2208      	movs	r2, #8
 8016f94:	e000      	b.n	8016f98 <RadioGetGfskTimeOnAirNumerator+0x30>
 8016f96:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8016f98:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016f9a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8016f9e:	7c3b      	ldrb	r3, [r7, #16]
 8016fa0:	7d39      	ldrb	r1, [r7, #20]
 8016fa2:	2900      	cmp	r1, #0
 8016fa4:	d001      	beq.n	8016faa <RadioGetGfskTimeOnAirNumerator+0x42>
 8016fa6:	2102      	movs	r1, #2
 8016fa8:	e000      	b.n	8016fac <RadioGetGfskTimeOnAirNumerator+0x44>
 8016faa:	2100      	movs	r1, #0
 8016fac:	440b      	add	r3, r1
 8016fae:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8016fb0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	370c      	adds	r7, #12
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bc80      	pop	{r7}
 8016fba:	4770      	bx	lr

08016fbc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b08b      	sub	sp, #44	; 0x2c
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	60f8      	str	r0, [r7, #12]
 8016fc4:	60b9      	str	r1, [r7, #8]
 8016fc6:	4611      	mov	r1, r2
 8016fc8:	461a      	mov	r2, r3
 8016fca:	460b      	mov	r3, r1
 8016fcc:	71fb      	strb	r3, [r7, #7]
 8016fce:	4613      	mov	r3, r2
 8016fd0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8016fd2:	79fb      	ldrb	r3, [r7, #7]
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	2b05      	cmp	r3, #5
 8016fe2:	d002      	beq.n	8016fea <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	2b06      	cmp	r3, #6
 8016fe8:	d104      	bne.n	8016ff4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8016fea:	88bb      	ldrh	r3, [r7, #4]
 8016fec:	2b0b      	cmp	r3, #11
 8016fee:	d801      	bhi.n	8016ff4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8016ff0:	230c      	movs	r3, #12
 8016ff2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d105      	bne.n	8017006 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	2b0b      	cmp	r3, #11
 8016ffe:	d008      	beq.n	8017012 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	2b0c      	cmp	r3, #12
 8017004:	d005      	beq.n	8017012 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	2b01      	cmp	r3, #1
 801700a:	d105      	bne.n	8017018 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	2b0c      	cmp	r3, #12
 8017010:	d102      	bne.n	8017018 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017012:	2301      	movs	r3, #1
 8017014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017018:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801701c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801701e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017022:	2a00      	cmp	r2, #0
 8017024:	d001      	beq.n	801702a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017026:	2210      	movs	r2, #16
 8017028:	e000      	b.n	801702c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801702a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801702c:	4413      	add	r3, r2
 801702e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017034:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017036:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801703a:	2a00      	cmp	r2, #0
 801703c:	d001      	beq.n	8017042 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801703e:	2200      	movs	r2, #0
 8017040:	e000      	b.n	8017044 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017042:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017044:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017046:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	2b06      	cmp	r3, #6
 801704c:	d803      	bhi.n	8017056 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	009b      	lsls	r3, r3, #2
 8017052:	623b      	str	r3, [r7, #32]
 8017054:	e00e      	b.n	8017074 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	3308      	adds	r3, #8
 801705a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801705c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017060:	2b00      	cmp	r3, #0
 8017062:	d004      	beq.n	801706e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	3b02      	subs	r3, #2
 8017068:	009b      	lsls	r3, r3, #2
 801706a:	623b      	str	r3, [r7, #32]
 801706c:	e002      	b.n	8017074 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	009b      	lsls	r3, r3, #2
 8017072:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017074:	69fb      	ldr	r3, [r7, #28]
 8017076:	2b00      	cmp	r3, #0
 8017078:	da01      	bge.n	801707e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801707a:	2300      	movs	r3, #0
 801707c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801707e:	69fa      	ldr	r2, [r7, #28]
 8017080:	6a3b      	ldr	r3, [r7, #32]
 8017082:	4413      	add	r3, r2
 8017084:	1e5a      	subs	r2, r3, #1
 8017086:	6a3b      	ldr	r3, [r7, #32]
 8017088:	fb92 f3f3 	sdiv	r3, r2, r3
 801708c:	697a      	ldr	r2, [r7, #20]
 801708e:	fb02 f203 	mul.w	r2, r2, r3
 8017092:	88bb      	ldrh	r3, [r7, #4]
 8017094:	4413      	add	r3, r2
    int32_t intermediate =
 8017096:	330c      	adds	r3, #12
 8017098:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	2b06      	cmp	r3, #6
 801709e:	d802      	bhi.n	80170a6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	3302      	adds	r3, #2
 80170a4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80170a6:	69bb      	ldr	r3, [r7, #24]
 80170a8:	009b      	lsls	r3, r3, #2
 80170aa:	1c5a      	adds	r2, r3, #1
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	3b02      	subs	r3, #2
 80170b0:	fa02 f303 	lsl.w	r3, r2, r3
}
 80170b4:	4618      	mov	r0, r3
 80170b6:	372c      	adds	r7, #44	; 0x2c
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bc80      	pop	{r7}
 80170bc:	4770      	bx	lr
	...

080170c0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b08a      	sub	sp, #40	; 0x28
 80170c4:	af04      	add	r7, sp, #16
 80170c6:	60b9      	str	r1, [r7, #8]
 80170c8:	607a      	str	r2, [r7, #4]
 80170ca:	461a      	mov	r2, r3
 80170cc:	4603      	mov	r3, r0
 80170ce:	73fb      	strb	r3, [r7, #15]
 80170d0:	4613      	mov	r3, r2
 80170d2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80170d4:	2300      	movs	r3, #0
 80170d6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80170d8:	2301      	movs	r3, #1
 80170da:	613b      	str	r3, [r7, #16]

    switch( modem )
 80170dc:	7bfb      	ldrb	r3, [r7, #15]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d002      	beq.n	80170e8 <RadioTimeOnAir+0x28>
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d017      	beq.n	8017116 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80170e6:	e035      	b.n	8017154 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80170e8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80170ec:	8c3a      	ldrh	r2, [r7, #32]
 80170ee:	7bb9      	ldrb	r1, [r7, #14]
 80170f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80170f4:	9301      	str	r3, [sp, #4]
 80170f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80170fa:	9300      	str	r3, [sp, #0]
 80170fc:	4603      	mov	r3, r0
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f7ff ff32 	bl	8016f68 <RadioGetGfskTimeOnAirNumerator>
 8017104:	4603      	mov	r3, r0
 8017106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801710a:	fb02 f303 	mul.w	r3, r2, r3
 801710e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	613b      	str	r3, [r7, #16]
        break;
 8017114:	e01e      	b.n	8017154 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017116:	8c39      	ldrh	r1, [r7, #32]
 8017118:	7bba      	ldrb	r2, [r7, #14]
 801711a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801711e:	9302      	str	r3, [sp, #8]
 8017120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017124:	9301      	str	r3, [sp, #4]
 8017126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	460b      	mov	r3, r1
 801712e:	6879      	ldr	r1, [r7, #4]
 8017130:	68b8      	ldr	r0, [r7, #8]
 8017132:	f7ff ff43 	bl	8016fbc <RadioGetLoRaTimeOnAirNumerator>
 8017136:	4603      	mov	r3, r0
 8017138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801713c:	fb02 f303 	mul.w	r3, r2, r3
 8017140:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8017142:	4a0a      	ldr	r2, [pc, #40]	; (801716c <RadioTimeOnAir+0xac>)
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	4413      	add	r3, r2
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	4618      	mov	r0, r3
 801714c:	f7ff feb6 	bl	8016ebc <RadioGetLoRaBandwidthInHz>
 8017150:	6138      	str	r0, [r7, #16]
        break;
 8017152:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8017154:	697a      	ldr	r2, [r7, #20]
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	4413      	add	r3, r2
 801715a:	1e5a      	subs	r2, r3, #1
 801715c:	693b      	ldr	r3, [r7, #16]
 801715e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017162:	4618      	mov	r0, r3
 8017164:	3718      	adds	r7, #24
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	0801baec 	.word	0x0801baec

08017170 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	460b      	mov	r3, r1
 801717a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801717c:	2300      	movs	r3, #0
 801717e:	2200      	movs	r2, #0
 8017180:	f240 2101 	movw	r1, #513	; 0x201
 8017184:	f240 2001 	movw	r0, #513	; 0x201
 8017188:	f001 fc78 	bl	8018a7c <SUBGRF_SetDioIrqParams>
                            IRQ_RADIO_NONE );
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);
 801718c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017190:	4871      	ldr	r0, [pc, #452]	; (8017358 <RadioSend+0x1e8>)
 8017192:	f7ff fa07 	bl	80165a4 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8017196:	4b71      	ldr	r3, [pc, #452]	; (801735c <RadioSend+0x1ec>)
 8017198:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801719c:	2101      	movs	r1, #1
 801719e:	4618      	mov	r0, r3
 80171a0:	f002 f89e 	bl	80192e0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 80171a4:	4b6d      	ldr	r3, [pc, #436]	; (801735c <RadioSend+0x1ec>)
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d112      	bne.n	80171d2 <RadioSend+0x62>
 80171ac:	4b6b      	ldr	r3, [pc, #428]	; (801735c <RadioSend+0x1ec>)
 80171ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80171b2:	2b06      	cmp	r3, #6
 80171b4:	d10d      	bne.n	80171d2 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 80171b6:	f640 0089 	movw	r0, #2185	; 0x889
 80171ba:	f001 ffb1 	bl	8019120 <SUBGRF_ReadRegister>
 80171be:	4603      	mov	r3, r0
 80171c0:	f023 0304 	bic.w	r3, r3, #4
 80171c4:	b2db      	uxtb	r3, r3
 80171c6:	4619      	mov	r1, r3
 80171c8:	f640 0089 	movw	r0, #2185	; 0x889
 80171cc:	f001 ff94 	bl	80190f8 <SUBGRF_WriteRegister>
 80171d0:	e00c      	b.n	80171ec <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 80171d2:	f640 0089 	movw	r0, #2185	; 0x889
 80171d6:	f001 ffa3 	bl	8019120 <SUBGRF_ReadRegister>
 80171da:	4603      	mov	r3, r0
 80171dc:	f043 0304 	orr.w	r3, r3, #4
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	4619      	mov	r1, r3
 80171e4:	f640 0089 	movw	r0, #2185	; 0x889
 80171e8:	f001 ff86 	bl	80190f8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 80171ec:	4b5b      	ldr	r3, [pc, #364]	; (801735c <RadioSend+0x1ec>)
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	2b03      	cmp	r3, #3
 80171f2:	f200 80a4 	bhi.w	801733e <RadioSend+0x1ce>
 80171f6:	a201      	add	r2, pc, #4	; (adr r2, 80171fc <RadioSend+0x8c>)
 80171f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171fc:	08017227 	.word	0x08017227
 8017200:	0801720d 	.word	0x0801720d
 8017204:	08017287 	.word	0x08017287
 8017208:	080172a7 	.word	0x080172a7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801720c:	4a53      	ldr	r2, [pc, #332]	; (801735c <RadioSend+0x1ec>)
 801720e:	78fb      	ldrb	r3, [r7, #3]
 8017210:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017212:	4853      	ldr	r0, [pc, #332]	; (8017360 <RadioSend+0x1f0>)
 8017214:	f001 fe28 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017218:	78fb      	ldrb	r3, [r7, #3]
 801721a:	2200      	movs	r2, #0
 801721c:	4619      	mov	r1, r3
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f001 f94e 	bl	80184c0 <SUBGRF_SendPayload>
            break;
 8017224:	e08c      	b.n	8017340 <RadioSend+0x1d0>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8017226:	f002 fa46 	bl	80196b6 <RFW_Is_Init>
 801722a:	4603      	mov	r3, r0
 801722c:	2b01      	cmp	r3, #1
 801722e:	d11d      	bne.n	801726c <RadioSend+0xfc>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017230:	f107 020d 	add.w	r2, r7, #13
 8017234:	78fb      	ldrb	r3, [r7, #3]
 8017236:	4619      	mov	r1, r3
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f002 fa54 	bl	80196e6 <RFW_TransmitInit>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d10c      	bne.n	801725e <RadioSend+0xee>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017244:	7b7a      	ldrb	r2, [r7, #13]
 8017246:	4b45      	ldr	r3, [pc, #276]	; (801735c <RadioSend+0x1ec>)
 8017248:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801724a:	4845      	ldr	r0, [pc, #276]	; (8017360 <RadioSend+0x1f0>)
 801724c:	f001 fe0c 	bl	8018e68 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8017250:	7b7b      	ldrb	r3, [r7, #13]
 8017252:	2200      	movs	r2, #0
 8017254:	4619      	mov	r1, r3
 8017256:	6878      	ldr	r0, [r7, #4]
 8017258:	f001 f932 	bl	80184c0 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801725c:	e070      	b.n	8017340 <RadioSend+0x1d0>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801725e:	4b41      	ldr	r3, [pc, #260]	; (8017364 <RadioSend+0x1f4>)
 8017260:	2201      	movs	r2, #1
 8017262:	2100      	movs	r1, #0
 8017264:	2002      	movs	r0, #2
 8017266:	f003 fa25 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
 801726a:	e072      	b.n	8017352 <RadioSend+0x1e2>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801726c:	4a3b      	ldr	r2, [pc, #236]	; (801735c <RadioSend+0x1ec>)
 801726e:	78fb      	ldrb	r3, [r7, #3]
 8017270:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017272:	483b      	ldr	r0, [pc, #236]	; (8017360 <RadioSend+0x1f0>)
 8017274:	f001 fdf8 	bl	8018e68 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8017278:	78fb      	ldrb	r3, [r7, #3]
 801727a:	2200      	movs	r2, #0
 801727c:	4619      	mov	r1, r3
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f001 f91e 	bl	80184c0 <SUBGRF_SendPayload>
            break;
 8017284:	e05c      	b.n	8017340 <RadioSend+0x1d0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017286:	4b35      	ldr	r3, [pc, #212]	; (801735c <RadioSend+0x1ec>)
 8017288:	2202      	movs	r2, #2
 801728a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801728c:	4a33      	ldr	r2, [pc, #204]	; (801735c <RadioSend+0x1ec>)
 801728e:	78fb      	ldrb	r3, [r7, #3]
 8017290:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017292:	4833      	ldr	r0, [pc, #204]	; (8017360 <RadioSend+0x1f0>)
 8017294:	f001 fde8 	bl	8018e68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017298:	78fb      	ldrb	r3, [r7, #3]
 801729a:	2200      	movs	r2, #0
 801729c:	4619      	mov	r1, r3
 801729e:	6878      	ldr	r0, [r7, #4]
 80172a0:	f001 f90e 	bl	80184c0 <SUBGRF_SendPayload>
            break;
 80172a4:	e04c      	b.n	8017340 <RadioSend+0x1d0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80172a6:	78fb      	ldrb	r3, [r7, #3]
 80172a8:	461a      	mov	r2, r3
 80172aa:	6879      	ldr	r1, [r7, #4]
 80172ac:	482e      	ldr	r0, [pc, #184]	; (8017368 <RadioSend+0x1f8>)
 80172ae:	f000 fc8e 	bl	8017bce <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80172b2:	4b2a      	ldr	r3, [pc, #168]	; (801735c <RadioSend+0x1ec>)
 80172b4:	2202      	movs	r2, #2
 80172b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80172b8:	78fb      	ldrb	r3, [r7, #3]
 80172ba:	3301      	adds	r3, #1
 80172bc:	b2da      	uxtb	r2, r3
 80172be:	4b27      	ldr	r3, [pc, #156]	; (801735c <RadioSend+0x1ec>)
 80172c0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80172c2:	4827      	ldr	r0, [pc, #156]	; (8017360 <RadioSend+0x1f0>)
 80172c4:	f001 fdd0 	bl	8018e68 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 80172c8:	2100      	movs	r1, #0
 80172ca:	20f1      	movs	r0, #241	; 0xf1
 80172cc:	f000 f94f 	bl	801756e <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 80172d0:	2100      	movs	r1, #0
 80172d2:	20f0      	movs	r0, #240	; 0xf0
 80172d4:	f000 f94b 	bl	801756e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80172d8:	4b20      	ldr	r3, [pc, #128]	; (801735c <RadioSend+0x1ec>)
 80172da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172dc:	2b64      	cmp	r3, #100	; 0x64
 80172de:	d108      	bne.n	80172f2 <RadioSend+0x182>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 80172e0:	2170      	movs	r1, #112	; 0x70
 80172e2:	20f3      	movs	r0, #243	; 0xf3
 80172e4:	f000 f943 	bl	801756e <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 80172e8:	211d      	movs	r1, #29
 80172ea:	20f2      	movs	r0, #242	; 0xf2
 80172ec:	f000 f93f 	bl	801756e <RadioWrite>
 80172f0:	e007      	b.n	8017302 <RadioSend+0x192>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 80172f2:	21e1      	movs	r1, #225	; 0xe1
 80172f4:	20f3      	movs	r0, #243	; 0xf3
 80172f6:	f000 f93a 	bl	801756e <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 80172fa:	2104      	movs	r1, #4
 80172fc:	20f2      	movs	r0, #242	; 0xf2
 80172fe:	f000 f936 	bl	801756e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017302:	78fb      	ldrb	r3, [r7, #3]
 8017304:	b29b      	uxth	r3, r3
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	b29b      	uxth	r3, r3
 801730a:	3302      	adds	r3, #2
 801730c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801730e:	89fb      	ldrh	r3, [r7, #14]
 8017310:	0a1b      	lsrs	r3, r3, #8
 8017312:	b29b      	uxth	r3, r3
 8017314:	b2db      	uxtb	r3, r3
 8017316:	4619      	mov	r1, r3
 8017318:	20f4      	movs	r0, #244	; 0xf4
 801731a:	f000 f928 	bl	801756e <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801731e:	89fb      	ldrh	r3, [r7, #14]
 8017320:	b2db      	uxtb	r3, r3
 8017322:	4619      	mov	r1, r3
 8017324:	20f5      	movs	r0, #245	; 0xf5
 8017326:	f000 f922 	bl	801756e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801732a:	78fb      	ldrb	r3, [r7, #3]
 801732c:	3301      	adds	r3, #1
 801732e:	b2db      	uxtb	r3, r3
 8017330:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8017334:	4619      	mov	r1, r3
 8017336:	480c      	ldr	r0, [pc, #48]	; (8017368 <RadioSend+0x1f8>)
 8017338:	f001 f8c2 	bl	80184c0 <SUBGRF_SendPayload>
            break;
 801733c:	e000      	b.n	8017340 <RadioSend+0x1d0>
        }
        default:
            break;
 801733e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017340:	4b06      	ldr	r3, [pc, #24]	; (801735c <RadioSend+0x1ec>)
 8017342:	685b      	ldr	r3, [r3, #4]
 8017344:	4619      	mov	r1, r3
 8017346:	4809      	ldr	r0, [pc, #36]	; (801736c <RadioSend+0x1fc>)
 8017348:	f003 f81a 	bl	801a380 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801734c:	4807      	ldr	r0, [pc, #28]	; (801736c <RadioSend+0x1fc>)
 801734e:	f002 ff39 	bl	801a1c4 <UTIL_TIMER_Start>
}
 8017352:	3710      	adds	r7, #16
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}
 8017358:	48000400 	.word	0x48000400
 801735c:	200017b8 	.word	0x200017b8
 8017360:	200017c6 	.word	0x200017c6
 8017364:	0801b510 	.word	0x0801b510
 8017368:	20000dd8 	.word	0x20000dd8
 801736c:	20001810 	.word	0x20001810

08017370 <RadioSleep>:

static void RadioSleep( void )
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017376:	2300      	movs	r3, #0
 8017378:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801737a:	793b      	ldrb	r3, [r7, #4]
 801737c:	f043 0304 	orr.w	r3, r3, #4
 8017380:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017382:	7938      	ldrb	r0, [r7, #4]
 8017384:	f001 f978 	bl	8018678 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017388:	2002      	movs	r0, #2
 801738a:	f7ea fe32 	bl	8001ff2 <HAL_Delay>
}
 801738e:	bf00      	nop
 8017390:	3708      	adds	r7, #8
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}

08017396 <RadioStandby>:

static void RadioStandby( void )
{
 8017396:	b580      	push	{r7, lr}
 8017398:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801739a:	2000      	movs	r0, #0
 801739c:	f001 f99e 	bl	80186dc <SUBGRF_SetStandby>
}
 80173a0:	bf00      	nop
 80173a2:	bd80      	pop	{r7, pc}

080173a4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b082      	sub	sp, #8
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 80173ac:	f002 f983 	bl	80196b6 <RFW_Is_Init>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b01      	cmp	r3, #1
 80173b4:	d102      	bne.n	80173bc <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 80173b6:	f002 f9a6 	bl	8019706 <RFW_ReceiveInit>
 80173ba:	e007      	b.n	80173cc <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80173bc:	2300      	movs	r3, #0
 80173be:	2200      	movs	r2, #0
 80173c0:	f240 2162 	movw	r1, #610	; 0x262
 80173c4:	f240 2062 	movw	r0, #610	; 0x262
 80173c8:	f001 fb58 	bl	8018a7c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d006      	beq.n	80173e0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80173d2:	6879      	ldr	r1, [r7, #4]
 80173d4:	4812      	ldr	r0, [pc, #72]	; (8017420 <RadioRx+0x7c>)
 80173d6:	f002 ffd3 	bl	801a380 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80173da:	4811      	ldr	r0, [pc, #68]	; (8017420 <RadioRx+0x7c>)
 80173dc:	f002 fef2 	bl	801a1c4 <UTIL_TIMER_Start>
    }

    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);
 80173e0:	2101      	movs	r1, #1
 80173e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80173e6:	f7ff f8dd 	bl	80165a4 <LL_GPIO_SetOutputPin>

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80173ea:	4b0e      	ldr	r3, [pc, #56]	; (8017424 <RadioRx+0x80>)
 80173ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80173f0:	2100      	movs	r1, #0
 80173f2:	4618      	mov	r0, r3
 80173f4:	f001 ff74 	bl	80192e0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80173f8:	4b0a      	ldr	r3, [pc, #40]	; (8017424 <RadioRx+0x80>)
 80173fa:	785b      	ldrb	r3, [r3, #1]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d004      	beq.n	801740a <RadioRx+0x66>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017400:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8017404:	f001 f9a6 	bl	8018754 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017408:	e005      	b.n	8017416 <RadioRx+0x72>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801740a:	4b06      	ldr	r3, [pc, #24]	; (8017424 <RadioRx+0x80>)
 801740c:	689b      	ldr	r3, [r3, #8]
 801740e:	019b      	lsls	r3, r3, #6
 8017410:	4618      	mov	r0, r3
 8017412:	f001 f99f 	bl	8018754 <SUBGRF_SetRx>
}
 8017416:	bf00      	nop
 8017418:	3708      	adds	r7, #8
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	20001828 	.word	0x20001828
 8017424:	200017b8 	.word	0x200017b8

08017428 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b082      	sub	sp, #8
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8017430:	f002 f941 	bl	80196b6 <RFW_Is_Init>
 8017434:	4603      	mov	r3, r0
 8017436:	2b01      	cmp	r3, #1
 8017438:	d102      	bne.n	8017440 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801743a:	f002 f964 	bl	8019706 <RFW_ReceiveInit>
 801743e:	e007      	b.n	8017450 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017440:	2300      	movs	r3, #0
 8017442:	2200      	movs	r2, #0
 8017444:	f240 2162 	movw	r1, #610	; 0x262
 8017448:	f240 2062 	movw	r0, #610	; 0x262
 801744c:	f001 fb16 	bl	8018a7c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d006      	beq.n	8017464 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017456:	6879      	ldr	r1, [r7, #4]
 8017458:	480f      	ldr	r0, [pc, #60]	; (8017498 <RadioRxBoosted+0x70>)
 801745a:	f002 ff91 	bl	801a380 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801745e:	480e      	ldr	r0, [pc, #56]	; (8017498 <RadioRxBoosted+0x70>)
 8017460:	f002 feb0 	bl	801a1c4 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8017464:	4b0d      	ldr	r3, [pc, #52]	; (801749c <RadioRxBoosted+0x74>)
 8017466:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801746a:	2100      	movs	r1, #0
 801746c:	4618      	mov	r0, r3
 801746e:	f001 ff37 	bl	80192e0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017472:	4b0a      	ldr	r3, [pc, #40]	; (801749c <RadioRxBoosted+0x74>)
 8017474:	785b      	ldrb	r3, [r3, #1]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d004      	beq.n	8017484 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801747a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801747e:	f001 f989 	bl	8018794 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017482:	e005      	b.n	8017490 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017484:	4b05      	ldr	r3, [pc, #20]	; (801749c <RadioRxBoosted+0x74>)
 8017486:	689b      	ldr	r3, [r3, #8]
 8017488:	019b      	lsls	r3, r3, #6
 801748a:	4618      	mov	r0, r3
 801748c:	f001 f982 	bl	8018794 <SUBGRF_SetRxBoosted>
}
 8017490:	bf00      	nop
 8017492:	3708      	adds	r7, #8
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}
 8017498:	20001828 	.word	0x20001828
 801749c:	200017b8 	.word	0x200017b8

080174a0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b082      	sub	sp, #8
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
 80174a8:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80174aa:	4b07      	ldr	r3, [pc, #28]	; (80174c8 <RadioSetRxDutyCycle+0x28>)
 80174ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80174b0:	2100      	movs	r1, #0
 80174b2:	4618      	mov	r0, r3
 80174b4:	f001 ff14 	bl	80192e0 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80174b8:	6839      	ldr	r1, [r7, #0]
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f001 f98e 	bl	80187dc <SUBGRF_SetRxDutyCycle>
}
 80174c0:	bf00      	nop
 80174c2:	3708      	adds	r7, #8
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}
 80174c8:	200017b8 	.word	0x200017b8

080174cc <RadioStartCad>:

static void RadioStartCad( void )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 80174d0:	4b09      	ldr	r3, [pc, #36]	; (80174f8 <RadioStartCad+0x2c>)
 80174d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80174d6:	2100      	movs	r1, #0
 80174d8:	4618      	mov	r0, r3
 80174da:	f001 ff01 	bl	80192e0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80174de:	2300      	movs	r3, #0
 80174e0:	2200      	movs	r2, #0
 80174e2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80174e6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 80174ea:	f001 fac7 	bl	8018a7c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80174ee:	f001 f9a1 	bl	8018834 <SUBGRF_SetCad>
}
 80174f2:	bf00      	nop
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	bf00      	nop
 80174f8:	200017b8 	.word	0x200017b8

080174fc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	460b      	mov	r3, r1
 8017506:	70fb      	strb	r3, [r7, #3]
 8017508:	4613      	mov	r3, r2
 801750a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801750c:	883b      	ldrh	r3, [r7, #0]
 801750e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017512:	fb02 f303 	mul.w	r3, r2, r3
 8017516:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017518:	6878      	ldr	r0, [r7, #4]
 801751a:	f001 fb0b 	bl	8018b34 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801751e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017522:	4618      	mov	r0, r3
 8017524:	f001 ff04 	bl	8019330 <SUBGRF_SetRfTxPower>
 8017528:	4603      	mov	r3, r0
 801752a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801752c:	7afb      	ldrb	r3, [r7, #11]
 801752e:	2101      	movs	r1, #1
 8017530:	4618      	mov	r0, r3
 8017532:	f001 fed5 	bl	80192e0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017536:	f001 f98b 	bl	8018850 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801753a:	68f9      	ldr	r1, [r7, #12]
 801753c:	4804      	ldr	r0, [pc, #16]	; (8017550 <RadioSetTxContinuousWave+0x54>)
 801753e:	f002 ff1f 	bl	801a380 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017542:	4803      	ldr	r0, [pc, #12]	; (8017550 <RadioSetTxContinuousWave+0x54>)
 8017544:	f002 fe3e 	bl	801a1c4 <UTIL_TIMER_Start>
}
 8017548:	bf00      	nop
 801754a:	3710      	adds	r7, #16
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}
 8017550:	20001810 	.word	0x20001810

08017554 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	4603      	mov	r3, r0
 801755c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801755e:	f001 fd38 	bl	8018fd2 <SUBGRF_GetRssiInst>
 8017562:	4603      	mov	r3, r0
 8017564:	b21b      	sxth	r3, r3
}
 8017566:	4618      	mov	r0, r3
 8017568:	3708      	adds	r7, #8
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}

0801756e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801756e:	b580      	push	{r7, lr}
 8017570:	b082      	sub	sp, #8
 8017572:	af00      	add	r7, sp, #0
 8017574:	4603      	mov	r3, r0
 8017576:	460a      	mov	r2, r1
 8017578:	80fb      	strh	r3, [r7, #6]
 801757a:	4613      	mov	r3, r2
 801757c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801757e:	797a      	ldrb	r2, [r7, #5]
 8017580:	88fb      	ldrh	r3, [r7, #6]
 8017582:	4611      	mov	r1, r2
 8017584:	4618      	mov	r0, r3
 8017586:	f001 fdb7 	bl	80190f8 <SUBGRF_WriteRegister>
}
 801758a:	bf00      	nop
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b082      	sub	sp, #8
 8017596:	af00      	add	r7, sp, #0
 8017598:	4603      	mov	r3, r0
 801759a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801759c:	88fb      	ldrh	r3, [r7, #6]
 801759e:	4618      	mov	r0, r3
 80175a0:	f001 fdbe 	bl	8019120 <SUBGRF_ReadRegister>
 80175a4:	4603      	mov	r3, r0
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3708      	adds	r7, #8
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b082      	sub	sp, #8
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	4603      	mov	r3, r0
 80175b6:	6039      	str	r1, [r7, #0]
 80175b8:	80fb      	strh	r3, [r7, #6]
 80175ba:	4613      	mov	r3, r2
 80175bc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80175be:	797b      	ldrb	r3, [r7, #5]
 80175c0:	b29a      	uxth	r2, r3
 80175c2:	88fb      	ldrh	r3, [r7, #6]
 80175c4:	6839      	ldr	r1, [r7, #0]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f001 fdbe 	bl	8019148 <SUBGRF_WriteRegisters>
}
 80175cc:	bf00      	nop
 80175ce:	3708      	adds	r7, #8
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	4603      	mov	r3, r0
 80175dc:	6039      	str	r1, [r7, #0]
 80175de:	80fb      	strh	r3, [r7, #6]
 80175e0:	4613      	mov	r3, r2
 80175e2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80175e4:	797b      	ldrb	r3, [r7, #5]
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	88fb      	ldrh	r3, [r7, #6]
 80175ea:	6839      	ldr	r1, [r7, #0]
 80175ec:	4618      	mov	r0, r3
 80175ee:	f001 fdcd 	bl	801918c <SUBGRF_ReadRegisters>
}
 80175f2:	bf00      	nop
 80175f4:	3708      	adds	r7, #8
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
	...

080175fc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	4603      	mov	r3, r0
 8017604:	460a      	mov	r2, r1
 8017606:	71fb      	strb	r3, [r7, #7]
 8017608:	4613      	mov	r3, r2
 801760a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801760c:	79fb      	ldrb	r3, [r7, #7]
 801760e:	2b01      	cmp	r3, #1
 8017610:	d10a      	bne.n	8017628 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017612:	4a0e      	ldr	r2, [pc, #56]	; (801764c <RadioSetMaxPayloadLength+0x50>)
 8017614:	79bb      	ldrb	r3, [r7, #6]
 8017616:	7013      	strb	r3, [r2, #0]
 8017618:	4b0c      	ldr	r3, [pc, #48]	; (801764c <RadioSetMaxPayloadLength+0x50>)
 801761a:	781a      	ldrb	r2, [r3, #0]
 801761c:	4b0c      	ldr	r3, [pc, #48]	; (8017650 <RadioSetMaxPayloadLength+0x54>)
 801761e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017620:	480c      	ldr	r0, [pc, #48]	; (8017654 <RadioSetMaxPayloadLength+0x58>)
 8017622:	f001 fc21 	bl	8018e68 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017626:	e00d      	b.n	8017644 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017628:	4b09      	ldr	r3, [pc, #36]	; (8017650 <RadioSetMaxPayloadLength+0x54>)
 801762a:	7d5b      	ldrb	r3, [r3, #21]
 801762c:	2b01      	cmp	r3, #1
 801762e:	d109      	bne.n	8017644 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017630:	4a06      	ldr	r2, [pc, #24]	; (801764c <RadioSetMaxPayloadLength+0x50>)
 8017632:	79bb      	ldrb	r3, [r7, #6]
 8017634:	7013      	strb	r3, [r2, #0]
 8017636:	4b05      	ldr	r3, [pc, #20]	; (801764c <RadioSetMaxPayloadLength+0x50>)
 8017638:	781a      	ldrb	r2, [r3, #0]
 801763a:	4b05      	ldr	r3, [pc, #20]	; (8017650 <RadioSetMaxPayloadLength+0x54>)
 801763c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801763e:	4805      	ldr	r0, [pc, #20]	; (8017654 <RadioSetMaxPayloadLength+0x58>)
 8017640:	f001 fc12 	bl	8018e68 <SUBGRF_SetPacketParams>
}
 8017644:	bf00      	nop
 8017646:	3708      	adds	r7, #8
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	20000120 	.word	0x20000120
 8017650:	200017b8 	.word	0x200017b8
 8017654:	200017c6 	.word	0x200017c6

08017658 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b082      	sub	sp, #8
 801765c:	af00      	add	r7, sp, #0
 801765e:	4603      	mov	r3, r0
 8017660:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017662:	4a13      	ldr	r2, [pc, #76]	; (80176b0 <RadioSetPublicNetwork+0x58>)
 8017664:	79fb      	ldrb	r3, [r7, #7]
 8017666:	7313      	strb	r3, [r2, #12]
 8017668:	4b11      	ldr	r3, [pc, #68]	; (80176b0 <RadioSetPublicNetwork+0x58>)
 801766a:	7b1a      	ldrb	r2, [r3, #12]
 801766c:	4b10      	ldr	r3, [pc, #64]	; (80176b0 <RadioSetPublicNetwork+0x58>)
 801766e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017670:	2001      	movs	r0, #1
 8017672:	f7ff f81f 	bl	80166b4 <RadioSetModem>
    if( enable == true )
 8017676:	79fb      	ldrb	r3, [r7, #7]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d00a      	beq.n	8017692 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801767c:	2134      	movs	r1, #52	; 0x34
 801767e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017682:	f001 fd39 	bl	80190f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017686:	2144      	movs	r1, #68	; 0x44
 8017688:	f240 7041 	movw	r0, #1857	; 0x741
 801768c:	f001 fd34 	bl	80190f8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017690:	e009      	b.n	80176a6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017692:	2114      	movs	r1, #20
 8017694:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8017698:	f001 fd2e 	bl	80190f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801769c:	2124      	movs	r1, #36	; 0x24
 801769e:	f240 7041 	movw	r0, #1857	; 0x741
 80176a2:	f001 fd29 	bl	80190f8 <SUBGRF_WriteRegister>
}
 80176a6:	bf00      	nop
 80176a8:	3708      	adds	r7, #8
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	200017b8 	.word	0x200017b8

080176b4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80176b8:	f001 fe6e 	bl	8019398 <SUBGRF_GetRadioWakeUpTime>
 80176bc:	4603      	mov	r3, r0
 80176be:	3303      	adds	r3, #3
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80176cc:	f000 f80e 	bl	80176ec <RadioOnTxTimeoutProcess>
}
 80176d0:	bf00      	nop
 80176d2:	3708      	adds	r7, #8
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80176e0:	f000 f81e 	bl	8017720 <RadioOnRxTimeoutProcess>
}
 80176e4:	bf00      	nop
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
 80176f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80176f4:	4808      	ldr	r0, [pc, #32]	; (8017718 <RadioOnTxTimeoutProcess+0x2c>)
 80176f6:	f7fe ff62 	bl	80165be <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80176fa:	4b08      	ldr	r3, [pc, #32]	; (801771c <RadioOnTxTimeoutProcess+0x30>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d008      	beq.n	8017714 <RadioOnTxTimeoutProcess+0x28>
 8017702:	4b06      	ldr	r3, [pc, #24]	; (801771c <RadioOnTxTimeoutProcess+0x30>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d003      	beq.n	8017714 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 801770c:	4b03      	ldr	r3, [pc, #12]	; (801771c <RadioOnTxTimeoutProcess+0x30>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	685b      	ldr	r3, [r3, #4]
 8017712:	4798      	blx	r3
    }
}
 8017714:	bf00      	nop
 8017716:	bd80      	pop	{r7, pc}
 8017718:	48000400 	.word	0x48000400
 801771c:	20000ed8 	.word	0x20000ed8

08017720 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017720:	b580      	push	{r7, lr}
 8017722:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
 8017724:	2101      	movs	r1, #1
 8017726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801772a:	f7fe ff48 	bl	80165be <LL_GPIO_ResetOutputPin>
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801772e:	4b07      	ldr	r3, [pc, #28]	; (801774c <RadioOnRxTimeoutProcess+0x2c>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d008      	beq.n	8017748 <RadioOnRxTimeoutProcess+0x28>
 8017736:	4b05      	ldr	r3, [pc, #20]	; (801774c <RadioOnRxTimeoutProcess+0x2c>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d003      	beq.n	8017748 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017740:	4b02      	ldr	r3, [pc, #8]	; (801774c <RadioOnRxTimeoutProcess+0x2c>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	68db      	ldr	r3, [r3, #12]
 8017746:	4798      	blx	r3
    }
}
 8017748:	bf00      	nop
 801774a:	bd80      	pop	{r7, pc}
 801774c:	20000ed8 	.word	0x20000ed8

08017750 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
 8017756:	4603      	mov	r3, r0
 8017758:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801775a:	4a05      	ldr	r2, [pc, #20]	; (8017770 <RadioOnDioIrq+0x20>)
 801775c:	88fb      	ldrh	r3, [r7, #6]
 801775e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8017762:	f000 f807 	bl	8017774 <RadioIrqProcess>
}
 8017766:	bf00      	nop
 8017768:	3708      	adds	r7, #8
 801776a:	46bd      	mov	sp, r7
 801776c:	bd80      	pop	{r7, pc}
 801776e:	bf00      	nop
 8017770:	200017b8 	.word	0x200017b8

08017774 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017774:	b590      	push	{r4, r7, lr}
 8017776:	b083      	sub	sp, #12
 8017778:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801777a:	2300      	movs	r3, #0
 801777c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801777e:	2300      	movs	r3, #0
 8017780:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8017782:	4bbf      	ldr	r3, [pc, #764]	; (8017a80 <RadioIrqProcess+0x30c>)
 8017784:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8017788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801778c:	f000 8116 	beq.w	80179bc <RadioIrqProcess+0x248>
 8017790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017794:	f300 81cb 	bgt.w	8017b2e <RadioIrqProcess+0x3ba>
 8017798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801779c:	f000 80fa 	beq.w	8017994 <RadioIrqProcess+0x220>
 80177a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177a4:	f300 81c3 	bgt.w	8017b2e <RadioIrqProcess+0x3ba>
 80177a8:	2b80      	cmp	r3, #128	; 0x80
 80177aa:	f000 80df 	beq.w	801796c <RadioIrqProcess+0x1f8>
 80177ae:	2b80      	cmp	r3, #128	; 0x80
 80177b0:	f300 81bd 	bgt.w	8017b2e <RadioIrqProcess+0x3ba>
 80177b4:	2b20      	cmp	r3, #32
 80177b6:	dc49      	bgt.n	801784c <RadioIrqProcess+0xd8>
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	f340 81b8 	ble.w	8017b2e <RadioIrqProcess+0x3ba>
 80177be:	3b01      	subs	r3, #1
 80177c0:	2b1f      	cmp	r3, #31
 80177c2:	f200 81b4 	bhi.w	8017b2e <RadioIrqProcess+0x3ba>
 80177c6:	a201      	add	r2, pc, #4	; (adr r2, 80177cc <RadioIrqProcess+0x58>)
 80177c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177cc:	08017855 	.word	0x08017855
 80177d0:	08017899 	.word	0x08017899
 80177d4:	08017b2f 	.word	0x08017b2f
 80177d8:	08017a49 	.word	0x08017a49
 80177dc:	08017b2f 	.word	0x08017b2f
 80177e0:	08017b2f 	.word	0x08017b2f
 80177e4:	08017b2f 	.word	0x08017b2f
 80177e8:	08017a57 	.word	0x08017a57
 80177ec:	08017b2f 	.word	0x08017b2f
 80177f0:	08017b2f 	.word	0x08017b2f
 80177f4:	08017b2f 	.word	0x08017b2f
 80177f8:	08017b2f 	.word	0x08017b2f
 80177fc:	08017b2f 	.word	0x08017b2f
 8017800:	08017b2f 	.word	0x08017b2f
 8017804:	08017b2f 	.word	0x08017b2f
 8017808:	08017a73 	.word	0x08017a73
 801780c:	08017b2f 	.word	0x08017b2f
 8017810:	08017b2f 	.word	0x08017b2f
 8017814:	08017b2f 	.word	0x08017b2f
 8017818:	08017b2f 	.word	0x08017b2f
 801781c:	08017b2f 	.word	0x08017b2f
 8017820:	08017b2f 	.word	0x08017b2f
 8017824:	08017b2f 	.word	0x08017b2f
 8017828:	08017b2f 	.word	0x08017b2f
 801782c:	08017b2f 	.word	0x08017b2f
 8017830:	08017b2f 	.word	0x08017b2f
 8017834:	08017b2f 	.word	0x08017b2f
 8017838:	08017b2f 	.word	0x08017b2f
 801783c:	08017b2f 	.word	0x08017b2f
 8017840:	08017b2f 	.word	0x08017b2f
 8017844:	08017b2f 	.word	0x08017b2f
 8017848:	08017ab1 	.word	0x08017ab1
 801784c:	2b40      	cmp	r3, #64	; 0x40
 801784e:	f000 8150 	beq.w	8017af2 <RadioIrqProcess+0x37e>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017852:	e16c      	b.n	8017b2e <RadioIrqProcess+0x3ba>
        DBG_GPIO_RADIO_TX(RST);
 8017854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017858:	488a      	ldr	r0, [pc, #552]	; (8017a84 <RadioIrqProcess+0x310>)
 801785a:	f7fe feb0 	bl	80165be <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 801785e:	488a      	ldr	r0, [pc, #552]	; (8017a88 <RadioIrqProcess+0x314>)
 8017860:	f002 fd1e 	bl	801a2a0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017864:	2000      	movs	r0, #0
 8017866:	f000 ff39 	bl	80186dc <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801786a:	f001 ff2b 	bl	80196c4 <RFW_Is_LongPacketModeEnabled>
 801786e:	4603      	mov	r3, r0
 8017870:	2b01      	cmp	r3, #1
 8017872:	d101      	bne.n	8017878 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017874:	f001 ff4f 	bl	8019716 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017878:	4b84      	ldr	r3, [pc, #528]	; (8017a8c <RadioIrqProcess+0x318>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	f000 8158 	beq.w	8017b32 <RadioIrqProcess+0x3be>
 8017882:	4b82      	ldr	r3, [pc, #520]	; (8017a8c <RadioIrqProcess+0x318>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	f000 8152 	beq.w	8017b32 <RadioIrqProcess+0x3be>
            RadioEvents->TxDone( );
 801788e:	4b7f      	ldr	r3, [pc, #508]	; (8017a8c <RadioIrqProcess+0x318>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	4798      	blx	r3
        break;
 8017896:	e14c      	b.n	8017b32 <RadioIrqProcess+0x3be>
        DBG_GPIO_RADIO_RX(RST);
 8017898:	2101      	movs	r1, #1
 801789a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801789e:	f7fe fe8e 	bl	80165be <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 80178a2:	487b      	ldr	r0, [pc, #492]	; (8017a90 <RadioIrqProcess+0x31c>)
 80178a4:	f002 fcfc 	bl	801a2a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80178a8:	4b75      	ldr	r3, [pc, #468]	; (8017a80 <RadioIrqProcess+0x30c>)
 80178aa:	785b      	ldrb	r3, [r3, #1]
 80178ac:	f083 0301 	eor.w	r3, r3, #1
 80178b0:	b2db      	uxtb	r3, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d014      	beq.n	80178e0 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 80178b6:	2000      	movs	r0, #0
 80178b8:	f000 ff10 	bl	80186dc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80178bc:	2100      	movs	r1, #0
 80178be:	f640 1002 	movw	r0, #2306	; 0x902
 80178c2:	f001 fc19 	bl	80190f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80178c6:	f640 1044 	movw	r0, #2372	; 0x944
 80178ca:	f001 fc29 	bl	8019120 <SUBGRF_ReadRegister>
 80178ce:	4603      	mov	r3, r0
 80178d0:	f043 0302 	orr.w	r3, r3, #2
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	4619      	mov	r1, r3
 80178d8:	f640 1044 	movw	r0, #2372	; 0x944
 80178dc:	f001 fc0c 	bl	80190f8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80178e0:	1dfb      	adds	r3, r7, #7
 80178e2:	22ff      	movs	r2, #255	; 0xff
 80178e4:	4619      	mov	r1, r3
 80178e6:	486b      	ldr	r0, [pc, #428]	; (8017a94 <RadioIrqProcess+0x320>)
 80178e8:	f000 fdc8 	bl	801847c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80178ec:	486a      	ldr	r0, [pc, #424]	; (8017a98 <RadioIrqProcess+0x324>)
 80178ee:	f001 fbb1 	bl	8019054 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80178f2:	4b66      	ldr	r3, [pc, #408]	; (8017a8c <RadioIrqProcess+0x318>)
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d036      	beq.n	8017968 <RadioIrqProcess+0x1f4>
 80178fa:	4b64      	ldr	r3, [pc, #400]	; (8017a8c <RadioIrqProcess+0x318>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	689b      	ldr	r3, [r3, #8]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d031      	beq.n	8017968 <RadioIrqProcess+0x1f4>
            switch ( SubgRf.PacketStatus.packetType )
 8017904:	4b5e      	ldr	r3, [pc, #376]	; (8017a80 <RadioIrqProcess+0x30c>)
 8017906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801790a:	2b01      	cmp	r3, #1
 801790c:	d10e      	bne.n	801792c <RadioIrqProcess+0x1b8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801790e:	4b5f      	ldr	r3, [pc, #380]	; (8017a8c <RadioIrqProcess+0x318>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	689c      	ldr	r4, [r3, #8]
 8017914:	79fb      	ldrb	r3, [r7, #7]
 8017916:	b299      	uxth	r1, r3
 8017918:	4b59      	ldr	r3, [pc, #356]	; (8017a80 <RadioIrqProcess+0x30c>)
 801791a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801791e:	b21a      	sxth	r2, r3
 8017920:	4b57      	ldr	r3, [pc, #348]	; (8017a80 <RadioIrqProcess+0x30c>)
 8017922:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8017926:	485b      	ldr	r0, [pc, #364]	; (8017a94 <RadioIrqProcess+0x320>)
 8017928:	47a0      	blx	r4
                break;
 801792a:	e01e      	b.n	801796a <RadioIrqProcess+0x1f6>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801792c:	4b54      	ldr	r3, [pc, #336]	; (8017a80 <RadioIrqProcess+0x30c>)
 801792e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017930:	463a      	mov	r2, r7
 8017932:	4611      	mov	r1, r2
 8017934:	4618      	mov	r0, r3
 8017936:	f001 fe11 	bl	801955c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801793a:	4b54      	ldr	r3, [pc, #336]	; (8017a8c <RadioIrqProcess+0x318>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	689c      	ldr	r4, [r3, #8]
 8017940:	79fb      	ldrb	r3, [r7, #7]
 8017942:	b299      	uxth	r1, r3
 8017944:	4b4e      	ldr	r3, [pc, #312]	; (8017a80 <RadioIrqProcess+0x30c>)
 8017946:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801794a:	b218      	sxth	r0, r3
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017952:	4a52      	ldr	r2, [pc, #328]	; (8017a9c <RadioIrqProcess+0x328>)
 8017954:	fb82 c203 	smull	ip, r2, r2, r3
 8017958:	1192      	asrs	r2, r2, #6
 801795a:	17db      	asrs	r3, r3, #31
 801795c:	1ad3      	subs	r3, r2, r3
 801795e:	b25b      	sxtb	r3, r3
 8017960:	4602      	mov	r2, r0
 8017962:	484c      	ldr	r0, [pc, #304]	; (8017a94 <RadioIrqProcess+0x320>)
 8017964:	47a0      	blx	r4
                break;
 8017966:	e000      	b.n	801796a <RadioIrqProcess+0x1f6>
        }
 8017968:	bf00      	nop
        break;
 801796a:	e0ef      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        SUBGRF_SetStandby( STDBY_RC );
 801796c:	2000      	movs	r0, #0
 801796e:	f000 feb5 	bl	80186dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017972:	4b46      	ldr	r3, [pc, #280]	; (8017a8c <RadioIrqProcess+0x318>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	2b00      	cmp	r3, #0
 8017978:	f000 80dd 	beq.w	8017b36 <RadioIrqProcess+0x3c2>
 801797c:	4b43      	ldr	r3, [pc, #268]	; (8017a8c <RadioIrqProcess+0x318>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	699b      	ldr	r3, [r3, #24]
 8017982:	2b00      	cmp	r3, #0
 8017984:	f000 80d7 	beq.w	8017b36 <RadioIrqProcess+0x3c2>
            RadioEvents->CadDone( false );
 8017988:	4b40      	ldr	r3, [pc, #256]	; (8017a8c <RadioIrqProcess+0x318>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	699b      	ldr	r3, [r3, #24]
 801798e:	2000      	movs	r0, #0
 8017990:	4798      	blx	r3
        break;
 8017992:	e0d0      	b.n	8017b36 <RadioIrqProcess+0x3c2>
        SUBGRF_SetStandby( STDBY_RC );
 8017994:	2000      	movs	r0, #0
 8017996:	f000 fea1 	bl	80186dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801799a:	4b3c      	ldr	r3, [pc, #240]	; (8017a8c <RadioIrqProcess+0x318>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f000 80cb 	beq.w	8017b3a <RadioIrqProcess+0x3c6>
 80179a4:	4b39      	ldr	r3, [pc, #228]	; (8017a8c <RadioIrqProcess+0x318>)
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	699b      	ldr	r3, [r3, #24]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	f000 80c5 	beq.w	8017b3a <RadioIrqProcess+0x3c6>
            RadioEvents->CadDone( true );
 80179b0:	4b36      	ldr	r3, [pc, #216]	; (8017a8c <RadioIrqProcess+0x318>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	699b      	ldr	r3, [r3, #24]
 80179b6:	2001      	movs	r0, #1
 80179b8:	4798      	blx	r3
        break;
 80179ba:	e0be      	b.n	8017b3a <RadioIrqProcess+0x3c6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80179bc:	4b38      	ldr	r3, [pc, #224]	; (8017aa0 <RadioIrqProcess+0x32c>)
 80179be:	2201      	movs	r2, #1
 80179c0:	2100      	movs	r1, #0
 80179c2:	2002      	movs	r0, #2
 80179c4:	f002 fe76 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80179c8:	f000 fd3e 	bl	8018448 <SUBGRF_GetOperatingMode>
 80179cc:	4603      	mov	r3, r0
 80179ce:	2b04      	cmp	r3, #4
 80179d0:	d11a      	bne.n	8017a08 <RadioIrqProcess+0x294>
            DBG_GPIO_RADIO_TX(RST);
 80179d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80179d6:	482b      	ldr	r0, [pc, #172]	; (8017a84 <RadioIrqProcess+0x310>)
 80179d8:	f7fe fdf1 	bl	80165be <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 80179dc:	482a      	ldr	r0, [pc, #168]	; (8017a88 <RadioIrqProcess+0x314>)
 80179de:	f002 fc5f 	bl	801a2a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80179e2:	2000      	movs	r0, #0
 80179e4:	f000 fe7a 	bl	80186dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80179e8:	4b28      	ldr	r3, [pc, #160]	; (8017a8c <RadioIrqProcess+0x318>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	f000 80a6 	beq.w	8017b3e <RadioIrqProcess+0x3ca>
 80179f2:	4b26      	ldr	r3, [pc, #152]	; (8017a8c <RadioIrqProcess+0x318>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	685b      	ldr	r3, [r3, #4]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	f000 80a0 	beq.w	8017b3e <RadioIrqProcess+0x3ca>
                RadioEvents->TxTimeout( );
 80179fe:	4b23      	ldr	r3, [pc, #140]	; (8017a8c <RadioIrqProcess+0x318>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	4798      	blx	r3
        break;
 8017a06:	e09a      	b.n	8017b3e <RadioIrqProcess+0x3ca>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017a08:	f000 fd1e 	bl	8018448 <SUBGRF_GetOperatingMode>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	2b05      	cmp	r3, #5
 8017a10:	f040 8095 	bne.w	8017b3e <RadioIrqProcess+0x3ca>
            DBG_GPIO_RADIO_RX(RST);
 8017a14:	2101      	movs	r1, #1
 8017a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017a1a:	f7fe fdd0 	bl	80165be <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017a1e:	481c      	ldr	r0, [pc, #112]	; (8017a90 <RadioIrqProcess+0x31c>)
 8017a20:	f002 fc3e 	bl	801a2a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017a24:	2000      	movs	r0, #0
 8017a26:	f000 fe59 	bl	80186dc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017a2a:	4b18      	ldr	r3, [pc, #96]	; (8017a8c <RadioIrqProcess+0x318>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f000 8085 	beq.w	8017b3e <RadioIrqProcess+0x3ca>
 8017a34:	4b15      	ldr	r3, [pc, #84]	; (8017a8c <RadioIrqProcess+0x318>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	68db      	ldr	r3, [r3, #12]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d07f      	beq.n	8017b3e <RadioIrqProcess+0x3ca>
                RadioEvents->RxTimeout( );
 8017a3e:	4b13      	ldr	r3, [pc, #76]	; (8017a8c <RadioIrqProcess+0x318>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	68db      	ldr	r3, [r3, #12]
 8017a44:	4798      	blx	r3
        break;
 8017a46:	e07a      	b.n	8017b3e <RadioIrqProcess+0x3ca>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017a48:	4b16      	ldr	r3, [pc, #88]	; (8017aa4 <RadioIrqProcess+0x330>)
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	2100      	movs	r1, #0
 8017a4e:	2002      	movs	r0, #2
 8017a50:	f002 fe30 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a54:	e07a      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017a56:	4b14      	ldr	r3, [pc, #80]	; (8017aa8 <RadioIrqProcess+0x334>)
 8017a58:	2201      	movs	r2, #1
 8017a5a:	2100      	movs	r1, #0
 8017a5c:	2002      	movs	r0, #2
 8017a5e:	f002 fe29 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 8017a62:	f001 fe28 	bl	80196b6 <RFW_Is_Init>
 8017a66:	4603      	mov	r3, r0
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	d16a      	bne.n	8017b42 <RadioIrqProcess+0x3ce>
            RFW_ReceivePayload( );
 8017a6c:	f001 fe59 	bl	8019722 <RFW_ReceivePayload>
        break;
 8017a70:	e067      	b.n	8017b42 <RadioIrqProcess+0x3ce>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017a72:	4b0e      	ldr	r3, [pc, #56]	; (8017aac <RadioIrqProcess+0x338>)
 8017a74:	2201      	movs	r2, #1
 8017a76:	2100      	movs	r1, #0
 8017a78:	2002      	movs	r0, #2
 8017a7a:	f002 fe1b 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017a7e:	e065      	b.n	8017b4c <RadioIrqProcess+0x3d8>
 8017a80:	200017b8 	.word	0x200017b8
 8017a84:	48000400 	.word	0x48000400
 8017a88:	20001810 	.word	0x20001810
 8017a8c:	20000ed8 	.word	0x20000ed8
 8017a90:	20001828 	.word	0x20001828
 8017a94:	20000dd8 	.word	0x20000dd8
 8017a98:	200017dc 	.word	0x200017dc
 8017a9c:	10624dd3 	.word	0x10624dd3
 8017aa0:	0801b528 	.word	0x0801b528
 8017aa4:	0801b53c 	.word	0x0801b53c
 8017aa8:	0801b548 	.word	0x0801b548
 8017aac:	0801b554 	.word	0x0801b554
        TimerStop( &RxTimeoutTimer );
 8017ab0:	4828      	ldr	r0, [pc, #160]	; (8017b54 <RadioIrqProcess+0x3e0>)
 8017ab2:	f002 fbf5 	bl	801a2a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017ab6:	4b28      	ldr	r3, [pc, #160]	; (8017b58 <RadioIrqProcess+0x3e4>)
 8017ab8:	785b      	ldrb	r3, [r3, #1]
 8017aba:	f083 0301 	eor.w	r3, r3, #1
 8017abe:	b2db      	uxtb	r3, r3
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d002      	beq.n	8017aca <RadioIrqProcess+0x356>
            SUBGRF_SetStandby( STDBY_RC );
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	f000 fe09 	bl	80186dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017aca:	4b24      	ldr	r3, [pc, #144]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d039      	beq.n	8017b46 <RadioIrqProcess+0x3d2>
 8017ad2:	4b22      	ldr	r3, [pc, #136]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	68db      	ldr	r3, [r3, #12]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d034      	beq.n	8017b46 <RadioIrqProcess+0x3d2>
            RadioEvents->RxTimeout( );
 8017adc:	4b1f      	ldr	r3, [pc, #124]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	68db      	ldr	r3, [r3, #12]
 8017ae2:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017ae4:	4b1e      	ldr	r3, [pc, #120]	; (8017b60 <RadioIrqProcess+0x3ec>)
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	2100      	movs	r1, #0
 8017aea:	2002      	movs	r0, #2
 8017aec:	f002 fde2 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017af0:	e029      	b.n	8017b46 <RadioIrqProcess+0x3d2>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017af2:	4b1c      	ldr	r3, [pc, #112]	; (8017b64 <RadioIrqProcess+0x3f0>)
 8017af4:	2201      	movs	r2, #1
 8017af6:	2100      	movs	r1, #0
 8017af8:	2002      	movs	r0, #2
 8017afa:	f002 fddb 	bl	801a6b4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017afe:	4b16      	ldr	r3, [pc, #88]	; (8017b58 <RadioIrqProcess+0x3e4>)
 8017b00:	785b      	ldrb	r3, [r3, #1]
 8017b02:	f083 0301 	eor.w	r3, r3, #1
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d002      	beq.n	8017b12 <RadioIrqProcess+0x39e>
            SUBGRF_SetStandby( STDBY_RC );
 8017b0c:	2000      	movs	r0, #0
 8017b0e:	f000 fde5 	bl	80186dc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017b12:	4b12      	ldr	r3, [pc, #72]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d017      	beq.n	8017b4a <RadioIrqProcess+0x3d6>
 8017b1a:	4b10      	ldr	r3, [pc, #64]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	691b      	ldr	r3, [r3, #16]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d012      	beq.n	8017b4a <RadioIrqProcess+0x3d6>
            RadioEvents->RxError( );
 8017b24:	4b0d      	ldr	r3, [pc, #52]	; (8017b5c <RadioIrqProcess+0x3e8>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	691b      	ldr	r3, [r3, #16]
 8017b2a:	4798      	blx	r3
        break;
 8017b2c:	e00d      	b.n	8017b4a <RadioIrqProcess+0x3d6>
        break;
 8017b2e:	bf00      	nop
 8017b30:	e00c      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b32:	bf00      	nop
 8017b34:	e00a      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b36:	bf00      	nop
 8017b38:	e008      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b3a:	bf00      	nop
 8017b3c:	e006      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b3e:	bf00      	nop
 8017b40:	e004      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b42:	bf00      	nop
 8017b44:	e002      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b46:	bf00      	nop
 8017b48:	e000      	b.n	8017b4c <RadioIrqProcess+0x3d8>
        break;
 8017b4a:	bf00      	nop
  }
}
 8017b4c:	bf00      	nop
 8017b4e:	370c      	adds	r7, #12
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd90      	pop	{r4, r7, pc}
 8017b54:	20001828 	.word	0x20001828
 8017b58:	200017b8 	.word	0x200017b8
 8017b5c:	20000ed8 	.word	0x20000ed8
 8017b60:	0801b560 	.word	0x0801b560
 8017b64:	0801b56c 	.word	0x0801b56c

08017b68 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017b6c:	4b09      	ldr	r3, [pc, #36]	; (8017b94 <RadioTxPrbs+0x2c>)
 8017b6e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8017b72:	2101      	movs	r1, #1
 8017b74:	4618      	mov	r0, r3
 8017b76:	f001 fbb3 	bl	80192e0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 8017b7a:	4b07      	ldr	r3, [pc, #28]	; (8017b98 <RadioTxPrbs+0x30>)
 8017b7c:	212d      	movs	r1, #45	; 0x2d
 8017b7e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8017b82:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017b84:	f000 fe6d 	bl	8018862 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017b88:	4804      	ldr	r0, [pc, #16]	; (8017b9c <RadioTxPrbs+0x34>)
 8017b8a:	f000 fdc3 	bl	8018714 <SUBGRF_SetTx>
}
 8017b8e:	bf00      	nop
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	200017b8 	.word	0x200017b8
 8017b98:	0801756f 	.word	0x0801756f
 8017b9c:	000fffff 	.word	0x000fffff

08017ba0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f001 fbbe 	bl	8019330 <SUBGRF_SetRfTxPower>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017bb8:	7bfb      	ldrb	r3, [r7, #15]
 8017bba:	2101      	movs	r1, #1
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f001 fb8f 	bl	80192e0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017bc2:	f000 fe45 	bl	8018850 <SUBGRF_SetTxContinuousWave>
}
 8017bc6:	bf00      	nop
 8017bc8:	3710      	adds	r7, #16
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	bd80      	pop	{r7, pc}

08017bce <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017bce:	b480      	push	{r7}
 8017bd0:	b089      	sub	sp, #36	; 0x24
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	60f8      	str	r0, [r7, #12]
 8017bd6:	60b9      	str	r1, [r7, #8]
 8017bd8:	4613      	mov	r3, r2
 8017bda:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8017be0:	2300      	movs	r3, #0
 8017be2:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8017be4:	2300      	movs	r3, #0
 8017be6:	61bb      	str	r3, [r7, #24]
 8017be8:	e011      	b.n	8017c0e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	68ba      	ldr	r2, [r7, #8]
 8017bee:	4413      	add	r3, r2
 8017bf0:	781a      	ldrb	r2, [r3, #0]
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	68b9      	ldr	r1, [r7, #8]
 8017bf6:	440b      	add	r3, r1
 8017bf8:	43d2      	mvns	r2, r2
 8017bfa:	b2d2      	uxtb	r2, r2
 8017bfc:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017bfe:	69bb      	ldr	r3, [r7, #24]
 8017c00:	68fa      	ldr	r2, [r7, #12]
 8017c02:	4413      	add	r3, r2
 8017c04:	2200      	movs	r2, #0
 8017c06:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	61bb      	str	r3, [r7, #24]
 8017c0e:	79fb      	ldrb	r3, [r7, #7]
 8017c10:	69ba      	ldr	r2, [r7, #24]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	dbe9      	blt.n	8017bea <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8017c16:	2300      	movs	r3, #0
 8017c18:	61bb      	str	r3, [r7, #24]
 8017c1a:	e049      	b.n	8017cb0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017c1c:	69bb      	ldr	r3, [r7, #24]
 8017c1e:	425a      	negs	r2, r3
 8017c20:	f003 0307 	and.w	r3, r3, #7
 8017c24:	f002 0207 	and.w	r2, r2, #7
 8017c28:	bf58      	it	pl
 8017c2a:	4253      	negpl	r3, r2
 8017c2c:	b2db      	uxtb	r3, r3
 8017c2e:	f1c3 0307 	rsb	r3, r3, #7
 8017c32:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017c34:	69bb      	ldr	r3, [r7, #24]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	da00      	bge.n	8017c3c <payload_integration+0x6e>
 8017c3a:	3307      	adds	r3, #7
 8017c3c:	10db      	asrs	r3, r3, #3
 8017c3e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017c40:	69bb      	ldr	r3, [r7, #24]
 8017c42:	3301      	adds	r3, #1
 8017c44:	425a      	negs	r2, r3
 8017c46:	f003 0307 	and.w	r3, r3, #7
 8017c4a:	f002 0207 	and.w	r2, r2, #7
 8017c4e:	bf58      	it	pl
 8017c50:	4253      	negpl	r3, r2
 8017c52:	b2db      	uxtb	r3, r3
 8017c54:	f1c3 0307 	rsb	r3, r3, #7
 8017c58:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	da00      	bge.n	8017c64 <payload_integration+0x96>
 8017c62:	3307      	adds	r3, #7
 8017c64:	10db      	asrs	r3, r3, #3
 8017c66:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017c68:	7dbb      	ldrb	r3, [r7, #22]
 8017c6a:	68ba      	ldr	r2, [r7, #8]
 8017c6c:	4413      	add	r3, r2
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	461a      	mov	r2, r3
 8017c72:	7dfb      	ldrb	r3, [r7, #23]
 8017c74:	fa42 f303 	asr.w	r3, r2, r3
 8017c78:	b2db      	uxtb	r3, r3
 8017c7a:	f003 0301 	and.w	r3, r3, #1
 8017c7e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017c80:	7ffa      	ldrb	r2, [r7, #31]
 8017c82:	7cfb      	ldrb	r3, [r7, #19]
 8017c84:	4053      	eors	r3, r2
 8017c86:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017c88:	7d3b      	ldrb	r3, [r7, #20]
 8017c8a:	68fa      	ldr	r2, [r7, #12]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	781b      	ldrb	r3, [r3, #0]
 8017c90:	b25a      	sxtb	r2, r3
 8017c92:	7ff9      	ldrb	r1, [r7, #31]
 8017c94:	7d7b      	ldrb	r3, [r7, #21]
 8017c96:	fa01 f303 	lsl.w	r3, r1, r3
 8017c9a:	b25b      	sxtb	r3, r3
 8017c9c:	4313      	orrs	r3, r2
 8017c9e:	b259      	sxtb	r1, r3
 8017ca0:	7d3b      	ldrb	r3, [r7, #20]
 8017ca2:	68fa      	ldr	r2, [r7, #12]
 8017ca4:	4413      	add	r3, r2
 8017ca6:	b2ca      	uxtb	r2, r1
 8017ca8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8017caa:	69bb      	ldr	r3, [r7, #24]
 8017cac:	3301      	adds	r3, #1
 8017cae:	61bb      	str	r3, [r7, #24]
 8017cb0:	79fb      	ldrb	r3, [r7, #7]
 8017cb2:	00db      	lsls	r3, r3, #3
 8017cb4:	69ba      	ldr	r2, [r7, #24]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	dbb0      	blt.n	8017c1c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017cba:	7ffb      	ldrb	r3, [r7, #31]
 8017cbc:	01db      	lsls	r3, r3, #7
 8017cbe:	b25a      	sxtb	r2, r3
 8017cc0:	7ffb      	ldrb	r3, [r7, #31]
 8017cc2:	019b      	lsls	r3, r3, #6
 8017cc4:	b25b      	sxtb	r3, r3
 8017cc6:	4313      	orrs	r3, r2
 8017cc8:	b25b      	sxtb	r3, r3
 8017cca:	7ffa      	ldrb	r2, [r7, #31]
 8017ccc:	2a00      	cmp	r2, #0
 8017cce:	d101      	bne.n	8017cd4 <payload_integration+0x106>
 8017cd0:	2220      	movs	r2, #32
 8017cd2:	e000      	b.n	8017cd6 <payload_integration+0x108>
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	4313      	orrs	r3, r2
 8017cd8:	b259      	sxtb	r1, r3
 8017cda:	79fb      	ldrb	r3, [r7, #7]
 8017cdc:	68fa      	ldr	r2, [r7, #12]
 8017cde:	4413      	add	r3, r2
 8017ce0:	b2ca      	uxtb	r2, r1
 8017ce2:	701a      	strb	r2, [r3, #0]
}
 8017ce4:	bf00      	nop
 8017ce6:	3724      	adds	r7, #36	; 0x24
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bc80      	pop	{r7}
 8017cec:	4770      	bx	lr
	...

08017cf0 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b08c      	sub	sp, #48	; 0x30
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60b9      	str	r1, [r7, #8]
 8017cf8:	607a      	str	r2, [r7, #4]
 8017cfa:	603b      	str	r3, [r7, #0]
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8017d00:	2300      	movs	r3, #0
 8017d02:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8017d04:	2300      	movs	r3, #0
 8017d06:	61fb      	str	r3, [r7, #28]
 8017d08:	2300      	movs	r3, #0
 8017d0a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017d0c:	f001 fccd 	bl	80196aa <RFW_DeInit>

    if( rxContinuous != 0 )
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d001      	beq.n	8017d1a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017d16:	2300      	movs	r3, #0
 8017d18:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	bf14      	ite	ne
 8017d20:	2301      	movne	r3, #1
 8017d22:	2300      	moveq	r3, #0
 8017d24:	b2da      	uxtb	r2, r3
 8017d26:	4ba9      	ldr	r3, [pc, #676]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017d28:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017d2a:	7bfb      	ldrb	r3, [r7, #15]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d003      	beq.n	8017d38 <RadioSetRxGenericConfig+0x48>
 8017d30:	2b01      	cmp	r3, #1
 8017d32:	f000 80e8 	beq.w	8017f06 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017d36:	e1a0      	b.n	801807a <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	68db      	ldr	r3, [r3, #12]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d003      	beq.n	8017d48 <RadioSetRxGenericConfig+0x58>
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	691b      	ldr	r3, [r3, #16]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d102      	bne.n	8017d4e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017d48:	f04f 33ff 	mov.w	r3, #4294967295
 8017d4c:	e196      	b.n	801807c <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	7d5b      	ldrb	r3, [r3, #21]
 8017d52:	2b08      	cmp	r3, #8
 8017d54:	d902      	bls.n	8017d5c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017d56:	f04f 33ff 	mov.w	r3, #4294967295
 8017d5a:	e18f      	b.n	801807c <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d60:	e00d      	b.n	8017d7e <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8017d62:	68bb      	ldr	r3, [r7, #8]
 8017d64:	699a      	ldr	r2, [r3, #24]
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	4413      	add	r3, r2
 8017d6a:	7819      	ldrb	r1, [r3, #0]
 8017d6c:	f107 021c 	add.w	r2, r7, #28
 8017d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d72:	4413      	add	r3, r2
 8017d74:	460a      	mov	r2, r1
 8017d76:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8017d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	7d5b      	ldrb	r3, [r3, #21]
 8017d82:	461a      	mov	r2, r3
 8017d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d86:	4293      	cmp	r3, r2
 8017d88:	dbeb      	blt.n	8017d62 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	bf14      	ite	ne
 8017d92:	2301      	movne	r3, #1
 8017d94:	2300      	moveq	r3, #0
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f000 fd6b 	bl	8018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d9e:	4b8b      	ldr	r3, [pc, #556]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017da0:	2200      	movs	r2, #0
 8017da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017da6:	68bb      	ldr	r3, [r7, #8]
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	4a88      	ldr	r2, [pc, #544]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017dac:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	791a      	ldrb	r2, [r3, #4]
 8017db2:	4b86      	ldr	r3, [pc, #536]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	689b      	ldr	r3, [r3, #8]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f001 fba5 	bl	801950c <SUBGRF_GetFskBandwidthRegValue>
 8017dc2:	4603      	mov	r3, r0
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	4b81      	ldr	r3, [pc, #516]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017dcc:	4b7f      	ldr	r3, [pc, #508]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017dce:	2200      	movs	r2, #0
 8017dd0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	691b      	ldr	r3, [r3, #16]
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	b29a      	uxth	r2, r3
 8017ddc:	4b7b      	ldr	r3, [pc, #492]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017dde:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017de0:	68bb      	ldr	r3, [r7, #8]
 8017de2:	7d1a      	ldrb	r2, [r3, #20]
 8017de4:	4b79      	ldr	r3, [pc, #484]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017de6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017de8:	68bb      	ldr	r3, [r7, #8]
 8017dea:	7d5b      	ldrb	r3, [r3, #21]
 8017dec:	00db      	lsls	r3, r3, #3
 8017dee:	b2da      	uxtb	r2, r3
 8017df0:	4b76      	ldr	r3, [pc, #472]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017df2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8017dfa:	4b74      	ldr	r3, [pc, #464]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017dfc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017dfe:	68bb      	ldr	r3, [r7, #8]
 8017e00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d105      	bne.n	8017e14 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	69db      	ldr	r3, [r3, #28]
 8017e0c:	b2da      	uxtb	r2, r3
 8017e0e:	4b6f      	ldr	r3, [pc, #444]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e10:	759a      	strb	r2, [r3, #22]
 8017e12:	e00b      	b.n	8017e2c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017e1a:	2b02      	cmp	r3, #2
 8017e1c:	d103      	bne.n	8017e26 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017e1e:	4b6b      	ldr	r3, [pc, #428]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e20:	22ff      	movs	r2, #255	; 0xff
 8017e22:	759a      	strb	r2, [r3, #22]
 8017e24:	e002      	b.n	8017e2c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017e26:	4b69      	ldr	r3, [pc, #420]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e28:	22ff      	movs	r2, #255	; 0xff
 8017e2a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017e32:	2b02      	cmp	r3, #2
 8017e34:	d004      	beq.n	8017e40 <RadioSetRxGenericConfig+0x150>
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d12d      	bne.n	8017e9c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e46:	2bf1      	cmp	r3, #241	; 0xf1
 8017e48:	d00c      	beq.n	8017e64 <RadioSetRxGenericConfig+0x174>
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e50:	2bf2      	cmp	r3, #242	; 0xf2
 8017e52:	d007      	beq.n	8017e64 <RadioSetRxGenericConfig+0x174>
 8017e54:	68bb      	ldr	r3, [r7, #8]
 8017e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d002      	beq.n	8017e64 <RadioSetRxGenericConfig+0x174>
            return -1;
 8017e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e62:	e10b      	b.n	801807c <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8017e64:	2300      	movs	r3, #0
 8017e66:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8017e68:	68bb      	ldr	r3, [r7, #8]
 8017e6a:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8017e6c:	4b58      	ldr	r3, [pc, #352]	; (8017fd0 <RadioSetRxGenericConfig+0x2e0>)
 8017e6e:	6819      	ldr	r1, [r3, #0]
 8017e70:	f107 0310 	add.w	r3, r7, #16
 8017e74:	4a57      	ldr	r2, [pc, #348]	; (8017fd4 <RadioSetRxGenericConfig+0x2e4>)
 8017e76:	4618      	mov	r0, r3
 8017e78:	f001 fc0a 	bl	8019690 <RFW_Init>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d002      	beq.n	8017e88 <RadioSetRxGenericConfig+0x198>
            return -1;
 8017e82:	f04f 33ff 	mov.w	r3, #4294967295
 8017e86:	e0f9      	b.n	801807c <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8017e88:	4b50      	ldr	r3, [pc, #320]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8017e8e:	4b4f      	ldr	r3, [pc, #316]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e90:	2201      	movs	r2, #1
 8017e92:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8017e94:	4b4d      	ldr	r3, [pc, #308]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017e96:	2200      	movs	r2, #0
 8017e98:	755a      	strb	r2, [r3, #21]
        {
 8017e9a:	e00e      	b.n	8017eba <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8017e9c:	68bb      	ldr	r3, [r7, #8]
 8017e9e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8017ea2:	4b4a      	ldr	r3, [pc, #296]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017ea4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8017ea6:	68bb      	ldr	r3, [r7, #8]
 8017ea8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017eac:	4b47      	ldr	r3, [pc, #284]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017eae:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017eb6:	4b45      	ldr	r3, [pc, #276]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017eb8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8017eba:	f7ff fa6c 	bl	8017396 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	f7fe fbf8 	bl	80166b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ec4:	4844      	ldr	r0, [pc, #272]	; (8017fd8 <RadioSetRxGenericConfig+0x2e8>)
 8017ec6:	f000 ff03 	bl	8018cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017eca:	4844      	ldr	r0, [pc, #272]	; (8017fdc <RadioSetRxGenericConfig+0x2ec>)
 8017ecc:	f000 ffcc 	bl	8018e68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8017ed0:	f107 031c 	add.w	r3, r7, #28
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f000 fb06 	bl	80184e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8017eda:	68bb      	ldr	r3, [r7, #8]
 8017edc:	8c1b      	ldrh	r3, [r3, #32]
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f000 fb50 	bl	8018584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f000 fb2b 	bl	8018544 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017ef4:	fb02 f203 	mul.w	r2, r2, r3
 8017ef8:	68bb      	ldr	r3, [r7, #8]
 8017efa:	68db      	ldr	r3, [r3, #12]
 8017efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f00:	4a32      	ldr	r2, [pc, #200]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f02:	6093      	str	r3, [r2, #8]
        break;
 8017f04:	e0b9      	b.n	801807a <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d102      	bne.n	8017f14 <RadioSetRxGenericConfig+0x224>
            return -1;
 8017f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017f12:	e0b3      	b.n	801807c <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8017f1a:	2b01      	cmp	r3, #1
 8017f1c:	d104      	bne.n	8017f28 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	69db      	ldr	r3, [r3, #28]
 8017f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017f26:	e002      	b.n	8017f2e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 8017f28:	23ff      	movs	r3, #255	; 0xff
 8017f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017f2e:	68bb      	ldr	r3, [r7, #8]
 8017f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	bf14      	ite	ne
 8017f36:	2301      	movne	r3, #1
 8017f38:	2300      	moveq	r3, #0
 8017f3a:	b2db      	uxtb	r3, r3
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f000 fc99 	bl	8018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	b2db      	uxtb	r3, r3
 8017f46:	4618      	mov	r0, r3
 8017f48:	f000 fca3 	bl	8018892 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f4c:	4b1f      	ldr	r3, [pc, #124]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f4e:	2201      	movs	r2, #1
 8017f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017f5a:	4b1c      	ldr	r3, [pc, #112]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017f66:	4b19      	ldr	r3, [pc, #100]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8017f72:	4b16      	ldr	r3, [pc, #88]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8017f7e:	2b02      	cmp	r3, #2
 8017f80:	d010      	beq.n	8017fa4 <RadioSetRxGenericConfig+0x2b4>
 8017f82:	2b02      	cmp	r3, #2
 8017f84:	dc2c      	bgt.n	8017fe0 <RadioSetRxGenericConfig+0x2f0>
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d002      	beq.n	8017f90 <RadioSetRxGenericConfig+0x2a0>
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d005      	beq.n	8017f9a <RadioSetRxGenericConfig+0x2aa>
            break;
 8017f8e:	e027      	b.n	8017fe0 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017f90:	4b0e      	ldr	r3, [pc, #56]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f92:	2200      	movs	r2, #0
 8017f94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017f98:	e023      	b.n	8017fe2 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017f9a:	4b0c      	ldr	r3, [pc, #48]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017f9c:	2201      	movs	r2, #1
 8017f9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017fa2:	e01e      	b.n	8017fe2 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017faa:	2b0b      	cmp	r3, #11
 8017fac:	d004      	beq.n	8017fb8 <RadioSetRxGenericConfig+0x2c8>
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017fb4:	2b0c      	cmp	r3, #12
 8017fb6:	d104      	bne.n	8017fc2 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8017fb8:	4b04      	ldr	r3, [pc, #16]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017fba:	2201      	movs	r2, #1
 8017fbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017fc0:	e00f      	b.n	8017fe2 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8017fc2:	4b02      	ldr	r3, [pc, #8]	; (8017fcc <RadioSetRxGenericConfig+0x2dc>)
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8017fca:	e00a      	b.n	8017fe2 <RadioSetRxGenericConfig+0x2f2>
 8017fcc:	200017b8 	.word	0x200017b8
 8017fd0:	20000ed8 	.word	0x20000ed8
 8017fd4:	20001828 	.word	0x20001828
 8017fd8:	200017f0 	.word	0x200017f0
 8017fdc:	200017c6 	.word	0x200017c6
            break;
 8017fe0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017fe2:	4b28      	ldr	r3, [pc, #160]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8017fe4:	2201      	movs	r2, #1
 8017fe6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8017fec:	4b25      	ldr	r3, [pc, #148]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8017fee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8017ff6:	4b23      	ldr	r3, [pc, #140]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8017ff8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017ffa:	4a22      	ldr	r2, [pc, #136]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8017ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018000:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018002:	68bb      	ldr	r3, [r7, #8]
 8018004:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8018008:	4b1e      	ldr	r3, [pc, #120]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 801800a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8018014:	4b1b      	ldr	r3, [pc, #108]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8018016:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801801a:	f7ff f9bc 	bl	8017396 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801801e:	2001      	movs	r0, #1
 8018020:	f7fe fb48 	bl	80166b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018024:	4818      	ldr	r0, [pc, #96]	; (8018088 <RadioSetRxGenericConfig+0x398>)
 8018026:	f000 fe53 	bl	8018cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801802a:	4818      	ldr	r0, [pc, #96]	; (801808c <RadioSetRxGenericConfig+0x39c>)
 801802c:	f000 ff1c 	bl	8018e68 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018030:	4b14      	ldr	r3, [pc, #80]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8018032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8018036:	2b01      	cmp	r3, #1
 8018038:	d10d      	bne.n	8018056 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801803a:	f240 7036 	movw	r0, #1846	; 0x736
 801803e:	f001 f86f 	bl	8019120 <SUBGRF_ReadRegister>
 8018042:	4603      	mov	r3, r0
 8018044:	f023 0304 	bic.w	r3, r3, #4
 8018048:	b2db      	uxtb	r3, r3
 801804a:	4619      	mov	r1, r3
 801804c:	f240 7036 	movw	r0, #1846	; 0x736
 8018050:	f001 f852 	bl	80190f8 <SUBGRF_WriteRegister>
 8018054:	e00c      	b.n	8018070 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8018056:	f240 7036 	movw	r0, #1846	; 0x736
 801805a:	f001 f861 	bl	8019120 <SUBGRF_ReadRegister>
 801805e:	4603      	mov	r3, r0
 8018060:	f043 0304 	orr.w	r3, r3, #4
 8018064:	b2db      	uxtb	r3, r3
 8018066:	4619      	mov	r1, r3
 8018068:	f240 7036 	movw	r0, #1846	; 0x736
 801806c:	f001 f844 	bl	80190f8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018070:	4b04      	ldr	r3, [pc, #16]	; (8018084 <RadioSetRxGenericConfig+0x394>)
 8018072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018076:	609a      	str	r2, [r3, #8]
        break;
 8018078:	bf00      	nop
    }
    return status;
 801807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801807c:	4618      	mov	r0, r3
 801807e:	3730      	adds	r7, #48	; 0x30
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	200017b8 	.word	0x200017b8
 8018088:	200017f0 	.word	0x200017f0
 801808c:	200017c6 	.word	0x200017c6

08018090 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b08a      	sub	sp, #40	; 0x28
 8018094:	af00      	add	r7, sp, #0
 8018096:	60b9      	str	r1, [r7, #8]
 8018098:	607b      	str	r3, [r7, #4]
 801809a:	4603      	mov	r3, r0
 801809c:	73fb      	strb	r3, [r7, #15]
 801809e:	4613      	mov	r3, r2
 80180a0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80180a2:	2300      	movs	r3, #0
 80180a4:	61fb      	str	r3, [r7, #28]
 80180a6:	2300      	movs	r3, #0
 80180a8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80180aa:	f001 fafe 	bl	80196aa <RFW_DeInit>
    switch( modem )
 80180ae:	7bfb      	ldrb	r3, [r7, #15]
 80180b0:	2b02      	cmp	r3, #2
 80180b2:	f000 8144 	beq.w	801833e <RadioSetTxGenericConfig+0x2ae>
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	f300 8160 	bgt.w	801837c <RadioSetTxGenericConfig+0x2ec>
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d003      	beq.n	80180c8 <RadioSetTxGenericConfig+0x38>
 80180c0:	2b01      	cmp	r3, #1
 80180c2:	f000 80b7 	beq.w	8018234 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 80180c6:	e159      	b.n	801837c <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	689b      	ldr	r3, [r3, #8]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d003      	beq.n	80180d8 <RadioSetTxGenericConfig+0x48>
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	691b      	ldr	r3, [r3, #16]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d102      	bne.n	80180de <RadioSetTxGenericConfig+0x4e>
            return -1;
 80180d8:	f04f 33ff 	mov.w	r3, #4294967295
 80180dc:	e163      	b.n	80183a6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	7d1b      	ldrb	r3, [r3, #20]
 80180e2:	2b08      	cmp	r3, #8
 80180e4:	d902      	bls.n	80180ec <RadioSetTxGenericConfig+0x5c>
            return -1;
 80180e6:	f04f 33ff 	mov.w	r3, #4294967295
 80180ea:	e15c      	b.n	80183a6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80180ec:	2300      	movs	r3, #0
 80180ee:	627b      	str	r3, [r7, #36]	; 0x24
 80180f0:	e00d      	b.n	801810e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	699a      	ldr	r2, [r3, #24]
 80180f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f8:	4413      	add	r3, r2
 80180fa:	7819      	ldrb	r1, [r3, #0]
 80180fc:	f107 021c 	add.w	r2, r7, #28
 8018100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018102:	4413      	add	r3, r2
 8018104:	460a      	mov	r2, r1
 8018106:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8018108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810a:	3301      	adds	r3, #1
 801810c:	627b      	str	r3, [r7, #36]	; 0x24
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	7d1b      	ldrb	r3, [r3, #20]
 8018112:	461a      	mov	r2, r3
 8018114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018116:	4293      	cmp	r3, r2
 8018118:	dbeb      	blt.n	80180f2 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801811a:	4ba5      	ldr	r3, [pc, #660]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801811c:	2200      	movs	r2, #0
 801811e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	689b      	ldr	r3, [r3, #8]
 8018126:	4aa2      	ldr	r2, [pc, #648]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018128:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	781a      	ldrb	r2, [r3, #0]
 801812e:	4ba0      	ldr	r3, [pc, #640]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018134:	68bb      	ldr	r3, [r7, #8]
 8018136:	685b      	ldr	r3, [r3, #4]
 8018138:	4618      	mov	r0, r3
 801813a:	f001 f9e7 	bl	801950c <SUBGRF_GetFskBandwidthRegValue>
 801813e:	4603      	mov	r3, r0
 8018140:	461a      	mov	r2, r3
 8018142:	4b9b      	ldr	r3, [pc, #620]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	68db      	ldr	r3, [r3, #12]
 801814c:	4a98      	ldr	r2, [pc, #608]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801814e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018150:	4b97      	ldr	r3, [pc, #604]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018152:	2200      	movs	r2, #0
 8018154:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	691b      	ldr	r3, [r3, #16]
 801815a:	b29b      	uxth	r3, r3
 801815c:	00db      	lsls	r3, r3, #3
 801815e:	b29a      	uxth	r2, r3
 8018160:	4b93      	ldr	r3, [pc, #588]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018162:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018164:	4b92      	ldr	r3, [pc, #584]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018166:	2204      	movs	r2, #4
 8018168:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	7d1b      	ldrb	r3, [r3, #20]
 801816e:	00db      	lsls	r3, r3, #3
 8018170:	b2da      	uxtb	r2, r3
 8018172:	4b8f      	ldr	r3, [pc, #572]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018174:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018176:	4b8e      	ldr	r3, [pc, #568]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018178:	2200      	movs	r2, #0
 801817a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018182:	2b02      	cmp	r3, #2
 8018184:	d003      	beq.n	801818e <RadioSetTxGenericConfig+0xfe>
 8018186:	68bb      	ldr	r3, [r7, #8]
 8018188:	7f9b      	ldrb	r3, [r3, #30]
 801818a:	2b02      	cmp	r3, #2
 801818c:	d12a      	bne.n	80181e4 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	7fdb      	ldrb	r3, [r3, #31]
 8018192:	2bf1      	cmp	r3, #241	; 0xf1
 8018194:	d00a      	beq.n	80181ac <RadioSetTxGenericConfig+0x11c>
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	7fdb      	ldrb	r3, [r3, #31]
 801819a:	2bf2      	cmp	r3, #242	; 0xf2
 801819c:	d006      	beq.n	80181ac <RadioSetTxGenericConfig+0x11c>
 801819e:	68bb      	ldr	r3, [r7, #8]
 80181a0:	7fdb      	ldrb	r3, [r3, #31]
 80181a2:	2b01      	cmp	r3, #1
 80181a4:	d002      	beq.n	80181ac <RadioSetTxGenericConfig+0x11c>
                return -1;
 80181a6:	f04f 33ff 	mov.w	r3, #4294967295
 80181aa:	e0fc      	b.n	80183a6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 80181ac:	2301      	movs	r3, #1
 80181ae:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80181b4:	4b7f      	ldr	r3, [pc, #508]	; (80183b4 <RadioSetTxGenericConfig+0x324>)
 80181b6:	6819      	ldr	r1, [r3, #0]
 80181b8:	f107 0310 	add.w	r3, r7, #16
 80181bc:	4a7e      	ldr	r2, [pc, #504]	; (80183b8 <RadioSetTxGenericConfig+0x328>)
 80181be:	4618      	mov	r0, r3
 80181c0:	f001 fa66 	bl	8019690 <RFW_Init>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d002      	beq.n	80181d0 <RadioSetTxGenericConfig+0x140>
              return -1;
 80181ca:	f04f 33ff 	mov.w	r3, #4294967295
 80181ce:	e0ea      	b.n	80183a6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80181d0:	4b77      	ldr	r3, [pc, #476]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181d2:	2200      	movs	r2, #0
 80181d4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80181d6:	4b76      	ldr	r3, [pc, #472]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181d8:	2201      	movs	r2, #1
 80181da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80181dc:	4b74      	ldr	r3, [pc, #464]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181de:	2200      	movs	r2, #0
 80181e0:	755a      	strb	r2, [r3, #21]
        {
 80181e2:	e00c      	b.n	80181fe <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	7fda      	ldrb	r2, [r3, #31]
 80181e8:	4b71      	ldr	r3, [pc, #452]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181ea:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80181f2:	4b6f      	ldr	r3, [pc, #444]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181f4:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	7f9a      	ldrb	r2, [r3, #30]
 80181fa:	4b6d      	ldr	r3, [pc, #436]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80181fc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80181fe:	f7ff f8ca 	bl	8017396 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018202:	2000      	movs	r0, #0
 8018204:	f7fe fa56 	bl	80166b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018208:	486c      	ldr	r0, [pc, #432]	; (80183bc <RadioSetTxGenericConfig+0x32c>)
 801820a:	f000 fd61 	bl	8018cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801820e:	486c      	ldr	r0, [pc, #432]	; (80183c0 <RadioSetTxGenericConfig+0x330>)
 8018210:	f000 fe2a 	bl	8018e68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018214:	f107 031c 	add.w	r3, r7, #28
 8018218:	4618      	mov	r0, r3
 801821a:	f000 f964 	bl	80184e6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801821e:	68bb      	ldr	r3, [r7, #8]
 8018220:	8b9b      	ldrh	r3, [r3, #28]
 8018222:	4618      	mov	r0, r3
 8018224:	f000 f9ae 	bl	8018584 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	8c1b      	ldrh	r3, [r3, #32]
 801822c:	4618      	mov	r0, r3
 801822e:	f000 f989 	bl	8018544 <SUBGRF_SetCrcPolynomial>
        break;
 8018232:	e0a4      	b.n	801837e <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018234:	4b5e      	ldr	r3, [pc, #376]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018236:	2201      	movs	r2, #1
 8018238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801823c:	68bb      	ldr	r3, [r7, #8]
 801823e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8018242:	4b5b      	ldr	r3, [pc, #364]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801824e:	4b58      	ldr	r3, [pc, #352]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801825a:	4b55      	ldr	r3, [pc, #340]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801825c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8018266:	2b02      	cmp	r3, #2
 8018268:	d010      	beq.n	801828c <RadioSetTxGenericConfig+0x1fc>
 801826a:	2b02      	cmp	r3, #2
 801826c:	dc22      	bgt.n	80182b4 <RadioSetTxGenericConfig+0x224>
 801826e:	2b00      	cmp	r3, #0
 8018270:	d002      	beq.n	8018278 <RadioSetTxGenericConfig+0x1e8>
 8018272:	2b01      	cmp	r3, #1
 8018274:	d005      	beq.n	8018282 <RadioSetTxGenericConfig+0x1f2>
            break;
 8018276:	e01d      	b.n	80182b4 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018278:	4b4d      	ldr	r3, [pc, #308]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801827a:	2200      	movs	r2, #0
 801827c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8018280:	e019      	b.n	80182b6 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018282:	4b4b      	ldr	r3, [pc, #300]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018284:	2201      	movs	r2, #1
 8018286:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801828a:	e014      	b.n	80182b6 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018292:	2b0b      	cmp	r3, #11
 8018294:	d004      	beq.n	80182a0 <RadioSetTxGenericConfig+0x210>
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801829c:	2b0c      	cmp	r3, #12
 801829e:	d104      	bne.n	80182aa <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80182a0:	4b43      	ldr	r3, [pc, #268]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182a2:	2201      	movs	r2, #1
 80182a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80182a8:	e005      	b.n	80182b6 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80182aa:	4b41      	ldr	r3, [pc, #260]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182ac:	2200      	movs	r2, #0
 80182ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80182b2:	e000      	b.n	80182b6 <RadioSetTxGenericConfig+0x226>
            break;
 80182b4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80182b6:	4b3e      	ldr	r3, [pc, #248]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182b8:	2201      	movs	r2, #1
 80182ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80182bc:	68bb      	ldr	r3, [r7, #8]
 80182be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80182c0:	4b3b      	ldr	r3, [pc, #236]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80182ca:	4b39      	ldr	r3, [pc, #228]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182cc:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80182d4:	4b36      	ldr	r3, [pc, #216]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80182e0:	4b33      	ldr	r3, [pc, #204]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80182e6:	f7ff f856 	bl	8017396 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80182ea:	2001      	movs	r0, #1
 80182ec:	f7fe f9e2 	bl	80166b4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182f0:	4832      	ldr	r0, [pc, #200]	; (80183bc <RadioSetTxGenericConfig+0x32c>)
 80182f2:	f000 fced 	bl	8018cd0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80182f6:	4832      	ldr	r0, [pc, #200]	; (80183c0 <RadioSetTxGenericConfig+0x330>)
 80182f8:	f000 fdb6 	bl	8018e68 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80182fc:	4b2c      	ldr	r3, [pc, #176]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80182fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018302:	2b06      	cmp	r3, #6
 8018304:	d10d      	bne.n	8018322 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8018306:	f640 0089 	movw	r0, #2185	; 0x889
 801830a:	f000 ff09 	bl	8019120 <SUBGRF_ReadRegister>
 801830e:	4603      	mov	r3, r0
 8018310:	f023 0304 	bic.w	r3, r3, #4
 8018314:	b2db      	uxtb	r3, r3
 8018316:	4619      	mov	r1, r3
 8018318:	f640 0089 	movw	r0, #2185	; 0x889
 801831c:	f000 feec 	bl	80190f8 <SUBGRF_WriteRegister>
        break;
 8018320:	e02d      	b.n	801837e <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8018322:	f640 0089 	movw	r0, #2185	; 0x889
 8018326:	f000 fefb 	bl	8019120 <SUBGRF_ReadRegister>
 801832a:	4603      	mov	r3, r0
 801832c:	f043 0304 	orr.w	r3, r3, #4
 8018330:	b2db      	uxtb	r3, r3
 8018332:	4619      	mov	r1, r3
 8018334:	f640 0089 	movw	r0, #2185	; 0x889
 8018338:	f000 fede 	bl	80190f8 <SUBGRF_WriteRegister>
        break;
 801833c:	e01f      	b.n	801837e <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018342:	2b00      	cmp	r3, #0
 8018344:	d004      	beq.n	8018350 <RadioSetTxGenericConfig+0x2c0>
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801834a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801834e:	d902      	bls.n	8018356 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8018350:	f04f 33ff 	mov.w	r3, #4294967295
 8018354:	e027      	b.n	80183a6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8018356:	2002      	movs	r0, #2
 8018358:	f7fe f9ac 	bl	80166b4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801835c:	4b14      	ldr	r3, [pc, #80]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801835e:	2202      	movs	r2, #2
 8018360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018364:	68bb      	ldr	r3, [r7, #8]
 8018366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018368:	4a11      	ldr	r2, [pc, #68]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801836a:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801836c:	4b10      	ldr	r3, [pc, #64]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801836e:	2216      	movs	r2, #22
 8018370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018374:	4811      	ldr	r0, [pc, #68]	; (80183bc <RadioSetTxGenericConfig+0x32c>)
 8018376:	f000 fcab 	bl	8018cd0 <SUBGRF_SetModulationParams>
        break;
 801837a:	e000      	b.n	801837e <RadioSetTxGenericConfig+0x2ee>
        break;
 801837c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801837e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018382:	4618      	mov	r0, r3
 8018384:	f000 ffd4 	bl	8019330 <SUBGRF_SetRfTxPower>
 8018388:	4603      	mov	r3, r0
 801838a:	461a      	mov	r2, r3
 801838c:	4b08      	ldr	r3, [pc, #32]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 801838e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018392:	4b07      	ldr	r3, [pc, #28]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 8018394:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018398:	4618      	mov	r0, r3
 801839a:	f001 f99a 	bl	80196d2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801839e:	4a04      	ldr	r2, [pc, #16]	; (80183b0 <RadioSetTxGenericConfig+0x320>)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6053      	str	r3, [r2, #4]
    return 0;
 80183a4:	2300      	movs	r3, #0
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3728      	adds	r7, #40	; 0x28
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	200017b8 	.word	0x200017b8
 80183b4:	20000ed8 	.word	0x20000ed8
 80183b8:	20001810 	.word	0x20001810
 80183bc:	200017f0 	.word	0x200017f0
 80183c0:	200017c6 	.word	0x200017c6

080183c4 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b084      	sub	sp, #16
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d002      	beq.n	80183d8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80183d2:	4a1a      	ldr	r2, [pc, #104]	; (801843c <SUBGRF_Init+0x78>)
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80183d8:	f7e9 fc50 	bl	8001c7c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80183dc:	2002      	movs	r0, #2
 80183de:	f001 f873 	bl	80194c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80183e2:	4b17      	ldr	r3, [pc, #92]	; (8018440 <SUBGRF_Init+0x7c>)
 80183e4:	2200      	movs	r2, #0
 80183e6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80183e8:	2000      	movs	r0, #0
 80183ea:	f000 f977 	bl	80186dc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80183ee:	f7f2 fb11 	bl	800aa14 <RBI_IsTCXO>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	d10e      	bne.n	8018416 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80183f8:	2140      	movs	r1, #64	; 0x40
 80183fa:	2001      	movs	r0, #1
 80183fc:	f000 fb78 	bl	8018af0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018400:	2100      	movs	r1, #0
 8018402:	f640 1011 	movw	r0, #2321	; 0x911
 8018406:	f000 fe77 	bl	80190f8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801840a:	237f      	movs	r3, #127	; 0x7f
 801840c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801840e:	7b38      	ldrb	r0, [r7, #12]
 8018410:	f000 fa85 	bl	801891e <SUBGRF_Calibrate>
 8018414:	e009      	b.n	801842a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018416:	2120      	movs	r1, #32
 8018418:	f640 1011 	movw	r0, #2321	; 0x911
 801841c:	f000 fe6c 	bl	80190f8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018420:	2120      	movs	r1, #32
 8018422:	f640 1012 	movw	r0, #2322	; 0x912
 8018426:	f000 fe67 	bl	80190f8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801842a:	f7f2 fad7 	bl	800a9dc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801842e:	4b05      	ldr	r3, [pc, #20]	; (8018444 <SUBGRF_Init+0x80>)
 8018430:	2201      	movs	r2, #1
 8018432:	701a      	strb	r2, [r3, #0]
}
 8018434:	bf00      	nop
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}
 801843c:	20000ee8 	.word	0x20000ee8
 8018440:	20000ee4 	.word	0x20000ee4
 8018444:	20000edc 	.word	0x20000edc

08018448 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018448:	b480      	push	{r7}
 801844a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801844c:	4b02      	ldr	r3, [pc, #8]	; (8018458 <SUBGRF_GetOperatingMode+0x10>)
 801844e:	781b      	ldrb	r3, [r3, #0]
}
 8018450:	4618      	mov	r0, r3
 8018452:	46bd      	mov	sp, r7
 8018454:	bc80      	pop	{r7}
 8018456:	4770      	bx	lr
 8018458:	20000edc 	.word	0x20000edc

0801845c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b082      	sub	sp, #8
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
 8018464:	460b      	mov	r3, r1
 8018466:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018468:	78fb      	ldrb	r3, [r7, #3]
 801846a:	461a      	mov	r2, r3
 801846c:	6879      	ldr	r1, [r7, #4]
 801846e:	2000      	movs	r0, #0
 8018470:	f000 feae 	bl	80191d0 <SUBGRF_WriteBuffer>
}
 8018474:	bf00      	nop
 8018476:	3708      	adds	r7, #8
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}

0801847c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b086      	sub	sp, #24
 8018480:	af00      	add	r7, sp, #0
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	4613      	mov	r3, r2
 8018488:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801848a:	2300      	movs	r3, #0
 801848c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801848e:	f107 0317 	add.w	r3, r7, #23
 8018492:	4619      	mov	r1, r3
 8018494:	68b8      	ldr	r0, [r7, #8]
 8018496:	f000 fdb1 	bl	8018ffc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	79fa      	ldrb	r2, [r7, #7]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d201      	bcs.n	80184a8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80184a4:	2301      	movs	r3, #1
 80184a6:	e007      	b.n	80184b8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80184a8:	7df8      	ldrb	r0, [r7, #23]
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	461a      	mov	r2, r3
 80184b0:	68f9      	ldr	r1, [r7, #12]
 80184b2:	f000 feaf 	bl	8019214 <SUBGRF_ReadBuffer>

    return 0;
 80184b6:	2300      	movs	r3, #0
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3718      	adds	r7, #24
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}

080184c0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	60f8      	str	r0, [r7, #12]
 80184c8:	460b      	mov	r3, r1
 80184ca:	607a      	str	r2, [r7, #4]
 80184cc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80184ce:	7afb      	ldrb	r3, [r7, #11]
 80184d0:	4619      	mov	r1, r3
 80184d2:	68f8      	ldr	r0, [r7, #12]
 80184d4:	f7ff ffc2 	bl	801845c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80184d8:	6878      	ldr	r0, [r7, #4]
 80184da:	f000 f91b 	bl	8018714 <SUBGRF_SetTx>
}
 80184de:	bf00      	nop
 80184e0:	3710      	adds	r7, #16
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80184e6:	b580      	push	{r7, lr}
 80184e8:	b082      	sub	sp, #8
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80184ee:	2208      	movs	r2, #8
 80184f0:	6879      	ldr	r1, [r7, #4]
 80184f2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80184f6:	f000 fe27 	bl	8019148 <SUBGRF_WriteRegisters>
    return 0;
 80184fa:	2300      	movs	r3, #0
}
 80184fc:	4618      	mov	r0, r3
 80184fe:	3708      	adds	r7, #8
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}

08018504 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b084      	sub	sp, #16
 8018508:	af00      	add	r7, sp, #0
 801850a:	4603      	mov	r3, r0
 801850c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801850e:	88fb      	ldrh	r3, [r7, #6]
 8018510:	0a1b      	lsrs	r3, r3, #8
 8018512:	b29b      	uxth	r3, r3
 8018514:	b2db      	uxtb	r3, r3
 8018516:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018518:	88fb      	ldrh	r3, [r7, #6]
 801851a:	b2db      	uxtb	r3, r3
 801851c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801851e:	f000 fb67 	bl	8018bf0 <SUBGRF_GetPacketType>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d108      	bne.n	801853a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018528:	f107 030c 	add.w	r3, r7, #12
 801852c:	2202      	movs	r2, #2
 801852e:	4619      	mov	r1, r3
 8018530:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8018534:	f000 fe08 	bl	8019148 <SUBGRF_WriteRegisters>
            break;
 8018538:	e000      	b.n	801853c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801853a:	bf00      	nop
    }
}
 801853c:	bf00      	nop
 801853e:	3710      	adds	r7, #16
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b084      	sub	sp, #16
 8018548:	af00      	add	r7, sp, #0
 801854a:	4603      	mov	r3, r0
 801854c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801854e:	88fb      	ldrh	r3, [r7, #6]
 8018550:	0a1b      	lsrs	r3, r3, #8
 8018552:	b29b      	uxth	r3, r3
 8018554:	b2db      	uxtb	r3, r3
 8018556:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018558:	88fb      	ldrh	r3, [r7, #6]
 801855a:	b2db      	uxtb	r3, r3
 801855c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801855e:	f000 fb47 	bl	8018bf0 <SUBGRF_GetPacketType>
 8018562:	4603      	mov	r3, r0
 8018564:	2b00      	cmp	r3, #0
 8018566:	d108      	bne.n	801857a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018568:	f107 030c 	add.w	r3, r7, #12
 801856c:	2202      	movs	r2, #2
 801856e:	4619      	mov	r1, r3
 8018570:	f240 60be 	movw	r0, #1726	; 0x6be
 8018574:	f000 fde8 	bl	8019148 <SUBGRF_WriteRegisters>
            break;
 8018578:	e000      	b.n	801857c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801857a:	bf00      	nop
    }
}
 801857c:	bf00      	nop
 801857e:	3710      	adds	r7, #16
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}

08018584 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b084      	sub	sp, #16
 8018588:	af00      	add	r7, sp, #0
 801858a:	4603      	mov	r3, r0
 801858c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801858e:	2300      	movs	r3, #0
 8018590:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018592:	f000 fb2d 	bl	8018bf0 <SUBGRF_GetPacketType>
 8018596:	4603      	mov	r3, r0
 8018598:	2b00      	cmp	r3, #0
 801859a:	d121      	bne.n	80185e0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801859c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80185a0:	f000 fdbe 	bl	8019120 <SUBGRF_ReadRegister>
 80185a4:	4603      	mov	r3, r0
 80185a6:	f023 0301 	bic.w	r3, r3, #1
 80185aa:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80185ac:	88fb      	ldrh	r3, [r7, #6]
 80185ae:	0a1b      	lsrs	r3, r3, #8
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	b25b      	sxtb	r3, r3
 80185b4:	f003 0301 	and.w	r3, r3, #1
 80185b8:	b25a      	sxtb	r2, r3
 80185ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185be:	4313      	orrs	r3, r2
 80185c0:	b25b      	sxtb	r3, r3
 80185c2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80185c4:	7bfb      	ldrb	r3, [r7, #15]
 80185c6:	4619      	mov	r1, r3
 80185c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80185cc:	f000 fd94 	bl	80190f8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80185d0:	88fb      	ldrh	r3, [r7, #6]
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	4619      	mov	r1, r3
 80185d6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80185da:	f000 fd8d 	bl	80190f8 <SUBGRF_WriteRegister>
            break;
 80185de:	e000      	b.n	80185e2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80185e0:	bf00      	nop
    }
}
 80185e2:	bf00      	nop
 80185e4:	3710      	adds	r7, #16
 80185e6:	46bd      	mov	sp, r7
 80185e8:	bd80      	pop	{r7, pc}

080185ea <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80185ea:	b580      	push	{r7, lr}
 80185ec:	b082      	sub	sp, #8
 80185ee:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80185f8:	2300      	movs	r3, #0
 80185fa:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80185fc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018600:	f000 fd8e 	bl	8019120 <SUBGRF_ReadRegister>
 8018604:	4603      	mov	r3, r0
 8018606:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018608:	79fb      	ldrb	r3, [r7, #7]
 801860a:	f023 0301 	bic.w	r3, r3, #1
 801860e:	b2db      	uxtb	r3, r3
 8018610:	4619      	mov	r1, r3
 8018612:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8018616:	f000 fd6f 	bl	80190f8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801861a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801861e:	f000 fd7f 	bl	8019120 <SUBGRF_ReadRegister>
 8018622:	4603      	mov	r3, r0
 8018624:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018626:	79bb      	ldrb	r3, [r7, #6]
 8018628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801862c:	b2db      	uxtb	r3, r3
 801862e:	4619      	mov	r1, r3
 8018630:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018634:	f000 fd60 	bl	80190f8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018638:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801863c:	f000 f88a 	bl	8018754 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018640:	463b      	mov	r3, r7
 8018642:	2204      	movs	r2, #4
 8018644:	4619      	mov	r1, r3
 8018646:	f640 0019 	movw	r0, #2073	; 0x819
 801864a:	f000 fd9f 	bl	801918c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801864e:	2000      	movs	r0, #0
 8018650:	f000 f844 	bl	80186dc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018654:	79fb      	ldrb	r3, [r7, #7]
 8018656:	4619      	mov	r1, r3
 8018658:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801865c:	f000 fd4c 	bl	80190f8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018660:	79bb      	ldrb	r3, [r7, #6]
 8018662:	4619      	mov	r1, r3
 8018664:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018668:	f000 fd46 	bl	80190f8 <SUBGRF_WriteRegister>

    return number;
 801866c:	683b      	ldr	r3, [r7, #0]
}
 801866e:	4618      	mov	r0, r3
 8018670:	3708      	adds	r7, #8
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}
	...

08018678 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018680:	2000      	movs	r0, #0
 8018682:	f7f2 f9b2 	bl	800a9ea <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018686:	2002      	movs	r0, #2
 8018688:	f000 ff1e 	bl	80194c8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801868c:	793b      	ldrb	r3, [r7, #4]
 801868e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018692:	b2db      	uxtb	r3, r3
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018698:	793b      	ldrb	r3, [r7, #4]
 801869a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186a2:	b25b      	sxtb	r3, r3
 80186a4:	4313      	orrs	r3, r2
 80186a6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80186a8:	793b      	ldrb	r3, [r7, #4]
 80186aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80186ae:	b2db      	uxtb	r3, r3
 80186b0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80186b2:	4313      	orrs	r3, r2
 80186b4:	b25b      	sxtb	r3, r3
 80186b6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80186ba:	f107 030f 	add.w	r3, r7, #15
 80186be:	2201      	movs	r2, #1
 80186c0:	4619      	mov	r1, r3
 80186c2:	2084      	movs	r0, #132	; 0x84
 80186c4:	f000 fdc8 	bl	8019258 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80186c8:	4b03      	ldr	r3, [pc, #12]	; (80186d8 <SUBGRF_SetSleep+0x60>)
 80186ca:	2200      	movs	r2, #0
 80186cc:	701a      	strb	r2, [r3, #0]
}
 80186ce:	bf00      	nop
 80186d0:	3710      	adds	r7, #16
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}
 80186d6:	bf00      	nop
 80186d8:	20000edc 	.word	0x20000edc

080186dc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b082      	sub	sp, #8
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	4603      	mov	r3, r0
 80186e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80186e6:	1dfb      	adds	r3, r7, #7
 80186e8:	2201      	movs	r2, #1
 80186ea:	4619      	mov	r1, r3
 80186ec:	2080      	movs	r0, #128	; 0x80
 80186ee:	f000 fdb3 	bl	8019258 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80186f2:	79fb      	ldrb	r3, [r7, #7]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d103      	bne.n	8018700 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80186f8:	4b05      	ldr	r3, [pc, #20]	; (8018710 <SUBGRF_SetStandby+0x34>)
 80186fa:	2201      	movs	r2, #1
 80186fc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80186fe:	e002      	b.n	8018706 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018700:	4b03      	ldr	r3, [pc, #12]	; (8018710 <SUBGRF_SetStandby+0x34>)
 8018702:	2202      	movs	r2, #2
 8018704:	701a      	strb	r2, [r3, #0]
}
 8018706:	bf00      	nop
 8018708:	3708      	adds	r7, #8
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
 801870e:	bf00      	nop
 8018710:	20000edc 	.word	0x20000edc

08018714 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801871c:	4b0c      	ldr	r3, [pc, #48]	; (8018750 <SUBGRF_SetTx+0x3c>)
 801871e:	2204      	movs	r2, #4
 8018720:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	0c1b      	lsrs	r3, r3, #16
 8018726:	b2db      	uxtb	r3, r3
 8018728:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	0a1b      	lsrs	r3, r3, #8
 801872e:	b2db      	uxtb	r3, r3
 8018730:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	b2db      	uxtb	r3, r3
 8018736:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018738:	f107 030c 	add.w	r3, r7, #12
 801873c:	2203      	movs	r2, #3
 801873e:	4619      	mov	r1, r3
 8018740:	2083      	movs	r0, #131	; 0x83
 8018742:	f000 fd89 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018746:	bf00      	nop
 8018748:	3710      	adds	r7, #16
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}
 801874e:	bf00      	nop
 8018750:	20000edc 	.word	0x20000edc

08018754 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b084      	sub	sp, #16
 8018758:	af00      	add	r7, sp, #0
 801875a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801875c:	4b0c      	ldr	r3, [pc, #48]	; (8018790 <SUBGRF_SetRx+0x3c>)
 801875e:	2205      	movs	r2, #5
 8018760:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	0c1b      	lsrs	r3, r3, #16
 8018766:	b2db      	uxtb	r3, r3
 8018768:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	0a1b      	lsrs	r3, r3, #8
 801876e:	b2db      	uxtb	r3, r3
 8018770:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	b2db      	uxtb	r3, r3
 8018776:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018778:	f107 030c 	add.w	r3, r7, #12
 801877c:	2203      	movs	r2, #3
 801877e:	4619      	mov	r1, r3
 8018780:	2082      	movs	r0, #130	; 0x82
 8018782:	f000 fd69 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018786:	bf00      	nop
 8018788:	3710      	adds	r7, #16
 801878a:	46bd      	mov	sp, r7
 801878c:	bd80      	pop	{r7, pc}
 801878e:	bf00      	nop
 8018790:	20000edc 	.word	0x20000edc

08018794 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b084      	sub	sp, #16
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801879c:	4b0e      	ldr	r3, [pc, #56]	; (80187d8 <SUBGRF_SetRxBoosted+0x44>)
 801879e:	2205      	movs	r2, #5
 80187a0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80187a2:	2197      	movs	r1, #151	; 0x97
 80187a4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80187a8:	f000 fca6 	bl	80190f8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	0c1b      	lsrs	r3, r3, #16
 80187b0:	b2db      	uxtb	r3, r3
 80187b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	0a1b      	lsrs	r3, r3, #8
 80187b8:	b2db      	uxtb	r3, r3
 80187ba:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	b2db      	uxtb	r3, r3
 80187c0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80187c2:	f107 030c 	add.w	r3, r7, #12
 80187c6:	2203      	movs	r2, #3
 80187c8:	4619      	mov	r1, r3
 80187ca:	2082      	movs	r0, #130	; 0x82
 80187cc:	f000 fd44 	bl	8019258 <SUBGRF_WriteCommand>
}
 80187d0:	bf00      	nop
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}
 80187d8:	20000edc 	.word	0x20000edc

080187dc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b084      	sub	sp, #16
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
 80187e4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	0c1b      	lsrs	r3, r3, #16
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	0a1b      	lsrs	r3, r3, #8
 80187f2:	b2db      	uxtb	r3, r3
 80187f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	b2db      	uxtb	r3, r3
 80187fa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	0c1b      	lsrs	r3, r3, #16
 8018800:	b2db      	uxtb	r3, r3
 8018802:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	0a1b      	lsrs	r3, r3, #8
 8018808:	b2db      	uxtb	r3, r3
 801880a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	b2db      	uxtb	r3, r3
 8018810:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018812:	f107 0308 	add.w	r3, r7, #8
 8018816:	2206      	movs	r2, #6
 8018818:	4619      	mov	r1, r3
 801881a:	2094      	movs	r0, #148	; 0x94
 801881c:	f000 fd1c 	bl	8019258 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018820:	4b03      	ldr	r3, [pc, #12]	; (8018830 <SUBGRF_SetRxDutyCycle+0x54>)
 8018822:	2206      	movs	r2, #6
 8018824:	701a      	strb	r2, [r3, #0]
}
 8018826:	bf00      	nop
 8018828:	3710      	adds	r7, #16
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	20000edc 	.word	0x20000edc

08018834 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018834:	b580      	push	{r7, lr}
 8018836:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018838:	2200      	movs	r2, #0
 801883a:	2100      	movs	r1, #0
 801883c:	20c5      	movs	r0, #197	; 0xc5
 801883e:	f000 fd0b 	bl	8019258 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018842:	4b02      	ldr	r3, [pc, #8]	; (801884c <SUBGRF_SetCad+0x18>)
 8018844:	2207      	movs	r2, #7
 8018846:	701a      	strb	r2, [r3, #0]
}
 8018848:	bf00      	nop
 801884a:	bd80      	pop	{r7, pc}
 801884c:	20000edc 	.word	0x20000edc

08018850 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018850:	b580      	push	{r7, lr}
 8018852:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018854:	2200      	movs	r2, #0
 8018856:	2100      	movs	r1, #0
 8018858:	20d1      	movs	r0, #209	; 0xd1
 801885a:	f000 fcfd 	bl	8019258 <SUBGRF_WriteCommand>
}
 801885e:	bf00      	nop
 8018860:	bd80      	pop	{r7, pc}

08018862 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018862:	b580      	push	{r7, lr}
 8018864:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018866:	2200      	movs	r2, #0
 8018868:	2100      	movs	r1, #0
 801886a:	20d2      	movs	r0, #210	; 0xd2
 801886c:	f000 fcf4 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018870:	bf00      	nop
 8018872:	bd80      	pop	{r7, pc}

08018874 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
 801887a:	4603      	mov	r3, r0
 801887c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801887e:	1dfb      	adds	r3, r7, #7
 8018880:	2201      	movs	r2, #1
 8018882:	4619      	mov	r1, r3
 8018884:	209f      	movs	r0, #159	; 0x9f
 8018886:	f000 fce7 	bl	8019258 <SUBGRF_WriteCommand>
}
 801888a:	bf00      	nop
 801888c:	3708      	adds	r7, #8
 801888e:	46bd      	mov	sp, r7
 8018890:	bd80      	pop	{r7, pc}

08018892 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018892:	b580      	push	{r7, lr}
 8018894:	b084      	sub	sp, #16
 8018896:	af00      	add	r7, sp, #0
 8018898:	4603      	mov	r3, r0
 801889a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801889c:	1dfb      	adds	r3, r7, #7
 801889e:	2201      	movs	r2, #1
 80188a0:	4619      	mov	r1, r3
 80188a2:	20a0      	movs	r0, #160	; 0xa0
 80188a4:	f000 fcd8 	bl	8019258 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80188a8:	79fb      	ldrb	r3, [r7, #7]
 80188aa:	2b3f      	cmp	r3, #63	; 0x3f
 80188ac:	d91c      	bls.n	80188e8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80188ae:	79fb      	ldrb	r3, [r7, #7]
 80188b0:	085b      	lsrs	r3, r3, #1
 80188b2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80188b4:	2300      	movs	r3, #0
 80188b6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80188b8:	2300      	movs	r3, #0
 80188ba:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80188bc:	e005      	b.n	80188ca <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80188be:	7bfb      	ldrb	r3, [r7, #15]
 80188c0:	089b      	lsrs	r3, r3, #2
 80188c2:	73fb      	strb	r3, [r7, #15]
            exp++;
 80188c4:	7bbb      	ldrb	r3, [r7, #14]
 80188c6:	3301      	adds	r3, #1
 80188c8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80188ca:	7bfb      	ldrb	r3, [r7, #15]
 80188cc:	2b1f      	cmp	r3, #31
 80188ce:	d8f6      	bhi.n	80188be <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80188d0:	7bfb      	ldrb	r3, [r7, #15]
 80188d2:	00db      	lsls	r3, r3, #3
 80188d4:	b2da      	uxtb	r2, r3
 80188d6:	7bbb      	ldrb	r3, [r7, #14]
 80188d8:	4413      	add	r3, r2
 80188da:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80188dc:	7b7b      	ldrb	r3, [r7, #13]
 80188de:	4619      	mov	r1, r3
 80188e0:	f240 7006 	movw	r0, #1798	; 0x706
 80188e4:	f000 fc08 	bl	80190f8 <SUBGRF_WriteRegister>
    }
}
 80188e8:	bf00      	nop
 80188ea:	3710      	adds	r7, #16
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}

080188f0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80188f6:	f7f2 f894 	bl	800aa22 <RBI_IsDCDC>
 80188fa:	4603      	mov	r3, r0
 80188fc:	2b01      	cmp	r3, #1
 80188fe:	d102      	bne.n	8018906 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018900:	2301      	movs	r3, #1
 8018902:	71fb      	strb	r3, [r7, #7]
 8018904:	e001      	b.n	801890a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018906:	2300      	movs	r3, #0
 8018908:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801890a:	1dfb      	adds	r3, r7, #7
 801890c:	2201      	movs	r2, #1
 801890e:	4619      	mov	r1, r3
 8018910:	2096      	movs	r0, #150	; 0x96
 8018912:	f000 fca1 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018916:	bf00      	nop
 8018918:	3708      	adds	r7, #8
 801891a:	46bd      	mov	sp, r7
 801891c:	bd80      	pop	{r7, pc}

0801891e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801891e:	b580      	push	{r7, lr}
 8018920:	b084      	sub	sp, #16
 8018922:	af00      	add	r7, sp, #0
 8018924:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018926:	793b      	ldrb	r3, [r7, #4]
 8018928:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801892c:	b2db      	uxtb	r3, r3
 801892e:	019b      	lsls	r3, r3, #6
 8018930:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018932:	793b      	ldrb	r3, [r7, #4]
 8018934:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018938:	b2db      	uxtb	r3, r3
 801893a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801893c:	b25b      	sxtb	r3, r3
 801893e:	4313      	orrs	r3, r2
 8018940:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018942:	793b      	ldrb	r3, [r7, #4]
 8018944:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018948:	b2db      	uxtb	r3, r3
 801894a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801894c:	b25b      	sxtb	r3, r3
 801894e:	4313      	orrs	r3, r2
 8018950:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018952:	793b      	ldrb	r3, [r7, #4]
 8018954:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018958:	b2db      	uxtb	r3, r3
 801895a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801895c:	b25b      	sxtb	r3, r3
 801895e:	4313      	orrs	r3, r2
 8018960:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018962:	793b      	ldrb	r3, [r7, #4]
 8018964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018968:	b2db      	uxtb	r3, r3
 801896a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801896c:	b25b      	sxtb	r3, r3
 801896e:	4313      	orrs	r3, r2
 8018970:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018972:	793b      	ldrb	r3, [r7, #4]
 8018974:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018978:	b2db      	uxtb	r3, r3
 801897a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801897c:	b25b      	sxtb	r3, r3
 801897e:	4313      	orrs	r3, r2
 8018980:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018982:	793b      	ldrb	r3, [r7, #4]
 8018984:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018988:	b2db      	uxtb	r3, r3
 801898a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801898c:	4313      	orrs	r3, r2
 801898e:	b25b      	sxtb	r3, r3
 8018990:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018992:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018994:	f107 030f 	add.w	r3, r7, #15
 8018998:	2201      	movs	r2, #1
 801899a:	4619      	mov	r1, r3
 801899c:	2089      	movs	r0, #137	; 0x89
 801899e:	f000 fc5b 	bl	8019258 <SUBGRF_WriteCommand>
}
 80189a2:	bf00      	nop
 80189a4:	3710      	adds	r7, #16
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}
	...

080189ac <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b084      	sub	sp, #16
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	4a1b      	ldr	r2, [pc, #108]	; (8018a24 <SUBGRF_CalibrateImage+0x78>)
 80189b8:	4293      	cmp	r3, r2
 80189ba:	d904      	bls.n	80189c6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80189bc:	23e1      	movs	r3, #225	; 0xe1
 80189be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80189c0:	23e9      	movs	r3, #233	; 0xe9
 80189c2:	737b      	strb	r3, [r7, #13]
 80189c4:	e022      	b.n	8018a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4a17      	ldr	r2, [pc, #92]	; (8018a28 <SUBGRF_CalibrateImage+0x7c>)
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d904      	bls.n	80189d8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80189ce:	23d7      	movs	r3, #215	; 0xd7
 80189d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80189d2:	23db      	movs	r3, #219	; 0xdb
 80189d4:	737b      	strb	r3, [r7, #13]
 80189d6:	e019      	b.n	8018a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	4a14      	ldr	r2, [pc, #80]	; (8018a2c <SUBGRF_CalibrateImage+0x80>)
 80189dc:	4293      	cmp	r3, r2
 80189de:	d904      	bls.n	80189ea <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80189e0:	23c1      	movs	r3, #193	; 0xc1
 80189e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80189e4:	23c5      	movs	r3, #197	; 0xc5
 80189e6:	737b      	strb	r3, [r7, #13]
 80189e8:	e010      	b.n	8018a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4a10      	ldr	r2, [pc, #64]	; (8018a30 <SUBGRF_CalibrateImage+0x84>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d904      	bls.n	80189fc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80189f2:	2375      	movs	r3, #117	; 0x75
 80189f4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80189f6:	2381      	movs	r3, #129	; 0x81
 80189f8:	737b      	strb	r3, [r7, #13]
 80189fa:	e007      	b.n	8018a0c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	4a0d      	ldr	r2, [pc, #52]	; (8018a34 <SUBGRF_CalibrateImage+0x88>)
 8018a00:	4293      	cmp	r3, r2
 8018a02:	d903      	bls.n	8018a0c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8018a04:	236b      	movs	r3, #107	; 0x6b
 8018a06:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018a08:	236f      	movs	r3, #111	; 0x6f
 8018a0a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018a0c:	f107 030c 	add.w	r3, r7, #12
 8018a10:	2202      	movs	r2, #2
 8018a12:	4619      	mov	r1, r3
 8018a14:	2098      	movs	r0, #152	; 0x98
 8018a16:	f000 fc1f 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018a1a:	bf00      	nop
 8018a1c:	3710      	adds	r7, #16
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}
 8018a22:	bf00      	nop
 8018a24:	35a4e900 	.word	0x35a4e900
 8018a28:	32a9f880 	.word	0x32a9f880
 8018a2c:	2de54480 	.word	0x2de54480
 8018a30:	1b6b0b00 	.word	0x1b6b0b00
 8018a34:	1954fc40 	.word	0x1954fc40

08018a38 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018a38:	b590      	push	{r4, r7, lr}
 8018a3a:	b085      	sub	sp, #20
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4604      	mov	r4, r0
 8018a40:	4608      	mov	r0, r1
 8018a42:	4611      	mov	r1, r2
 8018a44:	461a      	mov	r2, r3
 8018a46:	4623      	mov	r3, r4
 8018a48:	71fb      	strb	r3, [r7, #7]
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	71bb      	strb	r3, [r7, #6]
 8018a4e:	460b      	mov	r3, r1
 8018a50:	717b      	strb	r3, [r7, #5]
 8018a52:	4613      	mov	r3, r2
 8018a54:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018a56:	79fb      	ldrb	r3, [r7, #7]
 8018a58:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018a5a:	79bb      	ldrb	r3, [r7, #6]
 8018a5c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018a5e:	797b      	ldrb	r3, [r7, #5]
 8018a60:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018a62:	793b      	ldrb	r3, [r7, #4]
 8018a64:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018a66:	f107 030c 	add.w	r3, r7, #12
 8018a6a:	2204      	movs	r2, #4
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	2095      	movs	r0, #149	; 0x95
 8018a70:	f000 fbf2 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018a74:	bf00      	nop
 8018a76:	3714      	adds	r7, #20
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd90      	pop	{r4, r7, pc}

08018a7c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018a7c:	b590      	push	{r4, r7, lr}
 8018a7e:	b085      	sub	sp, #20
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	4604      	mov	r4, r0
 8018a84:	4608      	mov	r0, r1
 8018a86:	4611      	mov	r1, r2
 8018a88:	461a      	mov	r2, r3
 8018a8a:	4623      	mov	r3, r4
 8018a8c:	80fb      	strh	r3, [r7, #6]
 8018a8e:	4603      	mov	r3, r0
 8018a90:	80bb      	strh	r3, [r7, #4]
 8018a92:	460b      	mov	r3, r1
 8018a94:	807b      	strh	r3, [r7, #2]
 8018a96:	4613      	mov	r3, r2
 8018a98:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018a9a:	88fb      	ldrh	r3, [r7, #6]
 8018a9c:	0a1b      	lsrs	r3, r3, #8
 8018a9e:	b29b      	uxth	r3, r3
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018aa4:	88fb      	ldrh	r3, [r7, #6]
 8018aa6:	b2db      	uxtb	r3, r3
 8018aa8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018aaa:	88bb      	ldrh	r3, [r7, #4]
 8018aac:	0a1b      	lsrs	r3, r3, #8
 8018aae:	b29b      	uxth	r3, r3
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018ab4:	88bb      	ldrh	r3, [r7, #4]
 8018ab6:	b2db      	uxtb	r3, r3
 8018ab8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018aba:	887b      	ldrh	r3, [r7, #2]
 8018abc:	0a1b      	lsrs	r3, r3, #8
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	b2db      	uxtb	r3, r3
 8018ac2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018ac4:	887b      	ldrh	r3, [r7, #2]
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018aca:	883b      	ldrh	r3, [r7, #0]
 8018acc:	0a1b      	lsrs	r3, r3, #8
 8018ace:	b29b      	uxth	r3, r3
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018ad4:	883b      	ldrh	r3, [r7, #0]
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018ada:	f107 0308 	add.w	r3, r7, #8
 8018ade:	2208      	movs	r2, #8
 8018ae0:	4619      	mov	r1, r3
 8018ae2:	2008      	movs	r0, #8
 8018ae4:	f000 fbb8 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018ae8:	bf00      	nop
 8018aea:	3714      	adds	r7, #20
 8018aec:	46bd      	mov	sp, r7
 8018aee:	bd90      	pop	{r4, r7, pc}

08018af0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b084      	sub	sp, #16
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	4603      	mov	r3, r0
 8018af8:	6039      	str	r1, [r7, #0]
 8018afa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018afc:	79fb      	ldrb	r3, [r7, #7]
 8018afe:	f003 0307 	and.w	r3, r3, #7
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	0c1b      	lsrs	r3, r3, #16
 8018b0a:	b2db      	uxtb	r3, r3
 8018b0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	0a1b      	lsrs	r3, r3, #8
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018b1c:	f107 030c 	add.w	r3, r7, #12
 8018b20:	2204      	movs	r2, #4
 8018b22:	4619      	mov	r1, r3
 8018b24:	2097      	movs	r0, #151	; 0x97
 8018b26:	f000 fb97 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018b2a:	bf00      	nop
 8018b2c:	3710      	adds	r7, #16
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bd80      	pop	{r7, pc}
	...

08018b34 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018b34:	b5b0      	push	{r4, r5, r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018b40:	4b1b      	ldr	r3, [pc, #108]	; (8018bb0 <SUBGRF_SetRfFrequency+0x7c>)
 8018b42:	781b      	ldrb	r3, [r3, #0]
 8018b44:	f083 0301 	eor.w	r3, r3, #1
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d005      	beq.n	8018b5a <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	f7ff ff2c 	bl	80189ac <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018b54:	4b16      	ldr	r3, [pc, #88]	; (8018bb0 <SUBGRF_SetRfFrequency+0x7c>)
 8018b56:	2201      	movs	r2, #1
 8018b58:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	f04f 0300 	mov.w	r3, #0
 8018b62:	09d5      	lsrs	r5, r2, #7
 8018b64:	0654      	lsls	r4, r2, #25
 8018b66:	4a13      	ldr	r2, [pc, #76]	; (8018bb4 <SUBGRF_SetRfFrequency+0x80>)
 8018b68:	f04f 0300 	mov.w	r3, #0
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	4629      	mov	r1, r5
 8018b70:	f7e7 fff4 	bl	8000b5c <__aeabi_uldivmod>
 8018b74:	4602      	mov	r2, r0
 8018b76:	460b      	mov	r3, r1
 8018b78:	4613      	mov	r3, r2
 8018b7a:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	0e1b      	lsrs	r3, r3, #24
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	0c1b      	lsrs	r3, r3, #16
 8018b88:	b2db      	uxtb	r3, r3
 8018b8a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	0a1b      	lsrs	r3, r3, #8
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018b9a:	f107 0308 	add.w	r3, r7, #8
 8018b9e:	2204      	movs	r2, #4
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	2086      	movs	r0, #134	; 0x86
 8018ba4:	f000 fb58 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018ba8:	bf00      	nop
 8018baa:	3710      	adds	r7, #16
 8018bac:	46bd      	mov	sp, r7
 8018bae:	bdb0      	pop	{r4, r5, r7, pc}
 8018bb0:	20000ee4 	.word	0x20000ee4
 8018bb4:	01e84800 	.word	0x01e84800

08018bb8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018bc2:	79fa      	ldrb	r2, [r7, #7]
 8018bc4:	4b09      	ldr	r3, [pc, #36]	; (8018bec <SUBGRF_SetPacketType+0x34>)
 8018bc6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018bc8:	79fb      	ldrb	r3, [r7, #7]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d104      	bne.n	8018bd8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018bce:	2100      	movs	r1, #0
 8018bd0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018bd4:	f000 fa90 	bl	80190f8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018bd8:	1dfb      	adds	r3, r7, #7
 8018bda:	2201      	movs	r2, #1
 8018bdc:	4619      	mov	r1, r3
 8018bde:	208a      	movs	r0, #138	; 0x8a
 8018be0:	f000 fb3a 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018be4:	bf00      	nop
 8018be6:	3708      	adds	r7, #8
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	20000edd 	.word	0x20000edd

08018bf0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018bf0:	b480      	push	{r7}
 8018bf2:	af00      	add	r7, sp, #0
    return PacketType;
 8018bf4:	4b02      	ldr	r3, [pc, #8]	; (8018c00 <SUBGRF_GetPacketType+0x10>)
 8018bf6:	781b      	ldrb	r3, [r3, #0]
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bc80      	pop	{r7}
 8018bfe:	4770      	bx	lr
 8018c00:	20000edd 	.word	0x20000edd

08018c04 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	71fb      	strb	r3, [r7, #7]
 8018c0e:	460b      	mov	r3, r1
 8018c10:	71bb      	strb	r3, [r7, #6]
 8018c12:	4613      	mov	r3, r2
 8018c14:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8018c16:	79fb      	ldrb	r3, [r7, #7]
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d124      	bne.n	8018c66 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8018c1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c20:	2b0f      	cmp	r3, #15
 8018c22:	d106      	bne.n	8018c32 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 8018c24:	2301      	movs	r3, #1
 8018c26:	2201      	movs	r2, #1
 8018c28:	2100      	movs	r1, #0
 8018c2a:	2006      	movs	r0, #6
 8018c2c:	f7ff ff04 	bl	8018a38 <SUBGRF_SetPaConfig>
 8018c30:	e005      	b.n	8018c3e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 8018c32:	2301      	movs	r3, #1
 8018c34:	2201      	movs	r2, #1
 8018c36:	2100      	movs	r1, #0
 8018c38:	2004      	movs	r0, #4
 8018c3a:	f7ff fefd 	bl	8018a38 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8018c3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c42:	2b0d      	cmp	r3, #13
 8018c44:	dd02      	ble.n	8018c4c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 8018c46:	230e      	movs	r3, #14
 8018c48:	71bb      	strb	r3, [r7, #6]
 8018c4a:	e006      	b.n	8018c5a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 8018c4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c50:	f113 0f11 	cmn.w	r3, #17
 8018c54:	da01      	bge.n	8018c5a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 8018c56:	23ef      	movs	r3, #239	; 0xef
 8018c58:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 8018c5a:	2118      	movs	r1, #24
 8018c5c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018c60:	f000 fa4a 	bl	80190f8 <SUBGRF_WriteRegister>
 8018c64:	e025      	b.n	8018cb2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 8018c66:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c6a:	f000 fa59 	bl	8019120 <SUBGRF_ReadRegister>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	f043 031e 	orr.w	r3, r3, #30
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	4619      	mov	r1, r3
 8018c78:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8018c7c:	f000 fa3c 	bl	80190f8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8018c80:	2301      	movs	r3, #1
 8018c82:	2200      	movs	r2, #0
 8018c84:	2107      	movs	r1, #7
 8018c86:	2004      	movs	r0, #4
 8018c88:	f7ff fed6 	bl	8018a38 <SUBGRF_SetPaConfig>
        if( power > 22 )
 8018c8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c90:	2b16      	cmp	r3, #22
 8018c92:	dd02      	ble.n	8018c9a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8018c94:	2316      	movs	r3, #22
 8018c96:	71bb      	strb	r3, [r7, #6]
 8018c98:	e006      	b.n	8018ca8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 8018c9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c9e:	f113 0f09 	cmn.w	r3, #9
 8018ca2:	da01      	bge.n	8018ca8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8018ca4:	23f7      	movs	r3, #247	; 0xf7
 8018ca6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8018ca8:	2138      	movs	r1, #56	; 0x38
 8018caa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8018cae:	f000 fa23 	bl	80190f8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018cb2:	79bb      	ldrb	r3, [r7, #6]
 8018cb4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8018cb6:	797b      	ldrb	r3, [r7, #5]
 8018cb8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8018cba:	f107 030c 	add.w	r3, r7, #12
 8018cbe:	2202      	movs	r2, #2
 8018cc0:	4619      	mov	r1, r3
 8018cc2:	208e      	movs	r0, #142	; 0x8e
 8018cc4:	f000 fac8 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018cc8:	bf00      	nop
 8018cca:	3710      	adds	r7, #16
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018cd0:	b5b0      	push	{r4, r5, r7, lr}
 8018cd2:	b086      	sub	sp, #24
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018cdc:	4a5e      	ldr	r2, [pc, #376]	; (8018e58 <SUBGRF_SetModulationParams+0x188>)
 8018cde:	f107 0308 	add.w	r3, r7, #8
 8018ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ce6:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	781a      	ldrb	r2, [r3, #0]
 8018cee:	4b5b      	ldr	r3, [pc, #364]	; (8018e5c <SUBGRF_SetModulationParams+0x18c>)
 8018cf0:	781b      	ldrb	r3, [r3, #0]
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d004      	beq.n	8018d00 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7ff ff5c 	bl	8018bb8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	2b03      	cmp	r3, #3
 8018d06:	f200 80a2 	bhi.w	8018e4e <SUBGRF_SetModulationParams+0x17e>
 8018d0a:	a201      	add	r2, pc, #4	; (adr r2, 8018d10 <SUBGRF_SetModulationParams+0x40>)
 8018d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d10:	08018d21 	.word	0x08018d21
 8018d14:	08018ddd 	.word	0x08018ddd
 8018d18:	08018d9f 	.word	0x08018d9f
 8018d1c:	08018e0b 	.word	0x08018e0b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018d20:	2308      	movs	r3, #8
 8018d22:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	4a4d      	ldr	r2, [pc, #308]	; (8018e60 <SUBGRF_SetModulationParams+0x190>)
 8018d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d2e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	0c1b      	lsrs	r3, r3, #16
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	0a1b      	lsrs	r3, r3, #8
 8018d3c:	b2db      	uxtb	r3, r3
 8018d3e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	7b1b      	ldrb	r3, [r3, #12]
 8018d4a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	7b5b      	ldrb	r3, [r3, #13]
 8018d50:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	689b      	ldr	r3, [r3, #8]
 8018d56:	461a      	mov	r2, r3
 8018d58:	f04f 0300 	mov.w	r3, #0
 8018d5c:	09d5      	lsrs	r5, r2, #7
 8018d5e:	0654      	lsls	r4, r2, #25
 8018d60:	4a40      	ldr	r2, [pc, #256]	; (8018e64 <SUBGRF_SetModulationParams+0x194>)
 8018d62:	f04f 0300 	mov.w	r3, #0
 8018d66:	4620      	mov	r0, r4
 8018d68:	4629      	mov	r1, r5
 8018d6a:	f7e7 fef7 	bl	8000b5c <__aeabi_uldivmod>
 8018d6e:	4602      	mov	r2, r0
 8018d70:	460b      	mov	r3, r1
 8018d72:	4613      	mov	r3, r2
 8018d74:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018d76:	697b      	ldr	r3, [r7, #20]
 8018d78:	0c1b      	lsrs	r3, r3, #16
 8018d7a:	b2db      	uxtb	r3, r3
 8018d7c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	0a1b      	lsrs	r3, r3, #8
 8018d82:	b2db      	uxtb	r3, r3
 8018d84:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	b2db      	uxtb	r3, r3
 8018d8a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018d8c:	7cfb      	ldrb	r3, [r7, #19]
 8018d8e:	b29a      	uxth	r2, r3
 8018d90:	f107 0308 	add.w	r3, r7, #8
 8018d94:	4619      	mov	r1, r3
 8018d96:	208b      	movs	r0, #139	; 0x8b
 8018d98:	f000 fa5e 	bl	8019258 <SUBGRF_WriteCommand>
        break;
 8018d9c:	e058      	b.n	8018e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018d9e:	2304      	movs	r3, #4
 8018da0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	691b      	ldr	r3, [r3, #16]
 8018da6:	4a2e      	ldr	r2, [pc, #184]	; (8018e60 <SUBGRF_SetModulationParams+0x190>)
 8018da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8018dac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018dae:	697b      	ldr	r3, [r7, #20]
 8018db0:	0c1b      	lsrs	r3, r3, #16
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	0a1b      	lsrs	r3, r3, #8
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	b2db      	uxtb	r3, r3
 8018dc2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	7d1b      	ldrb	r3, [r3, #20]
 8018dc8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018dca:	7cfb      	ldrb	r3, [r7, #19]
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	f107 0308 	add.w	r3, r7, #8
 8018dd2:	4619      	mov	r1, r3
 8018dd4:	208b      	movs	r0, #139	; 0x8b
 8018dd6:	f000 fa3f 	bl	8019258 <SUBGRF_WriteCommand>
        break;
 8018dda:	e039      	b.n	8018e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8018ddc:	2304      	movs	r3, #4
 8018dde:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	7e1b      	ldrb	r3, [r3, #24]
 8018de4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	7e5b      	ldrb	r3, [r3, #25]
 8018dea:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	7e9b      	ldrb	r3, [r3, #26]
 8018df0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	7edb      	ldrb	r3, [r3, #27]
 8018df6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018df8:	7cfb      	ldrb	r3, [r7, #19]
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	f107 0308 	add.w	r3, r7, #8
 8018e00:	4619      	mov	r1, r3
 8018e02:	208b      	movs	r0, #139	; 0x8b
 8018e04:	f000 fa28 	bl	8019258 <SUBGRF_WriteCommand>

        break;
 8018e08:	e022      	b.n	8018e50 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018e0a:	2305      	movs	r3, #5
 8018e0c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	685b      	ldr	r3, [r3, #4]
 8018e12:	4a13      	ldr	r2, [pc, #76]	; (8018e60 <SUBGRF_SetModulationParams+0x190>)
 8018e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e18:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018e1a:	697b      	ldr	r3, [r7, #20]
 8018e1c:	0c1b      	lsrs	r3, r3, #16
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	0a1b      	lsrs	r3, r3, #8
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018e2a:	697b      	ldr	r3, [r7, #20]
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	7b1b      	ldrb	r3, [r3, #12]
 8018e34:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	7b5b      	ldrb	r3, [r3, #13]
 8018e3a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018e3c:	7cfb      	ldrb	r3, [r7, #19]
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	f107 0308 	add.w	r3, r7, #8
 8018e44:	4619      	mov	r1, r3
 8018e46:	208b      	movs	r0, #139	; 0x8b
 8018e48:	f000 fa06 	bl	8019258 <SUBGRF_WriteCommand>
        break;
 8018e4c:	e000      	b.n	8018e50 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018e4e:	bf00      	nop
    }
}
 8018e50:	bf00      	nop
 8018e52:	3718      	adds	r7, #24
 8018e54:	46bd      	mov	sp, r7
 8018e56:	bdb0      	pop	{r4, r5, r7, pc}
 8018e58:	0801b57c 	.word	0x0801b57c
 8018e5c:	20000edd 	.word	0x20000edd
 8018e60:	3d090000 	.word	0x3d090000
 8018e64:	01e84800 	.word	0x01e84800

08018e68 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b086      	sub	sp, #24
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018e70:	2300      	movs	r3, #0
 8018e72:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018e74:	4a48      	ldr	r2, [pc, #288]	; (8018f98 <SUBGRF_SetPacketParams+0x130>)
 8018e76:	f107 030c 	add.w	r3, r7, #12
 8018e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e7c:	c303      	stmia	r3!, {r0, r1}
 8018e7e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	781a      	ldrb	r2, [r3, #0]
 8018e84:	4b45      	ldr	r3, [pc, #276]	; (8018f9c <SUBGRF_SetPacketParams+0x134>)
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	429a      	cmp	r2, r3
 8018e8a:	d004      	beq.n	8018e96 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	781b      	ldrb	r3, [r3, #0]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7ff fe91 	bl	8018bb8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	2b03      	cmp	r3, #3
 8018e9c:	d878      	bhi.n	8018f90 <SUBGRF_SetPacketParams+0x128>
 8018e9e:	a201      	add	r2, pc, #4	; (adr r2, 8018ea4 <SUBGRF_SetPacketParams+0x3c>)
 8018ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ea4:	08018eb5 	.word	0x08018eb5
 8018ea8:	08018f45 	.word	0x08018f45
 8018eac:	08018f39 	.word	0x08018f39
 8018eb0:	08018eb5 	.word	0x08018eb5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	7a5b      	ldrb	r3, [r3, #9]
 8018eb8:	2bf1      	cmp	r3, #241	; 0xf1
 8018eba:	d10a      	bne.n	8018ed2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018ebc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ec0:	f7ff fb20 	bl	8018504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018ec4:	f248 0005 	movw	r0, #32773	; 0x8005
 8018ec8:	f7ff fb3c 	bl	8018544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018ecc:	2302      	movs	r3, #2
 8018ece:	75bb      	strb	r3, [r7, #22]
 8018ed0:	e011      	b.n	8018ef6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	7a5b      	ldrb	r3, [r3, #9]
 8018ed6:	2bf2      	cmp	r3, #242	; 0xf2
 8018ed8:	d10a      	bne.n	8018ef0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018eda:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8018ede:	f7ff fb11 	bl	8018504 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018ee2:	f241 0021 	movw	r0, #4129	; 0x1021
 8018ee6:	f7ff fb2d 	bl	8018544 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018eea:	2306      	movs	r3, #6
 8018eec:	75bb      	strb	r3, [r7, #22]
 8018eee:	e002      	b.n	8018ef6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	7a5b      	ldrb	r3, [r3, #9]
 8018ef4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018ef6:	2309      	movs	r3, #9
 8018ef8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	885b      	ldrh	r3, [r3, #2]
 8018efe:	0a1b      	lsrs	r3, r3, #8
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	885b      	ldrh	r3, [r3, #2]
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	791b      	ldrb	r3, [r3, #4]
 8018f12:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	795b      	ldrb	r3, [r3, #5]
 8018f18:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	799b      	ldrb	r3, [r3, #6]
 8018f1e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	79db      	ldrb	r3, [r3, #7]
 8018f24:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	7a1b      	ldrb	r3, [r3, #8]
 8018f2a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018f2c:	7dbb      	ldrb	r3, [r7, #22]
 8018f2e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	7a9b      	ldrb	r3, [r3, #10]
 8018f34:	753b      	strb	r3, [r7, #20]
        break;
 8018f36:	e022      	b.n	8018f7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018f38:	2301      	movs	r3, #1
 8018f3a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	7b1b      	ldrb	r3, [r3, #12]
 8018f40:	733b      	strb	r3, [r7, #12]
        break;
 8018f42:	e01c      	b.n	8018f7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018f44:	2306      	movs	r3, #6
 8018f46:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	89db      	ldrh	r3, [r3, #14]
 8018f4c:	0a1b      	lsrs	r3, r3, #8
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	89db      	ldrh	r3, [r3, #14]
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	7c1a      	ldrb	r2, [r3, #16]
 8018f60:	4b0f      	ldr	r3, [pc, #60]	; (8018fa0 <SUBGRF_SetPacketParams+0x138>)
 8018f62:	4611      	mov	r1, r2
 8018f64:	7019      	strb	r1, [r3, #0]
 8018f66:	4613      	mov	r3, r2
 8018f68:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	7c5b      	ldrb	r3, [r3, #17]
 8018f6e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	7c9b      	ldrb	r3, [r3, #18]
 8018f74:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	7cdb      	ldrb	r3, [r3, #19]
 8018f7a:	747b      	strb	r3, [r7, #17]
        break;
 8018f7c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018f7e:	7dfb      	ldrb	r3, [r7, #23]
 8018f80:	b29a      	uxth	r2, r3
 8018f82:	f107 030c 	add.w	r3, r7, #12
 8018f86:	4619      	mov	r1, r3
 8018f88:	208c      	movs	r0, #140	; 0x8c
 8018f8a:	f000 f965 	bl	8019258 <SUBGRF_WriteCommand>
 8018f8e:	e000      	b.n	8018f92 <SUBGRF_SetPacketParams+0x12a>
        return;
 8018f90:	bf00      	nop
}
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	0801b584 	.word	0x0801b584
 8018f9c:	20000edd 	.word	0x20000edd
 8018fa0:	20000ede 	.word	0x20000ede

08018fa4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	4603      	mov	r3, r0
 8018fac:	460a      	mov	r2, r1
 8018fae:	71fb      	strb	r3, [r7, #7]
 8018fb0:	4613      	mov	r3, r2
 8018fb2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018fb4:	79fb      	ldrb	r3, [r7, #7]
 8018fb6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018fb8:	79bb      	ldrb	r3, [r7, #6]
 8018fba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018fbc:	f107 030c 	add.w	r3, r7, #12
 8018fc0:	2202      	movs	r2, #2
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	208f      	movs	r0, #143	; 0x8f
 8018fc6:	f000 f947 	bl	8019258 <SUBGRF_WriteCommand>
}
 8018fca:	bf00      	nop
 8018fcc:	3710      	adds	r7, #16
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}

08018fd2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018fd2:	b580      	push	{r7, lr}
 8018fd4:	b082      	sub	sp, #8
 8018fd6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018fdc:	1d3b      	adds	r3, r7, #4
 8018fde:	2201      	movs	r2, #1
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	2015      	movs	r0, #21
 8018fe4:	f000 f95a 	bl	801929c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018fe8:	793b      	ldrb	r3, [r7, #4]
 8018fea:	425b      	negs	r3, r3
 8018fec:	105b      	asrs	r3, r3, #1
 8018fee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3708      	adds	r7, #8
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}

08018ffc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b084      	sub	sp, #16
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
 8019004:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019006:	f107 030c 	add.w	r3, r7, #12
 801900a:	2202      	movs	r2, #2
 801900c:	4619      	mov	r1, r3
 801900e:	2013      	movs	r0, #19
 8019010:	f000 f944 	bl	801929c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019014:	f7ff fdec 	bl	8018bf0 <SUBGRF_GetPacketType>
 8019018:	4603      	mov	r3, r0
 801901a:	2b01      	cmp	r3, #1
 801901c:	d10d      	bne.n	801903a <SUBGRF_GetRxBufferStatus+0x3e>
 801901e:	4b0c      	ldr	r3, [pc, #48]	; (8019050 <SUBGRF_GetRxBufferStatus+0x54>)
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	b2db      	uxtb	r3, r3
 8019024:	2b01      	cmp	r3, #1
 8019026:	d108      	bne.n	801903a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019028:	f240 7002 	movw	r0, #1794	; 0x702
 801902c:	f000 f878 	bl	8019120 <SUBGRF_ReadRegister>
 8019030:	4603      	mov	r3, r0
 8019032:	461a      	mov	r2, r3
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	701a      	strb	r2, [r3, #0]
 8019038:	e002      	b.n	8019040 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801903a:	7b3a      	ldrb	r2, [r7, #12]
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019040:	7b7a      	ldrb	r2, [r7, #13]
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	701a      	strb	r2, [r3, #0]
}
 8019046:	bf00      	nop
 8019048:	3710      	adds	r7, #16
 801904a:	46bd      	mov	sp, r7
 801904c:	bd80      	pop	{r7, pc}
 801904e:	bf00      	nop
 8019050:	20000ede 	.word	0x20000ede

08019054 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801905c:	f107 030c 	add.w	r3, r7, #12
 8019060:	2203      	movs	r2, #3
 8019062:	4619      	mov	r1, r3
 8019064:	2014      	movs	r0, #20
 8019066:	f000 f919 	bl	801929c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801906a:	f7ff fdc1 	bl	8018bf0 <SUBGRF_GetPacketType>
 801906e:	4603      	mov	r3, r0
 8019070:	461a      	mov	r2, r3
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	781b      	ldrb	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d002      	beq.n	8019084 <SUBGRF_GetPacketStatus+0x30>
 801907e:	2b01      	cmp	r3, #1
 8019080:	d013      	beq.n	80190aa <SUBGRF_GetPacketStatus+0x56>
 8019082:	e02a      	b.n	80190da <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019084:	7b3a      	ldrb	r2, [r7, #12]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801908a:	7b7b      	ldrb	r3, [r7, #13]
 801908c:	425b      	negs	r3, r3
 801908e:	105b      	asrs	r3, r3, #1
 8019090:	b25a      	sxtb	r2, r3
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019096:	7bbb      	ldrb	r3, [r7, #14]
 8019098:	425b      	negs	r3, r3
 801909a:	105b      	asrs	r3, r3, #1
 801909c:	b25a      	sxtb	r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2200      	movs	r2, #0
 80190a6:	609a      	str	r2, [r3, #8]
            break;
 80190a8:	e020      	b.n	80190ec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80190aa:	7b3b      	ldrb	r3, [r7, #12]
 80190ac:	425b      	negs	r3, r3
 80190ae:	105b      	asrs	r3, r3, #1
 80190b0:	b25a      	sxtb	r2, r3
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80190b6:	7b7b      	ldrb	r3, [r7, #13]
 80190b8:	b25b      	sxtb	r3, r3
 80190ba:	3302      	adds	r3, #2
 80190bc:	109b      	asrs	r3, r3, #2
 80190be:	b25a      	sxtb	r2, r3
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80190c4:	7bbb      	ldrb	r3, [r7, #14]
 80190c6:	425b      	negs	r3, r3
 80190c8:	105b      	asrs	r3, r3, #1
 80190ca:	b25a      	sxtb	r2, r3
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80190d0:	4b08      	ldr	r3, [pc, #32]	; (80190f4 <SUBGRF_GetPacketStatus+0xa0>)
 80190d2:	681a      	ldr	r2, [r3, #0]
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	611a      	str	r2, [r3, #16]
            break;
 80190d8:	e008      	b.n	80190ec <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80190da:	2214      	movs	r2, #20
 80190dc:	2100      	movs	r1, #0
 80190de:	6878      	ldr	r0, [r7, #4]
 80190e0:	f000 fbbf 	bl	8019862 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	220f      	movs	r2, #15
 80190e8:	701a      	strb	r2, [r3, #0]
            break;
 80190ea:	bf00      	nop
    }
}
 80190ec:	bf00      	nop
 80190ee:	3710      	adds	r7, #16
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	20000ee0 	.word	0x20000ee0

080190f8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	4603      	mov	r3, r0
 8019100:	460a      	mov	r2, r1
 8019102:	80fb      	strh	r3, [r7, #6]
 8019104:	4613      	mov	r3, r2
 8019106:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019108:	1d7a      	adds	r2, r7, #5
 801910a:	88f9      	ldrh	r1, [r7, #6]
 801910c:	2301      	movs	r3, #1
 801910e:	4803      	ldr	r0, [pc, #12]	; (801911c <SUBGRF_WriteRegister+0x24>)
 8019110:	f7ee fb8c 	bl	800782c <HAL_SUBGHZ_WriteRegisters>
}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}
 801911c:	2000168c 	.word	0x2000168c

08019120 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b084      	sub	sp, #16
 8019124:	af00      	add	r7, sp, #0
 8019126:	4603      	mov	r3, r0
 8019128:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801912a:	f107 020f 	add.w	r2, r7, #15
 801912e:	88f9      	ldrh	r1, [r7, #6]
 8019130:	2301      	movs	r3, #1
 8019132:	4804      	ldr	r0, [pc, #16]	; (8019144 <SUBGRF_ReadRegister+0x24>)
 8019134:	f7ee fbd9 	bl	80078ea <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019138:	7bfb      	ldrb	r3, [r7, #15]
}
 801913a:	4618      	mov	r0, r3
 801913c:	3710      	adds	r7, #16
 801913e:	46bd      	mov	sp, r7
 8019140:	bd80      	pop	{r7, pc}
 8019142:	bf00      	nop
 8019144:	2000168c 	.word	0x2000168c

08019148 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b086      	sub	sp, #24
 801914c:	af00      	add	r7, sp, #0
 801914e:	4603      	mov	r3, r0
 8019150:	6039      	str	r1, [r7, #0]
 8019152:	80fb      	strh	r3, [r7, #6]
 8019154:	4613      	mov	r3, r2
 8019156:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019158:	f3ef 8310 	mrs	r3, PRIMASK
 801915c:	60fb      	str	r3, [r7, #12]
  return(result);
 801915e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019160:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019162:	b672      	cpsid	i
}
 8019164:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019166:	88bb      	ldrh	r3, [r7, #4]
 8019168:	88f9      	ldrh	r1, [r7, #6]
 801916a:	683a      	ldr	r2, [r7, #0]
 801916c:	4806      	ldr	r0, [pc, #24]	; (8019188 <SUBGRF_WriteRegisters+0x40>)
 801916e:	f7ee fb5d 	bl	800782c <HAL_SUBGHZ_WriteRegisters>
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019176:	693b      	ldr	r3, [r7, #16]
 8019178:	f383 8810 	msr	PRIMASK, r3
}
 801917c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801917e:	bf00      	nop
 8019180:	3718      	adds	r7, #24
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	2000168c 	.word	0x2000168c

0801918c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b086      	sub	sp, #24
 8019190:	af00      	add	r7, sp, #0
 8019192:	4603      	mov	r3, r0
 8019194:	6039      	str	r1, [r7, #0]
 8019196:	80fb      	strh	r3, [r7, #6]
 8019198:	4613      	mov	r3, r2
 801919a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801919c:	f3ef 8310 	mrs	r3, PRIMASK
 80191a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80191a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191a6:	b672      	cpsid	i
}
 80191a8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80191aa:	88bb      	ldrh	r3, [r7, #4]
 80191ac:	88f9      	ldrh	r1, [r7, #6]
 80191ae:	683a      	ldr	r2, [r7, #0]
 80191b0:	4806      	ldr	r0, [pc, #24]	; (80191cc <SUBGRF_ReadRegisters+0x40>)
 80191b2:	f7ee fb9a 	bl	80078ea <HAL_SUBGHZ_ReadRegisters>
 80191b6:	697b      	ldr	r3, [r7, #20]
 80191b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191ba:	693b      	ldr	r3, [r7, #16]
 80191bc:	f383 8810 	msr	PRIMASK, r3
}
 80191c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80191c2:	bf00      	nop
 80191c4:	3718      	adds	r7, #24
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}
 80191ca:	bf00      	nop
 80191cc:	2000168c 	.word	0x2000168c

080191d0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b086      	sub	sp, #24
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	4603      	mov	r3, r0
 80191d8:	6039      	str	r1, [r7, #0]
 80191da:	71fb      	strb	r3, [r7, #7]
 80191dc:	4613      	mov	r3, r2
 80191de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191e0:	f3ef 8310 	mrs	r3, PRIMASK
 80191e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80191e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80191e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80191ea:	b672      	cpsid	i
}
 80191ec:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80191ee:	79bb      	ldrb	r3, [r7, #6]
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	79f9      	ldrb	r1, [r7, #7]
 80191f4:	683a      	ldr	r2, [r7, #0]
 80191f6:	4806      	ldr	r0, [pc, #24]	; (8019210 <SUBGRF_WriteBuffer+0x40>)
 80191f8:	f7ee fc8b 	bl	8007b12 <HAL_SUBGHZ_WriteBuffer>
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019200:	693b      	ldr	r3, [r7, #16]
 8019202:	f383 8810 	msr	PRIMASK, r3
}
 8019206:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019208:	bf00      	nop
 801920a:	3718      	adds	r7, #24
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}
 8019210:	2000168c 	.word	0x2000168c

08019214 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b086      	sub	sp, #24
 8019218:	af00      	add	r7, sp, #0
 801921a:	4603      	mov	r3, r0
 801921c:	6039      	str	r1, [r7, #0]
 801921e:	71fb      	strb	r3, [r7, #7]
 8019220:	4613      	mov	r3, r2
 8019222:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019224:	f3ef 8310 	mrs	r3, PRIMASK
 8019228:	60fb      	str	r3, [r7, #12]
  return(result);
 801922a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801922c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801922e:	b672      	cpsid	i
}
 8019230:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019232:	79bb      	ldrb	r3, [r7, #6]
 8019234:	b29b      	uxth	r3, r3
 8019236:	79f9      	ldrb	r1, [r7, #7]
 8019238:	683a      	ldr	r2, [r7, #0]
 801923a:	4806      	ldr	r0, [pc, #24]	; (8019254 <SUBGRF_ReadBuffer+0x40>)
 801923c:	f7ee fcbc 	bl	8007bb8 <HAL_SUBGHZ_ReadBuffer>
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	f383 8810 	msr	PRIMASK, r3
}
 801924a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801924c:	bf00      	nop
 801924e:	3718      	adds	r7, #24
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	2000168c 	.word	0x2000168c

08019258 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b086      	sub	sp, #24
 801925c:	af00      	add	r7, sp, #0
 801925e:	4603      	mov	r3, r0
 8019260:	6039      	str	r1, [r7, #0]
 8019262:	71fb      	strb	r3, [r7, #7]
 8019264:	4613      	mov	r3, r2
 8019266:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019268:	f3ef 8310 	mrs	r3, PRIMASK
 801926c:	60fb      	str	r3, [r7, #12]
  return(result);
 801926e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019272:	b672      	cpsid	i
}
 8019274:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019276:	88bb      	ldrh	r3, [r7, #4]
 8019278:	79f9      	ldrb	r1, [r7, #7]
 801927a:	683a      	ldr	r2, [r7, #0]
 801927c:	4806      	ldr	r0, [pc, #24]	; (8019298 <SUBGRF_WriteCommand+0x40>)
 801927e:	f7ee fb95 	bl	80079ac <HAL_SUBGHZ_ExecSetCmd>
 8019282:	697b      	ldr	r3, [r7, #20]
 8019284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019286:	693b      	ldr	r3, [r7, #16]
 8019288:	f383 8810 	msr	PRIMASK, r3
}
 801928c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801928e:	bf00      	nop
 8019290:	3718      	adds	r7, #24
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	2000168c 	.word	0x2000168c

0801929c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b086      	sub	sp, #24
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	4603      	mov	r3, r0
 80192a4:	6039      	str	r1, [r7, #0]
 80192a6:	71fb      	strb	r3, [r7, #7]
 80192a8:	4613      	mov	r3, r2
 80192aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192ac:	f3ef 8310 	mrs	r3, PRIMASK
 80192b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80192b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80192b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192b6:	b672      	cpsid	i
}
 80192b8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80192ba:	88bb      	ldrh	r3, [r7, #4]
 80192bc:	79f9      	ldrb	r1, [r7, #7]
 80192be:	683a      	ldr	r2, [r7, #0]
 80192c0:	4806      	ldr	r0, [pc, #24]	; (80192dc <SUBGRF_ReadCommand+0x40>)
 80192c2:	f7ee fbd2 	bl	8007a6a <HAL_SUBGHZ_ExecGetCmd>
 80192c6:	697b      	ldr	r3, [r7, #20]
 80192c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192ca:	693b      	ldr	r3, [r7, #16]
 80192cc:	f383 8810 	msr	PRIMASK, r3
}
 80192d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192d2:	bf00      	nop
 80192d4:	3718      	adds	r7, #24
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}
 80192da:	bf00      	nop
 80192dc:	2000168c 	.word	0x2000168c

080192e0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b084      	sub	sp, #16
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	4603      	mov	r3, r0
 80192e8:	460a      	mov	r2, r1
 80192ea:	71fb      	strb	r3, [r7, #7]
 80192ec:	4613      	mov	r3, r2
 80192ee:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80192f0:	2301      	movs	r3, #1
 80192f2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80192f4:	79bb      	ldrb	r3, [r7, #6]
 80192f6:	2b01      	cmp	r3, #1
 80192f8:	d10d      	bne.n	8019316 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80192fa:	79fb      	ldrb	r3, [r7, #7]
 80192fc:	2b01      	cmp	r3, #1
 80192fe:	d104      	bne.n	801930a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019300:	2302      	movs	r3, #2
 8019302:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019304:	2004      	movs	r0, #4
 8019306:	f000 f8df 	bl	80194c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801930a:	79fb      	ldrb	r3, [r7, #7]
 801930c:	2b02      	cmp	r3, #2
 801930e:	d107      	bne.n	8019320 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019310:	2303      	movs	r3, #3
 8019312:	73fb      	strb	r3, [r7, #15]
 8019314:	e004      	b.n	8019320 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019316:	79bb      	ldrb	r3, [r7, #6]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d101      	bne.n	8019320 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801931c:	2301      	movs	r3, #1
 801931e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019320:	7bfb      	ldrb	r3, [r7, #15]
 8019322:	4618      	mov	r0, r3
 8019324:	f7f1 fb61 	bl	800a9ea <RBI_ConfigRFSwitch>
}
 8019328:	bf00      	nop
 801932a:	3710      	adds	r7, #16
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}

08019330 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	4603      	mov	r3, r0
 8019338:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801933a:	2301      	movs	r3, #1
 801933c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801933e:	f7f1 fb62 	bl	800aa06 <RBI_GetTxConfig>
 8019342:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	2b02      	cmp	r3, #2
 8019348:	d016      	beq.n	8019378 <SUBGRF_SetRfTxPower+0x48>
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	2b02      	cmp	r3, #2
 801934e:	dc16      	bgt.n	801937e <SUBGRF_SetRfTxPower+0x4e>
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d003      	beq.n	801935e <SUBGRF_SetRfTxPower+0x2e>
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	2b01      	cmp	r3, #1
 801935a:	d00a      	beq.n	8019372 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801935c:	e00f      	b.n	801937e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801935e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019362:	2b0f      	cmp	r3, #15
 8019364:	dd02      	ble.n	801936c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019366:	2302      	movs	r3, #2
 8019368:	73fb      	strb	r3, [r7, #15]
            break;
 801936a:	e009      	b.n	8019380 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801936c:	2301      	movs	r3, #1
 801936e:	73fb      	strb	r3, [r7, #15]
            break;
 8019370:	e006      	b.n	8019380 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019372:	2301      	movs	r3, #1
 8019374:	73fb      	strb	r3, [r7, #15]
            break;
 8019376:	e003      	b.n	8019380 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019378:	2302      	movs	r3, #2
 801937a:	73fb      	strb	r3, [r7, #15]
            break;
 801937c:	e000      	b.n	8019380 <SUBGRF_SetRfTxPower+0x50>
            break;
 801937e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019380:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019384:	7bfb      	ldrb	r3, [r7, #15]
 8019386:	2202      	movs	r2, #2
 8019388:	4618      	mov	r0, r3
 801938a:	f7ff fc3b 	bl	8018c04 <SUBGRF_SetTxParams>

    return paSelect;
 801938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019390:	4618      	mov	r0, r3
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}

08019398 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019398:	b480      	push	{r7}
 801939a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801939c:	2301      	movs	r3, #1
}
 801939e:	4618      	mov	r0, r3
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bc80      	pop	{r7}
 80193a4:	4770      	bx	lr
	...

080193a8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80193b0:	4b03      	ldr	r3, [pc, #12]	; (80193c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	2001      	movs	r0, #1
 80193b6:	4798      	blx	r3
}
 80193b8:	bf00      	nop
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}
 80193c0:	20000ee8 	.word	0x20000ee8

080193c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80193cc:	4b03      	ldr	r3, [pc, #12]	; (80193dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2002      	movs	r0, #2
 80193d2:	4798      	blx	r3
}
 80193d4:	bf00      	nop
 80193d6:	3708      	adds	r7, #8
 80193d8:	46bd      	mov	sp, r7
 80193da:	bd80      	pop	{r7, pc}
 80193dc:	20000ee8 	.word	0x20000ee8

080193e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b082      	sub	sp, #8
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80193e8:	4b03      	ldr	r3, [pc, #12]	; (80193f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	2040      	movs	r0, #64	; 0x40
 80193ee:	4798      	blx	r3
}
 80193f0:	bf00      	nop
 80193f2:	3708      	adds	r7, #8
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}
 80193f8:	20000ee8 	.word	0x20000ee8

080193fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b082      	sub	sp, #8
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	460b      	mov	r3, r1
 8019406:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019408:	78fb      	ldrb	r3, [r7, #3]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d002      	beq.n	8019414 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801940e:	2b01      	cmp	r3, #1
 8019410:	d005      	beq.n	801941e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019412:	e00a      	b.n	801942a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019414:	4b07      	ldr	r3, [pc, #28]	; (8019434 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2080      	movs	r0, #128	; 0x80
 801941a:	4798      	blx	r3
            break;
 801941c:	e005      	b.n	801942a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801941e:	4b05      	ldr	r3, [pc, #20]	; (8019434 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019426:	4798      	blx	r3
            break;
 8019428:	bf00      	nop
    }
}
 801942a:	bf00      	nop
 801942c:	3708      	adds	r7, #8
 801942e:	46bd      	mov	sp, r7
 8019430:	bd80      	pop	{r7, pc}
 8019432:	bf00      	nop
 8019434:	20000ee8 	.word	0x20000ee8

08019438 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b082      	sub	sp, #8
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019440:	4b04      	ldr	r3, [pc, #16]	; (8019454 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	f44f 7000 	mov.w	r0, #512	; 0x200
 8019448:	4798      	blx	r3
}
 801944a:	bf00      	nop
 801944c:	3708      	adds	r7, #8
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	20000ee8 	.word	0x20000ee8

08019458 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019460:	4b03      	ldr	r3, [pc, #12]	; (8019470 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	2020      	movs	r0, #32
 8019466:	4798      	blx	r3
}
 8019468:	bf00      	nop
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}
 8019470:	20000ee8 	.word	0x20000ee8

08019474 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b082      	sub	sp, #8
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801947c:	4b03      	ldr	r3, [pc, #12]	; (801948c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2004      	movs	r0, #4
 8019482:	4798      	blx	r3
}
 8019484:	bf00      	nop
 8019486:	3708      	adds	r7, #8
 8019488:	46bd      	mov	sp, r7
 801948a:	bd80      	pop	{r7, pc}
 801948c:	20000ee8 	.word	0x20000ee8

08019490 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019498:	4b03      	ldr	r3, [pc, #12]	; (80194a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2008      	movs	r0, #8
 801949e:	4798      	blx	r3
}
 80194a0:	bf00      	nop
 80194a2:	3708      	adds	r7, #8
 80194a4:	46bd      	mov	sp, r7
 80194a6:	bd80      	pop	{r7, pc}
 80194a8:	20000ee8 	.word	0x20000ee8

080194ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b082      	sub	sp, #8
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80194b4:	4b03      	ldr	r3, [pc, #12]	; (80194c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	2010      	movs	r0, #16
 80194ba:	4798      	blx	r3
}
 80194bc:	bf00      	nop
 80194be:	3708      	adds	r7, #8
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	20000ee8 	.word	0x20000ee8

080194c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80194c8:	b580      	push	{r7, lr}
 80194ca:	b084      	sub	sp, #16
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	4603      	mov	r3, r0
 80194d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80194d2:	f7f1 faa6 	bl	800aa22 <RBI_IsDCDC>
 80194d6:	4603      	mov	r3, r0
 80194d8:	2b01      	cmp	r3, #1
 80194da:	d112      	bne.n	8019502 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80194dc:	f640 1023 	movw	r0, #2339	; 0x923
 80194e0:	f7ff fe1e 	bl	8019120 <SUBGRF_ReadRegister>
 80194e4:	4603      	mov	r3, r0
 80194e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80194e8:	7bfb      	ldrb	r3, [r7, #15]
 80194ea:	f023 0306 	bic.w	r3, r3, #6
 80194ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80194f0:	7bfa      	ldrb	r2, [r7, #15]
 80194f2:	79fb      	ldrb	r3, [r7, #7]
 80194f4:	4313      	orrs	r3, r2
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	4619      	mov	r1, r3
 80194fa:	f640 1023 	movw	r0, #2339	; 0x923
 80194fe:	f7ff fdfb 	bl	80190f8 <SUBGRF_WriteRegister>
  }
}
 8019502:	bf00      	nop
 8019504:	3710      	adds	r7, #16
 8019506:	46bd      	mov	sp, r7
 8019508:	bd80      	pop	{r7, pc}
	...

0801950c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801950c:	b480      	push	{r7}
 801950e:	b085      	sub	sp, #20
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d101      	bne.n	801951e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801951a:	231f      	movs	r3, #31
 801951c:	e016      	b.n	801954c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801951e:	2300      	movs	r3, #0
 8019520:	73fb      	strb	r3, [r7, #15]
 8019522:	e00f      	b.n	8019544 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019524:	7bfb      	ldrb	r3, [r7, #15]
 8019526:	4a0c      	ldr	r2, [pc, #48]	; (8019558 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801952c:	687a      	ldr	r2, [r7, #4]
 801952e:	429a      	cmp	r2, r3
 8019530:	d205      	bcs.n	801953e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019532:	7bfb      	ldrb	r3, [r7, #15]
 8019534:	4a08      	ldr	r2, [pc, #32]	; (8019558 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019536:	00db      	lsls	r3, r3, #3
 8019538:	4413      	add	r3, r2
 801953a:	791b      	ldrb	r3, [r3, #4]
 801953c:	e006      	b.n	801954c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801953e:	7bfb      	ldrb	r3, [r7, #15]
 8019540:	3301      	adds	r3, #1
 8019542:	73fb      	strb	r3, [r7, #15]
 8019544:	7bfb      	ldrb	r3, [r7, #15]
 8019546:	2b15      	cmp	r3, #21
 8019548:	d9ec      	bls.n	8019524 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801954a:	e7fe      	b.n	801954a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801954c:	4618      	mov	r0, r3
 801954e:	3714      	adds	r7, #20
 8019550:	46bd      	mov	sp, r7
 8019552:	bc80      	pop	{r7}
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	0801baf0 	.word	0x0801baf0

0801955c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b08a      	sub	sp, #40	; 0x28
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019566:	4b36      	ldr	r3, [pc, #216]	; (8019640 <SUBGRF_GetCFO+0xe4>)
 8019568:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801956a:	f640 0007 	movw	r0, #2055	; 0x807
 801956e:	f7ff fdd7 	bl	8019120 <SUBGRF_ReadRegister>
 8019572:	4603      	mov	r3, r0
 8019574:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019576:	7ffb      	ldrb	r3, [r7, #31]
 8019578:	08db      	lsrs	r3, r3, #3
 801957a:	b2db      	uxtb	r3, r3
 801957c:	f003 0303 	and.w	r3, r3, #3
 8019580:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019584:	4413      	add	r3, r2
 8019586:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801958a:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801958c:	7ffb      	ldrb	r3, [r7, #31]
 801958e:	f003 0307 	and.w	r3, r3, #7
 8019592:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019594:	7fba      	ldrb	r2, [r7, #30]
 8019596:	7f7b      	ldrb	r3, [r7, #29]
 8019598:	3b01      	subs	r3, #1
 801959a:	fa02 f303 	lsl.w	r3, r2, r3
 801959e:	461a      	mov	r2, r3
 80195a0:	4b28      	ldr	r3, [pc, #160]	; (8019644 <SUBGRF_GetCFO+0xe8>)
 80195a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80195a6:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80195a8:	69ba      	ldr	r2, [r7, #24]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80195b0:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80195b2:	2301      	movs	r3, #1
 80195b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80195b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195bc:	697a      	ldr	r2, [r7, #20]
 80195be:	fb02 f303 	mul.w	r3, r2, r3
 80195c2:	2b07      	cmp	r3, #7
 80195c4:	d802      	bhi.n	80195cc <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 80195c6:	2302      	movs	r3, #2
 80195c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 80195cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195d0:	697a      	ldr	r2, [r7, #20]
 80195d2:	fb02 f303 	mul.w	r3, r2, r3
 80195d6:	2b03      	cmp	r3, #3
 80195d8:	d802      	bhi.n	80195e0 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 80195da:	2304      	movs	r3, #4
 80195dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80195e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80195e4:	69bb      	ldr	r3, [r7, #24]
 80195e6:	fb02 f303 	mul.w	r3, r2, r3
 80195ea:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 80195ec:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80195f0:	f7ff fd96 	bl	8019120 <SUBGRF_ReadRegister>
 80195f4:	4603      	mov	r3, r0
 80195f6:	021b      	lsls	r3, r3, #8
 80195f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80195fc:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 80195fe:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8019602:	f7ff fd8d 	bl	8019120 <SUBGRF_ReadRegister>
 8019606:	4603      	mov	r3, r0
 8019608:	461a      	mov	r2, r3
 801960a:	6a3b      	ldr	r3, [r7, #32]
 801960c:	4313      	orrs	r3, r2
 801960e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019610:	6a3b      	ldr	r3, [r7, #32]
 8019612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019616:	2b00      	cmp	r3, #0
 8019618:	d005      	beq.n	8019626 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 801961a:	6a3b      	ldr	r3, [r7, #32]
 801961c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019620:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019624:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	095b      	lsrs	r3, r3, #5
 801962a:	6a3a      	ldr	r2, [r7, #32]
 801962c:	fb02 f303 	mul.w	r3, r2, r3
 8019630:	11da      	asrs	r2, r3, #7
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	601a      	str	r2, [r3, #0]
}
 8019636:	bf00      	nop
 8019638:	3728      	adds	r7, #40	; 0x28
 801963a:	46bd      	mov	sp, r7
 801963c:	bd80      	pop	{r7, pc}
 801963e:	bf00      	nop
 8019640:	0c0a0804 	.word	0x0c0a0804
 8019644:	01e84800 	.word	0x01e84800

08019648 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019648:	b480      	push	{r7}
 801964a:	b087      	sub	sp, #28
 801964c:	af00      	add	r7, sp, #0
 801964e:	4603      	mov	r3, r0
 8019650:	60b9      	str	r1, [r7, #8]
 8019652:	607a      	str	r2, [r7, #4]
 8019654:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019656:	2300      	movs	r3, #0
 8019658:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801965a:	f04f 33ff 	mov.w	r3, #4294967295
 801965e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019660:	697b      	ldr	r3, [r7, #20]
}
 8019662:	4618      	mov	r0, r3
 8019664:	371c      	adds	r7, #28
 8019666:	46bd      	mov	sp, r7
 8019668:	bc80      	pop	{r7}
 801966a:	4770      	bx	lr

0801966c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801966c:	b480      	push	{r7}
 801966e:	b087      	sub	sp, #28
 8019670:	af00      	add	r7, sp, #0
 8019672:	4603      	mov	r3, r0
 8019674:	60b9      	str	r1, [r7, #8]
 8019676:	607a      	str	r2, [r7, #4]
 8019678:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801967a:	2300      	movs	r3, #0
 801967c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801967e:	f04f 33ff 	mov.w	r3, #4294967295
 8019682:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019684:	697b      	ldr	r3, [r7, #20]
}
 8019686:	4618      	mov	r0, r3
 8019688:	371c      	adds	r7, #28
 801968a:	46bd      	mov	sp, r7
 801968c:	bc80      	pop	{r7}
 801968e:	4770      	bx	lr

08019690 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019690:	b480      	push	{r7}
 8019692:	b085      	sub	sp, #20
 8019694:	af00      	add	r7, sp, #0
 8019696:	60f8      	str	r0, [r7, #12]
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801969c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3714      	adds	r7, #20
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bc80      	pop	{r7}
 80196a8:	4770      	bx	lr

080196aa <RFW_DeInit>:

void RFW_DeInit( void)
{
 80196aa:	b480      	push	{r7}
 80196ac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80196ae:	bf00      	nop
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bc80      	pop	{r7}
 80196b4:	4770      	bx	lr

080196b6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 80196b6:	b480      	push	{r7}
 80196b8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 80196ba:	2300      	movs	r3, #0
#endif
}
 80196bc:	4618      	mov	r0, r3
 80196be:	46bd      	mov	sp, r7
 80196c0:	bc80      	pop	{r7}
 80196c2:	4770      	bx	lr

080196c4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 80196c4:	b480      	push	{r7}
 80196c6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 80196c8:	2300      	movs	r3, #0
#endif
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bc80      	pop	{r7}
 80196d0:	4770      	bx	lr

080196d2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 80196d2:	b480      	push	{r7}
 80196d4:	b083      	sub	sp, #12
 80196d6:	af00      	add	r7, sp, #0
 80196d8:	4603      	mov	r3, r0
 80196da:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80196dc:	bf00      	nop
 80196de:	370c      	adds	r7, #12
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bc80      	pop	{r7}
 80196e4:	4770      	bx	lr

080196e6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 80196e6:	b480      	push	{r7}
 80196e8:	b087      	sub	sp, #28
 80196ea:	af00      	add	r7, sp, #0
 80196ec:	60f8      	str	r0, [r7, #12]
 80196ee:	460b      	mov	r3, r1
 80196f0:	607a      	str	r2, [r7, #4]
 80196f2:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 80196f4:	f04f 33ff 	mov.w	r3, #4294967295
 80196f8:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 80196fa:	697b      	ldr	r3, [r7, #20]
}
 80196fc:	4618      	mov	r0, r3
 80196fe:	371c      	adds	r7, #28
 8019700:	46bd      	mov	sp, r7
 8019702:	bc80      	pop	{r7}
 8019704:	4770      	bx	lr

08019706 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019706:	b480      	push	{r7}
 8019708:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801970a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801970e:	4618      	mov	r0, r3
 8019710:	46bd      	mov	sp, r7
 8019712:	bc80      	pop	{r7}
 8019714:	4770      	bx	lr

08019716 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019716:	b480      	push	{r7}
 8019718:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801971a:	bf00      	nop
 801971c:	46bd      	mov	sp, r7
 801971e:	bc80      	pop	{r7}
 8019720:	4770      	bx	lr

08019722 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019722:	b480      	push	{r7}
 8019724:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019726:	bf00      	nop
 8019728:	46bd      	mov	sp, r7
 801972a:	bc80      	pop	{r7}
 801972c:	4770      	bx	lr

0801972e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801972e:	b480      	push	{r7}
 8019730:	b083      	sub	sp, #12
 8019732:	af00      	add	r7, sp, #0
 8019734:	4603      	mov	r3, r0
 8019736:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019738:	bf00      	nop
 801973a:	370c      	adds	r7, #12
 801973c:	46bd      	mov	sp, r7
 801973e:	bc80      	pop	{r7}
 8019740:	4770      	bx	lr
	...

08019744 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019744:	b480      	push	{r7}
 8019746:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019748:	4b04      	ldr	r3, [pc, #16]	; (801975c <UTIL_LPM_Init+0x18>)
 801974a:	2200      	movs	r2, #0
 801974c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801974e:	4b04      	ldr	r3, [pc, #16]	; (8019760 <UTIL_LPM_Init+0x1c>)
 8019750:	2200      	movs	r2, #0
 8019752:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019754:	bf00      	nop
 8019756:	46bd      	mov	sp, r7
 8019758:	bc80      	pop	{r7}
 801975a:	4770      	bx	lr
 801975c:	20000eec 	.word	0x20000eec
 8019760:	20000ef0 	.word	0x20000ef0

08019764 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019764:	b480      	push	{r7}
 8019766:	b087      	sub	sp, #28
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	460b      	mov	r3, r1
 801976e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019770:	f3ef 8310 	mrs	r3, PRIMASK
 8019774:	613b      	str	r3, [r7, #16]
  return(result);
 8019776:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801977a:	b672      	cpsid	i
}
 801977c:	bf00      	nop
  
  switch( state )
 801977e:	78fb      	ldrb	r3, [r7, #3]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d008      	beq.n	8019796 <UTIL_LPM_SetStopMode+0x32>
 8019784:	2b01      	cmp	r3, #1
 8019786:	d10e      	bne.n	80197a6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019788:	4b0d      	ldr	r3, [pc, #52]	; (80197c0 <UTIL_LPM_SetStopMode+0x5c>)
 801978a:	681a      	ldr	r2, [r3, #0]
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	4313      	orrs	r3, r2
 8019790:	4a0b      	ldr	r2, [pc, #44]	; (80197c0 <UTIL_LPM_SetStopMode+0x5c>)
 8019792:	6013      	str	r3, [r2, #0]
      break;
 8019794:	e008      	b.n	80197a8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	43da      	mvns	r2, r3
 801979a:	4b09      	ldr	r3, [pc, #36]	; (80197c0 <UTIL_LPM_SetStopMode+0x5c>)
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	4013      	ands	r3, r2
 80197a0:	4a07      	ldr	r2, [pc, #28]	; (80197c0 <UTIL_LPM_SetStopMode+0x5c>)
 80197a2:	6013      	str	r3, [r2, #0]
      break;
 80197a4:	e000      	b.n	80197a8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80197a6:	bf00      	nop
 80197a8:	697b      	ldr	r3, [r7, #20]
 80197aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	f383 8810 	msr	PRIMASK, r3
}
 80197b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80197b4:	bf00      	nop
 80197b6:	371c      	adds	r7, #28
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bc80      	pop	{r7}
 80197bc:	4770      	bx	lr
 80197be:	bf00      	nop
 80197c0:	20000eec 	.word	0x20000eec

080197c4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80197c4:	b480      	push	{r7}
 80197c6:	b087      	sub	sp, #28
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	6078      	str	r0, [r7, #4]
 80197cc:	460b      	mov	r3, r1
 80197ce:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197d0:	f3ef 8310 	mrs	r3, PRIMASK
 80197d4:	613b      	str	r3, [r7, #16]
  return(result);
 80197d6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80197d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197da:	b672      	cpsid	i
}
 80197dc:	bf00      	nop
  
  switch(state)
 80197de:	78fb      	ldrb	r3, [r7, #3]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d008      	beq.n	80197f6 <UTIL_LPM_SetOffMode+0x32>
 80197e4:	2b01      	cmp	r3, #1
 80197e6:	d10e      	bne.n	8019806 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80197e8:	4b0d      	ldr	r3, [pc, #52]	; (8019820 <UTIL_LPM_SetOffMode+0x5c>)
 80197ea:	681a      	ldr	r2, [r3, #0]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	4313      	orrs	r3, r2
 80197f0:	4a0b      	ldr	r2, [pc, #44]	; (8019820 <UTIL_LPM_SetOffMode+0x5c>)
 80197f2:	6013      	str	r3, [r2, #0]
      break;
 80197f4:	e008      	b.n	8019808 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	43da      	mvns	r2, r3
 80197fa:	4b09      	ldr	r3, [pc, #36]	; (8019820 <UTIL_LPM_SetOffMode+0x5c>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	4013      	ands	r3, r2
 8019800:	4a07      	ldr	r2, [pc, #28]	; (8019820 <UTIL_LPM_SetOffMode+0x5c>)
 8019802:	6013      	str	r3, [r2, #0]
      break;
 8019804:	e000      	b.n	8019808 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019806:	bf00      	nop
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	f383 8810 	msr	PRIMASK, r3
}
 8019812:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019814:	bf00      	nop
 8019816:	371c      	adds	r7, #28
 8019818:	46bd      	mov	sp, r7
 801981a:	bc80      	pop	{r7}
 801981c:	4770      	bx	lr
 801981e:	bf00      	nop
 8019820:	20000ef0 	.word	0x20000ef0

08019824 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019824:	b480      	push	{r7}
 8019826:	b087      	sub	sp, #28
 8019828:	af00      	add	r7, sp, #0
 801982a:	60f8      	str	r0, [r7, #12]
 801982c:	60b9      	str	r1, [r7, #8]
 801982e:	4613      	mov	r3, r2
 8019830:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019836:	68bb      	ldr	r3, [r7, #8]
 8019838:	613b      	str	r3, [r7, #16]

  while( size-- )
 801983a:	e007      	b.n	801984c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801983c:	693a      	ldr	r2, [r7, #16]
 801983e:	1c53      	adds	r3, r2, #1
 8019840:	613b      	str	r3, [r7, #16]
 8019842:	697b      	ldr	r3, [r7, #20]
 8019844:	1c59      	adds	r1, r3, #1
 8019846:	6179      	str	r1, [r7, #20]
 8019848:	7812      	ldrb	r2, [r2, #0]
 801984a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801984c:	88fb      	ldrh	r3, [r7, #6]
 801984e:	1e5a      	subs	r2, r3, #1
 8019850:	80fa      	strh	r2, [r7, #6]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d1f2      	bne.n	801983c <UTIL_MEM_cpy_8+0x18>
    }
}
 8019856:	bf00      	nop
 8019858:	bf00      	nop
 801985a:	371c      	adds	r7, #28
 801985c:	46bd      	mov	sp, r7
 801985e:	bc80      	pop	{r7}
 8019860:	4770      	bx	lr

08019862 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019862:	b480      	push	{r7}
 8019864:	b085      	sub	sp, #20
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
 801986a:	460b      	mov	r3, r1
 801986c:	70fb      	strb	r3, [r7, #3]
 801986e:	4613      	mov	r3, r2
 8019870:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019876:	e004      	b.n	8019882 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	1c5a      	adds	r2, r3, #1
 801987c:	60fa      	str	r2, [r7, #12]
 801987e:	78fa      	ldrb	r2, [r7, #3]
 8019880:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019882:	883b      	ldrh	r3, [r7, #0]
 8019884:	1e5a      	subs	r2, r3, #1
 8019886:	803a      	strh	r2, [r7, #0]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d1f5      	bne.n	8019878 <UTIL_MEM_set_8+0x16>
  }
}
 801988c:	bf00      	nop
 801988e:	bf00      	nop
 8019890:	3714      	adds	r7, #20
 8019892:	46bd      	mov	sp, r7
 8019894:	bc80      	pop	{r7}
 8019896:	4770      	bx	lr

08019898 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019898:	b082      	sub	sp, #8
 801989a:	b480      	push	{r7}
 801989c:	b087      	sub	sp, #28
 801989e:	af00      	add	r7, sp, #0
 80198a0:	60f8      	str	r0, [r7, #12]
 80198a2:	1d38      	adds	r0, r7, #4
 80198a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80198a8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80198aa:	2300      	movs	r3, #0
 80198ac:	613b      	str	r3, [r7, #16]
 80198ae:	2300      	movs	r3, #0
 80198b0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b6:	4413      	add	r3, r2
 80198b8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80198ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80198be:	b29a      	uxth	r2, r3
 80198c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	4413      	add	r3, r2
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	b21b      	sxth	r3, r3
 80198cc:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 80198ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80198d6:	db0a      	blt.n	80198ee <SysTimeAdd+0x56>
  {
    c.Seconds++;
 80198d8:	693b      	ldr	r3, [r7, #16]
 80198da:	3301      	adds	r3, #1
 80198dc:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 80198de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80198e2:	b29b      	uxth	r3, r3
 80198e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	b21b      	sxth	r3, r3
 80198ec:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	461a      	mov	r2, r3
 80198f2:	f107 0310 	add.w	r3, r7, #16
 80198f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80198fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80198fe:	68f8      	ldr	r0, [r7, #12]
 8019900:	371c      	adds	r7, #28
 8019902:	46bd      	mov	sp, r7
 8019904:	bc80      	pop	{r7}
 8019906:	b002      	add	sp, #8
 8019908:	4770      	bx	lr

0801990a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801990a:	b082      	sub	sp, #8
 801990c:	b480      	push	{r7}
 801990e:	b087      	sub	sp, #28
 8019910:	af00      	add	r7, sp, #0
 8019912:	60f8      	str	r0, [r7, #12]
 8019914:	1d38      	adds	r0, r7, #4
 8019916:	e880 0006 	stmia.w	r0, {r1, r2}
 801991a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801991c:	2300      	movs	r3, #0
 801991e:	613b      	str	r3, [r7, #16]
 8019920:	2300      	movs	r3, #0
 8019922:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019928:	1ad3      	subs	r3, r2, r3
 801992a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801992c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019930:	b29a      	uxth	r2, r3
 8019932:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8019936:	b29b      	uxth	r3, r3
 8019938:	1ad3      	subs	r3, r2, r3
 801993a:	b29b      	uxth	r3, r3
 801993c:	b21b      	sxth	r3, r3
 801993e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019940:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019944:	2b00      	cmp	r3, #0
 8019946:	da0a      	bge.n	801995e <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019948:	693b      	ldr	r3, [r7, #16]
 801994a:	3b01      	subs	r3, #1
 801994c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801994e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019952:	b29b      	uxth	r3, r3
 8019954:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8019958:	b29b      	uxth	r3, r3
 801995a:	b21b      	sxth	r3, r3
 801995c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	461a      	mov	r2, r3
 8019962:	f107 0310 	add.w	r3, r7, #16
 8019966:	e893 0003 	ldmia.w	r3, {r0, r1}
 801996a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801996e:	68f8      	ldr	r0, [r7, #12]
 8019970:	371c      	adds	r7, #28
 8019972:	46bd      	mov	sp, r7
 8019974:	bc80      	pop	{r7}
 8019976:	b002      	add	sp, #8
 8019978:	4770      	bx	lr
	...

0801997c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b088      	sub	sp, #32
 8019980:	af02      	add	r7, sp, #8
 8019982:	463b      	mov	r3, r7
 8019984:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019988:	2300      	movs	r3, #0
 801998a:	60bb      	str	r3, [r7, #8]
 801998c:	2300      	movs	r3, #0
 801998e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019990:	4b10      	ldr	r3, [pc, #64]	; (80199d4 <SysTimeSet+0x58>)
 8019992:	691b      	ldr	r3, [r3, #16]
 8019994:	f107 0208 	add.w	r2, r7, #8
 8019998:	3204      	adds	r2, #4
 801999a:	4610      	mov	r0, r2
 801999c:	4798      	blx	r3
 801999e:	4603      	mov	r3, r0
 80199a0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80199a2:	f107 0010 	add.w	r0, r7, #16
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	9300      	str	r3, [sp, #0]
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	463a      	mov	r2, r7
 80199ae:	ca06      	ldmia	r2, {r1, r2}
 80199b0:	f7ff ffab 	bl	801990a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80199b4:	4b07      	ldr	r3, [pc, #28]	; (80199d4 <SysTimeSet+0x58>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	693a      	ldr	r2, [r7, #16]
 80199ba:	4610      	mov	r0, r2
 80199bc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80199be:	4b05      	ldr	r3, [pc, #20]	; (80199d4 <SysTimeSet+0x58>)
 80199c0:	689b      	ldr	r3, [r3, #8]
 80199c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80199c6:	4610      	mov	r0, r2
 80199c8:	4798      	blx	r3
}
 80199ca:	bf00      	nop
 80199cc:	3718      	adds	r7, #24
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	0801b6b4 	.word	0x0801b6b4

080199d8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b08a      	sub	sp, #40	; 0x28
 80199dc:	af02      	add	r7, sp, #8
 80199de:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80199e0:	2300      	movs	r3, #0
 80199e2:	61bb      	str	r3, [r7, #24]
 80199e4:	2300      	movs	r3, #0
 80199e6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80199e8:	2300      	movs	r3, #0
 80199ea:	613b      	str	r3, [r7, #16]
 80199ec:	2300      	movs	r3, #0
 80199ee:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80199f0:	4b14      	ldr	r3, [pc, #80]	; (8019a44 <SysTimeGet+0x6c>)
 80199f2:	691b      	ldr	r3, [r3, #16]
 80199f4:	f107 0218 	add.w	r2, r7, #24
 80199f8:	3204      	adds	r2, #4
 80199fa:	4610      	mov	r0, r2
 80199fc:	4798      	blx	r3
 80199fe:	4603      	mov	r3, r0
 8019a00:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a02:	4b10      	ldr	r3, [pc, #64]	; (8019a44 <SysTimeGet+0x6c>)
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	4798      	blx	r3
 8019a08:	4603      	mov	r3, r0
 8019a0a:	b21b      	sxth	r3, r3
 8019a0c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019a0e:	4b0d      	ldr	r3, [pc, #52]	; (8019a44 <SysTimeGet+0x6c>)
 8019a10:	685b      	ldr	r3, [r3, #4]
 8019a12:	4798      	blx	r3
 8019a14:	4603      	mov	r3, r0
 8019a16:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019a18:	f107 0010 	add.w	r0, r7, #16
 8019a1c:	69fb      	ldr	r3, [r7, #28]
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	f107 0208 	add.w	r2, r7, #8
 8019a26:	ca06      	ldmia	r2, {r1, r2}
 8019a28:	f7ff ff36 	bl	8019898 <SysTimeAdd>

  return sysTime;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	461a      	mov	r2, r3
 8019a30:	f107 0310 	add.w	r3, r7, #16
 8019a34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a38:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a3c:	6878      	ldr	r0, [r7, #4]
 8019a3e:	3720      	adds	r7, #32
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}
 8019a44:	0801b6b4 	.word	0x0801b6b4

08019a48 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019a50:	2300      	movs	r3, #0
 8019a52:	60bb      	str	r3, [r7, #8]
 8019a54:	2300      	movs	r3, #0
 8019a56:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019a58:	4b0a      	ldr	r3, [pc, #40]	; (8019a84 <SysTimeGetMcuTime+0x3c>)
 8019a5a:	691b      	ldr	r3, [r3, #16]
 8019a5c:	f107 0208 	add.w	r2, r7, #8
 8019a60:	3204      	adds	r2, #4
 8019a62:	4610      	mov	r0, r2
 8019a64:	4798      	blx	r3
 8019a66:	4603      	mov	r3, r0
 8019a68:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	f107 0308 	add.w	r3, r7, #8
 8019a72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019a76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	3710      	adds	r7, #16
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}
 8019a82:	bf00      	nop
 8019a84:	0801b6b4 	.word	0x0801b6b4

08019a88 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b088      	sub	sp, #32
 8019a8c:	af02      	add	r7, sp, #8
 8019a8e:	463b      	mov	r3, r7
 8019a90:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019a94:	4b0f      	ldr	r3, [pc, #60]	; (8019ad4 <SysTimeToMs+0x4c>)
 8019a96:	68db      	ldr	r3, [r3, #12]
 8019a98:	4798      	blx	r3
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	b21b      	sxth	r3, r3
 8019a9e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019aa0:	4b0c      	ldr	r3, [pc, #48]	; (8019ad4 <SysTimeToMs+0x4c>)
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	4798      	blx	r3
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019aaa:	f107 0008 	add.w	r0, r7, #8
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	9300      	str	r3, [sp, #0]
 8019ab2:	693b      	ldr	r3, [r7, #16]
 8019ab4:	463a      	mov	r2, r7
 8019ab6:	ca06      	ldmia	r2, {r1, r2}
 8019ab8:	f7ff ff27 	bl	801990a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019ac2:	fb02 f303 	mul.w	r3, r2, r3
 8019ac6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019aca:	4413      	add	r3, r2
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3718      	adds	r7, #24
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}
 8019ad4:	0801b6b4 	.word	0x0801b6b4

08019ad8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b08a      	sub	sp, #40	; 0x28
 8019adc:	af02      	add	r7, sp, #8
 8019ade:	6078      	str	r0, [r7, #4]
 8019ae0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	4a19      	ldr	r2, [pc, #100]	; (8019b4c <SysTimeFromMs+0x74>)
 8019ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8019aea:	099b      	lsrs	r3, r3, #6
 8019aec:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019aee:	69fb      	ldr	r3, [r7, #28]
 8019af0:	617b      	str	r3, [r7, #20]
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	b29a      	uxth	r2, r3
 8019af6:	69fb      	ldr	r3, [r7, #28]
 8019af8:	b29b      	uxth	r3, r3
 8019afa:	4619      	mov	r1, r3
 8019afc:	0149      	lsls	r1, r1, #5
 8019afe:	1ac9      	subs	r1, r1, r3
 8019b00:	0089      	lsls	r1, r1, #2
 8019b02:	440b      	add	r3, r1
 8019b04:	00db      	lsls	r3, r3, #3
 8019b06:	b29b      	uxth	r3, r3
 8019b08:	1ad3      	subs	r3, r2, r3
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	b21b      	sxth	r3, r3
 8019b0e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8019b10:	f107 030c 	add.w	r3, r7, #12
 8019b14:	2200      	movs	r2, #0
 8019b16:	601a      	str	r2, [r3, #0]
 8019b18:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019b1a:	4b0d      	ldr	r3, [pc, #52]	; (8019b50 <SysTimeFromMs+0x78>)
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	4798      	blx	r3
 8019b20:	4603      	mov	r3, r0
 8019b22:	b21b      	sxth	r3, r3
 8019b24:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019b26:	4b0a      	ldr	r3, [pc, #40]	; (8019b50 <SysTimeFromMs+0x78>)
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	4798      	blx	r3
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	693b      	ldr	r3, [r7, #16]
 8019b34:	9300      	str	r3, [sp, #0]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	f107 0214 	add.w	r2, r7, #20
 8019b3c:	ca06      	ldmia	r2, {r1, r2}
 8019b3e:	f7ff feab 	bl	8019898 <SysTimeAdd>
}
 8019b42:	6878      	ldr	r0, [r7, #4]
 8019b44:	3720      	adds	r7, #32
 8019b46:	46bd      	mov	sp, r7
 8019b48:	bd80      	pop	{r7, pc}
 8019b4a:	bf00      	nop
 8019b4c:	10624dd3 	.word	0x10624dd3
 8019b50:	0801b6b4 	.word	0x0801b6b4

08019b54 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8019b54:	b480      	push	{r7}
 8019b56:	b085      	sub	sp, #20
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
  int i = 0;
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8019b60:	e00e      	b.n	8019b80 <ee_skip_atoi+0x2c>
 8019b62:	68fa      	ldr	r2, [r7, #12]
 8019b64:	4613      	mov	r3, r2
 8019b66:	009b      	lsls	r3, r3, #2
 8019b68:	4413      	add	r3, r2
 8019b6a:	005b      	lsls	r3, r3, #1
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	1c59      	adds	r1, r3, #1
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	6011      	str	r1, [r2, #0]
 8019b78:	781b      	ldrb	r3, [r3, #0]
 8019b7a:	4403      	add	r3, r0
 8019b7c:	3b30      	subs	r3, #48	; 0x30
 8019b7e:	60fb      	str	r3, [r7, #12]
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	781b      	ldrb	r3, [r3, #0]
 8019b86:	2b2f      	cmp	r3, #47	; 0x2f
 8019b88:	d904      	bls.n	8019b94 <ee_skip_atoi+0x40>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	2b39      	cmp	r3, #57	; 0x39
 8019b92:	d9e6      	bls.n	8019b62 <ee_skip_atoi+0xe>
  return i;
 8019b94:	68fb      	ldr	r3, [r7, #12]
}
 8019b96:	4618      	mov	r0, r3
 8019b98:	3714      	adds	r7, #20
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	bc80      	pop	{r7}
 8019b9e:	4770      	bx	lr

08019ba0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	b099      	sub	sp, #100	; 0x64
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8019bae:	4b72      	ldr	r3, [pc, #456]	; (8019d78 <ee_number+0x1d8>)
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8019bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d002      	beq.n	8019bc4 <ee_number+0x24>
 8019bbe:	4b6f      	ldr	r3, [pc, #444]	; (8019d7c <ee_number+0x1dc>)
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	2b01      	cmp	r3, #1
 8019bc8:	dd02      	ble.n	8019bd0 <ee_number+0x30>
 8019bca:	683b      	ldr	r3, [r7, #0]
 8019bcc:	2b24      	cmp	r3, #36	; 0x24
 8019bce:	dd01      	ble.n	8019bd4 <ee_number+0x34>
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	e0cc      	b.n	8019d6e <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8019bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bd6:	f003 0301 	and.w	r3, r3, #1
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d001      	beq.n	8019be2 <ee_number+0x42>
 8019bde:	2330      	movs	r3, #48	; 0x30
 8019be0:	e000      	b.n	8019be4 <ee_number+0x44>
 8019be2:	2320      	movs	r3, #32
 8019be4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8019be8:	2300      	movs	r3, #0
 8019bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8019bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019bf0:	f003 0302 	and.w	r3, r3, #2
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d00b      	beq.n	8019c10 <ee_number+0x70>
  {
    if (num < 0)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	da08      	bge.n	8019c10 <ee_number+0x70>
    {
      sign = '-';
 8019bfe:	232d      	movs	r3, #45	; 0x2d
 8019c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	425b      	negs	r3, r3
 8019c08:	607b      	str	r3, [r7, #4]
      size--;
 8019c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c0c:	3b01      	subs	r3, #1
 8019c0e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8019c10:	2300      	movs	r3, #0
 8019c12:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d120      	bne.n	8019c5c <ee_number+0xbc>
    tmp[i++] = '0';
 8019c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c1c:	1c5a      	adds	r2, r3, #1
 8019c1e:	657a      	str	r2, [r7, #84]	; 0x54
 8019c20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8019c24:	4413      	add	r3, r2
 8019c26:	2230      	movs	r2, #48	; 0x30
 8019c28:	f803 2c50 	strb.w	r2, [r3, #-80]
 8019c2c:	e019      	b.n	8019c62 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	683a      	ldr	r2, [r7, #0]
 8019c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8019c36:	fb02 f201 	mul.w	r2, r2, r1
 8019c3a:	1a9b      	subs	r3, r3, r2
 8019c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8019c3e:	441a      	add	r2, r3
 8019c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c42:	1c59      	adds	r1, r3, #1
 8019c44:	6579      	str	r1, [r7, #84]	; 0x54
 8019c46:	7812      	ldrb	r2, [r2, #0]
 8019c48:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8019c4c:	440b      	add	r3, r1
 8019c4e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8019c52:	687a      	ldr	r2, [r7, #4]
 8019c54:	683b      	ldr	r3, [r7, #0]
 8019c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c5a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d1e5      	bne.n	8019c2e <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 8019c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c66:	429a      	cmp	r2, r3
 8019c68:	dd01      	ble.n	8019c6e <ee_number+0xce>
 8019c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8019c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c72:	1ad3      	subs	r3, r2, r3
 8019c74:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8019c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019c78:	f003 0301 	and.w	r3, r3, #1
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d112      	bne.n	8019ca6 <ee_number+0x106>
 8019c80:	e00c      	b.n	8019c9c <ee_number+0xfc>
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	60fa      	str	r2, [r7, #12]
 8019c88:	2220      	movs	r2, #32
 8019c8a:	701a      	strb	r2, [r3, #0]
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	3b01      	subs	r3, #1
 8019c90:	60bb      	str	r3, [r7, #8]
 8019c92:	68bb      	ldr	r3, [r7, #8]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d101      	bne.n	8019c9c <ee_number+0xfc>
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	e068      	b.n	8019d6e <ee_number+0x1ce>
 8019c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019c9e:	1e5a      	subs	r2, r3, #1
 8019ca0:	66ba      	str	r2, [r7, #104]	; 0x68
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	dced      	bgt.n	8019c82 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 8019ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d01b      	beq.n	8019ce6 <ee_number+0x146>
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	1c5a      	adds	r2, r3, #1
 8019cb2:	60fa      	str	r2, [r7, #12]
 8019cb4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8019cb8:	701a      	strb	r2, [r3, #0]
 8019cba:	68bb      	ldr	r3, [r7, #8]
 8019cbc:	3b01      	subs	r3, #1
 8019cbe:	60bb      	str	r3, [r7, #8]
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d10f      	bne.n	8019ce6 <ee_number+0x146>
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	e051      	b.n	8019d6e <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	1c5a      	adds	r2, r3, #1
 8019cce:	60fa      	str	r2, [r7, #12]
 8019cd0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8019cd4:	701a      	strb	r2, [r3, #0]
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	60bb      	str	r3, [r7, #8]
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d101      	bne.n	8019ce6 <ee_number+0x146>
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	e043      	b.n	8019d6e <ee_number+0x1ce>
 8019ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019ce8:	1e5a      	subs	r2, r3, #1
 8019cea:	66ba      	str	r2, [r7, #104]	; 0x68
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	dcec      	bgt.n	8019cca <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8019cf0:	e00c      	b.n	8019d0c <ee_number+0x16c>
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	1c5a      	adds	r2, r3, #1
 8019cf6:	60fa      	str	r2, [r7, #12]
 8019cf8:	2230      	movs	r2, #48	; 0x30
 8019cfa:	701a      	strb	r2, [r3, #0]
 8019cfc:	68bb      	ldr	r3, [r7, #8]
 8019cfe:	3b01      	subs	r3, #1
 8019d00:	60bb      	str	r3, [r7, #8]
 8019d02:	68bb      	ldr	r3, [r7, #8]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d101      	bne.n	8019d0c <ee_number+0x16c>
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	e030      	b.n	8019d6e <ee_number+0x1ce>
 8019d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019d0e:	1e5a      	subs	r2, r3, #1
 8019d10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019d12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d14:	429a      	cmp	r2, r3
 8019d16:	dbec      	blt.n	8019cf2 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8019d18:	e010      	b.n	8019d3c <ee_number+0x19c>
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	1c5a      	adds	r2, r3, #1
 8019d1e:	60fa      	str	r2, [r7, #12]
 8019d20:	f107 0110 	add.w	r1, r7, #16
 8019d24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019d26:	440a      	add	r2, r1
 8019d28:	7812      	ldrb	r2, [r2, #0]
 8019d2a:	701a      	strb	r2, [r3, #0]
 8019d2c:	68bb      	ldr	r3, [r7, #8]
 8019d2e:	3b01      	subs	r3, #1
 8019d30:	60bb      	str	r3, [r7, #8]
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d101      	bne.n	8019d3c <ee_number+0x19c>
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	e018      	b.n	8019d6e <ee_number+0x1ce>
 8019d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019d3e:	1e5a      	subs	r2, r3, #1
 8019d40:	657a      	str	r2, [r7, #84]	; 0x54
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	dce9      	bgt.n	8019d1a <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 8019d46:	e00c      	b.n	8019d62 <ee_number+0x1c2>
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	1c5a      	adds	r2, r3, #1
 8019d4c:	60fa      	str	r2, [r7, #12]
 8019d4e:	2220      	movs	r2, #32
 8019d50:	701a      	strb	r2, [r3, #0]
 8019d52:	68bb      	ldr	r3, [r7, #8]
 8019d54:	3b01      	subs	r3, #1
 8019d56:	60bb      	str	r3, [r7, #8]
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d101      	bne.n	8019d62 <ee_number+0x1c2>
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	e005      	b.n	8019d6e <ee_number+0x1ce>
 8019d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019d64:	1e5a      	subs	r2, r3, #1
 8019d66:	66ba      	str	r2, [r7, #104]	; 0x68
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	dced      	bgt.n	8019d48 <ee_number+0x1a8>

  return str;
 8019d6c:	68fb      	ldr	r3, [r7, #12]
}
 8019d6e:	4618      	mov	r0, r3
 8019d70:	3764      	adds	r7, #100	; 0x64
 8019d72:	46bd      	mov	sp, r7
 8019d74:	bc80      	pop	{r7}
 8019d76:	4770      	bx	lr
 8019d78:	20000124 	.word	0x20000124
 8019d7c:	20000128 	.word	0x20000128

08019d80 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	b092      	sub	sp, #72	; 0x48
 8019d84:	af04      	add	r7, sp, #16
 8019d86:	60f8      	str	r0, [r7, #12]
 8019d88:	60b9      	str	r1, [r7, #8]
 8019d8a:	607a      	str	r2, [r7, #4]
 8019d8c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8019d8e:	68bb      	ldr	r3, [r7, #8]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	dc01      	bgt.n	8019d98 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8019d94:	2300      	movs	r3, #0
 8019d96:	e142      	b.n	801a01e <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d9c:	e12a      	b.n	8019ff4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8019d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	1ad2      	subs	r2, r2, r3
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	3b01      	subs	r3, #1
 8019da8:	429a      	cmp	r2, r3
 8019daa:	f280 8131 	bge.w	801a010 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	2b25      	cmp	r3, #37	; 0x25
 8019db4:	d006      	beq.n	8019dc4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8019db6:	687a      	ldr	r2, [r7, #4]
 8019db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dba:	1c59      	adds	r1, r3, #1
 8019dbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019dbe:	7812      	ldrb	r2, [r2, #0]
 8019dc0:	701a      	strb	r2, [r3, #0]
      continue;
 8019dc2:	e114      	b.n	8019fee <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	3301      	adds	r3, #1
 8019dcc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	2b30      	cmp	r3, #48	; 0x30
 8019dd4:	d103      	bne.n	8019dde <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8019dd6:	6a3b      	ldr	r3, [r7, #32]
 8019dd8:	f043 0301 	orr.w	r3, r3, #1
 8019ddc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 8019dde:	f04f 33ff 	mov.w	r3, #4294967295
 8019de2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	781b      	ldrb	r3, [r3, #0]
 8019de8:	2b2f      	cmp	r3, #47	; 0x2f
 8019dea:	d908      	bls.n	8019dfe <tiny_vsnprintf_like+0x7e>
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	781b      	ldrb	r3, [r3, #0]
 8019df0:	2b39      	cmp	r3, #57	; 0x39
 8019df2:	d804      	bhi.n	8019dfe <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8019df4:	1d3b      	adds	r3, r7, #4
 8019df6:	4618      	mov	r0, r3
 8019df8:	f7ff feac 	bl	8019b54 <ee_skip_atoi>
 8019dfc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 8019dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8019e02:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8019e04:	f04f 33ff 	mov.w	r3, #4294967295
 8019e08:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8019e0a:	230a      	movs	r3, #10
 8019e0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	781b      	ldrb	r3, [r3, #0]
 8019e12:	3b58      	subs	r3, #88	; 0x58
 8019e14:	2b20      	cmp	r3, #32
 8019e16:	f200 8094 	bhi.w	8019f42 <tiny_vsnprintf_like+0x1c2>
 8019e1a:	a201      	add	r2, pc, #4	; (adr r2, 8019e20 <tiny_vsnprintf_like+0xa0>)
 8019e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e20:	08019f2b 	.word	0x08019f2b
 8019e24:	08019f43 	.word	0x08019f43
 8019e28:	08019f43 	.word	0x08019f43
 8019e2c:	08019f43 	.word	0x08019f43
 8019e30:	08019f43 	.word	0x08019f43
 8019e34:	08019f43 	.word	0x08019f43
 8019e38:	08019f43 	.word	0x08019f43
 8019e3c:	08019f43 	.word	0x08019f43
 8019e40:	08019f43 	.word	0x08019f43
 8019e44:	08019f43 	.word	0x08019f43
 8019e48:	08019f43 	.word	0x08019f43
 8019e4c:	08019eaf 	.word	0x08019eaf
 8019e50:	08019f39 	.word	0x08019f39
 8019e54:	08019f43 	.word	0x08019f43
 8019e58:	08019f43 	.word	0x08019f43
 8019e5c:	08019f43 	.word	0x08019f43
 8019e60:	08019f43 	.word	0x08019f43
 8019e64:	08019f39 	.word	0x08019f39
 8019e68:	08019f43 	.word	0x08019f43
 8019e6c:	08019f43 	.word	0x08019f43
 8019e70:	08019f43 	.word	0x08019f43
 8019e74:	08019f43 	.word	0x08019f43
 8019e78:	08019f43 	.word	0x08019f43
 8019e7c:	08019f43 	.word	0x08019f43
 8019e80:	08019f43 	.word	0x08019f43
 8019e84:	08019f43 	.word	0x08019f43
 8019e88:	08019f43 	.word	0x08019f43
 8019e8c:	08019ecf 	.word	0x08019ecf
 8019e90:	08019f43 	.word	0x08019f43
 8019e94:	08019f8f 	.word	0x08019f8f
 8019e98:	08019f43 	.word	0x08019f43
 8019e9c:	08019f43 	.word	0x08019f43
 8019ea0:	08019f33 	.word	0x08019f33
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8019ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea6:	1c5a      	adds	r2, r3, #1
 8019ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019eaa:	2220      	movs	r2, #32
 8019eac:	701a      	strb	r2, [r3, #0]
 8019eae:	69fb      	ldr	r3, [r7, #28]
 8019eb0:	3b01      	subs	r3, #1
 8019eb2:	61fb      	str	r3, [r7, #28]
 8019eb4:	69fb      	ldr	r3, [r7, #28]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	dcf4      	bgt.n	8019ea4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8019eba:	683b      	ldr	r3, [r7, #0]
 8019ebc:	1d1a      	adds	r2, r3, #4
 8019ebe:	603a      	str	r2, [r7, #0]
 8019ec0:	6819      	ldr	r1, [r3, #0]
 8019ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec4:	1c5a      	adds	r2, r3, #1
 8019ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019ec8:	b2ca      	uxtb	r2, r1
 8019eca:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8019ecc:	e08f      	b.n	8019fee <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	1d1a      	adds	r2, r3, #4
 8019ed2:	603a      	str	r2, [r7, #0]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8019ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d101      	bne.n	8019ee2 <tiny_vsnprintf_like+0x162>
 8019ede:	4b52      	ldr	r3, [pc, #328]	; (801a028 <tiny_vsnprintf_like+0x2a8>)
 8019ee0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8019ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ee4:	f7e6 f948 	bl	8000178 <strlen>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8019eec:	e004      	b.n	8019ef8 <tiny_vsnprintf_like+0x178>
 8019eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef0:	1c5a      	adds	r2, r3, #1
 8019ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019ef4:	2220      	movs	r2, #32
 8019ef6:	701a      	strb	r2, [r3, #0]
 8019ef8:	69fb      	ldr	r3, [r7, #28]
 8019efa:	1e5a      	subs	r2, r3, #1
 8019efc:	61fa      	str	r2, [r7, #28]
 8019efe:	693a      	ldr	r2, [r7, #16]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	dbf4      	blt.n	8019eee <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8019f04:	2300      	movs	r3, #0
 8019f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f08:	e00a      	b.n	8019f20 <tiny_vsnprintf_like+0x1a0>
 8019f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f0c:	1c53      	adds	r3, r2, #1
 8019f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8019f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f12:	1c59      	adds	r1, r3, #1
 8019f14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f16:	7812      	ldrb	r2, [r2, #0]
 8019f18:	701a      	strb	r2, [r3, #0]
 8019f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f1c:	3301      	adds	r3, #1
 8019f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f22:	693b      	ldr	r3, [r7, #16]
 8019f24:	429a      	cmp	r2, r3
 8019f26:	dbf0      	blt.n	8019f0a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8019f28:	e061      	b.n	8019fee <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8019f2a:	6a3b      	ldr	r3, [r7, #32]
 8019f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f30:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8019f32:	2310      	movs	r3, #16
 8019f34:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8019f36:	e02d      	b.n	8019f94 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8019f38:	6a3b      	ldr	r3, [r7, #32]
 8019f3a:	f043 0302 	orr.w	r3, r3, #2
 8019f3e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8019f40:	e025      	b.n	8019f8e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	2b25      	cmp	r3, #37	; 0x25
 8019f48:	d004      	beq.n	8019f54 <tiny_vsnprintf_like+0x1d4>
 8019f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f4c:	1c5a      	adds	r2, r3, #1
 8019f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019f50:	2225      	movs	r2, #37	; 0x25
 8019f52:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8019f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	1ad2      	subs	r2, r2, r3
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	3b01      	subs	r3, #1
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	da17      	bge.n	8019f92 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d006      	beq.n	8019f78 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8019f6a:	687a      	ldr	r2, [r7, #4]
 8019f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6e:	1c59      	adds	r1, r3, #1
 8019f70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019f72:	7812      	ldrb	r2, [r2, #0]
 8019f74:	701a      	strb	r2, [r3, #0]
 8019f76:	e002      	b.n	8019f7e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	3b01      	subs	r3, #1
 8019f7c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8019f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	1ad2      	subs	r2, r2, r3
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	3b01      	subs	r3, #1
 8019f88:	429a      	cmp	r2, r3
 8019f8a:	db2f      	blt.n	8019fec <tiny_vsnprintf_like+0x26c>
 8019f8c:	e002      	b.n	8019f94 <tiny_vsnprintf_like+0x214>
        break;
 8019f8e:	bf00      	nop
 8019f90:	e000      	b.n	8019f94 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8019f92:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	2b6c      	cmp	r3, #108	; 0x6c
 8019f98:	d105      	bne.n	8019fa6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	1d1a      	adds	r2, r3, #4
 8019f9e:	603a      	str	r2, [r7, #0]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8019fa4:	e00f      	b.n	8019fc6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8019fa6:	6a3b      	ldr	r3, [r7, #32]
 8019fa8:	f003 0302 	and.w	r3, r3, #2
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d005      	beq.n	8019fbc <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	1d1a      	adds	r2, r3, #4
 8019fb4:	603a      	str	r2, [r7, #0]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8019fba:	e004      	b.n	8019fc6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	1d1a      	adds	r2, r3, #4
 8019fc0:	603a      	str	r2, [r7, #0]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8019fc6:	68bb      	ldr	r3, [r7, #8]
 8019fc8:	1e5a      	subs	r2, r3, #1
 8019fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	1acb      	subs	r3, r1, r3
 8019fd0:	1ad1      	subs	r1, r2, r3
 8019fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019fd4:	6a3b      	ldr	r3, [r7, #32]
 8019fd6:	9302      	str	r3, [sp, #8]
 8019fd8:	69bb      	ldr	r3, [r7, #24]
 8019fda:	9301      	str	r3, [sp, #4]
 8019fdc:	69fb      	ldr	r3, [r7, #28]
 8019fde:	9300      	str	r3, [sp, #0]
 8019fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fe4:	f7ff fddc 	bl	8019ba0 <ee_number>
 8019fe8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019fea:	e000      	b.n	8019fee <tiny_vsnprintf_like+0x26e>
        continue;
 8019fec:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	3301      	adds	r3, #1
 8019ff2:	607b      	str	r3, [r7, #4]
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	f47f aed0 	bne.w	8019d9e <tiny_vsnprintf_like+0x1e>
 8019ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	1ad2      	subs	r2, r2, r3
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	3b01      	subs	r3, #1
 801a008:	429a      	cmp	r2, r3
 801a00a:	f6bf aec8 	bge.w	8019d9e <tiny_vsnprintf_like+0x1e>
 801a00e:	e000      	b.n	801a012 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801a010:	bf00      	nop
  }

  *str = '\0';
 801a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a014:	2200      	movs	r2, #0
 801a016:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	1ad3      	subs	r3, r2, r3
}
 801a01e:	4618      	mov	r0, r3
 801a020:	3738      	adds	r7, #56	; 0x38
 801a022:	46bd      	mov	sp, r7
 801a024:	bd80      	pop	{r7, pc}
 801a026:	bf00      	nop
 801a028:	0801b5e0 	.word	0x0801b5e0

0801a02c <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b088      	sub	sp, #32
 801a030:	af00      	add	r7, sp, #0
 801a032:	60f8      	str	r0, [r7, #12]
 801a034:	60b9      	str	r1, [r7, #8]
 801a036:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a038:	f3ef 8310 	mrs	r3, PRIMASK
 801a03c:	617b      	str	r3, [r7, #20]
  return(result);
 801a03e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a042:	b672      	cpsid	i
}
 801a044:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a046:	68f8      	ldr	r0, [r7, #12]
 801a048:	f000 f83e 	bl	801a0c8 <SEQ_BitPosition>
 801a04c:	4603      	mov	r3, r0
 801a04e:	4619      	mov	r1, r3
 801a050:	4a06      	ldr	r2, [pc, #24]	; (801a06c <UTIL_SEQ_RegTask+0x40>)
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a05c:	69bb      	ldr	r3, [r7, #24]
 801a05e:	f383 8810 	msr	PRIMASK, r3
}
 801a062:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a064:	bf00      	nop
}
 801a066:	3720      	adds	r7, #32
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}
 801a06c:	20000ef8 	.word	0x20000ef8

0801a070 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a070:	b480      	push	{r7}
 801a072:	b087      	sub	sp, #28
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a07a:	f3ef 8310 	mrs	r3, PRIMASK
 801a07e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a080:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a084:	b672      	cpsid	i
}
 801a086:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a088:	4b0d      	ldr	r3, [pc, #52]	; (801a0c0 <UTIL_SEQ_SetTask+0x50>)
 801a08a:	681a      	ldr	r2, [r3, #0]
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	4313      	orrs	r3, r2
 801a090:	4a0b      	ldr	r2, [pc, #44]	; (801a0c0 <UTIL_SEQ_SetTask+0x50>)
 801a092:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a094:	4a0b      	ldr	r2, [pc, #44]	; (801a0c4 <UTIL_SEQ_SetTask+0x54>)
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	431a      	orrs	r2, r3
 801a0a0:	4908      	ldr	r1, [pc, #32]	; (801a0c4 <UTIL_SEQ_SetTask+0x54>)
 801a0a2:	683b      	ldr	r3, [r7, #0]
 801a0a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0ac:	693b      	ldr	r3, [r7, #16]
 801a0ae:	f383 8810 	msr	PRIMASK, r3
}
 801a0b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a0b4:	bf00      	nop
}
 801a0b6:	371c      	adds	r7, #28
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bc80      	pop	{r7}
 801a0bc:	4770      	bx	lr
 801a0be:	bf00      	nop
 801a0c0:	20000ef4 	.word	0x20000ef4
 801a0c4:	20000f78 	.word	0x20000f78

0801a0c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a0c8:	b480      	push	{r7}
 801a0ca:	b085      	sub	sp, #20
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	0c1b      	lsrs	r3, r3, #16
 801a0d8:	041b      	lsls	r3, r3, #16
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d104      	bne.n	801a0e8 <SEQ_BitPosition+0x20>
 801a0de:	2310      	movs	r3, #16
 801a0e0:	73fb      	strb	r3, [r7, #15]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	041b      	lsls	r3, r3, #16
 801a0e6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d105      	bne.n	801a0fe <SEQ_BitPosition+0x36>
 801a0f2:	7bfb      	ldrb	r3, [r7, #15]
 801a0f4:	3308      	adds	r3, #8
 801a0f6:	73fb      	strb	r3, [r7, #15]
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	021b      	lsls	r3, r3, #8
 801a0fc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a104:	2b00      	cmp	r3, #0
 801a106:	d105      	bne.n	801a114 <SEQ_BitPosition+0x4c>
 801a108:	7bfb      	ldrb	r3, [r7, #15]
 801a10a:	3304      	adds	r3, #4
 801a10c:	73fb      	strb	r3, [r7, #15]
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	011b      	lsls	r3, r3, #4
 801a112:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	0f1b      	lsrs	r3, r3, #28
 801a118:	4a06      	ldr	r2, [pc, #24]	; (801a134 <SEQ_BitPosition+0x6c>)
 801a11a:	5cd2      	ldrb	r2, [r2, r3]
 801a11c:	7bfb      	ldrb	r3, [r7, #15]
 801a11e:	4413      	add	r3, r2
 801a120:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a122:	7bfb      	ldrb	r3, [r7, #15]
 801a124:	f1c3 031f 	rsb	r3, r3, #31
 801a128:	b2db      	uxtb	r3, r3
}
 801a12a:	4618      	mov	r0, r3
 801a12c:	3714      	adds	r7, #20
 801a12e:	46bd      	mov	sp, r7
 801a130:	bc80      	pop	{r7}
 801a132:	4770      	bx	lr
 801a134:	0801bba0 	.word	0x0801bba0

0801a138 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a13c:	4b04      	ldr	r3, [pc, #16]	; (801a150 <UTIL_TIMER_Init+0x18>)
 801a13e:	2200      	movs	r2, #0
 801a140:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a142:	4b04      	ldr	r3, [pc, #16]	; (801a154 <UTIL_TIMER_Init+0x1c>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	4798      	blx	r3
 801a148:	4603      	mov	r3, r0
}
 801a14a:	4618      	mov	r0, r3
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	20000f88 	.word	0x20000f88
 801a154:	0801b688 	.word	0x0801b688

0801a158 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	60f8      	str	r0, [r7, #12]
 801a160:	60b9      	str	r1, [r7, #8]
 801a162:	603b      	str	r3, [r7, #0]
 801a164:	4613      	mov	r3, r2
 801a166:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d023      	beq.n	801a1b6 <UTIL_TIMER_Create+0x5e>
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d020      	beq.n	801a1b6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	2200      	movs	r2, #0
 801a178:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a17a:	4b11      	ldr	r3, [pc, #68]	; (801a1c0 <UTIL_TIMER_Create+0x68>)
 801a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a17e:	68b8      	ldr	r0, [r7, #8]
 801a180:	4798      	blx	r3
 801a182:	4602      	mov	r2, r0
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	2200      	movs	r2, #0
 801a18c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	2200      	movs	r2, #0
 801a192:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	2200      	movs	r2, #0
 801a198:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	683a      	ldr	r2, [r7, #0]
 801a19e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	69ba      	ldr	r2, [r7, #24]
 801a1a4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	79fa      	ldrb	r2, [r7, #7]
 801a1aa:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	e000      	b.n	801a1b8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a1b6:	2301      	movs	r3, #1
  }
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3710      	adds	r7, #16
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}
 801a1c0:	0801b688 	.word	0x0801b688

0801a1c4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b08a      	sub	sp, #40	; 0x28
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d056      	beq.n	801a286 <UTIL_TIMER_Start+0xc2>
 801a1d8:	6878      	ldr	r0, [r7, #4]
 801a1da:	f000 f9a9 	bl	801a530 <TimerExists>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	f083 0301 	eor.w	r3, r3, #1
 801a1e4:	b2db      	uxtb	r3, r3
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d04d      	beq.n	801a286 <UTIL_TIMER_Start+0xc2>
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	7a5b      	ldrb	r3, [r3, #9]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d149      	bne.n	801a286 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a1f2:	f3ef 8310 	mrs	r3, PRIMASK
 801a1f6:	613b      	str	r3, [r7, #16]
  return(result);
 801a1f8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a1fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a1fc:	b672      	cpsid	i
}
 801a1fe:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	685b      	ldr	r3, [r3, #4]
 801a204:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a206:	4b24      	ldr	r3, [pc, #144]	; (801a298 <UTIL_TIMER_Start+0xd4>)
 801a208:	6a1b      	ldr	r3, [r3, #32]
 801a20a:	4798      	blx	r3
 801a20c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a20e:	6a3a      	ldr	r2, [r7, #32]
 801a210:	69bb      	ldr	r3, [r7, #24]
 801a212:	429a      	cmp	r2, r3
 801a214:	d201      	bcs.n	801a21a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a216:	69bb      	ldr	r3, [r7, #24]
 801a218:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6a3a      	ldr	r2, [r7, #32]
 801a21e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	2200      	movs	r2, #0
 801a224:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2201      	movs	r2, #1
 801a22a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	2200      	movs	r2, #0
 801a230:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a232:	4b1a      	ldr	r3, [pc, #104]	; (801a29c <UTIL_TIMER_Start+0xd8>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d106      	bne.n	801a248 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a23a:	4b17      	ldr	r3, [pc, #92]	; (801a298 <UTIL_TIMER_Start+0xd4>)
 801a23c:	691b      	ldr	r3, [r3, #16]
 801a23e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f000 f9eb 	bl	801a61c <TimerInsertNewHeadTimer>
 801a246:	e017      	b.n	801a278 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a248:	4b13      	ldr	r3, [pc, #76]	; (801a298 <UTIL_TIMER_Start+0xd4>)
 801a24a:	699b      	ldr	r3, [r3, #24]
 801a24c:	4798      	blx	r3
 801a24e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681a      	ldr	r2, [r3, #0]
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	441a      	add	r2, r3
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	681a      	ldr	r2, [r3, #0]
 801a260:	4b0e      	ldr	r3, [pc, #56]	; (801a29c <UTIL_TIMER_Start+0xd8>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	429a      	cmp	r2, r3
 801a268:	d203      	bcs.n	801a272 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a26a:	6878      	ldr	r0, [r7, #4]
 801a26c:	f000 f9d6 	bl	801a61c <TimerInsertNewHeadTimer>
 801a270:	e002      	b.n	801a278 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a272:	6878      	ldr	r0, [r7, #4]
 801a274:	f000 f9a2 	bl	801a5bc <TimerInsertTimer>
 801a278:	69fb      	ldr	r3, [r7, #28]
 801a27a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	f383 8810 	msr	PRIMASK, r3
}
 801a282:	bf00      	nop
  {
 801a284:	e002      	b.n	801a28c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a286:	2301      	movs	r3, #1
 801a288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801a290:	4618      	mov	r0, r3
 801a292:	3728      	adds	r7, #40	; 0x28
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}
 801a298:	0801b688 	.word	0x0801b688
 801a29c:	20000f88 	.word	0x20000f88

0801a2a0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b088      	sub	sp, #32
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d05b      	beq.n	801a36a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 801a2b8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a2ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2bc:	b672      	cpsid	i
}
 801a2be:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a2c0:	4b2d      	ldr	r3, [pc, #180]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a2c6:	4b2c      	ldr	r3, [pc, #176]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	2201      	movs	r2, #1
 801a2d0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a2d2:	4b29      	ldr	r3, [pc, #164]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d041      	beq.n	801a35e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a2e0:	4b25      	ldr	r3, [pc, #148]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	687a      	ldr	r2, [r7, #4]
 801a2e6:	429a      	cmp	r2, r3
 801a2e8:	d134      	bne.n	801a354 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a2ea:	4b23      	ldr	r3, [pc, #140]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a2f2:	4b21      	ldr	r3, [pc, #132]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	695b      	ldr	r3, [r3, #20]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d00a      	beq.n	801a312 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a2fc:	4b1e      	ldr	r3, [pc, #120]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	695b      	ldr	r3, [r3, #20]
 801a302:	4a1d      	ldr	r2, [pc, #116]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a304:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a306:	4b1c      	ldr	r3, [pc, #112]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	4618      	mov	r0, r3
 801a30c:	f000 f92c 	bl	801a568 <TimerSetTimeout>
 801a310:	e023      	b.n	801a35a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a312:	4b1a      	ldr	r3, [pc, #104]	; (801a37c <UTIL_TIMER_Stop+0xdc>)
 801a314:	68db      	ldr	r3, [r3, #12]
 801a316:	4798      	blx	r3
            TimerListHead = NULL;
 801a318:	4b17      	ldr	r3, [pc, #92]	; (801a378 <UTIL_TIMER_Stop+0xd8>)
 801a31a:	2200      	movs	r2, #0
 801a31c:	601a      	str	r2, [r3, #0]
 801a31e:	e01c      	b.n	801a35a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a320:	697a      	ldr	r2, [r7, #20]
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	429a      	cmp	r2, r3
 801a326:	d110      	bne.n	801a34a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a328:	697b      	ldr	r3, [r7, #20]
 801a32a:	695b      	ldr	r3, [r3, #20]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d006      	beq.n	801a33e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a330:	697b      	ldr	r3, [r7, #20]
 801a332:	695b      	ldr	r3, [r3, #20]
 801a334:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a336:	69bb      	ldr	r3, [r7, #24]
 801a338:	697a      	ldr	r2, [r7, #20]
 801a33a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a33c:	e00d      	b.n	801a35a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a33e:	2300      	movs	r3, #0
 801a340:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a342:	69bb      	ldr	r3, [r7, #24]
 801a344:	697a      	ldr	r2, [r7, #20]
 801a346:	615a      	str	r2, [r3, #20]
            break;
 801a348:	e007      	b.n	801a35a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a34a:	697b      	ldr	r3, [r7, #20]
 801a34c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a34e:	697b      	ldr	r3, [r7, #20]
 801a350:	695b      	ldr	r3, [r3, #20]
 801a352:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a354:	697b      	ldr	r3, [r7, #20]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d1e2      	bne.n	801a320 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a35a:	2300      	movs	r3, #0
 801a35c:	77fb      	strb	r3, [r7, #31]
 801a35e:	693b      	ldr	r3, [r7, #16]
 801a360:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	f383 8810 	msr	PRIMASK, r3
}
 801a368:	e001      	b.n	801a36e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a36a:	2301      	movs	r3, #1
 801a36c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a36e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a370:	4618      	mov	r0, r3
 801a372:	3720      	adds	r7, #32
 801a374:	46bd      	mov	sp, r7
 801a376:	bd80      	pop	{r7, pc}
 801a378:	20000f88 	.word	0x20000f88
 801a37c:	0801b688 	.word	0x0801b688

0801a380 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b084      	sub	sp, #16
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a38a:	2300      	movs	r3, #0
 801a38c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d102      	bne.n	801a39a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a394:	2301      	movs	r3, #1
 801a396:	73fb      	strb	r3, [r7, #15]
 801a398:	e014      	b.n	801a3c4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a39a:	4b0d      	ldr	r3, [pc, #52]	; (801a3d0 <UTIL_TIMER_SetPeriod+0x50>)
 801a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a39e:	6838      	ldr	r0, [r7, #0]
 801a3a0:	4798      	blx	r3
 801a3a2:	4602      	mov	r2, r0
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a3a8:	6878      	ldr	r0, [r7, #4]
 801a3aa:	f000 f8c1 	bl	801a530 <TimerExists>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d007      	beq.n	801a3c4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a3b4:	6878      	ldr	r0, [r7, #4]
 801a3b6:	f7ff ff73 	bl	801a2a0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a3ba:	6878      	ldr	r0, [r7, #4]
 801a3bc:	f7ff ff02 	bl	801a1c4 <UTIL_TIMER_Start>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	3710      	adds	r7, #16
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bd80      	pop	{r7, pc}
 801a3ce:	bf00      	nop
 801a3d0:	0801b688 	.word	0x0801b688

0801a3d4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801a3d4:	b590      	push	{r4, r7, lr}
 801a3d6:	b089      	sub	sp, #36	; 0x24
 801a3d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3da:	f3ef 8310 	mrs	r3, PRIMASK
 801a3de:	60bb      	str	r3, [r7, #8]
  return(result);
 801a3e0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a3e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3e4:	b672      	cpsid	i
}
 801a3e6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801a3e8:	4b38      	ldr	r3, [pc, #224]	; (801a4cc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3ea:	695b      	ldr	r3, [r3, #20]
 801a3ec:	4798      	blx	r3
 801a3ee:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801a3f0:	4b36      	ldr	r3, [pc, #216]	; (801a4cc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a3f2:	691b      	ldr	r3, [r3, #16]
 801a3f4:	4798      	blx	r3
 801a3f6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801a3f8:	693a      	ldr	r2, [r7, #16]
 801a3fa:	697b      	ldr	r3, [r7, #20]
 801a3fc:	1ad3      	subs	r3, r2, r3
 801a3fe:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801a400:	4b33      	ldr	r3, [pc, #204]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	2b00      	cmp	r3, #0
 801a406:	d037      	beq.n	801a478 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801a408:	4b31      	ldr	r3, [pc, #196]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801a40e:	69fb      	ldr	r3, [r7, #28]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	68fa      	ldr	r2, [r7, #12]
 801a414:	429a      	cmp	r2, r3
 801a416:	d206      	bcs.n	801a426 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	681a      	ldr	r2, [r3, #0]
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	1ad2      	subs	r2, r2, r3
 801a420:	69fb      	ldr	r3, [r7, #28]
 801a422:	601a      	str	r2, [r3, #0]
 801a424:	e002      	b.n	801a42c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801a426:	69fb      	ldr	r3, [r7, #28]
 801a428:	2200      	movs	r2, #0
 801a42a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801a42c:	69fb      	ldr	r3, [r7, #28]
 801a42e:	695b      	ldr	r3, [r3, #20]
 801a430:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801a432:	69fb      	ldr	r3, [r7, #28]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d1ea      	bne.n	801a40e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a438:	e01e      	b.n	801a478 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801a43a:	4b25      	ldr	r3, [pc, #148]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801a440:	4b23      	ldr	r3, [pc, #140]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	695b      	ldr	r3, [r3, #20]
 801a446:	4a22      	ldr	r2, [pc, #136]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a448:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801a44a:	69fb      	ldr	r3, [r7, #28]
 801a44c:	2200      	movs	r2, #0
 801a44e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801a450:	69fb      	ldr	r3, [r7, #28]
 801a452:	2200      	movs	r2, #0
 801a454:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801a456:	69fb      	ldr	r3, [r7, #28]
 801a458:	68db      	ldr	r3, [r3, #12]
 801a45a:	69fa      	ldr	r2, [r7, #28]
 801a45c:	6912      	ldr	r2, [r2, #16]
 801a45e:	4610      	mov	r0, r2
 801a460:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801a462:	69fb      	ldr	r3, [r7, #28]
 801a464:	7adb      	ldrb	r3, [r3, #11]
 801a466:	2b01      	cmp	r3, #1
 801a468:	d106      	bne.n	801a478 <UTIL_TIMER_IRQ_Handler+0xa4>
 801a46a:	69fb      	ldr	r3, [r7, #28]
 801a46c:	7a9b      	ldrb	r3, [r3, #10]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d102      	bne.n	801a478 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801a472:	69f8      	ldr	r0, [r7, #28]
 801a474:	f7ff fea6 	bl	801a1c4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801a478:	4b15      	ldr	r3, [pc, #84]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d00d      	beq.n	801a49c <UTIL_TIMER_IRQ_Handler+0xc8>
 801a480:	4b13      	ldr	r3, [pc, #76]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d0d7      	beq.n	801a43a <UTIL_TIMER_IRQ_Handler+0x66>
 801a48a:	4b11      	ldr	r3, [pc, #68]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	681c      	ldr	r4, [r3, #0]
 801a490:	4b0e      	ldr	r3, [pc, #56]	; (801a4cc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801a492:	699b      	ldr	r3, [r3, #24]
 801a494:	4798      	blx	r3
 801a496:	4603      	mov	r3, r0
 801a498:	429c      	cmp	r4, r3
 801a49a:	d3ce      	bcc.n	801a43a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801a49c:	4b0c      	ldr	r3, [pc, #48]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d009      	beq.n	801a4b8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801a4a4:	4b0a      	ldr	r3, [pc, #40]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	7a1b      	ldrb	r3, [r3, #8]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d104      	bne.n	801a4b8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801a4ae:	4b08      	ldr	r3, [pc, #32]	; (801a4d0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f000 f858 	bl	801a568 <TimerSetTimeout>
 801a4b8:	69bb      	ldr	r3, [r7, #24]
 801a4ba:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	f383 8810 	msr	PRIMASK, r3
}
 801a4c2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801a4c4:	bf00      	nop
 801a4c6:	3724      	adds	r7, #36	; 0x24
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd90      	pop	{r4, r7, pc}
 801a4cc:	0801b688 	.word	0x0801b688
 801a4d0:	20000f88 	.word	0x20000f88

0801a4d4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b082      	sub	sp, #8
 801a4d8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a4da:	4b06      	ldr	r3, [pc, #24]	; (801a4f4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a4dc:	69db      	ldr	r3, [r3, #28]
 801a4de:	4798      	blx	r3
 801a4e0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a4e2:	4b04      	ldr	r3, [pc, #16]	; (801a4f4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e6:	6878      	ldr	r0, [r7, #4]
 801a4e8:	4798      	blx	r3
 801a4ea:	4603      	mov	r3, r0
}
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	3708      	adds	r7, #8
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	bd80      	pop	{r7, pc}
 801a4f4:	0801b688 	.word	0x0801b688

0801a4f8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b084      	sub	sp, #16
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a500:	4b0a      	ldr	r3, [pc, #40]	; (801a52c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a502:	69db      	ldr	r3, [r3, #28]
 801a504:	4798      	blx	r3
 801a506:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a508:	4b08      	ldr	r3, [pc, #32]	; (801a52c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a50c:	6878      	ldr	r0, [r7, #4]
 801a50e:	4798      	blx	r3
 801a510:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a512:	4b06      	ldr	r3, [pc, #24]	; (801a52c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a516:	68f9      	ldr	r1, [r7, #12]
 801a518:	68ba      	ldr	r2, [r7, #8]
 801a51a:	1a8a      	subs	r2, r1, r2
 801a51c:	4610      	mov	r0, r2
 801a51e:	4798      	blx	r3
 801a520:	4603      	mov	r3, r0
}
 801a522:	4618      	mov	r0, r3
 801a524:	3710      	adds	r7, #16
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}
 801a52a:	bf00      	nop
 801a52c:	0801b688 	.word	0x0801b688

0801a530 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a530:	b480      	push	{r7}
 801a532:	b085      	sub	sp, #20
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a538:	4b0a      	ldr	r3, [pc, #40]	; (801a564 <TimerExists+0x34>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a53e:	e008      	b.n	801a552 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a540:	68fa      	ldr	r2, [r7, #12]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	429a      	cmp	r2, r3
 801a546:	d101      	bne.n	801a54c <TimerExists+0x1c>
    {
      return true;
 801a548:	2301      	movs	r3, #1
 801a54a:	e006      	b.n	801a55a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	695b      	ldr	r3, [r3, #20]
 801a550:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d1f3      	bne.n	801a540 <TimerExists+0x10>
  }
  return false;
 801a558:	2300      	movs	r3, #0
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	3714      	adds	r7, #20
 801a55e:	46bd      	mov	sp, r7
 801a560:	bc80      	pop	{r7}
 801a562:	4770      	bx	lr
 801a564:	20000f88 	.word	0x20000f88

0801a568 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a568:	b590      	push	{r4, r7, lr}
 801a56a:	b085      	sub	sp, #20
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a570:	4b11      	ldr	r3, [pc, #68]	; (801a5b8 <TimerSetTimeout+0x50>)
 801a572:	6a1b      	ldr	r3, [r3, #32]
 801a574:	4798      	blx	r3
 801a576:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2201      	movs	r2, #1
 801a57c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	681c      	ldr	r4, [r3, #0]
 801a582:	4b0d      	ldr	r3, [pc, #52]	; (801a5b8 <TimerSetTimeout+0x50>)
 801a584:	699b      	ldr	r3, [r3, #24]
 801a586:	4798      	blx	r3
 801a588:	4602      	mov	r2, r0
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	4413      	add	r3, r2
 801a58e:	429c      	cmp	r4, r3
 801a590:	d207      	bcs.n	801a5a2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a592:	4b09      	ldr	r3, [pc, #36]	; (801a5b8 <TimerSetTimeout+0x50>)
 801a594:	699b      	ldr	r3, [r3, #24]
 801a596:	4798      	blx	r3
 801a598:	4602      	mov	r2, r0
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	441a      	add	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a5a2:	4b05      	ldr	r3, [pc, #20]	; (801a5b8 <TimerSetTimeout+0x50>)
 801a5a4:	689b      	ldr	r3, [r3, #8]
 801a5a6:	687a      	ldr	r2, [r7, #4]
 801a5a8:	6812      	ldr	r2, [r2, #0]
 801a5aa:	4610      	mov	r0, r2
 801a5ac:	4798      	blx	r3
}
 801a5ae:	bf00      	nop
 801a5b0:	3714      	adds	r7, #20
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bd90      	pop	{r4, r7, pc}
 801a5b6:	bf00      	nop
 801a5b8:	0801b688 	.word	0x0801b688

0801a5bc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a5bc:	b480      	push	{r7}
 801a5be:	b085      	sub	sp, #20
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a5c4:	4b14      	ldr	r3, [pc, #80]	; (801a618 <TimerInsertTimer+0x5c>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a5ca:	4b13      	ldr	r3, [pc, #76]	; (801a618 <TimerInsertTimer+0x5c>)
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	695b      	ldr	r3, [r3, #20]
 801a5d0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a5d2:	e012      	b.n	801a5fa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681a      	ldr	r2, [r3, #0]
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	d905      	bls.n	801a5ec <TimerInsertTimer+0x30>
    {
        cur = next;
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	695b      	ldr	r3, [r3, #20]
 801a5e8:	60bb      	str	r3, [r7, #8]
 801a5ea:	e006      	b.n	801a5fa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	687a      	ldr	r2, [r7, #4]
 801a5f0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	68ba      	ldr	r2, [r7, #8]
 801a5f6:	615a      	str	r2, [r3, #20]
        return;
 801a5f8:	e009      	b.n	801a60e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	695b      	ldr	r3, [r3, #20]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d1e8      	bne.n	801a5d4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	687a      	ldr	r2, [r7, #4]
 801a606:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	2200      	movs	r2, #0
 801a60c:	615a      	str	r2, [r3, #20]
}
 801a60e:	3714      	adds	r7, #20
 801a610:	46bd      	mov	sp, r7
 801a612:	bc80      	pop	{r7}
 801a614:	4770      	bx	lr
 801a616:	bf00      	nop
 801a618:	20000f88 	.word	0x20000f88

0801a61c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	b084      	sub	sp, #16
 801a620:	af00      	add	r7, sp, #0
 801a622:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a624:	4b0b      	ldr	r3, [pc, #44]	; (801a654 <TimerInsertNewHeadTimer+0x38>)
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d002      	beq.n	801a636 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	2200      	movs	r2, #0
 801a634:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	68fa      	ldr	r2, [r7, #12]
 801a63a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a63c:	4a05      	ldr	r2, [pc, #20]	; (801a654 <TimerInsertNewHeadTimer+0x38>)
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a642:	4b04      	ldr	r3, [pc, #16]	; (801a654 <TimerInsertNewHeadTimer+0x38>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	4618      	mov	r0, r3
 801a648:	f7ff ff8e 	bl	801a568 <TimerSetTimeout>
}
 801a64c:	bf00      	nop
 801a64e:	3710      	adds	r7, #16
 801a650:	46bd      	mov	sp, r7
 801a652:	bd80      	pop	{r7, pc}
 801a654:	20000f88 	.word	0x20000f88

0801a658 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801a658:	b580      	push	{r7, lr}
 801a65a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801a65c:	2218      	movs	r2, #24
 801a65e:	2100      	movs	r1, #0
 801a660:	4807      	ldr	r0, [pc, #28]	; (801a680 <UTIL_ADV_TRACE_Init+0x28>)
 801a662:	f7ff f8fe 	bl	8019862 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801a666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a66a:	2100      	movs	r1, #0
 801a66c:	4805      	ldr	r0, [pc, #20]	; (801a684 <UTIL_ADV_TRACE_Init+0x2c>)
 801a66e:	f7ff f8f8 	bl	8019862 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801a672:	4b05      	ldr	r3, [pc, #20]	; (801a688 <UTIL_ADV_TRACE_Init+0x30>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	4805      	ldr	r0, [pc, #20]	; (801a68c <UTIL_ADV_TRACE_Init+0x34>)
 801a678:	4798      	blx	r3
 801a67a:	4603      	mov	r3, r0
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	bd80      	pop	{r7, pc}
 801a680:	20000f8c 	.word	0x20000f8c
 801a684:	20000fa4 	.word	0x20000fa4
 801a688:	0801b6c8 	.word	0x0801b6c8
 801a68c:	0801a8fd 	.word	0x0801a8fd

0801a690 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801a690:	b480      	push	{r7}
 801a692:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801a694:	4b06      	ldr	r3, [pc, #24]	; (801a6b0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a696:	8a5a      	ldrh	r2, [r3, #18]
 801a698:	4b05      	ldr	r3, [pc, #20]	; (801a6b0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801a69a:	8a1b      	ldrh	r3, [r3, #16]
 801a69c:	429a      	cmp	r2, r3
 801a69e:	d101      	bne.n	801a6a4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	e000      	b.n	801a6a6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801a6a4:	2300      	movs	r3, #0
}
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	bc80      	pop	{r7}
 801a6ac:	4770      	bx	lr
 801a6ae:	bf00      	nop
 801a6b0:	20000f8c 	.word	0x20000f8c

0801a6b4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801a6b4:	b408      	push	{r3}
 801a6b6:	b580      	push	{r7, lr}
 801a6b8:	b08d      	sub	sp, #52	; 0x34
 801a6ba:	af00      	add	r7, sp, #0
 801a6bc:	60f8      	str	r0, [r7, #12]
 801a6be:	60b9      	str	r1, [r7, #8]
 801a6c0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801a6ca:	4b38      	ldr	r3, [pc, #224]	; (801a7ac <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6cc:	7a1b      	ldrb	r3, [r3, #8]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	4293      	cmp	r3, r2
 801a6d4:	d902      	bls.n	801a6dc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801a6d6:	f06f 0304 	mvn.w	r3, #4
 801a6da:	e05f      	b.n	801a79c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801a6dc:	4b33      	ldr	r3, [pc, #204]	; (801a7ac <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6de:	68da      	ldr	r2, [r3, #12]
 801a6e0:	68bb      	ldr	r3, [r7, #8]
 801a6e2:	4013      	ands	r3, r2
 801a6e4:	68ba      	ldr	r2, [r7, #8]
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	d002      	beq.n	801a6f0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801a6ea:	f06f 0305 	mvn.w	r3, #5
 801a6ee:	e055      	b.n	801a79c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801a6f0:	4b2e      	ldr	r3, [pc, #184]	; (801a7ac <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d00a      	beq.n	801a70e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d007      	beq.n	801a70e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801a6fe:	4b2b      	ldr	r3, [pc, #172]	; (801a7ac <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	f107 0116 	add.w	r1, r7, #22
 801a706:	f107 0218 	add.w	r2, r7, #24
 801a70a:	4610      	mov	r0, r2
 801a70c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801a70e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a712:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a718:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a71c:	4824      	ldr	r0, [pc, #144]	; (801a7b0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801a71e:	f7ff fb2f 	bl	8019d80 <tiny_vsnprintf_like>
 801a722:	4603      	mov	r3, r0
 801a724:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801a726:	f000 f9f3 	bl	801ab10 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801a72a:	8afa      	ldrh	r2, [r7, #22]
 801a72c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a72e:	4413      	add	r3, r2
 801a730:	b29b      	uxth	r3, r3
 801a732:	f107 0214 	add.w	r2, r7, #20
 801a736:	4611      	mov	r1, r2
 801a738:	4618      	mov	r0, r3
 801a73a:	f000 f96b 	bl	801aa14 <TRACE_AllocateBufer>
 801a73e:	4603      	mov	r3, r0
 801a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a744:	d026      	beq.n	801a794 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801a746:	2300      	movs	r3, #0
 801a748:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a74a:	e00f      	b.n	801a76c <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801a74c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a74e:	8aba      	ldrh	r2, [r7, #20]
 801a750:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a754:	440b      	add	r3, r1
 801a756:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801a75a:	4b16      	ldr	r3, [pc, #88]	; (801a7b4 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a75c:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801a75e:	8abb      	ldrh	r3, [r7, #20]
 801a760:	3301      	adds	r3, #1
 801a762:	b29b      	uxth	r3, r3
 801a764:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801a766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a768:	3301      	adds	r3, #1
 801a76a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801a76c:	8afb      	ldrh	r3, [r7, #22]
 801a76e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a770:	429a      	cmp	r2, r3
 801a772:	d3eb      	bcc.n	801a74c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801a774:	8abb      	ldrh	r3, [r7, #20]
 801a776:	461a      	mov	r2, r3
 801a778:	4b0e      	ldr	r3, [pc, #56]	; (801a7b4 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 801a77a:	18d0      	adds	r0, r2, r3
 801a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a77e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a780:	f44f 7100 	mov.w	r1, #512	; 0x200
 801a784:	f7ff fafc 	bl	8019d80 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801a788:	f000 f9e0 	bl	801ab4c <TRACE_UnLock>

    return TRACE_Send();
 801a78c:	f000 f832 	bl	801a7f4 <TRACE_Send>
 801a790:	4603      	mov	r3, r0
 801a792:	e003      	b.n	801a79c <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801a794:	f000 f9da 	bl	801ab4c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801a798:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801a79c:	4618      	mov	r0, r3
 801a79e:	3734      	adds	r7, #52	; 0x34
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a7a6:	b001      	add	sp, #4
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	20000f8c 	.word	0x20000f8c
 801a7b0:	200013a4 	.word	0x200013a4
 801a7b4:	20000fa4 	.word	0x20000fa4

0801a7b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801a7c0:	4a03      	ldr	r2, [pc, #12]	; (801a7d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6053      	str	r3, [r2, #4]
}
 801a7c6:	bf00      	nop
 801a7c8:	370c      	adds	r7, #12
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bc80      	pop	{r7}
 801a7ce:	4770      	bx	lr
 801a7d0:	20000f8c 	.word	0x20000f8c

0801a7d4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801a7d4:	b480      	push	{r7}
 801a7d6:	b083      	sub	sp, #12
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	4603      	mov	r3, r0
 801a7dc:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801a7de:	4a04      	ldr	r2, [pc, #16]	; (801a7f0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801a7e0:	79fb      	ldrb	r3, [r7, #7]
 801a7e2:	7213      	strb	r3, [r2, #8]
}
 801a7e4:	bf00      	nop
 801a7e6:	370c      	adds	r7, #12
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bc80      	pop	{r7}
 801a7ec:	4770      	bx	lr
 801a7ee:	bf00      	nop
 801a7f0:	20000f8c 	.word	0x20000f8c

0801a7f4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b088      	sub	sp, #32
 801a7f8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801a7fe:	2300      	movs	r3, #0
 801a800:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a802:	f3ef 8310 	mrs	r3, PRIMASK
 801a806:	613b      	str	r3, [r7, #16]
  return(result);
 801a808:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a80a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a80c:	b672      	cpsid	i
}
 801a80e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801a810:	f000 f9ba 	bl	801ab88 <TRACE_IsLocked>
 801a814:	4603      	mov	r3, r0
 801a816:	2b00      	cmp	r3, #0
 801a818:	d15d      	bne.n	801a8d6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801a81a:	f000 f979 	bl	801ab10 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801a81e:	4b34      	ldr	r3, [pc, #208]	; (801a8f0 <TRACE_Send+0xfc>)
 801a820:	8a1a      	ldrh	r2, [r3, #16]
 801a822:	4b33      	ldr	r3, [pc, #204]	; (801a8f0 <TRACE_Send+0xfc>)
 801a824:	8a5b      	ldrh	r3, [r3, #18]
 801a826:	429a      	cmp	r2, r3
 801a828:	d04d      	beq.n	801a8c6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a82a:	4b31      	ldr	r3, [pc, #196]	; (801a8f0 <TRACE_Send+0xfc>)
 801a82c:	789b      	ldrb	r3, [r3, #2]
 801a82e:	2b01      	cmp	r3, #1
 801a830:	d117      	bne.n	801a862 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801a832:	4b2f      	ldr	r3, [pc, #188]	; (801a8f0 <TRACE_Send+0xfc>)
 801a834:	881a      	ldrh	r2, [r3, #0]
 801a836:	4b2e      	ldr	r3, [pc, #184]	; (801a8f0 <TRACE_Send+0xfc>)
 801a838:	8a1b      	ldrh	r3, [r3, #16]
 801a83a:	1ad3      	subs	r3, r2, r3
 801a83c:	b29a      	uxth	r2, r3
 801a83e:	4b2c      	ldr	r3, [pc, #176]	; (801a8f0 <TRACE_Send+0xfc>)
 801a840:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a842:	4b2b      	ldr	r3, [pc, #172]	; (801a8f0 <TRACE_Send+0xfc>)
 801a844:	2202      	movs	r2, #2
 801a846:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a848:	4b29      	ldr	r3, [pc, #164]	; (801a8f0 <TRACE_Send+0xfc>)
 801a84a:	2200      	movs	r2, #0
 801a84c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a84e:	4b28      	ldr	r3, [pc, #160]	; (801a8f0 <TRACE_Send+0xfc>)
 801a850:	8a9b      	ldrh	r3, [r3, #20]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d105      	bne.n	801a862 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a856:	4b26      	ldr	r3, [pc, #152]	; (801a8f0 <TRACE_Send+0xfc>)
 801a858:	2200      	movs	r2, #0
 801a85a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a85c:	4b24      	ldr	r3, [pc, #144]	; (801a8f0 <TRACE_Send+0xfc>)
 801a85e:	2200      	movs	r2, #0
 801a860:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a862:	4b23      	ldr	r3, [pc, #140]	; (801a8f0 <TRACE_Send+0xfc>)
 801a864:	789b      	ldrb	r3, [r3, #2]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d115      	bne.n	801a896 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a86a:	4b21      	ldr	r3, [pc, #132]	; (801a8f0 <TRACE_Send+0xfc>)
 801a86c:	8a5a      	ldrh	r2, [r3, #18]
 801a86e:	4b20      	ldr	r3, [pc, #128]	; (801a8f0 <TRACE_Send+0xfc>)
 801a870:	8a1b      	ldrh	r3, [r3, #16]
 801a872:	429a      	cmp	r2, r3
 801a874:	d908      	bls.n	801a888 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a876:	4b1e      	ldr	r3, [pc, #120]	; (801a8f0 <TRACE_Send+0xfc>)
 801a878:	8a5a      	ldrh	r2, [r3, #18]
 801a87a:	4b1d      	ldr	r3, [pc, #116]	; (801a8f0 <TRACE_Send+0xfc>)
 801a87c:	8a1b      	ldrh	r3, [r3, #16]
 801a87e:	1ad3      	subs	r3, r2, r3
 801a880:	b29a      	uxth	r2, r3
 801a882:	4b1b      	ldr	r3, [pc, #108]	; (801a8f0 <TRACE_Send+0xfc>)
 801a884:	829a      	strh	r2, [r3, #20]
 801a886:	e006      	b.n	801a896 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a888:	4b19      	ldr	r3, [pc, #100]	; (801a8f0 <TRACE_Send+0xfc>)
 801a88a:	8a1b      	ldrh	r3, [r3, #16]
 801a88c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a890:	b29a      	uxth	r2, r3
 801a892:	4b17      	ldr	r3, [pc, #92]	; (801a8f0 <TRACE_Send+0xfc>)
 801a894:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a896:	4b16      	ldr	r3, [pc, #88]	; (801a8f0 <TRACE_Send+0xfc>)
 801a898:	8a1b      	ldrh	r3, [r3, #16]
 801a89a:	461a      	mov	r2, r3
 801a89c:	4b15      	ldr	r3, [pc, #84]	; (801a8f4 <TRACE_Send+0x100>)
 801a89e:	4413      	add	r3, r2
 801a8a0:	61bb      	str	r3, [r7, #24]
 801a8a2:	697b      	ldr	r3, [r7, #20]
 801a8a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	f383 8810 	msr	PRIMASK, r3
}
 801a8ac:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801a8ae:	f7e7 fb69 	bl	8001f84 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a8b2:	4b11      	ldr	r3, [pc, #68]	; (801a8f8 <TRACE_Send+0x104>)
 801a8b4:	68db      	ldr	r3, [r3, #12]
 801a8b6:	4a0e      	ldr	r2, [pc, #56]	; (801a8f0 <TRACE_Send+0xfc>)
 801a8b8:	8a92      	ldrh	r2, [r2, #20]
 801a8ba:	4611      	mov	r1, r2
 801a8bc:	69b8      	ldr	r0, [r7, #24]
 801a8be:	4798      	blx	r3
 801a8c0:	4603      	mov	r3, r0
 801a8c2:	77fb      	strb	r3, [r7, #31]
 801a8c4:	e00d      	b.n	801a8e2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801a8c6:	f000 f941 	bl	801ab4c <TRACE_UnLock>
 801a8ca:	697b      	ldr	r3, [r7, #20]
 801a8cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	f383 8810 	msr	PRIMASK, r3
}
 801a8d4:	e005      	b.n	801a8e2 <TRACE_Send+0xee>
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	f383 8810 	msr	PRIMASK, r3
}
 801a8e0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801a8e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	3720      	adds	r7, #32
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	20000f8c 	.word	0x20000f8c
 801a8f4:	20000fa4 	.word	0x20000fa4
 801a8f8:	0801b6c8 	.word	0x0801b6c8

0801a8fc <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b088      	sub	sp, #32
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801a904:	2300      	movs	r3, #0
 801a906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a908:	f3ef 8310 	mrs	r3, PRIMASK
 801a90c:	617b      	str	r3, [r7, #20]
  return(result);
 801a90e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801a910:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801a912:	b672      	cpsid	i
}
 801a914:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801a916:	4b3c      	ldr	r3, [pc, #240]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a918:	789b      	ldrb	r3, [r3, #2]
 801a91a:	2b02      	cmp	r3, #2
 801a91c:	d106      	bne.n	801a92c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a91e:	4b3a      	ldr	r3, [pc, #232]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a920:	2200      	movs	r2, #0
 801a922:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a924:	4b38      	ldr	r3, [pc, #224]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a926:	2200      	movs	r2, #0
 801a928:	821a      	strh	r2, [r3, #16]
 801a92a:	e00a      	b.n	801a942 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801a92c:	4b36      	ldr	r3, [pc, #216]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a92e:	8a1a      	ldrh	r2, [r3, #16]
 801a930:	4b35      	ldr	r3, [pc, #212]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a932:	8a9b      	ldrh	r3, [r3, #20]
 801a934:	4413      	add	r3, r2
 801a936:	b29b      	uxth	r3, r3
 801a938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a93c:	b29a      	uxth	r2, r3
 801a93e:	4b32      	ldr	r3, [pc, #200]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a940:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801a942:	4b31      	ldr	r3, [pc, #196]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a944:	8a1a      	ldrh	r2, [r3, #16]
 801a946:	4b30      	ldr	r3, [pc, #192]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a948:	8a5b      	ldrh	r3, [r3, #18]
 801a94a:	429a      	cmp	r2, r3
 801a94c:	d04d      	beq.n	801a9ea <TRACE_TxCpltCallback+0xee>
 801a94e:	4b2e      	ldr	r3, [pc, #184]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a950:	8adb      	ldrh	r3, [r3, #22]
 801a952:	2b01      	cmp	r3, #1
 801a954:	d149      	bne.n	801a9ea <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801a956:	4b2c      	ldr	r3, [pc, #176]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a958:	789b      	ldrb	r3, [r3, #2]
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d117      	bne.n	801a98e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801a95e:	4b2a      	ldr	r3, [pc, #168]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a960:	881a      	ldrh	r2, [r3, #0]
 801a962:	4b29      	ldr	r3, [pc, #164]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a964:	8a1b      	ldrh	r3, [r3, #16]
 801a966:	1ad3      	subs	r3, r2, r3
 801a968:	b29a      	uxth	r2, r3
 801a96a:	4b27      	ldr	r3, [pc, #156]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a96c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801a96e:	4b26      	ldr	r3, [pc, #152]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a970:	2202      	movs	r2, #2
 801a972:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801a974:	4b24      	ldr	r3, [pc, #144]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a976:	2200      	movs	r2, #0
 801a978:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801a97a:	4b23      	ldr	r3, [pc, #140]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a97c:	8a9b      	ldrh	r3, [r3, #20]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d105      	bne.n	801a98e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801a982:	4b21      	ldr	r3, [pc, #132]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a984:	2200      	movs	r2, #0
 801a986:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801a988:	4b1f      	ldr	r3, [pc, #124]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a98a:	2200      	movs	r2, #0
 801a98c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801a98e:	4b1e      	ldr	r3, [pc, #120]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a990:	789b      	ldrb	r3, [r3, #2]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d115      	bne.n	801a9c2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801a996:	4b1c      	ldr	r3, [pc, #112]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a998:	8a5a      	ldrh	r2, [r3, #18]
 801a99a:	4b1b      	ldr	r3, [pc, #108]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a99c:	8a1b      	ldrh	r3, [r3, #16]
 801a99e:	429a      	cmp	r2, r3
 801a9a0:	d908      	bls.n	801a9b4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801a9a2:	4b19      	ldr	r3, [pc, #100]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9a4:	8a5a      	ldrh	r2, [r3, #18]
 801a9a6:	4b18      	ldr	r3, [pc, #96]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9a8:	8a1b      	ldrh	r3, [r3, #16]
 801a9aa:	1ad3      	subs	r3, r2, r3
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	4b16      	ldr	r3, [pc, #88]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9b0:	829a      	strh	r2, [r3, #20]
 801a9b2:	e006      	b.n	801a9c2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801a9b4:	4b14      	ldr	r3, [pc, #80]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9b6:	8a1b      	ldrh	r3, [r3, #16]
 801a9b8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801a9bc:	b29a      	uxth	r2, r3
 801a9be:	4b12      	ldr	r3, [pc, #72]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9c0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801a9c2:	4b11      	ldr	r3, [pc, #68]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9c4:	8a1b      	ldrh	r3, [r3, #16]
 801a9c6:	461a      	mov	r2, r3
 801a9c8:	4b10      	ldr	r3, [pc, #64]	; (801aa0c <TRACE_TxCpltCallback+0x110>)
 801a9ca:	4413      	add	r3, r2
 801a9cc:	61fb      	str	r3, [r7, #28]
 801a9ce:	69bb      	ldr	r3, [r7, #24]
 801a9d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9d2:	693b      	ldr	r3, [r7, #16]
 801a9d4:	f383 8810 	msr	PRIMASK, r3
}
 801a9d8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801a9da:	4b0d      	ldr	r3, [pc, #52]	; (801aa10 <TRACE_TxCpltCallback+0x114>)
 801a9dc:	68db      	ldr	r3, [r3, #12]
 801a9de:	4a0a      	ldr	r2, [pc, #40]	; (801aa08 <TRACE_TxCpltCallback+0x10c>)
 801a9e0:	8a92      	ldrh	r2, [r2, #20]
 801a9e2:	4611      	mov	r1, r2
 801a9e4:	69f8      	ldr	r0, [r7, #28]
 801a9e6:	4798      	blx	r3
 801a9e8:	e00a      	b.n	801aa00 <TRACE_TxCpltCallback+0x104>
 801a9ea:	69bb      	ldr	r3, [r7, #24]
 801a9ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	f383 8810 	msr	PRIMASK, r3
}
 801a9f4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801a9f6:	f7e7 facd 	bl	8001f94 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801a9fa:	f000 f8a7 	bl	801ab4c <TRACE_UnLock>
  }
}
 801a9fe:	bf00      	nop
 801aa00:	bf00      	nop
 801aa02:	3720      	adds	r7, #32
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}
 801aa08:	20000f8c 	.word	0x20000f8c
 801aa0c:	20000fa4 	.word	0x20000fa4
 801aa10:	0801b6c8 	.word	0x0801b6c8

0801aa14 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801aa14:	b480      	push	{r7}
 801aa16:	b087      	sub	sp, #28
 801aa18:	af00      	add	r7, sp, #0
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	6039      	str	r1, [r7, #0]
 801aa1e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801aa20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa24:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa26:	f3ef 8310 	mrs	r3, PRIMASK
 801aa2a:	60fb      	str	r3, [r7, #12]
  return(result);
 801aa2c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801aa2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa30:	b672      	cpsid	i
}
 801aa32:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801aa34:	4b35      	ldr	r3, [pc, #212]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa36:	8a5a      	ldrh	r2, [r3, #18]
 801aa38:	4b34      	ldr	r3, [pc, #208]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa3a:	8a1b      	ldrh	r3, [r3, #16]
 801aa3c:	429a      	cmp	r2, r3
 801aa3e:	d11b      	bne.n	801aa78 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa40:	4b32      	ldr	r3, [pc, #200]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa42:	8a5b      	ldrh	r3, [r3, #18]
 801aa44:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa48:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801aa4a:	88fa      	ldrh	r2, [r7, #6]
 801aa4c:	8afb      	ldrh	r3, [r7, #22]
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	d33a      	bcc.n	801aac8 <TRACE_AllocateBufer+0xb4>
 801aa52:	4b2e      	ldr	r3, [pc, #184]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa54:	8a1b      	ldrh	r3, [r3, #16]
 801aa56:	88fa      	ldrh	r2, [r7, #6]
 801aa58:	429a      	cmp	r2, r3
 801aa5a:	d235      	bcs.n	801aac8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aa5c:	4b2b      	ldr	r3, [pc, #172]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa5e:	2201      	movs	r2, #1
 801aa60:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aa62:	4b2a      	ldr	r3, [pc, #168]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa64:	8a5a      	ldrh	r2, [r3, #18]
 801aa66:	4b29      	ldr	r3, [pc, #164]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa68:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aa6a:	4b28      	ldr	r3, [pc, #160]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa6c:	8a1b      	ldrh	r3, [r3, #16]
 801aa6e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aa70:	4b26      	ldr	r3, [pc, #152]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa72:	2200      	movs	r2, #0
 801aa74:	825a      	strh	r2, [r3, #18]
 801aa76:	e027      	b.n	801aac8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801aa78:	4b24      	ldr	r3, [pc, #144]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa7a:	8a5a      	ldrh	r2, [r3, #18]
 801aa7c:	4b23      	ldr	r3, [pc, #140]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa7e:	8a1b      	ldrh	r3, [r3, #16]
 801aa80:	429a      	cmp	r2, r3
 801aa82:	d91b      	bls.n	801aabc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801aa84:	4b21      	ldr	r3, [pc, #132]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa86:	8a5b      	ldrh	r3, [r3, #18]
 801aa88:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801aa8c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801aa8e:	88fa      	ldrh	r2, [r7, #6]
 801aa90:	8afb      	ldrh	r3, [r7, #22]
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d318      	bcc.n	801aac8 <TRACE_AllocateBufer+0xb4>
 801aa96:	4b1d      	ldr	r3, [pc, #116]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aa98:	8a1b      	ldrh	r3, [r3, #16]
 801aa9a:	88fa      	ldrh	r2, [r7, #6]
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	d213      	bcs.n	801aac8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801aaa0:	4b1a      	ldr	r3, [pc, #104]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aaa2:	2201      	movs	r2, #1
 801aaa4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801aaa6:	4b19      	ldr	r3, [pc, #100]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aaa8:	8a5a      	ldrh	r2, [r3, #18]
 801aaaa:	4b18      	ldr	r3, [pc, #96]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aaac:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801aaae:	4b17      	ldr	r3, [pc, #92]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aab0:	8a1b      	ldrh	r3, [r3, #16]
 801aab2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801aab4:	4b15      	ldr	r3, [pc, #84]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aab6:	2200      	movs	r2, #0
 801aab8:	825a      	strh	r2, [r3, #18]
 801aaba:	e005      	b.n	801aac8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801aabc:	4b13      	ldr	r3, [pc, #76]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aabe:	8a1a      	ldrh	r2, [r3, #16]
 801aac0:	4b12      	ldr	r3, [pc, #72]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aac2:	8a5b      	ldrh	r3, [r3, #18]
 801aac4:	1ad3      	subs	r3, r2, r3
 801aac6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801aac8:	8afa      	ldrh	r2, [r7, #22]
 801aaca:	88fb      	ldrh	r3, [r7, #6]
 801aacc:	429a      	cmp	r2, r3
 801aace:	d90f      	bls.n	801aaf0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801aad0:	4b0e      	ldr	r3, [pc, #56]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aad2:	8a5a      	ldrh	r2, [r3, #18]
 801aad4:	683b      	ldr	r3, [r7, #0]
 801aad6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801aad8:	4b0c      	ldr	r3, [pc, #48]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aada:	8a5a      	ldrh	r2, [r3, #18]
 801aadc:	88fb      	ldrh	r3, [r7, #6]
 801aade:	4413      	add	r3, r2
 801aae0:	b29b      	uxth	r3, r3
 801aae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aae6:	b29a      	uxth	r2, r3
 801aae8:	4b08      	ldr	r3, [pc, #32]	; (801ab0c <TRACE_AllocateBufer+0xf8>)
 801aaea:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801aaec:	2300      	movs	r3, #0
 801aaee:	82bb      	strh	r3, [r7, #20]
 801aaf0:	693b      	ldr	r3, [r7, #16]
 801aaf2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aaf4:	68bb      	ldr	r3, [r7, #8]
 801aaf6:	f383 8810 	msr	PRIMASK, r3
}
 801aafa:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801aafc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	371c      	adds	r7, #28
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bc80      	pop	{r7}
 801ab08:	4770      	bx	lr
 801ab0a:	bf00      	nop
 801ab0c:	20000f8c 	.word	0x20000f8c

0801ab10 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b085      	sub	sp, #20
 801ab14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab16:	f3ef 8310 	mrs	r3, PRIMASK
 801ab1a:	607b      	str	r3, [r7, #4]
  return(result);
 801ab1c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ab1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab20:	b672      	cpsid	i
}
 801ab22:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ab24:	4b08      	ldr	r3, [pc, #32]	; (801ab48 <TRACE_Lock+0x38>)
 801ab26:	8adb      	ldrh	r3, [r3, #22]
 801ab28:	3301      	adds	r3, #1
 801ab2a:	b29a      	uxth	r2, r3
 801ab2c:	4b06      	ldr	r3, [pc, #24]	; (801ab48 <TRACE_Lock+0x38>)
 801ab2e:	82da      	strh	r2, [r3, #22]
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	f383 8810 	msr	PRIMASK, r3
}
 801ab3a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ab3c:	bf00      	nop
 801ab3e:	3714      	adds	r7, #20
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bc80      	pop	{r7}
 801ab44:	4770      	bx	lr
 801ab46:	bf00      	nop
 801ab48:	20000f8c 	.word	0x20000f8c

0801ab4c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b085      	sub	sp, #20
 801ab50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab52:	f3ef 8310 	mrs	r3, PRIMASK
 801ab56:	607b      	str	r3, [r7, #4]
  return(result);
 801ab58:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ab5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab5c:	b672      	cpsid	i
}
 801ab5e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ab60:	4b08      	ldr	r3, [pc, #32]	; (801ab84 <TRACE_UnLock+0x38>)
 801ab62:	8adb      	ldrh	r3, [r3, #22]
 801ab64:	3b01      	subs	r3, #1
 801ab66:	b29a      	uxth	r2, r3
 801ab68:	4b06      	ldr	r3, [pc, #24]	; (801ab84 <TRACE_UnLock+0x38>)
 801ab6a:	82da      	strh	r2, [r3, #22]
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab70:	68bb      	ldr	r3, [r7, #8]
 801ab72:	f383 8810 	msr	PRIMASK, r3
}
 801ab76:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ab78:	bf00      	nop
 801ab7a:	3714      	adds	r7, #20
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	bc80      	pop	{r7}
 801ab80:	4770      	bx	lr
 801ab82:	bf00      	nop
 801ab84:	20000f8c 	.word	0x20000f8c

0801ab88 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ab88:	b480      	push	{r7}
 801ab8a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ab8c:	4b05      	ldr	r3, [pc, #20]	; (801aba4 <TRACE_IsLocked+0x1c>)
 801ab8e:	8adb      	ldrh	r3, [r3, #22]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	bf14      	ite	ne
 801ab94:	2301      	movne	r3, #1
 801ab96:	2300      	moveq	r3, #0
 801ab98:	b2db      	uxtb	r3, r3
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bc80      	pop	{r7}
 801aba0:	4770      	bx	lr
 801aba2:	bf00      	nop
 801aba4:	20000f8c 	.word	0x20000f8c

0801aba8 <__libc_init_array>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	4d0d      	ldr	r5, [pc, #52]	; (801abe0 <__libc_init_array+0x38>)
 801abac:	4c0d      	ldr	r4, [pc, #52]	; (801abe4 <__libc_init_array+0x3c>)
 801abae:	1b64      	subs	r4, r4, r5
 801abb0:	10a4      	asrs	r4, r4, #2
 801abb2:	2600      	movs	r6, #0
 801abb4:	42a6      	cmp	r6, r4
 801abb6:	d109      	bne.n	801abcc <__libc_init_array+0x24>
 801abb8:	4d0b      	ldr	r5, [pc, #44]	; (801abe8 <__libc_init_array+0x40>)
 801abba:	4c0c      	ldr	r4, [pc, #48]	; (801abec <__libc_init_array+0x44>)
 801abbc:	f000 f8a0 	bl	801ad00 <_init>
 801abc0:	1b64      	subs	r4, r4, r5
 801abc2:	10a4      	asrs	r4, r4, #2
 801abc4:	2600      	movs	r6, #0
 801abc6:	42a6      	cmp	r6, r4
 801abc8:	d105      	bne.n	801abd6 <__libc_init_array+0x2e>
 801abca:	bd70      	pop	{r4, r5, r6, pc}
 801abcc:	f855 3b04 	ldr.w	r3, [r5], #4
 801abd0:	4798      	blx	r3
 801abd2:	3601      	adds	r6, #1
 801abd4:	e7ee      	b.n	801abb4 <__libc_init_array+0xc>
 801abd6:	f855 3b04 	ldr.w	r3, [r5], #4
 801abda:	4798      	blx	r3
 801abdc:	3601      	adds	r6, #1
 801abde:	e7f2      	b.n	801abc6 <__libc_init_array+0x1e>
 801abe0:	0801bbb8 	.word	0x0801bbb8
 801abe4:	0801bbb8 	.word	0x0801bbb8
 801abe8:	0801bbb8 	.word	0x0801bbb8
 801abec:	0801bbbc 	.word	0x0801bbbc

0801abf0 <memset>:
 801abf0:	4402      	add	r2, r0
 801abf2:	4603      	mov	r3, r0
 801abf4:	4293      	cmp	r3, r2
 801abf6:	d100      	bne.n	801abfa <memset+0xa>
 801abf8:	4770      	bx	lr
 801abfa:	f803 1b01 	strb.w	r1, [r3], #1
 801abfe:	e7f9      	b.n	801abf4 <memset+0x4>

0801ac00 <floor>:
 801ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac04:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ac08:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ac0c:	2e13      	cmp	r6, #19
 801ac0e:	4602      	mov	r2, r0
 801ac10:	460b      	mov	r3, r1
 801ac12:	4607      	mov	r7, r0
 801ac14:	460c      	mov	r4, r1
 801ac16:	4605      	mov	r5, r0
 801ac18:	dc34      	bgt.n	801ac84 <floor+0x84>
 801ac1a:	2e00      	cmp	r6, #0
 801ac1c:	da15      	bge.n	801ac4a <floor+0x4a>
 801ac1e:	a334      	add	r3, pc, #208	; (adr r3, 801acf0 <floor+0xf0>)
 801ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac24:	f7e5 fab6 	bl	8000194 <__adddf3>
 801ac28:	2200      	movs	r2, #0
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	f7e5 fce6 	bl	80005fc <__aeabi_dcmpgt>
 801ac30:	b140      	cbz	r0, 801ac44 <floor+0x44>
 801ac32:	2c00      	cmp	r4, #0
 801ac34:	da59      	bge.n	801acea <floor+0xea>
 801ac36:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ac3a:	ea57 0503 	orrs.w	r5, r7, r3
 801ac3e:	d001      	beq.n	801ac44 <floor+0x44>
 801ac40:	4c2d      	ldr	r4, [pc, #180]	; (801acf8 <floor+0xf8>)
 801ac42:	2500      	movs	r5, #0
 801ac44:	4623      	mov	r3, r4
 801ac46:	462f      	mov	r7, r5
 801ac48:	e025      	b.n	801ac96 <floor+0x96>
 801ac4a:	4a2c      	ldr	r2, [pc, #176]	; (801acfc <floor+0xfc>)
 801ac4c:	fa42 f806 	asr.w	r8, r2, r6
 801ac50:	ea01 0208 	and.w	r2, r1, r8
 801ac54:	4302      	orrs	r2, r0
 801ac56:	d01e      	beq.n	801ac96 <floor+0x96>
 801ac58:	a325      	add	r3, pc, #148	; (adr r3, 801acf0 <floor+0xf0>)
 801ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac5e:	f7e5 fa99 	bl	8000194 <__adddf3>
 801ac62:	2200      	movs	r2, #0
 801ac64:	2300      	movs	r3, #0
 801ac66:	f7e5 fcc9 	bl	80005fc <__aeabi_dcmpgt>
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	d0ea      	beq.n	801ac44 <floor+0x44>
 801ac6e:	2c00      	cmp	r4, #0
 801ac70:	bfbe      	ittt	lt
 801ac72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ac76:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac7a:	19a4      	addlt	r4, r4, r6
 801ac7c:	ea24 0408 	bic.w	r4, r4, r8
 801ac80:	2500      	movs	r5, #0
 801ac82:	e7df      	b.n	801ac44 <floor+0x44>
 801ac84:	2e33      	cmp	r6, #51	; 0x33
 801ac86:	dd0a      	ble.n	801ac9e <floor+0x9e>
 801ac88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac8c:	d103      	bne.n	801ac96 <floor+0x96>
 801ac8e:	f7e5 fa81 	bl	8000194 <__adddf3>
 801ac92:	4607      	mov	r7, r0
 801ac94:	460b      	mov	r3, r1
 801ac96:	4638      	mov	r0, r7
 801ac98:	4619      	mov	r1, r3
 801ac9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac9e:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801aca2:	f04f 32ff 	mov.w	r2, #4294967295
 801aca6:	fa22 f808 	lsr.w	r8, r2, r8
 801acaa:	ea18 0f00 	tst.w	r8, r0
 801acae:	d0f2      	beq.n	801ac96 <floor+0x96>
 801acb0:	a30f      	add	r3, pc, #60	; (adr r3, 801acf0 <floor+0xf0>)
 801acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb6:	f7e5 fa6d 	bl	8000194 <__adddf3>
 801acba:	2200      	movs	r2, #0
 801acbc:	2300      	movs	r3, #0
 801acbe:	f7e5 fc9d 	bl	80005fc <__aeabi_dcmpgt>
 801acc2:	2800      	cmp	r0, #0
 801acc4:	d0be      	beq.n	801ac44 <floor+0x44>
 801acc6:	2c00      	cmp	r4, #0
 801acc8:	da02      	bge.n	801acd0 <floor+0xd0>
 801acca:	2e14      	cmp	r6, #20
 801accc:	d103      	bne.n	801acd6 <floor+0xd6>
 801acce:	3401      	adds	r4, #1
 801acd0:	ea25 0508 	bic.w	r5, r5, r8
 801acd4:	e7b6      	b.n	801ac44 <floor+0x44>
 801acd6:	2301      	movs	r3, #1
 801acd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801acdc:	fa03 f606 	lsl.w	r6, r3, r6
 801ace0:	4435      	add	r5, r6
 801ace2:	42bd      	cmp	r5, r7
 801ace4:	bf38      	it	cc
 801ace6:	18e4      	addcc	r4, r4, r3
 801ace8:	e7f2      	b.n	801acd0 <floor+0xd0>
 801acea:	2500      	movs	r5, #0
 801acec:	462c      	mov	r4, r5
 801acee:	e7a9      	b.n	801ac44 <floor+0x44>
 801acf0:	8800759c 	.word	0x8800759c
 801acf4:	7e37e43c 	.word	0x7e37e43c
 801acf8:	bff00000 	.word	0xbff00000
 801acfc:	000fffff 	.word	0x000fffff

0801ad00 <_init>:
 801ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad02:	bf00      	nop
 801ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad06:	bc08      	pop	{r3}
 801ad08:	469e      	mov	lr, r3
 801ad0a:	4770      	bx	lr

0801ad0c <_fini>:
 801ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad0e:	bf00      	nop
 801ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad12:	bc08      	pop	{r3}
 801ad14:	469e      	mov	lr, r3
 801ad16:	4770      	bx	lr
